[
  {
    "title": "Weighed Tree Radius",
    "url": "https://codeforces.com/problemset/problem/1783/G",
    "history": "You are given a tree of n vertices and n - 1 edges. The i - th vertex has an initial weight a_ i . Let the distance d_ v( u) from vertex v to vertex u be the number of edges on the path from v to u . Note that d_ v( u) = d_ u( v) and d_ v( v) = 0 . Let the weighted distance w_ v( u) from v to u be w_ v( u) = d_ v( u) + a_ u . Note that w_ v( v) = a_ v and w_ v( u) = \u0338 w_ u( v) if a_ u = \u0338 a_ v . Analogically to usual distance, let' s define the eccentricity e( v) of vertex v as the greatest weighted distance from v to any other vertex ( including v itself) , or e( v) = max_ 1 \u2264 u \u2264 nw_ v( u) . Finally, let' s define the radius r of the tree as the minimum eccentricity of any vertex, or r = min_ 1 \u2264 v \u2264 ne( v) . You need to perform m queries of the following form: v_ j x_ j \u2014 assign a_ v_ j = x_ j . After performing each query, print the radius r of the current tree.",
    "input": "The first line contains the single integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of vertices in the tree. The second line contains n integers a_ 1, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 6 ) \u2014 the initial weights of vertices. Next n - 1 lines contain edges of tree. The i - th line contains two integers u_ i and v_ i ( 1 \u2264 u_ i, v_ i \u2264 n ; u_ i = \u0338 v_ i ) \u2014 the corresponding edge. The given edges form a tree. The next line contains the single integer m ( 1 \u2264 m \u2264 10^ 5 ) \u2014 the number of queries. Next m lines contain queries \u2014 one query per line. The j - th query contains two integers v_ j and x_ j ( 1 \u2264 v_ j \u2264 n ; 0 \u2264 x_ j \u2264 10^ 6 ) \u2014 a vertex and it' s new weight.",
    "output": "Print m integers \u2014 the radius r of the tree after performing each query.",
    "note": "After the first query, you have the following tree: The marked vertex in the picture is the vertex with minimum e( v) , or r = e( 4) = 7 . The eccentricities of the other vertices are the following: e( 1) = 8 , e( 2) = 9 , e( 3) = 9 , e( 5) = 8 , e( 6) = 8 . The tree after the second query: The radius r = e( 1) = 4 . After the third query, the radius r = e( 2) = 5 :",
    "topics": [
      "data structures",
      "divide and conquer",
      "implementation",
      "trees"
    ],
    "id": "1783G"
  },
  {
    "title": "Game of the Year",
    "url": "https://codeforces.com/problemset/problem/1783/E",
    "history": "Monocarp and Polycarp are playing a computer game. This game features n bosses for the playing to kill, numbered from 1 to n . They will fight each boss the following way: Monocarp makes k attempts to kill the boss; Polycarp makes k attempts to kill the boss; Monocarp makes k attempts to kill the boss; Polycarp makes k attempts to kill the boss; . . . Monocarp kills the i - th boss on his a_ i - th attempt. Polycarp kills the i - th boss on his b_ i - th attempt. After one of them kills the i - th boss, they move on to the ( i+ 1) - st boss. The attempt counters reset for both of them. Once one of them kills the n - th boss, the game ends. Find all values of k from 1 to n such that Monocarp kills all bosses.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of testcases. The first line of each testcase contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of bosses. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 the index of attempt Monocarp kills each boss on. The third line contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 n ) \u2014 the index of attempt Polycarp kills each boss on. The sum of n over all testcases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each testcase, print two lines. The first line should contain a single integer cnt \u2014 the number of values of k from 1 to n such that Monocarp kills all bosses. The second line should contain cnt distinct integers \u2014 the values of k themselves.",
    "note": "Consider the last testcase of the example. Let k = 1 . First, Monocarp makes one attempt to kill the first boss. It' s successful, since a_ 1 = 1 . Then, Monocarp makes one attempt to kill the second boss. It' s unsuccessful, since a_ 2 > 1 . So, Polycarp makes an attempt then. It' s also unsuccessful, since b_ 2 > 1 . Then, Monocarp makes another attempt. It' s still unsuccessful, since a_ 2 > 2 . This goes on until Polycarp finally kills the boss on his third attempt. Monocarp didn' t kill this boss, thus, k = 1 isn' t the answer. Let k = 2 . Monocarp still kills the first boss on his first attempt. Then, he makes two unsuccessful attempts for the second boss. Then, Polycarp makes two unsuccessful attempts. Then, Monocarp makes two more attempts and kills the boss on his fourth attempt. The third boss is similar. First, two unsuccessful attempts by Monocarp. Then, two unsuccessful attempts by Polycarp. Then, Monocarp has two more attempts, but even his first one is successful, since a_ 3 = 3 . The fourth boss is also killed by Monocarp. Thus, k = 2 is the answer.",
    "topics": [
      "brute force",
      "data structures",
      "math",
      "number theory"
    ],
    "id": "1783E"
  },
  {
    "title": "Rectangle Shrinking",
    "url": "https://codeforces.com/problemset/problem/1781/E",
    "history": "You have a rectangular grid of height 2 and width 10^ 9 consisting of unit cells. There are n rectangles placed on this grid, and the borders of these rectangles pass along cell borders. The i - th rectangle covers all cells in rows from u_ i to d_ i inclusive and columns from l_ i to r_ i inclusive ( 1 \u2264 u_ i \u2264 d_ i \u2264 2 ; 1 \u2264 l_ i \u2264 r_ i \u2264 10^ 9 ) . The initial rectangles can intersect, be nested, and coincide arbitrarily. You should either remove each rectangle, or replace it with any of its non- empty subrectangles. In the latter case, the new subrectangle must lie inside the initial rectangle, and its borders must still pass along cell borders. In particular, it is allowed for the subrectangle to be equal to the initial rectangle. After that replacement, no two ( non- removed) rectangles are allowed to have common cells, and the total area covered with the new rectangles must be as large as possible. Illustration for the first test case. The initial rectangles are given at the top, the new rectangles are given at the bottom. Rectangle number 4 is removed.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . The description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of rectangles. Each of the next n lines contains four integers u_ i, l_ i, d_ i, r_ i ( 1 \u2264 u_ i \u2264 d_ i \u2264 2 ; 1 \u2264 l_ i \u2264 r_ i \u2264 10^ 9 ) \u2014 the coordinates of cells located in the top- left and the bottom- right corners of the rectangle, respectively. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, first print an integer s \u2014 the largest possible covered by new rectangles area. Then print n lines with your solution to cover this area. In the i - th of these lines print four integers u' _ i, l' _ i, d' _ i, r' _ i . If you remove the i - th rectangle, print u' _ i = l' _ i = d' _ i = r' _ i = 0 . Otherwise, these numbers denote the new coordinates of the top- left and the bottom- right corners of the i - th rectangle, satisfying u_ i \u2264 u' _ i \u2264 d' _ i \u2264 d_ i ; l_ i \u2264 l' _ i \u2264 r' _ i \u2264 r_ i . If there are multiple solutions, print any.",
    "note": "The picture in the statement illustrates the first test case.",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "greedy",
      "implementation",
      "two pointers"
    ],
    "id": "1781E"
  },
  {
    "title": "Boris and His Amazing Haircut",
    "url": "https://codeforces.com/problemset/problem/1779/D",
    "history": "Boris thinks that chess is a tedious game. So he left his tournament early and went to a barber shop as his hair was a bit messy. His current hair can be described by an array a_ 1, a_ 2, . . . , a_ n , where a_ i is the height of the hair standing at position i . His desired haircut can be described by an array b_ 1, b_ 2, . . . , b_ n in a similar fashion. The barber has m razors. Each has its own size and can be used at most once. In one operation, he chooses a razor and cuts a segment of Boris' s hair. More formally, an operation is: Choose any razor which hasn' t been used before, let its size be x ; Choose a segment [ l, r] ( 1\u2264 l \u2264 r \u2264 n ) ; Set a_ i : = min ( a_ i, x) for each l\u2264 i \u2264 r ; Notice that some razors might have equal sizes \u2014 the barber can choose some size x only as many times as the number of razors with size x . He may perform as many operations as he wants, as long as any razor is used at most once and a_ i = b_ i for each 1 \u2264 i \u2264 n at the end. He does not have to use all razors. Can you determine whether the barber can give Boris his desired haircut?",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 20 000 ) . The description of the test cases follows. The first line of each test case contains a positive integer n ( 3\u2264 n\u2264 2\u00b7 10^ 5 ) \u2014 the length of arrays a and b . The second line of each test case contains n positive integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 Boris' s current hair. The third line of each test case contains n positive integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 10^ 9 ) \u2014 Boris' s desired hair. The fourth line of each test case contains a positive integer m ( 1 \u2264 m \u2264 2\u00b7 10^ 5 ) \u2014 the number of razors. The fifth line of each test case contains m positive integers x_ 1, x_ 2, . . . , x_ m ( 1 \u2264 x_ i \u2264 10^ 9 ) \u2014 the sizes of the razors. It is guaranteed that the sum of n and the sum of m over all test cases do not exceed 2\u00b7 10^ 5 .",
    "output": "For each test case, print \" YES\" if the barber can cut Boris' s hair as desired. Otherwise, print \" NO\" . You can output the answer in any case ( upper or lower) . For example, the strings \" yEs\" , \" yes\" , \" Yes\" , and \" YES\" will be recognized as positive responses.",
    "note": "In the first test case, Boris' s hair is initially [ 3, 3, 3] . Let us describe a sequence of 2 operations the barber can perform: The barber uses the razor with size 1 on the segment [ 2, 2] ; hence Boris' s hair becomes [ 3, 1, 3] . The barber uses the razor with size 2 on the segment [ 1, 3] ; hence Boris' s hair becomes [ 2, 1, 2] which is the desired haircut. In the third test case, no operation has to be done since Boris' s hair is already as desired. In the fourth test case, no cuts will be able to increase the third element in [ 1, 1, 1] in a way that the array becomes [ 1, 1, 2] .",
    "topics": [
      "constructive algorithms",
      "data structures",
      "dp",
      "dsu",
      "greedy",
      "sortings"
    ],
    "id": "1779D"
  },
  {
    "title": "Least Prefix Sum",
    "url": "https://codeforces.com/problemset/problem/1779/C",
    "history": "Baltic, a famous chess player who is also a mathematician, has an array a_ 1, a_ 2, . . . , a_ n , and he can perform the following operation several ( possibly 0 ) times: Choose some index i ( 1 \u2264 i \u2264 n ) ; multiply a_ i with - 1 , that is, set a_ i : = - a_ i . Baltic' s favorite number is m , and he wants a_ 1 + a_ 2 + \u22ef + a_ m to be the smallest of all non- empty prefix sums. More formally, for each k = 1, 2, . . . , n it should hold that a_ 1 + a_ 2 + \u22ef + a_ k \u2265 a_ 1 + a_ 2 + \u22ef + a_ m. Please note that multiple smallest prefix sums may exist and that it is only required that a_ 1 + a_ 2 + \u22ef + a_ m is one of them. Help Baltic find the minimum number of operations required to make a_ 1 + a_ 2 + \u22ef + a_ m the least of all prefix sums. It can be shown that a valid sequence of operations always exists.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10 000 ) . The description of the test cases follows. The first line of each test case contains two integers n and m ( 1 \u2264 m \u2264 n \u2264 2\u00b7 10^ 5 ) \u2014 the size of Baltic' s array and his favorite number. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) \u2014 the array. It is guaranteed that the sum of n over all test cases does not exceed 2\u00b7 10^ 5 .",
    "output": "For each test case, print a single integer \u2014 the minimum number of required operations.",
    "note": "In the first example, we perform the operation a_ 4 : = - a_ 4 . The array becomes [ - 1, - 2, - 3, 4] and the prefix sums, [ a_ 1, a_ 1+ a_ 2, a_ 1+ a_ 2+ a_ 3, a_ 1+ a_ 2+ a_ 3+ a_ 4] , are equal to [ - 1, - 3, - 6, - 2] . Thus a_ 1 + a_ 2 + a_ 3= - 6 is the smallest of all prefix sums. In the second example, we perform the operation a_ 3 : = - a_ 3 . The array becomes [ 1, 2, - 3, 4] with prefix sums equal to [ 1, 3, 0, 4] . In the third and fourth examples, a_ 1 + a_ 2 + \u22ef + a_ m is already the smallest of the prefix sums \u2014 no operation needs to be performed. In the fifth example, a valid sequence of operations is: a_ 3 : = - a_ 3 , a_ 2 : = - a_ 2 , a_ 5 : = - a_ 5 . The array becomes [ - 2, - 3, 5, - 5, 20] and its prefix sums are [ - 2, - 5, 0, - 5, 15] . Note that a_ 1+ a_ 2= - 5 and a_ 1+ a_ 2+ a_ 3+ a_ 4= - 5 are both the smallest of the prefix sums ( and this is a valid solution) .",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "1779C"
  },
  {
    "title": "Segment Covering",
    "url": "https://codeforces.com/problemset/problem/1774/G",
    "history": "ChthollyNotaSeniorious gives DataStructures a number axis with m distinct segments on it. Let f( l, r) be the number of ways to choose an even number of segments such that the union of them is exactly [ l, r] , and g( l, r) be the number of ways to choose an odd number of segments such that the union of them is exactly [ l, r] . ChthollyNotaSeniorious asked DataStructures q questions. In each query, ChthollyNotaSeniorious will give DataStructures two numbers l, r , and now he wishes that you can help him find the value f( l, r) - g( l, r) modulo 998 244 353 so that he wouldn' t let her down.",
    "input": "The first line of input contains two integers m ( 1 \u2264 m \u2264 2 \u00b7 10^ 5 ) and q ( 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of segments and queries, correspondingly. The i - th of the next m lines contains two integers x_ i and y_ i ( 1 \u2264 x_ i < y_ i \u2264 10^ 9 ) , denoting a segment [ x_ i, y_ i] . It is guaranteed that all segments are distinct. More formally, there do not exist two numbers i, j with 1 \u2264 i < j \u2264 m such that x_ i = x_ j and y_ i = y_ j . The i - th of the next q lines contains two integers l_ i and r_ i ( 1 \u2264 l_ i < r_ i \u2264 10^ 9 ) , describing a query.",
    "output": "For each query, output a single integer \u2014 f( l_ i, r_ i) - g( l_ i, r_ i) modulo 998 244 353 .",
    "note": "In the first query, we have to find f( 1, 4) - g( 1, 4) . The only subset of segments with union [ 1, 4] is { [ 1, 3] , [ 2, 4] } , so f( 1, 4) = 1, g( 1, 4) = 0 . In the second query, we have to find f( 1, 5) - g( 1, 5) . The only subsets of segments with union [ 1, 5] are { [ 1, 3] , [ 2, 4] , [ 3, 5] } and { [ 1, 3] , [ 3, 5] } , so f( 1, 5) = 1, g( 1, 5) = 1 .",
    "topics": [
      "brute force",
      "combinatorics",
      "constructive algorithms",
      "data structures",
      "dp",
      "trees"
    ],
    "id": "1774G"
  },
  {
    "title": "Magician and Pigs (Hard Version)",
    "url": "https://codeforces.com/problemset/problem/1774/F2",
    "history": "This is the hard version of the problem. The only difference between the two versions is the constraint on n and x . You can make hacks only if both versions of the problem are solved. Little09 has been interested in magic for a long time, and it' s so lucky that he meets a magician! The magician will perform n operations, each of them is one of the following three: 1 x : Create a pig with x Health Points. 2 x : Reduce the Health Point of all living pigs by x . 3 : Repeat all previous operations. Formally, assuming that this is the i - th operation in the operation sequence, perform the first i- 1 operations ( including \" Repeat\" operations involved) in turn. A pig will die when its Health Point is less than or equal to 0 . Little09 wants to know how many living pigs there are after all the operations. Please, print the answer modulo 998 244 353 .",
    "input": "The first line contains a single integer n ( 1\u2264 n\u2264 8\u00b7 10^ 5 ) \u2014 the number of operations. Each of the following n lines contains an operation given in the form described in the problem statement. It' s guaranteed that 1\u2264 x\u2264 10^ 9 in operations of the first two types.",
    "output": "Print a single integer \u2014 the number of living pigs after all the operations, modulo 998 244 353 .",
    "note": "In the first example, the operations are equivalent to repeating four times: create a pig with 8 Health Points and then reduce the Health Points of all living pigs by 3 . It is easy to find that there are two living pigs in the end with 2 and 5 Health Points.",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "implementation"
    ],
    "id": "1774F2"
  },
  {
    "title": "Magician and Pigs (Easy Version)",
    "url": "https://codeforces.com/problemset/problem/1774/F1",
    "history": "This is the easy version of the problem. The only difference between the two versions is the constraint on n and x . You can make hacks only if both versions of the problem are solved. Little09 has been interested in magic for a long time, and it' s so lucky that he meets a magician! The magician will perform n operations, each of them is one of the following three: 1 x : Create a pig with x Health Points. 2 x : Reduce the Health Point of all living pigs by x . 3 : Repeat all previous operations. Formally, assuming that this is the i - th operation in the operation sequence, perform the first i- 1 operations ( including \" Repeat\" operations involved) in turn. A pig will die when its Health Point is less than or equal to 0 . Little09 wants to know how many living pigs there are after all the operations. Please, print the answer modulo 998 244 353 .",
    "input": "The first line contains a single integer n ( 1\u2264 n\u2264 2\u00b7 10^ 5 ) \u2014 the number of operations. Each of the following n lines contains an operation given in the form described in the problem statement. It' s guaranteed that 1\u2264 x\u2264 2\u00b7 10^ 5 in operations of the first two types.",
    "output": "Print a single integer \u2014 the number of living pigs after all the operations, modulo 998 244 353 .",
    "note": "In the first example, the operations are equivalent to repeating four times: create a pig with 8 Health Points and then reduce the Health Points of all living pigs by 3 . It is easy to find that there are two living pigs in the end with 2 and 5 Health Points.",
    "topics": [
      "brute force",
      "data structures",
      "implementation"
    ],
    "id": "1774F1"
  },
  {
    "title": "Hossam and Range Minimum Query",
    "url": "https://codeforces.com/problemset/problem/1771/F",
    "history": "Hossam gives you a sequence of integers a_ 1, a_ 2, . . . , a_ n of length n . Moreover, he will give you q queries of type ( l, r) . For each query, consider the elements a_ l, a_ l + 1, . . . , a_ r . Hossam wants to know the smallest number in this sequence, such that it occurs in this sequence an odd number of times. You need to compute the answer for each query before process the next query.",
    "input": "The first line of the input contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) , the length of the sequence. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) . The third line contains one integer q ( 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) , the number of queries. Each of the next q lines contains two integers a and b ( 0 \u2264 a, b \u2264 2 \u00b7 10^ 9 ) , the numbers used to encode the queries. Let ans_ i be the answer on the i - th query, and ans_ 0 be zero. Then l_ i = a_ i \u2295ans_ i - 1, r_ i = b_ i \u2295ans_ i - 1, where l_ i, r_ i are parameters of the i - th query and \u2295 means the bitwise exclusive or operation. It is guaranteed that 1 \u2264 l \u2264 r \u2264 n .",
    "output": "For each query, print the smallest number that occurs an odd number of times on the given segment of the sequence. If there is no such number, print 0 .",
    "note": "In the example, l_ 1 = 1, r_ 1 = 2, l_ 2 = 1, r_ 2 = 3, l_ 3 = 2, r_ 3 = 4, l_ 4 = 1, r_ 4 = 4, l_ 5 = 2, r_ 5 = 2, l_ 6 = 1, r_ 6 = 5.",
    "topics": [
      "binary search",
      "bitmasks",
      "data structures",
      "hashing",
      "probabilities",
      "strings",
      "trees"
    ],
    "id": "1771F"
  },
  {
    "title": "Hossam and (sub-)palindromic tree",
    "url": "https://codeforces.com/problemset/problem/1771/D",
    "history": "Hossam has an unweighted tree G with letters in vertices. Hossam defines s( v, u) as a string that is obtained by writing down all the letters on the unique simple path from the vertex v to the vertex u in the tree G . A string a is a subsequence of a string s if a can be obtained from s by deletion of several ( possibly, zero) letters. For example, \" dores\" , \" cf\" , and \" for\" are subsequences of \" codeforces\" , while \" decor\" and \" fork\" are not. A palindrome is a string that reads the same from left to right and from right to left. For example, \" abacaba\" is a palindrome, but \" abac\" is not. Hossam defines a sub- palindrome of a string s as a subsequence of s , that is a palindrome. For example, \" k\" , \" abba\" and \" abhba\" are sub- palindromes of the string \" abhbka\" , but \" abka\" and \" cat\" are not. Hossam defines a maximal sub- palindrome of a string s as a sub- palindrome of s , which has the maximal length among all sub- palindromes of s . For example, \" abhbka\" has only one maximal sub- palindrome \u2014 \" abhba\" . But it may also be that the string has several maximum sub- palindromes: the string \" abcd\" has 4 maximum sub- palindromes. Help Hossam find the length of the longest maximal sub- palindrome among all s( v, u) in the tree G . Note that the sub- palindrome is a subsequence, not a substring.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 200 ) \u2014 the number of test cases. The first line of each test case has one integer number n ( 1 \u2264 n \u2264 2 \u00b7 10^ 3 ) \u2014 the number of vertices in the graph. The second line contains a string s of length n , the i - th symbol of which denotes the letter on the vertex i . It is guaranteed that all characters in this string are lowercase English letters. The next n - 1 lines describe the edges of the tree. Each edge is given by two integers v and u ( 1 \u2264 v, u \u2264 n , v = \u0338 u ) . These two numbers mean that there is an edge ( v, u) in the tree. It is guaranteed that the given edges form a tree. It is guaranteed that sum of all n doesn' t exceed 2 \u00b7 10^ 3 .",
    "output": "For each test case output one integer \u2014 the length of the longest maximal sub- palindrome among all s( v, u) .",
    "note": "In the first example the maximal subpalindromes are \" aaa\" with letters in vertices 1, 3, 5 , or \" aca\" with letters in vertices 1, 4, 5 . The tree from the first example. In the second example there is only one maximal palindrome \" bacab\" with letters in vertices 4, 2, 1, 5, 9 . The tree from the second example.",
    "topics": [
      "brute force",
      "data structures",
      "dfs and similar",
      "dp",
      "strings",
      "trees"
    ],
    "id": "1771D"
  },
  {
    "title": "Koxia and Game",
    "url": "https://codeforces.com/problemset/problem/1770/D",
    "history": "Koxia and Mahiru are playing a game with three arrays a , b , and c of length n . Each element of a , b and c is an integer between 1 and n inclusive. The game consists of n rounds. In the i - th round, they perform the following moves: Let S be the multiset { a_ i, b_ i, c_ i} . Koxia removes one element from the multiset S by her choice. Mahiru chooses one integer from the two remaining in the multiset S . Let d_ i be the integer Mahiru chose in the i - th round. If d is a permutation ^ \u2020 , Koxia wins. Otherwise, Mahiru wins. Currently, only the arrays a and b have been chosen. As an avid supporter of Koxia, you want to choose an array c such that Koxia will win. Count the number of such c , modulo 998 244 353 . Note that Koxia and Mahiru both play optimally. ^ \u2020 A permutation of length n is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [ 2, 3, 1, 5, 4] is a permutation, but [ 1, 2, 2] is not a permutation ( 2 appears twice in the array) , and [ 1, 3, 4] is also not a permutation ( n= 3 but there is 4 in the array) .",
    "input": "Each test consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 4 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u226410^ 5 ) \u2014 the size of the arrays. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) . The third line of each test case contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 n ) . It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "Output a single integer \u2014 the number of c makes Koxia win, modulo 998 244 353 .",
    "note": "In the first test case, there are 6 possible arrays c that make Koxia win \u2014 [ 1, 2, 3] , [ 1, 3, 2] , [ 2, 2, 3] , [ 2, 3, 2] , [ 3, 2, 3] , [ 3, 3, 2] . In the second test case, it can be proved that no array c makes Koxia win.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "dfs and similar",
      "dsu",
      "flows",
      "games",
      "graph matchings",
      "graphs",
      "implementation"
    ],
    "id": "1770D"
  },
  {
    "title": "Two Subtrees",
    "url": "https://codeforces.com/problemset/problem/1767/F",
    "history": "You are given a rooted tree consisting of n vertices. The vertex 1 is the root. Each vertex has an integer written on it; this integer is val_ i for the vertex i . You are given q queries to the tree. The i - th query is represented by two vertices, u_ i and v_ i . To answer the query, consider all vertices w that lie in the subtree of u_ i or v_ i ( if a vertex is in both subtrees, it is counted twice) . For all vertices in these two subtrees, list all integers written on them, and find the integer with the maximum number of occurrences. If there are multiple integers with maximum number of occurrences, the minimum among them is the answer.",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of vertices in the tree. The second line contains n integers val_ 1, val_ 2, . . . , val_ n ( 1 \u2264 val_ i \u2264 2 \u00b7 10^ 5 ) \u2014 the numbers written on the vertices. Then n - 1 lines follow, each containing two integers x and y ( 1 \u2264 x, y \u2264 n ) representing an edge between vertices x and y . These edges form a tree. The next line contains one integer q ( 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of queries to process. Then q lines follow. The i - th of them containing two numbers u_ i and v_ i ( 1 \u2264 u_ i, v_ i \u2264 n ) \u2014 the roots of subtrees in the i - th query.",
    "output": "For each query, print one integer \u2014 the number that has the maximum amount of occurrences in the corresponding pair of subtrees ( if there are multiple such numbers, print the minimum one among them) .",
    "note": "In the 1 - st query, the pair of subtrees consists of vertices [ 2, 4, 7, 8] , and the numbers written on them are { 1, 2, 2, 4} . The number 2 occurs twice, all other numbers \u2014 at most once, so the answer is 2 . In the 2 - nd query, the pair of subtrees consists of vertices [ 3, 5, 6, 7, 7, 8, 8] , and the numbers written on them are { 3, 3, 3, 2, 2, 4, 4} . The number 3 has the maximum number of occurrences. In the 4 - th query, the pair of subtrees consists of vertices [ 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8] , and the numbers written on them are { 2, 2, 1, 1, 3, 3, 2, 2, 3, 3, 3, 3, 2, 2, 4, 4} . The numbers 2 and 3 are the most common, the minimum of them is 2 .",
    "topics": [
      "data structures",
      "trees"
    ],
    "id": "1767F"
  },
  {
    "title": "Count Binary Strings",
    "url": "https://codeforces.com/problemset/problem/1767/C",
    "history": "You are given an integer n . You have to calculate the number of binary ( consisting of characters 0 and/ or 1) strings s meeting the following constraints. For every pair of integers ( i, j) such that 1 \u2264 i \u2264 j \u2264 n , an integer a_ i, j is given. It imposes the following constraint on the string s_ i s_ i+ 1 s_ i+ 2. . . s_ j : if a_ i, j = 1 , all characters in s_ i s_ i+ 1 s_ i+ 2. . . s_ j should be the same; if a_ i, j = 2 , there should be at least two different characters in s_ i s_ i+ 1 s_ i+ 2. . . s_ j ; if a_ i, j = 0 , there are no additional constraints on the string s_ i s_ i+ 1 s_ i+ 2. . . s_ j . Count the number of binary strings s of length n meeting the aforementioned constraints. Since the answer can be large, print it modulo 998244353 .",
    "input": "The first line contains one integer n ( 2 \u2264 n \u2264 100 ) . Then n lines follow. The i - th of them contains n- i+ 1 integers a_ i, i, a_ i, i+ 1, a_ i, i+ 2, . . . , a_ i, n ( 0 \u2264 a_ i, j\u2264 2 ) .",
    "output": "Print one integer \u2014 the number of strings meeting the constraints, taken modulo 998244353 .",
    "note": "In the first example, the strings meeting the constraints are 001, 010, 011, 100, 101, 110. In the second example, the strings meeting the constraints are 001, 110.",
    "topics": [
      "data structures",
      "dp"
    ],
    "id": "1767C"
  },
  {
    "title": "Block Towers",
    "url": "https://codeforces.com/problemset/problem/1767/B",
    "history": "There are n block towers, numbered from 1 to n . The i - th tower consists of a_ i blocks. In one move, you can move one block from tower i to tower j , but only if a_ i > a_ j . That move increases a_ j by 1 and decreases a_ i by 1 . You can perform as many moves as you would like ( possibly, zero) . What' s the largest amount of blocks you can have on the tower 1 after the moves?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of testcases. The first line of each testcase contains a single integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of towers. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the number of blocks on each tower. The sum of n over all testcases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each testcase, print the largest amount of blocks you can have on the tower 1 after you make any number of moves ( possibly, zero) .",
    "note": "In the first testcase, you can move a block from tower 2 to tower 1 , making the block counts [ 2, 1, 3] . Then move a block from tower 3 to tower 1 , making the block counts [ 3, 1, 2] . Tower 1 has 3 blocks in it, and you can' t obtain a larger amount. In the second testcase, you can move a block from any of towers 2 or 3 to tower 1 , so that it has 2 blocks in it. In the third testcase, you can 500000000 times move a block from tower 2 to tower 1 . After that the block countes will be [ 500000001, 500000000] .",
    "topics": [
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "1767B"
  },
  {
    "title": "Decomposition",
    "url": "https://codeforces.com/problemset/problem/1766/E",
    "history": "For a sequence of integers [ x_ 1, x_ 2, . . . , x_ k] , let' s define its decomposition as follows: Process the sequence from the first element to the last one, maintaining the list of its subsequences. When you process the element x_ i , append it to the end of the first subsequence in the list such that the bitwise AND of its last element and x_ i is greater than 0 . If there is no such subsequence in the list, create a new subsequence with only one element x_ i and append it to the end of the list of subsequences. For example, let' s analyze the decomposition of the sequence [ 1, 3, 2, 0, 1, 3, 2, 1] : processing element 1 , the list of subsequences is empty. There is no subsequence to append 1 to, so we create a new subsequence [ 1] ; processing element 3 , the list of subsequences is [ [ 1] ] . Since the bitwise AND of 3 and 1 is 1 , the element is appended to the first subsequence; processing element 2 , the list of subsequences is [ [ 1, 3] ] . Since the bitwise AND of 2 and 3 is 2 , the element is appended to the first subsequence; processing element 0 , the list of subsequences is [ [ 1, 3, 2] ] . There is no subsequence to append 0 to, so we create a new subsequence [ 0] ; processing element 1 , the list of subsequences is [ [ 1, 3, 2] , [ 0] ] . There is no subsequence to append 1 to, so we create a new subsequence [ 1] ; processing element 3 , the list of subsequences is [ [ 1, 3, 2] , [ 0] , [ 1] ] . Since the bitwise AND of 3 and 2 is 2 , the element is appended to the first subsequence; processing element 2 , the list of subsequences is [ [ 1, 3, 2, 3] , [ 0] , [ 1] ] . Since the bitwise AND of 2 and 3 is 2 , the element is appended to the first subsequence; processing element 1 , the list of subsequences is [ [ 1, 3, 2, 3, 2] , [ 0] , [ 1] ] . The element 1 cannot be appended to any of the first two subsequences, but can be appended to the third one. The resulting list of subsequences is [ [ 1, 3, 2, 3, 2] , [ 0] , [ 1, 1] ] . Let f( [ x_ 1, x_ 2, . . . , x_ k] ) be the number of subsequences the sequence [ x_ 1, x_ 2, . . . , x_ k] is decomposed into. Now, for the problem itself. You are given a sequence [ a_ 1, a_ 2, . . . , a_ n] , where each element is an integer from 0 to 3 . Let a[ i. . j] be the sequence [ a_ i, a_ i+ 1, . . . , a_ j] . You have to calculate \u2211_ i= 1^ n \u2211_ j= i^ n f( a[ i. . j] ) .",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 3 \u00b7 10^ 5 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 3 ) .",
    "output": "Print one integer, which should be equal to \u2211_ i= 1^ n \u2211_ j= i^ n f( a[ i. . j] ) .",
    "note": "",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "divide and conquer",
      "dp",
      "two pointers"
    ],
    "id": "1766E"
  },
  {
    "title": "Project Manager",
    "url": "https://codeforces.com/problemset/problem/1765/L",
    "history": "There are n employees at Bersoft company, numbered from 1 to n . Each employee works on some days of the week and rests on the other days. You are given the lists of working days of the week for each employee. There are regular days and holidays. On regular days, only those employees work that have the current day of the week on their list. On holidays, no one works. You are provided with a list of days that are holidays. The days are numbered from 1 onwards, day 1 is Monday. The company receives k project offers they have to complete. The projects are numbered from 1 to k in the order of decreasing priority. Each project consists of multiple parts, where the i - th part must be completed by the a_ i - th employee. The parts must be completed in order ( i. e. the ( i+ 1) - st part can only be started when the i - th part is completed) . Each part takes the corresponding employee a day to complete. The projects can be worked on simultaneously. However, one employee can complete a part of only one project during a single day. If they have a choice of what project to complete a part on, they always go for the project with the highest priority ( the lowest index) . For each project, output the day that project will be completed on.",
    "input": "The first line contains three integers n, m and k ( 1 \u2264 n, m, k \u2264 2 \u00b7 10^ 5 ) \u2014 the number of employees, the number of holidays and the number of projects. The i - th of the next n lines contains the list of working days of the i - th employee. First, a single integer t ( 1 \u2264 t \u2264 7 ) \u2014 the number of working days. Then t days of the week in the increasing order. The possible days are: \" Monday\" , \" Tuesday\" , \" Wednesday\" , \" Thursday\" , \" Friday\" , \" Saturday\" , \" Sunday\" . The next line contains m integers h_ 1, h_ 2, . . . , h_ m ( 1 \u2264 h_ 1 < h_ 2 < . . . < h_ m \u2264 10^ 9 ) \u2014 the list of holidays. The j - th of the next k lines contains a description of the j - th project. It starts with an integer p ( 1 \u2264 p \u2264 2 \u00b7 10^ 5 ) \u2014 the number of parts in the project. Then p integers a_ 1, a_ 2, . . . , a_ p ( 1 \u2264 a_ x \u2264 n ) follow, where p_ i is the index of the employee that must complete the i - th part. The total number of parts in all projects doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "Print k integers \u2014 the j - th value should be equal to the day the j - th project is completed on.",
    "note": "",
    "topics": [
      "brute force",
      "data structures",
      "implementation"
    ],
    "id": "1765L"
  },
  {
    "title": "Doremy's Paint 2",
    "url": "https://codeforces.com/problemset/problem/1764/H",
    "history": "Doremy has n buckets of paint which is represented by an array a of length n . Bucket i contains paint with color a_ i . Initially, a_ i= i . Doremy has m segments [ l_ i, r_ i] ( 1 \u2264 l_ i \u2264 r_ i \u2264 n ) . Each segment describes an operation. Operation i is performed as follows: For each j such that l_ i < j \u2264 r_ i , set a_ j : = a_ l_ i . Doremy also selects an integer k . She wants to know for each integer x from 0 to m- 1 , the number of distinct colors in the array after performing operations x m + 1, ( x+ 1) m + 1, . . . , ( x+ k- 1) m + 1 . Can you help her calculate these values? Note that for each x individually we start from the initial array and perform only the given k operations in the given order.",
    "input": "The first line of input contains three integers n , m , and k ( 1\u2264 n, m\u2264 2\u00b7 10^ 5 , 1 \u2264 k \u2264 m ) \u2014 the length of the array a , the total number of operations, and the integer that Doremy selects. The i - th line of the following m lines contains two integers l_ i , r_ i ( 1\u2264 l_ i\u2264 r_ i\u2264 n ) \u2014 the bounds of the i - th segment.",
    "output": "Output m integers. The ( x+ 1) - th integer should be the number of distinct colors in the array if we start from the initial array and perform operations x m + 1, ( x+ 1) m + 1, . . . , ( x+ k- 1) m + 1 .",
    "note": "In the first test case, the picture below shows the resulting array for the values of x= 0, 1, 2 respectively.",
    "topics": [
      "data structures"
    ],
    "id": "1764H"
  },
  {
    "title": "Edge Queries",
    "url": "https://codeforces.com/problemset/problem/1763/F",
    "history": "You are given an undirected, connected graph of n nodes and m edges. All nodes u of the graph satisfy the following: Let S_ u be the set of vertices in the longest simple cycle starting and ending at u . Let C_ u be the union of the sets of vertices in any simple cycle starting and ending at u . S_ u = C_ u . You need to answer q queries. For each query, you will be given node a and node b . Out of all the edges that belong to any simple path from a to b , count the number of edges such that if you remove that edge, a and b are reachable from each other.",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 m \u2264min ( 2 \u00b7 10^ 5 , ( n \u00b7 ( n- 1) ) / 2 ) ) \u2014 the total number of nodes and edges in the graph, respectively. The next m lines contain two integers u and v ( 1 \u2264 u , v \u2264 n , u = \u0338 v ) \u2014 describing an edge, implying that nodes u and v are connected to each other. It is guaranteed that there is at most one edge between any pair of vertices in the graph and the given graph is connected. The next line contains a single integer q ( 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of queries. Then q lines follow, each representing a query. Each query contains two integers a and b ( 1 \u2264 a , b \u2264 n ) .",
    "output": "For each query, output a single integer \u2014 answer to the query.",
    "note": "The graph in the first sample is : The first query is ( 1, 4) . There are 5 total edges that belong to any simple path from 1 to 4 . Edges ( 3, 4) , ( 4, 5) , ( 5, 3) will be counted in the answer to the query. The fourth query is ( 2, 8) . There is only one simple path from 2 to 8 , thus none of the edges will be counted in the answer to the query. The fifth query is ( 7, 10) . There are 4 total edges that belong to any simple path from 7 to 10 , all of them will be counted in the answer to the query.",
    "topics": [
      "data structures",
      "dfs and similar",
      "dp",
      "dsu",
      "graphs",
      "trees"
    ],
    "id": "1763F"
  },
  {
    "title": "Incinerate",
    "url": "https://codeforces.com/problemset/problem/1763/B",
    "history": "To destroy humanity, The Monster Association sent n monsters to Earth' s surface. The i - th monster has health h_ i and power p_ i . With his last resort attack, True Spiral Incineration Cannon, Genos can deal k damage to all monsters alive. In other words, Genos can reduce the health of all monsters by k ( if k > 0 ) with a single attack. However, after every attack Genos makes, the monsters advance. With their combined efforts, they reduce Genos' attack damage by the power of the ^ \u2020 weakest monster ^ alive. In other words, the minimum p_ i among all currently living monsters is subtracted from the value of k after each attack. ^ \u2020 The Weakest monster is the one with the least power. ^ A monster is alive if its health is strictly greater than 0 . Will Genos be successful in killing all the monsters?",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains two integers, n and k ( 1 \u2264 n, k \u2264 10^ 5 ) \u2014 the number of monsters and Genos' initial attack damage. Then two lines follow, each containing n integers describing the arrays h and p ( 1 \u2264 h_ i, p_ i \u2264 10^ 9 ) . It' s guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print the answer \u2014 \" YES\" ( without quotes) if Genos could kill all monsters and \" NO\" otherwise.",
    "note": "In the first example, after Genos' first attack, h and k will update to: h: [ 11, 0, 6, 2, 3, 0] k: 7- 1 = 6 After second attack: h: [ 5, 0, 0, 0, 0, 0] k: 6- 2 = 4 After third attack: h: [ 1, 0, 0, 0, 0, 0] k: 4- 2 = 2 After fourth attack: h: [ 0, 0, 0, 0, 0, 0] As Genos could kill all monsters, the answer is YES.",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "implementation",
      "math",
      "sortings"
    ],
    "id": "1763B"
  },
  {
    "title": "Good Pairs ",
    "url": "https://codeforces.com/problemset/problem/1762/F",
    "history": "You are given an array a consisting of n integers and an integer k . A pair ( l, r) is good if there exists a sequence of indices i_ 1, i_ 2, . . . , i_ m such that i_ 1= l and i_ m= r ; i_ j < i_ j+ 1 for all 1 \u2264 j < m ; and | a_ i_ j- a_ i_ j+ 1| \u2264 k for all 1 \u2264 j < m . Find the number of pairs ( l, r) ( 1 \u2264 l \u2264 r \u2264 n ) that are good.",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains two space- separated integers n and k ( 1 \u2264 n \u2264 5 \u00b7 10^ 5 ; 0 \u2264 k \u2264 10^ 5 ) \u2014 the length of the array a and the integer k . The second line of each test case contains n space- separated integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 5 ) \u2014 representing the array a . It is guaranteed that the sum of n over all test cases does not exceed 5 \u00b7 10^ 5 .",
    "output": "For each test case, print the number of good pairs.",
    "note": "In the first test case, good pairs are ( 1, 1) , ( 1, 2) , ( 1, 3) , ( 2, 2) , ( 2, 3) , and ( 3, 3) . In the second test case, good pairs are ( 1, 1) , ( 1, 3) , ( 1, 4) , ( 2, 2) , ( 2, 3) , ( 2, 4) , ( 3, 3) , ( 3, 4) and ( 4, 4) . Pair ( 1, 4) is good because there exists a sequence of indices 1, 3, 4 which satisfy the given conditions.",
    "topics": [
      "binary search",
      "data structures",
      "dp"
    ],
    "id": "1762F"
  },
  {
    "title": "Binary Inversions",
    "url": "https://codeforces.com/problemset/problem/1760/E",
    "history": "You are given a binary array ^ \u2020 of length n . You are allowed to perform one operation on it at most once. In an operation, you can choose any element and flip it: turn a 0 into a 1 or vice- versa. What is the maximum number of inversions ^ the array can have after performing at most one operation? ^ \u2020 A binary array is an array that contains only zeroes and ones. ^ The number of inversions in an array is the number of pairs of indices i, j such that i< j and a_ i > a_ j .",
    "input": "The input consists of multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 2\u00b710^ 5 ) \u2014 the length of the array. The following line contains n space- separated positive integers a_ 1 , a_ 2 , . . . , a_ n ( 0 \u2264 a_ i \u2264 1 ) \u2014 the elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 2\u00b710^ 5 .",
    "output": "For each test case, output a single integer \u2014 the maximum number of inversions the array can have after performing at most one operation.",
    "note": "For the first test case, the inversions are initially formed by the pairs of indices ( 1, 2 ) , ( 1, 4 ) , ( 3, 4 ) , being a total of 3 , which already is the maximum possible. For the second test case, the inversions are initially formed by the pairs of indices ( 2, 3 ) , ( 2, 4 ) , ( 2, 6 ) , ( 5, 6 ) , being a total of four. But, by flipping the first element, the array becomes 1, 1, 0, 0, 1, 0 , which has the inversions formed by the pairs of indices ( 1, 3 ) , ( 1, 4 ) , ( 1, 6 ) , ( 2, 3 ) , ( 2, 4 ) , ( 2, 6 ) , ( 5, 6 ) which total to 7 inversions which is the maximum possible.",
    "topics": [
      "data structures",
      "greedy",
      "math"
    ],
    "id": "1760E"
  },
  {
    "title": "Advantage",
    "url": "https://codeforces.com/problemset/problem/1760/C",
    "history": "There are n participants in a competition, participant i having a strength of s_ i . Every participant wonders how much of an advantage they have over the other best participant. In other words, each participant i wants to know the difference between s_ i and s_ j , where j is the strongest participant in the competition, not counting i ( a difference can be negative) . So, they ask you for your help! For each i ( 1 \u2264 i \u2264 n ) output the difference between s_ i and the maximum strength of any participant other than participant i .",
    "input": "The input consists of multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The descriptions of the test cases follow. The first line of each test case contains an integer n ( 2 \u2264 n \u2264 2\u00b710^ 5 ) \u2014 the length of the array. The following line contains n space- separated positive integers s_ 1 , s_ 2 , . . . , s_ n ( 1 \u2264 s_ i \u2264 10^ 9 ) \u2014 the strengths of the participants. It is guaranteed that the sum of n over all test cases does not exceed 2\u00b710^ 5 .",
    "output": "For each test case, output n space- separated integers. For each i ( 1 \u2264 i \u2264 n ) output the difference between s_ i and the maximum strength of any other participant.",
    "note": "For the first test case: The first participant has a strength of 4 and the largest strength of a participant different from the first one is 7 , so the answer for the first participant is 4 - 7 = - 3 . The second participant has a strength of 7 and the largest strength of a participant different from the second one is 5 , so the answer for the second participant is 7 - 5 = 2 . The third participant has a strength of 3 and the largest strength of a participant different from the third one is 7 , so the answer for the third participant is 3 - 7 = - 4 . The fourth participant has a strength of 5 and the largest strength of a participant different from the fourth one is 7 , so the answer for the fourth participant is 5 - 7 = - 2 .",
    "topics": [
      "data structures",
      "implementation",
      "sortings"
    ],
    "id": "1760C"
  },
  {
    "title": "Restore the Permutation",
    "url": "https://codeforces.com/problemset/problem/1759/G",
    "history": "A sequence of n numbers is called permutation if it contains all numbers from 1 to n exactly once. For example, the sequences [ 3, 1, 4, 2 ] , [ 1 ] and [ 2, 1 ] are permutations, but [ 1, 2, 1 ] , [ 0, 1 ] and [ 1, 3, 4 ] \u2014 are not. For a permutation p of even length n you can make an array b of length n/ 2 such that: b_ i = max( p_ 2i - 1, p_ 2i) for 1 \u2264 i \u2264n/ 2 For example, if p = [ 2, 4, 3, 1, 5, 6 ] , then: b_ 1 = max( p_ 1, p_ 2) = max( 2, 4) = 4 b_ 2 = max( p_ 3, p_ 4) = max( 3, 1) = 3 b_ 3 = max( p_ 5, p_ 6) = max( 5, 6) = 6 As a result, we made b = [ 4, 3, 6] . For a given array b , find the lexicographically minimal permutation p such that you can make the given array b from it. If b = [ 4, 3, 6 ] , then the lexicographically minimal permutation from which it can be made is p = [ 1, 4, 2, 3, 5, 6 ] , since: b_ 1 = max( p_ 1, p_ 2) = max( 1, 4) = 4 b_ 2 = max( p_ 3, p_ 4) = max( 2, 3) = 3 b_ 3 = max( p_ 5, p_ 6) = max( 5, 6) = 6 A permutation x_ 1, x_ 2, . . . , x_ n is lexicographically smaller than a permutation y_ 1, y_ 2 . . . , y_ n if and only if there exists such i ( 1 \u2264 i \u2264 n ) that x_ 1= y_ 1, x_ 2= y_ 2, . . . , x_ i- 1= y_ i- 1 and x_ i< y_ i .",
    "input": "The first line of input data contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains one even integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) . The second line of each test case contains exactly n/ 2 integers b_ i ( 1 \u2264 b_ i \u2264 n ) \u2014 elements of array b . It is guaranteed that the sum of n values over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print on a separate line: lexicographically minimal permutation p such that you can make an array b from it; or a number - 1 if the permutation you are looking for does not exist.",
    "note": "The first test case is parsed in the problem statement.",
    "topics": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "greedy",
      "math"
    ],
    "id": "1759G"
  },
  {
    "title": "All Possible Digits",
    "url": "https://codeforces.com/problemset/problem/1759/F",
    "history": "A positive number x of length n in base p ( 2 \u2264 p \u2264 10^ 9 ) is written on the blackboard. The number x is given as a sequence a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i < p ) \u2014 the digits of x in order from left to right ( most significant to least significant) . Dmitry is very fond of all the digits of this number system, so he wants to see each of them at least once. In one operation, he can: take any number x written on the board, increase it by 1 , and write the new value x + 1 on the board. For example, p= 5 and x= 234_ 5 . Initially, the board contains the digits 2 , 3 and 4 ; Dmitry increases the number 234_ 5 by 1 and writes down the number 240_ 5 . On the board there are digits 0, 2, 3, 4 ; Dmitry increases the number 240_ 5 by 1 and writes down the number 241_ 5 . Now the board contains all the digits from 0 to 4 . Your task is to determine the minimum number of operations required to make all the digits from 0 to p- 1 appear on the board at least once.",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 3 ) \u2014 the number of test cases. The descriptions of the input test cases follow. The first line of description of each test case contains two integers n ( 1 \u2264 n \u2264 100 ) and p ( 2 \u2264 p \u2264 10^ 9 ) \u2014 the length of the number and the base of the number system. The second line of the description of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i < p ) \u2014 digits of x in number system with base p It is guaranteed that the number x does not contain leading zeros ( that is, a_ 1> 0 ) .",
    "output": "For each test case print a single integer \u2014 the minimum number of operations required for Dmitry to get all the digits on the board from 0 to p- 1 . It can be shown that this always requires a finite number of operations.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "math",
      "number theory"
    ],
    "id": "1759F"
  },
  {
    "title": "Decent Division",
    "url": "https://codeforces.com/problemset/problem/1758/F",
    "history": "A binary string is a string where every character is or . Call a binary string decent if it has an equal number of s and s. Initially, you have an infinite binary string t whose characters are all s. You are given a sequence a of n updates, where a_ i indicates that the character at index a_ i will be flipped ( \u2194 ) . You need to keep and modify after each update a set S of disjoint ranges such that: for each range [ l, r] , the substring t_ l . . . t_ r is a decent binary string, and for all indices i such that t_ i = , there exists [ l, r] in S such that l \u2264 i \u2264 r . You only need to output the ranges that are added to or removed from S after each update. You can only add or remove ranges from S at most 10^ 6 times. More formally, let S_ i be the set of ranges after the i - th update, where S_ 0 = \u2205 ( the empty set) . Define X_ i to be the set of ranges removed after update i , and Y_ i to be the set of ranges added after update i . Then for 1 \u2264 i \u2264 n , S_ i = ( S_ i - 1\u2216 X_ i) \u222a Y_ i . The following should hold for all 1 \u2264 i \u2264 n : \u2200 a, b \u2208 S_ i, ( a = \u0338 b) \u2192 ( a \u2229 b = \u2205) ; X_ i \u2286 S_ i - 1 ; ( S_ i- 1\u2216 X_ i) \u2229 Y_ i = \u2205 ; \u2211_ i = 1^ n ( | X_ i| + | Y_ i| ) \u2264 10^ 6 .",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of updates. The next n lines each contain a single integer a_ i ( 1 \u2264 a_ i \u2264 2 \u00b7 10^ 5 ) \u2014 the index of the i - th update to the string.",
    "output": "After the i - th update, first output a single integer x_ i \u2014 the number of ranges to be removed from S after update i . In the following x_ i lines, output two integers l and r ( 1 \u2264 l < r \u2264 10^ 6 ) , which denotes that the range [ l, r] should be removed from S . Each of these ranges should be distinct and be part of S . In the next line, output a single integer y_ i \u2014 the number of ranges to be added to S after update i . In the following y_ i lines, output two integers l and r ( 1 \u2264 l < r \u2264 10^ 6 ) , which denotes that the range [ l, r] should be added to S . Each of these ranges should be distinct and not be part of S . The total number of removals and additions across all updates must not exceed 10^ 6 . After processing the removals and additions for each update, all the ranges in S should be disjoint and cover all ones. It can be proven that an answer always exists under these constraints.",
    "note": "Line breaks are provided in the sample only for the sake of clarity, and you don' t need to print them in your output. After the first update, the set of indices where a_ i = 1 is { 1} . The interval [ 1, 2] is added, so S_ 1 = { [ 1, 2] } , which has one and one . After the second update, the set of indices where a_ i = 1 is { 1, 6} . The interval [ 5, 6] is added, so S_ 2 = { [ 1, 2] , [ 5, 6] } , each of which has one and one . After the third update, the set of indices where a_ i = 1 is { 1, 5, 6} . The interval [ 5, 6] is removed and the intervals [ 4, 5] and [ 6, 7] are added, so S_ 3 = { [ 1, 2] , [ 4, 5] , [ 6, 7] } , each of which has one and one . After the fourth update, the set of indices where a_ i = 1 is { 1, 6} . The interval [ 4, 5] is removed, so S_ 4 = { [ 1, 2] , [ 6, 7] } , each of which has one and one . After the fifth update, the set of indices where a_ i = 1 is { 1} . The interval [ 6, 7] is removed, so S_ 5 = { [ 1, 2] } , which has one and one .",
    "topics": [
      "constructive algorithms",
      "data structures"
    ],
    "id": "1758F"
  },
  {
    "title": "BinaryStringForces",
    "url": "https://codeforces.com/problemset/problem/1750/H",
    "history": "You are given a binary string s of length n . We define a maximal substring as a substring that cannot be extended while keeping all elements equal. For example, in the string 11000111 there are three maximal substrings: 11 , 000 and 111 . In one operation, you can select two maximal adjacent substrings. Since they are maximal and adjacent, it' s easy to see their elements must have different values. Let a be the length of the sequence of ones and b be the length of the sequence of zeros. Then do the following: If a \u2265 b , then replace b selected zeros with b ones. If a < b , then replace a selected ones with a zeros. As an example, for 1110000 we make it 0000000 , for 0011 we make it 1111 . We call a string being good if it can be turned into 1111. . . 1111 using the aforementioned operation any number of times ( possibly, zero) . Find the number of good substrings among all n( n+ 1) / 2 non- empty substrings of s .",
    "input": "Each test consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the string s . The second line of each test case contains the binary string s of length n . It is guaranteed that sum of n across all test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print a single integer \u2014 the number of good substrings.",
    "note": "Let' s define a substring from index l to index r as [ l, r] . For the first test case, the good substrings are: [ 1, 1] , [ 1, 2] , [ 3, 6] , [ 4, 5] , [ 4, 6] , [ 5, 5] , [ 5, 6] , [ 6, 6] . In the second test case, all substrings are good except [ 2, 2] . In the third test case, all substrings are good.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "dp"
    ],
    "id": "1750H"
  },
  {
    "title": "Bracket Cost",
    "url": "https://codeforces.com/problemset/problem/1750/E",
    "history": "Daemon Targaryen decided to stop looking like a Metin2 character. He turned himself into the most beautiful thing, a bracket sequence. For a bracket sequence, we can do two kind of operations: Select one of its substrings ^ \u2020 and cyclic shift it to the right. For example, after a cyclic shift to the right, \" ( ( ) ) \" will become \" ) ( ( ) \" ; Insert any bracket, opening ' ( ' or closing ' ) ' , wherever you want in the sequence. We define the cost of a bracket sequence as the minimum number of such operations to make it balanced ^ . Given a bracket sequence s of length n , find the sum of costs across all its n( n+ 1) / 2 non- empty substrings. Note that for each substring we calculate the cost independently. ^ \u2020 A string a is a substring of a string b if a can be obtained from b by deletion of several ( possibly, zero or all) characters from the beginning and several ( possibly, zero or all) characters from the end. ^ A sequence of brackets is called balanced if one can turn it into a valid math expression by adding characters + and 1 . For example, sequences \" ( ( ) ) ( ) \" , \" ( ) \" , and \" ( ( ) ( ( ) ) ) \" are balanced, while \" ) ( \" , \" ( ( ) \" , and \" ( ( ) ) ) ( \" are not.",
    "input": "Each test consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the bracket sequence. The second line of each test case contains a string s , consisting only of characters ' ( ' and ' ) ' , of length n \u2014 the bracket sequence. It is guaranteed that sum of n across all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print a single integer \u2014 the sum of costs of all substrings of s .",
    "note": "In the first test case, there is the only substring \" ) \" . Its cost is 1 because we can insert ' ( ' to the beginning of this substring and get a string \" ( ) \" , that is a balanced string. In the second test case, the cost of each substring of length one is 1 . The cost of a substring \" ) ( \" is 1 because we can cyclically shift it to right and get a string \" ( ) \" . The cost of strings \" ) ( ) \" and \" ( ) ( \" is 1 because its enough to insert one bracket to each of them. The cost of substring \" ) ( ) ( \" is 1 because we can cyclically shift it to right and get a string \" ( ) ( ) \" . So there are 4 + 2 + 2 + 1 = 9 substring of cost 1 and 1 substring of cost 0 . So the sum of the costs is 9 . In the third test case, \" ( \" , the cost is 1 ; \" ( ) \" , the cost is 0 ; \" ( ) ) \" , the cost is 1 ; \" ) \" , the cost is 1 ; \" ) ) \" , the cost is 2 ; \" ) \" , the cost is 1 . So the sum of the costs is 6 .",
    "topics": [
      "binary search",
      "data structures",
      "divide and conquer",
      "dp",
      "greedy",
      "strings"
    ],
    "id": "1750E"
  },
  {
    "title": "Distance to the Path",
    "url": "https://codeforces.com/problemset/problem/1749/F",
    "history": "You are given a tree consisting of n vertices. Initially, each vertex has a value 0 . You need to perform m queries of two types: You are given a vertex index v . Print the value of the vertex v . You are given two vertex indices u and v and values k and d ( d \u2264 20 ) . You need to add k to the value of each vertex such that the distance from that vertex to the path from u to v is less than or equal to d . The distance between two vertices x and y is equal to the number of edges on the path from x to y . For example, the distance from x to x itself is equal to 0 . The distance from the vertex v to some path from x to y is equal to the minimum among distances from v to any vertex on the path from x to y .",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of vertices in the tree. Next n - 1 lines contain the edges of the tree \u2014 one per line. Each line contains two integers u and v ( 1 \u2264 u, v \u2264 n ; u = \u0338 v ) representing one edge of the tree. It' s guaranteed that the given edges form a tree. The next line contains a single integer m ( 1 \u2264 m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of queries. Next m lines contain the queries \u2014 one per line. Each query has one of the following two types: 1 v ( 1 \u2264 v \u2264 n ) \u2014 the query of the first type; 2 u v k d ( 1 \u2264 u, v \u2264 n ; 1 \u2264 k \u2264 1000 ; 0 \u2264 d \u2264 20 ) \u2014 the query of the second type. Additional constraint on the input: there is at least one query of the first type.",
    "output": "For each query of the first type, print the value of the corresponding vertex.",
    "note": "The tree from the first example: Some query explanations: \" 2 4 5 10 2 \" : affected vertices are { 4, 2, 5, 1, 3} ; \" 2 1 1 10 20 \" and \" 2 6 6 10 20 \" : all vertices are affected, since distance to 1 ( 6 ) is less that 20 for any vertex; \" 2 3 2 10 0 \" : affected vertices are { 3, 1, 2} ; \" 2 5 2 10 1 \" : affected vertices are { 5, 2, 4, 1} .",
    "topics": [
      "data structures",
      "dfs and similar",
      "trees"
    ],
    "id": "1749F"
  },
  {
    "title": "Number Game",
    "url": "https://codeforces.com/problemset/problem/1749/C",
    "history": "Alice and Bob are playing a game. They have an array of positive integers a of size n . Before starting the game, Alice chooses an integer k \u2265 0 . The game lasts for k stages, the stages are numbered from 1 to k . During the i - th stage, Alice must remove an element from the array that is less than or equal to k - i + 1 . After that, if the array is not empty, Bob must add k - i + 1 to an arbitrary element of the array. Note that both Alice' s move and Bob' s move are two parts of the same stage of the game. If Alice can' t delete an element during some stage, she loses. If the k - th stage ends and Alice hasn' t lost yet, she wins. Your task is to determine the maximum value of k such that Alice can win if both players play optimally. Bob plays against Alice, so he tries to make her lose the game, if it' s possible.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 100 ) \u2014 the size of the array a . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) .",
    "output": "For each test case, print one integer \u2014 the maximum value of k such that Alice can win if both players play optimally.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "games",
      "greedy",
      "implementation"
    ],
    "id": "1749C"
  },
  {
    "title": "Yet Another Array Counting Problem",
    "url": "https://codeforces.com/problemset/problem/1748/E",
    "history": "The position of the leftmost maximum on the segment [ l; r] of array x = [ x_ 1, x_ 2, . . . , x_ n] is the smallest integer i such that l \u2264 i \u2264 r and x_ i = max( x_ l, x_ l+ 1, . . . , x_ r) . You are given an array a = [ a_ 1, a_ 2, . . . , a_ n] of length n . Find the number of integer arrays b = [ b_ 1, b_ 2, . . . , b_ n] of length n that satisfy the following conditions: 1 \u2264 b_ i \u2264 m for all 1 \u2264 i \u2264 n ; for all pairs of integers 1 \u2264 l \u2264 r \u2264 n , the position of the leftmost maximum on the segment [ l; r] of the array b is equal to the position of the leftmost maximum on the segment [ l; r] of the array a . Since the answer might be very large, print its remainder modulo 10^ 9+ 7 .",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 3 ) \u2014 the number of test cases. The first line of each test case contains two integers n and m ( 2 \u2264 n, m \u2264 2 \u00b7 10^ 5 , n \u00b7 m \u2264 10^ 6 ) . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 m ) \u2014 the array a . It is guaranteed that the sum of n \u00b7 m over all test cases doesn' t exceed 10^ 6 .",
    "output": "For each test case print one integer \u2014 the number of arrays b that satisfy the conditions from the statement, modulo 10^ 9+ 7 .",
    "note": "In the first test case, the following 8 arrays satisfy the conditions from the statement: [ 1, 2, 1] ; [ 1, 2, 2] ; [ 1, 3, 1] ; [ 1, 3, 2] ; [ 1, 3, 3] ; [ 2, 3, 1] ; [ 2, 3, 2] ; [ 2, 3, 3] . In the second test case, the following 5 arrays satisfy the conditions from the statement: [ 1, 1, 1, 1] ; [ 2, 1, 1, 1] ; [ 2, 2, 1, 1] ; [ 2, 2, 2, 1] ; [ 2, 2, 2, 2] .",
    "topics": [
      "binary search",
      "data structures",
      "divide and conquer",
      "dp",
      "flows",
      "math",
      "trees"
    ],
    "id": "1748E"
  },
  {
    "title": "Zero-Sum Prefixes",
    "url": "https://codeforces.com/problemset/problem/1748/C",
    "history": "The score of an array v_ 1, v_ 2, . . . , v_ n is defined as the number of indices i ( 1 \u2264 i \u2264 n ) such that v_ 1+ v_ 2+ . . . + v_ i = 0 . You are given an array a_ 1, a_ 2, . . . , a_ n of length n . You can perform the following operation multiple times: select an index i ( 1 \u2264 i \u2264 n ) such that a_ i= 0 ; then replace a_ i by an arbitrary integer. What is the maximum possible score of a that can be obtained by performing a sequence of such operations?",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the array a . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) \u2014 array a . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print the maximum possible score of the array a after performing a sequence of operations.",
    "note": "In the first test case, it is optimal to change the value of a_ 2 to - 2 in one operation. The resulting array a will be [ 2, - 2, 1, - 1, 0] , with a score of 3 : a_ 1+ a_ 2= 2- 2= 0 ; a_ 1+ a_ 2+ a_ 3+ a_ 4= 2- 2+ 1- 1= 0 ; a_ 1+ a_ 2+ a_ 3+ a_ 4+ a_ 5= 2- 2+ 1- 1+ 0= 0 . In the second test case, it is optimal to change the value of a_ 3 to - 2 000 000 000 , giving us an array with a score of 1 . In the third test case, it is not necessary to perform any operations.",
    "topics": [
      "brute force",
      "data structures",
      "dp",
      "greedy",
      "implementation"
    ],
    "id": "1748C"
  },
  {
    "title": "Yet Another Problem",
    "url": "https://codeforces.com/problemset/problem/1747/D",
    "history": "You are given an array a of n integers a_ 1, a_ 2, a_ 3, . . . , a_ n . You have to answer q independent queries, each consisting of two integers l and r . Consider the subarray a[ l: r] = [ a_ l, a_ l+ 1, . . . , a_ r] . You can apply the following operation to the subarray any number of times ( possibly zero) - Choose two integers L , R such that l \u2264 L \u2264 R \u2264 r and R - L + 1 is odd. Replace each element in the subarray from L to R with the XOR of the elements in the subarray [ L, R] . The answer to the query is the minimum number of operations required to make all elements of the subarray a[ l: r] equal to 0 or - 1 if it is impossible to make all of them equal to 0 . You can find more details about XOR operation here.",
    "input": "The first line contains two integers n and q ( 1 \u2264 n, q \u2264 2 \u00b7 10^ 5) \u2014 the length of the array a and the number of queries. The next line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i 2^ 30) \u2014 the elements of the array a . The i - th of the next q lines contains two integers l_ i and r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 n) \u2014 the description of the i - th query.",
    "output": "For each query, output a single integer \u2014 the answer to that query.",
    "note": "In the first query, l = 3, r = 4 , subarray = [ 3, 3] . We can apply operation only to the subarrays of length 1 , which won' t change the array; hence it is impossible to make all elements equal to 0 . In the second query, l = 4, r = 6 , subarray = [ 3, 1, 2] . We can choose the whole subarray ( L = 4, R = 6) and replace all elements by their XOR ( 3 \u2295 1 \u2295 2) = 0 , making the subarray [ 0, 0, 0] . In the fifth query, l = 1, r = 6 , subarray = [ 3, 0, 3, 3, 1, 2] . We can make the operations as follows: Choose L = 4, R = 6 , making the subarray [ 3, 0, 3, 0, 0, 0] . Choose L = 1, R = 5 , making the subarray [ 0, 0, 0, 0, 0, 0] .",
    "topics": [
      "binary search",
      "bitmasks",
      "constructive algorithms",
      "data structures"
    ],
    "id": "1747D"
  },
  {
    "title": "Olympiad Training",
    "url": "https://codeforces.com/problemset/problem/1746/G",
    "history": "Anton decided to get ready for an Olympiad in Informatics. Ilya prepared n tasks for him to solve. It is possible to submit the solution for the i - th task in the first d_ i days only. Anton cannot solve more than one task a day. Ilya estimated the usefulness of the i - th tasks as r_ i and divided the tasks into three topics, the topic of the i - th task is type_ i . Anton wants to solve exactly a tasks on the first topic, b tasks on the second topic and c tasks on the third topic. Tell Anton if it is possible to do so, and if it is, calculate the maximum total usefulness of the tasks he may solve.",
    "input": "The first line of input contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains four integers n, a, b, c ( 1 \u2264 n \u2264 10^ 5 , 0 \u2264 a, b, c \u2264 n ) . The following n lines contain three integers each \u2014 r_ i, type_ i, d_ i ( 0 \u2264 r_ i \u2264 10^ 9 , 1 \u2264 type_ i \u2264 3 , 1 \u2264 d_ i \u2264 n ) . The sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case print - 1 if Anton cannot reach his goal; otherwise, print the maximum usefulness of the tasks he will solve.",
    "note": "In the first test case from the sample test Anton can solve tasks 2 and 4 . In the second test case from the sample test it is impossible to fulfill Anton' s wish. In the third test case from the sample test it is optimal to solve tasks 2 , 3 and 4 . In the last test case from the sample test it is optimal to solve tasks 1 , 2 and 4 .",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "flows",
      "geometry",
      "implementation",
      "sortings"
    ],
    "id": "1746G"
  },
  {
    "title": "Kazaee",
    "url": "https://codeforces.com/problemset/problem/1746/F",
    "history": "You have an array a consisting of n positive integers and you have to handle q queries of the following types: 1 i x : change a_ i to x , 2 l r k : check if the number of occurrences of every positive integer in the subarray a_ l, a_ l+ 1, . . . a_ r is a multiple of k ( check the example for better understanding) .",
    "input": "The first line of the input contains two integers n and q ( 1 \u2264 n , q \u2264 3 \u00b7 10^ 5 ) , the length of a and the number of queries. Next line contains n integers a_ 1, a_ 2, . . . a_ n ( 1 \u2264 a_ i\u2264 10^ 9 ) \u2014 the elements of a . Each of the next q lines describes a query. It has one of the following forms. 1 i x , ( 1 \u2264 i \u2264 n , 1 \u2264 x \u2264 10^ 9 ) , or 2 l r k , ( 1 \u2264 l \u2264 r \u2264 n , 1 \u2264 k \u2264 n ) .",
    "output": "For each query of the second type, if answer of the query is yes, print \" YES\" , otherwise print \" NO\" .",
    "note": "In the first query, requested subarray is [ 1234, 2, 3, 3, 2, 1] , and it' s obvious that the number of occurrence of 1 isn' t divisible by k = 2 . So the answer is \" NO\" . In the third query, requested subarray is [ 1, 2, 3, 3, 2, 1] , and it can be seen that the number of occurrence of every integer in this sub array is divisible by k = 2 . So the answer is \" YES\" . In the sixth query, requested subarray is [ 1, 2, 3, 3, 2, 1, 1, 2, 3] , and it can be seen that the number of occurrence of every integer in this sub array is divisible by k = 3 . So the answer is \" YES\" .",
    "topics": [
      "data structures",
      "hashing",
      "probabilities"
    ],
    "id": "1746F"
  },
  {
    "title": "Antifibonacci Cut",
    "url": "https://codeforces.com/problemset/problem/1743/G",
    "history": "Note that the memory limit is unusual. Let' s define the sequence of Fibonacci strings as follows: f_ 0 is 0, f_ 1 is 1, f_ i is f_ i- 1 + f_ i- 2 for i> 1 ( + denotes the concatenation of two strings) . So, for example, f_ 2 is 10, f_ 3 is 101, f_ 4 is 10110. For a given string s , let' s define g( s) as the number of ways to cut it into several ( any number, possibly even just one) strings such that none of these strings are Fibonacci strings. For example, if s is 10110101, g( s) = 3 since there are three ways to cut it: 101101 + 01; 1011 + 0101; 1011 + 01 + 01. You are given a sequence of strings s_ 1, s_ 2, . . . , s_ n . Calculate g( s_ 1) , g( s_ 1 + s_ 2) , . . . , g( s_ 1 + s_ 2 + . . . + s_ n) . Since these values can be huge, print them modulo 998244353 .",
    "input": "The first line of the input contains one integer n ( 1 \u2264 n \u2264 3 \u00b7 10^ 3 ) . Then, n lines follow. The i - th line contains the string s_ i ( 1 \u2264 | s_ i| \u2264 10^ 3 ) , consisting of characters 0 and/ or 1.",
    "output": "Print n integers, where the i - th integer is g( s_ 1 + s_ 2 + . . . + s_ i) 998244353 .",
    "note": "",
    "topics": [
      "bitmasks",
      "combinatorics",
      "constructive algorithms",
      "data structures",
      "dp",
      "hashing",
      "math"
    ],
    "id": "1743G"
  },
  {
    "title": "Intersection and Union",
    "url": "https://codeforces.com/problemset/problem/1743/F",
    "history": "You are given n segments on the coordinate axis. The i - th segment is [ l_ i, r_ i] . Let' s denote the set of all integer points belonging to the i - th segment as S_ i . Let A \u222a B be the union of two sets A and B , A \u2229 B be the intersection of two sets A and B , and A \u2295 B be the symmetric difference of A and B ( a set which contains all elements of A and all elements of B , except for the ones that belong to both sets) . Let [ op_ 1, op_ 2, . . . , op_ n- 1] be an array where each element is either \u222a , \u2295 , or \u2229 . Over all 3^ n- 1 ways to choose this array, calculate the sum of the following values: | ( ( ( S_ 1 op_ 1 S_ 2) op_ 2 S_ 3) op_ 3 S_ 4) . . . op_ n- 1 S_ n| In this expression, | S| denotes the size of the set S .",
    "input": "The first line contains one integer n ( 2 \u2264 n \u2264 3 \u00b7 10^ 5 ) . Then, n lines follow. The i - th of them contains two integers l_ i and r_ i ( 0 \u2264 l_ i \u2264 r_ i \u2264 3 \u00b7 10^ 5 ) .",
    "output": "Print one integer \u2014 the sum of | ( ( ( S_ 1 op_ 1 S_ 2) op_ 2 S_ 3) op_ 3 S_ 4) . . . op_ n- 1 S_ n| over all possible ways to choose [ op_ 1, op_ 2, . . . , op_ n- 1] . Since the answer can be huge, print it modulo 998244353 .",
    "note": "",
    "topics": [
      "data structures",
      "dp",
      "matrices",
      "probabilities"
    ],
    "id": "1743F"
  },
  {
    "title": "Multi-Colored Segments",
    "url": "https://codeforces.com/problemset/problem/1741/F",
    "history": "Dmitry has n segments of different colors on the coordinate axis Ox . Each segment is characterized by three integers l_ i , r_ i and c_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 10^ 9, 1 \u2264 c_ i \u2264 n ) , where l_ i and r_ i are are the coordinates of the ends of the i - th segment, and c_ i is its color. Dmitry likes to find the minimum distances between segments. However, he considers pairs of segments of the same color uninteresting. Therefore, he wants to know for each segment the distance from this segment to the nearest differently colored segment. The distance between two segments is the minimum of the distances between a point of the first segment and a point of the second segment. In particular, if the segments intersect, then the distance between them is equal to 0 . For example, Dmitry has 5 segments: The first segment intersects with the second ( and these are segments of different colors) , so the answers for them are equal to 0 . For the 3 - rd segment, the nearest segment of a different color is the 2 - nd segment, the distance to which is equal to 2 . For the 4 - th segment, the nearest segment of a different color is the 5 - th segment, the distance to which is equal to 1 . The 5 - th segment lies inside the 2 - nd segment ( and these are segments of different colors) , so the answers for them are equal to 0 .",
    "input": "The first line of the input contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the test. The descriptions of the test cases follow. The first line of description of each test case contains one integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of segments. The next n lines contain descriptions of the segments. Each segment is described by three integers l_ i , r_ i and c_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 10^ 9, 1 \u2264 c_ i \u2264 n ) \u2014 coordinates of the left and right ends of i - th segment, as well as the color of this segment. It is guaranteed that there are at least 2 segments of different colors. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, on a separate line print n integers, where the i - th number is equal to the distance from the i - th segment to the nearest segment of a different color.",
    "note": "In the first test case of the first sample there is only one segment of color 2 , and all other segments have color 1 . Therefore, for segments of color 1 , the answer is equal to the distance to the 3 rd segment, and for 3 rd one, the answer is equal to the minimum of the distances to segments of color 1 . In the second test case of the first sample there are only 2 segments, and for both of them the answer is equal to the distance between them. In the third test case of the first sample, each segment intersects at least one of its ends with a segment of a different color, so all answers are equal to 0 . The fourth test case of the first sample is described in the problem statement. In the fifth test case of the first sample, one segment lies completely inside the other, and for both of them the answer is 0 . In the sixth test case of the first sample, all segments are points of different colors.",
    "topics": [
      "binary search",
      "data structures",
      "math",
      "sortings"
    ],
    "id": "1741F"
  },
  {
    "title": "Arranging Crystal Balls",
    "url": "https://codeforces.com/problemset/problem/1740/I",
    "history": "In the world of Compfestnesia, Pak Chanek discovers a secret underground dungeon. Inside it, there is a treasure chest that is surrounded by n statues that are arranged in a circular manner. The statues are numbered from 0 to n- 1 with statue i being to the left of statue i+ 1 and statue n- 1 being to the left of statue 0 . Pak Chanek observes that each statue is holding a crystal ball with an integer between 0 and m- 1 inclusive. Let' s say the integer in the crystal ball of statue i is a_ i . The dungeon provides instructions that every integer in the crystal balls must be 0 in order to open the treasure chest. To achieve that, Pak Chanek is given an integer k , and he can do zero or more operations. In a single operation, Pak Chanek does the following: Choose exactly k consecutive statues. In other words, choose the statues p, ( p+ 1) n, ( p+ 2) n, ( p+ 3) n, . . . , ( p+ k- 1) n for some chosen index p . Do one of the following: For all chosen statues, change their values of a_ i into ( a_ i+ 1) m . For all chosen statues, change their values of a_ i into ( a_ i- 1) m . Help Pak Chanek find the minimum possible number of operations to open the treasure chest.",
    "input": "The first line contains three integers n , m , and k ( 2 \u2264 n, m \u2264 10^ 6 , nm \u2264 2 \u00b7 10^ 6 , 1 \u2264 k < n ) \u2014 the number of statues, the bound of the integers in the crystal balls, and the number of statues that can be operated in a single operation. The second line contains n integers a_ 0, a_ 1, . . . , a_ n- 1 ( 0 \u2264 a_ i < m ) \u2014 the integers in the crystal balls.",
    "output": "If it is possible to perform zero or more operations so that a_ 0= a_ 1= . . . = a_ n- 1= 0 , output the minimum number of operations required. Otherwise, output - 1 .",
    "note": "In the first example, Pak Chanek can do the following operations: Do the a_ i : = ( a_ i- 1) m operation 3 times for statues 1 , 2 , and 3 . Now a= [ 8, 7, 1, 2, 0] . Do the a_ i : = ( a_ i- 1) m operation 1 time for statues 3 , 4 , and 0 . Now a= [ 7, 7, 1, 1, 8] . Do the a_ i : = ( a_ i+ 1) m operation 2 times for statues 4 , 0 , and 1 . Now a= [ 0, 0, 1, 1, 1] . Do the a_ i : = ( a_ i- 1) m operation 1 time for statues 2 , 3 , and 4 . Now a= [ 0, 0, 0, 0, 0] .",
    "topics": [
      "data structures",
      "divide and conquer",
      "divide and conquer",
      "dp",
      "geometry",
      "graphs",
      "number theory"
    ],
    "id": "1740I"
  },
  {
    "title": "MEX Tree Manipulation",
    "url": "https://codeforces.com/problemset/problem/1740/H",
    "history": "Given a rooted tree, define the value of vertex u in the tree recursively as the MEX ^ \u2020 of the values of its children. Note that it is only the children, not all of its descendants. In particular, the value of a leaf is 0 . Pak Chanek has a rooted tree that initially only contains a single vertex with index 1 , which is the root. Pak Chanek is going to do q queries. In the i - th query, Pak Chanek is given an integer x_ i . Pak Chanek needs to add a new vertex with index i+ 1 as the child of vertex x_ i . After adding the new vertex, Pak Chanek needs to recalculate the values of all vertices and report the sum of the values of all vertices in the current tree. ^ \u2020 The MEX ( minimum excluded) of an array is the smallest non- negative integer that does not belong to the array. For example, the MEX of [ 0, 1, 1, 2, 6, 7] is 3 and the MEX of [ 6, 9] is 0 .",
    "input": "The first line contains a single integer q ( 1 \u2264 q \u2264 3 \u00b7 10^ 5 ) \u2014 the number of operations. Each of the next q lines contains a single integer x_ i ( 1 \u2264 x_ i \u2264 i ) \u2014 the description of the i - th query.",
    "output": "For each query, print a line containing an integer representing the sum of the new values of all vertices in the tree after adding the vertex.",
    "note": "In the first example, the tree after the 6 - th query will look like this. Vertex 7 is a leaf, so its value is 0 . Vertex 6 is a leaf, so its value is 0 . Vertex 5 only has a child with value 0 , so its value is 1 . Vertex 4 is a leaf, so its value is 0 . Vertex 3 only has a child with value 0 , so its value is 1 . Vertex 2 has children with values 0 and 1 , so its value is 2 . Vertex 1 has children with values 1 and 2 , so its value is 0 . The sum of the values of all vertices is 0+ 0+ 1+ 0+ 1+ 2+ 0= 4 .",
    "topics": [
      "data structures",
      "trees"
    ],
    "id": "1740H"
  },
  {
    "title": "Hanging Hearts",
    "url": "https://codeforces.com/problemset/problem/1740/E",
    "history": "Pak Chanek has n blank heart- shaped cards. Card 1 is attached directly to the wall while each of the other cards is hanging onto exactly one other card by a piece of string. Specifically, card i ( i > 1 ) is hanging onto card p_ i ( p_ i < i ) . In the very beginning, Pak Chanek must write one integer number on each card. He does this by choosing any permutation a of [ 1, 2, . . . , n] . Then, the number written on card i is a_ i . After that, Pak Chanek must do the following operation n times while maintaining a sequence s ( which is initially empty) : Choose a card x such that no other cards are hanging onto it. Append the number written on card x to the end of s . If x = \u0338 1 and the number on card p_ x is larger than the number on card x , replace the number on card p_ x with the number on card x . Remove card x . After that, Pak Chanek will have a sequence s with n elements. What is the maximum length of the longest non- decreasing subsequence ^ \u2020 of s at the end if Pak Chanek does all the steps optimally? ^ \u2020 A sequence b is a subsequence of a sequence c if b can be obtained from c by deletion of several ( possibly, zero or all) elements. For example, [ 3, 1] is a subsequence of [ 3, 2, 1] , [ 4, 3, 1] and [ 3, 1] , but not [ 1, 3, 3, 7] and [ 3, 10, 4] .",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 10^ 5 ) \u2014 the number of heart- shaped cards. The second line contains n - 1 integers p_ 2, p_ 3, . . . , p_ n ( 1 \u2264 p_ i < i ) describing which card that each card hangs onto.",
    "output": "Print a single integer \u2014 the maximum length of the longest non- decreasing subsequence of s at the end if Pak Chanek does all the steps optimally.",
    "note": "The following is the structure of the cards in the first example. Pak Chanek can choose the permutation a = [ 1, 5, 4, 3, 2, 6] . Let w_ i be the number written on card i . Initially, w_ i = a_ i . Pak Chanek can do the following operations in order: Select card 5 . Append w_ 5 = 2 to the end of s . As w_ 4 > w_ 5 , the value of w_ 4 becomes 2 . Remove card 5 . After this operation, s = [ 2] . Select card 6 . Append w_ 6 = 6 to the end of s . As w_ 2 \u2264 w_ 6 , the value of w_ 2 is left unchanged. Remove card 6 . After this operation, s = [ 2, 6] . Select card 4 . Append w_ 4 = 2 to the end of s . As w_ 1 \u2264 w_ 4 , the value of w_ 1 is left unchanged. Remove card 4 . After this operation, s = [ 2, 6, 2] . Select card 3 . Append w_ 3 = 4 to the end of s . As w_ 2 > w_ 3 , the value of w_ 2 becomes 4 . Remove card 3 . After this operation, s = [ 2, 6, 2, 4] . Select card 2 . Append w_ 2 = 4 to the end of s . As w_ 1 \u2264 w_ 2 , the value of w_ 1 is left unchanged. Remove card 2 . After this operation, s = [ 2, 6, 2, 4, 4] . Select card 1 . Append w_ 1 = 1 to the end of s . Remove card 1 . After this operation, s = [ 2, 6, 2, 4, 4, 1] . One of the longest non- decreasing subsequences of s = [ 2, 6, 2, 4, 4, 1] is [ 2, 2, 4, 4] . Thus, the length of the longest non- decreasing subsequence of s is 4 . It can be proven that this is indeed the maximum possible length.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "dfs and similar",
      "dp",
      "greedy",
      "trees"
    ],
    "id": "1740E"
  },
  {
    "title": "Knowledge Cards",
    "url": "https://codeforces.com/problemset/problem/1740/D",
    "history": "Pak Chanek, a renowned scholar, invented a card puzzle using his knowledge. In the puzzle, you are given a board with n rows and m columns. Let ( r, c) represent the cell in the r - th row and the c - th column. Initially, there are k cards stacked in cell ( 1, 1) . Each card has an integer from 1 to k written on it. More specifically, the i - th card from the top of the stack in cell ( 1, 1) has the number a_ i written on it. It is known that no two cards have the same number written on them. In other words, the numbers written on the cards are a permutation of integers from 1 to k . All other cells are empty. You need to move the k cards to cell ( n, m) to create another stack of cards. Let b_ i be the number written on the i - th card from the top of the stack in cell ( n, m) . You should create the stack in cell ( n, m) in such a way so that b_ i = i for all 1 \u2264 i \u2264 k . In one move, you can remove the top card from a cell and place it onto an adjacent cell ( a cell that shares a common side) . If the target cell already contains one or more cards, you place your card on the top of the stack. You must do each operation while satisfying the following restrictions: Each cell other than ( 1, 1) and ( n, m) must not have more than one card on it. You cannot move a card onto cell ( 1, 1) . You cannot move a card from cell ( n, m) . Given the values of n , m , k and the array a , determine if the puzzle is solvable.",
    "input": "Each test contains multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 4 ) \u2014 the number of test cases. The following lines contain the description of each test case. The first line of each test case contains three integers n , m , and k ( 3 \u2264 n, m \u2264 10^ 6 , nm \u2264 10^ 6 , 1 \u2264 k \u2264 10^ 5 ) \u2014 the size of the board and the number of cards. The second line of the test case contains k integers a_ 1, a_ 2, . . . , a_ k \u2014 the array a , representing the numbers written on the cards. The values of a are a permutation of integers from 1 to k . It is guaranteed that the sum of nm and k over all test cases do not exceed 10^ 6 and 10^ 5 respectively.",
    "output": "For each test case, output \" YA\" ( without quotes) if it is possible and \" TIDAK\" ( without quotes) otherwise, which mean yes and no in Indonesian respectively. You can output \" YA\" and \" TIDAK\" in any case ( for example, strings \" tiDAk\" , \" tidak\" , and \" Tidak\" will be recognised as a negative response) .",
    "note": "In the first test case, the following is one way the puzzle can be done: Move the card with 3 written on it from cell ( 1, 1) to cell ( 1, 2) , then cell ( 1, 3) . Move the card with 6 written on it from cell ( 1, 1) to cell ( 2, 1) , then cell ( 3, 1) , then cell ( 3, 2) , then cell ( 3, 3) . Move the card with 4 written on it from cell ( 1, 1) to cell ( 1, 2) . Move the card with 1 written on it from cell ( 1, 1) to cell ( 2, 1) , then cell ( 2, 2) , then cell ( 2, 3) . Move the card with 2 written on it from cell ( 1, 1) to cell ( 2, 1) , then cell ( 2, 2) . Move the card with 5 written on it from cell ( 1, 1) to cell ( 2, 1) , then cell ( 3, 1) , then cell ( 3, 2) , then cell ( 3, 3) . Move the card with 2 written on it from cell ( 2, 2) to cell ( 2, 1) . Move the card with 4 written on it from cell ( 1, 2) to cell ( 2, 2) , then cell ( 3, 2) , then cell ( 3, 3) . Move the card with 3 written on it from cell ( 1, 3) to cell ( 1, 2) , then cell ( 2, 2) , then cell ( 3, 2) , then cell ( 3, 3) . Move the card with 2 written on it from cell ( 2, 1) to cell ( 3, 1) , then cell ( 3, 2) , then cell ( 3, 3) . Move the card with 1 written on it from cell ( 2, 3) to cell ( 3, 3) . An animated illustration regarding the process mentioned above is as follows:",
    "topics": [
      "constructive algorithms",
      "data structures"
    ],
    "id": "1740D"
  },
  {
    "title": "Keyboard Design",
    "url": "https://codeforces.com/problemset/problem/1739/F",
    "history": "Monocarp has a dictionary of n words, consisting of 12 first letters of the Latin alphabet. The words are numbered from 1 to n . In every pair of adjacent characters in each word, the characters are different. For every word i , Monocarp also has an integer c_ i denoting how often he uses this word. Monocarp wants to design a keyboard that would allow him to type some of the words easily. A keyboard can be denoted as a sequence of 12 first letters of the Latin alphabet, where each letter from a to l appears exactly once. A word can be typed with the keyboard easily if, for every pair of adjacent characters in the word, these characters are adjacent in the keyboard as well. The optimality of the keyboard is the sum of c_ i over all words i that can be typed easily with it. Help Monocarp to design a keyboard with the maximum possible optimality.",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 1000 ) \u2014 the number of words. Then, n lines follow. The i - th of them contains an integer c_ i ( 1 \u2264 c_ i \u2264 10^ 5 ) and a string s_ i ( 2 \u2264 | s_ i| \u2264 2000 ) denoting the i - th word. Each character of s_ i is one of 12 first letters of Latin alphabet, in lowercase. For every j \u2208 [ 1, | s_ i| - 1] , the j - th character of s_ i is different from the ( j+ 1) - th one. Additional constraint on the input: \u2211_ i= 1^ n | s_ i| \u2264 2000 .",
    "output": "Print a sequence of 12 first letters of the Latin alphabet, where each letter from a to l appears exactly once, denoting the optimal keyboard. If there are multiple answers, you may print any of them.",
    "note": "",
    "topics": [
      "bitmasks",
      "data structures",
      "dp",
      "string suffix structures",
      "strings"
    ],
    "id": "1739F"
  },
  {
    "title": "Reset K Edges",
    "url": "https://codeforces.com/problemset/problem/1739/D",
    "history": "You are given a rooted tree, consisting of n vertices. The vertices are numbered from 1 to n , the root is the vertex 1 . You can perform the following operation at most k times: choose an edge ( v, u) of the tree such that v is a parent of u ; remove the edge ( v, u) ; add an edge ( 1, u) ( i. e. make u with its subtree a child of the root) . The height of a tree is the maximum depth of its vertices, and the depth of a vertex is the number of edges on the path from the root to it. For example, the depth of vertex 1 is 0 , since it' s the root, and the depth of all its children is 1 . What' s the smallest height of the tree that can be achieved?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of testcases. The first line of each testcase contains two integers n and k ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ; 0 \u2264 k \u2264 n - 1 ) \u2014 the number of vertices in the tree and the maximum number of operations you can perform. The second line contains n- 1 integers p_ 2, p_ 3, . . . , p_ n ( 1 \u2264 p_ i < i ) \u2014 the parent of the i - th vertex. Vertex 1 is the root. The sum of n over all testcases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each testcase, print a single integer \u2014 the smallest height of the tree that can achieved by performing at most k operations.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "dfs and similar",
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "1739D"
  },
  {
    "title": "Palindrome Addicts",
    "url": "https://codeforces.com/problemset/problem/1738/H",
    "history": "Your task is to maintain a queue consisting of lowercase English letters as follows: \" push c \" : insert a letter c at the back of the queue; \" pop\" : delete a letter from the front of the queue. Initially, the queue is empty. After each operation, you are asked to count the number of distinct palindromic substrings in the string that are obtained by concatenating the letters from the front to the back of the queue. Especially, the number of distinct palindromic substrings of the empty string is 0 . A string s[ 1. . n] of length n is palindromic if s[ i] = s[ n- i+ 1] for every 1 \u2264 i \u2264 n . The string s[ l. . r] is a substring of string s[ 1. . n] for every 1 \u2264 l \u2264 r \u2264 n . Two strings s[ 1. . n] and t[ 1. . m] are distinct, if at least one of the following holds. n = \u0338 m ; s[ i] = \u0338 t[ i] for some 1 \u2264 i \u2264min{ n, m} .",
    "input": "The first line is an integer q ( 1 \u2264 q \u2264 10^ 6 ) , indicating the number of operations. Then q lines follow. Each of the following lines contains one of the operations as follows. \" push c \" : insert a letter c at the back of the queue, where c is a lowercase English letter; \" pop\" : delete a letter from the front of the queue. It is guaranteed that no \" pop\" operation will be performed when the queue is empty.",
    "output": "After each operation, print the number of distinct palindromic substrings in the string presented in the queue.",
    "note": "Let s_ k be the string presented in the queue after the k - th operation, and let c_ k be the number of distinct palindromic substrings of s_ k . The following table shows the details of the example. k s_ k c_ k 1 a 1 2 0 3 a 1 4 aa 2 5 aab 3 6 aabb 4 7 aabba 5 8 aabbaa 6 9 abbaa 5 10 bbaa 4 11 baa 3 12 baab 4 It is worth pointing out that After the 2 - nd operation, the string is empty and thus has no substrings. So the answer is 0 ; After the 8 - th operation, the string is \" aabbaa \" . The 6 distinct palindromic substrings are \" a \" , \" aa \" , \" aabbaa \" , \" abba \" , \" b \" , and \" bb \" .",
    "topics": [
      "data structures",
      "strings"
    ],
    "id": "1738H"
  },
  {
    "title": "Permutation Addicts",
    "url": "https://codeforces.com/problemset/problem/1738/D",
    "history": "Given a permutation a_ 1, a_ 2, . . . , a_ n of integers from 1 to n , and a threshold k with 0 \u2264 k \u2264 n , you compute a sequence b_ 1, b_ 2, . . . , b_ n as follows. For every 1 \u2264 i \u2264 n in increasing order, let x = a_ i . If x \u2264 k , set b_ x to the last element a_ j ( 1 \u2264 j < i ) that a_ j > k . If no such element a_ j exists, set b_ x = n+ 1 . If x > k , set b_ x to the last element a_ j ( 1 \u2264 j < i ) that a_ j \u2264 k . If no such element a_ j exists, set b_ x = 0 . Unfortunately, after the sequence b_ 1, b_ 2, . . . , b_ n has been completely computed, the permutation a_ 1, a_ 2, . . . , a_ n and the threshold k are discarded. Now you only have the sequence b_ 1, b_ 2, . . . , b_ n . Your task is to find any possible permutation a_ 1, a_ 2, . . . , a_ n and threshold k that produce the sequence b_ 1, b_ 2, . . . , b_ n . It is guaranteed that there exists at least one pair of permutation a_ 1, a_ 2, . . . , a_ n and threshold k that produce the sequence b_ 1, b_ 2, . . . , b_ n . A permutation of integers from 1 to n is a sequence of length n which contains all integers from 1 to n exactly once.",
    "input": "Each test contains multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. The following lines contain the description of each test case. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 10^ 5 ) , indicating the length of the permutation a . The second line of each test case contains n integers b_ 1, b_ 2, . . . , b_ n ( 0 \u2264 b_ i \u2264 n+ 1 ) , indicating the elements of the sequence b . It is guaranteed that there exists at least one pair of permutation a_ 1, a_ 2, . . . , a_ n and threshold k that produce the sequence b_ 1, b_ 2, . . . , b_ n . It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, output the threshold k ( 0 \u2264 k \u2264 n ) in the first line, and then output the permutation a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) in the second line such that the permutation a_ 1, a_ 2, . . . , a_ n and threshold k produce the sequence b_ 1, b_ 2, . . . , b_ n . If there are multiple solutions, you can output any of them.",
    "note": "For the first test case, permutation a = [ 1, 3, 2, 4] and threshold k = 2 will produce sequence b as follows. When i = 1 , x = a_ i = 1 \u2264 k , there is no a_ j ( 1 \u2264 j < i ) that a_ j > k . Therefore, b_ 1 = n + 1 = 5 . When i = 2 , x = a_ i = 3 > k , the last element a_ j that a_ j \u2264 k is a_ 1 . Therefore, b_ 3 = a_ 1 = 1 . When i = 3 , x = a_ i = 2 \u2264 k , the last element a_ j that a_ j > k is a_ 2 . Therefore, b_ 2 = a_ 2 = 3 . When i = 4 , x = a_ i = 4 > k , the last element a_ j that a_ j \u2264 k is a_ 3 . Therefore, b_ 4 = a_ 3 = 2 . Finally, we obtain sequence b = [ 5, 3, 1, 2] . For the second test case, permutation a = [ 1, 2, 3, 4, 5, 6] and threshold k = 3 will produce sequence b as follows. When i = 1, 2, 3 , a_ i \u2264 k , there is no a_ j ( 1 \u2264 j < i ) that a_ j > k . Therefore, b_ 1 = b_ 2 = b_ 3 = n + 1 = 7 . When i = 4, 5, 6 , a_ i > k , the last element a_ j that a_ j \u2264 k is a_ 3 . Therefore, b_ 4 = b_ 5 = b_ 6 = a_ 3 = 3 . Finally, we obtain sequence b = [ 7, 7, 7, 3, 3, 3] . For the third test case, permutation a = [ 6, 5, 4, 3, 2, 1] and threshold k = 3 will produce sequence b as follows. When i = 1, 2, 3 , a_ i > k , there is no a_ j ( 1 \u2264 j < i ) that a_ j \u2264 k . Therefore, b_ 4 = b_ 5 = b_ 6 = 0 . When i = 4, 5, 6 , a_ i \u2264 k , the last element a_ j that a_ j > k is a_ 3 . Therefore, b_ 1 = b_ 2 = b_ 3 = a_ 3 = 4 . Finally, we obtain sequence b = [ 4, 4, 4, 0, 0, 0] .",
    "topics": [
      "constructive algorithms",
      "data structures",
      "dfs and similar",
      "dsu",
      "graphs",
      "trees"
    ],
    "id": "1738D"
  },
  {
    "title": "Ela Takes Dancing Class",
    "url": "https://codeforces.com/problemset/problem/1737/G",
    "history": "DTL engineers love partying in the weekend. Ela does, too! Unfortunately, she didn' t know how to dance yet. Therefore, she decided to take a dancing class. There are n students in the dancing class, including Ela. In the final project, n students will participate in a choreography described below. n students are positioned on the positive side of the Ox - axis. The i - th dancer is located at a_ i > 0 . Some dancers will change positions during the dance ( we' ll call them movable dancers) , and others will stay in the same place during a choreography ( we' ll call them immovable dancers) . We distinguish the dancers using a binary string s of length n : if s_ i equals ' 1' , then the i - th dancer is movable, otherwise the i - th dancer is immovable. Let' s call the \" positive energy value\" of the choreography d > 0 . The dancers will perform \" movements\" based on this value. Each minute after the dance begins, the movable dancer with the smallest x - coordinate will start moving to the right and initiate a \" movement\" . At the beginning of the movement, the dancer' s energy level will be initiated equally to the positive energy value of the choreography, which is d . Each time they move from some y to y+ 1 , the energy level will be decreased by 1 . At some point, the dancer might meet other fellow dancers in the same coordinates. If it happens, then the energy level of the dancer will be increased by 1 . A dancer will stop moving to the right when his energy level reaches 0 , and he doesn' t share a position with another dancer. The dancers are very well- trained, and each \" movement\" will end before the next minute begins. To show her understanding of this choreography, Ela has to answer q queries, each consisting of two integers k and m . The answer to this query is the coordinate of the m - th dancer of both types from the left at k - th minute after the choreography begins. In other words, denote x_ k, 1, x_ k, 2, . . . , x_ k, n as the sorted coordinates of the dancers at k - th minute from the beginning, you need to print x_ k, m .",
    "input": "The first line contains three integers n , d and q ( 1 \u2264 n \u2264 10^ 5 ; 1 \u2264 d \u2264 10^ 9 ; 1 \u2264 q \u2264 10^ 5 ) \u2014 the number of dancers, the positive energy value of the choreography, and the number of queries. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ 1 < a_ 2 < . . . < a_ n \u2264 10^ 9 ) \u2014 the coordinates of each dancer. The third line contains a binary string s of length n \u2014 the movability of each dancer. Each character is either ' 0' or ' 1' . It is guaranteed that s contains at least one character ' 1' . Then q lines follow, the i - th of them contains two integers k_ i and m_ i ( 1 \u2264 k_ i \u2264 10^ 9 , 1 \u2264 m_ i \u2264 n ) \u2014 the content of each query.",
    "output": "Output q lines, each contains a single integer \u2014 the answer for the corresponding query.",
    "note": "Let' s consider the first example test case. In the first minute, 1 is the lowest coordinate between movable dancers. The energy level is initiated with 3 . Then the following happens: The dancer moves from 1 to 2 . The energy level decreased to 2 . The dancer moves from 2 to 3 . The energy level decreased to 1 , then increased to 2 when she met another dancer at 3 . The dancer moves from 3 to 4 . The energy level decreased to 1 . The dancer moves from 4 to 5 . The energy level decreased to 0 . At the end of the first minute, the sorted coordinates of the dancers become [ 3, 5, 6, 7] , and their respective movability is ' 0111' . In the second minute, 5 is the lowest coordinate between movable dancers. The energy level is initiated with 3 . Then the following happens: The dancer moves from 5 to 6 . The energy level decreased to 2 , then increased to 3 when she met another dancer at 6 . The dancer moves from 6 to 7 . The energy level decreased to 2 , then increased to 3 when she met another dancer at 7 . The dancer moves from 7 to 8 . The energy level decreased to 2 . The dancer moves from 8 to 9 . The energy level decreased to 1 . The dancer moves from 9 to 10 . The energy level decreased to 0 . At the end of the second minute, the sorted coordinates of the dancers become [ 3, 6, 7, 10] , and their respective movability is ' 0111' .",
    "topics": [
      "binary search",
      "data structures"
    ],
    "id": "1737G"
  },
  {
    "title": "Good Subarrays (Hard Version)",
    "url": "https://codeforces.com/problemset/problem/1736/C2",
    "history": "This is the hard version of this problem. In this version, we have queries. Note that we do not have multiple test cases in this version. You can make hacks only if both versions of the problem are solved. An array b of length m is good if for all i the i - th element is greater than or equal to i . In other words, b is good if and only if b_ i \u2265 i for all i ( 1 \u2264 i \u2264 m ) . You are given an array a consisting of n positive integers, and you are asked q queries. In each query, you are given two integers p and x ( 1 \u2264 p, x \u2264 n ) . You have to do a_ p : = x ( assign x to a_ p ) . In the updated array, find the number of pairs of indices ( l, r) , where 1 \u2264 l \u2264 r \u2264 n , such that the array [ a_ l, a_ l+ 1, . . . , a_ r] is good. Note that all queries are independent, which means after each query, the initial array a is restored.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) . The third line contains an integer q ( 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of queries. Each of the next q lines contains two integers p_ j and x_ j ( 1 \u2264 p_ j, x_ j \u2264 n ) \u2013 the description of the j - th query.",
    "output": "For each query, print the number of suitable pairs of indices after making the change.",
    "note": "Here are notes for first example. In first query, after update a= [ 2, 4, 1, 4] . Now ( 1, 1) , ( 2, 2) , ( 3, 3) , ( 4, 4) , ( 1, 2) , and ( 3, 4) are suitable pairs. In second query, after update a= [ 2, 4, 3, 4] . Now all subarrays of a are good. In third query, after update a= [ 2, 1, 1, 4] . Now ( 1, 1) , ( 2, 2) , ( 3, 3) , ( 4, 4) , and ( 3, 4) are suitable.",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "two pointers"
    ],
    "id": "1736C2"
  },
  {
    "title": "Good Subarrays (Easy Version)",
    "url": "https://codeforces.com/problemset/problem/1736/C1",
    "history": "This is the easy version of this problem. In this version, we do not have queries. Note that we have multiple test cases in this version. You can make hacks only if both versions of the problem are solved. An array b of length m is good if for all i the i - th element is greater than or equal to i . In other words, b is good if and only if b_ i \u2265 i for all i ( 1 \u2264 i \u2264 m ) . You are given an array a consisting of n positive integers. Find the number of pairs of indices ( l, r) , where 1 \u2264 l \u2264 r \u2264 n , such that the array [ a_ l, a_ l+ 1, . . . , a_ r] is good.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 2 \u00b7 10^ 5 ) . Description of the test cases follows. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) , the length of the array a . The second line of each test case contains n space- separated integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) , representing the array a . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print the number of suitable pairs of indices.",
    "note": "In the first test case, all subarrays of a are good, so all pairs are suitable. In the second test case, the pairs ( 1, 1) , ( 2, 2) , and ( 3, 3) are suitable. For example, when ( l, r) = ( 1, 2) , the array b= [ 1, 1] is not good because b_ 2 < 2 .",
    "topics": [
      "binary search",
      "data structures",
      "schedules",
      "two pointers"
    ],
    "id": "1736C1"
  },
  {
    "title": "Pebbles and Beads",
    "url": "https://codeforces.com/problemset/problem/1735/F",
    "history": "There are two currencies: pebbles and beads. Initially you have a pebbles, b beads. There are n days, each day you can exchange one currency for another at some exchange rate. On day i , you can exchange - p_ i \u2264 x \u2264 p_ i pebbles for - q_ i \u2264 y \u2264 q_ i beads or vice versa. It' s allowed not to perform an exchange at all. Meanwhile, if you perform an exchange, the proportion x \u00b7 q_ i = - y \u00b7 p_ i must be fulfilled. Fractional exchanges are allowed. You can perform no more than one such exchange in one day. The numbers of pebbles and beads you have must always remain non- negative. Please solve the following n problems independently: for each day i , output the maximum number of pebbles that you can have at the end of day i if you perform exchanges optimally.",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 10^ 3 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains three integers n , a and b ( 1 \u2264 n \u2264 300 000 , 0 \u2264 a, b \u2264 10^ 9 ) \u2014 the number of days and the initial number of pebbles and beads respectively. The second line of each test case contains n integers: p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 10^ 9 ) . The third line of each test case contains n integers: q_ 1, q_ 2, . . . , q_ n ( 1 \u2264 q_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n over all test cases doesn' t exceed 300 000 .",
    "output": "Output n numbers \u2014 the maximum number of pebbles at the end of each day. Your answer is considered correct if its absolute or relative error does not exceed 10^ - 6 . Formally, let your answer be a , and the jury' s answer be b . Your answer is accepted if and only if | a - b| / max( 1, | b| ) \u2264 10^ - 6 .",
    "note": "In the image below you can see the solutions for the first two test cases. In each line there is an optimal sequence of actions for each day. In the first test case, the optimal strategy for the first day is to do no action at all, as we can only decrease the number of pebbles. The optimal strategy for the second day is at first to exchange 1 pebble for 2 beads, which is a correct exchange, since 1 \u00b7 4 = 2 \u00b7 2 , and then to exchange 2 beads for 3 pebbles.",
    "topics": [
      "data structures",
      "geometry"
    ],
    "id": "1735F"
  },
  {
    "title": "House Planning",
    "url": "https://codeforces.com/problemset/problem/1735/E",
    "history": "There are n houses in your city arranged on an axis at points h_ 1, h_ 2, . . . , h_ n . You want to build a new house for yourself and consider two options where to place it: points p_ 1 and p_ 2 . As you like visiting friends, you have calculated in advance the distances from both options to all existing houses. More formally, you have calculated two arrays d_ 1 , d_ 2 : d_ i, j = | p_ i - h_ j| , where | x| defines the absolute value of x . After a long time of inactivity you have forgotten the locations of the houses h and the options p_ 1 , p_ 2 . But your diary still keeps two arrays \u2014 d_ 1 , d_ 2 , whose authenticity you doubt. Also, the values inside each array could be shuffled, so values at the same positions of d_ 1 and d_ 2 may correspond to different houses. Pay attention, that values from one array could not get to another, in other words, all values in the array d_ 1 correspond the distances from p_ 1 to the houses, and in the array d_ 2 \u2014 from p_ 2 to the houses. Also pay attention, that the locations of the houses h_ i and the considered options p_ j could match. For example, the next locations are correct: h = { 1, 0, 3, 3} , p = { 1, 1} , that could correspond to already shuffled d_ 1 = { 0, 2, 1, 2} , d_ 2 = { 2, 2, 1, 0} . Check whether there are locations of houses h and considered points p_ 1 , p_ 2 , for which the founded arrays of distances would be correct. If it is possible, find appropriate locations of houses and considered options.",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 10^ 3 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 10^ 3 ) \u2014 the length of arrays d_ 1 , d_ 2 . The next two lines contain n integers each: arrays d_ 1 and d_ 2 ( 0 \u2264 d_ i, j\u2264 10^ 9 ) respectively. It is guaranteed that the sum of n over all test cases doesn' t exceed 2 \u00b7 10^ 3 .",
    "output": "For each test case, output a single line \" NO\" if there is no answer. Otherwise output three lines. The first line must contain \" YES\" . In the second line, print n integers h_ 1, h_ 2, . . . , h_ n . In the third line print two integers p_ 1 , p_ 2 . It must be satisfied that 0 \u2264 h_ i, p_ 1, p_ 2 \u2264 2 \u00b7 10^ 9 . We can show that if there is an answer, then there is one satisfying these constraints. If there are several answers, output any of them.",
    "note": "In the image below you can see the sample solutions. Planned houses are shown in bright colours: pink and purple. Existing houses are dim. In test case 1 , the first planned house is located at point 0 , the second at point 10 . The existing house is located at point 5 and is at a distance of 5 from both planned houses. It can be shown that there is no answer for test case 2 . In test case 3 , the planned houses are located at points 33 and 69 . Note that in test case 4 , both plans are located at point 1 , where one of the existing houses is located at the same time. It is a correct placement.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "graph matchings",
      "greedy"
    ],
    "id": "1735E"
  },
  {
    "title": "Meta-set",
    "url": "https://codeforces.com/problemset/problem/1735/D",
    "history": "You like the card board game \" Set\" . Each card contains k features, each of which is equal to a value from the set { 0, 1, 2} . The deck contains all possible variants of cards, that is, there are 3^ k different cards in total. A feature for three cards is called good if it is the same for these cards or pairwise distinct. Three cards are called a set if all k features are good for them. For example, the cards ( 0, 0, 0) , ( 0, 2, 1) , and ( 0, 1, 2) form a set, but the cards ( 0, 2, 2) , ( 2, 1, 2) , and ( 1, 2, 0) do not, as, for example, the last feature is not good. A group of five cards is called a meta- set, if there is strictly more than one set among them. How many meta- sets there are among given n distinct cards?",
    "input": "The first line of the input contains two integers n and k ( 1 \u2264 n \u2264 10^ 3 , 1 \u2264 k \u2264 20 ) \u2014 the number of cards on a table and the number of card features. The description of the cards follows in the next n lines. Each line describing a card contains k integers c_ i, 1, c_ i, 2, . . . , c_ i, k ( 0 \u2264 c_ i, j\u2264 2 ) \u2014 card features. It is guaranteed that all cards are distinct.",
    "output": "Output one integer \u2014 the number of meta- sets.",
    "note": "Let' s draw the cards indicating the first four features. The first feature will indicate the number of objects on a card: 1 , 2 , 3 . The second one is the color: red, green, purple. The third is the shape: oval, diamond, squiggle. The fourth is filling: open, striped, solid. You can see the first three tests below. For the first two tests, the meta- sets are highlighted. In the first test, the only meta- set is the five cards ( 0000, 0001, 0002, 0010, 0020) . The sets in it are the triples ( 0000, 0001, 0002) and ( 0000, 0010, 0020) . Also, a set is the triple ( 0100, 1000, 2200) which does not belong to any meta- set. In the second test, the following groups of five cards are meta- sets: ( 0000, 0001, 0002, 0010, 0020) , ( 0000, 0001, 0002, 0100, 0200) , ( 0000, 0010, 0020, 0100, 0200) . In there third test, there are 54 meta- sets.",
    "topics": [
      "brute force",
      "combinatorics",
      "data structures",
      "hashing",
      "math"
    ],
    "id": "1735D"
  },
  {
    "title": "Slime Escape",
    "url": "https://codeforces.com/problemset/problem/1734/D",
    "history": "You are playing a game called Slime Escape. The game takes place on a number line. Initially, there are n slimes. For all positive integers i where 1 \u2264 i \u2264 n , the i - th slime is located at position i and has health a_ i . You are controlling the slime at position k . There are two escapes located at positions 0 and n+ 1 . Your goal is to reach any one of the two escapes by performing any number of game moves. In one game move, you move your slime to the left or right by one position. However, if there is another slime in the new position, you must absorb it. When absorbing a slime, the health of your slime would be increased by the health of the absorbed slime, then the absorbed slime would be removed from the game. Note that some slimes might have negative health, so your health would decrease when absorbing such slimes. You lose the game immediately if your slime has negative health at any moment during the game. Can you reach one of two escapes by performing any number of game moves, without ever losing the game?",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 20 000 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains two positive integers n , k ( 3 \u2264 n \u2264 200 000 , 1 \u2264 k \u2264 n ) \u2014 the number of slimes and the position of your slime. The second line of each test case contains n integers, a_ 1, a_ 2, . . . , a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) \u2014 the health of the slimes. It is guaranteed that health of your slime is non- negative ( a_ k \u2265 0 ) , and all other slimes have non- zero health ( a_ i 0 for i k ) . It is guaranteed that the sum of n over all test cases does not exceed 200 000 .",
    "output": "For each test case, print \" YES\" ( without quotes) if you can escape without losing, and \" NO\" ( without quotes) otherwise.",
    "note": "In the first test case, you control the slime at position 4 with health 6 . One way to escape is to absorb the slimes at positions 5 , 6 , and 7 . Your slime escapes with 0 health at position 8 . In the second test case, you control the slime with 232 health at position 1 . Since your slime is already located next to the escape at position 0 , you can move to it without absorbing any slime. In the third test case, it can be shown that your slime would always have a negative health before reaching any one of two escapes. In the fourth test case, you control the slime at position 4 with health 6 . The following describes a possible sequence of moves to win: Absorb the slimes at positions 5 , 6 , and 7 : your health becomes 4 after absorbing the slime with health - 2 ; becomes 1 after absorbing the slime with health - 3 ; and becomes 7 after absorbing the slime with health 6 . Absorb the slimes at positions 3 , and 2 : your health becomes 7- 7+ 10= 10 . Absorb the slime at position 8 : your health becomes 10- 10= 0 . Use the escape at position 9 . Since your slime has maintained non- negative health at all times, you have won.",
    "topics": [
      "data structures",
      "dp",
      "greedy",
      "two pointers"
    ],
    "id": "1734D"
  },
  {
    "title": "Location",
    "url": "https://codeforces.com/problemset/problem/1732/E",
    "history": "You are given two arrays of integers a_ 1, a_ 2, . . . , a_ n and b_ 1, b_ 2, . . . , b_ n . You need to handle q queries of the following two types: 1 l r x : assign a_ i : = x for all l \u2264 i \u2264 r ; 2 l r : find the minimum value of the following expression among all l \u2264 i \u2264 r : lcm( a_ i, b_ i) / ( a_ i, b_ i) . In this problem ( x, y) denotes the greatest common divisor of x and y , and lcm( x, y) denotes the least common multiple of x and y .",
    "input": "The first line contains two integers n and q ( 1 \u2264 n, q \u2264 5 \u00b7 10^ 4 ) \u2014 the number of numbers in the arrays a and b and the number of queries. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 5 \u00b7 10^ 4 ) \u2014 the elements of the array a . The third line contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 5 \u00b7 10^ 4 ) \u2014 the elements of the array b . Then q lines follow, j - th of which starts with an integer t_ j ( 1 \u2264 t_ j \u2264 2 ) and means that the j - th query has type t_ j . If t_ j = 1 , it is followed by three integers l_ j , r_ j , and x_ j ( 1 \u2264 l_ j \u2264 r_ j \u2264 n , 1 \u2264 x_ j \u2264 5 \u00b7 10^ 4 ) . If t_ j = 2 , it is followed by two integers l_ j and r_ j ( 1 \u2264 l_ j \u2264 r_ j \u2264 n ) . It is guaranteed that there is at least one query of type 2 .",
    "output": "For each query of the second type, output the minimum value of the expression.",
    "note": "In the first example: For the first query we can choose i = 4 . So the value is lcm( 4, 4) / ( 4, 4) = 4/ 4 = 1 . After the second query the array a = [ 6, 10, 15, 4, 9, 25, 9, 9, 9, 9] . For the third query we can choose i = 9 . So the value is lcm( 9, 18) / ( 9, 18) = 18/ 9 = 2 . In the second: For the first query we can choose i = 4 . So the value is lcm( 1, 5) / ( 1, 5) = 5/ 1 = 5 . After the second query the array a = [ 10, 18, 18, 5] . After the third query the array a = [ 10, 10, 18, 5] . For the fourth query we can choose i = 2 . So the value is lcm( 10, 12) / ( 10, 12) = 60/ 2 = 30 .",
    "topics": [
      "data structures",
      "dp",
      "math",
      "number theory"
    ],
    "id": "1732E"
  },
  {
    "title": "Balance (Hard version)",
    "url": "https://codeforces.com/problemset/problem/1732/D2",
    "history": "This is the hard version of the problem. The only difference is that in this version there are remove queries. Initially you have a set containing one element \u2014 0 . You need to handle q queries of the following types: + x \u2014 add the integer x to the set. It is guaranteed that this integer is not contained in the set; - x \u2014 remove the integer x from the set. It is guaranteed that this integer is contained in the set; ? k \u2014 find the k- mex of the set. In our problem, we define the k- mex of a set of integers as the smallest non- negative integer x that is divisible by k and which is not contained in the set.",
    "input": "The first line contains an integer q ( 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of queries. The following q lines describe the queries. An addition query of integer x is given in the format + x ( 1 \u2264 x \u2264 10^ 18 ) . It is guaranteed that x is not contained in the set. A remove query of integer x is given in the format - x ( 1 \u2264 x \u2264 10^ 18 ) . It is guaranteed that x is contained in the set. A search query of k- mex is given in the format ? k ( 1 \u2264 k \u2264 10^ 18 ) . It is guaranteed that there is at least one query of type ? .",
    "output": "For each query of type ? output a single integer \u2014 the k- mex of the set.",
    "note": "In the first example: After the first and second queries, the set will contain elements { 0, 1, 2} . The smallest non- negative number that is divisible by 1 and is not in the set is 3 . After the fourth query, the set will contain the elements { 0, 1, 2, 4} . The smallest non- negative number that is divisible by 2 and is not in the set is 6 . In the second example: Initially, the set contains only the element { 0} . After adding an integer 100 the set contains elements { 0, 100} . 100- mex of the set is 200 . After adding an integer 200 the set contains elements { 0, 100, 200} . 100- mex of the set 300 . After removing an integer 100 the set contains elements { 0, 200} . 100- mex of the set is 100 . After adding an integer 50 the set contains elements { 0, 50, 200} . 50- mex of the set is 100 . After removing an integer 50 the set contains elements { 0, 200} . 100- mex of the set is 50 .",
    "topics": [
      "brute force",
      "data structures",
      "number theory"
    ],
    "id": "1732D2"
  },
  {
    "title": "Balance (Easy version)",
    "url": "https://codeforces.com/problemset/problem/1732/D1",
    "history": "This is the easy version of the problem. The only difference is that in this version there are no \" remove\" queries. Initially you have a set containing one element \u2014 0 . You need to handle q queries of the following types: + x \u2014 add the integer x to the set. It is guaranteed that this integer is not contained in the set; ? k \u2014 find the k- mex of the set. In our problem, we define the k- mex of a set of integers as the smallest non- negative integer x that is divisible by k and which is not contained in the set.",
    "input": "The first line contains an integer q ( 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of queries. The following q lines describe the queries. An addition query of integer x is given in the format + x ( 1 \u2264 x \u2264 10^ 18 ) . It is guaranteed that x was not contained in the set. A search query of k- mex is given in the format ? k ( 1 \u2264 k \u2264 10^ 18 ) . It is guaranteed that there will be at least one query of type ? .",
    "output": "For each query of type ? output a single integer \u2014 the k- mex of the set.",
    "note": "In the first example: After the first and second queries, the set will contain elements { 0, 1, 2} . The smallest non- negative number that is divisible by 1 and is not contained in the set is 3 . After the fourth query, the set will contain the elements { 0, 1, 2, 4} . The smallest non- negative number that is divisible by 2 and is not contained in the set is 6 . In the second example: Initially, the set contains only the element { 0} . After adding an integer 100 the set contains elements { 0, 100} . 100- mex of the set is 200 . After adding an integer 200 the set contains elements { 0, 100, 200} . 100- mex of the set is 300 . After adding an integer 50 the set contains elements { 0, 50, 100, 200} . 50- mex of the set is 150 .",
    "topics": [
      "brute force",
      "data structures",
      "implementation",
      "number theory"
    ],
    "id": "1732D1"
  },
  {
    "title": "Valiant's New Map",
    "url": "https://codeforces.com/problemset/problem/1731/D",
    "history": "Game studio \" DbZ Games\" wants to introduce another map in their popular game \" Valiant\" . This time, the map named \" Panvel\" will be based on the city of Mumbai. Mumbai can be represented as n \u00d7 m cellular grid. Each cell ( i, j) ( 1 \u2264 i \u2264 n ; 1 \u2264 j \u2264 m ) of the grid is occupied by a cuboid building of height a_ i, j . This time, DbZ Games want to make a map that has perfect vertical gameplay. That' s why they want to choose an l \u00d7 l square inside Mumbai, such that each building inside the square has a height of at least l . Can you help DbZ Games find such a square of the maximum possible size l ?",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 1000 ) . Description of the test cases follows. The first line of each test case contains two positive integers n and m ( 1 \u2264 n \u2264 m ; 1 \u2264 n \u00b7 m \u2264 10^ 6 ) . The i - th of next n lines contains m integers a_ i, 1, a_ i, 2, . . . , a_ i, m ( 1 \u2264 a_ i, j\u2264 10^ 6 ) \u2014 heights of buildings on the i - th row. It' s guaranteed that the sum of n \u00b7 m over all test cases doesn' t exceed 10^ 6 .",
    "output": "For each test case, print the maximum side length l of the square DbZ Games can choose.",
    "note": "In the first test case, we can choose the square of side l = 2 ( i. e. the whole grid) since the heights of all buildings are greater than or equal to 2 . In the second test case, we can only choose the side as 1 , so the answer is 1 . In the third test case, there are no squares of size 2 that have all buildings of height at least 2 , so the answer is 1 .",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "dp",
      "two pointers"
    ],
    "id": "1731D"
  },
  {
    "title": "Almost Sorted",
    "url": "https://codeforces.com/problemset/problem/1730/F",
    "history": "You are given a permutation p of length n and a positive integer k . Consider a permutation q of length n such that for any integers i and j , where 1 \u2264 i < j \u2264 n , we have p_ q_ i\u2264 p_ q_ j + k. Find the minimum possible number of inversions in a permutation q . A permutation is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [ 2, 3, 1, 5, 4] is a permutation, but [ 1, 2, 2] is not a permutation ( 2 appears twice in the array) and [ 1, 3, 4] is also not a permutation ( n= 3 but there is 4 in the array) . An inversion in a permutation a is a pair of indices i and j ( 1 \u2264 i, j \u2264 n ) such that i < j , but a_ i > a_ j .",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 5000 , 1 \u2264 k \u2264 8 ) . The second line contains n distinct integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) .",
    "output": "Print the minimum possible number of inversions in the permutation q .",
    "note": "In the first example, the only permutation is q = [ 1] ( 0 inversions) . Then p_ q_ 1 = 1 . In the second example, the only permutation with 1 inversion is q = [ 1, 3, 2] . Then p_ q_ 1 = 2 , p_ q_ 2 = 1 , p_ q_ 3 = 3 . In the third example, one of the possible permutations with 6 inversions is q = [ 3, 4, 5, 1, 2] . Then p_ q_ 1 = 3 , p_ q_ 2 = 2 , p_ q_ 3 = 1 , p_ q_ 4 = 5 , p_ q_ 5 = 4 .",
    "topics": [
      "bitmasks",
      "data structures",
      "dp"
    ],
    "id": "1730F"
  },
  {
    "title": "Maximums and Minimums",
    "url": "https://codeforces.com/problemset/problem/1730/E",
    "history": "You are given an array a_ 1, a_ 2, . . . , a_ n of positive integers. Find the number of pairs of indices ( l, r) , where 1 \u2264 l \u2264 r \u2264 n , that pass the check. The check is performed in the following manner: The minimum and maximum numbers are found among a_ l, a_ l+ 1, . . . , a_ r . The check is passed if the maximum number is divisible by the minimum number.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10 ) \u2014 the number of test cases. Then the test cases follow. Each test case consists of two lines. The first line contains a single integer n ( 1 \u2264 n \u2264 5 \u00b7 10^ 5 ) \u2014 the size of the array. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 6 ) . It is guaranteed that the sum of n over all test cases does not exceed 5 \u00b7 10^ 5 .",
    "output": "For each test case, print a single integer \u2014 the number of pairs of indices that pass the check.",
    "note": "Below x | y denotes that y is divisible by x . In the first test case, there is one pair ( 1, 1) , the maximum for this pair is 1 , the minimum is also 1 , 1 | 1 , so the check is passed, and the answer is 1 . In the second test case, there are 3 segments: ( 1, 1) : the maximum is 2 , the minimum is 2 , 2 | 2 , so the check is passed. ( 1, 2) : the maximum is 4 , the minimum is 2 , 2 | 4 , so the check is passed. ( 2, 2) : the maximum is 4 , the minimum is 4 , 4 | 4 , so the check is passed. In the third test case, there are 3 segments: ( 1, 1) : the maximum is 2 , the minimum is 2 , 2 | 2 , so the check is passed. ( 1, 2) : the maximum is 3 , the minimum is 2 , 3 isn' t divisible by 2 , so the check is failed. ( 2, 2) : the maximum is 3 , the minimum is 3 , 3 | 3 , so the check is passed.",
    "topics": [
      "combinatorics",
      "data structures",
      "divide and conquer",
      "number theory"
    ],
    "id": "1730E"
  },
  {
    "title": "Minimum Notation",
    "url": "https://codeforces.com/problemset/problem/1730/C",
    "history": "You have a string s consisting of digits from 0 to 9 inclusive. You can perform the following operation any ( possibly zero) number of times: You can choose a position i and delete a digit d on the i - th position. Then insert the digit min( d + 1, 9) on any position ( at the beginning, at the end or in between any two adjacent digits) . What is the lexicographically smallest string you can get by performing these operations? A string a is lexicographically smaller than a string b of the same length if and only if the following holds: in the first position where a and b differ, the string a has a smaller digit than the corresponding digit in b .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then the test cases follow. Each test case consists of a single line that contains one string s ( 1 \u2264 | s| \u2264 2 \u00b7 10^ 5 ) \u2014 the string consisting of digits. Please note that s is just a string consisting of digits, so leading zeros are allowed. It is guaranteed that the sum of lengths of s over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "Print a single string \u2014 the minimum string that is possible to obtain.",
    "note": "In the first test case: Delete 8 and insert 9 at the end of the notation. The resulting notation is 04299 . Delete 4 and insert 5 in the 3 - rd position of the notation. The resulting notation is 02599 . Nothing needs to be done in the second and third test cases.",
    "topics": [
      "data structures",
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1730C"
  },
  {
    "title": "Planets",
    "url": "https://codeforces.com/problemset/problem/1730/A",
    "history": "One day, Vogons wanted to build a new hyperspace highway through a distant system with n planets. The i - th planet is on the orbit a_ i , there could be multiple planets on the same orbit. It' s a pity that all the planets are on the way and need to be destructed. Vogons have two machines to do that. The first machine in one operation can destroy any planet at cost of 1 Triganic Pu. The second machine in one operation can destroy all planets on a single orbit in this system at the cost of c Triganic Pus. Vogons can use each machine as many times as they want. Vogons are very greedy, so they want to destroy all planets with minimum amount of money spent. Can you help them to know the minimum cost of this project?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. Then the test cases follow. Each test case consists of two lines. The first line contains two integers n and c ( 1 \u2264 n, c \u2264 100 ) \u2014 the number of planets and the cost of the second machine usage. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 100 ) , where a_ i is the orbit of the i - th planet.",
    "output": "For each test case print a single integer \u2014 the minimum cost of destroying all planets.",
    "note": "In the first test case, the cost of using both machines is the same, so you can always use the second one and destroy all planets in orbit 1 , all planets in orbit 2 , all planets in orbit 4 , all planets in orbit 5 . In the second test case, it is advantageous to use the second machine for 2 Triganic Pus to destroy all the planets in orbit 2 , then destroy the remaining two planets using the first machine. In the third test case, you can use the first machine twice or the second machine once. In the fourth test case, it is advantageous to use the first machine twice.",
    "topics": [
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "1730A"
  },
  {
    "title": "Red-Black Pepper",
    "url": "https://codeforces.com/problemset/problem/1728/E",
    "history": "Monocarp is going to host a party for his friends. He prepared n dishes and is about to serve them. First, he has to add some powdered pepper to each of them \u2014 otherwise, the dishes will be pretty tasteless. The i - th dish has two values a_ i and b_ i \u2014 its tastiness with red pepper added or black pepper added, respectively. Monocarp won' t add both peppers to any dish, won' t add any pepper multiple times, and won' t leave any dish without the pepper added. Before adding the pepper, Monocarp should first purchase the said pepper in some shop. There are m shops in his local area. The j - th of them has packages of red pepper sufficient for x_ j servings and packages of black pepper sufficient for y_ j servings. Monocarp goes to exactly one shop, purchases multiple ( possibly, zero) packages of each pepper in such a way that each dish will get the pepper added once, and no pepper is left. More formally, if he purchases x red pepper packages and y black pepper packages, then x and y should be non- negative and x \u00b7 x_ j + y \u00b7 y_ j should be equal to n . For each shop, determine the maximum total tastiness of the dishes after Monocarp buys pepper packages only in this shop and adds the pepper to the dishes. If it' s impossible to purchase the packages in the said way, print - 1.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 3 \u00b7 10^ 5 ) \u2014 the number of dishes. The i - th of the next n lines contains two integers a_ i and b_ i ( 1 \u2264 a_ i, b_ i \u2264 10^ 9 ) \u2014 the tastiness of the i - th dish with red pepper added or black pepper added, respectively. The next line contains a single integer m ( 1 \u2264 m \u2264 3 \u00b7 10^ 5 ) \u2014 the number of shops. The j - th of the next m lines contains two integers x_ j and y_ j ( 1 \u2264 x_ j, y_ j \u2264 n ) \u2014 the number of servings the red and the black pepper packages are sufficient for in the j - th shop, respectively.",
    "output": "Print m integers. For each shop, print the maximum total tastiness of the dishes after Monocarp buys pepper packages only in this shop and adds the pepper to the dishes. If it' s impossible to purchase the packages so that each dish will get the pepper added once and no pepper is left, print - 1.",
    "note": "Consider the first example. In the first shop, Monocarp can only buy 0 red pepper packages and 1 black pepper package. Black pepper added to all dishes will sum up to 10 + 50 + 2 = 62 . In the second shop, Monocarp can buy any number of red and black pepper packages: 0 and 3 , 1 and 2 , 2 and 1 or 3 and 0 . The optimal choice turns out to be either 1 and 2 or 2 and 1 . Monocarp can add black pepper to the first dish, red pepper to the second dish and any pepper to the third dish, the total is 10 + 100 + 2 = 112 . In the third shop, Monocarp can only buy 1 red pepper package and 0 black pepper packages. Red pepper added to all dishes will sum up to 5 + 100 + 2 = 107 . In the fourth shop, Monocarp can only buy an even total number of packages. Since n is odd, it' s impossible to get exactly n packages. Thus, the answer is - 1 .",
    "topics": [
      "brute force",
      "data structures",
      "greedy",
      "math",
      "number theory"
    ],
    "id": "1728E"
  },
  {
    "title": "Digital Logarithm",
    "url": "https://codeforces.com/problemset/problem/1728/C",
    "history": "Let' s define f( x) for a positive integer x as the length of the base- 10 representation of x without leading zeros. I like to call it a digital logarithm. Similar to a digital root, if you are familiar with that. You are given two arrays a and b , each containing n positive integers. In one operation, you do the following: pick some integer i from 1 to n ; assign either f( a_ i) to a_ i or f( b_ i) to b_ i . Two arrays are considered similar to each other if you can rearrange the elements in both of them, so that they are equal ( e. g. a_ i = b_ i for all i from 1 to n ) . What' s the smallest number of operations required to make a and b similar to each other?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of testcases. The first line of the testcase contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of elements in each of the arrays. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i < 10^ 9 ) . The third line contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ j < 10^ 9 ) . The sum of n over all testcases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each testcase, print the smallest number of operations required to make a and b similar to each other.",
    "note": "In the first testcase, you can apply the digital logarithm to b_ 1 twice. In the second testcase, the arrays are already similar to each other. In the third testcase, you can first apply the digital logarithm to a_ 1 , then to b_ 2 .",
    "topics": [
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "1728C"
  },
  {
    "title": "A Certain Magical Party",
    "url": "https://codeforces.com/problemset/problem/1726/G",
    "history": "There are n people at a party. The i - th person has an amount of happiness a_ i . Every person has a certain kind of personality which can be represented as a binary integer b . If b = 0 , it means the happiness of the person will increase if he tells the story to someone strictly less happy than them. If b = 1 , it means the happiness of the person will increase if he tells the story to someone strictly more happy than them. Let us define a speaking order as an ordering of the people from left to right. Now the following process occurs. We go from left to right. The current person tells the story to all people other than himself. Note that all happiness values stay constant while this happens. After the person is done, he counts the number of people who currently have strictly less/ more happiness than him as per his kind of personality, and his happiness increases by that value. Note that only the current person' s happiness value increases. As the organizer of the party, you don' t want anyone to leave sad. Therefore, you want to count the number of speaking orders such that at the end of the process all n people have equal happiness. Two speaking orders are considered different if there exists at least one person who does not have the same position in the two speaking orders.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of people. The second line contains a sequence of n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 2n ) \u2014 the happiness values. The third line contains a sequence of n binary numbers b_ 1, b_ 2, . . . , b_ n ( b_ i \u2208{ 0, 1} ) \u2014 the kinds of personality.",
    "output": "Output the number of different valid speaking orders. Since this number can be large, output it modulo 998244353 .",
    "note": "Here is the explanation for the first example. One valid speaking order is [ 2, 1, 4, 3] ( here, we have written the indices of each person) . Each step shows the current happiness values and results. Step 1 : [ 1, 2, 4, 4] \u2192 Person 2 tells the story to others. Since his kind of personality is 1 , his happiness increases by 2 since persons 3 and 4 have strictly greater happiness. Step 2 : [ 1, 4, 4, 4] \u2192 Person 1 tells the story to others. Since his kind of personality is 1 , his happiness increases by 3 since persons 2 , 3 and 4 have strictly greater happiness. Step 3 : [ 4, 4, 4, 4] \u2192 Person 4 tells the story to others. Since his kind of personality is 0 , his happiness increases by 0 since no one has strictly lesser happiness. Step 4 : [ 4, 4, 4, 4] \u2192 Person 3 tells the story to others. Since his kind of personality is 0 , his happiness increases by 0 since no one has strictly lesser happiness. At the end, everyone has equal happiness. Note that [ 2, 1, 3, 4] is also a valid answer for this example. It can be shown that there is no valid ordering for the second example.",
    "topics": [
      "combinatorics",
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "1726G"
  },
  {
    "title": "Late For Work (submissions are not allowed)",
    "url": "https://codeforces.com/problemset/problem/1726/F",
    "history": "This problem was copied by the author from another online platform. Codeforces strongly condemns this action and therefore further submissions to this problem are not accepted. Debajyoti has a very important meeting to attend and he is already very late. Harsh, his driver, needs to take Debajyoti to the destination for the meeting as fast as possible. Harsh needs to pick up Debajyoti from his home and take him to the destination so that Debajyoti can attend the meeting in time. A straight road with n traffic lights connects the home and the destination for the interview. The traffic lights are numbered in order from 1 to n . Each traffic light cycles after t seconds. The i - th traffic light is green ( in which case Harsh can cross the traffic light) for the first g_ i seconds, and red ( in which case Harsh must wait for the light to turn green ) for the remaining ( t\u2212g_ i) seconds, after which the pattern repeats. Each light' s cycle repeats indefinitely and initially, the i - th light is c_ i seconds into its cycle ( a light with c_ i= 0 has just turned green ) . In the case that Harsh arrives at a light at the same time it changes colour, he will obey the new colour. Formally, the i - th traffic light is green from [ 0, g_ i) and red from [ g_ i, t) ( after which it repeats the cycle) . The i - th traffic light is initially at the c_ i - th second of its cycle. From the i - th traffic light, exactly d_ i seconds are required to travel to the next traffic light ( that is to the ( i+ 1) - th light) . Debajyoti' s home is located just before the first light and Debajyoti drops for the interview as soon as he passes the n - th light. In other words, no time is required to reach the first light from Debajyoti' s home or to reach the interview centre from the n - th light. Harsh does not know how much longer it will take for Debajyoti to get ready. While waiting, he wonders what is the minimum possible amount of time he will spend driving provided he starts the moment Debajyoti arrives, which can be anywhere between 0 to \u221e seconds from now. Can you tell Harsh the minimum possible amount of time he needs to spend on the road? Please note that Harsh can only start or stop driving at integer moments of time.",
    "input": "The first line of input will contain two integers, n and t ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 , 2 \u2264 t \u2264 10^ 9 ) denoting the number of traffic lights and the cycle length of the traffic lights respectively. n lines of input follow. The i - th line will contain two integers g_ i and c_ i ( 1 \u2264 g_ i < t , 0 \u2264 c_ i < t ) describing the i - th traffic light. The following line of input contains n\u22121 integers d_ 1, d_ 2, . . . , d_ n- 1 ( 0 \u2264 d_ i \u2264 10^ 9 ) \u2014 the time taken to travel from the i - th to the ( i+ 1) - th traffic light.",
    "output": "Output a single integer \u2014 the minimum possible amount of time Harsh will spend driving.",
    "note": "In the first example, Harsh can do the following: Initially, the 5 traffic lights are at the following seconds in their cycle: { 2, 3, 6, 2, 0} . An optimal time for Harsh to start is if Debajyoti arrives after 1 second. Note that this 1 second will not be counted in the final answer. The lights will be now at { 3, 4, 7, 3, 1} , so Harsh can drive from the 1 - st light to the 2 - nd light, which requires 1 second to travel. The lights are now at { 4, 5, 8, 4, 2} , so Harsh can continue driving, without stopping, to the 3 - rd light, which requires 2 seconds to travel. The lights are now at { 6, 7, 0, 6, 4} , so Harsh continues to the 4 - th light, which requires 3 seconds to travel. The lights are now at { 9, 0, 3, 9, 7} . Harsh must wait 1 second for the 4 - th light to turn green before going to the 5 - th light, which requires 4 seconds to travel. The lights are now at { 4, 5, 8, 4, 2} , so Harsh can continue traveling, without stopping, to the meeting destination. The total time that Harsh had to drive for is 1+ 2+ 3+ 1+ 4= 11 seconds. In the second example, Harsh can do the following: Initially, the 6 traffic lights are at the following seconds in their cycle: { 3, 5, 0, 8, 7, 6} . An optimal time for Harsh to start is if Debajyoti arrives after 1 second. Note that this 1 second will not be counted in the final answer. The lights will be now at { 4, 6, 1, 0, 8, 7} , so Harsh can drive from the 1 - st light to the 2 - nd light, which requires 0 seconds to travel. The lights are still at { 4, 6, 1, 0, 8, 7} . Harsh must wait 3 seconds for the 2 - nd light to turn green, before going to the 3 - rd light, which requires 0 seconds to travel. The lights are now at { 7, 0, 4, 3, 2, 1} , so Harsh continues to the 4 - th light, which requires 0 seconds to travel. The lights are still at { 7, 0, 4, 3, 2, 1} , so Harsh continues to the 5 - th light, which requires 0 seconds to travel. The lights are still at { 7, 0, 4, 3, 2, 1} , so Harsh continues to the 6 - th light, which requires 0 seconds to travel. The lights are still at { 7, 0, 4, 3, 2, 1} , so Harsh can continue traveling, without stopping, to the meeting destination. The total time that Harsh had to drive for is 0+ 3+ 0+ 0+ 0= 3 seconds.",
    "topics": [
      "data structures",
      "greedy",
      "schedules",
      "shortest paths"
    ],
    "id": "1726F"
  },
  {
    "title": "Jatayu's Balanced Bracket Sequence",
    "url": "https://codeforces.com/problemset/problem/1726/C",
    "history": "Last summer, Feluda gifted Lalmohan- Babu a balanced bracket sequence s of length 2 n . Topshe was bored during his summer vacations, and hence he decided to draw an undirected graph of 2 n vertices using the balanced bracket sequence s . For any two distinct vertices i and j ( 1 \u2264 i < j \u2264 2 n ) , Topshe draws an edge ( undirected and unweighted) between these two nodes if and only if the subsegment s[ i . . . j] forms a balanced bracket sequence. Determine the number of connected components in Topshe' s graph. See the Notes section for definitions of the underlined terms.",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of opening brackets in string s . The second line of each test case contains a string s of length 2 n \u2014 a balanced bracket sequence consisting of n opening brackets \" ( \" , and n closing brackets \" ) \" . It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, output a single integer \u2014 the number of connected components in Topshe' s graph.",
    "note": "Sample explanation: In the first test case, the graph constructed from the bracket sequence ( ) , is just a graph containing nodes 1 and 2 connected by a single edge. In the second test case, the graph constructed from the bracket sequence ( ) ( ( ) ) would be the following ( containing two connected components) : Definition of Underlined Terms: A sequence of brackets is called balanced if one can turn it into a valid math expression by adding characters + and 1 . For example, sequences ( ( ) ) ( ) , ( ) , and ( ( ) ( ( ) ) ) are balanced, while ) ( , ( ( ) , and ( ( ) ) ) ( are not. The subsegment s[ l . . . r] denotes the sequence [ s_ l, s_ l + 1, . . . , s_ r] . A connected component is a set of vertices X such that for every two vertices from this set there exists at least one path in the graph connecting these vertices, but adding any other vertex to X violates this rule.",
    "topics": [
      "data structures",
      "dsu",
      "graphs",
      "greedy"
    ],
    "id": "1726C"
  },
  {
    "title": "Lemper Cooking Competition",
    "url": "https://codeforces.com/problemset/problem/1725/L",
    "history": "Pak Chanek is participating in a lemper cooking competition. In the competition, Pak Chanek has to cook lempers with N stoves that are arranged sequentially from stove 1 to stove N . Initially, stove i has a temperature of A_ i degrees. A stove can have a negative temperature. Pak Chanek realises that, in order for his lempers to be cooked, he needs to keep the temperature of each stove at a non- negative value. To make it happen, Pak Chanek can do zero or more operations. In one operation, Pak Chanek chooses one stove i with 2 \u2264 i \u2264 N- 1 , then: changes the temperature of stove i- 1 into A_ i- 1 : = A_ i- 1 + A_ i , changes the temperature of stove i+ 1 into A_ i+ 1 : = A_ i+ 1 + A_ i , and changes the temperature of stove i into A_ i : = - A_ i . Pak Chanek wants to know the minimum number of operations he needs to do such that the temperatures of all stoves are at non- negative values. Help Pak Chanek by telling him the minimum number of operations needed or by reporting if it is not possible to do.",
    "input": "The first line contains a single integer N ( 1 \u2264 N \u2264 10^ 5 ) \u2014 the number of stoves. The second line contains N integers A_ 1, A_ 2, . . . , A_ N ( - 10^ 9 \u2264 A_ i \u2264 10^ 9 ) \u2014 the initial temperatures of the stoves.",
    "output": "Output an integer representing the minimum number of operations needed to make the temperatures of all stoves at non- negative values or output - 1 if it is not possible.",
    "note": "For the first example, a sequence of operations that can be done is as follows: Pak Chanek does an operation to stove 3 , A = [ 2, - 2, 1, 4, 2, - 2, 9] . Pak Chanek does an operation to stove 2 , A = [ 0, 2, - 1, 4, 2, - 2, 9] . Pak Chanek does an operation to stove 3 , A = [ 0, 1, 1, 3, 2, - 2, 9] . Pak Chanek does an operation to stove 6 , A = [ 0, 1, 1, 3, 0, 2, 7] . There is no other sequence of operations such that the number of operations needed is fewer than 4 .",
    "topics": [
      "data structures"
    ],
    "id": "1725L"
  },
  {
    "title": "Kingdom of Criticism",
    "url": "https://codeforces.com/problemset/problem/1725/K",
    "history": "Pak Chanek is visiting a kingdom that earned a nickname \" Kingdom of Criticism\" because of how often its residents criticise each aspect of the kingdom. One aspect that is often criticised is the heights of the buildings. The kingdom has N buildings. Initially, building i has a height of A_ i units. At any point in time, the residents can give a new criticism, namely they currently do not like buildings with heights between l and r units inclusive for some two integers l and r . It is known that r- l is always odd. In 1 minute, the kingdom' s construction team can increase or decrease the height of any building by 1 unit as long as the height still becomes a positive number. Each time they receive the current criticism from the residents, the kingdom' s construction team makes it so that there are no buildings with heights between l and r units inclusive in the minimum time possible. It can be obtained that there is only one way to do this. Note that the construction team only cares about the current criticism from the residents. All previous criticisms are forgotten. There will be Q queries that you must solve. Each query is one of the three following possibilities: 1 k w: The kingdom' s construction team changes the height of building k to be w units ( 1 \u2264 k \u2264 N , 1 \u2264 w \u2264 10^ 9 ) . 2 k: The kingdom' s construction team wants you to find the height of building k ( 1 \u2264 k \u2264 N ) . 3 l r: The residents currently do not like buildings with heights between l and r units inclusive ( 2 \u2264 l \u2264 r \u2264 10^ 9- 1 , r- l is odd) . Note that each change in height still persists to the next queries.",
    "input": "The first line contains a single integer N ( 1 \u2264 N \u2264 4 \u00b7 10^ 5 ) \u2014 the number buildings in the kingdom. The second line contains N integers A_ 1, A_ 2, . . . , A_ N ( 1 \u2264 A_ i \u2264 10^ 9 ) \u2014 the initial heights of the buildings. The next line contains a single integer Q ( 1 \u2264 Q \u2264 4 \u00b7 10^ 5 ) \u2014 the number of queries. The j - th of the next Q lines contains the j - th query as described. There is at least one query of type 2 .",
    "output": "For each query of type 2 , output a line containing an integer representing the height of the building asked.",
    "note": "After the 1 - st query, the height of each building is 2, 6, 5, 6, 10 . After the 3 - rd query, the height of each building is 3, 6, 5, 6, 10 . After the 4 - th query, the height of each building is 2, 7, 7, 7, 10 . After the 5 - th query, the height of each building is 2, 7, 7, 7, 10 . After the 6 - th query, the height of each building is 2, 9, 7, 7, 10 .",
    "topics": [
      "data structures",
      "dsu"
    ],
    "id": "1725K"
  },
  {
    "title": "Field Photography",
    "url": "https://codeforces.com/problemset/problem/1725/F",
    "history": "Pak Chanek is traveling to Manado. It turns out that OSN ( Indonesian National Scientific Olympiad) 2019 is being held. The contestants of OSN 2019 are currently lining up in a field to be photographed. The field is shaped like a grid of size N \u00d7 10^ 100 with N rows and 10^ 100 columns. The rows are numbered from 1 to N from north to south, the columns are numbered from 1 to 10^ 100 from west to east. The tile in row r and column c is denoted as ( r, c) . There are N provinces that participate in OSN 2019. Initially, each contestant who represents province i stands in tile ( i, p) for each p satisfying L_ i \u2264 p \u2264 R_ i . So, we can see that there are R_ i- L_ i+ 1 contestants who represent province i . Pak Chanek has a variable Z that is initially equal to 0 . In one operation, Pak Chanek can choose a row i and a positive integer k . Then, Pak Chanek will do one of the two following possibilities: Move all contestants in row i exactly k tiles to the west. In other words, a contestant who is in ( i, p) is moved to ( i, p- k) . Move all contestants in row i exactly k tiles to the east. In other words, a contestant who is in ( i, p) is moved to ( i, p+ k) . After each operation, the value of Z will change into Z OR k , with OR being the bitwise OR operation. Note that Pak Chanek can do operations to the same row more than once. Also note that Pak Chanek is not allowed to move contestants out of the grid. There are Q questions. For the j - th question, you are given a positive integer W_ j , Pak Chanek must do zero or more operations so that the final value of Z is exactly W_ j . Define M as the biggest number such that after all operations, there is at least one column that contains exactly M contestants. For each question, you must find the biggest possible M for all sequences of operations that can be done by Pak Chanek. Note that the operations done by Pak Chanek for one question do not carry over to other questions.",
    "input": "The first line contains a single integer N ( 1 \u2264 N \u2264 10^ 5 ) \u2014 the number of rows in the grid and also the number of provinces that participate in OSN 2019. The i - th of the next N lines contains two integers L_ i and R_ i ( 1 \u2264 L_ i \u2264 R_ i \u2264 10^ 9 ) describing the positions of the contestants who represent province i . The next line contains a single integer Q ( 1 \u2264 Q \u2264 10^ 5 ) \u2014 the number of questions. The j - th of the next Q lines contains a single integer W_ j ( 1 \u2264 W_ j \u2264 10^ 9 ) \u2014 the required final value of Z for the j - th question.",
    "output": "Output Q lines, with the j - th line containing an integer that is the answer to the j - th question.",
    "note": "For the 1 - st question, Pak Chanek can do the following operations to get M= 2 : Move all contestants in row 2 to the east by 4 tiles. Z changes into 0 OR 4 = 4 . Move all contestants in row 1 to the east by 12 tiles. Z changes into 4 OR 12 = 12 . Now, columns 14 and 15 each contains exactly 2 contestants. For the 2 - nd question, Pak Chanek can do the following operations to get M= 3 : Move all contestants in row 3 to the east by 4 tiles. Z changes into 0 OR 4 = 4 . Move all contestants in row 3 to the west by 1 tiles. Z changes into 4 OR 1 = 5 . Move all contestants in row 1 to the east by 5 tiles. Z changes into 5 OR 5 = 5 . Move all contestants in row 1 to the east by 5 tiles. Z changes into 5 OR 5 = 5 . Now, column 11 contains exactly 3 contestants. The following is an illustration of the example operations for the 2 - nd question.",
    "topics": [
      "bitmasks",
      "data structures",
      "sortings"
    ],
    "id": "1725F"
  },
  {
    "title": "Electrical Efficiency",
    "url": "https://codeforces.com/problemset/problem/1725/E",
    "history": "In the country of Dengkleknesia, there are N factories numbered from 1 to N . Factory i has an electrical coefficient of A_ i . There are also N- 1 power lines with the j - th power line connecting factory U_ j and factory V_ j . It can be guaranteed that each factory in Dengkleknesia is connected to all other factories in Dengkleknesia through one or more power lines. In other words, the collection of factories forms a tree. Each pair of different factories in Dengkleknesia can use one or more existing power lines to transfer electricity to each other. However, each power line needs to be turned on first so that electricity can pass through it. Define f( x, y, z) as the minimum number of power lines that need to be turned on so that factory x can make electrical transfers to factory y and factory z . Also define g( x, y, z) as the number of distinct prime factors of GCD( A_ x, A_ y, A_ z) . To measure the electrical efficiency, you must find the sum of f( x, y, z) \u00d7 g( x, y, z) for all combinations of ( x, y, z) such that 1 \u2264 x < y < z \u2264 N . Because the answer can be very large, you just need to output the answer modulo 998 244 353 . Note: GCD( k_ 1, k_ 2, k_ 3) is the greatest common divisor of k_ 1 , k_ 2 , and k_ 3 , which is the biggest integer that simultaneously divides k_ 1 , k_ 2 , and k_ 3 .",
    "input": "The first line contains a single integer N ( 1 \u2264 N \u2264 2 \u00b7 10^ 5 ) \u2014 the number of factories in Dengkleknesia. The second line contains N integers A_ 1, A_ 2, . . . , A_ N ( 1 \u2264 A_ i \u2264 2 \u00b7 10^ 5 ) \u2014 the electrical coefficients of the factories. The j - th of the next N- 1 lines contains two integers U_ j and V_ j ( 1 \u2264 U_ j, V_ j \u2264 N ) \u2014 a power line that connects cities U_ j and V_ j . The collection of factories forms a tree.",
    "output": "An integer representing the sum of f( x, y, z) \u00d7 g( x, y, z) for all combinations of ( x, y, z) such that 1 \u2264 x < y < z \u2264 N , modulo 998 244 353",
    "note": "In the first example, the only ( x, y, z) possible is ( 1, 2, 3) . Because GCD( A_ 1, A_ 2, A_ 3) = GCD( 1, 2, 3) = 1 has 0 distinct prime factors, therefore f( x, y, z) \u00d7 g( x, y, z) = 2 \u00d7 0 = 0 . In the second example, all triples ( x, y, z) that satisfy the condition are as follows: ( 1, 2, 3) \u2192 f( 1, 2, 3) \u00d7 g( 1, 2, 3) = 2 \u00d7 1 = 2 ( 1, 2, 4) \u2192 f( 1, 2, 4) \u00d7 g( 1, 2, 4) = 2 \u00d7 1 = 2 ( 1, 3, 4) \u2192 f( 1, 3, 4) \u00d7 g( 1, 3, 4) = 3 \u00d7 2 = 6 ( 2, 3, 4) \u2192 f( 2, 3, 4) \u00d7 g( 2, 3, 4) = 2 \u00d7 1 = 2 So the electrical efficiency is 2 + 2 + 6 + 2 = 12 .",
    "topics": [
      "combinatorics",
      "data structures",
      "dp",
      "math",
      "number theory",
      "trees"
    ],
    "id": "1725E"
  },
  {
    "title": "Counting Rectangles",
    "url": "https://codeforces.com/problemset/problem/1722/E",
    "history": "You have n rectangles, the i - th rectangle has height h_ i and width w_ i . You are asked q queries of the form h_ s w_ s h_ b w_ b . For each query output, the total area of rectangles you own that can fit a rectangle of height h_ s and width w_ s while also fitting in a rectangle of height h_ b and width w_ b . In other words, print \u2211 h_ i \u00b7 w_ i for i such that h_ s < h_ i < h_ b and w_ s < w_ i < w_ b . Please note, that if two rectangles have the same height or the same width, then they cannot fit inside each other. Also note that you cannot rotate rectangles. Please note that the answer for some test cases won' t fit into 32- bit integer type, so you should use at least 64- bit integer type in your programming language ( like long long for C+ + ) .",
    "input": "The first line of the input contains an integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The first line of each test case two integers n, q ( 1 \u2264 n \u2264 10^ 5 ; 1 \u2264 q \u2264 10^ 5 ) \u2014 the number of rectangles you own and the number of queries. Then n lines follow, each containing two integers h_ i, w_ i ( 1 \u2264 h_ i, w_ i \u2264 1000 ) \u2014 the height and width of the i - th rectangle. Then q lines follow, each containing four integers h_ s, w_ s, h_ b, w_ b ( 1 \u2264 h_ s < h_ b, w_ s < w_ b \u2264 1000 ) \u2014 the description of each query. The sum of q over all test cases does not exceed 10^ 5 , and the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, output q lines, the i - th line containing the answer to the i - th query.",
    "note": "In the first test case, there is only one query. We need to find the sum of areas of all rectangles that can fit a 1 \u00d7 1 rectangle inside of it and fit into a 3 \u00d7 4 rectangle. Only the 2 \u00d7 3 rectangle works, because 1 < 2 ( comparing heights) and 1 < 3 ( comparing widths) , so the 1 \u00d7 1 rectangle fits inside, and 2 < 3 ( comparing heights) and 3 < 4 ( comparing widths) , so it fits inside the 3 \u00d7 4 rectangle. The 3 \u00d7 2 rectangle is too tall to fit in a 3 \u00d7 4 rectangle. The total area is 2 \u00b7 3 = 6 .",
    "topics": [
      "brute force",
      "data structures",
      "dp",
      "implementation"
    ],
    "id": "1722E"
  },
  {
    "title": "Word Game",
    "url": "https://codeforces.com/problemset/problem/1722/C",
    "history": "Three guys play a game: first, each person writes down n distinct words of length 3 . Then, they total up the number of points as follows: if a word was written by one person \u2014 that person gets 3 points, if a word was written by two people \u2014 each of the two gets 1 point, if a word was written by all \u2014 nobody gets any points. In the end, how many points does each player have?",
    "input": "The input consists of multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 1000 ) \u2014 the number of words written by each person. The following three lines each contain n distinct strings \u2014 the words written by each person. Each string consists of 3 lowercase English characters.",
    "output": "For each test case, output three space- separated integers \u2014 the number of points each of the three guys earned. You should output the answers in the same order as the input; the i - th integer should be the number of points earned by the i - th guy.",
    "note": "In the first test case: The word was written by the first and third guys \u2014 they each get 1 point. The word was written by the second guy only \u2014 he gets 3 points.",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "1722C"
  },
  {
    "title": "Misha and Paintings",
    "url": "https://codeforces.com/problemset/problem/1720/E",
    "history": "Misha has a square n \u00d7 n matrix, where the number in row i and column j is equal to a_ i, j . Misha wants to modify the matrix to contain exactly k distinct integers. To achieve this goal, Misha can perform the following operation zero or more times: choose any square submatrix of the matrix ( you choose ( x_ 1, y_ 1) , ( x_ 2, y_ 2) , such that x_ 1 \u2264 x_ 2 , y_ 1 \u2264 y_ 2 , x_ 2 - x_ 1 = y_ 2 - y_ 1 , then submatrix is a set of cells with coordinates ( x, y) , such that x_ 1 \u2264 x \u2264 x_ 2 , y_ 1 \u2264 y \u2264 y_ 2 ) , choose an integer k , where 1 \u2264 k \u2264 n^ 2 , replace all integers in the submatrix with k . Please find the minimum number of operations that Misha needs to achieve his goal.",
    "input": "The first input line contains two integers n and k ( 1 \u2264 n \u2264 500, 1 \u2264 k \u2264 n^ 2 ) \u2014 the size of the matrix and the desired amount of distinct elements in the matrix. Then n lines follows. The i - th of them contains n integers a_ i, 1, a_ i, 2, . . . , a_ i, n ( 1 \u2264 a_ i, j\u2264 n^ 2 ) \u2014 the elements of the i - th row of the matrix.",
    "output": "Output one integer \u2014 the minimum number of operations required.",
    "note": "In the first test case the answer is 1 , because one can change the value in the bottom right corner of the matrix to 1 . The resulting matrix can be found below: 111112341 In the second test case the answer is 2 . First, one can change the entire matrix to contain only 1 s, and the change the value of any single cell to 2 . One of the possible resulting matrices is displayed below: 111111112",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1720E"
  },
  {
    "title": "Xor-Subsequence (hard version)",
    "url": "https://codeforces.com/problemset/problem/1720/D2",
    "history": "It is the hard version of the problem. The only difference is that in this version a_ i \u2264 10^ 9 . You are given an array of n integers a_ 0, a_ 1, a_ 2, . . . a_ n - 1 . Bryap wants to find the longest beautiful subsequence in the array. An array b = [ b_ 0, b_ 1, . . . , b_ m- 1] , where 0 \u2264 b_ 0 < b_ 1 < . . . < b_ m - 1 < n , is a subsequence of length m of the array a . Subsequence b = [ b_ 0, b_ 1, . . . , b_ m- 1] of length m is called beautiful, if the following condition holds: For any p ( 0 \u2264 p < m - 1 ) holds: a_ b_ p\u2295 b_ p+ 1 < a_ b_ p+ 1\u2295 b_ p . Here a \u2295 b denotes the bitwise XOR of a and b . For example, 2 \u2295 4 = 6 and 3 \u2295 1= 2 . Bryap is a simple person so he only wants to know the length of the longest such subsequence. Help Bryap and find the answer to his question.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n ( 2 \u2264 n \u2264 3 \u00b7 10^ 5 ) \u2014 the length of the array. The second line of each test case contains n integers a_ 0, a_ 1, . . . , a_ n- 1 ( 0 \u2264 a_ i \u2264 10^ 9 ) \u2014 the elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 3 \u00b7 10^ 5 .",
    "output": "For each test case print a single integer \u2014 the length of the longest beautiful subsequence.",
    "note": "In the first test case, we can pick the whole array as a beautiful subsequence because 1 \u2295 1 < 2 \u2295 0 . In the second test case, we can pick elements with indexes 1 , 2 and 4 ( in 0 indexation) . For this elements holds: 2 \u2295 2 < 4 \u2295 1 and 4 \u2295 4 < 1 \u2295 2 .",
    "topics": [
      "bitmasks",
      "data structures",
      "dp",
      "strings",
      "trees"
    ],
    "id": "1720D2"
  },
  {
    "title": "Interesting Sum",
    "url": "https://codeforces.com/problemset/problem/1720/B",
    "history": "You are given an array a that contains n integers. You can choose any proper subsegment a_ l, a_ l + 1, . . . , a_ r of this array, meaning you can choose any two integers 1 \u2264 l \u2264 r \u2264 n , where r - l + 1 < n . We define the beauty of a given subsegment as the value of the following expression: max( a_ 1, a_ 2, . . . , a_ l- 1, a_ r+ 1, a_ r+ 2, . . . , a_ n) - min( a_ 1, a_ 2, . . . , a_ l- 1, a_ r+ 1, a_ r+ 2, . . . , a_ n) + max( a_ l, . . . , a_ r) - min( a_ l, . . . , a_ r) . Please find the maximum beauty among all proper subsegments.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Then follow the descriptions of each test case. The first line of each test case contains a single integer n ( 4 \u2264 n \u2264 10^ 5) \u2014 the length of the array. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i\u2264 10^ 9 ) \u2014 the elements of the given array. It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each testcase print a single integer \u2014 the maximum beauty of a proper subsegment.",
    "note": "In the first test case, the optimal segment is l = 7 , r = 8 . The beauty of this segment equals to ( 6 - 1) + ( 5 - 1) = 9 . In the second test case, the optimal segment is l = 2 , r = 4 . The beauty of this segment equals ( 100 - 2) + ( 200 - 1) = 297 .",
    "topics": [
      "brute force",
      "data structures",
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1720B"
  },
  {
    "title": "Fighting Tournament",
    "url": "https://codeforces.com/problemset/problem/1719/C",
    "history": "Burenka is about to watch the most interesting sporting event of the year \u2014 a fighting tournament organized by her friend Tonya. n athletes participate in the tournament, numbered from 1 to n . Burenka determined the strength of the i - th athlete as an integer a_ i , where 1 \u2264 a_ i \u2264 n . All the strength values are different, that is, the array a is a permutation of length n . We know that in a fight, if a_ i > a_ j , then the i - th participant always wins the j - th. The tournament goes like this: initially, all n athletes line up in ascending order of their ids, and then there are infinitely many fighting rounds. In each round there is exactly one fight: the first two people in line come out and fight. The winner goes back to the front of the line, and the loser goes to the back. Burenka decided to ask Tonya q questions. In each question, Burenka asks how many victories the i - th participant gets in the first k rounds of the competition for some given numbers i and k . Tonya is not very good at analytics, so he asks you to help him answer all the questions.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains two integers n and q ( 2 \u2264 n \u2264 10^ 5 , 1 \u2264 q \u2264 10^ 5 ) \u2014 the number of tournament participants and the number of questions. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 the array a , which is a permutation. The next q lines of a test case contain questions. Each line contains two integers i and k ( 1 \u2264 i \u2264 n , 1 \u2264 k \u2264 10^ 9 ) \u2014 the number of the participant and the number of rounds. It is guaranteed that the sum of n and the sum of q over all test cases do not exceed 10^ 5 .",
    "output": "For each Burenka' s question, print a single line containing one integer \u2014 the answer to the question.",
    "note": "In the first test case, the first numbered athlete has the strength of 3 , in the first round he will defeat the athlete with the number 2 and the strength of 1 , and in the second round, the athlete with the number 3 and the strength of 2 . In the second test case, we list the strengths of the athletes fighting in the first 5 fights: 1 and 3 , 3 and 4 , 4 and 2 , 4 and 1 , 4 and 3 . The participant with the number 4 in the first 5 rounds won 0 times ( his strength is 2 ) . The participant with the number 3 has a strength of 4 and won 1 time in the first two fights by fighting 1 time.",
    "topics": [
      "binary search",
      "data structures",
      "implementation",
      "two pointers"
    ],
    "id": "1719C"
  },
  {
    "title": "Burenka, an Array and Queries",
    "url": "https://codeforces.com/problemset/problem/1718/F",
    "history": "Eugene got Burenka an array a of length n of integers from 1 to m for her birthday. Burenka knows that Eugene really likes coprime integers ( integers x and y such that they have only one common factor ( equal to 1 ) ) so she wants to to ask Eugene q questions about the present. Each time Burenka will choose a subsegment a_ l, a_ l + 1, . . . , a_ r of array a , and compute the product of these numbers p = a_ l \u00b7 a_ l + 1\u00b7. . . \u00b7 a_ r . Then she will ask Eugene to count the number of integers between 1 and C inclusive which are coprime with p . Help Eugene answer all the questions!",
    "input": "In the first line of input there are four integers n , m , C , q ( 1 \u2264 n, q \u2264 10^ 5 , 1 \u2264 m \u2264 2\u00b7 10^ 4 , 1 \u2264 C \u2264 10^ 5 ) \u2014 the length of the array a , the maximum possible value of a_ i , the value C , and the number of queries. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i\u2264 m ) \u2014 the array a . In the next q lines the queries are given. Each query consists of two integers l and r ( 1 \u2264 l \u2264 r \u2264 n ) .",
    "output": "Print q integers \u2014 the answers to Burenka' s queries.",
    "note": "Here' s an explanation for the example: in the first query, the product is equal to 1 , which is coprime with 1, 2, 3, 4, 5 . in the second query, the product is equal to 12 , which is coprime with 1 and 5 . in the third query, the product is equal to 10 , which is coprime with 1 and 3 .",
    "topics": [
      "data structures",
      "math",
      "number theory"
    ],
    "id": "1718F"
  },
  {
    "title": "Permutation for Burenka",
    "url": "https://codeforces.com/problemset/problem/1718/D",
    "history": "We call an array a pure if all elements in it are pairwise distinct. For example, an array [ 1, 7, 9] is pure, [ 1, 3, 3, 7] isn' t, because 3 occurs twice in it. A pure array b is similar to a pure array c if their lengths n are the same and for all pairs of indices l , r , such that 1 \u2264 l \u2264 r \u2264 n , it' s true that argmax( [ b_ l, b_ l + 1, . . . , b_ r] ) = argmax( [ c_ l, c_ l + 1, . . . , c_ r] ) , where argmax( x) is defined as the index of the largest element in x ( which is unique for pure arrays) . For example, argmax( [ 3, 4, 2] ) = 2 , argmax( [ 1337, 179, 57] ) = 1 . Recently, Tonya found out that Burenka really likes a permutation p of length n . Tonya decided to please her and give her an array a similar to p . He already fixed some elements of a , but exactly k elements are missing ( in these positions temporarily a_ i = 0 ) . It is guaranteed that k \u2265 2 . Also, he has a set S of k - 1 numbers. Tonya realized that he was missing one number to fill the empty places of a , so he decided to buy it. He has q options to buy. Tonya thinks that the number d suits him, if it is possible to replace all zeros in a with numbers from S and the number d , so that a becomes a pure array similar to p . For each option of d , output whether this number is suitable for him or not.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) is the number of test cases. The description of the test cases follows. The first line of each test case contains a couple of integers n and q ( 1 \u2264 n, q \u2264 3 \u00b7 10^ 5 ) . The second line of each input test case contains n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) \u2014 the permutation Burenka likes. The third line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 6 ) \u2014 elements of Tonya' s array, where 0 denotes a missing element. It is guaranteed that there are two indexes i, j ( 1 \u2264 i, j \u2264 n, i j) such that a_ i = 0, a_ j = 0 , which implies that k \u2265 2 . The fourth line of each test case contains k - 1 distinct integers s_ 1, s_ 2, . . . , s_ k- 1 ( 1 \u2264 s_ i \u2264 10^ 6 ) \u2014 elements of Tonya' s set S . Each of the next q lines contains a single integer d ( 1 \u2264 d \u2264 10^ 6 ) \u2014 the number that Tonya plans to buy. It is guaranteed that for each given d it' s possible to fill in the gaps in a with numbers from S and the number d to get a pure array. It is guaranteed that the sum of n and the sum of q in all tests does not exceed 3 \u00b7 10^ 5 .",
    "output": "Output q lines. For each value d , print \" YES\" if there is a way to fill the array a to make it similar to p , and \" NO\" otherwise.",
    "note": "In the first test case for d = 9 , you can get a = [ 5, 9, 7, 6] , it can be proved that a is similar to p , for d= 1 and d= 4 it can be proved that there is no answer. In the second test case for d = 1 , you can get a = [ 1, 5, 10, 9, 3] , for d = 8 , you can get a = [ 3, 5, 10, 9, 8] , it can be proved that for d = 11 there is no answer.",
    "topics": [
      "data structures",
      "graph matchings",
      "greedy",
      "math",
      "trees"
    ],
    "id": "1718D"
  },
  {
    "title": "Tonya and Burenka-179",
    "url": "https://codeforces.com/problemset/problem/1718/C",
    "history": "Tonya was given an array of a of length n written on a postcard for his birthday. For some reason, the postcard turned out to be a cyclic array, so the index of the element located strictly to the right of the n - th is 1 . Tonya wanted to study it better, so he bought a robot \" Burenka- 179\" . A program for Burenka is a pair of numbers ( s, k) , where 1 \u2264 s \u2264 n , 1 \u2264 k \u2264 n- 1 . Note that k cannot be equal to n . Initially, Tonya puts the robot in the position of the array s . After that, Burenka makes exactly n steps through the array. If at the beginning of a step Burenka stands in the position i , then the following happens: The number a_ i is added to the usefulness of the program. \" Burenka\" moves k positions to the right ( i : = i + k is executed, if i becomes greater than n , then i : = i - n ) . Help Tonya find the maximum possible usefulness of a program for \" Burenka\" if the initial usefulness of any program is 0 . Also, Tony' s friend Ilyusha asks him to change the array q times. Each time he wants to assign a_ p : = x for a given index p and a value x . You need to find the maximum possible usefulness of the program after each of these changes.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) is the number of test cases. The description of the test cases follows. The first line of each test case contains two integers n and q ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 , 0 \u2264 q \u2264 2 \u00b7 10^ 5 ) . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 elements of the array. The following q lines contain changes, each of them contains two integers p and x ( 1 \u2264 p \u2264 n , 1 \u2264 x \u2264 10^ 9 ) , meaning you should assign a_ p : = x . It is guaranteed that the sum of n and the sum of q over all test cases do not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output q+ 1 numbers \u2014 the maximum usefulness of a program initially and after each of the changes.",
    "note": "In the first test case, initially and after each request, the answer is achieved at s = 1 , k = 1 or s = 2 , k = 1 . In the second test case, initially, the answer is achieved when s = 1 , k = 2 or s = 3 , k = 2 . After the first request, the answer is achieved at s = 2 , k = 2 or s = 4 , k = 2 .",
    "topics": [
      "data structures",
      "greedy",
      "math",
      "number theory"
    ],
    "id": "1718C"
  },
  {
    "title": "Burenka and Traditions (hard version)",
    "url": "https://codeforces.com/problemset/problem/1718/A2",
    "history": "This is the hard version of this problem. The difference between easy and hard versions is only the constraints on a_ i and on n . You can make hacks only if both versions of the problem are solved. Burenka is the crown princess of Buryatia, and soon she will become the n - th queen of the country. There is an ancient tradition in Buryatia \u2014 before the coronation, the ruler must show their strength to the inhabitants. To determine the strength of the n - th ruler, the inhabitants of the country give them an array of a of exactly n numbers, after which the ruler must turn all the elements of the array into zeros in the shortest time. The ruler can do the following two- step operation any number of times: select two indices l and r , so that 1 \u2264 l \u2264 r \u2264 n and a non- negative integer x , then for all l \u2264 i \u2264 r assign a_ i : = a_ i \u2295 x , where \u2295 denotes the bitwise XOR operation. It takes \u2308r- l+ 1/ 2\u2309 seconds to do this operation, where \u2308 y \u2309 denotes y rounded up to the nearest integer. Help Burenka calculate how much time she will need.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 500) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5) - the size of the arrayThe second line of each test case contains n integers a_ 1, a_ 2, \u22ef , a_ n ( 0 \u2264 a_ i < 2^ 30) \u2014 elements of the array. It is guaranteed that the sum of n in all tests does not exceed 10^ 5 .",
    "output": "For each test case, output a single number \u2014 the minimum time that Burenka will need.",
    "note": "In the first test case, Burenka can choose segment l = 1 , r = 4 , and x= 5 . so it will fill the array with zeros in 2 seconds. In the second test case, Burenka first selects segment l = 1 , r = 2 , and x = 1 , after which a = [ 0, 2, 2] , and then the segment l = 2 , r = 3 , and x= 2 , which fills the array with zeros. In total, Burenka will spend 2 seconds.",
    "topics": [
      "data structures",
      "dp",
      "greedy"
    ],
    "id": "1718A2"
  },
  {
    "title": "Swap and Maximum Block",
    "url": "https://codeforces.com/problemset/problem/1716/E",
    "history": "You are given an array of length 2^ n . The elements of the array are numbered from 1 to 2^ n . You have to process q queries to this array. In the i - th query, you will be given an integer k ( 0 \u2264 k \u2264 n- 1 ) . To process the query, you should do the following: for every i \u2208 [ 1, 2^ n- 2^ k] in ascending order, do the following: if the i - th element was already swapped with some other element during this query, skip it; otherwise, swap a_ i and a_ i+ 2^ k ; after that, print the maximum sum over all contiguous subsegments of the array ( including the empty subsegment) . For example, if the array a is [ - 3, 5, - 3, 2, 8, - 20, 6, - 1] , and k = 1 , the query is processed as follows: the 1 - st element wasn' t swapped yet, so we swap it with the 3 - rd element; the 2 - nd element wasn' t swapped yet, so we swap it with the 4 - th element; the 3 - rd element was swapped already; the 4 - th element was swapped already; the 5 - th element wasn' t swapped yet, so we swap it with the 7 - th element; the 6 - th element wasn' t swapped yet, so we swap it with the 8 - th element. So, the array becomes [ - 3, 2, - 3, 5, 6, - 1, 8, - 20] . The subsegment with the maximum sum is [ 5, 6, - 1, 8] , and the answer to the query is 18 . Note that the queries actually change the array, i. e. after a query is performed, the array does not return to its original state, and the next query will be applied to the modified array.",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 18 ) . The second line contains 2^ n integers a_ 1, a_ 2, . . . , a_ 2^ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) . The third line contains one integer q ( 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) . Then q lines follow, the i - th of them contains one integer k ( 0 \u2264 k \u2264 n- 1 ) describing the i - th query.",
    "output": "For each query, print one integer \u2014 the maximum sum over all contiguous subsegments of the array ( including the empty subsegment) after processing the query.",
    "note": "Transformation of the array in the example: [ - 3, 5, - 3, 2, 8, - 20, 6, - 1] \u2192 [ - 3, 2, - 3, 5, 6, - 1, 8, - 20] \u2192 [ 2, - 3, 5, - 3, - 1, 6, - 20, 8] \u2192 [ 5, - 3, 2, - 3, - 20, 8, - 1, 6] .",
    "topics": [
      "bitmasks",
      "data structures",
      "dfs and similar",
      "divide and conquer",
      "dp"
    ],
    "id": "1716E"
  },
  {
    "title": "Robot in a Hallway",
    "url": "https://codeforces.com/problemset/problem/1716/C",
    "history": "There is a grid, consisting of 2 rows and m columns. The rows are numbered from 1 to 2 from top to bottom. The columns are numbered from 1 to m from left to right. The robot starts in a cell ( 1, 1) . In one second, it can perform either of two actions: move into a cell adjacent by a side: up, right, down or left; remain in the same cell. The robot is not allowed to move outside the grid. Initially, all cells, except for the cell ( 1, 1) , are locked. Each cell ( i, j) contains a value a_ i, j \u2014 the moment that this cell gets unlocked. The robot can only move into a cell ( i, j) if at least a_ i, j seconds have passed before the move. The robot should visit all cells without entering any cell twice or more ( cell ( 1, 1) is considered entered at the start) . It can finish in any cell. What is the fastest the robot can achieve that?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of testcases. The first line of each testcase contains a single integer m ( 2 \u2264 m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of columns of the grid. The i - th of the next 2 lines contains m integers a_ i, 1, a_ i, 2, . . . , a_ i, m ( 0 \u2264 a_ i, j\u2264 10^ 9 ) \u2014 the moment of time each cell gets unlocked. a_ 1, 1 = 0 . If a_ i, j = 0 , then cell ( i, j) is unlocked from the start. The sum of m over all testcases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each testcase, print a single integer \u2014 the minimum amount of seconds that the robot can take to visit all cells without entering any cell twice or more.",
    "note": "",
    "topics": [
      "data structures",
      "dp",
      "greedy",
      "implementation",
      "ternary search"
    ],
    "id": "1716C"
  },
  {
    "title": "Long Way Home",
    "url": "https://codeforces.com/problemset/problem/1715/E",
    "history": "Stanley lives in a country that consists of n cities ( he lives in city 1 ) . There are bidirectional roads between some of the cities, and you know how long it takes to ride through each of them. Additionally, there is a flight between each pair of cities, the flight between cities u and v takes ( u - v) ^ 2 time. Stanley is quite afraid of flying because of watching \" Sully: Miracle on the Hudson\" recently, so he can take at most k flights. Stanley wants to know the minimum time of a journey to each of the n cities from the city 1 .",
    "input": "In the first line of input there are three integers n , m , and k ( 2 \u2264 n \u2264 10^ 5 , 1 \u2264 m \u2264 10^ 5 , 1 \u2264 k \u2264 20 ) \u2014 the number of cities, the number of roads, and the maximal number of flights Stanley can take. The following m lines describe the roads. Each contains three integers u , v , w ( 1 \u2264 u, v \u2264 n , u = \u0338 v , 1 \u2264 w \u2264 10^ 9 ) \u2014 the cities the road connects and the time it takes to ride through. Note that some pairs of cities may be connected by more than one road.",
    "output": "Print n integers, i - th of which is equal to the minimum time of traveling to city i .",
    "note": "In the first sample, it takes no time to get to city 1; to get to city 2 it is possible to use a flight between 1 and 2, which will take 1 unit of time; to city 3 you can get via a road from city 1, which will take 1 unit of time. In the second sample, it also takes no time to get to city 1. To get to city 2 Stanley should use a flight between 1 and 2, which will take 1 unit of time. To get to city 3 Stanley can ride between cities 1 and 2, which will take 3 units of time, and then use a flight between 2 and 3. To get to city 4 Stanley should use a flight between 1 and 2, then take a ride from 2 to 4, which will take 5 units of time.",
    "topics": [
      "data structures",
      "divide and conquer",
      "dp",
      "geometry",
      "graphs",
      "greedy",
      "shortest paths"
    ],
    "id": "1715E"
  },
  {
    "title": "Monoblock",
    "url": "https://codeforces.com/problemset/problem/1715/C",
    "history": "Stanley has decided to buy a new desktop PC made by the company \" Monoblock\" , and to solve captcha on their website, he needs to solve the following task. The awesomeness of an array is the minimum number of blocks of consecutive identical numbers in which the array could be split. For example, the awesomeness of an array [ 1, 1, 1] is 1 ; [ 5, 7] is 2 , as it could be split into blocks [ 5] and [ 7] ; [ 1, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9] is 3, as it could be split into blocks [ 1] , [ 7, 7, 7, 7, 7, 7, 7] , and [ 9, 9, 9, 9, 9, 9, 9, 9, 9] . You are given an array a of length n . There are m queries of two integers i , x . A query i , x means that from now on the i - th element of the array a is equal to x . After each query print the sum of awesomeness values among all subsegments of array a . In other words, after each query you need to calculate \u2211_ l = 1^ n \u2211_ r = l^ n g( l, r) , where g( l, r) is the awesomeness of the array b = [ a_ l, a_ l + 1, . . . , a_ r] .",
    "input": "In the first line you are given with two integers n and m ( 1 \u2264 n, m \u2264 10^ 5 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the array a . In the next m lines you are given the descriptions of queries. Each line contains two integers i and x ( 1 \u2264 i \u2264 n , 1 \u2264 x \u2264 10^ 9 ) .",
    "output": "Print the answer to each query on a new line.",
    "note": "After the first query a is equal to [ 1, 2, 2, 4, 5] , and the answer is 29 because we can split each of the subsegments the following way: [ 1; 1] : [ 1] , 1 block; [ 1; 2] : [ 1] + [ 2] , 2 blocks; [ 1; 3] : [ 1] + [ 2, 2] , 2 blocks; [ 1; 4] : [ 1] + [ 2, 2] + [ 4] , 3 blocks; [ 1; 5] : [ 1] + [ 2, 2] + [ 4] + [ 5] , 4 blocks; [ 2; 2] : [ 2] , 1 block; [ 2; 3] : [ 2, 2] , 1 block; [ 2; 4] : [ 2, 2] + [ 4] , 2 blocks; [ 2; 5] : [ 2, 2] + [ 4] + [ 5] , 3 blocks; [ 3; 3] : [ 2] , 1 block; [ 3; 4] : [ 2] + [ 4] , 2 blocks; [ 3; 5] : [ 2] + [ 4] + [ 5] , 3 blocks; [ 4; 4] : [ 4] , 1 block; [ 4; 5] : [ 4] + [ 5] , 2 blocks; [ 5; 5] : [ 5] , 1 block; which is 1 + 2 + 2 + 3 + 4 + 1 + 1 + 2 + 3 + 1 + 2 + 3 + 1 + 2 + 1 = 29 in total.",
    "topics": [
      "combinatorics",
      "data structures",
      "implementation",
      "math"
    ],
    "id": "1715C"
  },
  {
    "title": "Path Prefixes",
    "url": "https://codeforces.com/problemset/problem/1714/G",
    "history": "You are given a rooted tree. It contains n vertices, which are numbered from 1 to n . The root is the vertex 1 . Each edge has two positive integer values. Thus, two positive integers a_ j and b_ j are given for each edge. Output n- 1 numbers r_ 2, r_ 3, . . . , r_ n , where r_ i is defined as follows. Consider the path from the root ( vertex 1 ) to i ( 2 \u2264 i \u2264 n ) . Let the sum of the costs of a_ j along this path be A_ i . Then r_ i is equal to the length of the maximum prefix of this path such that the sum of b_ j along this prefix does not exceed A_ i . Example for n= 9 . The blue color shows the costs of a_ j , and the red color shows the costs of b_ j . Consider an example. In this case: r_ 2= 0 , since the path to 2 has an amount of a_ j equal to 5 , only the prefix of this path of length 0 has a smaller or equal amount of b_ j ; r_ 3= 3 , since the path to 3 has an amount of a_ j equal to 5+ 9+ 5= 19 , the prefix of length 3 of this path has a sum of b_ j equal to 6+ 10+ 1= 17 ( the number is 17 \u2264 19 ) ; r_ 4= 1 , since the path to 4 has an amount of a_ j equal to 5+ 9= 14 , the prefix of length 1 of this path has an amount of b_ j equal to 6 ( this is the longest suitable prefix, since the prefix of length 2 already has an amount of b_ j equal to 6+ 10= 16 , which is more than 14 ) ; r_ 5= 2 , since the path to 5 has an amount of a_ j equal to 5+ 9+ 2= 16 , the prefix of length 2 of this path has a sum of b_ j equal to 6+ 10= 16 ( this is the longest suitable prefix, since the prefix of length 3 already has an amount of b_ j equal to 6+ 10+ 1= 17 , what is more than 16 ) ; r_ 6= 1 , since the path up to 6 has an amount of a_ j equal to 2 , the prefix of length 1 of this path has an amount of b_ j equal to 1 ; r_ 7= 1 , since the path to 7 has an amount of a_ j equal to 5+ 3= 8 , the prefix of length 1 of this path has an amount of b_ j equal to 6 ( this is the longest suitable prefix, since the prefix of length 2 already has an amount of b_ j equal to 6+ 3= 9 , which is more than 8 ) ; r_ 8= 2 , since the path up to 8 has an amount of a_ j equal to 2+ 4= 6 , the prefix of length 2 of this path has an amount of b_ j equal to 1+ 3= 4 ; r_ 9= 3 , since the path to 9 has an amount of a_ j equal to 2+ 4+ 1= 7 , the prefix of length 3 of this path has a sum of b_ j equal to 1+ 3+ 3= 7 .",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the test. The descriptions of test cases follow. Each description begins with a line that contains an integer n ( 2 \u2264 n \u2264 2\u00b710^ 5 ) \u2014 the number of vertices in the tree. This is followed by n- 1 string, each of which contains three numbers p_ j, a_ j, b_ j ( 1 \u2264 p_ j \u2264 n ; 1 \u2264 a_ j, b_ j \u2264 10^ 9 ) \u2014 the ancestor of the vertex j , the first and second values an edge that leads from p_ j to j . The value of j runs through all values from 2 to n inclusive. It is guaranteed that each set of input data has a correct hanged tree with a root at the vertex 1 . It is guaranteed that the sum of n over all input test cases does not exceed 2\u00b710^ 5 .",
    "output": "For each test case, output n- 1 integer in one line: r_ 2, r_ 3, . . . , r_ n .",
    "note": "The first example is clarified in the statement. In the second example: r_ 2= 0 , since the path to 2 has an amount of a_ j equal to 1 , only the prefix of this path of length 0 has a smaller or equal amount of b_ j ; r_ 3= 0 , since the path to 3 has an amount of a_ j equal to 1+ 1= 2 , the prefix of length 1 of this path has an amount of b_ j equal to 100 ( 100 > 2 ) ; r_ 4= 3 , since the path to 4 has an amount of a_ j equal to 1+ 1+ 101= 103 , the prefix of length 3 of this path has an amount of b_ j equal to 102 , .",
    "topics": [
      "binary search",
      "data structures",
      "dfs and similar",
      "trees"
    ],
    "id": "1714G"
  },
  {
    "title": "Color with Occurrences",
    "url": "https://codeforces.com/problemset/problem/1714/D",
    "history": "You are given some text t and a set of n strings s_ 1, s_ 2, . . . , s_ n . In one step, you can choose any occurrence of any string s_ i in the text t and color the corresponding characters of the text in red. For example, if t= and s_ 1= , s_ 2= , you can get t= , t= or t= in one step. You want to color all the letters of the text t in red. When you color a letter in red again, it stays red. In the example above, three steps are enough: Let' s color t[ 2 . . . 4] = s_ 2= in red, we get t= ; Let' s color t[ 1 . . . 2] = s_ 1= in red, we get t= ; Let' s color t[ 4 . . . 6] = s_ 2= in red, we get t= . Each string s_ i can be applied any number of times ( or not at all) . Occurrences for coloring can intersect arbitrarily. Determine the minimum number of steps needed to color all letters t in red and how to do it. If it is impossible to color all letters of the text t in red, output - 1.",
    "input": "The first line of the input contains an integer q ( 1 \u2264 q \u2264 100 ) \u2014the number of test cases in the test. The descriptions of the test cases follow. The first line of each test case contains the text t ( 1 \u2264 | t| \u2264 100 ) , consisting only of lowercase Latin letters, where | t| is the length of the text t . The second line of each test case contains a single integer n ( 1 \u2264 n \u2264 10 ) \u2014 the number of strings in the set. This is followed by n lines, each containing a string s_ i ( 1 \u2264 | s_ i| \u2264 10 ) consisting only of lowercase Latin letters, where | s_ i| \u2014 the length of string s_ i .",
    "output": "For each test case, print the answer on a separate line. If it is impossible to color all the letters of the text in red, print a single line containing the number - 1. Otherwise, on the first line, print the number m \u2014 the minimum number of steps it will take to turn all the letters t red. Then in the next m lines print pairs of indices: w_ j and p_ j ( 1 \u2264 j \u2264 m ) , which denote that the string with index w_ j was used as a substring to cover the occurrences starting in the text t from position p_ j . The pairs can be output in any order. If there are several answers, output any of them.",
    "note": "The first test case is explained in the problem statement. In the second test case, it is impossible to color all the letters of the text in red.",
    "topics": [
      "brute force",
      "data structures",
      "dp",
      "greedy",
      "strings"
    ],
    "id": "1714D"
  },
  {
    "title": "Remove Prefix",
    "url": "https://codeforces.com/problemset/problem/1714/B",
    "history": "Polycarp was presented with some sequence of integers a of length n ( 1 \u2264 a_ i \u2264 n ) . A sequence can make Polycarp happy only if it consists of different numbers ( i. e. distinct numbers) . In order to make his sequence like this, Polycarp is going to make some ( possibly zero) number of moves. In one move, he can: remove the first ( leftmost) element of the sequence. For example, in one move, the sequence [ 3, 1, 4, 3] will produce the sequence [ 1, 4, 3] , which consists of different numbers. Determine the minimum number of moves he needs to make so that in the remaining sequence all elements are different. In other words, find the length of the smallest prefix of the given sequence a , after removing which all values in the sequence will be unique.",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Each test case consists of two lines. The first line contains an integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the given sequence a . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 elements of the given sequence a . It is guaranteed that the sum of n values over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case print your answer on a separate line \u2014 the minimum number of elements that must be removed from the beginning of the sequence so that all remaining elements are different.",
    "note": "The following are the sequences that will remain after the removal of prefixes: [ 1, 4, 3] ; [ 1] ; [ 1] ; [ 6, 5, 4, 3, 2, 1] ; [ 2, 1] . It is easy to see that all the remaining sequences contain only distinct elements. In each test case, the shortest matching prefix was removed.",
    "topics": [
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "1714B"
  },
  {
    "title": "Cross Swapping",
    "url": "https://codeforces.com/problemset/problem/1713/E",
    "history": "You are given a square matrix A of size n \u00d7 n whose elements are integers. We will denote the element on the intersection of the i - th row and the j - th column as A_ i, j . You can perform operations on the matrix. In each operation, you can choose an integer k , then for each index i ( 1 \u2264 i \u2264 n ) , swap A_ i, k with A_ k, i . Note that cell A_ k, k remains unchanged. For example, for n = 4 and k = 3 , this matrix will be transformed like this: The operation k = 3 swaps the blue row with the green column. You can perform this operation any number of times. Find the lexicographically smallest matrix ^ \u2020 you can obtain after performing arbitrary number of operations. ^ \u2020 For two matrices A and B of size n \u00d7 n , let a_ ( i- 1) \u00b7 n + j = A_ i, j and b_ ( i- 1) \u00b7 n + j = B_ i, j . Then, the matrix A is lexicographically smaller than the matrix B when there exists an index i ( 1 \u2264 i \u2264 n^ 2 ) such that a_ i < b_ i and for all indices j such that 1 \u2264 j < i , a_ j = b_ j .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 1000 ) \u2014 the size of the matrix. The i - th line of the next n lines contains n integers A_ i, 1, A_ i, 2, . . . , A_ i, n ( 1 \u2264 A_ i, j\u2264 10^ 9 ) \u2014 description of the matrix A . It is guaranteed that the sum of n^ 2 over all test cases does not exceed 10^ 6 .",
    "output": "For each test case, print n lines with n integers each \u2014 the lexicographically smallest matrix.",
    "note": "Note that in every picture below the matrix is transformed in such a way that the blue rows are swapped with the green columns. In the first test case, we can perform 1 operation for k = 3 . The matrix will be transformed as below: In the second test case, we can perform 2 operations for k = 1 and k = 3 :",
    "topics": [
      "2-sat",
      "data structures",
      "dsu",
      "greedy",
      "matrices"
    ],
    "id": "1713E"
  },
  {
    "title": "Triameter",
    "url": "https://codeforces.com/problemset/problem/1712/F",
    "history": "\u2014 What is my mission? \u2014 To count graph diameters. You and Your SubmissionA tree is a connected undirected graph without cycles. A weighted tree has a weight assigned to each edge. The degree of a vertex is the number of edges connected to this vertex. You are given a weighted tree with n vertices, each edge has a weight of 1 . Let L be the set of vertices with degree equal to 1 . You have to answer q independent queries. In the i - th query: You are given a positive integer x_ i . For all u, v \u2208 L such that u < v , add edge ( u, v) with weight x_ i to the graph ( initially the given tree) . Find the diameter of the resulting graph. The diameter of a graph is equal to max_ 1 \u2264 u < v \u2264 nd( u, v) , where d( u, v) is the length of the shortest path between vertex u and vertex v .",
    "input": "The first line contains a single integer n ( 3 \u2264 n \u2264 10^ 6 ) . The second line contains n - 1 integers p_ 2, p_ 3, . . . , p_ n ( 1 \u2264 p_ i < i ) indicating that there is an edge between vertices i and p_ i . It is guaranteed that the given edges form a tree. The third line contains a single integer q ( 1 \u2264 q \u2264 10 ) . The fourth line contains q integers x_ 1, x_ 2, . . . , x_ q ( 1 \u2264 x_ i \u2264 n ) . All x_ i are distinct.",
    "output": "Print q integers in a single line \u2014 the answers to the queries.",
    "note": "The graph in the first test after adding the edges:",
    "topics": [
      "binary search",
      "data structures",
      "dfs and similar",
      "trees"
    ],
    "id": "1712F"
  },
  {
    "title": "LCM Sum (hard version)",
    "url": "https://codeforces.com/problemset/problem/1712/E2",
    "history": "We are sum for we are manySome NumberThis version of the problem differs from the previous one only in the constraint on t . You can make hacks only if both versions of the problem are solved. You are given two positive integers l and r . Count the number of distinct triplets of integers ( i, j, k) such that l \u2264 i < j < k \u2264 r and lcm( i, j, k) \u2265 i + j + k . Here lcm( i, j, k) denotes the least common multiple ( LCM) of integers i , j , and k .",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 5 ) . Description of the test cases follows. The only line for each test case contains two integers l and r ( 1 \u2264 l \u2264 r \u2264 2 \u00b7 10^ 5 , l + 2 \u2264 r ) .",
    "output": "For each test case print one integer \u2014 the number of suitable triplets.",
    "note": "In the first test case, there are 3 suitable triplets: ( 1, 2, 3) , ( 1, 3, 4) , ( 2, 3, 4) . In the second test case, there is 1 suitable triplet: ( 3, 4, 5) .",
    "topics": [
      "brute force",
      "data structures",
      "math",
      "number theory",
      "two pointers"
    ],
    "id": "1712E2"
  },
  {
    "title": "Empty Graph",
    "url": "https://codeforces.com/problemset/problem/1712/D",
    "history": "\u2014 Do you have a wish? \u2014 I want people to stop gifting each other arrays. O_ o and Another Young BoyAn array of n positive integers a_ 1, a_ 2, . . . , a_ n fell down on you from the skies, along with a positive integer k \u2264 n . You can apply the following operation at most k times: Choose an index 1 \u2264 i \u2264 n and an integer 1 \u2264 x \u2264 10^ 9 . Then do a_ i : = x ( assign x to a_ i ) . Then build a complete undirected weighted graph with n vertices numbered with integers from 1 to n , where edge ( l, r) ( 1 \u2264 l < r \u2264 n ) has weight min( a_ l, a_ l+ 1, . . . , a_ r) . You have to find the maximum possible diameter of the resulting graph after performing at most k operations. The diameter of a graph is equal to max_ 1 \u2264 u < v \u2264 nd( u, v) , where d( u, v) is the length of the shortest path between vertex u and vertex v .",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . Description of the test cases follows. The first line of each test case contains two integers n and k ( 2 \u2264 n \u2264 10^ 5 , 1 \u2264 k \u2264 n ) . The second line of each test case contains n positive integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case print one integer \u2014 the maximum possible diameter of the graph after performing at most k operations.",
    "note": "In the first test case, one of the optimal arrays is [ 2, 4, 5] . The graph built on this array: d( 1, 2) = d( 1, 3) = 2 and d( 2, 3) = 4 , so the diameter is equal to max( 2, 2, 4) = 4 .",
    "topics": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "greedy",
      "shortest paths"
    ],
    "id": "1712D"
  },
  {
    "title": "Rain",
    "url": "https://codeforces.com/problemset/problem/1710/B",
    "history": "You are the owner of a harvesting field which can be modeled as an infinite line, whose positions are identified by integers. It will rain for the next n days. On the i - th day, the rain will be centered at position x_ i and it will have intensity p_ i . Due to these rains, some rainfall will accumulate; let a_ j be the amount of rainfall accumulated at integer position j . Initially a_ j is 0 , and it will increase by max( 0, p_ i- | x_ i- j| ) after the i - th day' s rain. A flood will hit your field if, at any moment, there is a position j with accumulated rainfall a_ j> m . You can use a magical spell to erase exactly one day' s rain, i. e. , setting p_ i= 0 . For each i from 1 to n , check whether in case of erasing the i - th day' s rain there is no flood.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . The description of the test cases follows. The first line of each test case contains two integers n and m ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 m \u2264 10^ 9 ) \u2014 the number of rainy days and the maximal accumulated rainfall with no flood occurring. Then n lines follow. The i - th of these lines contains two integers x_ i and p_ i ( 1 \u2264 x_ i, p_ i \u2264 10^ 9 ) \u2014 the position and intensity of the i - th day' s rain. The sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output a binary string s length of n . The i - th character of s is 1 if after erasing the i - th day' s rain there is no flood, while it is 0, if after erasing the i - th day' s rain the flood still happens.",
    "note": "In the first test case, if we do not use the spell, the accumulated rainfall distribution will be like this: If we erase the third day' s rain, the flood is avoided and the accumulated rainfall distribution looks like this: In the second test case, since initially the flood will not happen, we can erase any day' s rain. In the third test case, there is no way to avoid the flood.",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "geometry",
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1710B"
  },
  {
    "title": "XOR Tree",
    "url": "https://codeforces.com/problemset/problem/1709/E",
    "history": "You are given a tree consisting of n vertices. A number is written on each vertex; the number on vertex i is equal to a_ i . Recall that a simple path is a path that visits each vertex at most once. Let the weight of the path be the bitwise XOR of the values written on vertices it consists of. Let' s say that a tree is good if no simple path has weight 0 . You can apply the following operation any number of times ( possibly, zero) : select a vertex of the tree and replace the value written on it with an arbitrary positive integer. What is the minimum number of times you have to apply this operation in order to make the tree good?",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of vertices. The second line contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 1 \u2264 a_ i < 2^ 30 ) \u2014 the numbers written on vertices. Then n - 1 lines follow, each containing two integers x and y ( 1 \u2264 x, y \u2264 n; x y ) denoting an edge connecting vertex x with vertex y . It is guaranteed that these edges form a tree.",
    "output": "Print a single integer \u2014 the minimum number of times you have to apply the operation in order to make the tree good.",
    "note": "In the first example, it is enough to replace the value on the vertex 1 with 13 , and the value on the vertex 4 with 42 .",
    "topics": [
      "bitmasks",
      "data structures",
      "dfs and similar",
      "dsu",
      "greedy",
      "trees"
    ],
    "id": "1709E"
  },
  {
    "title": "Rorororobot",
    "url": "https://codeforces.com/problemset/problem/1709/D",
    "history": "There is a grid, consisting of n rows and m columns. The rows are numbered from 1 to n from bottom to top. The columns are numbered from 1 to m from left to right. The i - th column has the bottom a_ i cells blocked ( the cells in rows 1, 2, . . . , a_ i ) , the remaining n - a_ i cells are unblocked. A robot is travelling across this grid. You can send it commands \u2014 move up, right, down or left. If a robot attempts to move into a blocked cell or outside the grid, it explodes. However, the robot is broken \u2014 it executes each received command k times. So if you tell it to move up, for example, it will move up k times ( k cells) . You can' t send it commands while the robot executes the current one. You are asked q queries about the robot. Each query has a start cell, a finish cell and a value k . Can you send the robot an arbitrary number of commands ( possibly, zero) so that it reaches the finish cell from the start cell, given that it executes each command k times? The robot must stop in the finish cell. If it visits the finish cell while still executing commands, it doesn' t count.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 10^ 9 ; 1 \u2264 m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of rows and columns of the grid. The second line contains m integers a_ 1, a_ 2, . . . , a_ m ( 0 \u2264 a_ i \u2264 n ) \u2014 the number of blocked cells on the bottom of the i - th column. The third line contains a single integer q ( 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of queries. Each of the next q lines contain five integers x_ s, y_ s, x_ f, y_ f and k ( a[ y_ s] < x_ s \u2264 n ; 1 \u2264 y_ s \u2264 m ; a[ y_ f] < x_ f \u2264 n ; 1 \u2264 y_ f \u2264 m ; 1 \u2264 k \u2264 10^ 9 ) \u2014 the row and the column of the start cell, the row and the column of the finish cell and the number of times each your command is executed. The start and the finish cell of each query are unblocked.",
    "output": "For each query, print \" YES\" if you can send the robot an arbitrary number of commands ( possibly, zero) so that it reaches the finish cell from the start cell, given that it executes each command k times. Otherwise, print \" NO\" .",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "math"
    ],
    "id": "1709D"
  },
  {
    "title": "Also Try Minecraft",
    "url": "https://codeforces.com/problemset/problem/1709/B",
    "history": "You are beta testing the new secret Terraria update. This update will add quests to the game! Simply, the world map can be represented as an array of length n , where the i - th column of the world has height a_ i . There are m quests you have to test. The j - th of them is represented by two integers s_ j and t_ j . In this quest, you have to go from the column s_ j to the column t_ j . At the start of the quest, you are appearing at the column s_ j . In one move, you can go from the column x to the column x- 1 or to the column x+ 1 . In this version, you have Spectre Boots, which allow you to fly. Since it is a beta version, they are bugged, so they only allow you to fly when you are going up and have infinite fly duration. When you are moving from the column with the height p to the column with the height q , then you get some amount of fall damage. If the height p is greater than the height q , you get p - q fall damage, otherwise you fly up and get 0 damage. For each of the given quests, determine the minimum amount of fall damage you can get during this quest.",
    "input": "The first line of the input contains two integers n and m ( 2 \u2264 n \u2264 10^ 5; 1 \u2264 m \u2264 10^ 5 ) \u2014 the number of columns in the world and the number of quests you have to test, respectively. The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is the height of the i - th column of the world. The next m lines describe quests. The j - th of them contains two integers s_ j and t_ j ( 1 \u2264 s_ j, t_ j \u2264 n; s_ j t_ j ) , which means you have to move from the column s_ j to the column t_ j during the j - th quest. Note that s_ j can be greater than t_ j .",
    "output": "Print m integers. The j - th of them should be the minimum amount of fall damage you can get during the j - th quest completion.",
    "note": "",
    "topics": [
      "data structures",
      "dp",
      "implementation"
    ],
    "id": "1709B"
  },
  {
    "title": "Replace",
    "url": "https://codeforces.com/problemset/problem/1707/E",
    "history": "You are given an integer array a_ 1, . . . , a_ n , where 1\u2264 a_ i \u2264 n for all i . There' s a \" replace\" function f which takes a pair of integers ( l, r) , where l \u2264 r , as input and outputs the pair f( ( l, r) ) = ( min{ a_ l, a_ l+ 1, . . . , a_ r} , max{ a_ l, a_ l+ 1, . . . , a_ r} ) . Consider repeated calls of this function. That is, from a starting pair ( l, r) we get f( ( l, r) ) , then f( f( ( l, r) ) ) , then f( f( f( ( l, r) ) ) ) , and so on. Now you need to answer q queries. For the i - th query you have two integers l_ i and r_ i ( 1\u2264 l_ i\u2264 r_ i\u2264 n ) . You must answer the minimum number of times you must apply the \" replace\" function to the pair ( l_ i, r_ i) to get ( 1, n) , or report that it is impossible.",
    "input": "The first line contains two positive integers n , q ( 1\u2264 n, q\u2264 10^ 5 ) \u2014 the length of the sequence a and the number of the queries. The second line contains n positive integers a_ 1, a_ 2, . . . , a_ n ( 1\u2264 a_ i\u2264 n ) \u2014 the sequence a . Each line of the following q lines contains two integers l_ i , r_ i ( 1\u2264 l_ i\u2264 r_ i\u2264 n ) \u2014 the queries.",
    "output": "For each query, output the required number of times, or - 1 if it is impossible.",
    "note": "In the first example, n= 5 and a= [ 2, 5, 4, 1, 3] . For the first query: ( 4, 4) \u2192( 1, 1) \u2192( 2, 2) \u2192( 5, 5) \u2192( 3, 3) \u2192( 4, 4) \u2192. . . , so it' s impossible to get ( 1, 5) . For the second query, you already have ( 1, 5) . For the third query: ( 1, 4) \u2192( 1, 5) . For the fourth query: ( 3, 5) \u2192( 1, 4) \u2192( 1, 5) . For the fifth query: ( 4, 5) \u2192( 1, 3) \u2192( 2, 5) \u2192( 1, 5) . For the sixth query: ( 2, 3) \u2192( 4, 5) \u2192( 1, 3) \u2192( 2, 5) \u2192( 1, 5) .",
    "topics": [
      "binary search",
      "data structures"
    ],
    "id": "1707E"
  },
  {
    "title": "Difference Array",
    "url": "https://codeforces.com/problemset/problem/1707/B",
    "history": "You are given an array a consisting of n non- negative integers. It is guaranteed that a is sorted from small to large. For each operation, we generate a new array b_ i= a_ i+ 1- a_ i for 1 \u2264 i < n . Then we sort b from small to large, replace a with b , and decrease n by 1 . After performing n- 1 operations, n becomes 1 . You need to output the only integer in array a ( that is to say, you need to output a_ 1 ) .",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1\u2264 t\u2264 10^ 4 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains one integer n ( 2\u2264 n\u2264 10^ 5 ) \u2014 the length of the array a . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0\u2264 a_ 1\u2264. . . \u2264 a_ n \u2264 5\u00b7 10^ 5 ) \u2014 the array a . It is guaranteed that the sum of n over all test cases does not exceed 2. 5\u00b7 10^ 5 , and the sum of a_ n over all test cases does not exceed 5\u00b7 10^ 5 .",
    "output": "For each test case, output the answer on a new line.",
    "note": "To simplify the notes, let sort( a) denote the array you get by sorting a from small to large. In the first test case, a= [ 1, 10, 100] at first. After the first operation, a= sort( [ 10- 1, 100- 10] ) = [ 9, 90] . After the second operation, a= sort( [ 90- 9] ) = [ 81] . In the second test case, a= [ 4, 8, 9, 13] at first. After the first operation, a= sort( [ 8- 4, 9- 8, 13- 9] ) = [ 1, 4, 4] . After the second operation, a= sort( [ 4- 1, 4- 4] ) = [ 0, 3] . After the last operation, a= sort( [ 3- 0] ) = [ 3] .",
    "topics": [
      "brute force",
      "data structures",
      "implementation",
      "sortings"
    ],
    "id": "1707B"
  },
  {
    "title": "Qpwoeirut and Vertices",
    "url": "https://codeforces.com/problemset/problem/1706/E",
    "history": "You are given a connected undirected graph with n vertices and m edges. Vertices of the graph are numbered by integers from 1 to n and edges of the graph are numbered by integers from 1 to m . Your task is to answer q queries, each consisting of two integers l and r . The answer to each query is the smallest non- negative integer k such that the following condition holds: For all pairs of integers ( a, b) such that l\u2264 a\u2264 b\u2264 r , vertices a and b are reachable from one another using only the first k edges ( that is, edges 1, 2, . . . , k ) .",
    "input": "The first line contains a single integer t ( 1\u2264 t\u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains three integers n , m , and q ( 2\u2264 n\u2264 10^ 5 , 1\u2264 m, q\u2264 2\u00b7 10^ 5 ) \u2014 the number of vertices, edges, and queries respectively. Each of the next m lines contains two integers u_ i and v_ i ( 1\u2264 u_ i, v_ i\u2264 n ) \u2014 ends of the i - th edge. It is guaranteed that the graph is connected and there are no multiple edges or self- loops. Each of the next q lines contains two integers l and r ( 1\u2264 l\u2264 r\u2264 n ) \u2014 descriptions of the queries. It is guaranteed that that the sum of n over all test cases does not exceed 10^ 5 , the sum of m over all test cases does not exceed 2\u00b7 10^ 5 , and the sum of q over all test cases does not exceed 2\u00b7 10^ 5 .",
    "output": "For each test case, print q integers \u2014 the answers to the queries.",
    "note": "Graph from the first test case. The integer near the edge is its number. In the first test case, the graph contains 2 vertices and a single edge connecting vertices 1 and 2 . In the first query, l= 1 and r= 1 . It is possible to reach any vertex from itself, so the answer to this query is 0 . In the second query, l= 1 and r= 2 . Vertices 1 and 2 are reachable from one another using only the first edge, through the path 1 \u27f7 2 . It is impossible to reach vertex 2 from vertex 1 using only the first 0 edges. So, the answer to this query is 1 . Graph from the second test case. The integer near the edge is its number. In the second test case, the graph contains 5 vertices and 5 edges. In the first query, l= 1 and r= 4 . It is enough to use the first 3 edges to satisfy the condition from the statement: Vertices 1 and 2 are reachable from one another through the path 1 \u27f7 2 ( edge 1 ) . Vertices 1 and 3 are reachable from one another through the path 1 \u27f7 3 ( edge 2 ) . Vertices 1 and 4 are reachable from one another through the path 1 \u27f7 2 \u27f7 4 ( edges 1 and 3 ) . Vertices 2 and 3 are reachable from one another through the path 2 \u27f7 1 \u27f7 3 ( edges 1 and 2 ) . Vertices 2 and 4 are reachable from one another through the path 2 \u27f7 4 ( edge 3 ) . Vertices 3 and 4 are reachable from one another through the path 3 \u27f7 1 \u27f7 2 \u27f7 4 ( edges 2 , 1 , and 3 ) . If we use less than 3 of the first edges, then the condition won' t be satisfied. For example, it is impossible to reach vertex 4 from vertex 1 using only the first 2 edges. So, the answer to this query is 3 . In the second query, l= 3 and r= 4 . Vertices 3 and 4 are reachable from one another through the path 3 \u27f7 1 \u27f7 2 \u27f7 4 ( edges 2 , 1 , and 3 ) . If we use any fewer of the first edges, nodes 3 and 4 will not be reachable from one another.",
    "topics": [
      "binary search",
      "data structures",
      "dfs and similar",
      "divide and conquer",
      "dsu",
      "greedy",
      "trees"
    ],
    "id": "1706E"
  },
  {
    "title": "Chopping Carrots (Hard Version)",
    "url": "https://codeforces.com/problemset/problem/1706/D2",
    "history": "This is the hard version of the problem. The only difference between the versions is the constraints on n , k , a_ i , and the sum of n over all test cases. You can make hacks only if both versions of the problem are solved. Note the unusual memory limit. You are given an array of integers a_ 1, a_ 2, . . . , a_ n of length n , and an integer k . The cost of an array of integers p_ 1, p_ 2, . . . , p_ n of length n is max_ 1 \u2264 i \u2264 n( \u230aa_ i/ p_ i\u230b) - min_ 1 \u2264 i \u2264 n( \u230aa_ i/ p_ i\u230b) . Here, \u230ax/ y\u230b denotes the integer part of the division of x by y . Find the minimum cost of an array p such that 1 \u2264 p_ i \u2264 k for all 1 \u2264 i \u2264 n .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The first line of each test case contains two integers n and k ( 1 \u2264 n, k \u2264 10^ 5 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ 1 \u2264 a_ 2 \u2264. . . \u2264 a_ n \u2264 10^ 5 ) . It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, print a single integer \u2014 the minimum possible cost of an array p satisfying the condition above.",
    "note": "In the first test case, the optimal array is p = [ 1, 1, 1, 2, 2] . The resulting array of values of \u230aa_ i/ p_ i\u230b is [ 4, 5, 6, 4, 5] . The cost of p is max_ 1 \u2264 i \u2264 n( \u230aa_ i/ p_ i\u230b) - min_ 1 \u2264 i \u2264 n( \u230aa_ i/ p_ i\u230b) = 6 - 4 = 2 . We can show that there is no array ( satisfying the condition from the statement) with a smaller cost. In the second test case, one of the optimal arrays is p = [ 12, 12, 12, 12, 12] , which results in all \u230aa_ i/ p_ i\u230b being 0 . In the third test case, the only possible array is p = [ 1, 1, 1] .",
    "topics": [
      "brute force",
      "constructive algorithms",
      "data structures",
      "dp",
      "greedy",
      "math",
      "number theory",
      "two pointers"
    ],
    "id": "1706D2"
  },
  {
    "title": "Mark and Professor Koro",
    "url": "https://codeforces.com/problemset/problem/1705/E",
    "history": "After watching a certain anime before going to sleep, Mark dreams of standing in an old classroom with a blackboard that has a sequence of n positive integers a_ 1, a_ 2, . . . , a_ n on it. Then, professor Koro comes in. He can perform the following operation: select an integer x that appears at least 2 times on the board, erase those 2 appearances, and write x+ 1 on the board. Professor Koro then asks Mark the question, \" what is the maximum possible number that could appear on the board after some operations? \" Mark quickly solves this question, but he is still slower than professor Koro. Thus, professor Koro decides to give Mark additional challenges. He will update the initial sequence of integers q times. Each time, he will choose positive integers k and l , then change a_ k to l . After each update, he will ask Mark the same question again. Help Mark answer these questions faster than Professor Koro! Note that the updates are persistent. Changes made to the sequence a will apply when processing future updates.",
    "input": "The first line of the input contains two integers n and q ( 2\u2264 n\u2264 2\u00b7 10^ 5 , 1\u2264 q\u2264 2\u00b7 10^ 5 ) \u2014 the length of the sequence a and the number of updates, respectively. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1\u2264 a_ i\u2264 2\u00b7 10^ 5 ) Then, q lines follow, each consisting of two integers k and l ( 1\u2264 k\u2264 n , 1\u2264 l\u2264 2\u00b7 10^ 5 ) , telling to update a_ k to l .",
    "output": "Print q lines. The i - th line should consist of a single integer \u2014 the answer after the i - th update.",
    "note": "In the first example test, the program must proceed through 4 updates. The sequence after the first update is [ 2, 3, 2, 4, 5] . One sequence of operations that achieves the number 6 the following. Initially, the blackboard has numbers [ 2, 3, 2, 4, 5] . Erase two copies of 2 and write 3 , yielding [ 3, 4, 5, 3] . Erase two copies of 3 and write 4 , yielding [ 4, 5, 4] . Erase two copies of 4 and write 5 , yielding [ 5, 5] . Erase two copies of 5 and write 6 , yielding [ 6] . Then, in the second update, the array is changed to [ 2, 3, 2, 4, 3] . This time, Mark cannot achieve 6 . However, one sequence that Mark can use to achieve 5 is shown below. Initially, the blackboard has [ 2, 3, 2, 4, 3] . Erase two copies of 2 and write 3 , yielding [ 3, 4, 3, 3] . Erase two copies of 3 and write 4 , yielding [ 3, 4, 4] . Erase two copies of 4 and write 5 , yielding [ 3, 5] . In the third update, the array is changed to [ 2, 3, 2, 1, 3] . One way to achieve 4 is shown below. Initially, the blackboard has [ 2, 3, 2, 1, 3] . Erase two copies of 3 and write 4 , yielding [ 2, 2, 1, 4] .",
    "topics": [
      "binary search",
      "bitmasks",
      "brute force",
      "combinatorics",
      "data structures",
      "greedy"
    ],
    "id": "1705E"
  },
  {
    "title": "Yet Another Problem About Pairs Satisfying an Inequality",
    "url": "https://codeforces.com/problemset/problem/1703/F",
    "history": "You are given an array a_ 1, a_ 2, . . . a_ n . Count the number of pairs of indices 1 \u2264 i, j \u2264 n such that a_ i < i < a_ j < j .",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains an integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the array. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) \u2014 the elements of the array. It is guaranteed that the sum of n across all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output a single integer \u2014 the number of pairs of indices satisfying the condition in the statement. Please note, that the answer for some test cases won' t fit into 32- bit integer type, so you should use at least 64- bit integer type in your programming language ( like long long for C+ + ) .",
    "note": "For the first test cases the pairs are ( i, j) = { ( 2, 4) , ( 2, 8) , ( 3, 8) } . The pair ( 2, 4) is true because a_ 2 = 1 , a_ 4 = 3 and 1 < 2 < 3 < 4 . The pair ( 2, 8) is true because a_ 2 = 1 , a_ 8 = 4 and 1 < 2 < 4 < 8 . The pair ( 3, 8) is true because a_ 3 = 2 , a_ 8 = 4 and 2 < 3 < 4 < 8 .",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "greedy",
      "sortings"
    ],
    "id": "1703F"
  },
  {
    "title": "Double Strings",
    "url": "https://codeforces.com/problemset/problem/1703/D",
    "history": "You are given n strings s_ 1, s_ 2, . . . , s_ n of length at most 8 . For each string s_ i , determine if there exist two strings s_ j and s_ k such that s_ i = s_ j + s_ k . That is, s_ i is the concatenation of s_ j and s_ k . Note that j can be equal to k . Recall that the concatenation of strings s and t is s + t = s_ 1 s_ 2 . . . s_ p t_ 1 t_ 2 . . . t_ q , where p and q are the lengths of strings s and t respectively. For example, concatenation of \" code\" and \" forces\" is \" codeforces\" .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of strings. Then n lines follow, the i - th of which contains non- empty string s_ i of length at most 8 , consisting of lowercase English letters. Among the given n strings, there may be equal ( duplicates) . The sum of n over all test cases doesn' t exceed 10^ 5 .",
    "output": "For each test case, output a binary string of length n . The i - th bit should be if there exist two strings s_ j and s_ k where s_ i = s_ j + s_ k , and otherwise. Note that j can be equal to k .",
    "note": "In the first test case, we have the following: s_ 1 = s_ 2 + s_ 2 , since = + . Remember that j can be equal to k . s_ 2 is not the concatenation of any two strings in the list. s_ 3 = s_ 2 + s_ 5 , since = + . s_ 4 is not the concatenation of any two strings in the list. s_ 5 is not the concatenation of any two strings in the list. Since only s_ 1 and s_ 3 satisfy the conditions, only the first and third bits in the answer should be , so the answer is .",
    "topics": [
      "brute force",
      "data structures",
      "strings"
    ],
    "id": "1703D"
  },
  {
    "title": "ICPC Balloons",
    "url": "https://codeforces.com/problemset/problem/1703/B",
    "history": "In an ICPC contest, balloons are distributed as follows: Whenever a team solves a problem, that team gets a balloon. The first team to solve a problem gets an additional balloon. A contest has 26 problems, labelled , , , . . . , . You are given the order of solved problems in the contest, denoted as a string s , where the i - th character indicates that the problem s_ i has been solved by some team. No team will solve the same problem twice. Determine the total number of balloons that the teams received. Note that some problems may be solved by none of the teams.",
    "input": "The first line of the input contains an integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of testcases. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 50 ) \u2014 the length of the string. The second line of each test case contains a string s of length n consisting of uppercase English letters, denoting the order of solved problems.",
    "output": "For each test case, output a single integer \u2014 the total number of balloons that the teams received.",
    "note": "In the first test case, 5 balloons are given out: Problem is solved. That team receives 2 balloons: one because they solved the problem, an an additional one because they are the first team to solve problem . Problem is solved. That team receives 2 balloons: one because they solved the problem, an an additional one because they are the first team to solve problem . Problem is solved. That team receives only 1 balloon, because they solved the problem. Note that they don' t get an additional balloon because they are not the first team to solve problem . The total number of balloons given out is 2+ 2+ 1= 5 . In the second test case, there is only one problem solved. The team who solved it receives 2 balloons: one because they solved the problem, an an additional one because they are the first team to solve problem .",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "1703B"
  },
  {
    "title": "Passable Paths (hard version)",
    "url": "https://codeforces.com/problemset/problem/1702/G2",
    "history": "This is a hard version of the problem. The only difference between an easy and a hard version is in the number of queries. Polycarp grew a tree from n vertices. We remind you that a tree of n vertices is an undirected connected graph of n vertices and n- 1 edges that does not contain cycles. He calls a set of vertices passable if there is such a path in the tree that passes through each vertex of this set without passing through any edge twice. The path can visit other vertices ( not from this set) . In other words, a set of vertices is called passable if there is a simple path that passes through all the vertices of this set ( and possibly some other) . For example, for a tree below sets { 3, 2, 5} , { 1, 5, 4} , { 1, 4} are passable, and { 1, 3, 5} , { 1, 2, 3, 4, 5} are not. Polycarp asks you to answer q queries. Each query is a set of vertices. For each query, you need to determine whether the corresponding set of vertices is passable.",
    "input": "The first line of input contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 number of vertices. Following n - 1 lines a description of the tree. . Each line contains two integers u and v ( 1 \u2264 u, v \u2264 n , u v ) \u2014 indices of vertices connected by an edge. Following line contains single integer q ( 1 \u2264 q \u2264 10^ 5 ) \u2014 number of queries. The following 2 \u00b7 q lines contain descriptions of sets. The first line of the description contains an integer k ( 1 \u2264 k \u2264 n ) \u2014 the size of the set. The second line of the description contains k of distinct integers p_ 1, p_ 2, . . . , p_ k ( 1 \u2264 p_ i \u2264 n ) \u2014 indices of the vertices of the set. It is guaranteed that the sum of k values for all queries does not exceed 2 \u00b7 10^ 5 .",
    "output": "Output q lines, each of which contains the answer to the corresponding query. As an answer, output \" YES\" if the set is passable, and \" NO\" otherwise. You can output the answer in any case ( for example, the strings \" yEs\" , \" yes\" , \" Yes\" and \" YES\" will be recognized as a positive answer) .",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "trees"
    ],
    "id": "1702G2"
  },
  {
    "title": "Equate Multisets",
    "url": "https://codeforces.com/problemset/problem/1702/F",
    "history": "Multiset \u2014is a set of numbers in which there can be equal elements, and the order of the numbers does not matter. Two multisets are equal when each value occurs the same number of times. For example, the multisets { 2, 2, 4} and { 2, 4, 2} are equal, but the multisets { 1, 2, 2} and { 1, 1, 2} \u2014 are not. You are given two multisets a and b , each consisting of n integers. In a single operation, any element of the b multiset can be doubled or halved ( rounded down) . In other words, you have one of the following operations available for an element x of the b multiset: replace x with x \u00b7 2 , or replace x with \u230ax/ 2\u230b ( round down) . Note that you cannot change the elements of the a multiset. See if you can make the multiset b become equal to the multiset a in an arbitrary number of operations ( maybe 0 ) . For example, if n = 4 , a = { 4, 24, 5, 2} , b = { 4, 1, 6, 11} , then the answer is yes. We can proceed as follows: Replace 1 with 1 \u00b7 2 = 2 . We get b = { 4, 2, 6, 11} . Replace 11 with \u230a11/ 2\u230b = 5 . We get b = { 4, 2, 6, 5} . Replace 6 with 6 \u00b7 2 = 12 . We get b = { 4, 2, 12, 5} . Replace 12 with 12 \u00b7 2 = 24 . We get b = { 4, 2, 24, 5} . Got equal multisets a = { 4, 24, 5, 2} and b = { 4, 2, 24, 5} .",
    "input": "The first line of input data contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014the number of test cases. Each test case consists of three lines. The first line of the test case contains an integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014the number of elements in the multisets a and b . The second line gives n integers: a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ 1 \u2264 a_ 2 \u2264. . . \u2264 a_ n \u2264 10^ 9 ) \u2014the elements of the multiset a . Note that the elements may be equal. The third line contains n integers: b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ 1 \u2264 b_ 2 \u2264. . . \u2264 b_ n \u2264 10^ 9 ) \u2014 elements of the multiset b . Note that the elements may be equal. It is guaranteed that the sum of n values over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print on a separate line: YES if you can make the multiset b become equal to a , NO otherwise. You can output YES and NO in any case ( for example, strings yEs, yes, Yes and YES will be recognized as positive answer) .",
    "note": "The first example is explained in the statement. In the second example, it is impossible to get the value 31 from the numbers of the multiset b by available operations. In the third example, we can proceed as follows: Replace 2 with 2 \u00b7 2 = 4 . We get b = { 4, 14, 14, 26, 42} . Replace 14 with \u230a14/ 2\u230b = 7 . We get b = { 4, 7, 14, 26, 42} . Replace 26 with \u230a26/ 2\u230b = 13 . We get b = { 4, 7, 14, 13, 42} . Replace 42 with \u230a42/ 2\u230b = 21 . We get b = { 4, 7, 14, 13, 21} . Replace 21 with \u230a21/ 2\u230b = 10 . We get b = { 4, 7, 14, 13, 10} . Got equal multisets a = { 4, 7, 10, 13, 14} and b = { 4, 7, 14, 13, 10} .",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "math",
      "number theory"
    ],
    "id": "1702F"
  },
  {
    "title": "Train and Queries",
    "url": "https://codeforces.com/problemset/problem/1702/C",
    "history": "Along the railroad there are stations indexed from 1 to 10^ 9 . An express train always travels along a route consisting of n stations with indices u_ 1, u_ 2, . . . , u_ n , where ( 1 \u2264 u_ i \u2264 10^ 9 ) . The train travels along the route from left to right. It starts at station u_ 1 , then stops at station u_ 2 , then at u_ 3 , and so on. Station u_ n \u2014 the terminus. It is possible that the train will visit the same station more than once. That is, there may be duplicates among the values u_ 1, u_ 2, . . . , u_ n . You are given k queries, each containing two different integers a_ j and b_ j ( 1 \u2264 a_ j, b_ j \u2264 10^ 9 ) . For each query, determine whether it is possible to travel by train from the station with index a_ j to the station with index b_ j . For example, let the train route consist of 6 of stations with indices [ 3, 7, 1, 5, 1, 4 ] and give 3 of the following queries: a_ 1 = 3 , b_ 1 = 5 It is possible to travel from station 3 to station 5 by taking a section of the route consisting of stations [ 3, 7, 1, 5 ] . Answer: YES. a_ 2 = 1 , b_ 2 = 7 You cannot travel from station 1 to station 7 because the train cannot travel in the opposite direction. Answer: NO. a_ 3 = 3 , b_ 3 = 10 It is not possible to travel from station 3 to station 10 because station 10 is not part of the train' s route. Answer: NO.",
    "input": "The first line of the input contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014the number of test cases in the test. The descriptions of the test cases follow. The first line of each test case is empty. The second line of each test case contains two integers: n and k ( 1 \u2264 n \u2264 2 \u00b7 10^ 5, 1 \u2264 k \u2264 2 \u00b7 10^ 5 ) \u2014the number of stations the train route consists of and the number of queries. The third line of each test case contains exactly n integers u_ 1, u_ 2, . . . , u_ n ( 1 \u2264 u_ i \u2264 10^ 9 ) . The values u_ 1, u_ 2, . . . , u_ n are not necessarily different. The following k lines contain two different integers a_ j and b_ j ( 1 \u2264 a_ j, b_ j \u2264 10^ 9 ) describing the query with index j . It is guaranteed that the sum of n values over all test cases in the test does not exceed 2 \u00b7 10^ 5 . Similarly, it is guaranteed that the sum of k values over all test cases in the test also does not exceed 2 \u00b7 10^ 5",
    "output": "For each test case, output on a separate line: YES, if you can travel by train from the station with index a_ j to the station with index b_ j NO otherwise. You can output YES and NO in any case ( for example, strings yEs, yes, Yes and YES will be recognized as a positive response) .",
    "note": "The first test case is explained in the problem statement.",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "1702C"
  },
  {
    "title": "Points",
    "url": "https://codeforces.com/problemset/problem/1701/F",
    "history": "A triple of points i , j and k on a coordinate line is called beautiful if i < j < k and k - i \u2264 d . You are given a set of points on a coordinate line, initially empty. You have to process queries of three types: add a point; remove a point; calculate the number of beautiful triples consisting of points belonging to the set.",
    "input": "The first line contains two integers q and d ( 1 \u2264 q, d \u2264 2 \u00b7 10^ 5 ) \u2014 the number of queries and the parameter for defining if a triple is beautiful, respectively. The second line contains q integers a_ 1, a_ 2, . . . , a_ q ( 1 \u2264 a_ i \u2264 2 \u00b7 10^ 5 ) denoting the queries. The integer a_ i denotes the i - th query in the following way: if the point a_ i belongs to the set, remove it; otherwise, add it; after adding or removing the point, print the number of beautiful triples.",
    "output": "For each query, print one integer \u2014 the number of beautiful triples after processing the respective query.",
    "note": "",
    "topics": [
      "combinatorics",
      "data structures",
      "implementation",
      "math",
      "matrices"
    ],
    "id": "1701F"
  },
  {
    "title": "Permutation Restoration",
    "url": "https://codeforces.com/problemset/problem/1701/D",
    "history": "Monocarp had a permutation a of n integers 1 , 2 , . . . , n ( a permutation is an array where each element from 1 to n occurs exactly once) . Then Monocarp calculated an array of integers b of size n , where b_ i = \u230ai/ a_ i\u230b . For example, if the permutation a is [ 2, 1, 4, 3] , then the array b is equal to [ \u230a1/ 2\u230b, \u230a2/ 1\u230b, \u230a3/ 4\u230b, \u230a4/ 3\u230b] = [ 0, 2, 0, 1] . Unfortunately, the Monocarp has lost his permutation, so he wants to restore it. Your task is to find a permutation a that corresponds to the given array b . If there are multiple possible permutations, then print any of them. The tests are constructed in such a way that least one suitable permutation exists.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 5 \u00b7 10^ 5 ) . The second line contains n integers b_ 1, b_ 2, . . . , b_ n ( 0 \u2264 b_ i \u2264 n ) . Additional constrains on the input: the sum of n over test cases does not exceed 5 \u00b7 10^ 5 ; there exists at least one permutation a that would yield this array b .",
    "output": "For each test case, print n integers \u2014 a permutation a that corresponds to the given array b . If there are multiple possible permutations, then print any of them.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "math",
      "sortings",
      "two pointers"
    ],
    "id": "1701D"
  },
  {
    "title": "Helping the Nature",
    "url": "https://codeforces.com/problemset/problem/1700/C",
    "history": "Little Leon lives in the forest. He has recently noticed that some trees near his favourite path are withering, while the other ones are overhydrated so he decided to learn how to control the level of the soil moisture to save the trees. There are n trees growing near the path, the current levels of moisture of each tree are denoted by the array a_ 1, a_ 2, . . . , a_ n . Leon has learned three abilities which will help him to dry and water the soil. Choose a position i and decrease the level of moisture of the trees 1, 2, . . . , i by 1 . Choose a position i and decrease the level of moisture of the trees i, i + 1, . . . , n by 1 . Increase the level of moisture of all trees by 1 . Leon wants to know the minimum number of actions he needs to perform to make the moisture of each tree equal to 0 .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 4 ) \u2014 the number of test cases. The description of t test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 200 000 ) . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) \u2014 the initial levels of trees moisture. It is guaranteed that the sum of n over all test cases doesn' t exceed 200 000 .",
    "output": "For each test case output a single integer \u2014 the minimum number of actions. It can be shown that the answer exists.",
    "note": "In the first test case it' s enough to apply the operation of adding 1 to the whole array 2 times. In the second test case you can apply the operation of decreasing 4 times on the prefix of length 3 and get an array 6, 0, 3 . After that apply the operation of decreasing 6 times on the prefix of length 1 and 3 times on the suffix of length 1 . In total, the number of actions will be 4 + 6 + 3 = 13 . It can be shown that it' s impossible to perform less actions to get the required array, so the answer is 13 .",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy"
    ],
    "id": "1700C"
  },
  {
    "title": "Three Days Grace",
    "url": "https://codeforces.com/problemset/problem/1699/E",
    "history": "Ibti was thinking about a good title for this problem that would fit the round theme ( numerus ternarium) . He immediately thought about the third derivative, but that was pretty lame so he decided to include the best band in the world \u2014 Three Days Grace. You are given a multiset A with initial size n , whose elements are integers between 1 and m . In one operation, do the following: select a value x from the multiset A , then select two integers p and q such that p, q > 1 and p \u00b7 q = x . Insert p and q to A , delete x from A . Note that the size of the multiset A increases by 1 after each operation. We define the balance of the multiset A as max( a_ i) - min( a_ i) . Find the minimum possible balance after performing any number ( possible zero) of operations.",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. The second line of each test case contains two integers n and m ( 1 \u2264 n \u2264 10^ 6 , 1 \u2264 m \u2264 5 \u00b7 10^ 6 ) \u2014 the initial size of the multiset, and the maximum value of an element. The third line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 m ) \u2014 the elements in the initial multiset. It is guaranteed that the sum of n across all test cases does not exceed 10^ 6 and the sum of m across all test cases does not exceed 5 \u00b7 10^ 6 .",
    "output": "For each test case, print a single integer \u2014 the minimum possible balance.",
    "note": "In the first test case, we can apply the operation on each of the 4 s with ( p, q) = ( 2, 2) and make the multiset { 2, 2, 2, 2, 2, 2, 2} with balance max( { 2, 2, 2, 2, 2, 2, 2} ) - min( { 2, 2, 2, 2, 2, 2, 2} ) = 0 . It is obvious we cannot make this balance less than 0 . In the second test case, we can apply an operation on 12 with ( p, q) = ( 3, 4) . After this our multiset will be { 3, 4, 2, 3} . We can make one more operation on 4 with ( p, q) = ( 2, 2) , making the multiset { 3, 2, 2, 2, 3} with balance equal to 1 . In the third test case, we can apply an operation on 35 with ( p, q) = ( 5, 7) . The final multiset is { 6, 5, 7} and has a balance equal to 7- 5 = 2 . In the forth test case, we cannot apply any operation, so the balance is 5 - 1 = 4 .",
    "topics": [
      "data structures",
      "dp",
      "greedy",
      "math",
      "number theory",
      "two pointers"
    ],
    "id": "1699E"
  },
  {
    "title": "Almost Triple Deletions",
    "url": "https://codeforces.com/problemset/problem/1699/D",
    "history": "You are given an integer n and an array a_ 1, a_ 2, . . . , a_ n . In one operation, you can choose an index i ( 1 \u2264 i n ) for which a_ i = \u0338 a_ i+ 1 and delete both a_ i and a_ i+ 1 from the array. After deleting a_ i and a_ i+ 1 , the remaining parts of the array are concatenated. For example, if a= [ 1, 4, 3, 3, 6, 2] , then after performing an operation with i= 2 , the resulting array will be [ 1, 3, 6, 2] . What is the maximum possible length of an array of equal elements obtainable from a by performing several ( perhaps none) of the aforementioned operations?",
    "input": "Each test contains multiple test cases. The first line of input contains one integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The following lines contain the descriptions of the test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 5000 ) \u2014 the length of array a . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 the elements of array a . It is guaranteed that the sum of n across all test cases does not exceed 10 000 .",
    "output": "For each testcase, print a single integer, the maximum possible length of an array of equal elements obtainable from a by performing a sequence of operations.",
    "note": "For the first testcase, an optimal sequence of operations would be: [ 1, 2, 3, 2, 1, 3, 3] \u2192 [ 3, 2, 1, 3, 3] \u2192 [ 3, 3, 3] . For the second testcase, all elements in the array are already equal. For the third testcase, the only possible sequence of operations is: [ 1, 1, 1, 2, 2, 2] \u2192 [ 1, 1, 2, 2] \u2192 [ 1, 2] \u2192 [ ] . Note that, according to the statement, the elements deleted at each step must be different. For the fourth testcase, the optimal sequence of operations is: [ 1, 1, 2, 2, 3, 3, 1, 1] \u2192 [ 1, 1, 2, 3, 1, 1] \u2192 [ 1, 1, 1, 1] . For the fifth testcase, one possible reachable array of two equal elements is [ 4, 4] .",
    "topics": [
      "data structures",
      "dp",
      "greedy"
    ],
    "id": "1699D"
  },
  {
    "title": "3SUM Closure",
    "url": "https://codeforces.com/problemset/problem/1698/C",
    "history": "You are given an array a of length n . The array is called 3SUM- closed if for all distinct indices i , j , k , the sum a_ i + a_ j + a_ k is an element of the array. More formally, a is 3SUM- closed if for all integers 1 \u2264 i < j < k \u2264 n , there exists some integer 1 \u2264 l \u2264 n such that a_ i + a_ j + a_ k = a_ l . Determine if a is 3SUM- closed.",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains an integer n ( 3 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the array. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) \u2014 the elements of the array. It is guaranteed that the sum of n across all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output \" YES\" ( without quotes) if a is 3SUM- closed and \" NO\" ( without quotes) otherwise. You can output \" YES\" and \" NO\" in any case ( for example, strings \" yEs\" , \" yes\" and \" Yes\" will be recognized as a positive response) .",
    "note": "In the first test case, there is only one triple where i= 1 , j= 2 , k= 3 . In this case, a_ 1 + a_ 2 + a_ 3 = 0 , which is an element of the array ( a_ 2 = 0 ) , so the array is 3SUM- closed. In the second test case, a_ 1 + a_ 4 + a_ 5 = - 1 , which is not an element of the array. Therefore, the array is not 3SUM- closed. In the third test case, a_ i + a_ j + a_ k = 0 for all distinct i , j , k , and 0 is an element of the array, so the array is 3SUM- closed.",
    "topics": [
      "brute force",
      "data structures"
    ],
    "id": "1698C"
  },
  {
    "title": "awoo's Favorite Problem",
    "url": "https://codeforces.com/problemset/problem/1697/C",
    "history": "You are given two strings s and t , both of length n . Each character in both string is ' a' , ' b' or ' c' . In one move, you can perform one of the following actions: choose an occurrence of \" ab\" in s and replace it with \" ba\" ; choose an occurrence of \" bc\" in s and replace it with \" cb\" . You are allowed to perform an arbitrary amount of moves ( possibly, zero) . Can you change string s to make it equal to string t ?",
    "input": "The first line contains a single integer q ( 1 \u2264 q \u2264 10^ 4 ) \u2014 the number of testcases. The first line of each testcase contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of strings s and t . The second line contains string s of length n . Each character is ' a' , ' b' or ' c' . The third line contains string t of length n . Each character is ' a' , ' b' or ' c' . The sum of n over all testcases doesn' t exceed 10^ 5 .",
    "output": "For each testcase, print \" YES\" if you can change string s to make it equal to string t by performing an arbitrary amount of moves ( possibly, zero) . Otherwise, print \" NO\" .",
    "note": "",
    "topics": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation",
      "strings",
      "two pointers"
    ],
    "id": "1697C"
  },
  {
    "title": "Fishingprince Plays With Array Again",
    "url": "https://codeforces.com/problemset/problem/1696/G",
    "history": "Suppose you are given a 1- indexed sequence a of non- negative integers, whose length is n , and two integers x , y . In consecutive t seconds ( t can be any positive real number) , you can do one of the following operations: Select 1\u2264 i< n , decrease a_ i by x\u00b7 t , and decrease a_ i+ 1 by y\u00b7 t . Select 1\u2264 i< n , decrease a_ i by y\u00b7 t , and decrease a_ i+ 1 by x\u00b7 t . Define the minimum amount of time ( it might be a real number) required to make all elements in the sequence less than or equal to 0 as f( a) . For example, when x= 1 , y= 2 , it takes 3 seconds to deal with the array [ 3, 1, 1, 3] . We can: In the first 1. 5 seconds do the second operation with i= 1 . In the next 1. 5 seconds do the first operation with i= 3 . We can prove that it' s not possible to make all elements less than or equal to 0 in less than 3 seconds, so f( [ 3, 1, 1, 3] ) = 3 . Now you are given a 1- indexed sequence b of positive integers, whose length is n . You are also given positive integers x , y . Process q queries of the following two types: 1 k v: change b_ k to v . 2 l r: print f( [ b_ l, b_ l+ 1, . . . , b_ r] ) .",
    "input": "The first line of input contains two integers n and q ( 2\u2264 n\u2264 2\u00b7 10^ 5 , 1\u2264 q\u2264 2\u00b7 10^ 5 ) . The second line of input contains two integers x and y ( 1\u2264 x, y\u2264 10^ 6 ) . The third line of input contains n integers b_ 1, b_ 2, . . . , b_ n ( 1\u2264 b_ i\u2264 10^ 6 ) . This is followed by q lines. Each of these q lines contains three integers. The first integer op is either 1 or 2 . If it is 1 , it is followed by two integers k , v ( 1\u2264 k\u2264 n , 1\u2264 v\u2264 10^ 6 ) . It means that you should change b_ k to v . If it is 2 , it is followed by two integers l , r ( 1\u2264 l< r\u2264 n ) . It means that you should print f( [ b_ l, b_ l+ 1, . . . , b_ r] ) .",
    "output": "For each query of type 2 , print one real number \u2014 the answer to the query. Your answer is considered correct if its absolute error or relative error does not exceed 10^ - 9 .",
    "note": "Let' s analyse the sample. In the first query, we are asked to compute f( [ 3, 1, 1, 4] ) . The answer is 3. 5 . One optimal sequence of operations is: In the first 1. 5 seconds do the second operation with i= 1 . In the next 2 seconds do the first operation with i= 3 . In the third query, we are asked to compute f( [ 1, 1, 1] ) . The answer is 1 . One optimal sequence of operations is: In the first 0. 5 seconds do the second operation with i= 1 . In the next 0. 5 seconds do the first operation with i= 2 .",
    "topics": [
      "brute force",
      "data structures",
      "geometry",
      "math"
    ],
    "id": "1696G"
  },
  {
    "title": "Permutation Graph",
    "url": "https://codeforces.com/problemset/problem/1696/D",
    "history": "A permutation is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [ 2, 3, 1, 5, 4] is a permutation, but [ 1, 2, 2] is not a permutation ( 2 appears twice in the array) and [ 1, 3, 4] is also not a permutation ( n= 3 but there is 4 in the array) . You are given a permutation of 1, 2, . . . , n , [ a_ 1, a_ 2, . . . , a_ n] . For integers i , j such that 1\u2264 i< j\u2264 n , define mn( i, j) as min_ k= i^ j a_ k , and define mx( i, j) as max_ k= i^ j a_ k . Let us build an undirected graph of n vertices, numbered 1 to n . For every pair of integers 1\u2264 i< j\u2264 n , if mn( i, j) = a_ i and mx( i, j) = a_ j both holds, or mn( i, j) = a_ j and mx( i, j) = a_ i both holds, add an undirected edge of length 1 between vertices i and j . In this graph, find the length of the shortest path from vertex 1 to vertex n . We can prove that 1 and n will always be connected via some path, so a shortest path always exists.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 5\u00b7 10^ 4 ) . Description of the test cases follows. The first line of each test case contains one integer n ( 1\u2264 n\u2264 2. 5\u00b7 10^ 5 ) . The second line of each test case contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 1\u2264 a_ i\u2264 n ) . It' s guaranteed that a is a permutation of 1 , 2 , . . . , n . It is guaranteed that the sum of n over all test cases does not exceed 5\u00b7 10^ 5 .",
    "output": "For each test case, print a single line containing one integer \u2014 the length of the shortest path from 1 to n .",
    "note": "The following are illustrations of constructed graphs in example test cases. the constructed graph in test case 1 the constructed graph in test case 2 the constructed graph in test case 3 the constructed graph in test case 4 the constructed graph in test case 5",
    "topics": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "divide and conquer",
      "greedy",
      "shortest paths"
    ],
    "id": "1696D"
  },
  {
    "title": "Zero Path",
    "url": "https://codeforces.com/problemset/problem/1695/C",
    "history": "You are given a grid with n rows and m columns. We denote the square on the i - th ( 1\u2264 i\u2264 n ) row and j - th ( 1\u2264 j\u2264 m ) column by ( i, j) and the number there by a_ ij . All numbers are equal to 1 or to - 1 . You start from the square ( 1, 1) and can move one square down or one square to the right at a time. In the end, you want to end up at the square ( n, m) . Is it possible to move in such a way so that the sum of the values written in all the visited cells ( including a_ 11 and a_ nm ) is 0 ?",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . Description of the test cases follows. The first line of each test case contains two integers n and m ( 1 \u2264 n, m \u2264 1000 ) \u2014 the size of the grid. Each of the following n lines contains m integers. The j - th integer on the i - th line is a_ ij ( a_ ij = 1 or - 1 ) \u2014 the element in the cell ( i, j) . It is guaranteed that the sum of n\u00b7 m over all test cases does not exceed 10^ 6 .",
    "output": "For each test case, print \" YES\" if there exists a path from the top left to the bottom right that adds up to 0 , and \" NO\" otherwise. You can output each letter in any case.",
    "note": "One possible path for the fourth test case is given in the picture in the statement.",
    "topics": [
      "brute force",
      "data structures",
      "dp",
      "graphs",
      "greedy",
      "shortest paths"
    ],
    "id": "1695C"
  },
  {
    "title": "Outermost Maximums",
    "url": "https://codeforces.com/problemset/problem/1693/E",
    "history": "Yeri has an array of n + 2 non- negative integers : a_ 0, a_ 1, . . . , a_ n, a_ n + 1 . We know that a_ 0 = a_ n + 1 = 0 . She wants to make all the elements of a equal to zero in the minimum number of operations. In one operation she can do one of the following: Choose the leftmost maximum element and change it to the maximum of the elements on its left. Choose the rightmost maximum element and change it to the maximum of the elements on its right. Help her find the minimum number of operations needed to make all elements of a equal to zero.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 n ) .",
    "output": "Print a single integer \u2014 the minimum number of operations needed to make all elements of a equal to zero.",
    "note": "In the first sample, you get \u27e8 1, 1, 2, 4, 0, 2 \u27e9 by performing the first operation and \u27e8 1, 4, 2, 2, 0, 2 \u27e9 by performing the second operation. One way to achieve our goal is shown below. ( The underlines show the last change. ) \u27e8 1, 4, 2, 4, 0, 2 \u27e9\u2192\u27e8 1, 4, 2, 2, 0, 2 \u27e9\u2192\u27e8 1, 1, 2, 2, 0, 2 \u27e9\u2192\u27e8 1, 1, 2, 2, 0, 0\u27e9\u2192\u27e8 1, 1, 2, 0, 0, 0 \u27e9\u2192\u27e8 1, 1, 0, 0, 0, 0 \u27e9\u2192\u27e80, 1, 0, 0, 0, 0 \u27e9\u2192\u27e8 0, 0, 0, 0, 0, 0 \u27e9 In the third sample each element is already equal to zero so no operations are needed.",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "1693E"
  },
  {
    "title": "Decinc Dividing",
    "url": "https://codeforces.com/problemset/problem/1693/D",
    "history": "Let' s call an array a of m integers a_ 1, a_ 2, . . . , a_ m Decinc if a can be made increasing by removing a decreasing subsequence ( possibly empty) from it. For example, if a = [ 3, 2, 4, 1, 5] , we can remove the decreasing subsequence [ a_ 1, a_ 4] from a and obtain a = [ 2, 4, 5] , which is increasing. You are given a permutation p of numbers from 1 to n . Find the number of pairs of integers ( l, r) with 1 \u2264 l \u2264 r \u2264 n such that p[ l . . . r] ( the subarray of p from l to r ) is a Decinc array.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the size of p . The second line contains n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n , all p_ i are distinct) \u2014 elements of the permutation.",
    "output": "Output the number of pairs of integers ( l, r) such that p[ l . . . r] ( the subarray of p from l to r ) is a Decinc array. ( 1 \u2264 l \u2264 r \u2264 n)",
    "note": "In the first sample, all subarrays are Decinc. In the second sample, all subarrays except p[ 1 . . . 6] and p[ 2 . . . 6] are Decinc.",
    "topics": [
      "brute force",
      "data structures",
      "divide and conquer",
      "dp",
      "greedy"
    ],
    "id": "1693D"
  },
  {
    "title": "Gambling",
    "url": "https://codeforces.com/problemset/problem/1692/H",
    "history": "Marian is at a casino. The game at the casino works like this. Before each round, the player selects a number between 1 and 10^ 9 . After that, a dice with 10^ 9 faces is rolled so that a random number between 1 and 10^ 9 appears. If the player guesses the number correctly their total money is doubled, else their total money is halved. Marian predicted the future and knows all the numbers x_ 1, x_ 2, . . . , x_ n that the dice will show in the next n rounds. He will pick three integers a , l and r ( l \u2264 r ) . He will play r- l+ 1 rounds ( rounds between l and r inclusive) . In each of these rounds, he will guess the same number a . At the start ( before the round l ) he has 1 dollar. Marian asks you to determine the integers a , l and r ( 1 \u2264 a \u2264 10^ 9 , 1 \u2264 l \u2264 r \u2264 n ) such that he makes the most money at the end. Note that during halving and multiplying there is no rounding and there are no precision errors. So, for example during a game, Marian could have money equal to 11024 , 1128 , 12 , 1 , 2 , 4 , etc. ( any value of 2^ t , where t is an integer of any sign) .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 2\u00b7 10^ 5 ) \u2014 the number of rounds. The second line of each test case contains n integers x_ 1, x_ 2, . . . , x_ n ( 1 \u2264 x_ i \u2264 10^ 9 ) , where x_ i is the number that will fall on the dice in the i - th round. It is guaranteed that the sum of n over all test cases does not exceed 2\u00b710^ 5 .",
    "output": "For each test case, output three integers a , l , and r such that Marian makes the most amount of money gambling with his strategy. If there are multiple answers, you may output any of them.",
    "note": "For the first test case, the best choice is a= 4 , l= 1 , r= 5 , and the game would go as follows. Marian starts with one dollar. After the first round, he ends up with 2 dollars because the numbers coincide with the chosen one. After the second round, he ends up with 4 dollars because the numbers coincide again. After the third round, he ends up with 2 dollars because he guesses 4 even though 3 is the correct choice. After the fourth round, he ends up with 4 dollars again. In the final round, he ends up 8 dollars because he again guessed correctly. There are many possible answers for the second test case, but it can be proven that Marian will not end up with more than 2 dollars, so any choice with l = r with the appropriate a is acceptable.",
    "topics": [
      "data structures",
      "dp",
      "greedy",
      "math"
    ],
    "id": "1692H"
  },
  {
    "title": "2^Sort",
    "url": "https://codeforces.com/problemset/problem/1692/G",
    "history": "Given an array a of length n and an integer k , find the number of indices 1 \u2264 i \u2264 n - k such that the subarray [ a_ i, . . . , a_ i+ k] with length k+ 1 ( not with length k ) has the following property: If you multiply the first element by 2^ 0 , the second element by 2^ 1 , . . . , and the ( k+ 1 ) - st element by 2^ k , then this subarray is sorted in strictly increasing order. More formally, count the number of indices 1 \u2264 i \u2264 n - k such that 2^ 0 \u00b7 a_ i < 2^ 1 \u00b7 a_ i+ 1 < 2^ 2 \u00b7 a_ i+ 2 < . . . < 2^ k \u00b7 a_ i+ k.",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains two integers n , k ( 3 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 k < n ) \u2014 the length of the array and the number of inequalities. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the elements of the array. The sum of n across all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output a single integer \u2014 the number of indices satisfying the condition in the statement.",
    "note": "In the first test case, both subarrays satisfy the condition: i= 1 : the subarray [ a_ 1, a_ 2, a_ 3] = [ 20, 22, 19] , and 1 \u00b7 20 < 2 \u00b7 22 < 4 \u00b7 19 . i= 2 : the subarray [ a_ 2, a_ 3, a_ 4] = [ 22, 19, 84] , and 1 \u00b7 22 < 2 \u00b7 19 < 4 \u00b7 84 . In the second test case, three subarrays satisfy the condition: i= 1 : the subarray [ a_ 1, a_ 2] = [ 9, 5] , and 1 \u00b7 9 < 2 \u00b7 5 . i= 2 : the subarray [ a_ 2, a_ 3] = [ 5, 3] , and 1 \u00b7 5 < 2 \u00b7 3 . i= 3 : the subarray [ a_ 3, a_ 4] = [ 3, 2] , and 1 \u00b7 3 < 2 \u00b7 2 . i= 4 : the subarray [ a_ 4, a_ 5] = [ 2, 1] , but 1 \u00b7 2 = 2 \u00b7 1 , so this subarray doesn' t satisfy the condition.",
    "topics": [
      "data structures",
      "dp",
      "sortings",
      "two pointers"
    ],
    "id": "1692G"
  },
  {
    "title": "Number of Groups",
    "url": "https://codeforces.com/problemset/problem/1691/E",
    "history": "You are given n colored segments on the number line. Each segment is either colored red or blue. The i - th segment can be represented by a tuple ( c_ i, l_ i, r_ i) . The segment contains all the points in the range [ l_ i, r_ i] , inclusive, and its color denoted by c_ i : if c_ i = 0 , it is a red segment; if c_ i = 1 , it is a blue segment. We say that two segments of different colors are connected, if they share at least one common point. Two segments belong to the same group, if they are either connected directly, or through a sequence of directly connected segments. Find the number of groups of segments.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 5 ) . Description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of segments. Each of the next n lines contains three integers c_ i, l_ i, r_ i ( 0 \u2264 c_ i \u2264 1, 0 \u2264 l_ i \u2264 r_ i \u2264 10^ 9 ) , describing the i - th segment. It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, print a single integer k , the number of groups of segments.",
    "note": "In the first example there are 5 segments. The segments 1 and 2 are connected, because they are of different colors and share a point. Also, the segments 2 and 3 are connected, and so are segments 4 and 5 . Thus, there are two groups: one containing segments { 1, 2, 3} , and the other one containing segments { 4, 5} .",
    "topics": [
      "data structures",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "sortings"
    ],
    "id": "1691E"
  },
  {
    "title": "Max GEQ Sum",
    "url": "https://codeforces.com/problemset/problem/1691/D",
    "history": "You are given an array a of n integers. You are asked to find out if the inequality max( a_ i, a_ i + 1, . . . , a_ j - 1, a_ j) \u2265 a_ i + a_ i + 1 + . . . + a_ j - 1 + a_ j holds for all pairs of indices ( i, j) , where 1 \u2264 i \u2264 j \u2264 n .",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 5 ) . Description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the size of the array. The next line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, on a new line output \" YES\" if the condition is satisfied for the given array, and \" NO\" otherwise. You can print each letter in any case ( upper or lower) .",
    "note": "In test cases 1 and 2 , the given condition is satisfied for all ( i, j) pairs. In test case 3 , the condition isn' t satisfied for the pair ( 1, 2) as max( 2, 3) < 2 + 3 .",
    "topics": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "divide and conquer",
      "implementation",
      "two pointers"
    ],
    "id": "1691D"
  },
  {
    "title": "Count the Trains",
    "url": "https://codeforces.com/problemset/problem/1690/G",
    "history": "There are n of independent carriages on the rails. The carriages are numbered from left to right from 1 to n . The carriages are not connected to each other. The carriages move to the left, so that the carriage with number 1 moves ahead of all of them. The i - th carriage has its own engine, which can accelerate the carriage to a_ i km/ h, but the carriage cannot go faster than the carriage in front of it. See example for explanation. All carriages start moving to the left at the same time, and they naturally form trains. We will call trains \u2014 consecutive moving carriages having the same speed. For example, we have n= 5 carriages and array a = [ 10, 13, 5, 2, 6] . Then the final speeds of the carriages will be [ 10, 10, 5, 2, 2] . Respectively, 3 of the train will be formed. There are also messages saying that some engine has been corrupted: message \" k d\" means that the speed of the k - th carriage has decreased by d ( that is, there has been a change in the maximum speed of the carriage a_ k = a_ k - d ) . Messages arrive sequentially, the processing of the next message takes into account the changes from all previous messages. After each message determine the number of formed trains.",
    "input": "The first line of input data contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014the number of input test cases. This is followed by descriptions of the test cases. The first line of each test case is empty. The second line of the test case contains two integers n and m ( 1 \u2264 n, m \u2264 10^ 5 ) \u2014the number of carriages and the number of messages to slow down the carriage, respectively. The third line contains n integers: a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) \u2014 the number a_ i means that the carriage with number i can reach a speed of a_ i km/ h. The next m lines contain two integers k_ j and d_ j ( 1 \u2264 k_ j \u2264 n , 0 \u2264 d_ j \u2264 a_ k_ j ) \u2014this is the message that the speed of the carriage with number k_ j has decreased by d_ j . In other words, there has been a change in its maximum speed a_ k_ j = a_ k_ j - d_ j . Note that at any time the speed of each carriage is non- negative. In other words, a_ i \u2265 s_ i , where s_ i \u2014is the sum of such d_ j that k_ j= i . It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 . Similarly, it is guaranteed that the sum of m over all test cases does not exceed 10^ 5 .",
    "output": "Print t lines. On each line print the answer for the corresponding test case. For each test case print m numbers: the number of trains formed after each message.",
    "note": "For the first test case: Initially array a = [ 6, 2, 3, 7] . After the first message, the array a = [ 6, 2, 1, 7] . Accordingly, the speeds of the carriages are [ 6, 2, 1, 1] and will form 3 of the train. After the second message the array a = [ 6, 2, 1, 0] . Accordingly, the speeds of the carriages are [ 6, 2, 1, 0] , and 4 of the train will be formed. For the second test case: Initially, the array a = [ 10, 13, 5, 2, 6] . After the first message, the array a = [ 10, 9, 5, 2, 6] . Accordingly, the speeds of the carriages are equal: [ 10, 9, 5, 2, 2] , and 4 of the train will be formed. After the second message the array a = [ 10, 9, 5, 2, 4] . Accordingly, the speeds of the carriages are [ 10, 9, 5, 2, 2] , and 4 of the train will be formed. After the third message the array a = [ 5, 9, 5, 2, 4] . Accordingly, the speeds of the carriages are [ 5, 5, 5, 2, 2] , and 2 of the train will be formed. After the fourth message the array a = [ 5, 9, 3, 2, 4] . Accordingly, the speeds of the carriages are [ 5, 5, 3, 2, 2] , and 3 of the train will be formed.",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "1690G"
  },
  {
    "title": "Restoring the Duration of Tasks",
    "url": "https://codeforces.com/problemset/problem/1690/C",
    "history": "Recently, Polycarp completed n successive tasks. For each completed task, the time s_ i is known when it was given, no two tasks were given at the same time. Also given is the time f_ i when the task was completed. For each task, there is an unknown value d_ i ( d_ i> 0 ) \u2014 duration of task execution. It is known that the tasks were completed in the order in which they came. Polycarp performed the tasks as follows: As soon as the very first task came, Polycarp immediately began to carry it out. If a new task arrived before Polycarp finished the previous one, he put the new task at the end of the queue. When Polycarp finished executing the next task and the queue was not empty, he immediately took a new task from the head of the queue ( if the queue is empty \u2014 he just waited for the next task) . Find d_ i ( duration) of each task.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The descriptions of the input data sets follow. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) . The second line of each test case contains exactly n integers s_ 1 < s_ 2 < . . . < s_ n ( 0 \u2264 s_ i \u2264 10^ 9 ) . The third line of each test case contains exactly n integers f_ 1 < f_ 2 < . . . < f_ n ( s_ i < f_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each of t test cases print n positive integers d_ 1, d_ 2, . . . , d_ n \u2014 the duration of each task.",
    "note": "First test case: The queue is empty at the beginning: [ ] . And that' s where the first task comes in. At time 2 , Polycarp finishes doing the first task, so the duration of the first task is 2 . The queue is empty so Polycarp is just waiting. At time 3 , the second task arrives. And at time 7 , the third task arrives, and now the queue looks like this: [ 7] . At the time 10 , Polycarp finishes doing the second task, as a result, the duration of the second task is 7 . And at time 10 , Polycarp immediately starts doing the third task and finishes at time 11 . As a result, the duration of the third task is 1 . An example of the first test case.",
    "topics": [
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "1690C"
  },
  {
    "title": "Lena and Matrix",
    "url": "https://codeforces.com/problemset/problem/1689/D",
    "history": "Lena is a beautiful girl who likes logical puzzles. As a gift for her birthday, Lena got a matrix puzzle! The matrix consists of n rows and m columns, and each cell is either black or white. The coordinates ( i, j) denote the cell which belongs to the i - th row and j - th column for every 1\u2264 i \u2264 n and 1\u2264 j \u2264 m . To solve the puzzle, Lena has to choose a cell that minimizes the Manhattan distance to the farthest black cell from the chosen cell. More formally, let there be k \u2265 1 black cells in the matrix with coordinates ( x_ i, y_ i) for every 1\u2264 i \u2264 k . Lena should choose a cell ( a, b) that minimizes max_ i= 1^ k( | a- x_ i| + | b- y_ i| ) . As Lena has no skill, she asked you for help. Will you tell her the optimal cell to choose?",
    "input": "There are several test cases in the input data. The first line contains a single integer t ( 1\u2264 t\u2264 10 000 ) \u2014 the number of test cases. This is followed by the test cases description. The first line of each test case contains two integers n and m ( 2\u2264 n, m \u2264 1000 ) \u2014 the dimensions of the matrix. The following n lines contain m characters each, each character is either ' W' or ' B' . The j - th character in the i - th of these lines is ' W' if the cell ( i, j) is white, and ' B' if the cell ( i, j) is black. It is guaranteed that at least one black cell exists. It is guaranteed that the sum of n\u00b7 m does not exceed 10^ 6 .",
    "output": "For each test case, output the optimal cell ( a, b) to choose. If multiple answers exist, output any.",
    "note": "In the first test case the two black cells have coordinates ( 1, 1) and ( 3, 2) . The four optimal cells are ( 1, 2) , ( 2, 1) , ( 2, 2) and ( 3, 1) . It can be shown that no other cell minimizes the maximum Manhattan distance to every black cell. In the second test case it is optimal to choose the black cell ( 2, 2) with maximum Manhattan distance being 2 .",
    "topics": [
      "data structures",
      "dp",
      "geometry",
      "shortest paths"
    ],
    "id": "1689D"
  },
  {
    "title": "Mystic Permutation",
    "url": "https://codeforces.com/problemset/problem/1689/B",
    "history": "Monocarp is a little boy who lives in Byteland and he loves programming. Recently, he found a permutation of length n . He has to come up with a mystic permutation. It has to be a new permutation such that it differs from the old one in each position. More formally, if the old permutation is p_ 1, p_ 2, . . . , p_ n and the new one is q_ 1, q_ 2, . . . , q_ n it must hold that p_ 1= \u0338 q_ 1, p_ 2= \u0338 q_ 2, . . . , p_ n= \u0338 q_ n. Monocarp is afraid of lexicographically large permutations. Can you please help him to find the lexicographically minimal mystic permutation?",
    "input": "There are several test cases in the input data. The first line contains a single integer t ( 1\u2264 t\u2264 200 ) \u2014 the number of test cases. This is followed by the test cases description. The first line of each test case contains a positive integer n ( 1\u2264 n\u2264 1000 ) \u2014 the length of the permutation. The second line of each test case contains n distinct positive integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) . It' s guaranteed that p is a permutation, i. e. p_ i = \u0338 p_ j for all i = \u0338 j . It is guaranteed that the sum of n does not exceed 1000 over all test cases.",
    "output": "For each test case, output n positive integers \u2014 the lexicographically minimal mystic permutations. If such a permutation does not exist, output - 1 instead.",
    "note": "In the first test case possible permutations that are mystic are [ 2, 3, 1] and [ 3, 1, 2] . Lexicographically smaller of the two is [ 2, 3, 1] . In the second test case, [ 1, 2, 3, 4, 5] is the lexicographically minimal permutation and it is also mystic. In third test case possible mystic permutations are [ 1, 2, 4, 3] , [ 1, 4, 2, 3] , [ 1, 4, 3, 2] , [ 3, 1, 4, 2] , [ 3, 2, 4, 1] , [ 3, 4, 2, 1] , [ 4, 1, 2, 3] , [ 4, 1, 3, 2] and [ 4, 3, 2, 1] . The smallest one is [ 1, 2, 4, 3] .",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "1689B"
  },
  {
    "title": "Cute number",
    "url": "https://codeforces.com/problemset/problem/1687/D",
    "history": "Ran is especially skilled in computation and mathematics. It is said that she can do unimaginable calculation work in an instant. \u2014Perfect Memento in Strict SenseRan Yakumo is a cute girl who loves creating cute Maths problems. Let f( x) be the minimal square number strictly greater than x , and g( x) be the maximal square number less than or equal to x . For example, f( 1) = f( 2) = g( 4) = g( 8) = 4 . A positive integer x is cute if x- g( x) < f( x) - x . For example, 1, 5, 11 are cute integers, while 3, 8, 15 are not. Ran gives you an array a of length n . She wants you to find the smallest non- negative integer k such that a_ i + k is a cute number for any element of a .",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 10^ 6 ) \u2014 the length of a . The second line contains n intergers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ 1 \u2264 a_ 2 \u2264. . . \u2264 a_ n \u2264 2\u00b7 10^ 6 ) \u2014 the array a .",
    "output": "Print a single interger k \u2014 the answer.",
    "note": "Test case 1: 3 is not cute integer, so k 0 . 2, 4, 9, 11 are cute integers, so k= 1 .",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "dsu",
      "implementation",
      "math"
    ],
    "id": "1687D"
  },
  {
    "title": "Sanae and Giant Robot",
    "url": "https://codeforces.com/problemset/problem/1687/C",
    "history": "Is it really? ! The robot only existing in my imagination? ! The Colossal Walking Robot? ! ! \u2014 Kochiya Sanae Sanae made a giant robot \u2014 Hisoutensoku, but something is wrong with it. To make matters worse, Sanae can not figure out how to stop it, and she is forced to fix it on- the- fly. The state of a robot can be represented by an array of integers of length n . Initially, the robot is at state a . She wishes to turn it into state b . As a great programmer, Sanae knows the art of copy- and- paste. In one operation, she can choose some segment from given segments, copy the segment from b and paste it into the same place of the robot, replacing the original state there. However, she has to ensure that the sum of a does not change after each copy operation in case the robot go haywire. Formally, Sanae can choose segment [ l, r] and assign a_ i = b_ i ( l\u2264 i\u2264 r ) if \u2211_ i= 1^ n a_ i does not change after the operation. Determine whether it is possible for Sanae to successfully turn the robot from the initial state a to the desired state b with any ( possibly, zero) operations.",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 2\u00b7 10^ 4 ) \u2014 the number of test cases. The descriptions of the test cases follow. The first line of each test case contains two integers n , m ( 2 \u2264 n\u2264 2\u00b7 10^ 5 , 1 \u2264 m\u2264 2\u00b7 10^ 5 ) \u2014 the length of a , b and the number of segments. The second line contains n intergers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the initial state a . The third line contains n intergers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 10^ 9 ) \u2014 the desired state b . Then m lines follow, the i - th line contains two intergers l_ i, r_ i ( 1 \u2264 l_ i < r_ i \u2264 n ) \u2014 the segments that can be copy- pasted by Sanae. It is guaranteed that both the sum of n and the sum of m over all test cases does not exceed 2 \u00b7 10 ^ 5 .",
    "output": "For each test case, print \" YES\" ( without quotes) if a can be turned into b , or \" NO\" ( without quotes) otherwise. You can output \" YES\" and \" NO\" in any case ( for example, strings \" yEs\" , \" yes\" and \" Yes\" will be recognized as a positive response) .",
    "note": "Test case 1: One possible way of turning a to b : First, select [ 1, 3] . After the operation, a= [ 3, 2, 5, 2, 3] . Then, select [ 2, 5] . After the operation, a= [ 3, 2, 5, 4, 1] = b . Test case 2: It can be shown that it is impossible to turn a into b .",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "dsu",
      "greedy",
      "sortings"
    ],
    "id": "1687C"
  },
  {
    "title": "The Ultimate LIS Problem",
    "url": "https://codeforces.com/problemset/problem/1685/E",
    "history": "It turns out that this is exactly the 100 - th problem of mine that appears in some programming competition. So it has to be special! And what can be more special than another problem about LIS. . . You are given a permutation p_ 1, p_ 2, . . . , p_ 2n+ 1 of integers from 1 to 2n+ 1 . You will have to process q updates, where the i - th update consists in swapping p_ u_ i, p_ v_ i . After each update, find any cyclic shift of p with LIS \u2264 n , or determine that there is no such shift. ( Refer to the output section for details) . Here LIS( a) denotes the length of longest strictly increasing subsequence of a . Hacks are disabled in this problem. Don' t ask why.",
    "input": "The first line of the input contains two integers n, q ( 2 \u2264 n \u2264 10^ 5 , 1 \u2264 q \u2264 10^ 5 ) . The second line of the input contains 2n+ 1 integers p_ 1, p_ 2, . . . , p_ 2n+ 1 ( 1 \u2264 p_ i \u2264 2n+ 1 , all p_ i are distinct) \u2014 the elements of p . The i - th of the next q lines contains two integers u_ i, v_ i ( 1 \u2264 u_ i, v_ i \u2264 2n+ 1 , u_ i = \u0338 v_ i ) \u2014 indicating that you have to swap elements p_ u_ i, p_ v_ i in the i - th update.",
    "output": "After each update, output any k ( 0 \u2264 k \u2264 2n) , such that the length of the longest increasing subsequence of ( p_ k+ 1, p_ k+ 2, . . . , p_ 2n+ 1, p_ 1, . . . , p_ k) doesn' t exceed n , or - 1 , if there is no such k .",
    "note": "After the first update, our permutation becomes ( 5, 2, 3, 4, 1) . We can show that all its cyclic shifts have LIS \u2265 3 . After the second update, our permutation becomes ( 1, 2, 3, 4, 5) . We can show that all its cyclic shifts have LIS \u2265 3 . After the third update, our permutation becomes ( 1, 2, 3, 5, 4) . Its shift by 2 is ( 3, 5, 4, 1, 2) , and its LIS = 2 . After the fourth update, our permutation becomes ( 1, 2, 3, 4, 5) . We can show that all its cyclic shifts have LIS \u2265 3 . After the fifth update, our permutation becomes ( 4, 2, 3, 1, 5) . Its shift by 4 is ( 5, 4, 2, 3, 1) , and its LIS = 2 . After the fifth update, our permutation becomes ( 4, 5, 3, 1, 2) . Its shift by 0 is ( 4, 5, 3, 1, 2) , and its LIS = 2 .",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "1685E"
  },
  {
    "title": "Diverse Segments",
    "url": "https://codeforces.com/problemset/problem/1684/F",
    "history": "You are given an array a of n integers. Also you are given m subsegments of that array. The left and the right endpoints of the j - th segment are l_ j and r_ j respectively. You are allowed to make no more than one operation. In that operation you choose any subsegment of the array a and replace each value on this segment with any integer ( you are also allowed to keep elements the same) . You have to apply this operation so that for the given m segments, the elements on each segment are distinct. More formally, for each 1 \u2264 j \u2264 m all elements a_ l_ j, a_ l_ j+ 1, . . . , a_ r_ j- 1, a_ r_ j should be distinct. You don' t want to use the operation on a big segment, so you have to find the smallest length of a segment, so that you can apply the operation to this segment and meet the above- mentioned conditions. If it is not needed to use this operation, the answer is 0 .",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains two integers n and m ( 1 \u2264 n, m \u2264 2 \u00b7 10^ 5 ) \u2014 the size of the array and the number of segments respectively. The next line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the elements of a . Each of the next m lines contains two integers l_ j , r_ j ( 1 \u2264 l_ j \u2264 r_ j \u2264 n ) \u2014 the left and the right endpoints of the j - th segment. It' s guaranteed that the sum of n and the sum of m over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case output a single integer \u2014 the smallest length of a segment you can apply an operation on making the elements on all given segments distinct. If it is not needed to use the operation, output 0 .",
    "note": "In the first test case you can perform the operation on the segment [ 1, 2] and make a = [ 5, 6, 2, 1, 3, 3, 5] . Then the elements on each segment are distinct. On the segment [ 1, 4] there are [ 5, 6, 2, 1] . On the segment [ 4, 5] there are [ 1, 3] . On the segment [ 2, 4] there are [ 6, 2, 1, 3] . This way on each of the given segments all elements are distinct. Also, it is impossible to change any single integer to make elements distinct on each segment. That is why the answer is 2 . In the second test case the elements on each segment are already distinct, so we should not perform the operation. In the third test case we can replace the first 5 by 1 . This way we will get [ 1, 7, 5, 6] where all elements are distinct so on each given segment all elements are distinct.",
    "topics": [
      "data structures",
      "two pointers"
    ],
    "id": "1684F"
  },
  {
    "title": "MEX vs DIFF",
    "url": "https://codeforces.com/problemset/problem/1684/E",
    "history": "You are given an array a of n non- negative integers. In one operation you can change any number in the array to any other non- negative integer. Let' s define the cost of the array as DIFF( a) - MEX( a) , where MEX of a set of non- negative integers is the smallest non- negative integer not present in the set, and DIFF is the number of different numbers in the array. For example, MEX( { 1, 2, 3} ) = 0 , MEX( { 0, 1, 2, 4, 5} ) = 3 . You should find the minimal cost of the array a if you are allowed to make at most k operations.",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains two integers n and k ( 1 \u2264 n \u2264 10^ 5 , 0 \u2264 k \u2264 10^ 5 ) \u2014 the length of the array a and the number of operations that you are allowed to make. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) \u2014 the elements of the array a . It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case output a single integer \u2014 minimal cost that it is possible to get making at most k operations.",
    "note": "In the first test case no operations are needed to minimize the value of DIFF - MEX . In the second test case it is possible to replace 5 by 1 . After that the array a is [ 0, 2, 4, 1] , DIFF = 4 , MEX = MEX( { 0, 1, 2, 4} ) = 3 , so the answer is 1 . In the third test case one possible array a is [ 4, 13, 0, 0, 13, 1, 2] , DIFF = 5 , MEX = 3 . In the fourth test case one possible array a is [ 1, 2, 3, 0, 0, 0] .",
    "topics": [
      "binary search",
      "brute force",
      "constructive algorithms",
      "data structures",
      "greedy",
      "two pointers"
    ],
    "id": "1684E"
  },
  {
    "title": "MCMF?",
    "url": "https://codeforces.com/problemset/problem/1682/F",
    "history": "You are given two integer arrays a and b ( b_ i = \u0338 0 and | b_ i| \u2264 10^ 9 ) . Array a is sorted in non- decreasing order. The cost of a subarray a[ l: r] is defined as follows: If \u2211_ j = l^ r b_ j = \u0338 0 , then the cost is not defined. Otherwise: Construct a bipartite flow graph with r- l+ 1 vertices, labeled from l to r , with all vertices having b_ i 0 on the left and those with b_ i 0 on right. For each i, j such that l \u2264 i, j \u2264 r , b_ i< 0 and b_ j> 0 , draw an edge from i to j with infinite capacity and cost of unit flow as | a_ i- a_ j| . Add two more vertices: source S and sink T . For each i such that l \u2264 i \u2264 r and b_ i< 0 , add an edge from S to i with cost 0 and capacity | b_ i| . For each i such that l \u2264 i \u2264 r and b_ i> 0 , add an edge from i to T with cost 0 and capacity | b_ i| . The cost of the subarray is then defined as the minimum cost of maximum flow from S to T . You are given q queries in the form of two integers l and r . You have to compute the cost of subarray a[ l: r] for each query, modulo 10^ 9 + 7 . If you don' t know what the minimum cost of maximum flow means, read here.",
    "input": "The first line of input contains two integers n and q ( 2 \u2264 n \u2264 2\u00b7 10^ 5, 1 \u2264 q \u2264 2\u00b710^ 5) \u2014 length of arrays a , b and the number of queries. The next line contains n integers a_ 1, a_ 2 . . . a_ n ( 0 \u2264 a_ 1 \u2264 a_ 2 . . . \u2264 a_ n \u2264 10^ 9) \u2014 the array a . It is guaranteed that a is sorted in non- decreasing order. The next line contains n integers b_ 1, b_ 2 . . . b_ n ( - 10^ 9\u2264 b_ i \u2264 10^ 9, b_ i = \u0338 0) \u2014 the array b . The i - th of the next q lines contains two integers l_ i, r_ i ( 1\u2264 l_ i \u2264 r_ i \u2264 n) . It is guaranteed that \u2211_ j = l_ i^ r_ i b_ j = 0 .",
    "output": "For each query l_ i , r_ i \u2014 print the cost of subarray a[ l_ i: r_ i] modulo 10^ 9 + 7 .",
    "note": "In the first query, the maximum possible flow is 1 i. e one unit from source to 2 , then one unit from 2 to 3 , then one unit from 3 to sink. The cost of the flow is 0 \u00b7 1 + | 2 - 4| \u00b7 1 + 0 \u00b7 1 = 2 . In the second query, the maximum possible flow is again 1 i. e from source to 7 , 7 to 6 , and 6 to sink with a cost of 0 \u00b7 | 10 - 10| \u00b7 1 + 0 \u00b7 1 = 0 . In the third query, the flow network is shown on the left with capacity written over the edge and the cost written in bracket. The image on the right shows the flow through each edge in an optimal configuration. Maximum flow is 3 with a cost of 0 \u00b7 3 + 1 \u00b7 1 + 4 \u00b7 2 + 0 \u00b7 1 + 0 \u00b7 2 = 9 . In the fourth query, the flow network looks as \u2013 The minimum cost maximum flow is achieved in the configuration \u2013 The maximum flow in the above network is 4 and the minimum cost of such flow is 15.",
    "topics": [
      "data structures",
      "flows",
      "graphs",
      "greedy",
      "sortings",
      "two pointers"
    ],
    "id": "1682F"
  },
  {
    "title": "Unique Occurrences",
    "url": "https://codeforces.com/problemset/problem/1681/F",
    "history": "You are given a tree, consisting of n vertices. Each edge has an integer value written on it. Let f( v, u) be the number of values that appear exactly once on the edges of a simple path between vertices v and u . Calculate the sum of f( v, u) over all pairs of vertices v and u such that 1 \u2264 v < u \u2264 n .",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 5 \u00b7 10^ 5 ) \u2014 the number of vertices in the tree. Each of the next n- 1 lines contains three integers v, u and x ( 1 \u2264 v, u, x \u2264 n ) \u2014 the description of an edge: the vertices it connects and the value written on it. The given edges form a tree.",
    "output": "Print a single integer \u2014 the sum of f( v, u) over all pairs of vertices v and u such that v < u .",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "divide and conquer",
      "dp",
      "dsu",
      "trees"
    ],
    "id": "1681F"
  },
  {
    "title": "Labyrinth Adventures",
    "url": "https://codeforces.com/problemset/problem/1681/E",
    "history": "You found a map of a weirdly shaped labyrinth. The map is a grid, consisting of n rows and n columns. The rows of the grid are numbered from 1 to n from bottom to top. The columns of the grid are numbered from 1 to n from left to right. The labyrinth has n layers. The first layer is the bottom left corner ( cell ( 1, 1) ) . The second layer consists of all cells that are in the grid and adjacent to the first layer by a side or a corner. The third layer consists of all cells that are in the grid and adjacent to the second layer by a side or a corner. And so on. The labyrinth with 5 layers, for example, is shaped as follows: The layers are separated from one another with walls. However, there are doors in these walls. Each layer ( except for layer n ) has exactly two doors to the next layer. One door is placed on the top wall of the layer and another door is placed on the right wall of the layer. For each layer from 1 to n- 1 you are given positions of these two doors. The doors can be passed in both directions: either from layer i to layer i+ 1 or from layer i+ 1 to layer i . If you are standing in some cell, you can move to an adjacent by a side cell if a wall doesn' t block your move ( e. g. you can' t move to a cell in another layer if there is no door between the cells) . Now you have m queries of sort: what' s the minimum number of moves one has to make to go from cell ( x_ 1, y_ 1) to cell ( x_ 2, y_ 2) .",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 10^ 5 ) \u2014 the number of layers in the labyrinth. The i - th of the next n- 1 lines contains four integers d_ 1, x, d_ 1, y, d_ 2, x and d_ 2, y ( 1 \u2264 d_ 1, x, d_ 1, y, d_ 2, x, d_ 2, y\u2264 n ) \u2014 the coordinates of the doors. Both cells are on the i - th layer. The first cell is adjacent to the top wall of the i - th layer by a side \u2014 that side is where the door is. The second cell is adjacent to the right wall of the i - th layer by a side \u2014 that side is where the door is. The next line contains a single integer m ( 1 \u2264 m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of queries. The j - th of the next m lines contains four integers x_ 1, y_ 1, x_ 2 and y_ 2 ( 1 \u2264 x_ 1, y_ 1, x_ 2, y_ 2 \u2264 n ) \u2014 the coordinates of the cells in the j - th query.",
    "output": "For each query, print a single integer \u2014 the minimum number of moves one has to make to go from cell ( x_ 1, y_ 1) to cell ( x_ 2, y_ 2) .",
    "note": "Here is the map of the labyrinth from the second example. The doors are marked red.",
    "topics": [
      "data structures",
      "dp",
      "matrices",
      "shortest paths"
    ],
    "id": "1681E"
  },
  {
    "title": "Rooks Defenders",
    "url": "https://codeforces.com/problemset/problem/1679/C",
    "history": "You have a square chessboard of size n \u00d7 n . Rows are numbered from top to bottom with numbers from 1 to n , and columns \u2014 from left to right with numbers from 1 to n . So, each cell is denoted with pair of integers ( x, y) ( 1 \u2264 x, y \u2264 n ) , where x is a row number and y is a column number. You have to perform q queries of three types: Put a new rook in cell ( x, y) . Remove a rook from cell ( x, y) . It' s guaranteed that the rook was put in this cell before. Check if each cell of subrectangle ( x_ 1, y_ 1) - ( x_ 2, y_ 2) of the board is attacked by at least one rook. Subrectangle is a set of cells ( x, y) such that for each cell two conditions are satisfied: x_ 1 \u2264 x \u2264 x_ 2 and y_ 1 \u2264 y \u2264 y_ 2 . Recall that cell ( a, b) is attacked by a rook placed in cell ( c, d) if either a = c or b = d . In particular, the cell containing a rook is attacked by this rook.",
    "input": "The first line contains two integers n and q ( 1 \u2264 n \u2264 10^ 5 , 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) \u2014 the size of the chessboard and the number of queries, respectively. Each of the following q lines contains description of a query. Description begins with integer t ( t \u2208{ 1, 2, 3} ) which denotes type of a query: If t = 1 , two integers x and y follows ( 1 \u2264 x, y \u2264 n ) \u2014 coordinated of the cell where the new rook should be put in. It' s guaranteed that there is no rook in the cell ( x, y) at the moment of the given query. If t = 2 , two integers x and y follows ( 1 \u2264 x, y \u2264 n ) \u2014 coordinates of the cell to remove a rook from. It' s guaranteed that there is a rook in the cell ( x, y) at the moment of the given query. If t = 3 , four integers x_ 1, y_ 1, x_ 2 and y_ 2 follows ( 1 \u2264 x_ 1 \u2264 x_ 2 \u2264 n , 1 \u2264 y_ 1 \u2264 y_ 2 \u2264 n ) \u2014 subrectangle to check if each cell of it is attacked by at least one rook. It' s guaranteed that among q queries there is at least one query of the third type.",
    "output": "Print the answer for each query of the third type in a separate line. Print \" Yes\" ( without quotes) if each cell of the subrectangle is attacked by at least one rook. Otherwise print \" No\" ( without quotes) .",
    "note": "Consider example. After the first two queries the board will look like the following picture ( the letter R denotes cells in which rooks are located, the subrectangle of the query of the third type is highlighted in green) : Chessboard after performing the third and the fourth queries: Chessboard after performing the fifth and the sixth queries: Chessboard after performing the seventh and the eighth queries: Chessboard after performing the last two queries:",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "1679C"
  },
  {
    "title": "Stone Age Problem",
    "url": "https://codeforces.com/problemset/problem/1679/B",
    "history": "Once upon a time Mike and Mike decided to come up with an outstanding problem for some stage of ROI ( rare olympiad in informatics) . One of them came up with a problem prototype but another stole the idea and proposed that problem for another stage of the same olympiad. Since then the first Mike has been waiting for an opportunity to propose the original idea for some other contest. . . Mike waited until this moment! You are given an array a of n integers. You are also given q queries of two types: Replace i - th element in the array with integer x . Replace each element in the array with integer x . After performing each query you have to calculate the sum of all elements in the array.",
    "input": "The first line contains two integers n and q ( 1 \u2264 n, q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of elements in the array and the number of queries, respectively. The second line contains n integers a_ 1, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 elements of the array a . Each of the following q lines contains a description of the corresponding query. Description begins with integer t ( t \u2208{ 1, 2} ) which denotes a type of the query: If t = 1 , then two integers i and x are following ( 1 \u2264 i \u2264 n , 1 \u2264 x \u2264 10^ 9 ) \u2014 position of replaced element and it' s new value. If t = 2 , then integer x is following ( 1 \u2264 x \u2264 10^ 9 ) \u2014 new value of each element in the array.",
    "output": "Print q integers, each on a separate line. In the i - th line print the sum of all elements in the array after performing the first i queries.",
    "note": "Consider array from the example and the result of performing each query: Initial array is [ 1, 2, 3, 4, 5] . After performing the first query, array equals to [ 5, 2, 3, 4, 5] . The sum of all elements is 19 . After performing the second query, array equals to [ 10, 10, 10, 10, 10] . The sum of all elements is 50 . After performing the third query, array equals to [ 10, 10, 10, 10, 11 ] . The sum of all elements is 51 . After performing the fourth query, array equals to [ 10, 10, 10, 1, 11] . The sum of all elements is 42 . After performing the fifth query, array equals to [ 1, 1, 1, 1, 1] . The sum of all elements is 5 .",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "1679B"
  },
  {
    "title": "Tokitsukaze and Beautiful Subsegments",
    "url": "https://codeforces.com/problemset/problem/1677/E",
    "history": "Tokitsukaze has a permutation p of length n . Let' s call a segment [ l, r] beautiful if there exist i and j satisfying p_ i \u00b7 p_ j = max{ p_ l, p_ l+ 1, . . . , p_ r } , where l \u2264 i < j \u2264 r . Now Tokitsukaze has q queries, in the i - th query she wants to know how many beautiful subsegments [ x, y] there are in the segment [ l_ i, r_ i] ( i. e. l_ i \u2264 x \u2264 y \u2264 r_ i ) .",
    "input": "The first line contains two integers n and q ( 1\u2264 n \u2264 2 \u00b7 10^ 5 ; 1 \u2264 q \u2264 10^ 6 ) \u2014 the length of permutation p and the number of queries. The second line contains n distinct integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) \u2014 the permutation p . Each of the next q lines contains two integers l_ i and r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 n ) \u2014 the segment [ l_ i, r_ i] of this query.",
    "output": "For each query, print one integer \u2014 the numbers of beautiful subsegments in the segment [ l_ i, r_ i] .",
    "note": "In the first example, for the first query, there are 2 beautiful subsegments \u2014 [ 1, 2] and [ 1, 3] .",
    "topics": [
      "data structures"
    ],
    "id": "1677E"
  },
  {
    "title": "Tokitsukaze and Meeting",
    "url": "https://codeforces.com/problemset/problem/1677/B",
    "history": "Tokitsukaze is arranging a meeting. There are n rows and m columns of seats in the meeting hall. There are exactly n \u00b7 m students attending the meeting, including several naughty students and several serious students. The students are numerated from 1 to n\u00b7 m . The students will enter the meeting hall in order. When the i - th student enters the meeting hall, he will sit in the 1 - st column of the 1 - st row, and the students who are already seated will move back one seat. Specifically, the student sitting in the j - th ( 1\u2264 j \u2264 m- 1 ) column of the i - th row will move to the ( j+ 1) - th column of the i - th row, and the student sitting in m - th column of the i - th row will move to the 1 - st column of the ( i+ 1) - th row. For example, there is a meeting hall with 2 rows and 2 columns of seats shown as below: There will be 4 students entering the meeting hall in order, represented as a binary string \" 1100\" , of which ' 0' represents naughty students and ' 1' represents serious students. The changes of seats in the meeting hall are as follows: Denote a row or a column good if and only if there is at least one serious student in this row or column. Please predict the number of good rows and columns just after the i - th student enters the meeting hall, for all i .",
    "input": "The first contains a single positive integer t ( 1 \u2264 t \u2264 10 000 ) \u2014 the number of test cases. For each test case, the first line contains two integers n , m ( 1 \u2264 n, m \u2264 10^ 6 ; 1 \u2264 n \u00b7 m \u2264 10^ 6 ) , denoting there are n rows and m columns of seats in the meeting hall. The second line contains a binary string s of length n \u00b7 m , consisting only of zeros and ones. If s_ i equal to ' 0' represents the i - th student is a naughty student, and s_ i equal to ' 1' represents the i - th student is a serious student. It is guaranteed that the sum of n \u00b7 m over all test cases does not exceed 10^ 6 .",
    "output": "For each test case, print a single line with n \u00b7 m integers \u2014 the number of good rows and columns just after the i - th student enters the meeting hall.",
    "note": "The first test case is shown in the statement. After the 1 - st student enters the meeting hall, there are 2 good rows and columns: the 1 - st row and the 1 - st column. After the 2 - nd student enters the meeting hall, there are 3 good rows and columns: the 1 - st row, the 1 - st column and the 2 - nd column. After the 3 - rd student enters the meeting hall, the 4 rows and columns are all good. After the 4 - th student enters the meeting hall, there are 3 good rows and columns: the 2 - nd row, the 1 - st column and the 2 - nd column.",
    "topics": [
      "data structures",
      "implementation",
      "math"
    ],
    "id": "1677B"
  },
  {
    "title": "Tokitsukaze and Strange Inequality",
    "url": "https://codeforces.com/problemset/problem/1677/A",
    "history": "Tokitsukaze has a permutation p of length n . Recall that a permutation p of length n is a sequence p_ 1, p_ 2, . . . , p_ n consisting of n distinct integers, each of which from 1 to n ( 1 \u2264 p_ i \u2264 n ) . She wants to know how many different indices tuples [ a, b, c, d] ( 1 \u2264 a < b < c < d \u2264 n ) in this permutation satisfy the following two inequalities: p_ a < p_ c and p_ b > p_ d . Note that two tuples [ a_ 1, b_ 1, c_ 1, d_ 1] and [ a_ 2, b_ 2, c_ 2, d_ 2] are considered to be different if a_ 1 a_ 2 or b_ 1 b_ 2 or c_ 1 c_ 2 or d_ 1 d_ 2 .",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Each test case consists of two lines. The first line contains a single integer n ( 4 \u2264 n \u2264 5000 ) \u2014 the length of permutation p . The second line contains n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) \u2014 the permutation p . It is guaranteed that the sum of n over all test cases does not exceed 5000 .",
    "output": "For each test case, print a single integer \u2014 the number of different [ a, b, c, d] tuples.",
    "note": "In the first test case, there are 3 different [ a, b, c, d] tuples. p_ 1 = 5 , p_ 2 = 3 , p_ 3 = 6 , p_ 4 = 1 , where p_ 1 < p_ 3 and p_ 2 > p_ 4 satisfies the inequality, so one of [ a, b, c, d] tuples is [ 1, 2, 3, 4] . Similarly, other two tuples are [ 1, 2, 3, 6] , [ 2, 3, 5, 6] .",
    "topics": [
      "brute force",
      "data structures",
      "dp"
    ],
    "id": "1677A"
  },
  {
    "title": "Maximum Crossings (Hard Version)",
    "url": "https://codeforces.com/problemset/problem/1676/H2",
    "history": "The only difference between the two versions is that in this version n \u2264 2 \u00b7 10^ 5 and the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 . A terminal is a row of n equal segments numbered 1 to n in order. There are two terminals, one above the other. You are given an array a of length n . For all i = 1, 2, . . . , n , there should be a straight wire from some point on segment i of the top terminal to some point on segment a_ i of the bottom terminal. You can' t select the endpoints of a segment. For example, the following pictures show two possible wirings if n= 7 and a= [ 4, 1, 4, 6, 7, 7, 5] . A crossing occurs when two wires share a point in common. In the picture above, crossings are circled in red. What is the maximum number of crossings there can be if you place the wires optimally?",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the array. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 the elements of the array. The sum of n across all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output a single integer \u2014 the maximum number of crossings there can be if you place the wires optimally.",
    "note": "The first test case is shown in the second picture in the statement. In the second test case, the only wiring possible has the two wires cross, so the answer is 1 . In the third test case, the only wiring possible has one wire, so the answer is 0 .",
    "topics": [
      "data structures",
      "divide and conquer",
      "sortings"
    ],
    "id": "1676H2"
  },
  {
    "title": "Longest Strike",
    "url": "https://codeforces.com/problemset/problem/1676/F",
    "history": "Given an array a of length n and an integer k , you are tasked to find any two numbers l and r ( l \u2264 r ) such that: For each x ( l \u2264 x \u2264 r) , x appears in a at least k times ( i. e. k or more array elements are equal to x ) . The value r- l is maximized. If no numbers satisfy the conditions, output - 1. For example, if a= [ 11, 11, 12, 13, 13, 14, 14] and k= 2 , then: for l= 12 , r= 14 the first condition fails because 12 does not appear at least k= 2 times. for l= 13 , r= 14 the first condition holds, because 13 occurs at least k= 2 times in a and 14 occurs at least k= 2 times in a . for l= 11 , r= 11 the first condition holds, because 11 occurs at least k= 2 times in a . A pair of l and r for which the first condition holds and r- l is maximal is l = 13 , r = 14 .",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains the integers n and k ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 k \u2264 n ) \u2014 the length of the array a and the minimum amount of times each number in the range [ l, r] should appear respectively. Then a single line follows, containing n integers describing the array a ( 1 \u2264 a_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case output 2 numbers, l and r that satisfy the conditions, or \" - 1\" if no numbers satisfy the conditions. If multiple answers exist, you can output any.",
    "note": "",
    "topics": [
      "data structures",
      "greedy",
      "implementation",
      "sortings",
      "two pointers"
    ],
    "id": "1676F"
  },
  {
    "title": "Desktop Rearrangement",
    "url": "https://codeforces.com/problemset/problem/1674/F",
    "history": "Your friend Ivan asked you to help him rearrange his desktop. The desktop can be represented as a rectangle matrix of size n \u00d7 m consisting of characters ' . ' ( empty cell of the desktop) and ' * ' ( an icon) . The desktop is called good if all its icons are occupying some prefix of full columns and, possibly, the prefix of the next column ( and there are no icons outside this figure) . In other words, some amount of first columns will be filled with icons and, possibly, some amount of first cells of the next ( after the last full column) column will be also filled with icons ( and all the icons on the desktop belong to this figure) . This is pretty much the same as the real life icons arrangement. In one move, you can take one icon and move it to any empty cell in the desktop. Ivan loves to add some icons to his desktop and remove them from it, so he is asking you to answer q queries: what is the minimum number of moves required to make the desktop good after adding/ removing one icon? Note that queries are permanent and change the state of the desktop.",
    "input": "The first line of the input contains three integers n , m and q ( 1 \u2264 n, m \u2264 1000; 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of rows in the desktop, the number of columns in the desktop and the number of queries, respectively. The next n lines contain the description of the desktop. The i - th of them contains m characters ' . ' and ' * ' \u2014 the description of the i - th row of the desktop. The next q lines describe queries. The i - th of them contains two integers x_ i and y_ i ( 1 \u2264 x_ i \u2264 n; 1 \u2264 y_ i \u2264 m ) \u2014 the position of the cell which changes its state ( if this cell contained the icon before, then this icon is removed, otherwise an icon appears in this cell) .",
    "output": "Print q integers. The i - th of them should be the minimum number of moves required to make the desktop good after applying the first i queries.",
    "note": "",
    "topics": [
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "1674F"
  },
  {
    "title": "PermutationForces",
    "url": "https://codeforces.com/problemset/problem/1672/I",
    "history": "You have a permutation p of integers from 1 to n . You have a strength of s and will perform the following operation some times: Choose an index i such that 1 \u2264 i \u2264 | p| and | i- p_ i| \u2264 s . For all j such that 1 \u2264 j \u2264 | p| and p_ i< p_ j , update p_ j to p_ j- 1 . Delete the i - th element from p . Formally, update p to [ p_ 1, . . . , p_ i- 1, p_ i+ 1, . . . , p_ n] . It can be shown that no matter what i you have chosen, p will be a permutation of integers from 1 to | p| after all operations. You want to be able to transform p into the empty permutation. Find the minimum strength s that will allow you to do so.",
    "input": "The first line of input contains a single integer n ( 1 \u2264 n \u2264 5 \u00b7 10^ 5 ) \u2014 the length of the permutation p . The second line of input conatains n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) \u2014 the elements of the permutation p . It is guaranteed that all elements in p are distinct.",
    "output": "Print the minimum strength s required.",
    "note": "In the first test case, the minimum s required is 1 . Here is how we can transform p into the empty permutation with s= 1 : In the first move, you can only choose i= 2 as choosing any other value of i will result in | i- p_ i| \u2264 s being false. With i= 2 , p will be changed to [ 2, 1] . In the second move, you choose i= 1 , then p will be changed to [ 1] . In the third move, you choose i= 1 , then p will be changed to [ ] . It can be shown that with s= 0 , it is impossible to transform p into the empty permutation.",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "1672I"
  },
  {
    "title": "Zigu Zagu",
    "url": "https://codeforces.com/problemset/problem/1672/H",
    "history": "You have a binary string a of length n consisting only of digits 0 and 1 . You are given q queries. In the i - th query, you are given two indices l and r such that 1 \u2264 l \u2264 r \u2264 n . Let s= a[ l, r] . You are allowed to do the following operation on s : Choose two indices x and y such that 1 \u2264 x \u2264 y \u2264 | s| . Let t be the substring t = s[ x, y] . Then for all 1 \u2264 i \u2264 | t| - 1 , the condition t_ i = \u0338 t_ i+ 1 has to hold. Note that x = y is always a valid substring. Delete the substring s[ x, y] from s . For each of the q queries, find the minimum number of operations needed to make s an empty string. Note that for a string s , s[ l, r] denotes the subsegment s_ l, s_ l+ 1, . . . , s_ r .",
    "input": "The first line contains two integers n and q ( 1 \u2264 n, q \u2264 2 \u00b7 10 ^ 5 ) \u2014 the length of the binary string a and the number of queries respectively. The second line contains a binary string a of length n ( a_ i \u2208{ 0, 1} ) . Each of the next q lines contains two integers l and r ( 1 \u2264 l \u2264 r \u2264 n ) \u2014 representing the substring of each query.",
    "output": "Print q lines, the i - th line representing the minimum number of operations needed for the i - th query.",
    "note": "In the first test case, The substring is , so we can do one operation to make the substring empty. The substring is , so we can do one operation on s[ 2, 4] to make , then use two more operations to make the substring empty. The substring is , so we can do one operation on s[ 1, 2] to make , then use one more operation to make the substring empty.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy"
    ],
    "id": "1672H"
  },
  {
    "title": "Where is the Pizza?",
    "url": "https://codeforces.com/problemset/problem/1670/C",
    "history": "While searching for the pizza, baby Hosssam came across two permutations a and b of length n . Recall that a permutation is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [ 2, 3, 1, 5, 4] is a permutation, but [ 1, 2, 2] is not a permutation ( 2 appears twice in the array) and [ 1, 3, 4] is also not a permutation ( n= 3 but there is 4 in the array) . Baby Hosssam forgot about the pizza and started playing around with the two permutations. While he was playing with them, some elements of the first permutation got mixed up with some elements of the second permutation, and to his surprise those elements also formed a permutation of size n . Specifically, he mixed up the permutations to form a new array c in the following way. For each i ( 1\u2264 i\u2264 n ) , he either made c_ i= a_ i or c_ i= b_ i . The array c is a permutation. You know permutations a , b , and values at some positions in c . Please count the number different permutations c that are consistent with the described process and the given values. Since the answer can be large, print it modulo 10^ 9+ 7 . It is guaranteed that there exists at least one permutation c that satisfies all the requirements.",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1\u2264 n\u2264 10^ 5 ) \u2014 the length of the permutations. The next line contains n distinct integers a_ 1, a_ 2, . . . , a_ n ( 1\u2264 a_ i\u2264 n ) \u2014 the first permutation. The next line contains n distinct integers b_ 1, b_ 2, . . . , b_ n ( 1\u2264 b_ i\u2264 n ) \u2014 the second permutation. The next line contains n distinct integers d_ 1, d_ 2, . . . , d_ n ( d_ i is either 0 , a_ i , or b_ i ) \u2014 the description of the known values of c . If d_ i= 0 , then there are no requirements on the value of c_ i . Otherwise, it is required that c_ i= d_ i . It is guaranteed that there exists at least one permutation c that satisfies all the requirements. It is guaranteed that the sum of n over all test cases does not exceed 5 \u00b7 10^ 5 .",
    "output": "For each test case, print the number of possible permutations c , modulo 10^ 9+ 7 .",
    "note": "In the first test case, there are 4 distinct permutation that can be made using the process: [ 2, 3, 1, 4, 5, 6, 7] , [ 2, 3, 1, 7, 6, 5, 4] , [ 2, 3, 1, 4, 6, 5, 7] , [ 2, 3, 1, 7, 5, 6, 4] . In the second test case, there is only one distinct permutation that can be made using the process: [ 1] . In the third test case, there are 2 distinct permutation that can be made using the process: [ 6, 5, 2, 1, 4, 3] , [ 6, 5, 3, 1, 4, 2] . In the fourth test case, there are 2 distinct permutation that can be made using the process: [ 1, 2, 8, 7, 4, 3, 6, 5] , [ 1, 6, 4, 7, 2, 3, 8, 5] . In the fifth test case, there is only one distinct permutation that can be made using the process: [ 1, 9, 2, 3, 4, 10, 8, 6, 7, 5] .",
    "topics": [
      "data structures",
      "dfs and similar",
      "dsu",
      "graphs",
      "implementation",
      "math"
    ],
    "id": "1670C"
  },
  {
    "title": "Eating Candies",
    "url": "https://codeforces.com/problemset/problem/1669/F",
    "history": "There are n candies put from left to right on a table. The candies are numbered from left to right. The i - th candy has weight w_ i . Alice and Bob eat candies. Alice can eat any number of candies from the left ( she can' t skip candies, she eats them in a row) . Bob can eat any number of candies from the right ( he can' t skip candies, he eats them in a row) . Of course, if Alice ate a candy, Bob can' t eat it ( and vice versa) . They want to be fair. Their goal is to eat the same total weight of candies. What is the most number of candies they can eat in total?",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 2\u00b710^ 5 ) \u2014 the number of candies on the table. The second line of each test case contains n integers w_ 1, w_ 2, . . . , w_ n ( 1 \u2264 w_ i \u2264 10^ 4 ) \u2014 the weights of candies from left to right. It is guaranteed that the sum of n over all test cases does not exceed 2\u00b710^ 5 .",
    "output": "For each test case, print a single integer \u2014 the maximum number of candies Alice and Bob can eat in total while satisfying the condition.",
    "note": "For the first test case, Alice will eat one candy from the left and Bob will eat one candy from the right. There is no better way for them to eat the same total amount of weight. The answer is 2 because they eat two candies in total. For the second test case, Alice will eat the first three candies from the left ( with total weight 7 ) and Bob will eat the first three candies from the right ( with total weight 7 ) . They cannot eat more candies since all the candies have been eaten, so the answer is 6 ( because they eat six candies in total) . For the third test case, there is no way Alice and Bob will eat the same non- zero weight so the answer is 0 . For the fourth test case, Alice will eat candies with weights [ 7, 3, 20] and Bob will eat candies with weights [ 10, 8, 11, 1] , they each eat 30 weight. There is no better partition so the answer is 7 .",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "two pointers"
    ],
    "id": "1669F"
  },
  {
    "title": "2-Letter Strings",
    "url": "https://codeforces.com/problemset/problem/1669/E",
    "history": "Given n strings, each of length 2 , consisting of lowercase Latin alphabet letters from ' a' to ' k' , output the number of pairs of indices ( i, j) such that i < j and the i - th string and the j - th string differ in exactly one position. In other words, count the number of pairs ( i, j) ( i < j ) such that the i - th string and the j - th string have exactly one position p ( 1 \u2264 p \u2264 2 ) such that s_ i_ p= \u0338s_ j_ p . The answer may not fit into 32- bit integer type, so you should use 64- bit integers like long long in C+ + to avoid integer overflow.",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of strings. Then follows n lines, the i - th of which containing a single string s_ i of length 2 , consisting of lowercase Latin letters from ' a' to ' k' . It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, print a single integer \u2014 the number of pairs ( i, j) ( i < j ) such that the i - th string and the j - th string have exactly one position p ( 1 \u2264 p \u2264 2 ) such that s_ i_ p= \u0338s_ j_ p . Please note, that the answer for some test cases won' t fit into 32- bit integer type, so you should use at least 64- bit integer type in your programming language ( like long long for C+ + ) .",
    "note": "For the first test case the pairs that differ in exactly one position are: ( \" ab\" , \" cb\" ) , ( \" ab\" , \" db\" ) , ( \" ab\" , \" aa\" ) , ( \" cb\" , \" db\" ) and ( \" cb\" , \" cc\" ) . For the second test case the pairs that differ in exactly one position are: ( \" aa\" , \" ac\" ) , ( \" aa\" , \" ca\" ) , ( \" cc\" , \" ac\" ) , ( \" cc\" , \" ca\" ) , ( \" ac\" , \" aa\" ) and ( \" ca\" , \" aa\" ) . For the third test case, the are no pairs satisfying the conditions.",
    "topics": [
      "data structures",
      "math",
      "strings"
    ],
    "id": "1669E"
  },
  {
    "title": "Optimal Partition",
    "url": "https://codeforces.com/problemset/problem/1667/B",
    "history": "You are given an array a consisting of n integers. You should divide a into continuous non- empty subarrays ( there are 2^ n- 1 ways to do that) . Let s= a_ l+ a_ l+ 1+ . . . + a_ r . The value of a subarray a_ l, a_ l+ 1, . . . , a_ r is: ( r- l+ 1) if s> 0 , 0 if s= 0 , - ( r- l+ 1) if s< 0 . What is the maximum sum of values you can get with a partition?",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 5 \u00b7 10^ 5 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 5 \u00b7 10^ 5 ) . The second line of each test case contains n integers a_ 1 , a_ 2 , . . . , a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n over all test cases does not exceed 5 \u00b7 10^ 5 .",
    "output": "For each test case print a single integer \u2014 the maximum sum of values you can get with an optimal parition.",
    "note": "Test case 1 : one optimal partition is [ 1, 2] , [ - 3] . 1+ 2> 0 so the value of [ 1, 2] is 2 . - 3< 0 , so the value of [ - 3] is - 1 . 2+ ( - 1) = 1 . Test case 2 : the optimal partition is [ 0, - 2, 3] , [ - 4] , and the sum of values is 3+ ( - 1) = 2 .",
    "topics": [
      "data structures",
      "dp"
    ],
    "id": "1667B"
  },
  {
    "title": "MinimizOR",
    "url": "https://codeforces.com/problemset/problem/1665/E",
    "history": "You are given an array a of n non- negative integers, numbered from 1 to n . Let' s define the cost of the array a as min_ i = \u0338 j a_ i | a_ j , where | denotes the bitwise OR operation. There are q queries. For each query you are given two integers l and r ( l < r ) . For each query you should find the cost of the subarray a_ l, a_ l + 1, . . . , a_ r .",
    "input": "Each test case consists of several test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains an integer n ( 2 \u2264 n \u2264 10^ 5 ) \u2014 the length array a . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i < 2^ 30 ) \u2014 the elements of a . The third line of each test case contains an integer q ( 1 \u2264 q \u2264 10^ 5 ) \u2014 the number of queries. Each of the next q lines contains two integers l_ j , r_ j ( 1 \u2264 l_ j < r_ j \u2264 n ) \u2014 the description of the j - th query. It is guaranteed that the sum of n and the sum of q over all test cases do not exceed 10^ 5 .",
    "output": "For each test case print q numbers, where the j - th number is the cost of array a_ l_ j, a_ l_ j + 1, . . . , a_ r_ j .",
    "note": "In the first test case the array a is 110_ 2, 001_ 2, 011_ 2, 010_ 2, 001_ 2 . That' s why the answers for the queries are: [ 1; 2] : a_ 1 | a_ 2 = 110_ 2 | 001_ 2 = 111_ 2 = 7 ; [ 2; 3] : a_ 2 | a_ 3 = 001_ 2 | 011_ 2 = 011_ 2 = 3 ; [ 2; 4] : a_ 2 | a_ 3 = a_ 3 | a_ 4 = a_ 2 | a_ 4 = 011_ 2 = 3 ; [ 2; 5] : a_ 2 | a_ 5 = 001_ 2 = 1 . In the second test case the array a is 00_ 2, 10_ 2, 01_ 2, 11. . . 1_ 2_ 30 ( a_ 4 = 2^ 30 - 1 ) . That' s why the answers for the queries are: [ 1; 2] : a_ 1 | a_ 2 = 10_ 2 = 2 ; [ 2; 3] : a_ 2 | a_ 3 = 11_ 2 = 3 ; [ 1; 3] : a_ 1 | a_ 3 = 01_ 2 = 1 ; [ 3; 4] : a_ 3 | a_ 4 = 01_ 2 | 11. . . 1_ 2_ 30 = 2^ 30 - 1 = 1073741823 .",
    "topics": [
      "bitmasks",
      "brute force",
      "data structures",
      "divide and conquer",
      "greedy",
      "implementation",
      "two pointers"
    ],
    "id": "1665E"
  },
  {
    "title": "Il Derby della Madonnina",
    "url": "https://codeforces.com/problemset/problem/1662/L",
    "history": "The derby between Milan and Inter is happening soon, and you have been chosen as the assistant referee for the match, also known as linesman. Your task is to move along the touch- line, namely the side of the field, always looking very carefully at the match to check for offside positions and other offences. Football is an extremely serious matter in Italy, and thus it is fundamental that you keep very close track of the ball for as much time as possible. This means that you want to maximise the number of kicks which you monitor closely. You are able to monitor closely a kick if, when it happens, you are in the position along the touch- line with minimum distance from the place where the kick happens. Fortunately, expert analysts have been able to accurately predict all the kicks which will occur during the game. That is, you have been given two lists of integers, t_ 1, . . . , t_ n and a_ 1, . . . , a_ n , indicating that t_ i seconds after the beginning of the match the ball will be kicked and you can monitor closely such kick if you are at the position a_ i along the touch- line. At the beginning of the game you start at position 0 and the maximum speed at which you can walk along the touch- line is v units per second ( i. e. , you can change your position by at most v each second) . What is the maximum number of kicks that you can monitor closely?",
    "input": "The first line contains two integers n and v ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 v \u2264 10^ 6 ) \u2014 the number of kicks that will take place and your maximum speed. The second line contains n integers t_ 1, . . . , t_ n ( 1 \u2264 t_ i \u2264 10^ 9 ) \u2014 the times of the kicks in the match. The sequence of times is guaranteed to be strictly increasing, i. e. , t_ 1 < t_ 2 < \u22ef < t_ n . The third line contains n integers a_ 1, . . . , a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) \u2014 the positions along the touch- line where you have to be to monitor closely each kick.",
    "output": "Print the maximum number of kicks that you can monitor closely.",
    "note": "In the first sample, it is possible to move to the right at maximum speed for the first 3. 5 seconds and stay at position 7 until the first kick happens, and then immediately move right also at maximum speed to watch the second kick at position 17 . There is no way to monitor closely the third kick after the second kick, so at most 2 kicks can be seen.",
    "topics": [
      "data structures",
      "dp",
      "math"
    ],
    "id": "1662L"
  },
  {
    "title": "Antennas",
    "url": "https://codeforces.com/problemset/problem/1662/F",
    "history": "There are n equidistant antennas on a line, numbered from 1 to n . Each antenna has a power rating, the power of the i - th antenna is p_ i . The i - th and the j - th antenna can communicate directly if and only if their distance is at most the minimum of their powers, i. e. , | i- j| \u2264min( p_ i, p_ j) . Sending a message directly between two such antennas takes 1 second. What is the minimum amount of time necessary to send a message from antenna a to antenna b , possibly using other antennas as relays?",
    "input": "Each test contains multiple test cases. The first line contains an integer t ( 1\u2264 t\u2264 100 000 ) \u2014 the number of test cases. The descriptions of the t test cases follow. The first line of each test case contains three integers n , a , b ( 1 \u2264 a, b \u2264 n \u2264 200 000 ) \u2014 the number of antennas, and the origin and target antenna. The second line contains n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) \u2014 the powers of the antennas. The sum of the values of n over all test cases does not exceed 200 000 .",
    "output": "For each test case, print the number of seconds needed to trasmit a message from a to b . It can be shown that under the problem constraints, it is always possible to send such a message.",
    "note": "In the first test case, we must send a message from antenna 2 to antenna 9 . A sequence of communications requiring 4 seconds, which is the minimum possible amount of time, is the following: In 1 second we send the message from antenna 2 to antenna 1 . This is possible since | 2- 1| \u2264min( 1, 4) = min( p_ 2, p_ 1) . In 1 second we send the message from antenna 1 to antenna 5 . This is possible since | 1- 5| \u2264min( 4, 5) = min( p_ 1, p_ 5) . In 1 second we send the message from antenna 5 to antenna 10 . This is possible since | 5- 10| \u2264min( 5, 5) = min( p_ 5, p_ 10) . In 1 second we send the message from antenna 10 to antenna 9 . This is possible since | 10- 9| \u2264min( 5, 1) = min( p_ 10, p_ 9) .",
    "topics": [
      "data structures",
      "dfs and similar",
      "graphs",
      "graphs",
      "implementation",
      "implementation",
      "shortest paths",
      "shortest paths"
    ],
    "id": "1662F"
  },
  {
    "title": "Narrow Components",
    "url": "https://codeforces.com/problemset/problem/1661/E",
    "history": "You are given a matrix a , consisting of 3 rows and n columns. Each cell of the matrix is either free or taken. A free cell y is reachable from a free cell x if at least one of these conditions hold: x and y share a side; there exists a free cell z such that z is reachable from x and y is reachable from z . A connected component is a set of free cells of the matrix such that all cells in it are reachable from one another, but adding any other free cell to the set violates this rule. You are asked q queries about the matrix. Each query is the following: l r \u2014 count the number of connected components of the matrix, consisting of columns from l to r of the matrix a , inclusive. Print the answers to all queries.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 5 \u00b7 10^ 5 ) \u2014 the number of columns of matrix a . The i - th of the next three lines contains a description of the i - th row of the matrix a \u2014 a string, consisting of n characters. Each character is either 1 ( denoting a free cell) or 0 ( denoting a taken cell) . The next line contains an integer q ( 1 \u2264 q \u2264 3 \u00b7 10^ 5 ) \u2014 the number of queries. The j - th of the next q lines contains two integers l_ j and r_ j ( 1 \u2264 l_ j \u2264 r_ j \u2264 n ) \u2014 the description of the j - th query.",
    "output": "Print q integers \u2014 the j - th value should be equal to the number of the connected components of the matrix, consisting of columns from l_ j to r_ j of the matrix a , inclusive.",
    "note": "",
    "topics": [
      "brute force",
      "data structures",
      "dp",
      "dsu",
      "math",
      "trees"
    ],
    "id": "1661E"
  },
  {
    "title": "Progressions Covering",
    "url": "https://codeforces.com/problemset/problem/1661/D",
    "history": "You are given two arrays: an array a consisting of n zeros and an array b consisting of n integers. You can apply the following operation to the array a an arbitrary number of times: choose some subsegment of a of length k and add the arithmetic progression 1, 2, . . . , k to this subsegment \u2014 i. e. add 1 to the first element of the subsegment, 2 to the second element, and so on. The chosen subsegment should be inside the borders of the array a ( i. e. , if the left border of the chosen subsegment is l , then the condition 1 \u2264 l \u2264 l + k - 1 \u2264 n should be satisfied) . Note that the progression added is always 1, 2, . . . , k but not the k, k - 1, . . . , 1 or anything else ( i. e. , the leftmost element of the subsegment always increases by 1 , the second element always increases by 2 and so on) . Your task is to find the minimum possible number of operations required to satisfy the condition a_ i \u2265 b_ i for each i from 1 to n . Note that the condition a_ i \u2265 b_ i should be satisfied for all elements at once.",
    "input": "The first line of the input contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 3 \u00b7 10^ 5 ) \u2014 the number of elements in both arrays and the length of the subsegment, respectively. The second line of the input contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 10^ 12 ) , where b_ i is the i - th element of the array b .",
    "output": "Print one integer \u2014 the minimum possible number of operations required to satisfy the condition a_ i \u2265 b_ i for each i from 1 to n .",
    "note": "Consider the first example. In this test, we don' t really have any choice, so we need to add at least five progressions to make the first element equals 5 . The array a becomes [ 5, 10, 15] . Consider the second example. In this test, let' s add one progression on the segment [ 1; 3] and two progressions on the segment [ 4; 6] . Then, the array a becomes [ 1, 2, 3, 2, 4, 6] .",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "1661D"
  },
  {
    "title": "Promising String (hard version)",
    "url": "https://codeforces.com/problemset/problem/1660/F2",
    "history": "This is the hard version of Problem F. The only difference between the easy version and the hard version is the constraints. We will call a non- empty string balanced if it contains the same number of plus and minus signs. For example: strings \" + \u2013+ \" and \" + + - + \u2013\" are balanced, and strings \" + \u2013\" , \" \u2013\" and \" \" are not balanced. We will call a string promising if the string can be made balanced by several ( possibly zero) uses of the following operation: replace two adjacent minus signs with one plus sign. In particular, every balanced string is promising. However, the converse is not true: not every promising string is balanced. For example, the string \" - + \u2014\" is promising, because you can replace two adjacent minuses with plus and get a balanced string \" - + + - \" , or get another balanced string \" - + - + \" . How many non- empty substrings of the given string s are promising? Each non- empty promising substring must be counted in the answer as many times as it occurs in string s . Recall that a substring is a sequence of consecutive characters of the string. For example, for string \" + - + \" its substring are: \" + - \" , \" - + \" , \" + \" , \" + - + \" ( the string is a substring of itself) and some others. But the following strings are not its substring: \" \u2013\" , \" + + \" , \" - + + \" .",
    "input": "The first line of the input contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014the number of test cases in the test. Then the descriptions of test cases follow. Each test case of input data consists of two lines. The first line consists of the number n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) : the length of s . The second line of the test case contains the string s of length n , consisting only of characters \" + \" and \" - \" . It is guaranteed that the sum of values n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print a single number: the number of the promising non- empty substrings of string s . Each non- empty promising substring must be counted in the answer as many times as it occurs in string s .",
    "note": "The following are the promising substrings for the first three test cases in the example: s[ 1 . . . 2] = \" + - \" , s[ 2 . . . 3] = \" - + \" ; s[ 1 . . . 2] = \" - + \" , s[ 2 . . . 3] = \" + - \" , s[ 1 . . . 5] = \" - + \u2014\" , s[ 3 . . . 5] = \" \u2014\" ; s[ 1 . . . 3] = \" \u2014\" , s[ 2 . . . 4] = \" \u2014\" .",
    "topics": [
      "data structures",
      "implementation",
      "math",
      "strings"
    ],
    "id": "1660F2"
  },
  {
    "title": "Reverse Sort Sum",
    "url": "https://codeforces.com/problemset/problem/1659/D",
    "history": "Suppose you had an array A of n elements, each of which is 0 or 1 . Let us define a function f( k, A) which returns another array B , the result of sorting the first k elements of A in non- decreasing order. For example, f( 4, [ 0, 1, 1, 0, 0, 1, 0] ) = [ 0, 0, 1, 1, 0, 1, 0] . Note that the first 4 elements were sorted. Now consider the arrays B_ 1, B_ 2, . . . , B_ n generated by f( 1, A) , f( 2, A) , . . . , f( n, A) . Let C be the array obtained by taking the element- wise sum of B_ 1, B_ 2, . . . , B_ n . For example, let A= [ 0, 1, 0, 1] . Then we have B_ 1= [ 0, 1, 0, 1] , B_ 2= [ 0, 1, 0, 1] , B_ 3= [ 0, 0, 1, 1] , B_ 4= [ 0, 0, 1, 1] . Then C= B_ 1+ B_ 2+ B_ 3+ B_ 4= [ 0, 1, 0, 1] + [ 0, 1, 0, 1] + [ 0, 0, 1, 1] + [ 0, 0, 1, 1] = [ 0, 2, 2, 4] . You are given C . Determine a binary array A that would give C when processed as above. It is guaranteed that an array A exists for given C in the input.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Each test case has two lines. The first line contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) . The second line contains n integers c_ 1, c_ 2, . . . , c_ n ( 0 \u2264 c_ i \u2264 n ) . It is guaranteed that a valid array A exists for the given C . The sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output a single line containing n integers a_ 1, a_ 2, . . . , a_ n ( a_ i is 0 or 1 ) . If there are multiple answers, you may output any of them.",
    "note": "Here' s the explanation for the first test case. Given that A= [ 1, 1, 0, 1] , we can construct each B_ i : B_ 1= [ 1, 1, 0, 1] ; B_ 2= [ 1, 1, 0, 1] ; B_ 3= [ 0, 1, 1, 1] ; B_ 4= [ 0, 1, 1, 1] And then, we can sum up each column above to get C= [ 1+ 1+ 0+ 0, 1+ 1+ 1+ 1, 0+ 0+ 1+ 1, 1+ 1+ 1+ 1] = [ 2, 4, 2, 4] .",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation",
      "math",
      "two pointers"
    ],
    "id": "1659D"
  },
  {
    "title": "Gojou and Matrix Game",
    "url": "https://codeforces.com/problemset/problem/1658/E",
    "history": "Marin feels exhausted after a long day of cosplay, so Gojou invites her to play a game! Marin and Gojou take turns to place one of their tokens on an n \u00d7 n grid with Marin starting first. There are some restrictions and allowances on where to place tokens: Apart from the first move, the token placed by a player must be more than Manhattan distance k away from the previous token placed on the matrix. In other words, if a player places a token at ( x_ 1, y_ 1) , then the token placed by the other player in the next move must be in a cell ( x_ 2, y_ 2) satisfying | x_ 2 - x_ 1| + | y_ 2 - y_ 1| > k . Apart from the previous restriction, a token can be placed anywhere on the matrix, including cells where tokens were previously placed by any player. Whenever a player places a token on cell ( x, y) , that player gets v_ x, y points. All values of v on the grid are distinct. You still get points from a cell even if tokens were already placed onto the cell. The game finishes when each player makes 10^ 100 moves. Marin and Gojou will play n^ 2 games. For each cell of the grid, there will be exactly one game where Marin places a token on that cell on her first move. Please answer for each game, if Marin and Gojou play optimally ( after Marin' s first move) , who will have more points at the end? Or will the game end in a draw ( both players have the same points at the end) ?",
    "input": "The first line contains two integers n , k ( 3 \u2264 n \u2264 2000 , 1 \u2264 k \u2264 n - 2 ) . Note that under these constraints it is always possible to make a move. The following n lines contains n integers each. The j - th integer in the i - th line is v_ i, j ( 1 \u2264 v_ i, j\u2264 n^ 2 ) . All elements in v are distinct.",
    "output": "You should print n lines. In the i - th line, print n characters, where the j - th character is the result of the game in which Marin places her first token in the cell ( i, j) . Print ' M' if Marin wins, ' G' if Gojou wins, and ' D' if the game ends in a draw. Do not print spaces between the characters in one line.",
    "note": "",
    "topics": [
      "data structures",
      "dp",
      "games",
      "hashing",
      "implementation",
      "math",
      "number theory",
      "sortings"
    ],
    "id": "1658E"
  },
  {
    "title": "388535 (Hard Version)",
    "url": "https://codeforces.com/problemset/problem/1658/D2",
    "history": "This is the hard version of the problem. The difference in the constraints between both versions are colored below in red. You can make hacks only if all versions of the problem are solved. Marin and Gojou are playing hide- and- seek with an array. Gojou initially perform the following steps: First, Gojou chooses 2 integers l and r such that l \u2264 r . Then, Gojou will make an array a of length r- l+ 1 which is a permutation of the array [ l, l+ 1, . . . , r] . Finally, Gojou chooses a secret integer x and sets a_ i to a_ i \u2295 x for all i ( where \u2295 denotes the bitwise XOR operation) . Marin is then given the values of l, r and the final array a . She needs to find the secret integer x to win. Can you help her? Note that there may be multiple possible x that Gojou could have chosen. Marin can find any possible x that could have resulted in the final value of a .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. In the first line of each test case contains two integers l and r ( 0\u2264l\u2264 r < 2^ 17 ) . The second line contains r - l + 1 space- seperated integers of a_ 1, a_ 2, . . . , a_ r- l+ 1 ( 0 \u2264 a_ i < 2^ 17 ) . It is guaranteed that array a is valid. It is guaranteed that the sum of r - l + 1 over all test cases does not exceed 2^ 17 .",
    "output": "For each test case print an integer x . If there are multiple answers, print any.",
    "note": "In the first test case, the original array is [ 7, 6, 5, 4] . In the second test case, the original array is [ 4, 7, 6, 5] . In the third test case, the original array is [ 3, 1, 2] .",
    "topics": [
      "bitmasks",
      "brute force",
      "data structures",
      "math"
    ],
    "id": "1658D2"
  },
  {
    "title": "Equal LCM Subsets",
    "url": "https://codeforces.com/problemset/problem/1656/H",
    "history": "You are given two sets of positive integers A and B . You have to find two non- empty subsets S_ A \u2286 A , S_ B \u2286 B so that the least common multiple ( LCM) of the elements of S_ A is equal to the least common multiple ( LCM) of the elements of S_ B .",
    "input": "The input consists of multiple test cases. The first line of the input contains one integer t ( 1 \u2264 t \u2264 200 ) , the number of test cases. For each test case, there is one line containing two integers n, m ( 1 \u2264 n, m \u2264 1000 ) , the sizes of the sets A and B , respectively. The next line contains n distinct integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 4 \u00b7 10^ 36 ) , the elements of A . The next line contains m distinct integers b_ 1, b_ 2, . . . , b_ m ( 1 \u2264 b_ i \u2264 4 \u00b7 10^ 36 ) , the elements of B . The sum of n for all test cases and the sum of m for all test cases is at most 1000 .",
    "output": "For each test case, if there do not exist two subsets with equal least common multiple, output one line with NO. Otherwise, output one line with YES, followed by a line with two integers | S_ A| , | S_ B| ( 1 \u2264 | S_ A| \u2264 n , 1 \u2264 | S_ B| \u2264 m ) , the sizes of the subsets S_ A and S_ B The next line should contain | S_ A| integers x_ 1, x_ 2, . . . , x_ | S_ A| , the elements of S_ A , followed by a line with | S_ B| integers y_ 1, y_ 2, . . . , y_ | S_ B| , the elements of S_ B . If there are multiple possible pairs of subsets, you can print any.",
    "note": "",
    "topics": [
      "data structures",
      "math",
      "number theory"
    ],
    "id": "1656H"
  },
  {
    "title": "Subtract Operation",
    "url": "https://codeforces.com/problemset/problem/1656/B",
    "history": "You are given a list of n integers. You can perform the following operation: you choose an element x from the list, erase x from the list, and subtract the value of x from all the remaining elements. Thus, in one operation, the length of the list is decreased by exactly 1 . Given an integer k ( k> 0 ) , find if there is some sequence of n- 1 operations such that, after applying the operations, the only remaining element of the list is equal to k .",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains two integers n and k ( 2 \u2264 n \u2264 2\u00b7 10^ 5 , 1 \u2264 k \u2264 10^ 9 ) , the number of integers in the list, and the target value, respectively. The second line of each test case contains the n integers of the list a_ 1, a_ 2, . . . , a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n over all test cases is not greater that 2 \u00b7 10^ 5 .",
    "output": "For each test case, print YES if you can achieve k with a sequence of n- 1 operations. Otherwise, print NO. You may print each letter in any case ( for example, \" YES\" , \" Yes\" , \" yes\" , \" yEs\" will all be recognized as a positive answer) .",
    "note": "In the first example we have the list { 4, 2, 2, 7} , and we have the target k = 5 . One way to achieve it is the following: first we choose the third element, obtaining the list { 2, 0, 5} . Next we choose the first element, obtaining the list { - 2, 3} . Finally, we choose the first element, obtaining the list { 5} .",
    "topics": [
      "data structures",
      "greedy",
      "math",
      "two pointers"
    ],
    "id": "1656B"
  },
  {
    "title": "Snowy Mountain",
    "url": "https://codeforces.com/problemset/problem/1654/G",
    "history": "There are n locations on a snowy mountain range ( numbered from 1 to n ) , connected by n- 1 trails in the shape of a tree. Each trail has length 1 . Some of the locations are base lodges. The height h_ i of each location is equal to the distance to the nearest base lodge ( a base lodge has height 0 ) . There is a skier at each location, each skier has initial kinetic energy 0 . Each skier wants to ski along as many trails as possible. Suppose that the skier is skiing along a trail from location i to j . Skiers are not allowed to ski uphill ( i. e. , if h_ i < h_ j ) . It costs one unit of kinetic energy to ski along flat ground ( i. e. , if h_ i = h_ j ) , and a skier gains one unit of kinetic energy by skiing downhill ( i. e. , if h_ i > h_ j ) . For each location, compute the length of the longest sequence of trails that the skier starting at that location can ski along without their kinetic energy ever becoming negative. Skiers are allowed to visit the same location or trail multiple times.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) . The second line contains n integers l_ 1, l_ 2, . . . , l_ n ( 0 \u2264 l_ i \u2264 1 ) . If l_ i = 1 , location i is a base lodge; if l_ i = 0 , location i is not a base lodge. It is guaranteed that there is at least 1 base lodge. Each of the next n- 1 lines contains two integers u, v ( 1 \u2264 u, v \u2264 n , u = \u0338 v ) , meaning that there is a trail that connects the locations u and v . It is guaranteed that the given trails form a tree.",
    "output": "Print n integers: the i - th integer is equal to the length of the longest sequence of trails that the skier starting at location i can ski along without their kinetic energy ever becoming negative.",
    "note": "In the first test, h = [ 0, 0, 1, 1, 2, 3] . The skier starting from 6 can ski along at most 5 trails, in the path 6 \u2192 5 \u2192 4 \u2192 3 \u2192 4 \u2192 2 ( notice that a skier can ski multiple times along the same trail and can visit more than once the same location) : at the location 6 , the kinetic energy is 0 ; at the location 5 , the kinetic energy increases by 1 ( because h_ 5 < h_ 6 ) , so it becomes 1 ; at the location 4 , the kinetic energy increases by 1 ( because h_ 4 < h_ 5 ) , so it becomes 2 ; at the location 3 , the kinetic energy decreases by 1 ( because h_ 3 = h_ 4 ) , so it becomes 1 ; at the location 4 , the kinetic energy decreases by 1 ( because h_ 4 = h_ 3 ) , so it becomes 0 ; at the location 2 , the kinetic energy increases by 1 ( because h_ 2 < h_ 4 ) , so it becomes 1 . There isn' t any sequence of trails of length greater than 5 such that the kinetic energy is always non- negative. Moreover, the optimal path for the skier starting from 1 is 1 ( no trails) ; the optimal path for the skier starting from 2 is 2 ( no trails) ; the optimal path for the skier starting from 3 is 3 \u2192 1 ; the optimal path for the skier starting from 4 is 4 \u2192 2 ; the optimal path for the skier starting from 5 is 5 \u2192 4 \u2192 3 \u2192 1 . In the second test, h = [ 3, 2, 2, 1, 1, 1, 0, 0, 0] . The skier starting from 1 can ski along at most 5 trails, in the path 1 \u2192 3 \u2192 2 \u2192 5 \u2192 4 \u2192 7 . at the location 1 , the kinetic energy is 0 ; at the location 3 , the kinetic energy increases by 1 ( because h_ 3 < h_ 1 ) , so it becomes 1 ; at the location 2 , the kinetic energy decreases by 1 ( because h_ 2 = h_ 3 ) , so it becomes 0 ; at the location 5 , the kinetic energy increases by 1 ( because h_ 5 < h_ 2 ) , so it becomes 1 ; at the location 4 , the kinetic energy decreases by 1 ( because h_ 4 = h_ 5 ) , so it becomes 0 ; at the location 7 , the kinetic energy increases by 1 ( because h_ 7 < h_ 4 ) , so it becomes 1 . There isn' t any sequence of trails of length greater than 5 such that the kinetic energy is always non- negative. In the third test, for the skier starting from vertex 1 , the optimal path is 1 \u2192 2 \u2192 5 \u2192 4 \u2192 3 \u2192 6 \u2192 11 \u2192 10 \u2192 11 . Here are pictures of the first, second, and third test, with the base lodges shown in red:",
    "topics": [
      "data structures",
      "dfs and similar",
      "graphs",
      "greedy",
      "shortest paths",
      "trees"
    ],
    "id": "1654G"
  },
  {
    "title": "Minimal String Xoration",
    "url": "https://codeforces.com/problemset/problem/1654/F",
    "history": "You are given an integer n and a string s consisting of 2^ n lowercase letters of the English alphabet. The characters of the string s are s_ 0s_ 1s_ 2\u22ef s_ 2^ n- 1 . A string t of length 2^ n ( whose characters are denoted by t_ 0t_ 1t_ 2\u22ef t_ 2^ n- 1 ) is a xoration of s if there exists an integer j ( 0\u2264 j \u2264 2^ n- 1 ) such that, for each 0 \u2264 i \u2264 2^ n- 1 , t_ i = s_ i \u2295 j ( where \u2295 denotes the operation bitwise XOR) . Find the lexicographically minimal xoration of s . A string a is lexicographically smaller than a string b if and only if one of the following holds: a is a prefix of b , but a b ; in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b .",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 18 ) . The second line contains a string s consisting of 2^ n lowercase letters of the English alphabet.",
    "output": "Print a single line containing the lexicographically minimal xoration of s .",
    "note": "In the first test, the lexicographically minimal xoration t of s = \" acba\" is \" abca\" . It' s a xoration because, for j = 3 , t_ 0 = s_ 0 \u2295 j = s_ 3 = \" a\" ; t_ 1 = s_ 1 \u2295 j = s_ 2 = \" b\" ; t_ 2 = s_ 2 \u2295 j = s_ 1 = \" c\" ; t_ 3 = s_ 3 \u2295 j = s_ 0 = \" a\" . There isn' t any xoration of s lexicographically smaller than \" abca\" . In the second test, the minimal string xoration corresponds to choosing j = 4 in the definition of xoration. In the third test, the minimal string xoration corresponds to choosing j = 11 in the definition of xoration. In the fourth test, the minimal string xoration corresponds to choosing j = 10 in the definition of xoration. In the fifth test, the minimal string xoration corresponds to choosing either j = 0 or j = 1 in the definition of xoration.",
    "topics": [
      "bitmasks",
      "data structures",
      "divide and conquer",
      "greedy",
      "hashing",
      "sortings",
      "strings"
    ],
    "id": "1654F"
  },
  {
    "title": "Arithmetic Operations",
    "url": "https://codeforces.com/problemset/problem/1654/E",
    "history": "You are given an array of integers a_ 1, a_ 2, . . . , a_ n . You can do the following operation any number of times ( possibly zero) : Choose any index i and set a_ i to any integer ( positive, negative or 0 ) . What is the minimum number of operations needed to turn a into an arithmetic progression? The array a is an arithmetic progression if a_ i+ 1- a_ i= a_ i- a_ i- 1 for any 2 \u2264 i \u2264 n- 1 .",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 5 ) .",
    "output": "Print a single integer: the minimum number of operations needed to turn a into an arithmetic progression.",
    "note": "In the first test, you can get the array a = [ 11, 10, 9, 8, 7, 6, 5, 4, 3] by performing 6 operations: Set a_ 3 to 9 : the array becomes [ 3, 2, 9, 8, 6, 9, 5, 4, 1] ; Set a_ 2 to 10 : the array becomes [ 3, 10, 9, 8, 6, 9, 5, 4, 1] ; Set a_ 6 to 6 : the array becomes [ 3, 10, 9, 8, 6, 6, 5, 4, 1] ; Set a_ 9 to 3 : the array becomes [ 3, 10, 9, 8, 6, 6, 5, 4, 3] ; Set a_ 5 to 7 : the array becomes [ 3, 10, 9, 8, 7, 6, 5, 4, 3] ; Set a_ 1 to 11 : the array becomes [ 11, 10, 9, 8, 7, 6, 5, 4, 3] . a is an arithmetic progression: in fact, a_ i+ 1- a_ i= a_ i- a_ i- 1= - 1 for any 2 \u2264 i \u2264 n- 1 . There is no sequence of less than 6 operations that makes a an arithmetic progression. In the second test, you can get the array a = [ - 1, 2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, 38] by performing 10 operations. In the third test, you can get the array a = [ 100000, 80000, 60000, 40000, 20000, 0, - 20000, - 40000, - 60000, - 80000] by performing 7 operations.",
    "topics": [
      "brute force",
      "data structures",
      "graphs",
      "math"
    ],
    "id": "1654E"
  },
  {
    "title": "Alice and the Cake",
    "url": "https://codeforces.com/problemset/problem/1654/C",
    "history": "Alice has a cake, and she is going to cut it. She will perform the following operation n- 1 times: choose a piece of the cake ( initially, the cake is all one piece) with weight w\u2265 2 and cut it into two smaller pieces of weight \u230aw/ 2\u230b and \u2308w/ 2\u2309 ( \u230a x \u230b and \u2308 x \u2309 denote floor and ceiling functions, respectively) . After cutting the cake in n pieces, she will line up these n pieces on a table in an arbitrary order. Let a_ i be the weight of the i - th piece in the line. You are given the array a . Determine whether there exists an initial weight and sequence of operations which results in a .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n for all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print a single line: print YES if the array a could have resulted from Alice' s operations, otherwise print NO. You may print each letter in any case ( for example, YES, Yes, yes, yEs will all be recognized as positive answer) .",
    "note": "In the first test case, it' s possible to get the array a by performing 0 operations on a cake with weight 327 . In the second test case, it' s not possible to get the array a . In the third test case, it' s possible to get the array a by performing 1 operation on a cake with weight 1 970 429 473 : Cut it in half, so that the weights are [ 985 214 736, 985 214 737] . Note that the starting weight can be greater than 10^ 9 . In the fourth test case, it' s possible to get the array a by performing 2 operations on a cake with weight 6 : Cut it in half, so that the weights are [ 3, 3] . Cut one of the two pieces with weight 3 , so that the new weights are [ 1, 2, 3] which is equivalent to [ 2, 3, 1] up to reordering.",
    "topics": [
      "data structures",
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "1654C"
  },
  {
    "title": "Tower Defense",
    "url": "https://codeforces.com/problemset/problem/1651/F",
    "history": "Monocarp is playing a tower defense game. A level in the game can be represented as an OX axis, where each lattice point from 1 to n contains a tower in it. The tower in the i - th point has c_ i mana capacity and r_ i mana regeneration rate. In the beginning, before the 0 - th second, each tower has full mana. If, at the end of some second, the i - th tower has x mana, then it becomes min( x + r_ i, c_ i) mana for the next second. There are q monsters spawning on a level. The j - th monster spawns at point 1 at the beginning of t_ j - th second, and it has h_ j health. Every monster is moving 1 point per second in the direction of increasing coordinate. When a monster passes the tower, the tower deals min( H, M) damage to it, where H is the current health of the monster and M is the current mana amount of the tower. This amount gets subtracted from both monster' s health and tower' s mana. Unfortunately, sometimes some monsters can pass all n towers and remain alive. Monocarp wants to know what will be the total health of the monsters after they pass all towers.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of towers. The i - th of the next n lines contains two integers c_ i and r_ i ( 1 \u2264 r_ i \u2264 c_ i \u2264 10^ 9 ) \u2014 the mana capacity and the mana regeneration rate of the i - th tower. The next line contains a single integer q ( 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of monsters. The j - th of the next q lines contains two integers t_ j and h_ j ( 0 \u2264 t_ j \u2264 2 \u00b7 10^ 5 ; 1 \u2264 h_ j \u2264 10^ 12 ) \u2014 the time the j - th monster spawns and its health. The monsters are listed in the increasing order of their spawn time, so t_ j < t_ j+ 1 for all 1 \u2264 j \u2264 q- 1 .",
    "output": "Print a single integer \u2014 the total health of all monsters after they pass all towers.",
    "note": "",
    "topics": [
      "binary search",
      "brute force",
      "data structures"
    ],
    "id": "1651F"
  },
  {
    "title": "Nearest Excluded Points",
    "url": "https://codeforces.com/problemset/problem/1651/D",
    "history": "You are given n distinct points on a plane. The coordinates of the i - th point are ( x_ i, y_ i) . For each point i , find the nearest ( in terms of Manhattan distance) point with integer coordinates that is not among the given n points. If there are multiple such points \u2014 you can choose any of them. The Manhattan distance between two points ( x_ 1, y_ 1) and ( x_ 2, y_ 2) is | x_ 1 - x_ 2| + | y_ 1 - y_ 2| .",
    "input": "The first line of the input contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of points in the set. The next n lines describe points. The i - th of them contains two integers x_ i and y_ i ( 1 \u2264 x_ i, y_ i \u2264 2 \u00b7 10^ 5 ) \u2014 coordinates of the i - th point. It is guaranteed that all points in the input are distinct.",
    "output": "Print n lines. In the i - th line, print the point with integer coordinates that is not among the given n points and is the nearest ( in terms of Manhattan distance) to the i - th point from the input. Output coordinates should be in range [ - 10^ 6; 10^ 6] . It can be shown that any optimal answer meets these constraints. If there are several answers, you can print any of them.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "dfs and similar",
      "graphs",
      "shortest paths"
    ],
    "id": "1651D"
  },
  {
    "title": "Fault-tolerant Network",
    "url": "https://codeforces.com/problemset/problem/1651/C",
    "history": "There is a classroom with two rows of computers. There are n computers in each row and each computer has its own grade. Computers in the first row has grades a_ 1, a_ 2, . . . , a_ n and in the second row \u2014 b_ 1, b_ 2, . . . , b_ n . Initially, all pairs of neighboring computers in each row are connected by wire ( pairs ( i, i + 1) for all 1 \u2264 i < n ) , so two rows form two independent computer networks. Your task is to combine them in one common network by connecting one or more pairs of computers from different rows. Connecting the i - th computer from the first row and the j - th computer from the second row costs | a_ i - b_ j| . You can connect one computer to several other computers, but you need to provide at least a basic fault tolerance: you need to connect computers in such a way that the network stays connected, despite one of its computer failing. In other words, if one computer is broken ( no matter which one) , the network won' t split in two or more parts. That is the minimum total cost to make a fault- tolerant network?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Next t cases follow. The first line of each test case contains the single integer n ( 3 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of computers in each row. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the grades of computers in the first row. The third line contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 10^ 9 ) \u2014 the grades of computers in the second row. It' s guaranteed that the total sum of n doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print a single integer \u2014 the minimum total cost to make a fault- tolerant network.",
    "note": "In the first test case, it' s optimal to connect four pairs of computers: computer 1 from the first row with computer 2 from the second row: cost | 1 - 4| = 3 ; computer 3 from the first row with computer 2 from the second row: cost | 1 - 4| = 3 ; computer 2 from the first row with computer 1 from the second row: cost | 10 - 20| = 10 ; computer 2 from the first row with computer 3 from the second row: cost | 10 - 25| = 15 ; In total, 3 + 3 + 10 + 15 = 31 . In the second test case, it' s optimal to connect 1 from the first row with 1 from the second row, and 4 from the first row with 4 from the second row.",
    "topics": [
      "brute force",
      "data structures",
      "implementation"
    ],
    "id": "1651C"
  },
  {
    "title": "Counting Shortcuts",
    "url": "https://codeforces.com/problemset/problem/1650/G",
    "history": "Given an undirected connected graph with n vertices and m edges. The graph contains no loops ( edges from a vertex to itself) and multiple edges ( i. e. no more than one edge between each pair of vertices) . The vertices of the graph are numbered from 1 to n . Find the number of paths from a vertex s to t whose length differs from the shortest path from s to t by no more than 1 . It is necessary to consider all suitable paths, even if they pass through the same vertex or edge more than once ( i. e. they are not simple) . Graph consisting of 6 of vertices and 8 of edges For example, let n = 6 , m = 8 , s = 6 and t = 1 , and let the graph look like the figure above. Then the length of the shortest path from s to t is 1 . Consider all paths whose length is at most 1 + 1 = 2 . 6 \u2192 1 . The length of the path is 1 . 6 \u2192 4 \u2192 1 . Path length is 2 . 6 \u2192 2 \u2192 1 . Path length is 2 . 6 \u2192 5 \u2192 1 . Path length is 2 . There is a total of 4 of matching paths.",
    "input": "The first line of test contains the number t ( 1 \u2264 t \u2264 10^ 4 ) \u2014the number of test cases in the test. Before each test case, there is a blank line. The first line of test case contains two numbers n, m ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 m \u2264 2 \u00b7 10^ 5 ) \u2014the number of vertices and edges in the graph. The second line contains two numbers s and t ( 1 \u2264 s, t \u2264 n , s = \u0338 t ) \u2014the numbers of the start and end vertices of the path. The following m lines contain descriptions of edges: the i th line contains two integers u_ i , v_ i ( 1 \u2264 u_ i, v_ i \u2264 n ) \u2014 the numbers of vertices that connect the i th edge. It is guaranteed that the graph is connected and does not contain loops and multiple edges. It is guaranteed that the sum of values n on all test cases of input data does not exceed 2 \u00b7 10^ 5 . Similarly, it is guaranteed that the sum of values m on all test cases of input data does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output a single number \u2014 the number of paths from s to t such that their length differs from the length of the shortest path by no more than 1 . Since this number may be too large, output it modulo 10^ 9 + 7 .",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "dp",
      "graphs",
      "shortest paths"
    ],
    "id": "1650G"
  },
  {
    "title": "Rescheduling the Exam",
    "url": "https://codeforces.com/problemset/problem/1650/E",
    "history": "Now Dmitry has a session, and he has to pass n exams. The session starts on day 1 and lasts d days. The i th exam will take place on the day of a_ i ( 1 \u2264 a_ i \u2264 d ) , all a_ i \u2014 are different. Sample, where n= 3 , d= 12 , a= [ 3, 5, 9] . Orange \u2014 exam days. Before the first exam Dmitry will rest 2 days, before the second he will rest 1 day and before the third he will rest 3 days. For the session schedule, Dmitry considers a special value \u03bc \u2014 the smallest of the rest times before the exam for all exams. For example, for the image above, \u03bc= 1 . In other words, for the schedule, he counts exactly n numbers \u2014 how many days he rests between the exam i- 1 and i ( for i= 0 between the start of the session and the exam i ) . Then it finds \u03bc \u2014 the minimum among these n numbers. Dmitry believes that he can improve the schedule of the session. He may ask to change the date of one exam ( change one arbitrary value of a_ i ) . Help him change the date so that all a_ i remain different, and the value of \u03bc is as large as possible. For example, for the schedule above, it is most advantageous for Dmitry to move the second exam to the very end of the session. The new schedule will take the form: Now the rest periods before exams are equal to [ 2, 2, 5] . So, \u03bc= 2 . Dmitry can leave the proposed schedule unchanged ( if there is no way to move one exam so that it will lead to an improvement in the situation) .",
    "input": "The first line of input data contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of input test cases. The descriptions of test cases follow. An empty line is written in the test before each case. The first line of each test case contains two integers n and d ( 2 \u2264 n \u2264 2 \u00b7 10^ 5, 1 \u2264 d \u2264 10^ 9 ) \u2014 the number of exams and the length of the session, respectively. The second line of each test case contains n integers a_ i ( 1 \u2264 a_ i \u2264 d, a_ i < a_ i+ 1 ) , where the i - th number means the date of the i - th exam. It is guaranteed that the sum of n for all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output the maximum possible value of \u03bc if Dmitry can move any one exam to an arbitrary day. All values of a_ i should remain distinct.",
    "note": "The first sample is parsed in statement. One of the optimal schedule changes for the second sample: Initial schedule. New schedule. In the third sample, we need to move the exam from day 1 to any day from 4 to 100 . In the fourth sample, any change in the schedule will only reduce \u03bc , so the schedule should be left as it is. In the fifth sample, we need to move the exam from day 1 to any day from 100000000 to 300000000 . One of the optimal schedule changes for the sixth sample: Initial schedule. New schedule. In the seventh sample, every day is exam day, and it is impossible to rearrange the schedule.",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "implementation",
      "math",
      "sortings"
    ],
    "id": "1650E"
  },
  {
    "title": "Two Avenues",
    "url": "https://codeforces.com/problemset/problem/1648/F",
    "history": "In order to make the capital of Berland a more attractive place for tourists, the great king came up with the following plan: choose two streets of the city and call them avenues. Certainly, these avenues will be proclaimed extremely important historical places, which should attract tourists from all over the world. The capital of Berland can be represented as a graph, the vertices of which are crossroads, and the edges are streets connecting two crossroads. In total, there are n vertices and m edges in the graph, you can move in both directions along any street, you can get from any crossroad to any other by moving only along the streets, each street connects two different crossroads, and no two streets connect the same pair of crossroads. In order to reduce the flow of ordinary citizens moving along the great avenues, it was decided to introduce a toll on each avenue in both directions. Now you need to pay 1 tugrik for one passage along the avenue. You don' t have to pay for the rest of the streets. Analysts have collected a sample of k citizens, i - th of them needs to go to work from the crossroad a_ i to the crossroad b_ i . After two avenues are chosen, each citizen will go to work along the path with minimal cost. In order to earn as much money as possible, it was decided to choose two streets as two avenues, so that the total number of tugriks paid by these k citizens is maximized. Help the king: according to the given scheme of the city and a sample of citizens, find out which two streets should be made avenues, and how many tugriks the citizens will pay according to this choice.",
    "input": "Each test consists of multiple test cases. The first line contains one integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. The first line of each test case contains two integers n and m ( 3 \u2264 n \u2264 500 000 , n - 1 \u2264 m \u2264 500 000 , m \u2264n ( n - 1) / 2 ) \u2014 the number of crossroads and streets, respectively. The next m lines contain the description of streets, i - th line contains two integers s_ i and f_ i ( 1 \u2264 s_ i, f_ i \u2264 n , s_ i = \u0338 f_ i ) \u2014 indexes of crossroads which are connected by i - th street. It is guaranteed that no two streets connect the same pair of crossroads, you can get from any crossroad to any other by moving only along the streets. The next line contains a single integer k ( 1 \u2264 k \u2264 500 000 ) \u2014 the amount of citizens in the sample. The next k lines contain the description of citizens, i - th line contains two integers a_ i and b_ i ( 1 \u2264 a_ i, b_ i \u2264 n , a_ i = \u0338 b_ i ) \u2014 i - th citizen goes to work from crossroad a_ i to crossroad b_ i . Let M be the sum of m over all test cases and K be the sum of k over all test cases. It is guaranteed that M, K \u2264 500 000 .",
    "output": "For each test case print the answer to the problem. In the first line print the total amount of tugriks that will be paid by citizens. In the second line print two integers x_ 1 and y_ 1 \u2014 the numbers of crossroads that will be connected by the first avenue. In the third line print two integers x_ 2 and y_ 2 \u2014 the numbers of crossroads that will be connected by the second avenue. The numbers of crossroads connected by an avenue can be printed in any order, each of the printed streets should be among m streets of the city, chosen streets should be different.",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "graphs"
    ],
    "id": "1648F"
  },
  {
    "title": "Air Reform",
    "url": "https://codeforces.com/problemset/problem/1648/E",
    "history": "Berland is a large country with developed airlines. In total, there are n cities in the country that are historically served by the Berlaflot airline. The airline operates bi- directional flights between m pairs of cities, i - th of them connects cities with numbers a_ i and b_ i and has a price c_ i for a flight in both directions. It is known that Berlaflot flights can be used to get from any city to any other ( possibly with transfers) , and the cost of any route that consists of several consequent flights is equal to the cost of the most expensive of them. More formally, the cost of the route from a city t_ 1 to a city t_ k with ( k- 2) transfers using cities t_ 2, t_ 3, t_ 4, . . . , t_ k - 1 is equal to the maximum cost of flights from t_ 1 to t_ 2 , from t_ 2 to t_ 3 , from t_ 3 to t_ 4 and so on until the flight from t_ k - 1 to t_ k . Of course, all these flights must be operated by Berlaflot. A new airline, S8 Airlines, has recently started operating in Berland. This airline provides bi- directional flights between all pairs of cities that are not connected by Berlaflot direct flights. Thus, between each pair of cities there is a flight of either Berlaflot or S8 Airlines. The cost of S8 Airlines flights is calculated as follows: for each pair of cities x and y that is connected by a S8 Airlines flight, the cost of this flight is equal to the minimum cost of the route between the cities x and y at Berlaflot according to the pricing described earlier. It is known that with the help of S8 Airlines flights you can get from any city to any other with possible transfers, and, similarly to Berlaflot, the cost of a route between any two cities that consists of several S8 Airlines flights is equal to the cost of the most expensive flight. Due to the increased competition with S8 Airlines, Berlaflot decided to introduce an air reform and change the costs of its flights. Namely, for the i - th of its flight between the cities a_ i and b_ i , Berlaflot wants to make the cost of this flight equal to the minimum cost of the route between the cities a_ i and b_ i at S8 Airlines. Help Berlaflot managers calculate new flight costs.",
    "input": "Each test consists of multiple test cases. The first line contains one integer t ( 1 \u2264 t \u2264 10 000 ) \u2014 the amount of test cases. The first line of each test case contains two integers n and m ( 4 \u2264 n \u2264 200 000 , n - 1 \u2264 m \u2264 200 000 , m \u2264( n - 1) ( n - 2) / 2 ) \u2014 the amount of cities in Berland and the amount of Berlaflot flights. The next m lines contain the description of Berlaflot flights. The i - th line contains three integers a_ i , b_ i and c_ i ( 1 \u2264 a_ i, b_ i \u2264 n , 1 \u2264 c_ i \u2264 10^ 9 ) \u2014 the numbers of cities that are connected with i - th Berlaflot flight and the price of i - th Berlaflot flight. It is guaranteed that no flight connects a city with itself, no two flights connect the same pair of cities. It is guaranteed that by using Berlaflot flights it is possible to get from any city to any other and by using S8 Airlines flights it is possible to get from any city to any other. Let N be the sum of n over all test cases and M be the sum of m over all test cases. It is guaranteed that N, M \u2264 200 000 .",
    "output": "For each test case you should print m integers in a single line, i - th of them should be the price of i - th Berlaflot flight after the air reform.",
    "note": "In the first test case S8 Airlines will provide flights between these pairs of cities: ( 1, 3) , ( 1, 4) and ( 2, 4) . The cost of a flight between cities 1 and 3 will be equal to 2 , since the minimum cost of the Berlaflot route is 2 \u2014 the route consists of a flight between cities 1 and 2 costing 1 and a flight between cities 2 and 3 costing 2 , the maximum cost is 2 . The cost of a flight between cities 1 and 4 will be 3 , since the minimum cost of the Berlaflot route is 3 \u2014 the route consists of a flight between cities 1 and 2 costing 1 , a flight between cities 2 and 3 costing 2 and a flight between cities 3 and 4 costing 3 , the maximum cost is 3 . The cost of a flight between cities 2 and 4 will be 3 , since the minimum cost of the Berlaflot route is 3 \u2014 the route consists of a flight between cities 2 and 3 costing 2 and a flight between cities 3 and 4 costing 3 , the maximum cost is 3 . After the air reform, the cost of the Berlaflot flight between cities 1 and 2 will be 3 , since the minimum cost of the S8 Airlines route between these cities is 3 \u2014 the route consists of a flight between cities 1 and 4 costing 3 and a flight between cities 2 and 4 costing 3 , the maximum cost is 3 . The cost of the Berlaflot flight between cities 2 and 3 will be 3 , since the minimum cost of the S8 Airlines route between these cities is 3 \u2014 the route consists of a flight between cities 2 and 4 costing 3 , a flight between cities 1 and 4 costing 3 and a flight between 1 and 3 costing 2 , the maximum cost is 3 . The cost of the Berlaflot flight between cities 3 and 4 will be 3 , since the minimum cost of the S8 Airlines route between these cities is 3 \u2014 the route consists of a flight between cities 1 and 3 costing 2 and a flight between cities 1 and 4 costing 3 , the maximum cost is 3 . In the second test case S8 Airlines will have the following flights: between cities 1 and 4 costing 1 , between cities 2 and 3 costing 1 , between cities 2 and 5 costing 2 , between cities 3 and 4 costing 1 and between cities 3 and 5 costing 2 .",
    "topics": [
      "data structures",
      "dfs and similar",
      "divide and conquer",
      "dsu",
      "graphs",
      "implementation",
      "trees"
    ],
    "id": "1648E"
  },
  {
    "title": "Serious Business",
    "url": "https://codeforces.com/problemset/problem/1648/D",
    "history": "Dima is taking part in a show organized by his friend Peter. In this show Dima is required to cross a 3 \u00d7 n rectangular field. Rows are numbered from 1 to 3 and columns are numbered from 1 to n . The cell in the intersection of the i - th row and the j - th column of the field contains an integer a_ i, j . Initially Dima' s score equals zero, and whenever Dima reaches a cell in the row i and the column j , his score changes by a_ i, j . Note that the score can become negative. Initially all cells in the first and the third row are marked as available, and all cells in the second row are marked as unavailable. However, Peter offered Dima some help: there are q special offers in the show, the i - th special offer allows Dima to mark cells in the second row between l_ i and r_ i as available, though Dima' s score reduces by k_ i whenever he accepts a special offer. Dima is allowed to use as many special offers as he wants, and might mark the same cell as available multiple times. Dima starts his journey in the cell ( 1, 1) and would like to reach the cell ( 3, n) . He can move either down to the next row or right to the next column ( meaning he could increase the current row or column by 1) , thus making n + 1 moves in total, out of which exactly n - 1 would be horizontal and 2 would be vertical. Peter promised Dima to pay him based on his final score, so the sum of all numbers of all visited cells minus the cost of all special offers used. Please help Dima to maximize his final score.",
    "input": "The first input line contains two integers n and q ( 1 \u2264 n, q \u2264 500 000 ) \u2014 the number of columns in the field and the number of special offers. The next three lines describe the field, i - th of them contains n integers a_ i1 , a_ i2 , . . . , a_ in ( - 10^ 9 \u2264 a_ ij\u2264 10^ 9) \u2014 the values in the i - th row. The next q lines describe special offers: the i - th offer is described by 3 integers l_ i , r_ i and k_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 n , 1\u2264 k_ i\u2264 10^ 9 ) \u2014 the segment that becomes unblocked and the cost of this special offer.",
    "output": "Output one integer \u2014 the maximum final score Dima can achieve.",
    "note": "In the first example, it is optimal to use Peter' s second offer of 4 rubles and go through the cells ( 1, 1) , ( 1, 2) , ( 1, 3) , ( 2, 3) , ( 3, 3) , ( 3, 4) , earning 1 + 0 + 2 + 9 + 4 + 1 - 4 = 13 rubles in total. In the second example, it is optimal to use Peter' s second and third offers of 2 and 3 rubles, respectively, and go through the cells ( 1, 1) , ( 2, 1) , ( 2, 2) , ( 2, 3) , ( 2, 4) , ( 3, 4) , ( 3, 5) , earning - 20 + 1 + 3 + 3 + 6 + 6 + 2 - 2 - 3= - 4 rubles.",
    "topics": [
      "data structures",
      "divide and conquer",
      "dp",
      "implementation",
      "shortest paths"
    ],
    "id": "1648D"
  },
  {
    "title": "Tyler and Strings",
    "url": "https://codeforces.com/problemset/problem/1648/C",
    "history": "While looking at the kitchen fridge, the little boy Tyler noticed magnets with symbols, that can be aligned into a string s . Tyler likes strings, and especially those that are lexicographically smaller than another string, t . After playing with magnets on the fridge, he is wondering, how many distinct strings can be composed out of letters of string s by rearranging them, so that the resulting string is lexicographically smaller than the string t ? Tyler is too young, so he can' t answer this question. The alphabet Tyler uses is very large, so for your convenience he has already replaced the same letters in s and t to the same integers, keeping that different letters have been replaced to different integers. We call a string x lexicographically smaller than a string y if one of the followings conditions is fulfilled: There exists such position of symbol m that is presented in both strings, so that before m - th symbol the strings are equal, and the m - th symbol of string x is smaller than m - th symbol of string y . String x is the prefix of string y and x = \u0338 y . Because the answer can be too large, print it modulo 998 244 353 .",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 200 000 ) \u2014 the lengths of strings s and t respectively. The second line contains n integers s_ 1, s_ 2, s_ 3, . . . , s_ n ( 1 \u2264 s_ i \u2264 200 000 ) \u2014 letters of the string s . The third line contains m integers t_ 1, t_ 2, t_ 3, . . . , t_ m ( 1 \u2264 t_ i \u2264 200 000 ) \u2014 letters of the string t .",
    "output": "Print a single number \u2014 the number of strings lexicographically smaller than t that can be obtained by rearranging the letters in s , modulo 998 244 353 .",
    "note": "In the first example, the strings we are interested in are [ 1 2 2] and [ 2 1 2] . The string [ 2 2 1] is lexicographically larger than the string [ 2 1 2 1] , so we don' t count it. In the second example, all strings count except [ 4 3 2 1] , so the answer is 4! - 1 = 23 . In the third example, only the string [ 1 1 1 2] counts.",
    "topics": [
      "combinatorics",
      "data structures",
      "implementation"
    ],
    "id": "1648C"
  },
  {
    "title": "Integral Array",
    "url": "https://codeforces.com/problemset/problem/1648/B",
    "history": "You are given an array a of n positive integers numbered from 1 to n . Let' s call an array integral if for any two, not necessarily different, numbers x and y from this array, x \u2265 y , the number \u230ax/ y\u230b ( x divided by y with rounding down) is also in this array. You are guaranteed that all numbers in a do not exceed c . Your task is to check whether this array is integral.",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains two integers n and c ( 1 \u2264 n \u2264 10^ 6 , 1 \u2264 c \u2264 10^ 6 ) \u2014 the size of a and the limit for the numbers in the array. The second line of each test case contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 1 \u2264 a_ i \u2264 c ) \u2014 the array a . Let N be the sum of n over all test cases and C be the sum of c over all test cases. It is guaranteed that N \u2264 10^ 6 and C \u2264 10^ 6 .",
    "output": "For each test case print Yes if the array is integral and No otherwise.",
    "note": "In the first test case it is easy to see that the array is integral: \u230a1/ 1\u230b = 1 , a_ 1 = 1 , this number occurs in the arry \u230a2/ 2\u230b = 1 \u230a5/ 5\u230b = 1 \u230a2/ 1\u230b = 2 , a_ 2 = 2 , this number occurs in the array \u230a5/ 1\u230b = 5 , a_ 3 = 5 , this number occurs in the array \u230a5/ 2\u230b = 2 , a_ 2 = 2 , this number occurs in the array Thus, the condition is met and the array is integral. In the second test case it is enough to see that \u230a7/ 3\u230b = \u230a 21/ 3\u230b = 2 , this number is not in a , that' s why it is not integral. In the third test case \u230a2/ 2\u230b = 1 , but there is only 2 in the array, that' s why it is not integral.",
    "topics": [
      "brute force",
      "constructive algorithms",
      "data structures",
      "math"
    ],
    "id": "1648B"
  },
  {
    "title": "Weird Sum",
    "url": "https://codeforces.com/problemset/problem/1648/A",
    "history": "Egor has a table of size n \u00d7 m , with lines numbered from 1 to n and columns numbered from 1 to m . Each cell has a color that can be presented as an integer from 1 to 10^ 5 . Let us denote the cell that lies in the intersection of the r - th row and the c - th column as ( r, c) . We define the manhattan distance between two cells ( r_ 1, c_ 1) and ( r_ 2, c_ 2) as the length of a shortest path between them where each consecutive cells in the path must have a common side. The path can go through cells of any color. For example, in the table 3 \u00d7 4 the manhattan distance between ( 1, 2) and ( 3, 3) is 3 , one of the shortest paths is the following: ( 1, 2) \u2192 ( 2, 2) \u2192 ( 2, 3) \u2192 ( 3, 3) . Egor decided to calculate the sum of manhattan distances between each pair of cells of the same color. Help him to calculate this sum.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 m , n \u00b7 m \u2264 100 000 ) \u2014 number of rows and columns in the table. Each of next n lines describes a row of the table. The i - th line contains m integers c_ i1, c_ i2, . . . , c_ im ( 1 \u2264 c_ ij\u2264 100 000 ) \u2014 colors of cells in the i - th row.",
    "output": "Print one integer \u2014 the the sum of manhattan distances between each pair of cells of the same color.",
    "note": "In the first sample there are three pairs of cells of same color: in cells ( 1, 1) and ( 2, 3) , in cells ( 1, 2) and ( 2, 2) , in cells ( 1, 3) and ( 2, 1) . The manhattan distances between them are 3 , 1 and 3 , the sum is 7 .",
    "topics": [
      "combinatorics",
      "data structures",
      "geometry",
      "math",
      "matrices",
      "sortings"
    ],
    "id": "1648A"
  },
  {
    "title": "Madoka and the Sixth-graders",
    "url": "https://codeforces.com/problemset/problem/1647/E",
    "history": "After the most stunning success with the fifth- graders, Madoka has been trusted with teaching the sixth- graders. There' s n single- place desks in her classroom. At the very beginning Madoka decided that the student number b_ i ( 1 \u2264 b_ i \u2264 n ) will sit at the desk number i . Also there' s an infinite line of students with numbers n + 1, n + 2, n + 3, . . . waiting at the door with the hope of being able to learn something from the Madoka herself. Pay attention that each student has his unique number. After each lesson, the following happens in sequence. The student sitting at the desk i moves to the desk p_ i . All students move simultaneously. If there is more than one student at a desk, the student with the lowest number keeps the place, and the others are removed from the class forever. For all empty desks in ascending order, the student from the lowest number from the outside line occupies the desk. Note that in the end there is exactly one student at each desk again. It is guaranteed that the numbers p are such that at least one student is removed after each lesson. Check out the explanation to the first example for a better understanding. After several ( possibly, zero) lessons the desk i is occupied by student a_ i . Given the values a_ 1, a_ 2, . . . , a_ n and p_ 1, p_ 2, . . . , p_ n , find the lexicographically smallest suitable initial seating permutation b_ 1, b_ 2, . . . , b_ n . The permutation is an array of n different integers from 1 up to n in any order. For example, [ 2, 3, 1, 5, 4] is a permutation, but [ 1, 2, 2] is not ( 2 occurs twice) . [ 1, 3, 4] is not a permutation either ( n= 3 but there' s 4 in the array) . For two different permutations a and b of the same length, a is lexicographically less than b if in the first position where a and b differ, the permutation a has a smaller element than the corresponding element in b .",
    "input": "The first line of input data contains an integer n ( 2 \u2264 n \u2264 10^ 5 ) \u2014 a number of desks in the classroom. The second line contains n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) \u2014 desks where the students move. It is guaranteed that p has at least two equal elements. The third line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the final seating of the students. It is guaranteed that there is an initial permutation from which the seating a can be obtained.",
    "output": "In the only line print n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 n ) \u2014 lexicographically minimum permutation describing the initial seating of the sixth- graders that can lead to the final seating a .",
    "note": "The description of the first test is below: The first picture shows the starting permutation, which is the answer. Then the students sitting at desks 1, 2 are transferred to a 5 desk. Also, a 1 student moved from a 5 desk, and a student from a 4 disk is transferred to a 3 desk. Thus, after all these transfers permutation shown in the second image is obtained. Then, at the desk with the number 5 , the student with the number 3 is expelled, and at the desk with the number 3 , the student with the number 5 is expelled. ( Since their numbers are not the smallest) Then new students with numbers 6, 7 sit at desks numbered 2, 4 . And this permutation ( after the end of the first lesson) is shown in the third image. The 4 image shows the seating arrangement, after the second lesson before all the extra ones were kicked out. And the fifth shows the final seating after 2 lesson.",
    "topics": [
      "data structures",
      "dfs and similar",
      "greedy"
    ],
    "id": "1647E"
  },
  {
    "title": "Expand the Path",
    "url": "https://codeforces.com/problemset/problem/1644/E",
    "history": "Consider a grid of size n \u00d7 n . The rows are numbered top to bottom from 1 to n , the columns are numbered left to right from 1 to n . The robot is positioned in a cell ( 1, 1) . It can perform two types of moves: D \u2014 move one cell down; R \u2014 move one cell right. The robot is not allowed to move outside the grid. You are given a sequence of moves s \u2014 the initial path of the robot. This path doesn' t lead the robot outside the grid. You are allowed to perform an arbitrary number of modifications to it ( possibly, zero) . With one modification, you can duplicate one move in the sequence. That is, replace a single occurrence of D with DD or a single occurrence of R with RR. Count the number of cells such that there exists at least one sequence of modifications that the robot visits this cell on the modified path and doesn' t move outside the grid.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of testcases. The first line of each testcase contains the single integer n ( 2 \u2264 n \u2264 10^ 8 ) \u2014 the number of rows and columns in the grid. The second line of each testcase contains a non- empty string s , consisting only of characters D and R, \u2014 the initial path of the robot. This path doesn' t lead the robot outside the grid. The total length of strings s over all testcases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each testcase, print a single integer \u2014 the number of cells such that there exists at least one sequence of modifications that the robot visits this cell on the modified path and doesn' t move outside the grid.",
    "note": "In the first testcase, it' s enough to consider the following modified paths: RD \u2192 RRD \u2192 RRRD \u2192 RRRDD \u2192 RRRDDD \u2014 this path visits cells ( 1, 1) , ( 1, 2) , ( 1, 3) , ( 1, 4) , ( 2, 4) , ( 3, 4) and ( 4, 4) ; RD \u2192 RRD \u2192 RRDD \u2192 RRDDD \u2014 this path visits cells ( 1, 1) , ( 1, 2) , ( 1, 3) , ( 2, 3) , ( 3, 3) and ( 4, 3) ; RD \u2192 RDD \u2192 RDDD \u2014 this path visits cells ( 1, 1) , ( 1, 2) , ( 2, 2) , ( 3, 2) and ( 4, 2) . Thus, the cells that are visited on at least one modified path are: ( 1, 1) , ( 1, 2) , ( 1, 3) , ( 1, 4) , ( 2, 2) , ( 2, 3) , ( 2, 4) , ( 3, 2) , ( 3, 3) , ( 3, 4) , ( 4, 2) , ( 4, 3) and ( 4, 4) . In the second testcase, there is no way to modify the sequence without moving the robot outside the grid. So the only visited cells are the ones that are visited on the path DRDRDRDR. In the third testcase, the cells that are visited on at least one modified path are: ( 1, 1) , ( 2, 1) and ( 3, 1) . Here are the cells for all testcases:",
    "topics": [
      "brute force",
      "combinatorics",
      "data structures",
      "implementation",
      "math"
    ],
    "id": "1644E"
  },
  {
    "title": "Cross Coloring",
    "url": "https://codeforces.com/problemset/problem/1644/D",
    "history": "There is a sheet of paper that can be represented with a grid of size n \u00d7 m : n rows and m columns of cells. All cells are colored in white initially. q operations have been applied to the sheet. The i - th of them can be described as follows: x_ i y_ i \u2014 choose one of k non- white colors and color the entire row x_ i and the entire column y_ i in it. The new color is applied to each cell, regardless of whether the cell was colored before the operation. The sheet after applying all q operations is called a coloring. Two colorings are different if there exists at least one cell that is colored in different colors. How many different colorings are there? Print the number modulo 998 244 353 .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of testcases. The first line of the testcase contains four integers n, m, k and q ( 1 \u2264 n, m, k, q \u2264 2 \u00b7 10^ 5 ) \u2014 the size of the sheet, the number of non- white colors and the number of operations. The i - th of the following q lines contains a description of the i - th operation \u2014 two integers x_ i and y_ i ( 1 \u2264 x_ i \u2264 n ; 1 \u2264 y_ i \u2264 m ) \u2014 the row and the column the operation is applied to. The sum of q over all testcases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each testcase, print a single integer \u2014 the number of different colorings modulo 998 244 353 .",
    "note": "",
    "topics": [
      "data structures",
      "implementation",
      "math"
    ],
    "id": "1644D"
  },
  {
    "title": "Anonymity Is Important",
    "url": "https://codeforces.com/problemset/problem/1641/C",
    "history": "In the work of a doctor, it is important to maintain the anonymity of clients and the results of tests. The test results are sent to everyone personally by email, but people are very impatient and they want to know the results right away. That' s why in the testing lab \" De- vitro\" doctors came up with an experimental way to report the results. Let' s assume that n people took the tests in the order of the queue. Then the chief doctor Sam can make several statements, in each telling if there is a sick person among the people in the queue from l - th to r - th ( inclusive) , for some values l and r . During the process, Sam will check how well this scheme works and will be interested in whether it is possible to find out the test result of i - th person from the information he announced. And if it can be done, then is that patient sick or not. Help Sam to test his scheme.",
    "input": "The first line contains two integers n , q ( 1 \u2264 n, q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of people and the number of queries. In each of the next q lines, the description of the query is given. The first number in the line is t ( t = 0 or t = 1 ) \u2014 the type of the query. If t = 0 , the line contains three more integers l, r, x ( 1 \u2264 l \u2264 r \u2264 n , x = 0 or x = 1 ) . This query means that Sam tells that among the people in the queue from l - th to r - th ( inclusive) : there was at least one sick person, if x= 1 , there is no sick people, if x= 0 . If t = 1 , the line contains one more integer j ( 1 \u2264 j \u2264 n ) \u2014 the position of the patient in the queue, for which Sam wants to know the status. All queries are correct, that means that there always exists an example of the queue of length n for which all reported results ( statements from queries with t = 0 ) are true.",
    "output": "After each Sam question ( query with t = 1 ) print: \" NO\" , if the patient is definitely not sick, \" YES\" , if the patient is definitely sick. \" N/ A\" , if it is impossible to definitely identify the status of patient having the given information.",
    "note": "In the first test for the five first queries: Initially Sam tells that people 4 , 5 are not sick. In the next query Sam asks the status of the patient 5 . From the previous query, we know that the patient is definitely not sick. In the next query Sam asks the status of the patient 6 . We don' t know any information about that patient now. After that Sam tells that there exists a sick patient among 4 , 5 , 6 . In the next query Sam asks the status of the patient 6 . Now we can tell that this patient is definitely sick.",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "dsu",
      "greedy",
      "sortings"
    ],
    "id": "1641C"
  },
  {
    "title": "Two Posters",
    "url": "https://codeforces.com/problemset/problem/1638/F",
    "history": "You want to advertise your new business, so you are going to place two posters on a billboard in the city center. The billboard consists of n vertical panels of width 1 and varying integer heights, held together by a horizontal bar. The i - th of the n panels has height h_ i . Initially, all panels hang down from the bar ( their top edges lie on it) , but before placing the two posters, you are allowed to move each panel up by any integer length, as long as it is still connected to the bar ( its bottom edge lies below or on it) . After the moves are done, you will place two posters: one below the bar and one above it. They are not allowed to go over the bar and they must be positioned completely inside of the panels. What is the maximum total area the two posters can cover together if you make the optimal moves? Note that you can also place a poster of 0 area. This case is equivalent to placing a single poster.",
    "input": "The first line of input contains one integer n ( 1 \u2264 n \u2264 10^ 4 ) \u2014 the number of vertical panels. The second line of input contains n integers h_ 1, h_ 2, . . . , h_ n ( 1 \u2264 h_ i \u2264 10^ 12 ) \u2014 the heights of the n vertical panels.",
    "output": "Print a single integer \u2014 the maximum total area the two posters can cover together.",
    "note": "In the first sample test, we can choose an upper poster with area 12 and a lower poster of area 6 as in the image below. In the second sample test, we can cover the whole billboard using a single poster.",
    "topics": [
      "brute force",
      "data structures",
      "greedy",
      "two pointers"
    ],
    "id": "1638F"
  },
  {
    "title": "Colorful Operations",
    "url": "https://codeforces.com/problemset/problem/1638/E",
    "history": "You have an array a_ 1, a_ 2, . . . , a_ n . Each element initially has value 0 and color 1 . You are also given q queries to perform: Color l r c : Change the color of elements a_ l, a_ l+ 1, \u22ef, a_ r to c ( 1 \u2264 l \u2264 r \u2264 n , 1 \u2264 c \u2264 n ) . Add c x : Add x to values of all elements a_ i ( 1 \u2264 i \u2264 n ) of color c ( 1 \u2264 c \u2264 n , - 10^ 9 \u2264 x \u2264 10^ 9 ) . Query i : Print a_ i ( 1 \u2264 i \u2264 n ) .",
    "input": "The first line of input contains two integers n and q ( 1 \u2264 n, q \u2264 10^ 6 ) \u2014 the length of array a and the number of queries you have to perform. Each of the next q lines contains the query given in the form described in the problem statement.",
    "output": "Print the answers to the queries of the third type on separate lines.",
    "note": "The first sample test is explained below. Blue, red and green represent colors 1 , 2 and 3 respectively.",
    "topics": [
      "brute force",
      "data structures",
      "implementation"
    ],
    "id": "1638E"
  },
  {
    "title": "Big Brush",
    "url": "https://codeforces.com/problemset/problem/1638/D",
    "history": "You found a painting on a canvas of size n \u00d7 m . The canvas can be represented as a grid with n rows and m columns. Each cell has some color. Cell ( i, j) has color c_ i, j . Near the painting you also found a brush in the shape of a 2 \u00d7 2 square, so the canvas was surely painted in the following way: initially, no cell was painted. Then, the following painting operation has been performed some number of times: Choose two integers i and j ( 1 \u2264 i < n , 1 \u2264 j < m ) and some color k ( 1 \u2264 k \u2264 nm ) . Paint cells ( i, j) , ( i + 1, j) , ( i, j + 1) , ( i + 1, j + 1) in color k . All cells must be painted at least once. A cell can be painted multiple times. In this case, its final color will be the last one. Find any sequence of at most nm operations that could have led to the painting you found or state that it' s impossible.",
    "input": "The first line of input contains two integers n and m ( 2 \u2264 n, m \u2264 1000 ) \u2014 the dimensions of the canvas. On the i - th of the next n lines of input, there will be m integers. The j - th of them is a_ i, j ( 1 \u2264 a_ i, j\u2264 nm ) \u2014 the color of cell ( i, j) .",
    "output": "If there is no solution, print a single integer - 1 . Otherwise, on the first line, print one integer q ( 1 \u2264 q \u2264 nm ) \u2014 the number of operations. Next, print the operations in order. On the k - th of the next q lines, print three integers i , j , c ( 1 \u2264 i < n , 1 \u2264 j < m , 1 \u2264 c \u2264 nm ) \u2014 the description of the k - th operation. If there are multiple solutions, print any.",
    "note": "In the first test case, the solution is not unique. Here' s one of them: In the second test case, there is no way one could obtain the given painting, thus the answer is - 1 .",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "1638D"
  },
  {
    "title": "Inversion Graph",
    "url": "https://codeforces.com/problemset/problem/1638/C",
    "history": "You are given a permutation p_ 1, p_ 2, . . . , p_ n . Then, an undirected graph is constructed in the following way: add an edge between vertices i , j such that i < j if and only if p_ i > p_ j . Your task is to count the number of connected components in this graph. Two vertices u and v belong to the same connected component if and only if there is at least one path along edges connecting u and v . A permutation is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [ 2, 3, 1, 5, 4] is a permutation, but [ 1, 2, 2] is not a permutation ( 2 appears twice in the array) and [ 1, 3, 4] is also not a permutation ( n= 3 but there is 4 in the array) .",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of the permutation. The second line of each test case contains n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) \u2014 the elements of the permutation. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print one integer k \u2014 the number of connected components.",
    "note": "Each separate test case is depicted in the image below. The colored squares represent the elements of the permutation. For one permutation, each color represents some connected component. The number of distinct colors is the answer.",
    "topics": [
      "data structures",
      "dsu",
      "graphs",
      "math"
    ],
    "id": "1638C"
  },
  {
    "title": "Odd Swap Sort",
    "url": "https://codeforces.com/problemset/problem/1638/B",
    "history": "You are given an array a_ 1, a_ 2, . . . , a_ n . You can perform operations on the array. In each operation you can choose an integer i ( 1 \u2264 i < n ) , and swap elements a_ i and a_ i+ 1 of the array, if a_ i + a_ i+ 1 is odd. Determine whether it can be sorted in non- decreasing order using this operation any number of times.",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of the array. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print \" Yes\" or \" No\" depending on whether you can or can not sort the given array. You may print each letter in any case ( for example, \" YES\" , \" Yes\" , \" yes\" , \" yEs\" will all be recognized as positive answer) .",
    "note": "In the first test case, we can simply swap 31 and 14 ( 31 + 14 = 45 which is odd) and obtain the non- decreasing array [ 1, 6, 14, 31] . In the second test case, the only way we could sort the array is by swapping 4 and 2 , but this is impossible, since their sum 4 + 2 = 6 is even. In the third test case, there is no way to make the array non- decreasing. In the fourth test case, the array is already non- decreasing.",
    "topics": [
      "data structures",
      "math",
      "sortings"
    ],
    "id": "1638B"
  },
  {
    "title": "Minimize Inversions Number",
    "url": "https://codeforces.com/problemset/problem/1637/H",
    "history": "You are given a permutation p of length n . You can choose any subsequence, remove it from the permutation, and insert it at the beginning of the permutation keeping the same order. For every k from 0 to n , find the minimal possible number of inversions in the permutation after you choose a subsequence of length exactly k .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 50 000 ) \u2014 the number of test cases. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 5 \u00b7 10^ 5 ) \u2014 the length of the permutation. The second line of each test case contains the permutation p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) . It is guaranteed that the total sum of n doesn' t exceed 5 \u00b7 10^ 5 .",
    "output": "For each test case output n + 1 integers. The i - th of them must be the answer for the subsequence length of i - 1 .",
    "note": "In the second test case: For the length 0 : [ 4, 2, 1, 3] \u2192 [ 4, 2, 1, 3] : 4 inversions. For the length 1 : [ 4, 2, 1, 3] \u2192 [ 1, 4, 2, 3] : 2 inversions. For the length 2 : [ 4, 2, 1, 3] \u2192 [ 2, 1, 4, 3] , or [ 4, 2, 1, 3] \u2192 [ 1, 3, 4, 2] : 2 inversions. For the length 3 : [ 4, 2, 1, 3] \u2192 [ 2, 1, 3, 4] : 1 inversion. For the length 4 : [ 4, 2, 1, 3] \u2192 [ 4, 2, 1, 3] : 4 inversions.",
    "topics": [
      "data structures",
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1637H"
  },
  {
    "title": "Closest Pair ",
    "url": "https://codeforces.com/problemset/problem/1635/F",
    "history": "There are n weighted points on the OX - axis. The coordinate and the weight of the i - th point is x_ i and w_ i , respectively. All points have distinct coordinates and positive weights. Also, x_ i < x_ i + 1 holds for any 1 \u2264 i < n . The weighted distance between i - th point and j - th point is defined as | x_ i - x_ j| \u00b7 ( w_ i + w_ j) , where | val| denotes the absolute value of val . You should answer q queries, where the i - th query asks the following: Find the minimum weighted distance among all pairs of distinct points among the points in subarray [ l_ i, r_ i] .",
    "input": "The first line contains 2 integers n and q ( 2 \u2264 n \u2264 3 \u00b7 10^ 5; 1 \u2264 q \u2264 3 \u00b7 10^ 5) \u2014 the number of points and the number of queries. Then, n lines follows, the i - th of them contains two integers x_ i and w_ i ( - 10^ 9 \u2264 x_ i \u2264 10^ 9; 1 \u2264 w_ i \u2264 10^ 9) \u2014 the coordinate and the weight of the i - th point. It is guaranteed that the points are given in the increasing order of x . Then, q lines follows, the i - th of them contains two integers l_ i and r_ i ( 1 \u2264 l_ i < r_ i \u2264 n) \u2014 the given subarray of the i - th query.",
    "output": "For each query output one integer, the minimum weighted distance among all pair of distinct points in the given subarray.",
    "note": "For the first query, the minimum weighted distance is between points 1 and 3 , which is equal to | x_ 1 - x_ 3| \u00b7 ( w_ 1 + w_ 3) = | - 2 - 1| \u00b7 ( 2 + 1) = 9 . For the second query, the minimum weighted distance is between points 2 and 3 , which is equal to | x_ 2 - x_ 3| \u00b7 ( w_ 2 + w_ 3) = | 0 - 1| \u00b7 ( 10 + 1) = 11 . For the fourth query, the minimum weighted distance is between points 3 and 4 , which is equal to | x_ 3 - x_ 4| \u00b7 ( w_ 3 + w_ 4) = | 1 - 9| \u00b7 ( 1 + 2) = 24 .",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "1635F"
  },
  {
    "title": "Fibonacci Additions",
    "url": "https://codeforces.com/problemset/problem/1634/F",
    "history": "One of my most productive days was throwing away 1, 000 lines of code. \u2014 Ken ThompsonFibonacci addition is an operation on an array X of integers, parametrized by indices l and r . Fibonacci addition increases X_ l by F_ 1 , increases X_ l + 1 by F_ 2 , and so on up to X_ r which is increased by F_ r - l + 1 . F_ i denotes the i - th Fibonacci number ( F_ 1 = 1 , F_ 2 = 1 , F_ i = F_ i - 1 + F_ i - 2 for i > 2 ) , and all operations are performed modulo MOD . You are given two arrays A and B of the same length. We will ask you to perform several Fibonacci additions on these arrays with different parameters, and after each operation you have to report whether arrays A and B are equal modulo MOD .",
    "input": "The first line contains 3 numbers n , q and MOD ( 1 \u2264 n, q \u2264 3\u00b7 10^ 5, 1 \u2264 MOD \u2264 10^ 9+ 7 ) \u2014 the length of the arrays, the number of operations, and the number modulo which all operations are performed. The second line contains n numbers \u2014 array A ( 0 \u2264 A_ i < MOD ) . The third line also contains n numbers \u2014 array B ( 0 \u2264 B_ i < MOD ) . The next q lines contain character c and two numbers l and r ( 1 \u2264 l \u2264 r \u2264 n ) \u2014 operation parameters. If c is \" A\" , Fibonacci addition is to be performed on array A , and if it is is \" B\" , the operation is to be performed on B .",
    "output": "After each operation, print \" YES\" ( without quotes) if the arrays are equal and \" NO\" otherwise. Letter case does not matter.",
    "note": "Explanation of the test from the condition: Initially A= [ 2, 2, 1] , B= [ 0, 0, 0] . After operation \" A 1 3\" : A= [ 0, 0, 0] , B= [ 0, 0, 0] ( addition is modulo 3) . After operation \" A 1 3\" : A= [ 1, 1, 2] , B= [ 0, 0, 0] . After operation \" B 1 1\" : A= [ 1, 1, 2] , B= [ 1, 0, 0] . After operation \" B 2 2\" : A= [ 1, 1, 2] , B= [ 1, 1, 0] . After operation \" A 3 3\" : A= [ 1, 1, 0] , B= [ 1, 1, 0] .",
    "topics": [
      "brute force",
      "data structures",
      "hashing",
      "implementation",
      "math"
    ],
    "id": "1634F"
  },
  {
    "title": "Fair Share",
    "url": "https://codeforces.com/problemset/problem/1634/E",
    "history": "Even a cat has things it can do that AI cannot. \u2014 Fei- Fei LiYou are given m arrays of positive integers. Each array is of even length. You need to split all these integers into two equal multisets L and R , that is, each element of each array should go into one of two multisets ( but not both) . Additionally, for each of the m arrays, exactly half of its elements should go into L , and the rest should go into R . Give an example of such a division or determine that no such division exists.",
    "input": "The first line contains an integer m ( 1 \u2264 m \u2264 10 ^ 5 ) \u2014 the number of arrays. The next 2 \u00b7 m lines contain descriptions of the arrays. For each array, the first line contains an even integer n ( 2 \u2264 n \u2264 2 \u00b7 10 ^ 5 ) \u2014 the length of the array. The second line consists of n space- separated integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10 ^ 9 ) \u2014 array elements. It is guaranteed that the sum of n over all arrays does not exceed 2 \u00b7 10^ 5 .",
    "output": "If the answer exists, print \" YES\" , and then print m lines. On each line, for each element, print the letter \" L\" or \" R\" ( capitalized, without spaces) , depending on which multiset the element should go into. If there is no answer, print \" NO\" on the only line.",
    "note": "In the first array, we add the first element to R and the second to L . Now L = { 2} , and R = { 1} . In the second array, we add the first and third elements to L and the rest to R . Now L = { 1, 2, 3} and R = { 1, 2, 3} . In the third array, we add elements 2, 3, and 6 to L , and others \u2014 to R . As a result, L = R = { 1, 1, 2, 2, 3, 3} .",
    "topics": [
      "constructive algorithms",
      "data structures",
      "dfs and similar",
      "graph matchings",
      "graphs"
    ],
    "id": "1634E"
  },
  {
    "title": "Perfect Matching",
    "url": "https://codeforces.com/problemset/problem/1633/F",
    "history": "You are given a tree consisting of n vertices ( numbered from 1 to n ) and n- 1 edges ( numbered from 1 to n- 1 ) . Initially, all vertices except vertex 1 are inactive. You have to process queries of three types: 1 v \u2014 activate the vertex v . It is guaranteed that the vertex v is inactive before this query, and one of its neighbors is active. After activating the vertex, you have to choose a subset of edges of the tree such that each active vertex is incident to exactly one chosen edge, and each inactive vertex is not incident to any of the chosen edges \u2014 in other words, this subset should represent a perfect matching on the active part of the tree. If any such subset of edges exists, print the sum of indices of edges in it; otherwise, print 0 . 2 \u2014 queries of this type will be asked only right after a query of type 1 , and there will be at most 10 such queries. If your answer to the previous query was 0 , simply print 0 ; otherwise, print the subset of edges for the previous query as follows: first, print the number of edges in the subset, then print the indices of the chosen edges in ascending order. The sum of indices should be equal to your answer to the previous query. 3 \u2014 terminate the program. Note that you should solve the problem in online mode. It means that you can' t read the whole input at once. You can read each query only after writing the answer for the last query. Use functions fflush in C+ + and BufferedWriter. flush in Java languages after each writing in your program.",
    "input": "The first line contains one integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of vertices of the tree. Then n- 1 lines follow. The i - th line contains two integers u_ i and v_ i ( 1 \u2264 u_ i, v_ i \u2264 n ; u_ i v_ i ) \u2014 the endpoints of the i - th edge. These edges form a tree. Then the queries follow in the format described in the statement, one line per query. There will be at least 2 and at most n+ 10 queries. The last query ( and only the last one) will be of type 3 . Note that you can read the i - th query only if you have already given the answer for the query i- 1 ( except for i = 1 ) . If your answer for one of the queries is incorrect and the judging program recognizes it, instead of the next query, you may receive the integer 0 on a separate line. After receiving it, your program should terminate gracefully, and you will receive \" Wrong Answer\" verdict. If your program doesn' t terminate, your solution may receive some other verdict, like \" Time Limit Exceeded\" , \" Idleness Limit Exceeded\" , etc. Note that the fact that your solution doesn' t receive the integer 0 , it does not mean that all your answers are correct, some of them will be checked only after your program is terminated.",
    "output": "For each query of type 1 or 2 , print the answer on a separate line as described in the statement. Don' t forget to flush the output.",
    "note": "",
    "topics": [
      "data structures",
      "divide and conquer",
      "interactive",
      "trees"
    ],
    "id": "1633F"
  },
  {
    "title": "Spanning Tree Queries",
    "url": "https://codeforces.com/problemset/problem/1633/E",
    "history": "You are given a connected weighted undirected graph, consisting of n vertices and m edges. You are asked k queries about it. Each query consists of a single integer x . For each query, you select a spanning tree in the graph. Let the weights of its edges be w_ 1, w_ 2, . . . , w_ n- 1 . The cost of a spanning tree is \u2211_ i= 1^ n- 1 | w_ i - x| ( the sum of absolute differences between the weights and x ) . The answer to a query is the lowest cost of a spanning tree. The queries are given in a compressed format. The first p ( 1 \u2264 p \u2264 k) queries q_ 1, q_ 2, . . . , q_ p are provided explicitly. For queries from p+ 1 to k , q_ j = ( q_ j- 1\u00b7 a + b) c . Print the xor of answers to all queries.",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 50 ; n - 1 \u2264 m \u2264 300 ) \u2014 the number of vertices and the number of edges in the graph. Each of the next m lines contains a description of an undirected edge: three integers v , u and w ( 1 \u2264 v, u \u2264 n ; v = \u0338 u ; 0 \u2264 w \u2264 10^ 8 ) \u2014 the vertices the edge connects and its weight. Note that there might be multiple edges between a pair of vertices. The edges form a connected graph. The next line contains five integers p, k, a, b and c ( 1 \u2264 p \u2264 10^ 5 ; p \u2264 k \u2264 10^ 7 ; 0 \u2264 a, b \u2264 10^ 8 ; 1 \u2264 c \u2264 10^ 8 ) \u2014 the number of queries provided explicitly, the total number of queries and parameters to generate the queries. The next line contains p integers q_ 1, q_ 2, . . . , q_ p ( 0 \u2264 q_ j < c ) \u2014 the first p queries.",
    "output": "Print a single integer \u2014 the xor of answers to all queries.",
    "note": "The queries in the first example are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 . The answers are 11, 9, 7, 3, 1, 5, 8, 7, 5, 7, 11 . The queries in the second example are 3, 0, 2, 1, 6, 0, 3, 5, 4, 1 . The answers are 14, 19, 15, 16, 11, 19, 14, 12, 13, 16 . The queries in the third example are 75, 0, 0, . . . . The answers are 50, 150, 150, . . . .",
    "topics": [
      "binary search",
      "data structures",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "math",
      "sortings",
      "trees"
    ],
    "id": "1633E"
  },
  {
    "title": "Distance Tree (easy version)",
    "url": "https://codeforces.com/problemset/problem/1632/E1",
    "history": "This version of the problem differs from the next one only in the constraint on n . A tree is a connected undirected graph without cycles. A weighted tree has a weight assigned to each edge. The distance between two vertices is the minimum sum of weights on the path connecting them. You are given a weighted tree with n vertices, each edge has a weight of 1 . Denote d( v) as the distance between vertex 1 and vertex v . Let f( x) be the minimum possible value of max_ 1 \u2264 v \u2264 n d( v) if you can temporarily add an edge with weight x between any two vertices a and b ( 1 \u2264 a, b \u2264 n) . Note that after this operation, the graph is no longer a tree. For each integer x from 1 to n , find f( x) .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 2 \u2264 n \u2264 3000 ) . Each of the next n\u22121 lines contains two integers u and v ( 1 \u2264 u, v \u2264 n ) indicating that there is an edge between vertices u and v . It is guaranteed that the given edges form a tree. It is guaranteed that the sum of n over all test cases doesn' t exceed 3000 .",
    "output": "For each test case, print n integers in a single line, x - th of which is equal to f( x) for all x from 1 to n .",
    "note": "In the first testcase: For x = 1 , we can an edge between vertices 1 and 3 , then d( 1) = 0 and d( 2) = d( 3) = d( 4) = 1 , so f( 1) = 1 . For x \u2265 2 , no matter which edge we add, d( 1) = 0 , d( 2) = d( 4) = 1 and d( 3) = 2 , so f( x) = 2 .",
    "topics": [
      "binary search",
      "data structures",
      "dfs and similar",
      "graphs",
      "shortest paths",
      "trees"
    ],
    "id": "1632E1"
  },
  {
    "title": "New Year Concert",
    "url": "https://codeforces.com/problemset/problem/1632/D",
    "history": "New Year is just around the corner, which means that in School 179, preparations for the concert are in full swing. There are n classes in the school, numbered from 1 to n , the i - th class has prepared a scene of length a_ i minutes. As the main one responsible for holding the concert, Idnar knows that if a concert has k scenes of lengths b_ 1 , b_ 2 , . . . , b_ k minutes, then the audience will get bored if there exist two integers l and r such that 1 \u2264 l \u2264 r \u2264 k and ( b_ l, b_ l + 1, . . . , b_ r - 1, b_ r) = r - l + 1 , where ( b_ l, b_ l + 1, . . . , b_ r - 1, b_ r) is equal to the greatest common divisor ( GCD) of the numbers b_ l , b_ l + 1 , . . . , b_ r - 1 , b_ r . To avoid boring the audience, Idnar can ask any number of times ( possibly zero) for the t - th class ( 1 \u2264 t \u2264 k ) to make a new scene d minutes in length, where d can be any positive integer. Thus, after this operation, b_ t is equal to d . Note that t and d can be different for each operation. For a sequence of scene lengths b_ 1 , b_ 2 , . . . , b_ k , let f( b) be the minimum number of classes Idnar has to ask to change their scene if he wants to avoid boring the audience. Idnar hasn' t decided which scenes will be allowed for the concert, so he wants to know the value of f for each non- empty prefix of a . In other words, Idnar wants to know the values of f( a_ 1) , f( a_ 1 , a_ 2) , . . . , f( a_ 1 , a_ 2 , . . . , a_ n) .",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of classes in the school. The second line contains n positive integers a_ 1 , a_ 2 , . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the lengths of the class scenes.",
    "output": "Print a sequence of n integers in a single line \u2014 f( a_ 1) , f( a_ 1 , a_ 2) , . . . , f( a_ 1 , a_ 2 , . . . , a_ n) .",
    "note": "In the first test we can change 1 to 2 , so the answer is 1 . In the second test: [ 1] can be changed into [ 2] , [ 1, 4] can be changed into [ 3, 4] , [ 1, 4, 2] can be changed into [ 2, 3, 2] .",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "math",
      "number theory",
      "two pointers"
    ],
    "id": "1632D"
  },
  {
    "title": "Range and Partition",
    "url": "https://codeforces.com/problemset/problem/1630/B",
    "history": "Given an array a of n integers, find a range of values [ x, y] ( x \u2264 y ) , and split a into exactly k ( 1 \u2264 k \u2264 n ) subarrays in such a way that: Each subarray is formed by several continuous elements of a , that is, it is equal to a_ l, a_ l+ 1, . . . , a_ r for some l and r ( 1 \u2264 l \u2264 r \u2264 n ) . Each element from a belongs to exactly one subarray. In each subarray the number of elements inside the range [ x, y] ( inclusive) is strictly greater than the number of elements outside the range. An element with index i is inside the range [ x, y] if and only if x \u2264 a_ i \u2264 y . Print any solution that minimizes y - x .",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 3 \u00b7 10^ 4 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the array a and the number of subarrays required in the partition. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) where a_ i is the i - th element of the array. It is guaranteed that the sum of n over all test cases does not exceed 2\u00b710^ 5 .",
    "output": "For each test case, print k+ 1 lines. In the first line, print x and y \u2014 the limits of the found range. Then print k lines, the i - th should contain l_ i and r_ i ( 1\u2264 l_ i \u2264 r_ i \u2264 n ) \u2014 the limits of the i - th subarray. You can print the subarrays in any order.",
    "note": "In the first test, there should be only one subarray, which must be equal to the whole array. There are 2 elements inside the range [ 1, 2] and 0 elements outside, if the chosen range is [ 1, 1] , there will be 1 element inside ( a_ 1 ) and 1 element outside ( a_ 2 ) , and the answer will be invalid. In the second test, it is possible to choose the range [ 2, 2] , and split the array in subarrays ( 1, 3) and ( 4, 4) , in subarray ( 1, 3) there are 2 elements inside the range ( a_ 2 and a_ 3 ) and 1 element outside ( a_ 1 ) , in subarray ( 4, 4) there is only 1 element ( a_ 4 ) , and it is inside the range. In the third test, it is possible to choose the range [ 5, 5] , and split the array in subarrays ( 1, 4) , ( 5, 7) and ( 8, 11) , in the subarray ( 1, 4) there are 3 elements inside the range and 1 element outside, in the subarray ( 5, 7) there are 2 elements inside and 1 element outside and in the subarray ( 8, 11) there are 3 elements inside and 1 element outside.",
    "topics": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "greedy",
      "two pointers"
    ],
    "id": "1630B"
  },
  {
    "title": "Spaceship Crisis Management",
    "url": "https://codeforces.com/problemset/problem/1628/F",
    "history": "NASA ( Norwegian Astronaut Stuff Association) is developing a new steering system for spaceships. But in its current state, it wouldn' t be very safe if the spaceship would end up in a bunch of space junk. To make the steering system safe, they need to answer the following: Given the target position t = ( 0, 0) , a set of n pieces of space junk l described by line segments l_ i = ( ( a_ ix, a_ iy) , ( b_ ix, b_ iy) ) , and a starting position s = ( s_ x, s_ y) , is there a direction such that floating in that direction from the starting position would lead to the target position? When the spaceship hits a piece of space junk, what happens depends on the absolute difference in angle between the floating direction and the line segment, \u03b8 : If \u03b8 < 45^ \u2218 , the spaceship slides along the piece of space junk in the direction that minimizes the change in angle, and when the spaceship slides off the end of the space junk, it continues floating in the direction it came in ( before hitting the space junk) . If \u03b8\u2265 45^ \u2218 , the spaceship stops, because there is too much friction to slide along the space junk. You are only given the set of pieces of space junk once, and the target position is always ( 0, 0) , but there are q queries, each with a starting position s_ j = ( s_ jx, s_ jy) . Answer the above question for each query.",
    "input": "The first line contains the the integer n ( 1 \u2264 n \u2264 1500 ) . Then follows n lines, the i - th of which containing the 4 integers a_ ix , a_ iy , b_ ix , and b_ iy ( | a_ ix| , | a_ iy| , | b_ ix| , | b_ iy| \u2264 1000 ) . Then follows a line containing the integer q ( 1 \u2264 q \u2264 1000 ) . Then follows q lines, the j - th of which containing the 2 integers s_ jx and s_ jy ( | s_ jx| , | s_ jy| \u2264 1000 ) . It is guaranteed that none of the segments in l cross or touch, that t is not on any segment in l , that s_ j is not on any segment in l , and that s = \u0338 t .",
    "output": "For each query s_ j print an answer. If there exists a direction such that floating from s_ j in that direction, possibly sliding along some pieces of space junk, leads to t , print \" YES\" . Otherwise, print \" NO\" ( case insensitive) .",
    "note": "The blue cross represents the target location, and the other blue line segments represent the space junk. Green dots represent starting locations where the answer is yes, and red dots represent starting locations where the answer is no. The yellow lines are possible paths to the target location for the 3 rd and 14 th queries. The black line is a possible path from the starting location in the 6 th query, but it barely misses the target location.",
    "topics": [
      "binary search",
      "data structures",
      "geometry",
      "sortings"
    ],
    "id": "1628F"
  },
  {
    "title": "Groceries in Meteor Town",
    "url": "https://codeforces.com/problemset/problem/1628/E",
    "history": "Mihai lives in a town where meteor storms are a common problem. It' s annoying, because Mihai has to buy groceries sometimes, and getting hit by meteors isn' t fun. Therefore, we ask you to find the most dangerous way to buy groceries so that we can trick him to go there. The town has n buildings numbered from 1 to n . Some buildings have roads between them, and there is exactly 1 simple path from any building to any other building. Each road has a certain meteor danger level. The buildings all have grocery stores, but Mihai only cares about the open ones, of course. Initially, all the grocery stores are closed. You are given q queries of three types: Given the integers l and r , the buildings numbered from l to r open their grocery stores ( nothing happens to buildings in the range that already have an open grocery store) . Given the integers l and r , the buildings numbered from l to r close their grocery stores ( nothing happens to buildings in the range that didn' t have an open grocery store) . Given the integer x , find the maximum meteor danger level on the simple path from x to any open grocery store, or - 1 if there is no edge on any simple path to an open store.",
    "input": "The first line contains the two integers n and q ( 2 \u2264 n, q \u2264 3\u00b7 10^ 5 ) . Then follows n - 1 lines, the i - th of which containing the integers u_ i , v_ i , and w_ i ( 1 \u2264 u_ i, v_ i \u2264 n, 1 \u2264 w_ i \u2264 10^ 9 ) meaning there is two way road between building u_ i and v_ i with meteor danger level w_ i . It is guaranteed that the given edges form a tree. Then follows q lines, the j - th of which begin with the integer t_ j ( 1 \u2264 t_ j \u2264 3 ) , meaning the j - th query is of the t_ j - th type. If t_ j is 1 or 2 the rest of the line contains the integers l_ j and r_ j ( 1 \u2264 l_ j \u2264 r_ j \u2264 n ) . If t_ j is 3 the rest of the line contains the integer x_ j ( 1 \u2264 x_ j \u2264 n ) .",
    "output": "For each query of the 3 rd type ( t_ j = 3 ) , output the maximum meteor danger level that is on some edge on the simple path from x_ j to some open store, or - 1 if there is no such edge.",
    "note": "This is an illustration of the town given in the sample input. In the first query, there are no open stores, so obviously there are no edges on the simple path from 1 to any open store, so the answer is - 1 . After the second and third queries, the set of open stores is { 1} . The simple path from 1 to 1 has no edges, so the answer for the 3 rd query is - 1 . After the fourth query, there are no open stores. After the fifth and sixth queries, the set of open stores is { 5, 6} . In the sixth query, there are two paths from x_ j = 4 to some open grocery store: 4 to 5 and 4 to 6 . The biggest meteor danger is found on the edge from 4 to 6 , so the answer for the 6 th query is 4 . This path is marked with red in the illustration. After the rest of the queries, the set of open stores is { 5} . In the eighth query, the only path from x_ j = 4 to an open store is from 4 to 5 , and the maximum weight on that path is 3 . This path is marked with green in the illustration. In the ninth query, the only path from x_ j = 1 to an open store is from 1 to 5 , and the maximum weight on that path is 5 . This path is marked with blue in the illustration.",
    "topics": [
      "binary search",
      "data structures",
      "dsu",
      "trees"
    ],
    "id": "1628E"
  },
  {
    "title": "Not Escaping",
    "url": "https://codeforces.com/problemset/problem/1627/E",
    "history": "Major Ram is being chased by his arch enemy Raghav. Ram must reach the top of the building to escape via helicopter. The building, however, is on fire. Ram must choose the optimal path to reach the top of the building to lose the minimum amount of health. The building consists of n floors, each with m rooms each. Let ( i, j) represent the j - th room on the i - th floor. Additionally, there are k ladders installed. The i - th ladder allows Ram to travel from ( a_ i, b_ i) to ( c_ i, d_ i) , but not in the other direction. Ram also gains h_ i health points if he uses the ladder i . It is guaranteed a_ i < c_ i for all ladders. If Ram is on the i - th floor, he can move either left or right. Travelling across floors, however, is treacherous. If Ram travels from ( i, j) to ( i, k) , he loses | j- k| \u00b7 x_ i health points. Ram enters the building at ( 1, 1) while his helicopter is waiting at ( n, m) . What is the minimum amount of health Ram loses if he takes the most optimal path? Note this answer may be negative ( in which case he gains health) . Output \" NO ESCAPE\" if no matter what path Ram takes, he cannot escape the clutches of Raghav.",
    "input": "The first line of input contains t ( 1 \u2264 t \u2264 5 \u00b7 10^ 4 ) \u2014 the number of test cases. The first line of each test case consists of 3 integers n, m, k ( 2 \u2264 n, m \u2264 10^ 5 ; 1 \u2264 k \u2264 10^ 5 ) \u2014 the number of floors, the number of rooms on each floor and the number of ladders respectively. The second line of a test case consists of n integers x_ 1, x_ 2, . . . , x_ n ( 1 \u2264 x_ i \u2264 10^ 6 ) . The next k lines describe the ladders. Ladder i is denoted by a_ i, b_ i, c_ i, d_ i, h_ i ( 1 \u2264 a_ i < c_ i \u2264 n ; 1 \u2264 b_ i, d_ i \u2264 m ; 1 \u2264 h_ i \u2264 10^ 6 ) \u2014 the rooms it connects and the health points gained from using it. It is guaranteed a_ i < c_ i for all ladders and there is at most one ladder between any 2 rooms in the building. The sum of n , the sum of m , and the sum of k over all test cases do not exceed 10^ 5 .",
    "output": "Output the minimum health Ram loses on the optimal path from ( 1, 1) to ( n, m) . If Ram cannot escape the clutches of Raghav regardless of the path he takes, output \" NO ESCAPE\" ( all uppercase, without quotes) .",
    "note": "The figure for the first test case is in the statement. There are only 2 possible paths to ( n, m) : Ram travels to ( 1, 3) , takes the ladder to ( 3, 3) , travels to ( 3, 2) , takes the ladder to ( 5, 1) , travels to ( 5, 3) where he finally escapes via helicopter. The health lost would be = x_ 1 \u00b7 | 1- 3| - h_ 1 + x_ 3 \u00b7 | 3- 2| - h_ 3 + x_ 5 \u00b7 | 1- 3| = 5 \u00b7 2 - 4 + 8 \u00b7 1 - 6 + 4 \u00b7 2 = 16. Ram travels to ( 1, 3) , takes the ladder to ( 3, 3) , travels to ( 3, 1) , takes the ladder to ( 5, 2) , travels to ( 5, 3) where he finally escapes via helicopter. The health lost would be = x_ 1 \u00b7 | 1- 3| - h_ 1 + x_ 3 \u00b7 | 3- 1| - h_ 2 + a_ 5 \u00b7 | 2- 3| = 5 \u00b7 2 - 4 + 8 \u00b7 2 - 5 + 4 \u00b7 1 = 21. Therefore, the minimum health lost would be 16 . In the second test case, there is no path to ( n, m) . In the third case case, Ram travels to ( 1, 3) and takes the only ladder to ( 5, 3) . He loses 5 \u00b7 2 health points and gains h_ 1 = 100 health points. Therefore the total loss is 10- 100= - 90 ( negative implies he gains health after the path) .",
    "topics": [
      "data structures",
      "dp",
      "implementation",
      "shortest paths",
      "two pointers"
    ],
    "id": "1627E"
  },
  {
    "title": "Monsters And Spells",
    "url": "https://codeforces.com/problemset/problem/1626/C",
    "history": "Monocarp is playing a computer game once again. He is a wizard apprentice, who only knows a single spell. Luckily, this spell can damage the monsters. The level he' s currently on contains n monsters. The i - th of them appears k_ i seconds after the start of the level and has h_ i health points. As an additional constraint, h_ i \u2264 k_ i for all 1 \u2264 i \u2264 n . All k_ i are different. Monocarp can cast the spell at moments which are positive integer amounts of second after the start of the level: 1, 2, 3, . . . The damage of the spell is calculated as follows. If he didn' t cast the spell at the previous second, the damage is 1 . Otherwise, let the damage at the previous second be x . Then he can choose the damage to be either x + 1 or 1 . A spell uses mana: casting a spell with damage x uses x mana. Mana doesn' t regenerate. To kill the i - th monster, Monocarp has to cast a spell with damage at least h_ i at the exact moment the monster appears, which is k_ i . Note that Monocarp can cast the spell even when there is no monster at the current second. The mana amount required to cast the spells is the sum of mana usages for all cast spells. Calculate the least amount of mana required for Monocarp to kill all monsters. It can be shown that it' s always possible to kill all monsters under the constraints of the problem.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of testcases. The first line of the testcase contains a single integer n ( 1 \u2264 n \u2264 100 ) \u2014 the number of monsters in the level. The second line of the testcase contains n integers k_ 1 < k_ 2 < . . . < k_ n ( 1 \u2264 k_ i \u2264 10^ 9 ) \u2014 the number of second from the start the i - th monster appears at. All k_ i are different, k_ i are provided in the increasing order. The third line of the testcase contains n integers h_ 1, h_ 2, . . . , h_ n ( 1 \u2264 h_ i \u2264 k_ i \u2264 10^ 9 ) \u2014 the health of the i - th monster. The sum of n over all testcases doesn' t exceed 10^ 4 .",
    "output": "For each testcase, print a single integer \u2014 the least amount of mana required for Monocarp to kill all monsters.",
    "note": "In the first testcase of the example, Monocarp can cast spells 3, 4, 5 and 6 seconds from the start with damages 1, 2, 3 and 4 , respectively. The damage dealt at 6 seconds is 4 , which is indeed greater than or equal to the health of the monster that appears. In the second testcase of the example, Monocarp can cast spells 3, 4 and 5 seconds from the start with damages 1, 2 and 3 , respectively. In the third testcase of the example, Monocarp can cast spells 4, 5, 7, 8 and 9 seconds from the start with damages 1, 2, 1, 1 and 2 , respectively.",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "greedy",
      "implementation",
      "math",
      "two pointers"
    ],
    "id": "1626C"
  },
  {
    "title": "Cats on the Upgrade (hard version)",
    "url": "https://codeforces.com/problemset/problem/1625/E2",
    "history": "This is the hard version of the problem. The only difference between the easy and the hard versions are removal queries, they are present only in the hard version. \" Interplanetary Software, Inc. \" together with \" Robots of Cydonia, Ltd. \" has developed and released robot cats. These electronic pets can meow, catch mice and entertain the owner in various ways. The developers from \" Interplanetary Software, Inc. \" have recently decided to release a software update for these robots. After the update, the cats must solve the problems about bracket sequences. One of the problems is described below. First, we need to learn a bit of bracket sequence theory. Consider the strings that contain characters \" ( \" , \" ) \" and \" . \" . Call a string regular bracket sequence ( RBS) , if it can be transformed to an empty string by one or more operations of removing either single \" . \" characters, or a continuous substring \" ( ) \" . For instance, the string \" ( ( ) ( . ) ) \" is an RBS, as it can be transformed to an empty string with the following sequence of removals: \" ( ( ) ( . ) ) \" \u2192 \" ( ( ) ( ) ) \" \u2192 \" ( ( ) ) \" \u2192 \" ( ) \" \u2192 \" \" . We got an empty string, so the initial string was an RBS. At the same time, the string \" ) ( \" is not an RBS, as it is not possible to apply such removal operations to it. An RBS is simple if this RBS is not empty, doesn' t start with \" . \" , and doesn' t end with \" . \" . Denote the substring of the string s as its sequential subsegment. In particular, s[ l. . . r] = s_ ls_ l+ 1. . . s_ r , where s_ i is the i - th character of the string s . Now, move on to the problem statement itself. You are given a string s , initially consisting of characters \" ( \" and \" ) \" . You need to answer the following queries: Given two indices, l and r ( 1 \u2264 l < r \u2264 n ) . It' s guaranteed that the l - th character is equal to \" ( \" , the r - th character is equal to \" ) \" , and the characters between them are equal to \" . \" . Then the l - th and the r - th characters must be set to \" . \" . Given two indices, l and r ( 1 \u2264 l < r \u2264 n ) , and it' s guaranteed that the substring s[ l. . . r] is a simple RBS. You need to find the number of substrings in s[ l. . . r] such that they are simple RBS. In other words, find the number of index pairs i , j such that l \u2264 i < j \u2264 r and s[ i. . . j] is a simple RBS. You are an employee in \" Interplanetary Software, Inc. \" and you were given the task to teach the cats to solve the problem above, after the update.",
    "input": "The first line contains two integers n and q ( 2 \u2264 n \u2264 3\u00b710^ 5 , 1 \u2264 q \u2264 3\u00b710^ 5 ) , the length of the string, and the number of queries. The second line contains the string s , consisting of n characters \" ( \" and \" ) \" . Each of the following q lines contains three integers t , l and r ( t \u2208{ 1, 2} , 1 \u2264 l < r \u2264 n ) , the queries you need to answer. It is guaranteed that all the queries are valid and correspond to the problem statements.",
    "output": "For each query, print a single integer in a separate line, the number of substrings that are simple RBS. The answers must be printed in the same order as the queries are specified in the input.",
    "note": "Consider the example test case. The answer to the first query is 3 , as there are three suitable substrings: s[ 3. . . 6] , s[ 3. . . 4] and s[ 5. . . 6] . The answer to the second query is 4 . The substrings are s[ 3. . . 6] , s[ 3. . . 4] , s[ 5. . . 6] and s[ 2. . . 7] . After the third query, the string becomes \" ) ( . . ( ) ) ( ) \" . The answer to the fourth query is 2 . The substrings are s[ 5. . . 6] and s[ 2. . . 7] . Note that s[ 3. . . 6] is not a simple RBS anymore, as it starts with \" . \" . The answer to the fifth query is 4 . The substrings are s[ 5. . . 6] , s[ 2. . . 7] , s[ 8. . . 9] and s[ 2. . . 9] . After the sixth query, the string becomes \" ) ( . . . . ) ( ) \" . After the seventh query, the string becomes \" ) . . . . . . ( ) \" . The answer to the eighth query is 1 . The substring is s[ 8. . . 9] .",
    "topics": [
      "binary search",
      "data structures",
      "dfs and similar",
      "graphs",
      "trees"
    ],
    "id": "1625E2"
  },
  {
    "title": "Cats on the Upgrade (easy version)",
    "url": "https://codeforces.com/problemset/problem/1625/E1",
    "history": "This is the easy version of the problem. The only difference between the easy and the hard versions are removal queries, they are present only in the hard version. \" Interplanetary Software, Inc. \" together with \" Robots of Cydonia, Ltd. \" has developed and released robot cats. These electronic pets can meow, catch mice and entertain the owner in various ways. The developers from \" Interplanetary Software, Inc. \" have recently decided to release a software update for these robots. After the update, the cats must solve the problems about bracket sequences. One of the problems is described below. First, we need to learn a bit of bracket sequence theory. Consider the strings that contain characters \" ( \" , \" ) \" and \" . \" . Call a string regular bracket sequence ( RBS) , if it can be transformed to an empty string by one or more operations of removing either single \" . \" characters, or a continuous substring \" ( ) \" . For instance, the string \" ( ( ) ( . ) ) \" is an RBS, as it can be transformed to an empty string with the following sequence of removals: \" ( ( ) ( . ) ) \" \u2192 \" ( ( ) ( ) ) \" \u2192 \" ( ( ) ) \" \u2192 \" ( ) \" \u2192 \" \" . We got an empty string, so the initial string was an RBS. At the same time, the string \" ) ( \" is not an RBS, as it is not possible to apply such removal operations to it. An RBS is simple if this RBS is not empty, doesn' t start with \" . \" , and doesn' t end with \" . \" . Denote the substring of the string s as its sequential subsegment. In particular, s[ l. . . r] = s_ ls_ l+ 1. . . s_ r , where s_ i is the i - th character of the string s . Now, move on to the problem statement itself. You are given a string s , initially consisting of characters \" ( \" and \" ) \" . You need to answer the queries of the following kind. Given two indices, l and r ( 1 \u2264 l < r \u2264 n ) , and it' s guaranteed that the substring s[ l. . . r] is a simple RBS. You need to find the number of substrings in s[ l. . . r] such that they are simple RBS. In other words, find the number of index pairs i , j such that l \u2264 i < j \u2264 r and s[ i. . . j] is a simple RBS. You are an employee in \" Interplanetary Software, Inc. \" and you were given the task to teach the cats to solve the problem above, after the update. Note that the \" . \" character cannot appear in the string in this version of the problem. It is only needed for the hard version.",
    "input": "The first line contains two integers n and q ( 2 \u2264 n \u2264 3\u00b710^ 5 , 1 \u2264 q \u2264 3\u00b710^ 5 ) , the length of the string, and the number of queries. The second line contains the string s , consisting of n characters \" ( \" and \" ) \" . Each of the following q lines contains three integers t , l and r ( t = 2 , 1 \u2264 l < r \u2264 n ) , the queries you need to answer. It is guaranteed that all the queries are valid and correspond to the problem statements. Note that t is unused and always equal to two in this problem. It is required for the hard version of the problem.",
    "output": "For each query, print a single integer in a separate line, the number of substrings that are simple RBS. The answers must be printed in the same order as the queries are specified in the input.",
    "note": "Consider the example test case. The answer to the first query is 3 , as there are three suitable substrings: s[ 3. . . 6] , s[ 3. . . 4] and s[ 5. . . 6] . The answer to the second query is 4 . The substrings are s[ 3. . . 6] , s[ 3. . . 4] , s[ 5. . . 6] and s[ 2. . . 7] . The answer to the third query is 1 . The substring is s[ 8. . . 9] . The answer to the fourth query is 6 . The substrings are s[ 3. . . 6] , s[ 3. . . 4] , s[ 5. . . 6] , s[ 2. . . 7] , s[ 8. . . 9] and s[ 2. . . 9] .",
    "topics": [
      "brute force",
      "data structures",
      "dfs and similar",
      "divide and conquer",
      "dp",
      "graphs",
      "trees"
    ],
    "id": "1625E1"
  },
  {
    "title": "Binary Spiders",
    "url": "https://codeforces.com/problemset/problem/1625/D",
    "history": "Binary Spiders are species of spiders that live on Mars. These spiders weave their webs to defend themselves from enemies. To weave a web, spiders join in pairs. If the first spider in pair has x legs, and the second spider has y legs, then they weave a web with durability x \u2295 y . Here, \u2295 means bitwise XOR. Binary Spiders live in large groups. You observe a group of n spiders, and the i - th spider has a_ i legs. When the group is threatened, some of the spiders become defenders. Defenders are chosen in the following way. First, there must be at least two defenders. Second, any pair of defenders must be able to weave a web with durability at least k . Third, there must be as much defenders as possible. Scientists have researched the behaviour of Binary Spiders for a long time, and now they have a hypothesis that they can always choose the defenders in an optimal way, satisfying the conditions above. You need to verify this hypothesis on your group of spiders. So, you need to understand how many spiders must become defenders. You are not a Binary Spider, so you decided to use a computer to solve this problem.",
    "input": "The first line contains two integers n and k ( 2 \u2264 n \u2264 3\u00b710^ 5 , 0 \u2264 k \u2264 2^ 30 - 1 ) , the amount of spiders in the group and the minimal allowed durability of a web. The second line contains n integers a_ i ( 0 \u2264 a_ i \u2264 2^ 30- 1 ) \u2014 the number of legs the i - th spider has.",
    "output": "In the first line, print a single integer l ( 2 \u2264l\u2264 n ) , the maximum possible amount of defenders. In the second line, print l integers b_ i , separated by a single space ( 1 \u2264 b_ i \u2264 n ) \u2014 indices of spiders that will become defenders. If there exists more than one way to choose the defenders, print any of them. Unfortunately, it may appear that it' s impossible to choose the defenders. In this case, print a single integer - 1 .",
    "note": "Consider the examples above. In the first example, the group of spiders is illustrated on the picture below: We choose the two- legged, the ten- legged and the 16 - legged spiders. It' s not hard to see that each pair may weave a web with enough durability, as 2 \u2295 10 = 8 \u2265 8 , 2 \u2295 16 = 18 \u2265 8 and 10 \u2295 16 = 26 \u2265 8 . This is not the only way, as you can also choose, for example, the spiders with indices 3 , 4 , and 6 . In the second example, no pair of spiders can weave the web with durability 1024 or more, so the answer is - 1 .",
    "topics": [
      "bitmasks",
      "data structures",
      "implementation",
      "math",
      "sortings",
      "trees"
    ],
    "id": "1625D"
  },
  {
    "title": "Middle Duplication",
    "url": "https://codeforces.com/problemset/problem/1623/E",
    "history": "A binary tree of n nodes is given. Nodes of the tree are numbered from 1 to n and the root is the node 1 . Each node can have no child, only one left child, only one right child, or both children. For convenience, let' s denote l_ u and r_ u as the left and the right child of the node u respectively, l_ u = 0 if u does not have the left child, and r_ u = 0 if the node u does not have the right child. Each node has a string label, initially is a single character c_ u . Let' s define the string representation of the binary tree as the concatenation of the labels of the nodes in the in- order. Formally, let f( u) be the string representation of the tree rooted at the node u . f( u) is defined as follows: f( u) = , if u = 0; f( l_ u) + c_ u + f( r_ u) otherwise, where + denotes the string concatenation operation. This way, the string representation of the tree is f( 1) . For each node, we can duplicate its label at most once, that is, assign c_ u with c_ u + c_ u , but only if u is the root of the tree, or if its parent also has its label duplicated. You are given the tree and an integer k . What is the lexicographically smallest string representation of the tree, if we can duplicate labels of at most k nodes? A string a is lexicographically smaller than a string b if and only if one of the following holds: a is a prefix of b , but a b ; in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b .",
    "input": "The first line contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 2 \u00b7 10^ 5 ) . The second line contains a string c of n lower- case English letters, where c_ i is the initial label of the node i for 1 \u2264 i \u2264 n . Note that the given string c is not the initial string representation of the tree. The i - th of the next n lines contains two integers l_ i and r_ i ( 0 \u2264 l_ i, r_ i \u2264 n ) . If the node i does not have the left child, l_ i = 0 , and if the node i does not have the right child, r_ i = 0 . It is guaranteed that the given input forms a binary tree, rooted at 1 .",
    "output": "Print a single line, containing the lexicographically smallest string representation of the tree if at most k nodes have their labels duplicated.",
    "note": "The images below present the tree for the examples. The number in each node is the node number, while the subscripted letter is its label. To the right is the string representation of the tree, with each letter having the same color as the corresponding node. Here is the tree for the first example. Here we duplicated the labels of nodes 1 and 3 . We should not duplicate the label of node 2 because it would give us the string \" bbaaab\" , which is lexicographically greater than \" baaaab\" . In the second example, we can duplicate the labels of nodes 1 and 2 . Note that only duplicating the label of the root will produce a worse result than the initial string. In the third example, we should not duplicate any character at all. Even though we would want to duplicate the label of the node 3 , by duplicating it we must also duplicate the label of the node 2 , which produces a worse result. There is no way to produce string \" darkkcyan\" from a tree with the initial string representation \" darkcyan\" : ( .",
    "topics": [
      "data structures",
      "dfs and similar",
      "greedy",
      "strings",
      "trees"
    ],
    "id": "1623E"
  },
  {
    "title": "Berland Music",
    "url": "https://codeforces.com/problemset/problem/1622/B",
    "history": "Berland Music is a music streaming service built specifically to support Berland local artist. Its developers are currently working on a song recommendation module. So imagine Monocarp got recommended n songs, numbered from 1 to n . The i - th song had its predicted rating equal to p_ i , where 1 \u2264 p_ i \u2264 n and every integer from 1 to n appears exactly once. In other words, p is a permutation. After listening to each of them, Monocarp pressed either a like or a dislike button. Let his vote sequence be represented with a string s , such that s_ i= 0 means that he disliked the i - th song, and s_ i= 1 means that he liked it. Now the service has to re- evaluate the song ratings in such a way that: the new ratings q_ 1, q_ 2, . . . , q_ n still form a permutation ( 1 \u2264 q_ i \u2264 n ; each integer from 1 to n appears exactly once) ; every song that Monocarp liked should have a greater rating than every song that Monocarp disliked ( formally, for all i, j such that s_ i= 1 and s_ j= 0 , q_ i> q_ j should hold) . Among all valid permutations q find the one that has the smallest value of \u2211_ i= 1^ n | p_ i- q_ i| , where | x| is an absolute value of x . Print the permutation q_ 1, q_ 2, . . . , q_ n . If there are multiple answers, you can print any of them.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of testcases. The first line of each testcase contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of songs. The second line of each testcase contains n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) \u2014 the permutation of the predicted ratings. The third line contains a single string s , consisting of n characters. Each character is either a 0 or a 1 . 0 means that Monocarp disliked the song, and 1 means that he liked it. The sum of n over all testcases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each testcase, print a permutation q \u2014 the re- evaluated ratings of the songs. If there are multiple answers such that \u2211_ i= 1^ n | p_ i- q_ i| is minimum possible, you can print any of them.",
    "note": "In the first testcase, there exists only one permutation q such that each liked song is rating higher than each disliked song: song 1 gets rating 2 and song 2 gets rating 1 . \u2211_ i= 1^ n | p_ i- q_ i| = | 1- 2| + | 2- 1| = 2 . In the second testcase, Monocarp liked all songs, so all permutations could work. The permutation with the minimum sum of absolute differences is the permutation equal to p . Its cost is 0 .",
    "topics": [
      "data structures",
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1622B"
  },
  {
    "title": "Two Sequences",
    "url": "https://codeforces.com/problemset/problem/1621/I",
    "history": "Consider an array of integers C = [ c_ 1, c_ 2, . . . , c_ n] of length n . Let' s build the sequence of arrays D_ 0, D_ 1, D_ 2, . . . , D_ n of length n+ 1 in the following way: The first element of this sequence will be equals C : D_ 0 = C . For each 1 \u2264 i \u2264 n array D_ i will be constructed from D_ i- 1 in the following way: Let' s find the lexicographically smallest subarray of D_ i- 1 of length i . Then, the first n- i elements of D_ i will be equals to the corresponding n- i elements of array D_ i- 1 and the last i elements of D_ i will be equals to the corresponding elements of the found subarray of length i . Array x is subarray of array y , if x can be obtained by deletion of several ( possibly, zero or all) elements from the beginning of y and several ( possibly, zero or all) elements from the end of y . For array C let' s denote array D_ n as op( C) . Alice has an array of integers A = [ a_ 1, a_ 2, . . . , a_ n] of length n . She will build the sequence of arrays B_ 0, B_ 1, . . . , B_ n of length n+ 1 in the following way: The first element of this sequence will be equals A : B_ 0 = A . For each 1 \u2264 i \u2264 n array B_ i will be equals op( B_ i- 1) , where op is the transformation described above. She will ask you q queries about elements of sequence of arrays B_ 0, B_ 1, . . . , B_ n . Each query consists of two integers i and j , and the answer to this query is the value of the j - th element of array B_ i .",
    "input": "The first line contains the single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of array A . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 the array A . The third line contains the single integer q ( 1 \u2264 q \u2264 10^ 6 ) \u2014 the number of queries. Each of the next q lines contains two integers i , j ( 1 \u2264 i, j \u2264 n ) \u2014 parameters of queries.",
    "output": "Output q integers: values of B_ i, j for required i , j .",
    "note": "In the first test case B_ 0 = A = [ 2, 1, 3, 1] . B_ 1 is constructed in the following way: Initially, D_ 0 = [ 2, 1, 3, 1] . For i= 1 the lexicographically smallest subarray of D_ 0 of length 1 is [ 1] , so D_ 1 will be [ 2, 1, 3, 1] . For i= 2 the lexicographically smallest subarray of D_ 1 of length 2 is [ 1, 3] , so D_ 2 will be [ 2, 1, 1, 3] . For i= 3 the lexicographically smallest subarray of D_ 2 of length 3 is [ 1, 1, 3] , so D_ 3 will be [ 2, 1, 1, 3] . For i= 4 the lexicographically smallest subarray of D_ 3 of length 4 is [ 2, 1, 1, 3] , so D_ 4 will be [ 2, 1, 1, 3] . So, B_ 1 = op( B_ 0) = op( [ 2, 1, 3, 1] ) = [ 2, 1, 1, 3] .",
    "topics": [
      "data structures",
      "hashing",
      "string suffix structures"
    ],
    "id": "1621I"
  },
  {
    "title": "Weighted Increasing Subsequences",
    "url": "https://codeforces.com/problemset/problem/1621/G",
    "history": "You are given the sequence of integers a_ 1, a_ 2, . . . , a_ n of length n . The sequence of indices i_ 1 < i_ 2 < . . . < i_ k of length k denotes the subsequence a_ i_ 1, a_ i_ 2, . . . , a_ i_ k of length k of sequence a . The subsequence a_ i_ 1, a_ i_ 2, . . . , a_ i_ k of length k of sequence a is called increasing subsequence if a_ i_ j < a_ i_ j+ 1 for each 1 \u2264 j < k . The weight of the increasing subsequence a_ i_ 1, a_ i_ 2, . . . , a_ i_ k of length k of sequence a is the number of 1 \u2264 j \u2264 k , such that exists index i_ k < x \u2264 n and a_ x > a_ i_ j . For example, if a = [ 6, 4, 8, 6, 5] , then the sequence of indices i = [ 2, 4] denotes increasing subsequence [ 4, 6] of sequence a . The weight of this increasing subsequence is 1 , because for j = 1 exists x = 5 and a_ 5 = 5 > a_ i_ 1 = 4 , but for j = 2 such x doesn' t exist. Find the sum of weights of all increasing subsequences of a modulo 10^ 9+ 7 .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains the single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the sequence a . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the sequence a . It is guaranteed that the sum of n over all test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print the sum of weights of all increasing subsequences a modulo 10^ 9+ 7 .",
    "note": "In the first test case the following increasing subsequences of a have not zero weight: The weight of [ a_ 1] = [ 6] is 1 . The weight of [ a_ 2] = [ 4] is 1 . The weight of [ a_ 2, a_ 3] = [ 4, 8] is 1 . The weight of [ a_ 2, a_ 4] = [ 4, 6] is 1 . The sum of weights of increasing subsequences is 4 . In the second test case there are 7 increasing subsequences of a with not zero weight: 3 with weight 1 , 3 with weight 2 and 1 with weight 3 . The sum of weights is 12 .",
    "topics": [
      "data structures",
      "dp",
      "math"
    ],
    "id": "1621G"
  },
  {
    "title": "Strange Instructions",
    "url": "https://codeforces.com/problemset/problem/1621/F",
    "history": "Dasha has 10^ 100 coins. Recently, she found a binary string s of length n and some operations that allows to change this string ( she can do each operation any number of times) : Replace substring 00 of s by 0 and receive a coins. Replace substring 11 of s by 1 and receive b coins. Remove 0 from any position in s and pay c coins. It turned out that while doing this operations Dasha should follow the rule: It is forbidden to do two operations with the same parity in a row. Operations are numbered by integers 1 - 3 in the order they are given above. Please, calculate what is the maximum profit Dasha can get by doing these operations and following this rule.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains four integers n , a , b , c ( 1 \u2264 n \u2264 10^ 5, 1 \u2264 a, b, c \u2264 10^ 9 ) . The second line of each test case contains a binary string s of length n . It is guaranteed that the total sum of n over all test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case print the answer.",
    "note": "In the first test case one of the optimal sequences of operations is 01101 \u2192 0101 \u2192 011 \u2192 01. This sequence of operations consists of operations 2 , 3 and 2 in this order. It satisfies all rules and gives profit 3 . It can be shown that it is impossible to achieve higher profit in this test case, so the answer is 3 . In the second test case one of the optimal sequences of operations is 110001 \u2192 11001 \u2192 1001 \u2192 101. In the third test case one of the optimal sequences of operations is 011110 \u2192 01110 \u2192 1110 \u2192 110 \u2192 11 \u2192 1.",
    "topics": [
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "1621F"
  },
  {
    "title": "New School",
    "url": "https://codeforces.com/problemset/problem/1621/E",
    "history": "You have decided to open a new school. You have already found n teachers and m groups of students. The i - th group of students consists of k_ i \u2265 2 students. You know age of each teacher and each student. The ages of teachers are a_ 1, a_ 2, . . . , a_ n and the ages of students of the i - th group are b_ i, 1, b_ i, 2, . . . , b_ i, k_ i . To start lessons you should assign the teacher to each group of students. Such assignment should satisfy the following requirements: To each group exactly one teacher assigned. To each teacher at most 1 group of students assigned. The average of students' ages in each group doesn' t exceed the age of the teacher assigned to this group. The average of set x_ 1, x_ 2, . . . , x_ k of k integers is x_ 1 + x_ 2 + . . . + x_ k/ k . Recently you have heard that one of the students will refuse to study in your school. After this, the size of one group will decrease by 1 while all other groups will remain unchanged. You don' t know who will refuse to study. For each student determine if you can start lessons in case of his refusal. Note, that it is not guaranteed that it is possible to start lessons before any refusal.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains two integers n and m ( 1 \u2264 m \u2264 n \u2264 10^ 5 ) \u2014 the number of teachers and the number of groups of students. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 5 ) \u2014 the ages of teachers. The next 2m lines contains descriptions of groups. The first line of description of group contains a single integer k_ i ( 2 \u2264 k_ i \u2264 10^ 5 ) \u2014 the number of students in this group. The second line of description of group contains k_ i integers b_ i, 1, b_ i, 2, . . . , b_ i, k_ i ( 1 \u2264 b_ i, j\u2264 10^ 5 ) \u2014 the ages of students of this group. It is guaranteed that the total sum of n over all test cases doesn' t exceed 10^ 5 and that the total sum of k_ 1 + k_ 2 + . . . + k_ m over all test cases doesn' t exceed 2 \u00b7 10^ 5",
    "output": "For each test case output string of symbols 0 and 1 of length k_ 1 + k_ 2 + . . . + k_ m . The i - th symbol of this string should be equals 1 if it is possible to start lessons in case of the i - th student refuse and it should be equals 0 otherwise. Students are numbered by integers from 1 to k_ 1 + k_ 2 + . . . + k_ m in the order they appear in the input. Thus, students of the 1 - st group are numbered by integers 1 , 2 , . . . , k_ 1 , students of the 2 - nd group are numbered by integers k_ 1 + 1 , k_ 1 + 2 , . . . , k_ 1 + k_ 2 and so on.",
    "note": "In the first test case there is one group of students with average age 25+ 16+ 37/ 3= 26 and one teacher with age 30 . There exists only one assignment that allows to start lessons. If the student with age 16 will refuse to study, the average age of students in this group will become 25+ 37/ 2= 31 so there won' t be any assignment that allows to start lessons. In the second test case it is impossible to start lessons initially. However, if the 3 - rd student with age 111 will refuse to study, the average ages of groups will become 4 + 5/ 2= 4. 5 and 11+ 11/ 2 = 11 correspondingly. Then it is possible to assing the first group to the first teacher and the second group to the third teacher.",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "1621E"
  },
  {
    "title": "Integers Shop",
    "url": "https://codeforces.com/problemset/problem/1621/B",
    "history": "The integers shop sells n segments. The i - th of them contains all integers from l_ i to r_ i and costs c_ i coins. Tomorrow Vasya will go to this shop and will buy some segments there. He will get all integers that appear in at least one of bought segments. The total cost of the purchase is the sum of costs of all segments in it. After shopping, Vasya will get some more integers as a gift. He will get integer x as a gift if and only if all of the following conditions are satisfied: Vasya hasn' t bought x . Vasya has bought integer l that is less than x . Vasya has bought integer r that is greater than x . Vasya can get integer x as a gift only once so he won' t have the same integers after receiving a gift. For example, if Vasya buys segment [ 2, 4] for 20 coins and segment [ 7, 8] for 22 coins, he spends 42 coins and receives integers 2, 3, 4, 7, 8 from these segments. He also gets integers 5 and 6 as a gift. Due to the technical issues only the first s segments ( that is, segments [ l_ 1, r_ 1] , [ l_ 2, r_ 2] , . . . , [ l_ s, r_ s] ) will be available tomorrow in the shop. Vasya wants to get ( to buy or to get as a gift) as many integers as possible. If he can do this in differents ways, he selects the cheapest of them. For each s from 1 to n , find how many coins will Vasya spend if only the first s segments will be available.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains the single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of segments in the shop. Each of next n lines contains three integers l_ i , r_ i , c_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 10^ 9, 1 \u2264 c_ i \u2264 10^ 9 ) \u2014 the ends of the i - th segments and its cost. It is guaranteed that the total sum of n over all test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case output n integers: the s - th ( 1 \u2264 s \u2264 n ) of them should be the number of coins Vasia will spend in the shop if only the first s segments will be available.",
    "note": "In the first test case if s = 1 then Vasya can buy only the segment [ 2, 4] for 20 coins and get 3 integers. The way to get 7 integers for 42 coins in case s = 2 is described in the statement. In the second test case note, that there can be the same segments in the shop.",
    "topics": [
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "1621B"
  },
  {
    "title": "Replace the Numbers",
    "url": "https://codeforces.com/problemset/problem/1620/E",
    "history": "You have an array of integers ( initially empty) . You have to perform q queries. Each query is of one of two types: \" 1 x \" \u2014 add the element x to the end of the array; \" 2 x y \" \u2014 replace all occurrences of x in the array with y . Find the resulting array after performing all the queries.",
    "input": "The first line contains a single integer q ( 1 \u2264 q \u2264 5 \u00b7 10^ 5 ) \u2014 the number of queries. Next q lines contain queries ( one per line) . Each query is of one of two types: \" 1 x \" ( 1 \u2264 x \u2264 5 \u00b7 10^ 5 ) ; \" 2 x y \" ( 1 \u2264 x, y \u2264 5 \u00b7 10^ 5 ) . It' s guaranteed that there is at least one query of the first type.",
    "output": "In a single line, print k integers \u2014 the resulting array after performing all the queries, where k is the number of queries of the first type.",
    "note": "In the first example, the array changes as follows: [ ] \u2192 [ 3] \u2192 [ 3, 1] \u2192 [ 3, 2] \u2192 [ 3, 2, 2] \u2192 [ 3, 2, 2, 1] \u2192 [ 3, 2, 2, 1, 2] \u2192 [ 3, 2, 2, 3, 2] . In the second example, the array changes as follows: [ ] \u2192 [ 1] \u2192 [ 1, 2] \u2192 [ 1, 2, 1] \u2192 [ 1, 2, 1] . In the third example, the array changes as follows: [ ] \u2192 [ ] \u2192 [ 1] \u2192 [ 1, 4] \u2192 [ 1, 4, 2] \u2192 [ 1, 4, 4] \u2192 [ 1, 3, 3] \u2192 [ 1, 3, 3, 2] \u2192 [ 1, 3, 3, 7] .",
    "topics": [
      "constructive algorithms",
      "data structures",
      "dsu",
      "implementation"
    ],
    "id": "1620E"
  },
  {
    "title": "Permutation and Queries",
    "url": "https://codeforces.com/problemset/problem/1619/H",
    "history": "You are given a permutation p of n elements. A permutation of n elements is an array of length n containing each integer from 1 to n exactly once. For example, [ 1, 2, 3] and [ 4, 3, 5, 1, 2] are permutations, but [ 1, 2, 4] and [ 4, 3, 2, 1, 2] are not permutations. You should perform q queries. There are two types of queries: 1 x y \u2014 swap p_ x and p_ y . 2 i k \u2014 print the number that i will become if we assign i = p_ i k times.",
    "input": "The first line contains two integers n and q ( 1 \u2264 n, q \u2264 10^ 5 ) . The second line contains n integers p_ 1, p_ 2, . . . , p_ n . Each of the next q lines contains three integers. The first integer is t ( 1 \u2264 t \u2264 2 ) \u2014 type of query. If t = 1 , then the next two integers are x and y ( 1 \u2264 x, y \u2264 n ; x y ) \u2014 first- type query. If t = 2 , then the next two integers are i and k ( 1 \u2264 i, k \u2264 n ) \u2014 second- type query. It is guaranteed that there is at least one second- type query.",
    "output": "For every second- type query, print one integer in a new line \u2014 answer to this query.",
    "note": "In the first example p = { 5, 3, 4, 2, 1} . The first query is to print p_ 3 . The answer is 4 . The second query is to print p_ p_ 1 . The answer is 1 . The third query is to swap p_ 1 and p_ 3 . Now p = { 4, 3, 5, 2, 1} . The fourth query is to print p_ p_ 1 . The answer is 2 .",
    "topics": [
      "brute force",
      "data structures",
      "divide and conquer",
      "two pointers"
    ],
    "id": "1619H"
  },
  {
    "title": "MEX and Increments",
    "url": "https://codeforces.com/problemset/problem/1619/E",
    "history": "Dmitry has an array of n non- negative integers a_ 1, a_ 2, . . . , a_ n . In one operation, Dmitry can choose any index j ( 1 \u2264 j \u2264 n ) and increase the value of the element a_ j by 1 . He can choose the same index j multiple times. For each i from 0 to n , determine whether Dmitry can make the MEX of the array equal to exactly i . If it is possible, then determine the minimum number of operations to do it. The MEX of the array is equal to the minimum non- negative integer that is not in the array. For example, the MEX of the array [ 3, 1, 0] is equal to 2 , and the array [ 3, 3, 1, 4] is equal to 0 .",
    "input": "The first line of input data contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the input. The descriptions of the test cases follow. The first line of the description of each test case contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the array a . The second line of the description of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 n ) \u2014 elements of the array a . It is guaranteed that the sum of the values n over all test cases in the test does not exceed 2\u00b710^ 5 .",
    "output": "For each test case, output n + 1 integer \u2014 i - th number is equal to the minimum number of operations for which you can make the array MEX equal to i ( 0 \u2264 i \u2264 n ) , or - 1 if this cannot be done.",
    "note": "In the first set of example inputs, n= 3 : to get MEX= 0 , it is enough to perform one increment: a_ 1 + + ; to get MEX= 1 , it is enough to perform one increment: a_ 2 + + ; MEX= 2 for a given array, so there is no need to perform increments; it is impossible to get MEX= 3 by performing increments.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "dp",
      "greedy",
      "implementation",
      "math",
      "sortings"
    ],
    "id": "1619E"
  },
  {
    "title": "Trader Problem",
    "url": "https://codeforces.com/problemset/problem/1618/G",
    "history": "Monocarp plays a computer game ( yet again! ) . This game has a unique trading mechanics. To trade with a character, Monocarp has to choose one of the items he possesses and trade it for some item the other character possesses. Each item has an integer price. If Monocarp' s chosen item has price x , then he can trade it for any item ( exactly one item) with price not greater than x+ k . Monocarp initially has n items, the price of the i - th item he has is a_ i . The character Monocarp is trading with has m items, the price of the i - th item they have is b_ i . Monocarp can trade with this character as many times as he wants ( possibly even zero times) , each time exchanging one of his items with one of the other character' s items according to the aforementioned constraints. Note that if Monocarp gets some item during an exchange, he can trade it for another item ( since now the item belongs to him) , and vice versa: if Monocarp trades one of his items for another item, he can get his item back by trading something for it. You have to answer q queries. Each query consists of one integer, which is the value of k , and asks you to calculate the maximum possible total cost of items Monocarp can have after some sequence of trades, assuming that he can trade an item of cost x for an item of cost not greater than x+ k during each trade. Note that the queries are independent: the trades do not actually occur, Monocarp only wants to calculate the maximum total cost he can get.",
    "input": "The first line contains three integers n , m and q ( 1 \u2264 n, m, q \u2264 2 \u00b7 10^ 5 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the prices of the items Monocarp has. The third line contains m integers b_ 1, b_ 2, . . . , b_ m ( 1 \u2264 b_ i \u2264 10^ 9 ) \u2014 the prices of the items the other character has. The fourth line contains q integers, where the i - th integer is the value of k for the i - th query ( 0 \u2264 k \u2264 10^ 9 ) .",
    "output": "For each query, print one integer \u2014 the maximum possible total cost of items Monocarp can have after some sequence of trades, given the value of k from the query.",
    "note": "",
    "topics": [
      "data structures",
      "dsu",
      "greedy",
      "sortings"
    ],
    "id": "1618G"
  },
  {
    "title": "Keep XOR Low",
    "url": "https://codeforces.com/problemset/problem/1616/H",
    "history": "You are given an array a_ 1, a_ 2, . . . , a_ n and an integer x . Find the number of non- empty subsets of indices of this array 1 \u2264 b_ 1 < b_ 2 < . . . < b_ k \u2264 n , such that for all pairs ( i, j) where 1 \u2264 i < j \u2264 k , the inequality a_ b_ i\u2295 a_ b_ j\u2264 x is held. Here, \u2295 denotes the bitwise XOR operation. As the answer may be very large, output it modulo 998 244 353 .",
    "input": "The first line of the input contains two integers n and x ( 1 \u2264 n \u2264 150 000 , 0 \u2264 x < 2^ 30 ) . Here, n is the size of the array. The next line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i < 2^ 30 ) : the array itself.",
    "output": "Print one integer: the number of non- empty subsets such that the bitwise XOR of every pair of elements is at most x , modulo 998 244 353 .",
    "note": "",
    "topics": [
      "bitmasks",
      "combinatorics",
      "data structures",
      "divide and conquer",
      "dp",
      "math"
    ],
    "id": "1616H"
  },
  {
    "title": "Lexicographically Small Enough",
    "url": "https://codeforces.com/problemset/problem/1616/E",
    "history": "You are given two strings s and t of equal length n . In one move, you can swap any two adjacent characters of the string s . You need to find the minimal number of operations you need to make string s lexicographically smaller than string t . A string a is lexicographically smaller than a string b if and only if one of the following holds: a is a prefix of b , but a b ; in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b .",
    "input": "The first line of input contains one integer q ( 1 \u2264 q \u2264 10 000 ) : the number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) . The second line of each test case contains the string s consisting of n lowercase English letters. The third line of each test case contains the string t consisting of n lowercase English letters. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print in a separate line the minimal number of operations you need to make string s lexicographically smaller than string t , or - 1 , if it' s impossible.",
    "note": "",
    "topics": [
      "brute force",
      "data structures",
      "greedy",
      "strings"
    ],
    "id": "1616E"
  },
  {
    "title": "Reindeer Games",
    "url": "https://codeforces.com/problemset/problem/1615/H",
    "history": "There are n reindeer at the North Pole, all battling for the highest spot on the \" Top Reindeer\" leaderboard on the front page of CodeNorses ( a popular competitive reindeer gaming website) . Interestingly, the \" Top Reindeer\" title is just a measure of upvotes and has nothing to do with their skill level in the reindeer games, but they still give it the utmost importance. Currently, the i - th reindeer has a score of a_ i . You would like to influence the leaderboard with some operations. In an operation, you can choose a reindeer, and either increase or decrease his score by 1 unit. Negative scores are allowed. You have m requirements for the resulting scores. Each requirement is given by an ordered pair ( u, v) , meaning that after all operations, the score of reindeer u must be less than or equal to the score of reindeer v . Your task is to perform the minimum number of operations so that all requirements will be satisfied.",
    "input": "The first line contains two integers n and m ( 2\u2264 n\u2264 1000 ; 1\u2264 m\u2264 1000 ) \u2014 the number of reindeer and requirements, respectively. The second line contains n integers a_ 1, . . . , a_ n ( 1\u2264 a_ i\u2264 10^ 9 ) , where a_ i is the current score of reindeer i . The next m lines describe the requirements. The i - th of these lines contains two integers u_ i and v_ i ( 1\u2264 u_ i, v_ i\u2264 n ; u_ i v_ i ) \u2014 the two reindeer of the i - th requirement.",
    "output": "Print n integers b_ 1, . . . , b_ n ( - 10^ 15\u2264 b_ i\u2264 10^ 15 ) , where b_ i is the score of the i - th reindeer after all operations. If there are multiple solutions achieving the minimum number of operations, you may output any. We can prove that there is always an optimal solution such that | b_ i| \u2264 10^ 15 for all i .",
    "note": "",
    "topics": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "divide and conquer",
      "flows",
      "graphs",
      "shortest paths"
    ],
    "id": "1615H"
  },
  {
    "title": "Purple Crayon",
    "url": "https://codeforces.com/problemset/problem/1615/E",
    "history": "Two players, Red and Blue, are at it again, and this time they' re playing with crayons! The mischievous duo is now vandalizing a rooted tree, by coloring the nodes while playing their favorite game. The game works as follows: there is a tree of size n , rooted at node 1 , where each node is initially white. Red and Blue get one turn each. Red goes first. In Red' s turn, he can do the following operation any number of times: Pick any subtree of the rooted tree, and color every node in the subtree red. However, to make the game fair, Red is only allowed to color k nodes of the tree. In other words, after Red' s turn, at most k of the nodes can be colored red. Then, it' s Blue' s turn. Blue can do the following operation any number of times: Pick any subtree of the rooted tree, and color every node in the subtree blue. However, he' s not allowed to choose a subtree that contains a node already colored red, as that would make the node purple and no one likes purple crayon. Note: there' s no restriction on the number of nodes Blue can color, as long as he doesn' t color a node that Red has already colored. After the two turns, the score of the game is determined as follows: let w be the number of white nodes, r be the number of red nodes, and b be the number of blue nodes. The score of the game is w \u00b7 ( r - b) . Red wants to maximize this score, and Blue wants to minimize it. If both players play optimally, what will the final score of the game be?",
    "input": "The first line contains two integers n and k ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ; 1 \u2264 k \u2264 n ) \u2014 the number of vertices in the tree and the maximum number of red nodes. Next n - 1 lines contains description of edges. The i - th line contains two space separated integers u_ i and v_ i ( 1 \u2264 u_ i, v_ i \u2264 n ; u_ i = \u0338 v_ i ) \u2014 the i - th edge of the tree. It' s guaranteed that given edges form a tree.",
    "output": "Print one integer \u2014 the resulting score if both Red and Blue play optimally.",
    "note": "In the first test case, the optimal strategy is as follows: Red chooses to color the subtrees of nodes 2 and 3 . Blue chooses to color the subtree of node 4 . At the end of this process, nodes 2 and 3 are red, node 4 is blue, and node 1 is white. The score of the game is 1 \u00b7 ( 2 - 1) = 1 . In the second test case, the optimal strategy is as follows: Red chooses to color the subtree of node 4 . This colors both nodes 4 and 5 . Blue does not have any options, so nothing is colored blue. At the end of this process, nodes 4 and 5 are red, and nodes 1 , 2 and 3 are white. The score of the game is 3 \u00b7 ( 2 - 0) = 6 . For the third test case: The score of the game is 4 \u00b7 ( 2 - 1) = 4 .",
    "topics": [
      "data structures",
      "dfs and similar",
      "games",
      "graphs",
      "greedy",
      "math",
      "sortings",
      "trees"
    ],
    "id": "1615E"
  },
  {
    "title": "Divan and a Cottage",
    "url": "https://codeforces.com/problemset/problem/1614/E",
    "history": "Divan' s new cottage is finally complete! However, after a thorough inspection, it turned out that the workers had installed the insulation incorrectly, and now the temperature in the house directly depends on the temperature outside. More precisely, if the temperature in the house is P in the morning, and the street temperature is T , then by the next morning the temperature in the house changes according to the following rule: P_ new = P + 1 , if P < T , P_ new = P - 1 , if P > T , P_ new = P , if P = T . Here P_ new is the temperature in the house next morning. Divan is a very busy businessman, so sometimes he is not at home for long periods and does not know what the temperature is there now, so he hired you to find it. You will work for n days. In the beginning of the i - th day, the temperature outside T_ i is first given to you. After that, on the i - th day, you will receive k_ i queries. Each query asks the following: \" if the temperature in the house was x_ i at the morning of the first day, what would be the temperature in the house next morning ( after day i ) ? \" Please answer all the businessman' s queries.",
    "input": "The first line of the input contains the number n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of days. The following is a description of n days in the following format. The first line of the description contains an integer T_ i ( 0 \u2264 T_ i \u2264 10^ 9 ) \u2014 the temperature on that day. The second line contains a non- negative integer k_ i ( 0 \u2264 k_ i \u2264 2 \u00b7 10^ 5 ) \u2014 the number of queries that day. The third line contains k integers x' _ i ( 0 \u2264 x' _ i\u2264 10^ 9 ) \u2014 the encrypted version of Divan' s queries. Let lastans = 0 initially. Divan' s actual queries are given by x_ i = ( x' _ i + lastans) ( 10^ 9 + 1) , where a b is the reminder when a is divided by b . After answering the query, set lastans to the answer. It is guaranteed that the total number of queries ( the sum of all k_ i ) does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each query, output a single integer \u2014 the temperature in the house after day i .",
    "note": "Let' s look at the first four queries from the example input. The temperature is 50 on the first day, 50 on the second day, and 0 on the third day. Note that lastans = 0 initially. The initial temperature of the first query of the first day is ( 1 + lastans) ( 10^ 9 + 1) = 1 . After the first day, the temperature rises by 1 , because 1 < 50 . So the answer to the query is 2 . Then, we set lastans = 2 . The initial temperature of the second query of the first day is ( 2 + lastans) ( 10^ 9 + 1) = 4 . After the first day, the temperature rises by 1 , because 4 < 50 . So the answer to the query is 5 . Then, we set lastans = 5 . The initial temperature of the third query of the first day is ( 3 + lastans) ( 10^ 9 + 1) = 8 . After the first day, the temperature rises by 1 . So the answer to the query is 9 . Then, we set lastans = 9 . The initial temperature of the first query of the second day is ( 4 + lastans) ( 10^ 9 + 1) = 13 . After the first day, the temperature rises by 1 . After the second day, the temperature rises by 1 . So the answer to the query is 15 . Then, we set lastans = 15 .",
    "topics": [
      "binary search",
      "data structures"
    ],
    "id": "1614E"
  },
  {
    "title": "Robot and Candies",
    "url": "https://codeforces.com/problemset/problem/1611/G",
    "history": "Polycarp has a rectangular field of n \u00d7 m cells ( the size of the n \u00b7 m field does not exceed 10^ 6 cells, m \u2265 2 ) , in each cell of which there can be candy. There are n rows and m columns in the field. Let' s denote a cell with coordinates x vertically and y horizontally by ( x, y) . Then the top- left cell will be denoted as ( 1, 1) , and the bottom- right cell will be denoted as ( n, m) . If there is candy in the cell, then the cell is marked with the symbol ' 1' , otherwise \u2014 with the symbol ' 0' . Polycarp made a Robot that can collect candy. The Robot can move from ( x, y) either to ( x+ 1, y+ 1) , or to ( x+ 1, y- 1) . If the Robot is in a cell that contains candy, it takes it. While there is at least one candy on the field, the following procedure is executed: Polycarp puts the Robot in an arbitrary cell on the topmost row of the field. He himself chooses in which cell to place the Robot. It is allowed to put the Robot in the same cell multiple times. The Robot moves across the field and collects candies. He controls the Robot. When the Robot leaves the field, Polycarp takes it. If there are still candies left, Polycarp repeats the procedure. Find the minimum number of times Polycarp needs to put the Robot on the topmost row of the field in order to collect all the candies. It is guaranteed that Polycarp can always collect all the candies.",
    "input": "The first line of input data contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of input data sets in the test. Before each input data, there is a blank line in the test. Next is a line that contains integers n and m ( 2 \u2264 m , 2 \u2264 n \u00b7 m \u2264 10^ 6 ) \u2014 field sizes. This is followed by n lines, i - th of which describes the i - th line of the field. Each of them is a string of size m characters: the symbol ' 1' corresponds to a cell with candy, the symbol ' 0' \u2014 an empty cell. It is guaranteed that the sum of n \u00b7 m values for all input data sets in the test does not exceed 10^ 6 .",
    "output": "Print t lines, each line should contain the answer to the corresponding set of input data: the minimum number of times Polycarpus needs to put the Robot on the topmost row of the field in order to collect all the candies.",
    "note": "In the first set Polycarp may not put the Robot on the field at all, so the answer \" 0\" In the second set, Polycarp will need to place the robot on the field twice. The Robot can collect candies like this: for the first time Polycarp puts the Robot in the cell ( 1, 1) and collects candies at the positions ( 1, 1) and ( 3, 3) . The second time Polycarp can again put the Robot in ( 1, 1) , and then the Robot will move first to ( 2, 2) , then to ( 3, 1) and collect the last candy. In the fourth set, you can show that the Robot cannot collect all the candies in three passes.",
    "topics": [
      "data structures",
      "graph matchings",
      "greedy"
    ],
    "id": "1611G"
  },
  {
    "title": "ATM and Students",
    "url": "https://codeforces.com/problemset/problem/1611/F",
    "history": "Polycarp started working at a bank. He was assigned to monitor the ATM. The ATM initially contains s rubles. A queue of n students lined up to him. Each student wants to either withdraw a certain amount of money or deposit it into an account. If a_ i is positive, then the student credits that amount of money via ATM. Otherwise, the student withdraws | a_ i| rubles. In the beginning, the ATM is turned off and an arbitrary number of students are not served. At some point, Polycarp turns on the ATM, which has an initial amount of s rubles. Then, the remaining students start queueing at the ATM. If at some point in time there is less money in the ATM than the student wants to withdraw, then the student is not served and Polycarp turns off the ATM and does not turn it on anymore. More formally, the students that are served are forming a contiguous subsequence. Polycarp wants the ATM to serve the maximum number of students. Help him in this matter. Print the numbers of the first and last student, or determine that he will not be able to serve anyone. In other words, find such a longest continuous segment of students that, starting with the sum of s at the ATM, all these students will be served. ATM serves students consistently ( i. e. one after another in the order of the queue) .",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Each test case consists of two lines. The first one contains integers n and s ( 1 \u2264 n \u2264 2\u00b710^ 5 ; 0 \u2264 s \u2264 10^ 9 ) \u2014 the length of the a array and the initial amount of rubles in the ATM. The second contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) \u2014 elements of the a array. Note that a_ i can be zero. It is guaranteed that the sum of the values n over all test cases does not exceed 2\u00b710^ 5 .",
    "output": "Print t lines, each line must contain the answer to the corresponding set of input data: if the answer exists, print the numbers of the first and last served student. If there is no solution, then print - 1 on the line. If there are several possible answers, print any.",
    "note": "In the first test case, the only correct answer is 2 4, since when serving students, the number of rubles at the ATM does not become negative, and this is the maximum number of students that can be served. In the second test case, the answer is - 1, as there is not enough money for any student at the ATM. In the third test case, the answer can be either 1 2 or 4 5.",
    "topics": [
      "binary search",
      "data structures",
      "two pointers"
    ],
    "id": "1611F"
  },
  {
    "title": "Squid Game",
    "url": "https://codeforces.com/problemset/problem/1610/H",
    "history": "After watching the new over- rated series Squid Game, Mashtali and Soroush decided to hold their own Squid Games! Soroush agreed to be the host and will provide money for the winner' s prize, and Mashtali became the Front Man! m players registered to play in the games to win the great prize, but when Mashtali found out how huge the winner' s prize is going to be, he decided to kill eliminate all the players so he could take the money for himself! Here is how evil Mashtali is going to eliminate players: There is an unrooted tree with n vertices. Every player has 2 special vertices x_ i and y_ i . In one operation, Mashtali can choose any vertex v of the tree. Then, for each remaining player i he finds a vertex w on the simple path from x_ i to y_ i , which is the closest to v . If w x_ i and w y_ i , player i will be eliminated. Now Mashtali wondered: \" What is the minimum number of operations I should perform so that I can remove every player from the game and take the money for myself? \" Since he was only thinking about the money, he couldn' t solve the problem by himself and asked for your help!",
    "input": "The first line contains 2 integer n and m ( 1 \u2264 n, m \u2264 3 \u00b7 10^ 5) \u2014 the number of vertices of the tree and the number of players. The second line contains n- 1 integers par_ 2, par_ 3, . . . , par_ n ( 1 \u2264 par_ i < i) \u2014 denoting an edge between node i and par_ i . The i - th of the following m lines contains two integers x_ i and y_ i ( 1 \u2264 x_ i, y_ i \u2264 n, x_ i y_ i) \u2014 the special vertices of the i - th player.",
    "output": "Print the minimum number of operations Mashtali has to perform. If there is no way for Mashtali to eliminate all the players, print - 1 .",
    "note": "Explanation for the first sample: In the first operation, Mashtali can choose vertex 1 and eliminate players with colors red and blue. In the second operation, he can choose vertex 6 and eliminate the player with orange color. In the second sample, Mashtali can' t eliminate the first player.",
    "topics": [
      "data structures",
      "dfs and similar",
      "greedy",
      "trees"
    ],
    "id": "1610H"
  },
  {
    "title": "AmShZ Wins a Bet",
    "url": "https://codeforces.com/problemset/problem/1610/G",
    "history": "Right before the UEFA Euro 2020, AmShZ and Safar placed bets on who' d be the champion, AmShZ betting on Italy, and Safar betting on France. Of course, AmShZ won. Hence, Safar gave him a bracket sequence S . Note that a bracket sequence is a string made of ' ( ' and ' ) ' characters. AmShZ can perform the following operation any number of times: First, he cuts his string S into three ( possibly empty) contiguous substrings A, B and C . Then, he glues them back by using a ' ( ' and a ' ) ' characters, resulting in a new string S = A + \" ( \" + B + \" ) \" + C . For example, if S = \" ) ) ( ( \" and AmShZ cuts it into A = \" \" , B = \" ) ) \" , and C = \" ( ( \" , He will obtain S = \" ( ) ) ) ( ( \" as a new string. After performing some ( possibly none) operations, AmShZ gives his string to Keshi and asks him to find the initial string. Of course, Keshi might be able to come up with more than one possible initial string. Keshi is interested in finding the lexicographically smallest possible initial string. Your task is to help Keshi in achieving his goal. A string a is lexicographically smaller than a string b if and only if one of the following holds: a is a prefix of b , but a b ; in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b .",
    "input": "The only line of input contains a single string S \u2014 the string after the operations ( 1\u2264 | S| \u2264 3 \u00b7 10^ 5) . It is guaranteed that the first character of S is ' ) ' .",
    "output": "Print the lexicographically smallest possible initial string before operations.",
    "note": "In the first sample, you can transform \" ) ( ( ( ) ) ) ) \" into \" ) ( ( ) ( ( ) ) ) ) \" by splitting it into \" ) ( \" , empty string, and \" ( ( ) ) ) ) \" . It can be shown that this is the lexicographically smallest possible initial string",
    "topics": [
      "data structures",
      "greedy",
      "hashing"
    ],
    "id": "1610G"
  },
  {
    "title": "A Stroll Around the Matrix",
    "url": "https://codeforces.com/problemset/problem/1609/G",
    "history": "William has two arrays of numbers a_ 1, a_ 2, . . . , a_ n and b_ 1, b_ 2, . . . , b_ m . The arrays satisfy the conditions of being convex. Formally an array c of length k is considered convex if c_ i - c_ i - 1 < c_ i + 1 - c_ i for all i from 2 to k - 1 and c_ 1 < c_ 2 . Throughout William' s life he observed q changes of two types happening to the arrays: Add the arithmetic progression d, d \u00b7 2, d \u00b7 3, . . . , d \u00b7 k to the suffix of the array a of length k . The array after the change looks like this: [ a_ 1, a_ 2, . . . , a_ n - k, a_ n - k + 1 + d, a_ n - k + 2 + d \u00b7 2, . . . , a_ n + d \u00b7 k] . The same operation, but for array b . After each change a matrix d is created from arrays a and b , of size n \u00d7 m , where d_ i, j= a_ i + b_ j . William wants to get from cell ( 1, 1 ) to cell ( n, m ) of this matrix. From cell ( x, y ) he can only move to cells ( x + 1, y ) and ( x, y + 1 ) . The length of a path is calculated as the sum of numbers in cells visited by William, including the first and the last cells. After each change William wants you to help find out the minimal length of the path he could take.",
    "input": "The first line contains three integers n , m and q ( 2 \u2264 n \u2264 100, 2 \u2264 m \u2264 10^ 5 , 1 \u2264 q \u2264 10^ 5 ) , the sizes of the arrays and the number of changes. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 12 ) , the contents of array a . The third line contains m integers b_ 1, b_ 2, . . . , b_ m ( 1 \u2264 b_ i \u2264 10^ 12 ) , the contents of array b . Each of the next q lines contains three integers type , k and d ( 1 \u2264 type \u2264 2 , if type = 1 , then 1 \u2264 k \u2264 n otherwise 1 \u2264 k \u2264 m , 1 \u2264 d \u2264 10^ 3 ) .",
    "output": "After each change, output one integer, the minimum length of the path in the constructed matrix.",
    "note": "",
    "topics": [
      "data structures",
      "greedy",
      "math"
    ],
    "id": "1609G"
  },
  {
    "title": "Interesting Sections",
    "url": "https://codeforces.com/problemset/problem/1609/F",
    "history": "William has an array of non- negative numbers a_ 1, a_ 2, . . . , a_ n . He wants you to find out how many segments l \u2264 r pass the check. The check is performed in the following manner: The minimum and maximum numbers are found on the segment of the array starting at l and ending at r . The check is considered to be passed if the binary representation of the minimum and maximum numbers have the same number of bits equal to 1.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 6 ) , the size of array a . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 18 ) , the contents of array a .",
    "output": "Output a single number \u2014 the total number of segments that passed the check.",
    "note": "",
    "topics": [
      "data structures",
      "divide and conquer",
      "meet-in-the-middle",
      "two pointers"
    ],
    "id": "1609F"
  },
  {
    "title": "William The Oblivious ",
    "url": "https://codeforces.com/problemset/problem/1609/E",
    "history": "Before becoming a successful trader William got a university degree. During his education an interesting situation happened, after which William started to listen to homework assignments much more attentively. What follows is a formal description of the homework assignment as William heard it: You are given a string s of length n only consisting of characters \" a\" , \" b\" and \" c\" . There are q queries of format ( pos, c ) , meaning replacing the element of string s at position pos with character c . After each query you must output the minimal number of characters in the string, which have to be replaced, so that the string doesn' t contain string \" abc\" as a subsequence. A valid replacement of a character is replacing it with \" a\" , \" b\" or \" c\" . A string x is said to be a subsequence of string y if x can be obtained from y by deleting some characters without changing the ordering of the remaining characters.",
    "input": "The first line contains two integers n and q ( 1 \u2264 n, q \u2264 10^ 5) , the length of the string and the number of queries, respectively. The second line contains the string s , consisting of characters \" a\" , \" b\" and \" c\" . Each of the next q lines contains an integer i and character c ( 1 \u2264 i \u2264 n) , index and the value of the new item in the string, respectively. It is guaranteed that character' s c value is \" a\" , \" b\" or \" c\" .",
    "output": "For each query output the minimal number of characters that would have to be replaced so that the string doesn' t contain \" abc\" as a subsequence.",
    "note": "Let' s consider the state of the string after each query: s = \" aaaaccccc\" . In this case the string does not contain \" abc\" as a subsequence and no replacements are needed. s = \" aaabccccc\" . In this case 1 replacements can be performed to get, for instance, string s = \" aaaaccccc\" . This string does not contain \" abc\" as a subsequence. s = \" ababccccc\" . In this case 2 replacements can be performed to get, for instance, string s = aaaaccccc\" . This string does not contain \" abc\" as a subsequence. s = \" ababacccc\" . In this case 2 replacements can be performed to get, for instance, string s = \" aaaaacccc\" . This string does not contain \" abc\" as a subsequence. s = \" bbabacccc\" . In this case 1 replacements can be performed to get, for instance, string s = \" bbacacccc\" . This string does not contain \" abc\" as a subsequence. s = \" bbababccc\" . In this case 2 replacements can be performed to get, for instance, string s = \" bbacacccc\" . This string does not contain \" abc\" as a subsequence. s = \" bbabcbccc\" . In this case 1 replacements can be performed to get, for instance, string s = \" bbcbcbccc\" . This string does not contain \" abc\" as a subsequence. s = \" baabcbccc\" . In this case 2 replacements can be performed to get, for instance, string s = \" bbbbcbccc\" . This string does not contain \" abc\" as a subsequence. s = \" aaabcbccc\" . In this case 2 replacements can be performed to get, for instance, string s = \" aaacccccc\" . This string does not contain \" abc\" as a subsequence. s = \" aaababccc\" . In this case 2 replacements can be performed to get, for instance, string s = \" aaacacccc\" . This string does not contain \" abc\" as a subsequence. s = \" aaababccc\" . In this case 2 replacements can be performed to get, for instance, string s = \" aaacacccc\" . This string does not contain \" abc\" as a subsequence. s = \" aaababbcc\" . In this case 2 replacements can be performed to get, for instance, string s = \" aaababbbb\" . This string does not contain \" abc\" as a subsequence.",
    "topics": [
      "bitmasks",
      "data structures",
      "dp",
      "matrices"
    ],
    "id": "1609E"
  },
  {
    "title": "Alphabetic Tree",
    "url": "https://codeforces.com/problemset/problem/1608/G",
    "history": "You are given m strings and a tree on n nodes. Each edge has some letter written on it. You have to answer q queries. Each query is described by 4 integers u , v , l and r . The answer to the query is the total number of occurrences of str( u, v) in strings with indices from l to r . str( u, v) is defined as the string that is made by concatenating letters written on the edges on the shortest path from u to v ( in order that they are traversed) .",
    "input": "The first line of the input contains three integers n , m and q ( 2 \u2264 n \u2264 10^ 5 , 1 \u2264 m, q \u2264 10^ 5 ) . The i - th of the following n- 1 lines contains two integers u_ i, v_ i and a lowercase Latin letter c_ i ( 1 \u2264 u_ i, v_ i \u2264 n , u_ i = \u0338 v_ i ) , denoting the edge between nodes u_ i, v_ i with a character c_ i on it. It' s guaranteed that these edges form a tree. The following m lines contain the strings consisting of lowercase Latin letters. The total length of those strings does not exceed 10^ 5 . Then q lines follow, each containing four integers u , v , l and r ( 1 \u2264 u, v \u2264 n , u = \u0338 v , 1 \u2264 l \u2264 r \u2264 m ) , denoting the queries.",
    "output": "For each query print a single integer \u2014 the answer to the query.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "dfs and similar",
      "hashing",
      "string suffix structures",
      "strings",
      "trees"
    ],
    "id": "1608G"
  },
  {
    "title": "Game Master",
    "url": "https://codeforces.com/problemset/problem/1608/C",
    "history": "n players are playing a game. There are two different maps in the game. For each player, we know his strength on each map. When two players fight on a specific map, the player with higher strength on that map always wins. No two players have the same strength on the same map. You are the game master and want to organize a tournament. There will be a total of n- 1 battles. While there is more than one player in the tournament, choose any map and any two remaining players to fight on it. The player who loses will be eliminated from the tournament. In the end, exactly one player will remain, and he is declared the winner of the tournament. For each player determine if he can win the tournament.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of players. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 , a_ i = \u0338 a_ j for i = \u0338 j ) , where a_ i is the strength of the i - th player on the first map. The third line of each test case contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 10^ 9 , b_ i = \u0338 b_ j for i = \u0338 j ) , where b_ i is the strength of the i - th player on the second map. It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case print a string of length n . i - th character should be \" 1\" if the i - th player can win the tournament, or \" 0\" otherwise.",
    "note": "In the first test case, the 4 - th player will beat any other player on any game, so he will definitely win the tournament. In the second test case, everyone can be a winner. In the third test case, there is only one player. Clearly, he will win the tournament.",
    "topics": [
      "data structures",
      "dfs and similar",
      "dp",
      "graphs",
      "greedy",
      "two pointers"
    ],
    "id": "1608C"
  },
  {
    "title": "Phys Ed Online",
    "url": "https://codeforces.com/problemset/problem/1601/E",
    "history": "Students of one unknown college don' t have PE courses. That' s why q of them decided to visit a gym nearby by themselves. The gym is open for n days and has a ticket system. At the i - th day, the cost of one ticket is equal to a_ i . You are free to buy more than one ticket per day. You can activate a ticket purchased at day i either at day i or any day later. Each activated ticket is valid only for k days. In other words, if you activate ticket at day t , it will be valid only at days t, t + 1, . . . , t + k - 1 . You know that the j - th student wants to visit the gym at each day from l_ j to r_ j inclusive. Each student will use the following strategy of visiting the gym at any day i ( l_ j \u2264 i \u2264 r_ j ) : person comes to a desk selling tickets placed near the entrance and buy several tickets with cost a_ i apiece ( possibly, zero tickets) ; if the person has at least one activated and still valid ticket, they just go in. Otherwise, they activate one of tickets purchased today or earlier and go in. Note that each student will visit gym only starting l_ j , so each student has to buy at least one ticket at day l_ j . Help students to calculate the minimum amount of money they have to spend in order to go to the gym.",
    "input": "The first line contains three integers n , q and k ( 1 \u2264 n, q \u2264 300 000 ; 1 \u2264 k \u2264 n ) \u2014 the number of days, the number of students and the number of days each ticket is still valid. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the cost of one ticket at the corresponding day. Each of the next q lines contains two integers l_ i and r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 n ) \u2014 the segment of days the corresponding student want to visit the gym.",
    "output": "For each student, print the minimum possible amount of money they have to spend in order to go to the gym at desired days.",
    "note": "Let' s see how each student have to spend their money: The first student should buy one ticket at day 1 . The second student should buy one ticket at day 3 and two tickets at day 4 . Note that student can keep purchased tickets for the next days. The third student should buy one ticket at day 5 . The fourth student should buy one ticket at day 7 . The fifth student should buy one ticket at day 3 and one at day 4 .",
    "topics": [
      "data structures",
      "dp",
      "greedy"
    ],
    "id": "1601E"
  },
  {
    "title": "Difficult Mountain",
    "url": "https://codeforces.com/problemset/problem/1601/D",
    "history": "A group of n alpinists has just reached the foot of the mountain. The initial difficulty of climbing this mountain can be described as an integer d . Each alpinist can be described by two integers s and a , where s is his skill of climbing mountains and a is his neatness. An alpinist of skill level s is able to climb a mountain of difficulty p only if p \u2264 s . As an alpinist climbs a mountain, they affect the path and thus may change mountain difficulty. Specifically, if an alpinist of neatness a climbs a mountain of difficulty p the difficulty of this mountain becomes max( p, a) . Alpinists will climb the mountain one by one. And before the start, they wonder, what is the maximum number of alpinists who will be able to climb the mountain if they choose the right order. As you are the only person in the group who does programming, you are to answer the question. Note that after the order is chosen, each alpinist who can climb the mountain, must climb the mountain at that time.",
    "input": "The first line contains two integers n and d ( 1 \u2264 n \u2264 500 000 ; 0 \u2264 d \u2264 10^ 9 ) \u2014 the number of alpinists and the initial difficulty of the mountain. Each of the next n lines contains two integers s_ i and a_ i ( 0 \u2264 s_ i, a_ i \u2264 10^ 9 ) that define the skill of climbing and the neatness of the i - th alpinist.",
    "output": "Print one integer equal to the maximum number of alpinists who can climb the mountain if they choose the right order to do so.",
    "note": "In the first example, alpinists 2 and 3 can climb the mountain if they go in this order. There is no other way to achieve the answer of 2 . In the second example, alpinist 1 is not able to climb because of the initial difficulty of the mountain, while alpinists 2 and 3 can go up in any order. In the third example, the mountain can be climbed by alpinists 5 , 3 and 4 in this particular order. There is no other way to achieve optimal answer.",
    "topics": [
      "data structures",
      "dp",
      "greedy",
      "sortings"
    ],
    "id": "1601D"
  },
  {
    "title": "Optimal Insertion",
    "url": "https://codeforces.com/problemset/problem/1601/C",
    "history": "You are given two arrays of integers a_ 1, a_ 2, . . . , a_ n and b_ 1, b_ 2, . . . , b_ m . You need to insert all elements of b into a in an arbitrary way. As a result you will get an array c_ 1, c_ 2, . . . , c_ n+ m of size n + m . Note that you are not allowed to change the order of elements in a , while you can insert elements of b at arbitrary positions. They can be inserted at the beginning, between any elements of a , or at the end. Moreover, elements of b can appear in the resulting array in any order. What is the minimum possible number of inversions in the resulting array c ? Recall that an inversion is a pair of indices ( i, j) such that i < j and c_ i > c_ j .",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . Description of the test cases follows. The first line of each test case contains two integers n and m ( 1 \u2264 n, m \u2264 10^ 6 ) . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) . The third line of each test case contains m integers b_ 1, b_ 2, . . . , b_ m ( 1 \u2264 b_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n for all tests cases in one input doesn' t exceed 10^ 6 . The sum of m for all tests cases doesn' t exceed 10^ 6 as well.",
    "output": "For each test case, print one integer \u2014 the minimum possible number of inversions in the resulting array c .",
    "note": "Below is given the solution to get the optimal answer for each of the example test cases ( elements of a are underscored) . In the first test case, c = [ 1, 1, 2, 2, 3, 3, 4] . In the second test case, c = [ 1, 2, 3, 2, 1, 3] . In the third test case, c = [ 1, 1, 3, 3, 5, 3, 1, 4, 6] .",
    "topics": [
      "data structures",
      "divide and conquer",
      "dp",
      "greedy",
      "sortings"
    ],
    "id": "1601C"
  },
  {
    "title": "Frog Traveler",
    "url": "https://codeforces.com/problemset/problem/1601/B",
    "history": "Frog Gorf is traveling through Swamp kingdom. Unfortunately, after a poor jump, he fell into a well of n meters depth. Now Gorf is on the bottom of the well and has a long way up. The surface of the well' s walls vary in quality: somewhere they are slippery, but somewhere have convenient ledges. In other words, if Gorf is on x meters below ground level, then in one jump he can go up on any integer distance from 0 to a_ x meters inclusive. ( Note that Gorf can' t jump down, only up) . Unfortunately, Gorf has to take a break after each jump ( including jump on 0 meters) . And after jumping up to position x meters below ground level, he' ll slip exactly b_ x meters down while resting. Calculate the minimum number of jumps Gorf needs to reach ground level.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 300 000 ) \u2014 the depth of the well. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 i ) , where a_ i is the maximum height Gorf can jump from i meters below ground level. The third line contains n integers b_ 1, b_ 2, . . . , b_ n ( 0 \u2264 b_ i \u2264 n - i ) , where b_ i is the distance Gorf will slip down if he takes a break on i meters below ground level.",
    "output": "If Gorf can' t reach ground level, print - 1 . Otherwise, firstly print integer k \u2014 the minimum possible number of jumps. Then print the sequence d_ 1, d_ 2, . . . , d_ k where d_ j is the depth Gorf' ll reach after the j - th jump, but before he' ll slip down during the break. Ground level is equal to 0 . If there are multiple answers, print any of them.",
    "note": "In the first example, Gorf is on the bottom of the well and jump to the height 1 meter below ground level. After that he slip down by meter and stays on height 2 meters below ground level. Now, from here, he can reach ground level in one jump. In the second example, Gorf can jump to one meter below ground level, but will slip down back to the bottom of the well. That' s why he can' t reach ground level. In the third example, Gorf can reach ground level only from the height 5 meters below the ground level. And Gorf can reach this height using a series of jumps 10 \u21d2 9 9 \u21d2 4 5 where \u21d2 is the jump and is slipping during breaks.",
    "topics": [
      "data structures",
      "dfs and similar",
      "dp",
      "graphs",
      "shortest paths",
      "two pointers"
    ],
    "id": "1601B"
  },
  {
    "title": "Desert",
    "url": "https://codeforces.com/problemset/problem/1599/I",
    "history": "You are given an undirected graph of N nodes and M edges, E_ 1, E_ 2, . . . E_ M . A connected graph is a cactus if each of it' s edges belogs to at most one simple cycle. A graph is a desert if each of it' s connected components is a cactus. Find the number of pairs ( L, R) , ( 1 \u2264 L \u2264 R \u2264 M ) such that, if we delete all the edges except for E_ L, E_ L+ 1, . . . E_ R , the graph is a desert.",
    "input": "The first line contains two integers N and M ( 2 \u2264 N \u2264 2. 5 \u00d7 10^ 5 , 1 \u2264 M \u2264 5 \u00d7 10^ 5 ) . Each of the next M lines contains two integers. The i - th line describes the i - th edge. It contains integers U_ i and V_ i , the nodes connected by the i - th edge ( E_ i= ( U_ i, V_ i) ) . It is guaranteed that 1 \u2264 U_ i, V_ i \u2264 N and U_ i = \u0338 V_ i .",
    "output": "The output contains one integer number \u2013 the answer.",
    "note": "In the second example: Graphs for pairs ( 1, 1) , ( 2, 2) and ( 3, 3) are deserts because they don' t have any cycles. Graphs for pairs ( 1, 2) and ( 2, 3) have one cycle of length 2 so they are deserts.",
    "topics": [
      "data structures",
      "graphs"
    ],
    "id": "1599I"
  },
  {
    "title": "Two Arrays",
    "url": "https://codeforces.com/problemset/problem/1599/E",
    "history": "You are given two integer arrays of length N , A1 and A2 . You are also given Q queries of 4 types: 1 k l r x: set Ak_ i: = min( Ak_ i, x) for each l \u2264 i \u2264 r . 2 k l r x: set Ak_ i: = max( Ak_ i, x) for each l \u2264 i \u2264 r . 3 k l r x: set Ak_ i: = Ak_ i+ x for each l \u2264 i \u2264 r . 4 l r: find the ( \u2211_ i= l^ r F( A1_ i+ A2_ i) ) % ( 10^ 9+ 7) where F( k) is the k - th Fibonacci number ( F( 0) = 0, F( 1) = 1, F( k) = F( k- 1) + F( k- 2) ) , and x % y denotes the remainder of the division of x by y . You should process these queries and answer each query of the fourth type.",
    "input": "The first line contains two integers N and Q . ( 1 \u2264 N, Q \u2264 5 \u00d7 10^ 4 ) The second line contains N integers, array A1_ 1, A1_ 2, . . . A1_ N . ( 0 \u2264 A1_ i \u2264 10^ 6 ) The third line contains N integers, array A2_ 1, A2_ 2, . . . A2_ N . ( 0 \u2264 A2_ i \u2264 10^ 6 ) The next Q lines describe the queries. Each line contains 5 or 3 integers, where the first integer denotes the type of the query. ( k \u2208{ 1, 2} , 1 \u2264 l \u2264 r \u2264 N ) For queries of type 1 and 2, 0 \u2264 x \u2264 10^ 9 holds. For queries of type 3, \u221210^ 6 \u2264 x \u2264 10^ 6 holds. It is guaranteed that after every query each number in arrays A1 and A2 will be nonnegative.",
    "output": "Print the answer to each query of the fourth type, in separate lines.",
    "note": "In the first example: The answer for the first query is F( 1 + 2) + F( 0 + 1) + F( 2 + 0) = F( 3) + F( 1) + F( 2) = 2 + 1 + 1 = 4 . After the second query, the array A2 changes to [ 2, 4, 0] . After the third query, the array A1 changes to [ 0, 0, 0] . The answer for the fourth query is F( 0 + 2) + F( 0 + 4) + F( 0 + 0) = F( 2) + F( 4) + F( 0) = 1 + 3 + 0 = 4 . In the second example: The answer for the first query is F( 1 + 4) + F( 3 + 2) + F( 5 + 1) = F( 5) + F( 5) + F( 6) = 5 + 5 + 8 = 18 . The answer for the second query is F( 3 + 2) + F( 5 + 1) + F( 3 + 3) + F( 2 + 3) = F( 5) + F( 6) + F( 6) + F( 5) = 5 + 8 + 8 + 5 = 26 . After the third query, the array A1 changes to [ 1, 6, 6, 6, 2] . The answer for the fourth query is F( 6 + 2) + F( 6 + 1) + F( 6 + 3) = F( 8) + F( 7) + F( 9) = 21 + 13 + 34 = 68 .",
    "topics": [
      "data structures",
      "matrices"
    ],
    "id": "1599E"
  },
  {
    "title": "RBS",
    "url": "https://codeforces.com/problemset/problem/1598/F",
    "history": "A bracket sequence is a string containing only characters \" ( \" and \" ) \" . A regular bracket sequence ( or, shortly, an RBS) is a bracket sequence that can be transformed into a correct arithmetic expression by inserting characters \" 1\" and \" + \" between the original characters of the sequence. For example: bracket sequences \" ( ) ( ) \" and \" ( ( ) ) \" are regular ( the resulting expressions are: \" ( 1) + ( 1) \" and \" ( ( 1+ 1) + 1) \" ) ; bracket sequences \" ) ( \" , \" ( \" and \" ) \" are not. Let' s denote the concatenation of two strings x and y as x+ y . For example, \" ( ) ( ) \" + \" ) ( \" = \" ( ) ( ) ) ( \" . You are given n bracket sequences s_ 1, s_ 2, . . . , s_ n . You can rearrange them in any order ( you can rearrange only the strings themselves, but not the characters in them) . Your task is to rearrange the strings in such a way that the string s_ 1 + s_ 2 + . . . + s_ n has as many non- empty prefixes that are RBS as possible.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 20 ) . Then n lines follow, the i - th of them contains s_ i \u2014 a bracket sequence ( a string consisting of characters \" ( \" and/ or \" ) \" . All sequences s_ i are non- empty, their total length does not exceed 4 \u00b7 10^ 5 .",
    "output": "Print one integer \u2014 the maximum number of non- empty prefixes that are RBS for the string s_ 1 + s_ 2 + . . . + s_ n , if the strings s_ 1, s_ 2, . . . , s_ n can be rearranged arbitrarily.",
    "note": "In the first example, you can concatenate the strings as follows: \" ( \" + \" ) \" = \" ( ) \" , the resulting string will have one prefix, that is an RBS: \" ( ) \" . In the second example, you can concatenate the strings as follows: \" ( \" + \" ) \" + \" ( ) ( ) ( ) ) \" + \" ( \" = \" ( ) ( ) ( ) ( ) ) ( \" , the resulting string will have four prefixes that are RBS: \" ( ) \" , \" ( ) ( ) \" , \" ( ) ( ) ( ) \" , \" ( ) ( ) ( ) ( ) \" . The third and the fourth examples contain only one string each, so the order is fixed.",
    "topics": [
      "binary search",
      "bitmasks",
      "brute force",
      "data structures",
      "dp"
    ],
    "id": "1598F"
  },
  {
    "title": "Staircases",
    "url": "https://codeforces.com/problemset/problem/1598/E",
    "history": "You are given a matrix, consisting of n rows and m columns. The rows are numbered top to bottom, the columns are numbered left to right. Each cell of the matrix can be either free or locked. Let' s call a path in the matrix a staircase if it: starts and ends in the free cell; visits only free cells; has one of the two following structures: the second cell is 1 to the right from the first one, the third cell is 1 to the bottom from the second one, the fourth cell is 1 to the right from the third one, and so on; the second cell is 1 to the bottom from the first one, the third cell is 1 to the right from the second one, the fourth cell is 1 to the bottom from the third one, and so on. In particular, a path, consisting of a single cell, is considered to be a staircase. Here are some examples of staircases: Initially all the cells of the matrix are free. You have to process q queries, each of them flips the state of a single cell. So, if a cell is currently free, it makes it locked, and if a cell is currently locked, it makes it free. Print the number of different staircases after each query. Two staircases are considered different if there exists such a cell that appears in one path and doesn' t appear in the other path.",
    "input": "The first line contains three integers n , m and q ( 1 \u2264 n, m \u2264 1000 ; 1 \u2264 q \u2264 10^ 4 ) \u2014 the sizes of the matrix and the number of queries. Each of the next q lines contains two integers x and y ( 1 \u2264 x \u2264 n ; 1 \u2264 y \u2264 m ) \u2014 the description of each query.",
    "output": "Print q integers \u2014 the i - th value should be equal to the number of different staircases after i queries. Two staircases are considered different if there exists such a cell that appears in one path and doesn' t appear in the other path.",
    "note": "",
    "topics": [
      "brute force",
      "combinatorics",
      "data structures",
      "dfs and similar",
      "dp",
      "implementation",
      "math"
    ],
    "id": "1598E"
  },
  {
    "title": "Training Session",
    "url": "https://codeforces.com/problemset/problem/1598/D",
    "history": "Monocarp is the coach of the Berland State University programming teams. He decided to compose a problemset for a training session for his teams. Monocarp has n problems that none of his students have seen yet. The i - th problem has a topic a_ i ( an integer from 1 to n ) and a difficulty b_ i ( an integer from 1 to n ) . All problems are different, that is, there are no two tasks that have the same topic and difficulty at the same time. Monocarp decided to select exactly 3 problems from n problems for the problemset. The problems should satisfy at least one of two conditions ( possibly, both) : the topics of all three selected problems are different; the difficulties of all three selected problems are different. Your task is to determine the number of ways to select three problems for the problemset.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 50000 ) \u2014 the number of testcases. The first line of each testcase contains an integer n ( 3 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of problems that Monocarp have. In the i - th of the following n lines, there are two integers a_ i and b_ i ( 1 \u2264 a_ i, b_ i \u2264 n ) \u2014 the topic and the difficulty of the i - th problem. It is guaranteed that there are no two problems that have the same topic and difficulty at the same time. The sum of n over all testcases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "Print the number of ways to select three training problems that meet either of the requirements described in the statement.",
    "note": "In the first example, you can take the following sets of three problems: problems 1 , 2 , 4 ; problems 1 , 3 , 4 ; problems 2 , 3 , 4 . Thus, the number of ways is equal to three.",
    "topics": [
      "combinatorics",
      "data structures",
      "geometry",
      "implementation",
      "math"
    ],
    "id": "1598D"
  },
  {
    "title": "Delete Two Elements",
    "url": "https://codeforces.com/problemset/problem/1598/C",
    "history": "Monocarp has got an array a consisting of n integers. Let' s denote k as the mathematic mean of these elements ( note that it' s possible that k is not an integer) . The mathematic mean of an array of n elements is the sum of elements divided by the number of these elements ( i. e. sum divided by n ) . Monocarp wants to delete exactly two elements from a so that the mathematic mean of the remaining ( n - 2) elements is still equal to k . Your task is to calculate the number of pairs of positions [ i, j] ( i < j ) such that if the elements on these positions are deleted, the mathematic mean of ( n - 2) remaining elements is equal to k ( that is, it is equal to the mathematic mean of n elements of the original array a ) .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of testcases. The first line of each testcase contains one integer n ( 3 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of elements in the array. The second line contains a sequence of integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is the i - th element of the array. The sum of n over all testcases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "Print one integer \u2014 the number of pairs of positions [ i, j] ( i < j ) such that if the elements on these positions are deleted, the mathematic mean of ( n - 2) remaining elements is equal to k ( that is, it is equal to the mathematic mean of n elements of the original array a ) .",
    "note": "In the first example, any pair of elements can be removed since all of them are equal. In the second example, there is no way to delete two elements so the mathematic mean doesn' t change. In the third example, it is possible to delete the elements on positions 1 and 3 , or the elements on positions 4 and 5 .",
    "topics": [
      "data structures",
      "dp",
      "implementation",
      "math",
      "two pointers"
    ],
    "id": "1598C"
  },
  {
    "title": "Changing Brackets",
    "url": "https://codeforces.com/problemset/problem/1593/G",
    "history": "A sequence of round and square brackets is given. You can change the sequence by performing the following operations: change the direction of a bracket from opening to closing and vice versa without changing the form of the bracket: i. e. you can change ' ( ' to ' ) ' and ' ) ' to ' ( ' ; you can change ' [ ' to ' ] ' and ' ] ' to ' [ ' . The operation costs 0 burles. change any square bracket to round bracket having the same direction: i. e. you can change ' [ ' to ' ( ' but not from ' ( ' to ' [ ' ; similarly, you can change ' ] ' to ' ) ' but not from ' ) ' to ' ] ' . The operation costs 1 burle. The operations can be performed in any order any number of times. You are given a string s of the length n and q queries of the type \" l r\" where 1 \u2264 l < r \u2264 n . For every substring s[ l . . . r] , find the minimum cost to pay to make it a correct bracket sequence. It is guaranteed that the substring s[ l . . . r] has an even length. The queries must be processed independently, i. e. the changes made in the string for the answer to a question i don' t affect the queries j ( j > i ) . In other words, for every query, the substring s[ l . . . r] is given from the initially given string s . A correct bracket sequence is a sequence that can be built according the following rules: an empty sequence is a correct bracket sequence; if \" s\" is a correct bracket sequence, the sequences \" ( s) \" and \" [ s] \" are correct bracket sequences. if \" s\" and \" t\" are correct bracket sequences, the sequence \" st\" ( the concatenation of the sequences) is a correct bracket sequence. E. g. the sequences \" \" , \" ( ( ) [ ] ) \" , \" [ ( ) ( ) ] ( ) \" and \" ( ( ) ) ( ) \" are correct bracket sequences whereas \" ( \" , \" [ ( ] ) \" and \" ) ) ) \" are not.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. Then t test cases follow. For each test case, the first line contains a non- empty string s containing only round ( ' ( ' , ' ) ' ) and square ( ' [ ' , ' ] ' ) brackets. The length of the string doesn' t exceed 10^ 6 . The string contains at least 2 characters. The second line contains one integer q ( 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of queries. Then q lines follow, each of them contains two integers l and r ( 1 \u2264 l < r \u2264 n where n is the length of s ) . It is guaranteed that the substring s[ l . . . r] has even length. It is guaranteed that the sum of the lengths of all strings given in all test cases doesn' t exceed 10^ 6 . The sum of all q given in all test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case output in a separate line for each query one integer x ( x \u2265 0 ) \u2014 the minimum cost to pay to make the given substring a correct bracket sequence.",
    "note": "Consider the first test case. The first query describes the whole given string, the string can be turned into the following correct bracket sequence: \" ( [ ( ) ] ) ( ) [ [ ] ] \" . The forms of the brackets aren' t changed so the cost of changing is 0 . The second query describes the substring \" ) [ ) ( ) ] \" . It may be turned into \" ( ( ) ( ) ) \" , the cost is equal to 2 . The third query describes the substring \" ) ) [ ) \" . It may be turned into \" ( ) ( ) \" , the cost is equal to 1 . The substrings of the second test case contain only round brackets. It' s possible to prove that any sequence of round brackets having an even length may be turned into a correct bracket sequence for the cost of 0 burles. In the third test case, the single query describes the string \" [ ] \" that is already a correct bracket sequence.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "dp",
      "greedy"
    ],
    "id": "1593G"
  },
  {
    "title": "Gardener and Tree",
    "url": "https://codeforces.com/problemset/problem/1593/E",
    "history": "A tree is an undirected connected graph in which there are no cycles. This problem is about non- rooted trees. A leaf of a tree is a vertex that is connected to at most one vertex. The gardener Vitaly grew a tree from n vertices. He decided to trim the tree. To do this, he performs a number of operations. In one operation, he removes all leaves of the tree. Example of a tree. For example, consider the tree shown in the figure above. The figure below shows the result of applying exactly one operation to the tree. The result of applying the operation \" remove all leaves\" to the tree. Note the special cases of the operation: applying an operation to an empty tree ( of 0 vertices) does not change it; applying an operation to a tree of one vertex removes this vertex ( this vertex is treated as a leaf) ; applying an operation to a tree of two vertices removes both vertices ( both vertices are treated as leaves) . Vitaly applied k operations sequentially to the tree. How many vertices remain?",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. Each test case is preceded by an empty line. Each test case consists of several lines. The first line of the test case contains two integers n and k ( 1 \u2264 n \u2264 4 \u00b7 10^ 5 , 1 \u2264 k \u2264 2 \u00b7 10^ 5 ) \u2014 the number of vertices in the tree and the number of operations, respectively. Then n - 1 lines follow, each of them contains two integers u and v ( 1 \u2264 u, v \u2264 n , u = \u0338 v ) which describe a pair of vertices connected by an edge. It is guaranteed that the given graph is a tree and has no loops or multiple edges. It is guaranteed that the sum of n from all test cases does not exceed 4 \u00b7 10^ 5 .",
    "output": "For each test case output on a separate line a single integer \u2014 the number of vertices that remain in the tree after applying k operations.",
    "note": "The first test case is considered in the statement. The second test case contains a tree of two vertices. 200000 operations are applied to it. The first one removes all two vertices, the other operations do not change the tree. In the third test case, a tree of three vertices is given. As a result of the first operation, only 1 vertex remains in it ( with the index 2 ) , the second operation makes the tree empty.",
    "topics": [
      "brute force",
      "data structures",
      "dfs and similar",
      "greedy",
      "implementation",
      "trees"
    ],
    "id": "1593E"
  },
  {
    "title": "Jumping Through the Array",
    "url": "https://codeforces.com/problemset/problem/1588/F",
    "history": "You are given an array of integers a of size n and a permutation p of size n . There are q queries of three types coming to you: For given numbers l and r , calculate the sum in array a on the segment from l to r : \u2211_ i= l^ r a_ i . You are given two numbers v and x . Let' s build a directed graph from the permutation p : it has n vertices and n edges i \u2192 p_ i . Let C be the set of vertices that are reachable from v in this graph. You should add x to all a_ u such that u is in C . You are given indices i and j . You should swap p_ i and p_ j . The graph corresponding to the permutation [ 2, 3, 1, 5, 4] . Please, process all queries and print answers to queries of type 1 .",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the size of the array and permutation. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 8 \u2264 a_ i \u2264 10^ 8 ) . The third line contains n distinct integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) . The fourth line contains a single integer q \u2014 the number of queries ( 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) . Next q lines contain description of queries. The i - th of them starts with an integer t_ i ( 1 \u2264 t_ i \u2264 3 ) \u2014 the query type. If t_ i = 1 , then the i - th line also contains two integers l , r ( 1 \u2264 l \u2264 r \u2264 n ) . If t_ i = 2 , then the i - th line also contains two integers v , x ( 1 \u2264 v \u2264 n , - 10^ 8 \u2264 x \u2264 10^ 8 ) . If t_ i = 3 , then the i - th line also contains also two integers i , j ( 1 \u2264 i, j \u2264 n ) .",
    "output": "For every first type query, print a single integer \u2014 the answer to this query.",
    "note": "In the first example: The graph corresponding to the initial permutation. There are 6 queries. The sum on the segment from 1 to 5 is a_ 1 + a_ 2 + a_ 3 + a_ 4 + a_ 5 = 6 + 9 + ( - 5) + 3 + 0 = 13 . If we start from 1 , we can reach { 1, 2, 3} . After this query a is: [ 7, 10, - 4, 3, 0] . The sum on the segment from 1 to 5 is a_ 1 + a_ 2 + a_ 3 + a_ 4 + a_ 5 = 6 + 9 + ( - 5) + 3 + 0 = 16 . After this query p = [ 4, 3, 1, 5, 2] . The graph corresponding to the new permutation. If we start from 2 , we can reach { 1, 2, 3, 4, 5} . After this query a is: [ 6, 9, - 5, 2, - 1] . The sum on the segment from 1 to 5 is a_ 1 + a_ 2 + a_ 3 + a_ 4 + a_ 5 = 6 + 9 + ( - 5) + 2 + ( - 1) = 11 .",
    "topics": [
      "binary search",
      "data structures",
      "graphs",
      "two pointers"
    ],
    "id": "1588F"
  },
  {
    "title": "Frequency Queries",
    "url": "https://codeforces.com/problemset/problem/1585/E",
    "history": "Petya has a rooted tree with an integer written on each vertex. The vertex 1 is the root. You are to answer some questions about the tree. A tree is a connected graph without cycles. A rooted tree has a special vertex called the root. The parent of a node v is the next vertex on the shortest path from v to the root. Each question is defined by three integers v , l , and k . To get the answer to the question, you need to perform the following steps: First, write down the sequence of all integers written on the shortest path from the vertex v to the root ( including those written in the v and the root) . Count the number of times each integer occurs. Remove all integers with less than l occurrences. Replace the sequence, removing all duplicates and ordering the elements by the number of occurrences in the original list in increasing order. In case of a tie, you can choose the order of these elements arbitrary. The answer to the question is the k - th number in the remaining sequence. Note that the answer is not always uniquely determined, because there could be several orderings. Also, it is possible that the length of the sequence on this step is less than k , in this case the answer is - 1 . For example, if the sequence of integers on the path from v to the root is [ 2, 2, 1, 7, 1, 1, 4, 4, 4, 4] , l = 2 and k = 2 , then the answer is 1 . Please answer all questions about the tree.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 6 ) . Description of the test cases follows. The first line of each test case contains two integers n , q ( 1 \u2264 n, q \u2264 10^ 6 ) \u2014 the number of vertices in the tree and the number of questions. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) , where a_ i is the number written on the i - th vertex. The third line contains n- 1 integers p_ 2, p_ 3, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) , where p_ i is the parent of node i . It' s guaranteed that the values p define a correct tree. Each of the next q lines contains three integers v , l , k ( 1 \u2264 v, l, k \u2264 n ) \u2014 descriptions of questions. It is guaranteed that the sum of n and the sum of q over all test cases do not exceed 10^ 6 .",
    "output": "For each question of each test case print the answer to the question. In case of multiple answers, print any.",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "trees"
    ],
    "id": "1585E"
  },
  {
    "title": "Yet Another Sorting Problem",
    "url": "https://codeforces.com/problemset/problem/1585/D",
    "history": "Petya has an array of integers a_ 1, a_ 2, . . . , a_ n . He only likes sorted arrays. Unfortunately, the given array could be arbitrary, so Petya wants to sort it. Petya likes to challenge himself, so he wants to sort array using only 3 - cycles. More formally, in one operation he can pick 3 pairwise distinct indices i , j , and k ( 1 \u2264 i, j, k \u2264 n ) and apply i \u2192 j \u2192 k \u2192 i cycle to the array a . It simultaneously places a_ i on position j , a_ j on position k , and a_ k on position i , without changing any other element. For example, if a is [ 10, 50, 20, 30, 40, 60] and he chooses i = 2 , j = 1 , k = 5 , then the array becomes [ 50, 40, 20, 30, 10, 60] . Petya can apply arbitrary number of 3 - cycles ( possibly, zero) . You are to determine if Petya can sort his array a , i. e. make it non- decreasing.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 5 \u00b7 10^ 5 ) . Description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 5 \u00b7 10^ 5 ) \u2014 the length of the array a . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) . It is guaranteed that the sum of n over all test cases does not exceed 5 \u00b7 10^ 5 .",
    "output": "For each test case, print \" YES\" ( without quotes) if Petya can sort the array a using 3 - cycles, and \" NO\" ( without quotes) otherwise. You can print each letter in any case ( upper or lower) .",
    "note": "In the 6 - th test case Petya can use the 3 - cycle 1 \u2192 3 \u2192 2 \u2192 1 to sort the array. In the 7 - th test case Petya can apply 1 \u2192 3 \u2192 2 \u2192 1 and make a = [ 1, 4, 2, 3] . Then he can apply 2 \u2192 4 \u2192 3 \u2192 2 and finally sort the array.",
    "topics": [
      "data structures",
      "math"
    ],
    "id": "1585D"
  },
  {
    "title": "Game with Stones",
    "url": "https://codeforces.com/problemset/problem/1584/E",
    "history": "Bob decided to take a break from calculus homework and designed a game for himself. The game is played on a sequence of piles of stones, which can be described with a sequence of integers s_ 1, . . . , s_ k , where s_ i is the number of stones in the i - th pile. On each turn, Bob picks a pair of non- empty adjacent piles i and i+ 1 and takes one stone from each. If a pile becomes empty, its adjacent piles do not become adjacent. The game ends when Bob can' t make turns anymore. Bob considers himself a winner if at the end all piles are empty. We consider a sequence of piles winning if Bob can start with it and win with some sequence of moves. You are given a sequence a_ 1, . . . , a_ n , count the number of subsegments of a that describe a winning sequence of piles. In other words find the number of segments [ l, r] ( 1 \u2264 l \u2264 r \u2264 n ) , such that the sequence a_ l, a_ l+ 1, . . . , a_ r is winning.",
    "input": "Each test consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 3 \u00b7 10^ 5 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 3 \u00b7 10^ 5 ) . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n over all test cases does not exceed 3 \u00b7 10^ 5 .",
    "output": "Print a single integer for each test case \u2014 the answer to the problem.",
    "note": "In the first test case, Bob can' t win on subsegments of length 1 , as there is no pair of adjacent piles in an array of length 1 . In the second test case, every subsegment is not winning. In the fourth test case, the subsegment [ 1, 4] is winning, because Bob can make moves with pairs of adjacent piles: ( 2, 3) , ( 1, 2) , ( 3, 4) . Another winning subsegment is [ 2, 3] .",
    "topics": [
      "binary search",
      "data structures",
      "games",
      "greedy"
    ],
    "id": "1584E"
  },
  {
    "title": "Omkar and Tours",
    "url": "https://codeforces.com/problemset/problem/1583/H",
    "history": "Omkar is hosting tours of his country, Omkarland! There are n cities in Omkarland, and, rather curiously, there are exactly n- 1 bidirectional roads connecting the cities to each other. It is guaranteed that you can reach any city from any other city through the road network. Every city has an enjoyment value e . Each road has a capacity c , denoting the maximum number of vehicles that can be on it, and an associated toll t . However, the toll system in Omkarland has an interesting quirk: if a vehicle travels on multiple roads on a single journey, they pay only the highest toll of any single road on which they traveled. ( In other words, they pay max t over all the roads on which they traveled. ) If a vehicle traverses no roads, they pay 0 toll. Omkar has decided to host q tour groups. Each tour group consists of v vehicles starting at city x . ( Keep in mind that a tour group with v vehicles can travel only on roads with capacity \u2265 v . ) Being the tour organizer, Omkar wants his groups to have as much fun as they possibly can, but also must reimburse his groups for the tolls that they have to pay. Thus, for each tour group, Omkar wants to know two things: first, what is the enjoyment value of the city y with maximum enjoyment value that the tour group can reach from their starting city, and second, how much per vehicle will Omkar have to pay to reimburse the entire group for their trip from x to y ? ( This trip from x to y will always be on the shortest path from x to y . ) In the case that there are multiple reachable cities with the maximum enjoyment value, Omkar will let his tour group choose which one they want to go to. Therefore, to prepare for all possible scenarios, he wants to know the amount of money per vehicle that he needs to guarantee that he can reimburse the group regardless of which city they choose.",
    "input": "The first line contains two integers n and q ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) , representing the number of cities and the number of groups, respectively. The next line contains n integers e_ 1, e_ 2, . . . , e_ n ( 1 \u2264 e_ i \u2264 10^ 9 ) , where e_ i represents the enjoyment value for city i . The next n- 1 lines each contain four integers a , b , c , and t ( 1 \u2264 a, b \u2264 n , 1 \u2264 c \u2264 10^ 9 , 1 \u2264 t \u2264 10^ 9 ) , representing an road between city a and city b with capacity c and toll t . The next q lines each contain two integers v and x ( 1 \u2264 v \u2264 10^ 9 , 1 \u2264 x \u2264 n ) , representing the number of vehicles in the tour group and the starting city, respectively.",
    "output": "Output q lines. The i - th line should contain two integers: the highest possible enjoyment value of a city reachable by the i - th tour group, and the amount of money per vehicle Omkar needs to guarantee that he can reimburse the i - th tour group.",
    "note": "A map of the first sample is shown below. For the nodes, unbolded numbers represent indices and bolded numbers represent enjoyment values. For the edges, unbolded numbers represent capacities and bolded numbers represent tolls. For the first query, a tour group of size 1 starting at city 3 can reach cities 1 , 2 , 3 , 4 , and 5 . Thus, the largest enjoyment value that they can reach is 3 . If the tour group chooses to go to city 4 , Omkar will have to pay 8 per vehicle, which is the maximum. For the second query, a tour group of size 9 starting at city 5 can reach only city 5 . Thus, the largest reachable enjoyment value is still 3 , and Omkar will pay 0 per vehicle. For the third query, a tour group of size 6 starting at city 2 can reach cities 2 and 4 . The largest reachable enjoyment value is again 3 . If the tour group chooses to go to city 4 , Omkar will have to pay 2 per vehicle, which is the maximum. A map of the second sample is shown below: For the first query, a tour group of size 5 starting at city 1 can only reach city 1 . Thus, their maximum enjoyment value is 1 and the cost Omkar will have to pay is 0 per vehicle. For the second query, a tour group of size 4 starting at city 1 can reach cities 1 and 2 . Thus, their maximum enjoyment value is 2 and Omkar will pay 1 per vehicle. For the third query, a tour group of size 3 starting at city 1 can reach cities 1 , 2 , and 3 . Thus, their maximum enjoyment value is 3 and Omkar will pay 1 per vehicle. For the fourth query, a tour group of size 2 starting at city 1 can reach cities 1 , 2 , 3 and 4 . Thus, their maximum enjoyment value is 4 and Omkar will pay 1 per vehicle. For the fifth query, a tour group of size 1 starting at city 1 can reach cities 1 , 2 , 3 , 4 , and 5 . Thus, their maximum enjoyment value is 5 and Omkar will pay 1 per vehicle.",
    "topics": [
      "data structures",
      "divide and conquer",
      "sortings",
      "trees"
    ],
    "id": "1583H"
  },
  {
    "title": "Omkar and Time Travel",
    "url": "https://codeforces.com/problemset/problem/1583/G",
    "history": "El Psy Kongroo. Omkar is watching Steins; Gate. In Steins; Gate, Okabe Rintarou needs to complete n tasks ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) . Unfortunately, he doesn' t know when he needs to complete the tasks. Initially, the time is 0 . Time travel will now happen according to the following rules: For each k = 1, 2, . . . , n , Okabe will realize at time b_ k that he was supposed to complete the k - th task at time a_ k ( a_ k < b_ k ) . When he realizes this, if k - th task was already completed at time a_ k , Okabe keeps the usual flow of time. Otherwise, he time travels to time a_ k then immediately completes the task. If Okabe time travels to time a_ k , all tasks completed after this time will become incomplete again. That is, for every j , if a_ j> a_ k , the j - th task will become incomplete, if it was complete ( if it was incomplete, nothing will change) . Okabe has bad memory, so he can time travel to time a_ k only immediately after getting to time b_ k and learning that he was supposed to complete the k - th task at time a_ k . That is, even if Okabe already had to perform k - th task before, he wouldn' t remember it before stumbling on the info about this task at time b_ k again. Please refer to the notes for an example of time travelling. There is a certain set s of tasks such that the first moment that all of the tasks in s are simultaneously completed ( regardless of whether any other tasks are currently completed) , a funny scene will take place. Omkar loves this scene and wants to know how many times Okabe will time travel before this scene takes place. Find this number modulo 10^ 9 + 7 . It can be proven that eventually all n tasks will be completed and so the answer always exists.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of tasks that Okabe needs to complete. n lines follow. The k - th of these lines contain two integers a_ k and b_ k ( 1 \u2264 a_ k < b_ k \u2264 2n ) \u2014 the time at which Okabe needs to complete the k - th task and the time that he realizes this respectively. All 2n of these times are distinct ( so every time from 1 to 2n inclusive appears exactly once in the input) . The next line contains a single integer t ( 1 \u2264 t \u2264 n ) \u2014 the size of the set s of tasks that lead to the funny scene. The last line contains t integers s_ 1, s_ 2, . . . , s_ t \u2014 ( 1 \u2264 s_ k \u2264 n , the numbers s_ 1, s_ 2, . . . , s_ t are distinct) \u2014 the set s of tasks.",
    "output": "Output a single integer \u2014 the number of times that Okabe time travels until all tasks in the set s are simultaneously completed, modulo 10^ 9 + 7 .",
    "note": "For the first sample, all tasks need to be completed in order for the funny scene to occur. Initially, the time is 0 . Nothing happens until time 3 , when Okabe realizes that he should have done the 2 - nd task at time 2 . He then time travels to time 2 and completes the task. As the task is done now, he does not time travel again when the time is again 3 . However, at time 4 , he travels to time 1 to complete the 1 - st task. This undoes the 2 - nd task. This means that the 2 - nd task is not currently completed, meaning that the funny scene will not occur at this point even though the 1 - st task is currently completed and Okabe had previously completed the 2 - nd task. Once it is again time 3 he travels back to time 2 once more and does the 2 - nd task again. Now all tasks are complete, with Okabe having time travelled 3 times. The second sample has the same tasks for Okabe to complete. However, this time the funny scene only needs the first task to be completed in order to occur. From reading the above sample you can see that this occurs once Okabe has time travelled 2 times.",
    "topics": [
      "data structures",
      "math"
    ],
    "id": "1583G"
  },
  {
    "title": "Omkar and Determination",
    "url": "https://codeforces.com/problemset/problem/1583/C",
    "history": "The problem statement looms below, filling you with determination. Consider a grid in which some cells are empty and some cells are filled. Call a cell in this grid exitable if, starting at that cell, you can exit the grid by moving up and left through only empty cells. This includes the cell itself, so all filled in cells are not exitable. Note that you can exit the grid from any leftmost empty cell ( cell in the first column) by going left, and from any topmost empty cell ( cell in the first row) by going up. Let' s call a grid determinable if, given only which cells are exitable, we can exactly determine which cells are filled in and which aren' t. You are given a grid a of dimensions n \u00d7 m , i. e. a grid with n rows and m columns. You need to answer q queries ( 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) . Each query gives two integers x_ 1, x_ 2 ( 1 \u2264 x_ 1 \u2264 x_ 2 \u2264 m ) and asks whether the subgrid of a consisting of the columns x_ 1, x_ 1 + 1, . . . , x_ 2 - 1, x_ 2 is determinable.",
    "input": "The first line contains two integers n, m ( 1 \u2264 n, m \u2264 10^ 6 , nm \u2264 10^ 6 ) \u2014 the dimensions of the grid a . n lines follow. The y - th line contains m characters, the x - th of which is ' X' if the cell on the intersection of the the y - th row and x - th column is filled and \" . \" if it is empty. The next line contains a single integer q ( 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of queries. q lines follow. Each line contains two integers x_ 1 and x_ 2 ( 1 \u2264 x_ 1 \u2264 x_ 2 \u2264 m ) , representing a query asking whether the subgrid of a containing the columns x_ 1, x_ 1 + 1, . . . , x_ 2 - 1, x_ 2 is determinable.",
    "output": "For each query, output one line containing \" YES\" if the subgrid specified by the query is determinable and \" NO\" otherwise. The output is case insensitive ( so \" yEs\" and \" No\" will also be accepted) .",
    "note": "For each query of the example, the corresponding subgrid is displayed twice below: first in its input format, then with each cell marked as \" E\" if it is exitable and \" N\" otherwise. For the first query: . . X EEN. . . EEE. . . EEE. . . EEEFor the second query: X N. E. E. ENote that you can exit the grid by going left from any leftmost cell ( or up from any topmost cell) ; you do not need to reach the top left corner cell to exit the grid. For the third query: XX NNX. NNX. NNX. NNThis subgrid cannot be determined only from whether each cell is exitable, because the below grid produces the above \" exitability grid\" as well: XXXXXXXXFor the fourth query: X N. E. E. EFor the fifth query: . . XXX EENNN. . . X. EEENN. . . X. EEENN. . . X. EEENNThis query is simply the entire grid. It cannot be determined only from whether each cell is exitable because the below grid produces the above \" exitability grid\" as well: . . XXX. . . XX. . . XX. . . XX",
    "topics": [
      "data structures",
      "dp"
    ],
    "id": "1583C"
  },
  {
    "title": "Kuzya and Homework",
    "url": "https://codeforces.com/problemset/problem/1582/G",
    "history": "Kuzya started going to school. He was given math homework in which he was given an array a of length n and an array of symbols b of length n , consisting of symbols ' * ' and ' / ' . Let' s denote a path of calculations for a segment [ l; r] ( 1 \u2264 l \u2264 r \u2264 n ) in the following way: Let x= 1 initially. For every i from l to r we will consequently do the following: if b_ i= ' * ' , x= x* a_ i , and if b_ i= ' / ' , then x= x/ a_ i . Let' s call a path of calculations for the segment [ l; r] a list of all x that we got during the calculations ( the number of them is exactly r - l + 1 ) . For example, let a= [ 7, 12, 3, 5, 4, 10, 9] , b= [ / , * , / , / , / , * , * ] , l= 2 , r= 6 , then the path of calculations for that segment is [ 12, 4, 0. 8, 0. 2, 2] . Let' s call a segment [ l; r] simple if the path of calculations for it contains only integer numbers. Kuzya needs to find the number of simple segments [ l; r] ( 1 \u2264 l \u2264 r \u2264 n ) . Since he obviously has no time and no interest to do the calculations for each option, he asked you to write a program to get to find that number!",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 10^ 6 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 6 ) . The third line contains n symbols without spaces between them \u2014 the array b_ 1, b_ 2 . . . b_ n ( b_ i= ' / ' or b_ i= ' * ' for every 1 \u2264 i \u2264 n ) .",
    "output": "Print a single integer \u2014 the number of simple segments [ l; r] .",
    "note": "",
    "topics": [
      "data structures",
      "number theory"
    ],
    "id": "1582G"
  },
  {
    "title": "Pchelyonok and Segments",
    "url": "https://codeforces.com/problemset/problem/1582/E",
    "history": "Pchelyonok decided to give Mila a gift. Pchelenok has already bought an array a of length n , but gifting an array is too common. Instead of that, he decided to gift Mila the segments of that array! Pchelyonok wants his gift to be beautiful, so he decided to choose k non- overlapping segments of the array [ l_ 1, r_ 1] , [ l_ 2, r_ 2] , . . . [ l_ k, r_ k] such that: the length of the first segment [ l_ 1, r_ 1] is k , the length of the second segment [ l_ 2, r_ 2] is k- 1 , . . . , the length of the k - th segment [ l_ k, r_ k] is 1 for each i< j , the i - th segment occurs in the array earlier than the j - th ( i. e. r_ i< l_ j ) the sums in these segments are strictly increasing ( i. e. let sum( l . . . r) = \u2211_ i= l^ r a_ i \u2014 the sum of numbers in the segment [ l, r] of the array, then sum( l_ 1 . . . r_ 1) < sum( l_ 2 . . . r_ 2) < . . . < sum( l_ k . . . r_ k) ) . Pchelenok also wants his gift to be as beautiful as possible, so he asks you to find the maximal value of k such that he can give Mila a gift!",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The next 2 \u00b7 t lines contain the descriptions of test cases. The description of each test case consists of two lines. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of the array. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the elements of the array a . It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, print the maximum possible value of k .",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "greedy",
      "math"
    ],
    "id": "1582E"
  },
  {
    "title": "Grandma Capa Knits a Scarf",
    "url": "https://codeforces.com/problemset/problem/1582/C",
    "history": "Grandma Capa has decided to knit a scarf and asked Grandpa Sher to make a pattern for it, a pattern is a string consisting of lowercase English letters. Grandpa Sher wrote a string s of length n . Grandma Capa wants to knit a beautiful scarf, and in her opinion, a beautiful scarf can only be knit from a string that is a palindrome. She wants to change the pattern written by Grandpa Sher, but to avoid offending him, she will choose one lowercase English letter and erase some ( at her choice, possibly none or all) occurrences of that letter in string s . She also wants to minimize the number of erased symbols from the pattern. Please help her and find the minimum number of symbols she can erase to make string s a palindrome, or tell her that it' s impossible. Notice that she can only erase symbols equal to the one letter she chose. A string is a palindrome if it is the same from the left to the right and from the right to the left. For example, the strings ' kek' , ' abacaba' , ' r' and ' papicipap' are palindromes, while the strings ' abb' and ' iq' are not.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The next 2 \u00b7 t lines contain the description of test cases. The description of each test case consists of two lines. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of the string. The second line of each test case contains the string s consisting of n lowercase English letters. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case print the minimum number of erased symbols required to make the string a palindrome, if it is possible, and - 1 , if it is impossible.",
    "note": "In the first test case, you can choose a letter ' a' and erase its first and last occurrences, you will get a string ' bcaacb' , which is a palindrome. You can also choose a letter ' b' and erase all its occurrences, you will get a string ' acaaca' , which is a palindrome as well. In the second test case, it can be shown that it is impossible to choose a letter and erase some of its occurrences to get a palindrome. In the third test case, you don' t have to erase any symbols because the string is already a palindrome.",
    "topics": [
      "brute force",
      "data structures",
      "greedy",
      "strings",
      "two pointers"
    ],
    "id": "1582C"
  },
  {
    "title": "Railway Construction",
    "url": "https://codeforces.com/problemset/problem/1580/E",
    "history": "Because the railway system in Gensokyo is often congested, as an enthusiastic engineer, Kawasiro Nitori plans to construct more railway to ease the congestion. There are n stations numbered from 1 to n and m two- way railways in Gensokyo. Every two- way railway connects two different stations and has a positive integer length d . No two two- way railways connect the same two stations. Besides, it is possible to travel from any station to any other using those railways. Among these n stations, station 1 is the main station. You can get to any station from any other station using only two- way railways. Because of the technological limitation, Nitori can only construct one- way railways, whose length can be arbitrary positive integer. Constructing a one- way railway from station u will costs w_ u units of resources, no matter where the railway ends. To ease the congestion, Nitori plans that after construction there are at least two shortest paths from station 1 to any other station, and these two shortest paths do not pass the same station except station 1 and the terminal. Besides, Nitori also does not want to change the distance of the shortest path from station 1 to any other station. Due to various reasons, sometimes the cost of building a new railway will increase uncontrollably. There will be a total of q occurrences of this kind of incident, and the i - th event will add additional amount of x_ i to the cost of building a new railway from the station k_ i . To save resources, before all incidents and after each incident, Nitori wants you to help her calculate the minimal cost of railway construction.",
    "input": "The first line contains three integers n , m , and q ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 m \u2264 3 \u00b7 10^ 5 , 0 \u2264 q \u2264 2\u00b710^ 5 ) . The second line contains n integers w_ 1, w_ 2, . . . , w_ n ( 1 \u2264 w_ i \u2264 10^ 9 ) . Each of the next m lines contains three integers u , v , d ( 1 \u2264 u, v \u2264 n , u v , 1 \u2264 d \u2264 10^ 9 ) , denoting a two- way railway connecting station u and station v , with length d . The i - th of the next q lines contains two integers k_ i, x_ i ( 1 \u2264 k_ i \u2264 n, 1 \u2264 x_ i \u2264 4 \u00d7 10^ 8 ) .",
    "output": "Print q+ 1 lines, and the i - th of these lines contains one integer, denoting the minimal cost of railway construction after the i- 1 - th incident ( especially, the 0 - th incident means no incident occurred) .",
    "note": "In the second example, Nitori can build railways as follows: 1 \u2192 2 , 1 \u2192 3 , 1 \u2192 4 , 2 \u2192 8 , and the cost is 14 + 14 + 14 + 4 = 46 .",
    "topics": [
      "brute force",
      "constructive algorithms",
      "data structures",
      "graphs",
      "shortest paths"
    ],
    "id": "1580E"
  },
  {
    "title": "Train Maintenance",
    "url": "https://codeforces.com/problemset/problem/1580/C",
    "history": "Kawasiro Nitori is excellent in engineering. Thus she has been appointed to help maintain trains. There are n models of trains, and Nitori' s department will only have at most one train of each model at any moment. In the beginning, there are no trains, at each of the following m days, one train will be added, or one train will be removed. When a train of model i is added at day t , it works for x_ i days ( day t inclusive) , then it is in maintenance for y_ i days, then in work for x_ i days again, and so on until it is removed. In order to make management easier, Nitori wants you to help her calculate how many trains are in maintenance in each day. On a day a train is removed, it is not counted as in maintenance.",
    "input": "The first line contains two integers n , m ( 1 \u2264 n, m \u2264 2 \u00b7 10^ 5 ) . The i - th of the next n lines contains two integers x_ i, y_ i ( 1 \u2264 x_ i, y_ i \u2264 10^ 9 ) . Each of the next m lines contains two integers op , k ( 1 \u2264 k \u2264 n , op = 1 or op = 2 ) . If op= 1 , it means this day' s a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.",
    "output": "Print m lines, The i - th of these lines contains one integers, denoting the number of trains in maintenance in the i - th day.",
    "note": "Consider the first example: The first day: Nitori adds a train of model 3 . Only a train of model 3 is running and no train is in maintenance. The second day: Nitori adds a train of model 1 . A train of model 1 is running and a train of model 3 is in maintenance. The third day: Nitori removes a train of model 1 . The situation is the same as the first day. The fourth day: Nitori removes a train of model 3 . There are no trains at all.",
    "topics": [
      "brute force",
      "data structures",
      "implementation"
    ],
    "id": "1580C"
  },
  {
    "title": "Portal",
    "url": "https://codeforces.com/problemset/problem/1580/A",
    "history": "CQXYM found a rectangle A of size n \u00d7 m . There are n rows and m columns of blocks. Each block of the rectangle is an obsidian block or empty. CQXYM can change an obsidian block to an empty block or an empty block to an obsidian block in one operation. A rectangle M size of a \u00d7 b is called a portal if and only if it satisfies the following conditions: a \u2265 5, b \u2265 4 . For all 1 < x < a , blocks M_ x, 1 and M_ x, b are obsidian blocks. For all 1 < x < b , blocks M_ 1, x and M_ a, x are obsidian blocks. For all 1< x< a, 1< y< b , block M_ x, y is an empty block. M_ 1, 1, M_ 1, b, M_ a, 1, M_ a, b can be any type. Note that the there must be a rows and b columns, not b rows and a columns. Note that corners can be any typeCQXYM wants to know the minimum number of operations he needs to make at least one sub- rectangle a portal.",
    "input": "The first line contains an integer t ( t \u2265 1 ) , which is the number of test cases. For each test case, the first line contains two integers n and m ( 5 \u2264 n \u2264 400 , 4 \u2264 m \u2264 400 ) . Then n lines follow, each line contains m characters 0 or 1 . If the j - th character of i - th line is 0 , block A_ i, j is an empty block. Otherwise, block A_ i, j is an obsidian block. It is guaranteed that the sum of n over all test cases does not exceed 400 . It is guaranteed that the sum of m over all test cases does not exceed 400 .",
    "output": "Output t answers, and each answer in a line.",
    "note": "In the first test case, the final portal is like this: 11101001100110010111",
    "topics": [
      "brute force",
      "data structures",
      "dp",
      "greedy",
      "implementation"
    ],
    "id": "1580A"
  },
  {
    "title": "Array Optimization by Deque",
    "url": "https://codeforces.com/problemset/problem/1579/E2",
    "history": "In fact, the problems E1 and E2 do not have much in common. You should probably think of them as two separate problems. You are given an integer array a[ 1 . . . n] = [ a_ 1, a_ 2, . . . , a_ n] . Let us consider an empty deque ( double- ended queue) . A deque is a data structure that supports adding elements to both the beginning and the end. So, if there are elements [ 3, 4, 4] currently in the deque, adding an element 1 to the beginning will produce the sequence [ 1, 3, 4, 4] , and adding the same element to the end will produce [ 3, 4, 4, 1] . The elements of the array are sequentially added to the initially empty deque, starting with a_ 1 and finishing with a_ n . Before adding each element to the deque, you may choose whether to add it to the beginning or to the end. For example, if we consider an array a = [ 3, 7, 5, 5] , one of the possible sequences of actions looks like this: 1. add 3 to the beginning of the deque: deque has a sequence [ 3] in it; 2. add 7 to the end of the deque: deque has a sequence [ 3, 7] in it; 3. add 5 to the end of the deque: deque has a sequence [ 3, 7, 5] in it; 4. add 5 to the beginning of the deque: deque has a sequence [ 5, 3, 7, 5] in it; Find the minimal possible number of inversions in the deque after the whole array is processed. An inversion in sequence d is a pair of indices ( i, j) such that i < j and d_ i > d_ j . For example, the array d = [ 5, 3, 7, 5] has exactly two inversions \u2014 ( 1, 2) and ( 3, 4) , since d_ 1 = 5 > 3 = d_ 2 and d_ 3 = 7 > 5 = d_ 4 .",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The next 2t lines contain descriptions of the test cases. The first line of each test case description contains an integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 array size. The second line of the description contains n space- separated integers a_ i ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) \u2014 elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "Print t lines, each line containing the answer to the corresponding test case. The answer to a test case should be a single integer \u2014 the minimal possible number of inversions in the deque after executing the described algorithm.",
    "note": "One of the ways to get the sequence [ 5, 3, 7, 5] in the deque, containing only two inversions, from the initial array [ 3, 7, 5, 5] ( the first sample test case) is described in the problem statement. Also, in this example, you could get the answer of two inversions by simply putting each element of the original array at the end of the deque. In this case, the original sequence [ 3, 7, 5, 5] , also containing exactly two inversions, will be in the deque as- is.",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "1579E2"
  },
  {
    "title": "Just Kingdom",
    "url": "https://codeforces.com/problemset/problem/1578/J",
    "history": "The Just Kingdom is ruled by a king and his n lords, numbered 1 to n . Each of the lords is a vassal of some overlord, who might be the king himself, or a different lord closer to the king. The king, and all his lords, are just and kind. Each lord has certain needs, which can be expressed as a certain amount of money they need. However, if a lord, or the king, receives any money, they will first split it equally between all their vassals who still have unmet needs. Only if all the needs of all their vassals are met, they will take the money to fulfill their own needs. If there is any money left over, they will return the excess to their overlord ( who follows the standard procedure for distributing money) . At the beginning of the year, the king receives a certain sum of tax money and proceeds to split it according to the rules above. If the amount of tax money is greater than the total needs of all the lords, the procedure guarantees everybody' s needs will be fulfilled, and the excess money will be left with the king. However, if there is not enough money, some lords will not have their needs met. For each lord, determine the minimum amount of tax money the king has to receive so that this lord' s needs are met.",
    "input": "The first line of the input contains the number of lords n ( 0 \u2264 n \u2264 3 \u00b7 10^ 5 ) . Each of the next n lines describes one of the lords. The i - th line contains two integers: o_ i ( 0 \u2264 o_ i < i ) \u2014 the index of the overlord of the i - th lord ( with zero meaning the king is the overlord) , and m_ i ( 1 \u2264 m_ i \u2264 10^ 6 ) \u2014 the amount of money the i - th lord needs.",
    "output": "Print n integer numbers t_ i . The i - th number should be the minimum integer amount of tax money the king has to receive for which the needs of the i - th lord will be met.",
    "note": "In the sample input, if the king receives 5 units of tax money, he will split it equally between his vassals \u2014 the lords 1 , 3 , and 5 , with each receiving 5/ 3 of money. Lord 1 will split the money equally between his vassals \u2014 2 and 4 , with each receiving 5/ 6 . Lord 5 will keep the money ( having no vassals) . Lord 3 will keep 1 unit of money, and give the remaining 2/ 3 to the king. The king will then split the 2/ 3 between the vassals with unmet needs \u2014 1 and 5 , passing 1/ 3 to each. Lord 5 will keep the extra cash ( now having a total of 2 , still not enough to meet his needs) . Lord 1 will split it equally between his vassals, and the extra 1/ 6 will be enough to meet the needs of lord 4 .",
    "topics": [
      "brute force",
      "data structures",
      "dfs and similar"
    ],
    "id": "1578J"
  },
  {
    "title": "Building Forest Trails",
    "url": "https://codeforces.com/problemset/problem/1578/B",
    "history": "There are n villages lying equidistant on a circle in the middle of a thick, impassable forest. From ancient times, it was impossible to move from one village to another, but technical progress has changed a lot. Now, there is a technology to build passable trails in the forest. The building process consists of m events. Each event is either building a trail or querying if two villages are connected. Trails are built as straight lines connecting two villages. After a trail is built, anybody can walk along the trail from one village to another. Moreover, if two trails cross, anybody can turn at the intersection, and if other trails leave a village you have just reached, they can also be used to walk along. So, for example, if villages are numbered 1 to 6 in the order around the circle, and there are trails 1 to 3 , 2 to 4 , and 4 to 6 , then all villages, except the 5 - th, are reachable from the 1 - st village. Given a list of m events, for each query, find if two given villages are reachable from each other at that moment.",
    "input": "The first line contains two integers n ( 2 \u2264 n \u2264 2\u00b7 10^ 5 ) and m ( 1 \u2264 m \u2264 3\u00b7 10^ 5 ) \u2014 the number of villages and the number of events respectively. Next m lines contain events. Each event description consists of three integers e ( e is 1 or 2 ) , v ( 1 \u2264 v \u2264 n ) , and u ( 1 \u2264 u \u2264 n , u v ) . If e = 1 , then the event is building a trail between villages v and u . If e = 2 , then the event is a query if the villages v and u are connected. It is guaranteed that each trail is built at most once. Villages are numbered 1 to n in clockwise order around the circle.",
    "output": "For each query print one character ' 0' if villages are not reachable, and ' 1' if villages are reachable from each other. Print answers for all queries as a single string in one line.",
    "note": "",
    "topics": [
      "data structures",
      "dsu"
    ],
    "id": "1578B"
  },
  {
    "title": "Managing Telephone Poles",
    "url": "https://codeforces.com/problemset/problem/1575/M",
    "history": "Mr. Chanek' s city can be represented as a plane. He wants to build a housing complex in the city. There are some telephone poles on the plane, which is represented by a grid a of size ( n + 1) \u00d7 ( m + 1) . There is a telephone pole at ( x, y) if a_ x, y = 1 . For each point ( x, y) , define S( x, y) as the square of the Euclidean distance between the nearest pole and ( x, y) . Formally, the square of the Euclidean distance between two points ( x_ 1, y_ 1) and ( x_ 2, y_ 2) is ( x_ 2 - x_ 1) ^ 2 + ( y_ 2 - y_ 1) ^ 2 . To optimize the building plan, the project supervisor asks you the sum of all S( x, y) for each 0 \u2264 x \u2264 n and 0 \u2264 y \u2264 m . Help him by finding the value of \u2211_ x= 0^ n\u2211_ y= 0^ mS( x, y) .",
    "input": "The first line contains two integers n and m ( 0 \u2264 n, m < 2000 ) \u2014 the size of the grid. Then ( n + 1) lines follow, each containing ( m + 1) integers a_ i, j ( 0 \u2264 a_ i, j\u2264 1 ) \u2014 the grid denoting the positions of telephone poles in the plane. There is at least one telephone pole in the given grid.",
    "output": "Output an integer denoting the value of \u2211_ x= 0^ n\u2211_ y= 0^ mS( x, y) .",
    "note": "In the first example, the nearest telephone pole for the points ( 0, 0) , ( 1, 0) , ( 2, 0) , ( 0, 1) , ( 1, 1) , and ( 2, 1) is at ( 0, 0) . While the nearest telephone pole for the points ( 0, 2) , ( 1, 2) , and ( 2, 2) is at ( 0, 2) . Thus, \u2211_ x= 0^ n\u2211_ y= 0^ mS( x, y) = ( 0 + 1 + 4) + ( 1 + 2 + 5) + ( 0 + 1 + 4) = 18 .",
    "topics": [
      "data structures",
      "geometry"
    ],
    "id": "1575M"
  },
  {
    "title": "Longest Array Deconstruction",
    "url": "https://codeforces.com/problemset/problem/1575/L",
    "history": "Mr. Chanek gives you a sequence a indexed from 1 to n . Define f( a) as the number of indices where a_ i = i . You can pick an element from the current sequence and remove it, then concatenate the remaining elements together. For example, if you remove the 3 - rd element from the sequence [ 4, 2, 3, 1] , the resulting sequence will be [ 4, 2, 1] . You want to remove some elements from a in order to maximize f( a) , using zero or more operations. Find the largest possible f( a) .",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the initial length of the sequence. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 2 \u00b7 10^ 5 ) \u2014 the initial sequence a .",
    "output": "Output an integer denoting the largest f( a) that can be obtained by doing zero or more operations.",
    "note": "In the first example, f( A) = 3 by doing the following operations. [ 2, 1, 4, 2, 5, 3, 7] \u2192 [ 2, 1, 2, 5, 3, 7] \u2192 [ 1, 2, 5, 3, 7] \u2192 [ 1, 2, 5, 3] \u2192 [ 1, 2, 3] In the second example, f( A) = 2 and no additional operation is needed.",
    "topics": [
      "data structures",
      "divide and conquer",
      "dp",
      "sortings"
    ],
    "id": "1575L"
  },
  {
    "title": "Illusions of the Desert",
    "url": "https://codeforces.com/problemset/problem/1575/I",
    "history": "Chanek Jones is back, helping his long- lost relative Indiana Jones, to find a secret treasure in a maze buried below a desert full of illusions. The map of the labyrinth forms a tree with n rooms numbered from 1 to n and n - 1 tunnels connecting them such that it is possible to travel between each pair of rooms through several tunnels. The i - th room ( 1 \u2264 i \u2264 n ) has a_ i illusion rate. To go from the x - th room to the y - th room, there must exist a tunnel between x and y , and it takes max( | a_ x + a_ y| , | a_ x - a_ y| ) energy. | z| denotes the absolute value of z . To prevent grave robbers, the maze can change the illusion rate of any room in it. Chanek and Indiana would ask q queries. There are two types of queries to be done: 1 u c \u2014 The illusion rate of the x - th room is changed to c ( 1 \u2264 u \u2264 n , 0 \u2264 | c| \u2264 10^ 9 ) . 2 u v \u2014 Chanek and Indiana ask you the minimum sum of energy needed to take the secret treasure at room v if they are initially at room u ( 1 \u2264 u, v \u2264 n ) . Help them, so you can get a portion of the treasure!",
    "input": "The first line contains two integers n and q ( 2 \u2264 n \u2264 10^ 5 , 1 \u2264 q \u2264 10^ 5 ) \u2014 the number of rooms in the maze and the number of queries. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 | a_ i| \u2264 10^ 9 ) \u2014 inital illusion rate of each room. The i - th of the next n- 1 lines contains two integers s_ i and t_ i ( 1 \u2264 s_ i, t_ i \u2264 n ) , meaning there is a tunnel connecting s_ i - th room and t_ i - th room. The given edges form a tree. The next q lines contain the query as described. The given queries are valid.",
    "output": "For each type 2 query, output a line containing an integer \u2014 the minimum sum of energy needed for Chanek and Indiana to take the secret treasure.",
    "note": "In the first query, their movement from the 1 - st to the 2 - nd room is as follows. 1 \u2192 5 \u2014 takes max( | 10 + 4| , | 10 - 4| ) = 14 energy. 5 \u2192 6 \u2014 takes max( | 4 + ( - 6) | , | 4 - ( - 6) | ) = 10 energy. 6 \u2192 2 \u2014 takes max( | - 6 + ( - 9) | , | - 6 - ( - 9) | ) = 15 energy. In total, it takes 39 energy. In the second query, the illusion rate of the 1 - st room changes from 10 to - 3 . In the third query, their movement from the 1 - st to the 2 - nd room is as follows. 1 \u2192 5 \u2014 takes max( | - 3 + 4| , | - 3 - 4| ) = 7 energy. 5 \u2192 6 \u2014 takes max( | 4 + ( - 6) | , | 4 - ( - 6) | ) = 10 energy. 6 \u2192 2 \u2014 takes max( | - 6 + ( - 9) | , | - 6 - ( - 9) | ) = 15 energy. Now, it takes 32 energy.",
    "topics": [
      "data structures",
      "trees"
    ],
    "id": "1575I"
  },
  {
    "title": "Eye-Pleasing City Park Tour",
    "url": "https://codeforces.com/problemset/problem/1575/E",
    "history": "There is a city park represented as a tree with n attractions as its vertices and n - 1 rails as its edges. The i - th attraction has happiness value a_ i . Each rail has a color. It is either black if t_ i = 0 , or white if t_ i = 1 . Black trains only operate on a black rail track, and white trains only operate on a white rail track. If you are previously on a black train and want to ride a white train, or you are previously on a white train and want to ride a black train, you need to use 1 ticket. The path of a tour must be a simple path \u2014 it must not visit an attraction more than once. You do not need a ticket the first time you board a train. You only have k tickets, meaning you can only switch train types at most k times. In particular, you do not need a ticket to go through a path consisting of one rail color. Define f( u, v) as the sum of happiness values of the attractions in the tour ( u, v) , which is a simple path that starts at the u - th attraction and ends at the v - th attraction. Find the sum of f( u, v) for all valid tours ( u, v) ( 1 \u2264 u \u2264 v \u2264 n ) that does not need more than k tickets, modulo 10^ 9 + 7 .",
    "input": "The first line contains two integers n and k ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 , 0 \u2264 k \u2264 n- 1 ) \u2014 the number of attractions in the city park and the number of tickets you have. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) \u2014 the happiness value of each attraction. The i - th of the next n - 1 lines contains three integers u_ i , v_ i , and t_ i ( 1 \u2264 u_ i, v_ i \u2264 n , 0 \u2264 t_ i \u2264 1 ) \u2014 an edge between vertices u_ i and v_ i with color t_ i . The given edges form a tree.",
    "output": "Output an integer denoting the total happiness value for all valid tours ( u, v) ( 1 \u2264 u \u2264 v \u2264 n ) , modulo 10^ 9 + 7 .",
    "note": "",
    "topics": [
      "data structures",
      "trees"
    ],
    "id": "1575E"
  },
  {
    "title": "Cyclic Sum",
    "url": "https://codeforces.com/problemset/problem/1575/C",
    "history": "Denote a cyclic sequence of size n as an array s such that s_ n is adjacent to s_ 1 . The segment s[ r, l] where l < r is the concatenation of s[ r, n] and s[ 1, l] . You are given an array a consisting of n integers. Define b as the cyclic sequence obtained from concatenating m copies of a . Note that b has size n \u00b7 m . You are given an integer k where k = 1 or k is a prime number. Find the number of different segments in b where the sum of elements in the segment is divisible by k . Two segments are considered different if the set of indices of the segments are different. For example, when n = 3 and m = 2 , the set of indices for segment s[ 2, 5] is { 2, 3, 4, 5} , and for segment s[ 5, 2] is { 5, 6, 1, 2} . In particular, the segments s[ 1, 6] , s[ 2, 1] , . . . , s[ 6, 5] are considered as the same segment. Output the answer modulo 10^ 9 + 7 .",
    "input": "The first line contains three integers n , m , and k ( 1 \u2264 n, m, k \u2264 2 \u00b7 10^ 5 , k = 1 or k is a prime number) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 2 \u00b7 10^ 5 ) .",
    "output": "Output an integer denoting the number of different segments in b where the sum of elements in the segment is divisible by k , modulo 10^ 9 + 7 .",
    "note": "In the first example, all valid segments are [ 1, 4] , [ 2, 3] , [ 3, 5] , and [ 4, 2] . In the second example, one of the valid segments is [ 1, 5] .",
    "topics": [
      "data structures",
      "fft",
      "number theory"
    ],
    "id": "1575C"
  },
  {
    "title": "Another Sorting Problem",
    "url": "https://codeforces.com/problemset/problem/1575/A",
    "history": "Andi and Budi were given an assignment to tidy up their bookshelf of n books. Each book is represented by the book title \u2014 a string s_ i numbered from 1 to n , each with length m . Andi really wants to sort the book lexicographically ascending, while Budi wants to sort it lexicographically descending. Settling their fight, they decided to combine their idea and sort it asc- desc- endingly, where the odd- indexed characters will be compared ascendingly, and the even- indexed characters will be compared descendingly. A string a occurs before a string b in asc- desc- ending order if and only if in the first position where a and b differ, the following holds: if it is an odd position, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b ; if it is an even position, the string a has a letter that appears later in the alphabet than the corresponding letter in b .",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u00b7 m \u2264 10^ 6 ) . The i - th of the next n lines contains a string s_ i consisting of m uppercase Latin letters \u2014 the book title. The strings are pairwise distinct.",
    "output": "Output n integers \u2014 the indices of the strings after they are sorted asc- desc- endingly.",
    "note": "The following illustrates the first example.",
    "topics": [
      "data structures",
      "sortings",
      "strings"
    ],
    "id": "1575A"
  },
  {
    "title": "The Strongest Build",
    "url": "https://codeforces.com/problemset/problem/1574/D",
    "history": "Ivan is playing yet another roguelike computer game. He controls a single hero in the game. The hero has n equipment slots. There is a list of c_ i items for the i - th slot, the j - th of them increases the hero strength by a_ i, j . The items for each slot are pairwise distinct and are listed in the increasing order of their strength increase. So, a_ i, 1 < a_ i, 2 < . . . < a_ i, c_ i . For each slot Ivan chooses exactly one item. Let the chosen item for the i - th slot be the b_ i - th item in the corresponding list. The sequence of choices [ b_ 1, b_ 2, . . . , b_ n] is called a build. The strength of a build is the sum of the strength increases of the items in it. Some builds are banned from the game. There is a list of m pairwise distinct banned builds. It' s guaranteed that there' s at least one build that' s not banned. What is the build with the maximum strength that is not banned from the game? If there are multiple builds with maximum strength, print any of them.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10 ) \u2014 the number of equipment slots. The i - th of the next n lines contains the description of the items for the i - th slot. First, one integer c_ i ( 1 \u2264 c_ i \u2264 2 \u00b7 10^ 5 ) \u2014 the number of items for the i - th slot. Then c_ i integers a_ i, 1, a_ i, 2, . . . , a_ i, c_ i ( 1 \u2264 a_ i, 1 < a_ i, 2 < . . . < a_ i, c_ i\u2264 10^ 8 ) . The sum of c_ i doesn' t exceed 2 \u00b7 10^ 5 . The next line contains a single integer m ( 0 \u2264 m \u2264 10^ 5 ) \u2014 the number of banned builds. Each of the next m lines contains a description of a banned build \u2014 a sequence of n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 c_ i ) . The builds are pairwise distinct, and there' s at least one build that' s not banned.",
    "output": "Print the build with the maximum strength that is not banned from the game. If there are multiple builds with maximum strength, print any of them.",
    "note": "",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "dfs and similar",
      "graphs",
      "greedy",
      "hashing",
      "implementation"
    ],
    "id": "1574D"
  },
  {
    "title": "Stations",
    "url": "https://codeforces.com/problemset/problem/1572/F",
    "history": "There are n cities in a row numbered from 1 to n . The cities will be building broadcasting stations. The station in the i - th city has height h_ i and range w_ i . It can broadcast information to city j if the following constraints are met: i \u2264 j \u2264 w_ i , and for each k such that i < k \u2264 j , the following condition holds: h_ k < h_ i . In other words, the station in city i can broadcast information to city j if j \u2265 i , j is in the range of i - th station, and i is strictly highest on the range from i to j ( including city j ) . At the beginning, for every city i , h_ i = 0 and w_ i = i . Then q events will take place. During i - th event one of the following will happen: City c_ i will rebuild its station so that its height will be strictly highest among all stations and w_ c_ i will be set to g_ i . Let b_ j be the number of stations that can broadcast information to city j . Print the sum of b_ j over all j satisfying l_ i \u2264 j \u2264 r_ i . Your task is to react to all events and print answers to all queries.",
    "input": "The first line contains two integers n and q ( 1 \u2264 n, q \u2264 2\u00b710^ 5 ) \u2014 number of cities and number of events. Then q lines follow. The i - th line begins with an integer p_ i ( p_ i = 1 or p_ i = 2 ) . If p_ i = 1 a station will be rebuilt. Then two integers c_ i and g_ i ( 1 \u2264 c_ i \u2264 g_ i \u2264 n ) follow \u2014 the city in which the station is rebuilt and its new broadcasting range. If p_ i = 2 you are given a query. Then two integers l_ i and r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 n ) follow \u2014 the range of cities in the query.",
    "output": "For each query, print in a single line the sum of b_ j over the given interval.",
    "note": "In the first test case, only station 1 reaches city 1 before and after it is rebuilt. In the second test case, after each rebuild, the array b looks as follows: [ 1, 1, 1, 2, 1] ; [ 1, 2, 2, 3, 2] ; [ 1, 2, 2, 1, 2] ; [ 1, 1, 2, 1, 2] ; [ 1, 1, 2, 1, 1] .",
    "topics": [
      "data structures"
    ],
    "id": "1572F"
  },
  {
    "title": "Book",
    "url": "https://codeforces.com/problemset/problem/1572/A",
    "history": "You are given a book with n chapters. Each chapter has a specified list of other chapters that need to be understood in order to understand this chapter. To understand a chapter, you must read it after you understand every chapter on its required list. Currently you don' t understand any of the chapters. You are going to read the book from the beginning till the end repeatedly until you understand the whole book. Note that if you read a chapter at a moment when you don' t understand some of the required chapters, you don' t understand this chapter. Determine how many times you will read the book to understand every chapter, or determine that you will never understand every chapter no matter how many times you read the book.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 2\u00b710^ 4 ) . The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 2\u00b710^ 5 ) \u2014 number of chapters. Then n lines follow. The i - th line begins with an integer k_ i ( 0 \u2264 k_ i \u2264 n- 1 ) \u2014 number of chapters required to understand the i - th chapter. Then k_ i integers a_ i, 1, a_ i, 2, . . . , a_ i, k_ i ( 1 \u2264 a_ i, j\u2264 n, a_ i, j i, a_ i, j a_ i, l for j l ) follow \u2014 the chapters required to understand the i - th chapter. It is guaranteed that the sum of n and sum of k_ i over all testcases do not exceed 2\u00b710^ 5 .",
    "output": "For each test case, if the entire book can be understood, print how many times you will read it, otherwise print - 1 .",
    "note": "In the first example, we will understand chapters { 2, 4} in the first reading and chapters { 1, 3} in the second reading of the book. In the second example, every chapter requires the understanding of some other chapter, so it is impossible to understand the book. In the third example, every chapter requires only chapters that appear earlier in the book, so we can understand everything in one go. In the fourth example, we will understand chapters { 2, 3, 4} in the first reading and chapter 1 in the second reading of the book. In the fifth example, we will understand one chapter in every reading from 5 to 1 .",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "dp",
      "graphs",
      "implementation",
      "sortings"
    ],
    "id": "1572A"
  },
  {
    "title": "Physical Examination",
    "url": "https://codeforces.com/problemset/problem/1571/I",
    "history": "Polycarp plans to undergo a full physical examination at his local clinic. There are n doctors, numbered from 1 to n . The i - th doctor takes patients from minute L_ i to minute R_ i , so Polycarp can visit him at any minute in this range. It takes each doctor exactly one minute to examine Polycarp' s health. Polycarp wants to arrive at the clinic at some minute x and visit all n doctors in some order without waiting or visiting any doctor several times. More formally, he chooses an integer x and a permutation p_ 1, p_ 2, . . . , p_ n ( a sequence of n integers from 1 to n such that each integer appears exactly once) , then proceeds to visit: doctor p_ 1 at minute x ; doctor p_ 2 at minute x+ 1 ; . . . doctor p_ n at minute x+ n- 1 . The p_ i - th doctor should be able to take patients at minute x+ i- 1 , so the following should hold: L[ p_ i] \u2264 x + i - 1 \u2264 R[ p_ i] . Determine if it' s possible for Polycarp to choose such a minute x and a permutation p that he' ll be able to visit all n doctors in without waiting or visiting any doctor several times. If there are multiple answers, print any of them.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of testcases. Then the descriptions of t testcases follow. The first line of the testcase contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of doctors. The second line of the testcase contains n integers L_ 1, L_ 2, . . . L_ n ( 1 \u2264 L_ i \u2264 10^ 9 ) . The third line of the testcase contains n integers R_ 1, R_ 2, . . . R_ n ( L_ i \u2264 R_ i \u2264 10^ 9 ) . The sum of n over all testcases doesn' t exceed 10^ 5 .",
    "output": "For each testcase print an answer. If there exists such a minute x and a permutation p that Polycarp is able to visit all n doctors without waiting or visiting any doctor several times, then print x in the first line and a permutation p in the second line. If there are multiple answers, print any of them. Otherwise, print - 1 in the only line.",
    "note": "In the third testcase it' s impossible to visit all doctors, because Polycarp has to visit doctor 2 at minute 2 and doctor 1 at minute 4 . However, that would require him to wait a minute between the visits, which is not allowed. In the fourth testcase all doctors take patients in the span of 2 minutes. However, since there are three of them, Polycarp can' t visit them all.",
    "topics": [
      "*special",
      "binary search",
      "data structures"
    ],
    "id": "1571I"
  },
  {
    "title": "A Battle Against a Dragon",
    "url": "https://codeforces.com/problemset/problem/1571/G",
    "history": "A squad of n warriors is defending a castle from a dragon attack. There are m barricades between the castle and the dragon. The warriors are numbered from 1 to n . The i - th warrior knows k_ i attacks: the j - th of them deals a_ i, j damage to the dragon and can only be applied if there are exactly b_ i, j barricades between the castle and the dragon. The warriors make turns one after another, starting from warrior 1 . After warrior n makes his turn, the total damage to the dragon is calculated. The i - th warrior performs exactly one of three possible moves in his turn: destroys one barricade ( if there are any left) ; deploys one of his k_ i attacks; skips a turn. The total damage is the sum of damages dealt by the warriors who chose to deploy their attacks in their turn. What is the maximum total damage the warriors can deal to the dragon?",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 3 \u00b7 10^ 5 ) \u2014 the number of warriors and the initial number of barricades. Then the descriptions of attacks for each warrior follow. The i - th description consists of three lines. The first line contains a single integer k_ i ( 1 \u2264 k_ i \u2264 m + 1 ) \u2014 the number of attacks the i - th warrior knows. The second line contains k_ i integers a_ i, 1, a_ i, 2, . . . , a_ i, k_ i ( 1 \u2264 a_ i, j\u2264 10^ 9 ) \u2014 the damage of each attack. The third line contains k_ i integers b_ i, 1, b_ i, 2, . . . , b_ i, k_ i ( 0 \u2264 b_ i, j\u2264 m ) \u2014 the required number of barricades for each attack. b_ i, j for the i - th warrior are pairwise distinct. The attacks are listed in the increasing order of the barricades requirement, so b_ i, 1 < b_ i, 2 < . . . < b_ i, k_ i . The sum of k_ i over all warriors doesn' t exceed 3 \u00b7 10^ 5 .",
    "output": "Print a single integer \u2014 the maximum total damage the warriors can deal to the dragon.",
    "note": "In the first example, the optimal choice is the following: warrior 1 destroys a barricade, now there are 3 barricades left; warrior 2 deploys his first attack ( he can do it because b_ 1, 1= 3 , which is the current number of barricades) . The total damage is 10 . If the first warrior used his attack or skipped his turn, then the second warrior would only be able to deploy his second attack. Thus, the total damage would be 2+ 5= 7 or 5 . In the second example, the first warrior skips his move, the second warrior skips his move and the third warrior deploys his only attack. In the third example, two equivalent options are: both warriors deploy their second attacks; the first warrior destroys one barricade and the second warrior deploys his first attack. Both options yield 30 total damage.",
    "topics": [
      "*special",
      "data structures",
      "dp"
    ],
    "id": "1571G"
  },
  {
    "title": "Inconvenient Pairs",
    "url": "https://codeforces.com/problemset/problem/1569/D",
    "history": "There is a city that can be represented as a square grid with corner points in ( 0, 0) and ( 10^ 6, 10^ 6) . The city has n vertical and m horizontal streets that goes across the whole city, i. e. the i - th vertical streets goes from ( x_ i, 0) to ( x_ i, 10^ 6) and the j - th horizontal street goes from ( 0, y_ j) to ( 10^ 6, y_ j) . All streets are bidirectional. Borders of the city are streets as well. There are k persons staying on the streets: the p - th person at point ( x_ p, y_ p) ( so either x_ p equal to some x_ i or y_ p equal to some y_ j , or both) . Let' s say that a pair of persons form an inconvenient pair if the shortest path from one person to another going only by streets is strictly greater than the Manhattan distance between them. Calculate the number of inconvenient pairs of persons ( pairs ( x, y) and ( y, x) are the same pair) . Let' s recall that Manhattan distance between points ( x_ 1, y_ 1) and ( x_ 2, y_ 2) is | x_ 1 - x_ 2| + | y_ 1 - y_ 2| .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains three integers n , m and k ( 2 \u2264 n, m \u2264 2 \u00b7 10^ 5 ; 2 \u2264 k \u2264 3 \u00b7 10^ 5 ) \u2014 the number of vertical and horizontal streets and the number of persons. The second line of each test case contains n integers x_ 1, x_ 2, . . . , x_ n ( 0 = x_ 1 < x_ 2 < . . . < x_ n - 1 < x_ n = 10^ 6 ) \u2014 the x - coordinates of vertical streets. The third line contains m integers y_ 1, y_ 2, . . . , y_ m ( 0 = y_ 1 < y_ 2 < . . . < y_ m - 1 < y_ m = 10^ 6 ) \u2014 the y - coordinates of horizontal streets. Next k lines contains description of people. The p - th line contains two integers x_ p and y_ p ( 0 \u2264 x_ p, y_ p \u2264 10^ 6 ; x_ p \u2208{ x_ 1, . . . , x_ n} or y_ p \u2208{ y_ 1, . . . , y_ m} ) \u2014 the coordinates of the p - th person. All points are distinct. It guaranteed that sum of n doesn' t exceed 2 \u00b7 10^ 5 , sum of m doesn' t exceed 2 \u00b7 10^ 5 and sum of k doesn' t exceed 3 \u00b7 10^ 5 .",
    "output": "For each test case, print the number of inconvenient pairs.",
    "note": "The second test case is pictured below: For example, points 3 and 4 form an inconvenient pair, since the shortest path between them ( shown red and equal to 7 ) is greater than its Manhattan distance ( equal to 5 ) . Points 3 and 5 also form an inconvenient pair: the shortest path equal to 1000001 ( shown green) is greater than the Manhattan distance equal to 999999 . But points 5 and 9 don' t form an inconvenient pair, since the shortest path ( shown purple) is equal to its Manhattan distance.",
    "topics": [
      "binary search",
      "data structures",
      "implementation",
      "sortings",
      "two pointers"
    ],
    "id": "1569D"
  },
  {
    "title": "Non-Decreasing Dilemma",
    "url": "https://codeforces.com/problemset/problem/1567/E",
    "history": "Alice has recently received an array a_ 1, a_ 2, . . . , a_ n for her birthday! She is very proud of her array, and when she showed her friend Bob the array, he was very happy with her present too! However, soon Bob became curious, and as any sane friend would do, asked Alice to perform q operations of two types on her array: 1 x y : update the element a_ x to y ( set a_ x = y ) . 2 l r : calculate how many non- decreasing subarrays exist within the subarray [ a_ l, a_ l+ 1, . . . , a_ r] . More formally, count the number of pairs of integers ( p, q) such that l \u2264 p \u2264 q \u2264 r and a_ p \u2264 a_ p+ 1\u2264. . . \u2264 a_ q- 1\u2264 a_ q . Help Alice answer Bob' s queries!",
    "input": "The first line contains two integers n and q ( 1 \u2264 n, q \u2264 2 \u00b7 10^ 5 ) \u2014 the size of the array, and the number of queries, respectively. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the elements of Alice' s array. The next q lines consist of three integers each. The first integer of the i - th line is t_ i , the operation being performed on the i - th step ( t_ i = 1 or t_ i = 2 ) . If t_ i = 1 , the next two integers are x_ i and y_ i ( 1 \u2264 x_ i \u2264 n ; 1 \u2264 y_ i \u2264 10^ 9 ) , updating the element at position x_ i to y_ i ( setting a_ x_ i = y_ i ) . If t_ i = 2 , the next two integers are l_ i and r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 n ) , the two indices Bob asks Alice about for the i - th query. It' s guaranteed that there is at least one operation of the second type.",
    "output": "For each query of type 2 , print a single integer, the answer to the query.",
    "note": "For the first query, l = 2 and r = 5 , and the non- decreasing subarrays [ p, q] are [ 2, 2] , [ 3, 3] , [ 4, 4] , [ 5, 5] , [ 2, 3] and [ 4, 5] .",
    "topics": [
      "data structures",
      "divide and conquer",
      "math"
    ],
    "id": "1567E"
  },
  {
    "title": "Four Vertices",
    "url": "https://codeforces.com/problemset/problem/1566/G",
    "history": "You are given an undirected weighted graph, consisting of n vertices and m edges. Some queries happen with this graph: Delete an existing edge from the graph. Add a non- existing edge to the graph. At the beginning and after each query, you should find four different vertices a , b , c , d such that there exists a path between a and b , there exists a path between c and d , and the sum of lengths of two shortest paths from a to b and from c to d is minimal. The answer to the query is the sum of the lengths of these two shortest paths. The length of the path is equal to the sum of weights of edges in this path.",
    "input": "The first line contains two integers n and m ( 4 \u2264 n, m \u2264 10^ 5) \u2014 the number of vertices and edges in the graph respectively. Each of the next m lines contain three integers v , u , w ( 1 \u2264 v, u \u2264 n, v = \u0338 u , 1 \u2264 w \u2264 10^ 9 ) \u2014 this triple means that there is an edge between vertices v and u with weight w . The next line contains a single integer q ( 0 \u2264 q \u2264 10^ 5) \u2014 the number of queries. The next q lines contain the queries of two types: 0 v u \u2014 this query means deleting an edge between v and u ( 1 \u2264 v, u \u2264 n, v = \u0338 u) . It is guaranteed that such edge exists in the graph. 1 v u w \u2014 this query means adding an edge between vertices v and u with weight w ( 1 \u2264 v, u \u2264 n, v = \u0338 u , 1 \u2264 w \u2264 10^ 9 ) . It is guaranteed that there was no such edge in the graph. It is guaranteed that the initial graph does not contain multiple edges. At the beginning and after each query, the graph doesn' t need to be connected. It is guaranteed that at each moment the number of edges will be at least 4 . It can be proven, that at each moment there exist some four vertices a , b , c , d such that there exists a path between vertices a and b , and there exists a path between vertices c and d .",
    "output": "Print q + 1 integers \u2014 the minimal sum of lengths of shortest paths between chosen pairs of vertices before the queries and after each of them.",
    "note": "Before the queries you can choose vertices ( a, b) = ( 3, 2) and ( c, d) = ( 1, 4) . The sum of lengths of two shortest paths is 3 + 1 = 4 . After the first query you can choose vertices ( a, b) = ( 2, 5) and ( c, d) = ( 1, 4) . The sum of lengths of two shortest paths is 2 + 1 = 3 . After the second query you can choose vertices ( a, b) = ( 3, 4) and ( c, d) = ( 2, 5) . The sum of lengths of two shortest paths is 1 + 2 = 3 . After the third query, you can choose vertices ( a, b) = ( 2, 6) and ( c, d) = ( 4, 5) . The sum of lengths of two shortest paths is 4 + 3 = 7 . After the last query you can choose vertices ( a, b) = ( 1, 6) and ( c, d) = ( 2, 5) . The sum of lengths of two shortest paths is 3 + 2 = 5 .",
    "topics": [
      "constructive algorithms",
      "data structures",
      "graphs",
      "greedy",
      "implementation",
      "shortest paths"
    ],
    "id": "1566G"
  },
  {
    "title": "Points Movement",
    "url": "https://codeforces.com/problemset/problem/1566/F",
    "history": "There are n points and m segments on the coordinate line. The initial coordinate of the i - th point is a_ i . The endpoints of the j - th segment are l_ j and r_ j \u2014 left and right endpoints, respectively. You can move the points. In one move you can move any point from its current coordinate x to the coordinate x - 1 or the coordinate x + 1 . The cost of this move is 1 . You should move the points in such a way that each segment is visited by at least one point. A point visits the segment [ l, r] if there is a moment when its coordinate was on the segment [ l, r] ( including endpoints) . You should find the minimal possible total cost of all moves such that all segments are visited.",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains two integers n and m ( 1 \u2264 n, m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of points and segments respectively. The next line contains n distinct integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) \u2014 the initial coordinates of the points. Each of the next m lines contains two integers l_ j , r_ j ( - 10^ 9 \u2264 l_ j \u2264 r_ j \u2264 10^ 9 ) \u2014 the left and the right endpoints of the j - th segment. It' s guaranteed that the sum of n and the sum of m over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case print a single integer \u2014 the minimal total cost of all moves such that all segments are visited.",
    "note": "In the first test case the points can be moved as follows: Move the second point from the coordinate 6 to the coordinate 5 . Move the third point from the coordinate 14 to the coordinate 13 . Move the fourth point from the coordinate 18 to the coordinate 17 . Move the third point from the coordinate 13 to the coordinate 12 . Move the fourth point from the coordinate 17 to the coordinate 16 . The total cost of moves is 5 . It is easy to see, that all segments are visited by these movements. For example, the tenth segment ( [ 7, 13] ) is visited after the second move by the third point. Here is the image that describes the first test case:",
    "topics": [
      "data structures",
      "dp",
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "1566F"
  },
  {
    "title": "Seating Arrangements (hard version) ",
    "url": "https://codeforces.com/problemset/problem/1566/D2",
    "history": "It is the hard version of the problem. The only difference is that in this version 1 \u2264 n \u2264 300 . In the cinema seats can be represented as the table with n rows and m columns. The rows are numbered with integers from 1 to n . The seats in each row are numbered with consecutive integers from left to right: in the k - th row from m ( k - 1) + 1 to m k for all rows 1 \u2264 k \u2264 n . 1 2 \u22ef m - 1 m m + 1 m + 2 \u22ef 2 m - 1 2 m 2m + 1 2m + 2 \u22ef 3 m - 1 3 m \u22ee \u22ee \u22f1 \u22ee \u22ee m ( n - 1) + 1 m ( n - 1) + 2 \u22ef n m - 1 n m The table with seats indices There are nm people who want to go to the cinema to watch a new film. They are numbered with integers from 1 to nm . You should give exactly one seat to each person. It is known, that in this cinema as lower seat index you have as better you can see everything happening on the screen. i - th person has the level of sight a_ i . Let' s define s_ i as the seat index, that will be given to i - th person. You want to give better places for people with lower sight levels, so for any two people i , j such that a_ i < a_ j it should be satisfied that s_ i < s_ j . After you will give seats to all people they will start coming to their seats. In the order from 1 to nm , each person will enter the hall and sit in their seat. To get to their place, the person will go to their seat' s row and start moving from the first seat in this row to theirs from left to right. While moving some places will be free, some will be occupied with people already seated. The inconvenience of the person is equal to the number of occupied seats he or she will go through. Let' s consider an example: m = 5 , the person has the seat 4 in the first row, the seats 1 , 3 , 5 in the first row are already occupied, the seats 2 and 4 are free. The inconvenience of this person will be 2 , because he will go through occupied seats 1 and 3 . Find the minimal total inconvenience ( the sum of inconveniences of all people) , that is possible to have by giving places for all people ( all conditions should be satisfied) .",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains two integers n and m ( 1 \u2264 n, m \u2264 300 ) \u2014 the number of rows and places in each row respectively. The second line of each test case contains n \u00b7 m integers a_ 1, a_ 2, . . . , a_ n \u00b7 m ( 1 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is the sight level of i - th person. It' s guaranteed that the sum of n \u00b7 m over all test cases does not exceed 10^ 5 .",
    "output": "For each test case print a single integer \u2014 the minimal total inconvenience that can be achieved.",
    "note": "In the first test case, there is a single way to give seats: the first person sits in the first place and the second person \u2014 in the second. The total inconvenience is 1 . In the second test case the optimal seating looks like this: In the third test case the optimal seating looks like this: The number in a cell is the person' s index that sits on this place.",
    "topics": [
      "data structures",
      "greedy",
      "implementation",
      "sortings",
      "two pointers"
    ],
    "id": "1566D2"
  },
  {
    "title": "Seating Arrangements (easy version) ",
    "url": "https://codeforces.com/problemset/problem/1566/D1",
    "history": "It is the easy version of the problem. The only difference is that in this version n = 1 . In the cinema seats can be represented as the table with n rows and m columns. The rows are numbered with integers from 1 to n . The seats in each row are numbered with consecutive integers from left to right: in the k - th row from m ( k - 1) + 1 to m k for all rows 1 \u2264 k \u2264 n . 1 2 \u22ef m - 1 m m + 1 m + 2 \u22ef 2 m - 1 2 m 2m + 1 2m + 2 \u22ef 3 m - 1 3 m \u22ee \u22ee \u22f1 \u22ee \u22ee m ( n - 1) + 1 m ( n - 1) + 2 \u22ef n m - 1 n m The table with seats indices There are nm people who want to go to the cinema to watch a new film. They are numbered with integers from 1 to nm . You should give exactly one seat to each person. It is known, that in this cinema as lower seat index you have as better you can see everything happening on the screen. i - th person has the level of sight a_ i . Let' s define s_ i as the seat index, that will be given to i - th person. You want to give better places for people with lower sight levels, so for any two people i , j such that a_ i < a_ j it should be satisfied that s_ i < s_ j . After you will give seats to all people they will start coming to their seats. In the order from 1 to nm , each person will enter the hall and sit in their seat. To get to their place, the person will go to their seat' s row and start moving from the first seat in this row to theirs from left to right. While moving some places will be free, some will be occupied with people already seated. The inconvenience of the person is equal to the number of occupied seats he or she will go through. Let' s consider an example: m = 5 , the person has the seat 4 in the first row, the seats 1 , 3 , 5 in the first row are already occupied, the seats 2 and 4 are free. The inconvenience of this person will be 2 , because he will go through occupied seats 1 and 3 . Find the minimal total inconvenience ( the sum of inconveniences of all people) , that is possible to have by giving places for all people ( all conditions should be satisfied) .",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains two integers n and m ( n = 1 , 1 \u2264 m \u2264 300 ) \u2014 the number of rows and places in each row respectively. The second line of each test case contains n \u00b7 m integers a_ 1, a_ 2, . . . , a_ n \u00b7 m ( 1 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is the sight level of i - th person. It' s guaranteed that the sum of n \u00b7 m over all test cases does not exceed 10^ 5 .",
    "output": "For each test case print a single integer \u2014 the minimal total inconvenience that can be achieved.",
    "note": "In the first test case, there is a single way to arrange people, because all sight levels are distinct. The first person will sit on the first seat, the second person will sit on the second place, the third person will sit on the third place. So inconvenience of the first person will be 0 , inconvenience of the second person will be 1 and inconvenience of the third person will be 2 . The total inconvenience is 0 + 1 + 2 = 3 . In the second test case, people should sit as follows: s_ 1 = 2 , s_ 2 = 1 , s_ 3 = 5 , s_ 4 = 4 , s_ 5 = 3 . The total inconvenience will be 6 .",
    "topics": [
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "1566D1"
  },
  {
    "title": "Two Hundred Twenty One (hard version)",
    "url": "https://codeforces.com/problemset/problem/1562/D2",
    "history": "This is the hard version of the problem. The difference between the versions is that the hard version does require you to output the numbers of the rods to be removed. You can make hacks only if all versions of the problem are solved. Stitch likes experimenting with different machines with his friend Sparky. Today they built another machine. The main element of this machine are n rods arranged along one straight line and numbered from 1 to n inclusive. Each of these rods must carry an electric charge quantitatively equal to either 1 or - 1 ( otherwise the machine will not work) . Another condition for this machine to work is that the sign- variable sum of the charge on all rods must be zero. More formally, the rods can be represented as an array of n numbers characterizing the charge: either 1 or - 1 . Then the condition must hold: a_ 1 - a_ 2 + a_ 3 - a_ 4 + . . . = 0 , or \u2211_ i= 1^ n ( - 1) ^ i- 1\u00b7 a_ i = 0 . Sparky charged all n rods with an electric current, but unfortunately it happened that the rods were not charged correctly ( the sign- variable sum of the charge is not zero) . The friends decided to leave only some of the rods in the machine. Sparky has q questions. In the i th question Sparky asks: if the machine consisted only of rods with numbers l_ i to r_ i inclusive, what minimal number of rods could be removed from the machine so that the sign- variable sum of charges on the remaining ones would be zero? Also Sparky wants to know the numbers of these rods. Perhaps the friends got something wrong, and the sign- variable sum is already zero. In that case, you don' t have to remove the rods at all. If the number of rods is zero, we will assume that the sign- variable sum of charges is zero, that is, we can always remove all rods. Help your friends and answer all of Sparky' s questions!",
    "input": "Each test contains multiple test cases. The first line contains one positive integer t ( 1 \u2264 t \u2264 10^ 3 ) , denoting the number of test cases. Description of the test cases follows. The first line of each test case contains two positive integers n and q ( 1 \u2264 n, q \u2264 3 \u00b7 10^ 5 ) \u2014 the number of rods and the number of questions. The second line of each test case contains a non- empty string s of length n , where the charge of the i - th rod is 1 if s_ i is the \" + \" symbol, or - 1 if s_ i is the \" - \" symbol. Each next line from the next q lines contains two positive integers l_ i ans r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 n ) \u2014 numbers, describing Sparky' s questions. It is guaranteed that the sum of n over all test cases does not exceed 3 \u00b7 10^ 5 , and the sum of q over all test cases does not exceed 3 \u00b7 10^ 5 . It is guaranteed that the sum of the answers ( minimal number of rods that can be removed) over all test cases does not exceed 10^ 6 .",
    "output": "For each test case, print the answer in the following format: In the first line print a single integer k \u2014 the minimal number of rods that can be removed. In the second line print k numbers separated by a space \u2014 the numbers of rods to be removed. If there is more than one correct answer, you can print any.",
    "note": "In the first test case for the first query you can remove the rods numbered 5 and 8 , then the following set of rods will remain: + \u2013+ \u2013+ + - + + - . It is easy to see that here the sign- variable sum is zero. In the second test case: For the first query, we can remove the rods numbered 1 and 11 , then the following set of rods will remain: \u2013+ + \u2014+ + \u2014. It is easy to see that here the sign- variable sum is zero. For the second query we can remove the rod numbered 9 , then the following set of rods will remain: \u2014+ + - . It is easy to see that here the variable sum is zero. For the third query we can not remove the rods at all.",
    "topics": [
      "data structures",
      "math"
    ],
    "id": "1562D2"
  },
  {
    "title": "Two Hundred Twenty One (easy version)",
    "url": "https://codeforces.com/problemset/problem/1562/D1",
    "history": "This is the easy version of the problem. The difference between the versions is that the easy version does not require you to output the numbers of the rods to be removed. You can make hacks only if all versions of the problem are solved. Stitch likes experimenting with different machines with his friend Sparky. Today they built another machine. The main element of this machine are n rods arranged along one straight line and numbered from 1 to n inclusive. Each of these rods must carry an electric charge quantitatively equal to either 1 or - 1 ( otherwise the machine will not work) . Another condition for this machine to work is that the sign- variable sum of the charge on all rods must be zero. More formally, the rods can be represented as an array of n numbers characterizing the charge: either 1 or - 1 . Then the condition must hold: a_ 1 - a_ 2 + a_ 3 - a_ 4 + . . . = 0 , or \u2211_ i= 1^ n ( - 1) ^ i- 1\u00b7 a_ i = 0 . Sparky charged all n rods with an electric current, but unfortunately it happened that the rods were not charged correctly ( the sign- variable sum of the charge is not zero) . The friends decided to leave only some of the rods in the machine. Sparky has q questions. In the i th question Sparky asks: if the machine consisted only of rods with numbers l_ i to r_ i inclusive, what minimal number of rods could be removed from the machine so that the sign- variable sum of charges on the remaining ones would be zero? Perhaps the friends got something wrong, and the sign- variable sum is already zero. In that case, you don' t have to remove the rods at all. If the number of rods is zero, we will assume that the sign- variable sum of charges is zero, that is, we can always remove all rods. Help your friends and answer all of Sparky' s questions!",
    "input": "Each test contains multiple test cases. The first line contains one positive integer t ( 1 \u2264 t \u2264 10^ 3 ) , denoting the number of test cases. Description of the test cases follows. The first line of each test case contains two positive integers n and q ( 1 \u2264 n, q \u2264 3 \u00b7 10^ 5 ) \u2014 the number of rods and the number of questions. The second line of each test case contains a non- empty string s of length n , where the charge of the i - th rod is 1 if s_ i is the \" + \" symbol, or - 1 if s_ i is the \" - \" symbol. Each next line from the next q lines contains two positive integers l_ i ans r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 n ) \u2014 numbers, describing Sparky' s questions. It is guaranteed that the sum of n over all test cases does not exceed 3 \u00b7 10^ 5 , and the sum of q over all test cases does not exceed 3 \u00b7 10^ 5 .",
    "output": "For each test case, print a single integer \u2014 the minimal number of rods that can be removed.",
    "note": "In the first test case for the first query you can remove the rods numbered 5 and 8 , then the following set of rods will remain: + \u2013+ \u2013+ + - + + - . It is easy to see that here the sign- variable sum is zero. In the second test case: For the first query, we can remove the rods numbered 1 and 11 , then the following set of rods will remain: \u2013+ + \u2014+ + \u2014. It is easy to see that here the sign- variable sum is zero. For the second query we can remove the rod numbered 9 , then the following set of rods will remain: \u2014+ + - . It is easy to see that here the variable sum is zero. For the third query we can not remove the rods at all.",
    "topics": [
      "data structures",
      "dp",
      "math"
    ],
    "id": "1562D1"
  },
  {
    "title": "Up the Strip (simplified version)",
    "url": "https://codeforces.com/problemset/problem/1561/D1",
    "history": "This version of the problem differs from the next one only in the constraint on n . Note that the memory limit in this problem is lower than in others. You have a vertical strip with n cells, numbered consecutively from 1 to n from top to bottom. You also have a token that is initially placed in cell n . You will move the token up until it arrives at cell 1 . Let the token be in cell x > 1 at some moment. One shift of the token can have either of the following kinds: Subtraction: you choose an integer y between 1 and x- 1 , inclusive, and move the token from cell x to cell x - y . Floored division: you choose an integer z between 2 and x , inclusive, and move the token from cell x to cell \u230ax/ z\u230b ( x divided by z rounded down) . Find the number of ways to move the token from cell n to cell 1 using one or more shifts, and print it modulo m . Note that if there are several ways to move the token from one cell to another in one shift, all these ways are considered distinct ( check example explanation for a better understanding) .",
    "input": "The only line contains two integers n and m ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ; 10^ 8 < m < 10^ 9 ; m is a prime number) \u2014 the length of the strip and the modulo.",
    "output": "Print the number of ways to move the token from cell n to cell 1 , modulo m .",
    "note": "In the first test, there are three ways to move the token from cell 3 to cell 1 in one shift: using subtraction of y = 2 , or using division by z = 2 or z = 3 . There are also two ways to move the token from cell 3 to cell 1 via cell 2 : first subtract y = 1 , and then either subtract y = 1 again or divide by z = 2 . Therefore, there are five ways in total.",
    "topics": [
      "brute force",
      "data structures",
      "dp",
      "math",
      "number theory"
    ],
    "id": "1561D1"
  },
  {
    "title": "Strange Sort",
    "url": "https://codeforces.com/problemset/problem/1558/F",
    "history": "You have a permutation: an array a = [ a_ 1, a_ 2, . . . , a_ n] of distinct integers from 1 to n . The length of the permutation n is odd. Consider the following algorithm of sorting the permutation in increasing order. A helper procedure of the algorithm, f( i) , takes a single argument i ( 1 \u2264 i \u2264 n- 1 ) and does the following. If a_ i > a_ i+ 1 , the values of a_ i and a_ i+ 1 are exchanged. Otherwise, the permutation doesn' t change. The algorithm consists of iterations, numbered with consecutive integers starting with 1 . On the i - th iteration, the algorithm does the following: if i is odd, call f( 1) , f( 3) , . . . , f( n - 2) ; if i is even, call f( 2) , f( 4) , . . . , f( n - 1) . It can be proven that after a finite number of iterations the permutation will be sorted in increasing order. After how many iterations will this happen for the first time?",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . Description of the test cases follows. The first line of each test case contains a single integer n ( 3 \u2264 n \u2264 2 \u00b7 10^ 5 - 1 ; n is odd) \u2014 the length of the permutation. The second line contains n distinct integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 the permutation itself. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 - 1 .",
    "output": "For each test case print the number of iterations after which the permutation will become sorted in increasing order for the first time. If the given permutation is already sorted, print 0 .",
    "note": "In the first test case, the permutation will be changing as follows: after the 1 - st iteration: [ 2, 3, 1] ; after the 2 - nd iteration: [ 2, 1, 3] ; after the 3 - rd iteration: [ 1, 2, 3] . In the second test case, the permutation will be changing as follows: after the 1 - st iteration: [ 4, 5, 1, 7, 2, 3, 6] ; after the 2 - nd iteration: [ 4, 1, 5, 2, 7, 3, 6] ; after the 3 - rd iteration: [ 1, 4, 2, 5, 3, 7, 6] ; after the 4 - th iteration: [ 1, 2, 4, 3, 5, 6, 7] ; after the 5 - th iteration: [ 1, 2, 3, 4, 5, 6, 7] . In the third test case, the permutation is already sorted and the answer is 0 .",
    "topics": [
      "data structures",
      "sortings"
    ],
    "id": "1558F"
  },
  {
    "title": "Top-Notch Insertions",
    "url": "https://codeforces.com/problemset/problem/1558/D",
    "history": "Consider the insertion sort algorithm used to sort an integer sequence [ a_ 1, a_ 2, . . . , a_ n] of length n in non- decreasing order. For each i in order from 2 to n , do the following. If a_ i \u2265 a_ i- 1 , do nothing and move on to the next value of i . Otherwise, find the smallest j such that a_ i < a_ j , shift the elements on positions from j to i- 1 by one position to the right, and write down the initial value of a_ i to position j . In this case we' ll say that we performed an insertion of an element from position i to position j . It can be noticed that after processing any i , the prefix of the sequence [ a_ 1, a_ 2, . . . , a_ i] is sorted in non- decreasing order, therefore, the algorithm indeed sorts any sequence. For example, sorting [ 4, 5, 3, 1, 3] proceeds as follows: i = 2 : a_ 2 \u2265 a_ 1 , do nothing; i = 3 : j = 1 , insert from position 3 to position 1 : [ 3, 4, 5, 1, 3] ; i = 4 : j = 1 , insert from position 4 to position 1 : [ 1, 3, 4, 5, 3] ; i = 5 : j = 3 , insert from position 5 to position 3 : [ 1, 3, 3, 4, 5] . You are given an integer n and a list of m integer pairs ( x_ i, y_ i) . We are interested in sequences such that if you sort them using the above algorithm, exactly m insertions will be performed: first from position x_ 1 to position y_ 1 , then from position x_ 2 to position y_ 2 , . . . , finally, from position x_ m to position y_ m . How many sequences of length n consisting of ( not necessarily distinct) integers between 1 and n , inclusive, satisfy the above condition? Print this number modulo 998 244 353 .",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 5 ) . Description of the test cases follows. The first line of each test case contains two integers n and m ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ; 0 \u2264 m < n ) \u2014 the length of the sequence and the number of insertions. The i - th of the following m lines contains two integers x_ i and y_ i ( 2 \u2264 x_ 1 < x_ 2 < . . . < x_ m \u2264 n ; 1 \u2264 y_ i < x_ i ) . These lines describe the sequence of insertions in chronological order. It is guaranteed that the sum of m over all test cases does not exceed 2 \u00b7 10^ 5 . Note that there is no constraint on the sum of n of the same kind.",
    "output": "For each test case, print the number of sequences of length n consisting of integers from 1 to n such that sorting them with the described algorithm produces the given sequence of insertions, modulo 998 244 353 .",
    "note": "In the first test case, the algorithm performs no insertions \u2014 therefore, the initial sequence is already sorted in non- decreasing order. There are 10 such sequences: [ 1, 1, 1] , [ 1, 1, 2] , [ 1, 1, 3] , [ 1, 2, 2] , [ 1, 2, 3] , [ 1, 3, 3] , [ 2, 2, 2] , [ 2, 2, 3] , [ 2, 3, 3] , [ 3, 3, 3] . In the second test case, the only sequence satisfying the conditions is [ 3, 2, 1] . In the third test case, [ 4, 5, 3, 1, 3] is one of the sought sequences.",
    "topics": [
      "combinatorics",
      "data structures"
    ],
    "id": "1558D"
  },
  {
    "title": "Ezzat and Grid",
    "url": "https://codeforces.com/problemset/problem/1557/D",
    "history": "Moamen was drawing a grid of n rows and 10^ 9 columns containing only digits 0 and 1 . Ezzat noticed what Moamen was drawing and became interested in the minimum number of rows one needs to remove to make the grid beautiful. A grid is beautiful if and only if for every two consecutive rows there is at least one column containing 1 in these two rows. Ezzat will give you the number of rows n , and m segments of the grid that contain digits 1 . Every segment is represented with three integers i , l , and r , where i represents the row number, and l and r represent the first and the last column of the segment in that row. For example, if n = 3 , m = 6 , and the segments are ( 1, 1, 1) , ( 1, 7, 8) , ( 2, 7, 7) , ( 2, 15, 15) , ( 3, 1, 1) , ( 3, 15, 15) , then the grid is: Your task is to tell Ezzat the minimum number of rows that should be removed to make the grid beautiful.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 3\u00b710^ 5 ) . Each of the next m lines contains three integers i , l , and r ( 1 \u2264 i \u2264 n , 1 \u2264 l \u2264 r \u2264 10^ 9 ) . Each of these m lines means that row number i contains digits 1 in columns from l to r , inclusive. Note that the segments may overlap.",
    "output": "In the first line, print a single integer k \u2014 the minimum number of rows that should be removed. In the second line print k distinct integers r_ 1, r_ 2, . . . , r_ k , representing the rows that should be removed ( 1 \u2264 r_ i \u2264 n ) , in any order. If there are multiple answers, print any.",
    "note": "In the first test case, the grid is the one explained in the problem statement. The grid has the following properties: The 1 - st row and the 2 - nd row have a common 1 in the column 7 . The 2 - nd row and the 3 - rd row have a common 1 in the column 15 . As a result, this grid is beautiful and we do not need to remove any row. In the second test case, the given grid is as follows:",
    "topics": [
      "data structures",
      "dp",
      "greedy"
    ],
    "id": "1557D"
  },
  {
    "title": "Gates to Another World",
    "url": "https://codeforces.com/problemset/problem/1556/G",
    "history": "As mentioned previously William really likes playing video games. In one of his favorite games, the player character is in a universe where every planet is designated by a binary number from 0 to 2^ n - 1 . On each planet, there are gates that allow the player to move from planet i to planet j if the binary representations of i and j differ in exactly one bit. William wants to test you and see how you can handle processing the following queries in this game universe: Destroy planets with numbers from l to r inclusively. These planets cannot be moved to anymore. Figure out if it is possible to reach planet b from planet a using some number of planetary gates. It is guaranteed that the planets a and b are not destroyed.",
    "input": "The first line contains two integers n , m ( 1 \u2264 n \u2264 50 , 1 \u2264 m \u2264 5 \u00b7 10^ 4 ) , which are the number of bits in binary representation of each planets' designation and the number of queries, respectively. Each of the next m lines contains a query of two types: block l r \u2014 query for destruction of planets with numbers from l to r inclusively ( 0 \u2264 l \u2264 r < 2^ n ) . It' s guaranteed that no planet will be destroyed twice. ask a b \u2014 query for reachability between planets a and b ( 0 \u2264 a, b < 2^ n ) . It' s guaranteed that planets a and b hasn' t been destroyed yet.",
    "output": "For each query of type ask you must output \" 1\" in a new line, if it is possible to reach planet b from planet a and \" 0\" otherwise ( without quotation marks) .",
    "note": "The first example test can be visualized in the following way: Response to a query ask 0 7 is positive. Next after query block 3 6 the graph will look the following way ( destroyed vertices are highlighted) : Response to a query ask 0 7 is negative, since any path from vertex 0 to vertex 7 must go through one of the destroyed vertices.",
    "topics": [
      "bitmasks",
      "data structures",
      "dsu",
      "two pointers"
    ],
    "id": "1556G"
  },
  {
    "title": "Equilibrium",
    "url": "https://codeforces.com/problemset/problem/1556/E",
    "history": "William has two arrays a and b , each consisting of n items. For some segments l. . r of these arrays William wants to know if it is possible to equalize the values of items in these segments using a balancing operation. Formally, the values are equalized if for each i from l to r holds a_ i = b_ i . To perform a balancing operation an even number of indices must be selected, such that l \u2264 pos_ 1 < pos_ 2 < . . . < pos_ k \u2264 r . Next the items of array a at positions pos_ 1, pos_ 3, pos_ 5, . . . get incremented by one and the items of array b at positions pos_ 2, pos_ 4, pos_ 6, . . . get incremented by one. William wants to find out if it is possible to equalize the values of elements in two arrays for each segment using some number of balancing operations, and what is the minimal number of operations required for that. Note that for each segment the operations are performed independently.",
    "input": "The first line contains a two integers n and q ( 2 \u2264 n \u2264 10^ 5 , 1 \u2264 q \u2264 10^ 5 ) , the size of arrays a and b and the number of segments. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9) . The third line contains n integers b_ 1, b_ 2, . . . , b_ n ( 0 \u2264 b_ i \u2264 10^ 9) . Each of the next q lines contains two integers l_ i and r_ i ( 1 \u2264 l_ i < r_ i \u2264 n) , the edges of segments.",
    "output": "For each segment output a single number \u2014 the minimal number of balancing operations needed or \" - 1\" if it is impossible to equalize segments of arrays.",
    "note": "For the first segment from 2 to 6 you can do one operation with pos = [ 2, 3, 5, 6] , after this operation the arrays will be: a = [ 0, 2, 2, 9, 4, 2, 7, 5] , b = [ 2, 2, 2, 9, 4, 2, 5, 8] . Arrays are equal on a segment from 2 to 6 after this operation. For the second segment from 1 to 7 you can do three following operations: pos = [ 1, 3, 5, 6] pos = [ 1, 7] pos = [ 2, 7] After these operations, the arrays will be: a = [ 2, 2, 2, 9, 4, 2, 7, 5] , b = [ 2, 2, 2, 9, 4, 2, 7, 8] . Arrays are equal on a segment from 1 to 7 after these operations. For the third segment from 2 to 4 you can do one operation with pos = [ 2, 3] , after the operation arrays will be: a = [ 0, 2, 2, 9, 3, 2, 7, 5] , b = [ 2, 2, 2, 9, 4, 1, 5, 8] . Arrays are equal on a segment from 2 to 4 after this operation. It is impossible to equalize the fourth and the fifth segment.",
    "topics": [
      "data structures",
      "dp",
      "greedy"
    ],
    "id": "1556E"
  },
  {
    "title": "Good Graph",
    "url": "https://codeforces.com/problemset/problem/1555/F",
    "history": "You have an undirected graph consisting of n vertices with weighted edges. A simple cycle is a cycle of the graph without repeated vertices. Let the weight of the cycle be the XOR of weights of edges it consists of. Let' s say the graph is good if all its simple cycles have weight 1 . A graph is bad if it' s not good. Initially, the graph is empty. Then q queries follow. Each query has the next type: u v x \u2014 add edge between vertices u and v of weight x if it doesn' t make the graph bad. For each query print, was the edge added or not.",
    "input": "The first line contains two integers n and q ( 3 \u2264 n \u2264 3 \u00b7 10^ 5 ; 1 \u2264 q \u2264 5 \u00b7 10^ 5 ) \u2014 the number of vertices and queries. Next q lines contain queries \u2014 one per line. Each query contains three integers u , v and x ( 1 \u2264 u, v \u2264 n ; u = \u0338 v ; 0 \u2264 x \u2264 1 ) \u2014 the vertices of the edge and its weight. It' s guaranteed that there are no multiple edges in the input.",
    "output": "For each query, print YES if the edge was added to the graph, or NO otherwise ( both case- insensitive) .",
    "note": "",
    "topics": [
      "data structures",
      "dsu",
      "graphs",
      "trees"
    ],
    "id": "1555F"
  },
  {
    "title": "Boring Segments",
    "url": "https://codeforces.com/problemset/problem/1555/E",
    "history": "You are given n segments on a number line, numbered from 1 to n . The i - th segments covers all integer points from l_ i to r_ i and has a value w_ i . You are asked to select a subset of these segments ( possibly, all of them) . Once the subset is selected, it' s possible to travel between two integer points if there exists a selected segment that covers both of them. A subset is good if it' s possible to reach point m starting from point 1 in arbitrary number of moves. The cost of the subset is the difference between the maximum and the minimum values of segments in it. Find the minimum cost of a good subset. In every test there exists at least one good subset.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 3 \u00b7 10^ 5 ; 2 \u2264 m \u2264 10^ 6 ) \u2014 the number of segments and the number of integer points. Each of the next n lines contains three integers l_ i , r_ i and w_ i ( 1 \u2264 l_ i < r_ i \u2264 m ; 1 \u2264 w_ i \u2264 10^ 6 ) \u2014 the description of the i - th segment. In every test there exists at least one good subset.",
    "output": "Print a single integer \u2014 the minimum cost of a good subset.",
    "note": "",
    "topics": [
      "data structures",
      "sortings",
      "trees",
      "two pointers"
    ],
    "id": "1555E"
  },
  {
    "title": "Pairwise Modulo",
    "url": "https://codeforces.com/problemset/problem/1553/F",
    "history": "You have an array a consisting of n distinct positive integers, numbered from 1 to n . Define p_ k as p_ k = \u2211_ 1 \u2264 i, j \u2264 k a_ i a_ j, where x y denotes the remainder when x is divided by y . You have to find and print p_ 1, p_ 2, . . . , p_ n .",
    "input": "The first line contains n \u2014 the length of the array ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) . The second line contains n space- separated distinct integers a_ 1, . . . , a_ n ( 1 \u2264 a_ i \u2264 3 \u00b7 10^ 5 , a_ i = \u0338 a_ j if i = \u0338 j ) .",
    "output": "Print n integers p_ 1, p_ 2, . . . , p_ n .",
    "note": "",
    "topics": [
      "data structures",
      "math"
    ],
    "id": "1553F"
  },
  {
    "title": "Telepanting",
    "url": "https://codeforces.com/problemset/problem/1552/F",
    "history": "An ant moves on the real line with constant speed of 1 unit per second. It starts at 0 and always moves to the right ( so its position increases by 1 each second) . There are n portals, the i - th of which is located at position x_ i and teleports to position y_ i < x_ i . Each portal can be either active or inactive. The initial state of the i - th portal is determined by s_ i : if s_ i= 0 then the i - th portal is initially inactive, if s_ i= 1 then the i - th portal is initially active. When the ant travels through a portal ( i. e. , when its position coincides with the position of a portal) : if the portal is inactive, it becomes active ( in this case the path of the ant is not affected) ; if the portal is active, it becomes inactive and the ant is instantly teleported to the position y_ i , where it keeps on moving as normal. How long ( from the instant it starts moving) does it take for the ant to reach the position x_ n + 1 ? It can be shown that this happens in a finite amount of time. Since the answer may be very large, compute it modulo 998 244 353 .",
    "input": "The first line contains the integer n ( 1\u2264 n\u2264 2\u00b7 10^ 5 ) \u2014 the number of portals. The i - th of the next n lines contains three integers x_ i , y_ i and s_ i ( 1\u2264 y_ i < x_ i\u2264 10^ 9 , s_ i\u2208{ 0, 1} ) \u2014 the position of the i - th portal, the position where the ant is teleported when it travels through the i - th portal ( if it is active) , and the initial state of the i - th portal. The positions of the portals are strictly increasing, that is x_ 1< x_ 2< \u22ef< x_ n . It is guaranteed that the 2n integers x_ 1, x_ 2, . . . , x_ n, y_ 1, y_ 2, . . . , y_ n are all distinct.",
    "output": "Output the amount of time elapsed, in seconds, from the instant the ant starts moving to the instant it reaches the position x_ n+ 1 . Since the answer may be very large, output it modulo 998 244 353 .",
    "note": "Explanation of the first sample: The ant moves as follows ( a curvy arrow denotes a teleporting, a straight arrow denotes normal movement with speed 1 and the time spent during the movement is written above the arrow) . 0 6\u27f6 6 5 3\u27f6 8 1 2\u27f6 3 2 4\u27f6 6 5 2\u27f6 7 4 2\u27f6 6 5 4\u27f6 9 Notice that the total time is 6+ 3+ 2+ 4+ 2+ 2+ 4= 23 . Explanation of the second sample: The ant moves as follows ( a curvy arrow denotes a teleporting, a straight arrow denotes normal movement with speed 1 and the time spent during the movement is written above the arrow) . 0 454971987\u27f6 454971987 406874902 48097086\u27f6 454971988 Notice that the total time is 454971987+ 48097086= 503069073 . Explanation of the third sample: Since all portals are initially off, the ant will not be teleported and will go straight from 0 to x_ n+ 1= 899754846+ 1= 899754847 .",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "sortings"
    ],
    "id": "1552F"
  },
  {
    "title": "Colors and Intervals",
    "url": "https://codeforces.com/problemset/problem/1552/E",
    "history": "The numbers 1, 2, . . . , n \u00b7 k are colored with n colors. These colors are indexed by 1, 2, . . . , n . For each 1 \u2264 i \u2264 n , there are exactly k numbers colored with color i . Let [ a, b] denote the interval of integers between a and b inclusive, that is, the set { a, a + 1, . . . , b} . You must choose n intervals [ a_ 1, b_ 1] , [ a_ 2, b_ 2] , . . . , [ a_ n, b_ n] such that: for each 1 \u2264 i \u2264 n , it holds 1 \u2264 a_ i < b_ i \u2264 n \u00b7 k ; for each 1 \u2264 i \u2264 n , the numbers a_ i and b_ i are colored with color i ; each number 1 \u2264 x \u2264 n \u00b7 k belongs to at most \u2308n/ k - 1\u2309 intervals. One can show that such a family of intervals always exists under the given constraints.",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 100 , 2 \u2264 k \u2264 100 ) \u2014 the number of colors and the number of occurrences of each color. The second line contains n \u00b7 k integers c_ 1, c_ 2, . . . , c_ nk ( 1 \u2264 c_ j \u2264 n ) , where c_ j is the color of number j . It is guaranteed that, for each 1 \u2264 i \u2264 n , it holds c_ j = i for exactly k distinct indices j .",
    "output": "Output n lines. The i - th line should contain the two integers a_ i and b_ i . If there are multiple valid choices of the intervals, output any.",
    "note": "In the first sample, each number can be contained in at most \u23084/ 3 - 1\u2309 = 2 intervals. The output is described by the following picture: In the second sample, the only interval to be chosen is forced to be [ 1, 2] , and each number is indeed contained in at most \u23081/ 2 - 1\u2309 = 1 interval. In the third sample, each number can be contained in at most \u23083/ 3 - 1\u2309 = 2 intervals. The output is described by the following picture:",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "1552E"
  },
  {
    "title": "Wonderful Coloring - 2",
    "url": "https://codeforces.com/problemset/problem/1551/B2",
    "history": "This problem is an extension of the problem \" Wonderful Coloring - 1\" . It has quite many differences, so you should read this statement completely. Recently, Paul and Mary have found a new favorite sequence of integers a_ 1, a_ 2, . . . , a_ n . They want to paint it using pieces of chalk of k colors. The coloring of a sequence is called wonderful if the following conditions are met: each element of the sequence is either painted in one of k colors or isn' t painted; each two elements which are painted in the same color are different ( i. e. there' s no two equal values painted in the same color) ; let' s calculate for each of k colors the number of elements painted in the color \u2014 all calculated numbers must be equal; the total number of painted elements of the sequence is the maximum among all colorings of the sequence which meet the first three conditions. E. g. consider a sequence a= [ 3, 1, 1, 1, 1, 10, 3, 10, 10, 2] and k= 3 . One of the wonderful colorings of the sequence is shown in the figure. The example of a wonderful coloring of the sequence a= [ 3, 1, 1, 1, 1, 10, 3, 10, 10, 2] and k= 3 . Note that one of the elements isn' t painted. Help Paul and Mary to find a wonderful coloring of a given sequence a .",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10000 ) \u2014 the number of test cases. Then t test cases follow. Each test case consists of two lines. The first one contains two integers n and k ( 1 \u2264 n \u2264 2\u00b710^ 5 , 1 \u2264 k \u2264 n ) \u2014 the length of a given sequence and the number of colors, respectively. The second one contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) . It is guaranteed that the sum of n over all test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "Output t lines, each of them must contain a description of a wonderful coloring for the corresponding test case. Each wonderful coloring must be printed as a sequence of n integers c_ 1, c_ 2, . . . , c_ n ( 0 \u2264 c_ i \u2264 k ) separated by spaces where c_ i= 0 , if i - th element isn' t painted; c_ i> 0 , if i - th element is painted in the c_ i - th color. Remember that you need to maximize the total count of painted elements for the wonderful coloring. If there are multiple solutions, print any one.",
    "note": "In the first test case, the answer is shown in the figure in the statement. The red color has number 1 , the blue color \u2014 2 , the green \u2014 3 .",
    "topics": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "greedy"
    ],
    "id": "1551B2"
  },
  {
    "title": "Jumping Around",
    "url": "https://codeforces.com/problemset/problem/1550/F",
    "history": "There is an infinite pond that can be represented with a number line. There are n rocks in the pond, numbered from 1 to n . The i - th rock is located at an integer coordinate a_ i . The coordinates of the rocks are pairwise distinct. The rocks are numbered in the increasing order of the coordinate, so a_ 1 < a_ 2 < . . . < a_ n . A robot frog sits on the rock number s . The frog is programmable. It has a base jumping distance parameter d . There also is a setting for the jumping distance range. If the jumping distance range is set to some integer k , then the frog can jump from some rock to any rock at a distance from d - k to d + k inclusive in any direction. The distance between two rocks is an absolute difference between their coordinates. You are assigned a task to implement a feature for the frog. Given two integers i and k determine if the frog can reach a rock number i from a rock number s performing a sequence of jumps with the jumping distance range set to k . The sequence can be arbitrarily long or empty. You will be given q testcases for that feature, the j - th testcase consists of two integers i and k . Print \" Yes\" if the i - th rock is reachable and \" No\" otherwise. You can output \" YES\" and \" NO\" in any case ( for example, strings \" yEs\" , \" yes\" , \" Yes\" and ' YES\" ' will be recognized as a positive answer) .",
    "input": "The first line contains four integers n , q , s and d ( 1 \u2264 n, q \u2264 2 \u00b7 10^ 5 ; 1 \u2264 s \u2264 n ; 1 \u2264 d \u2264 10^ 6 ) \u2014 the number of rocks, the number of testcases, the starting rock and the base jumping distance parameter. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 6 ) \u2014 the coordinates of the rocks. The coordinates of the rocks are pairwise distinct. The rocks are numbered in the increasing order of distance from the land, so a_ 1 < a_ 2 < . . . < a_ n . Each of the next q lines contains two integers i and k ( 1 \u2264 i \u2264 n ; 1 \u2264 k \u2264 10^ 6 ) \u2014 the parameters to the testcase.",
    "output": "For each of the testcases print an answer. If there is a sequence of jumps from a rock number s to a rock number i with the jumping distance range set to k , then print \" Yes\" . Otherwise, print \" No\" .",
    "note": "Explanation of the first example: In the first testcase the destination rock is the same as the starting rock, thus no jumps are required to reach it. In the second testcase the frog can jump any distance in the range [ 5 - 2; 5 + 2] . Thus, it can reach rock number 5 ( by jumping 7 to the right) and rock number 3 ( by jumping 3 to the left) . From rock number 3 it can reach rock number 2 ( by jumping 5 to the left) . From rock number 2 it can reach rock number 1 ( by jumping 4 to the left) . However, there is no way to reach rock number 7 . In the third testcase the frog can jump any distance in the range [ 5 - 3; 5 + 3] . Thus, it can reach rock number 7 by jumping to rock 5 first and to 7 afterwards. The fourth testcase is shown in the explanation for the second testcase.",
    "topics": [
      "binary search",
      "data structures",
      "divide and conquer",
      "dp",
      "dsu",
      "graphs",
      "shortest paths"
    ],
    "id": "1550F"
  },
  {
    "title": "Gregor and the Two Painters",
    "url": "https://codeforces.com/problemset/problem/1548/E",
    "history": "Two painters, Amin and Benj, are repainting Gregor' s living room ceiling! The ceiling can be modeled as an n \u00d7 m grid. For each i between 1 and n , inclusive, painter Amin applies a_ i layers of paint to the entire i - th row. For each j between 1 and m , inclusive, painter Benj applies b_ j layers of paint to the entire j - th column. Therefore, the cell ( i, j) ends up with a_ i+ b_ j layers of paint. Gregor considers the cell ( i, j) to be badly painted if a_ i+ b_ j \u2264 x . Define a badly painted region to be a maximal connected component of badly painted cells, i. e. a connected component of badly painted cells such that all adjacent to the component cells are not badly painted. Two cells are considered adjacent if they share a side. Gregor is appalled by the state of the finished ceiling, and wants to know the number of badly painted regions.",
    "input": "The first line contains three integers n , m and x ( 1 \u2264 n, m \u2264 2\u00b7 10^ 5 , 1 \u2264 x \u2264 2\u00b7 10^ 5 ) \u2014 the dimensions of Gregor' s ceiling, and the maximum number of paint layers in a badly painted cell. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 2\u00b7 10^ 5 ) , the number of paint layers Amin applies to each row. The third line contains m integers b_ 1, b_ 2, . . . , b_ m ( 1 \u2264 b_ j \u2264 2\u00b7 10^ 5 ) , the number of paint layers Benj applies to each column.",
    "output": "Print a single integer, the number of badly painted regions.",
    "note": "The diagram below represents the first example. The numbers to the left of each row represent the list a , and the numbers above each column represent the list b . The numbers inside each cell represent the number of paint layers in that cell. The colored cells correspond to badly painted cells. The red and blue cells respectively form 2 badly painted regions.",
    "topics": [
      "data structures",
      "divide and conquer",
      "graphs",
      "greedy",
      "math"
    ],
    "id": "1548E"
  },
  {
    "title": "Integers Have Friends",
    "url": "https://codeforces.com/problemset/problem/1548/B",
    "history": "British mathematician John Littlewood once said about Indian mathematician Srinivasa Ramanujan that \" every positive integer was one of his personal friends. \" It turns out that positive integers can also be friends with each other! You are given an array a of distinct positive integers. Define a subarray a_ i, a_ i+ 1, . . . , a_ j to be a friend group if and only if there exists an integer m \u2265 2 such that a_ i m = a_ i+ 1 m = . . . = a_ j m , where x y denotes the remainder when x is divided by y . Your friend Gregor wants to know the size of the largest friend group in a .",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 2\u00b7 10^ 4 ) . Each test case begins with a line containing the integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) , the size of the array a . The next line contains n positive integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u226410^ 18 ) , representing the contents of the array a . It is guaranteed that all the numbers in a are distinct. It is guaranteed that the sum of n over all test cases is less than 2\u00b7 10^ 5 .",
    "output": "Your output should consist of t lines. Each line should consist of a single integer, the size of the largest friend group in a .",
    "note": "In the first test case, the array is [ 1, 5, 2, 4, 6] . The largest friend group is [ 2, 4, 6] , since all those numbers are congruent to 0 modulo 2 , so m= 2 . In the second test case, the array is [ 8, 2, 5, 10] . The largest friend group is [ 8, 2, 5] , since all those numbers are congruent to 2 modulo 3 , so m= 3 . In the third case, the largest friend group is [ 1000, 2000] . There are clearly many possible values of m that work.",
    "topics": [
      "binary search",
      "data structures",
      "divide and conquer",
      "math",
      "number theory",
      "two pointers"
    ],
    "id": "1548B"
  },
  {
    "title": "Array Stabilization (GCD version)",
    "url": "https://codeforces.com/problemset/problem/1547/F",
    "history": "You are given an array of positive integers a = [ a_ 0, a_ 1, . . . , a_ n - 1] ( n \u2265 2 ) . In one step, the array a is replaced with another array of length n , in which each element is the greatest common divisor ( GCD) of two neighboring elements ( the element itself and its right neighbor; consider that the right neighbor of the ( n - 1) - th element is the 0 - th element) . Formally speaking, a new array b = [ b_ 0, b_ 1, . . . , b_ n - 1] is being built from array a = [ a_ 0, a_ 1, . . . , a_ n - 1] such that b_ i = ( a_ i, a_ ( i + 1) n) , where ( x, y) is the greatest common divisor of x and y , and x y is the remainder of x dividing by y . In one step the array b is built and then the array a is replaced with b ( that is, the assignment a : = b is taking place) . For example, if a = [ 16, 24, 10, 5] then b = [ ( 16, 24) , ( 24, 10) , ( 10, 5) , ( 5, 16) ] = [ 8, 2, 5, 1] . Thus, after one step the array a = [ 16, 24, 10, 5] will be equal to [ 8, 2, 5, 1] . For a given array a , find the minimum number of steps after which all values a_ i become equal ( that is, a_ 0 = a_ 1 = . . . = a_ n - 1 ) . If the original array a consists of identical elements then consider the number of steps is equal to 0 .",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) . Then t test cases follow. Each test case contains two lines. The first line contains an integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 length of the sequence a . The second line contains n integers a_ 0, a_ 1, . . . , a_ n - 1 ( 1 \u2264 a_ i \u2264 10^ 6 ) . It is guaranteed that the sum of n over all test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "Print t numbers \u2014 answers for each test case.",
    "note": "",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "divide and conquer",
      "number theory",
      "two pointers"
    ],
    "id": "1547F"
  },
  {
    "title": "Air Conditioners",
    "url": "https://codeforces.com/problemset/problem/1547/E",
    "history": "On a strip of land of length n there are k air conditioners: the i - th air conditioner is placed in cell a_ i ( 1 \u2264 a_ i \u2264 n ) . Two or more air conditioners cannot be placed in the same cell ( i. e. all a_ i are distinct) . Each air conditioner is characterized by one parameter: temperature. The i - th air conditioner is set to the temperature t_ i . Example of strip of length n= 6 , where k= 2 , a= [ 2, 5] and t= [ 14, 16] . For each cell i ( 1 \u2264 i \u2264 n ) find it' s temperature, that can be calculated by the formula min_ 1 \u2264 j \u2264 k( t_ j + | a_ j - i| ) , where | a_ j - i| denotes absolute value of the difference a_ j - i . In other words, the temperature in cell i is equal to the minimum among the temperatures of air conditioners, increased by the distance from it to the cell i . Let' s look at an example. Consider that n= 6, k= 2 , the first air conditioner is placed in cell a_ 1= 2 and is set to the temperature t_ 1= 14 and the second air conditioner is placed in cell a_ 2= 5 and is set to the temperature t_ 2= 16 . In that case temperatures in cells are: temperature in cell 1 is: min( 14 + | 2 - 1| , 16 + | 5 - 1| ) = min( 14 + 1, 16 + 4) = min( 15, 20) = 15 ; temperature in cell 2 is: min( 14 + | 2 - 2| , 16 + | 5 - 2| ) = min( 14 + 0, 16 + 3) = min( 14, 19) = 14 ; temperature in cell 3 is: min( 14 + | 2 - 3| , 16 + | 5 - 3| ) = min( 14 + 1, 16 + 2) = min( 15, 18) = 15 ; temperature in cell 4 is: min( 14 + | 2 - 4| , 16 + | 5 - 4| ) = min( 14 + 2, 16 + 1) = min( 16, 17) = 16 ; temperature in cell 5 is: min( 14 + | 2 - 5| , 16 + | 5 - 5| ) = min( 14 + 3, 16 + 0) = min( 17, 16) = 16 ; temperature in cell 6 is: min( 14 + | 2 - 6| , 16 + | 5 - 6| ) = min( 14 + 4, 16 + 1) = min( 18, 17) = 17 . For each cell from 1 to n find the temperature in it.",
    "input": "The first line contains one integer q ( 1 \u2264 q \u2264 10^ 4 ) \u2014 the number of test cases in the input. Then test cases follow. Before each test case, there is an empty line. Each test case contains three lines. The first line contains two integers n ( 1 \u2264 n \u2264 3 \u00b7 10^ 5 ) and k ( 1 \u2264 k \u2264 n ) \u2014 the length of the strip of land and the number of air conditioners respectively. The second line contains k integers a_ 1, a_ 2, . . . , a_ k ( 1 \u2264 a_ i \u2264 n ) \u2014 positions of air conditioners on the strip of land. The third line contains k integers t_ 1, t_ 2, . . . , t_ k ( 1 \u2264 t_ i \u2264 10^ 9 ) \u2014 temperatures of air conditioners. It is guaranteed that the sum of n over all test cases does not exceed 3 \u00b7 10^ 5 .",
    "output": "For each test case output n integers separated by space: temperatures of air in cells.",
    "note": "",
    "topics": [
      "data structures",
      "dp",
      "implementation",
      "shortest paths",
      "sortings",
      "two pointers"
    ],
    "id": "1547E"
  },
  {
    "title": "AquaMoon and Potatoes",
    "url": "https://codeforces.com/problemset/problem/1545/F",
    "history": "AquaMoon has three integer arrays a , b , c of length n , where 1 \u2264 a_ i, b_ i, c_ i \u2264 n for all i . In order to accelerate her potato farming, she organizes her farm in a manner based on these three arrays. She is now going to complete m operations to count how many potatoes she can get. Each operation will have one of the two types: AquaMoon reorganizes their farm and makes the k - th element of the array a equal to x . In other words, perform the assignment a_ k : = x . Given a positive integer r , AquaMoon receives a potato for each triplet ( i, j, k) , such that 1\u2264 i< j< k\u2264 r , and b_ a_ i= a_ j= c_ a_ k . Count the number of such triplets. As AquaMoon is busy finding the library, help her complete all of their operations.",
    "input": "The first line contains two integers n , m ( 1\u2264 n\u2264 2\u00b710^ 5 , 1\u2264 m\u2264 5\u00b710^ 4 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1\u2264 a_ i\u2264 n ) . The third line contains n integers b_ 1, b_ 2, . . . , b_ n ( 1\u2264 b_ i\u2264 n ) . The fourth line contains n integers c_ 1, c_ 2, . . . , c_ n ( 1\u2264 c_ i\u2264 n ) . The next m lines describe operations, the i - th line describes the i - th operation in one of these two formats: \" 1 k x \" ( 1\u2264 k, x\u2264 n ) , representing an operation of the first type. \" 2 r \" ( 1\u2264 r\u2264 n ) , representing an operation of the second type. It is guaranteed that there is at least one operation of the second type.",
    "output": "For each operation of the second type print the answer.",
    "note": "For the first operation, the triplets are: i= 1 , j= 2 , k= 3 i= 2 , j= 3 , k= 4 i= 3 , j= 4 , k= 5 There is no satisfying triplet for the third operation. For the fourth operation, the triplets are: i= 2 , j= 4 , k= 5 i= 3 , j= 4 , k= 5",
    "topics": [
      "brute force",
      "data structures",
      "dp"
    ],
    "id": "1545F"
  },
  {
    "title": "AquaMoon and Time Stop (hard version)",
    "url": "https://codeforces.com/problemset/problem/1545/E2",
    "history": "Note that the differences between easy and hard versions are the constraints on n and the time limit. You can make hacks only if both versions are solved. AquaMoon knew through foresight that some ghosts wanted to curse tourists on a pedestrian street. But unfortunately, this time, these ghosts were hiding in a barrier, and she couldn' t enter this barrier in a short time and destroy them. Therefore, all that can be done is to save any unfortunate person on the street from the ghosts. The pedestrian street can be represented as a one- dimensional coordinate system. There is one person hanging out on the pedestrian street. At the time 0 he is at coordinate x , moving with a speed of 1 unit per second. In particular, at time i the person will be at coordinate x+ i . The ghosts are going to cast n curses on the street. The i - th curse will last from time tl_ i- 1+ 10^ - 18 to time tr_ i+ 1- 10^ - 18 ( exclusively) and will kill people with coordinates from l_ i- 1+ 10^ - 18 to r_ i+ 1- 10^ - 18 ( exclusively) . Formally that means, that the person, whose coordinate is between ( l_ i- 1+ 10^ - 18, r_ i+ 1- 10^ - 18) in the time range ( tl_ i- 1+ 10^ - 18, tr_ i+ 1- 10^ - 18) will die. To save the person on the street, AquaMoon can stop time at any moment t , and then move the person from his current coordinate x to any coordinate y ( t , x and y are not necessarily integers) . The movement costs AquaMoon | x- y| energy. The movement is continuous, so if there exists some cursed area between points x and y at time t , the person will die too. AquaMoon wants to know what is the minimum amount of energy she needs to spend in order to save the person on the street from all n curses. But she is not good at programming. As her friend, can you help her?",
    "input": "The first line contains a single integer n ( 1\u2264 n\u2264 2 \u00b7 10^ 5 ) \u2014 the number of curses. The next line contains a single integer x ( 1\u2264 x\u2264 10^ 6 ) \u2014 the initial coordinate of the person. The following n lines contain four integers tl_ i , tr_ i , l_ i , r_ i each ( 1\u2264 tl_ i\u2264 tr_ i\u2264 10^ 6 , 1\u2264 l_ i\u2264 r_ i\u2264 10^ 6 ) .",
    "output": "Print a single integer \u2014 the minimum energy which AquaMoon needs to spent, rounded up to the nearest integer ( in case there are two nearest integers you should round the answer to the highest of them) .",
    "note": "",
    "topics": [
      "data structures",
      "dp"
    ],
    "id": "1545E2"
  },
  {
    "title": "AquaMoon and Time Stop (easy version)",
    "url": "https://codeforces.com/problemset/problem/1545/E1",
    "history": "Note that the differences between easy and hard versions are the constraints on n and the time limit. You can make hacks only if both versions are solved. AquaMoon knew through foresight that some ghosts wanted to curse tourists on a pedestrian street. But unfortunately, this time, these ghosts were hiding in a barrier, and she couldn' t enter this barrier in a short time and destroy them. Therefore, all that can be done is to save any unfortunate person on the street from the ghosts. The pedestrian street can be represented as a one- dimensional coordinate system. There is one person hanging out on the pedestrian street. At the time 0 he is at coordinate x , moving with a speed of 1 unit per second. In particular, at time i the person will be at coordinate x+ i . The ghosts are going to cast n curses on the street. The i - th curse will last from time tl_ i- 1+ 10^ - 18 to time tr_ i+ 1- 10^ - 18 ( exclusively) and will kill people with coordinates from l_ i- 1+ 10^ - 18 to r_ i+ 1- 10^ - 18 ( exclusively) . Formally that means, that the person, whose coordinate is between ( l_ i- 1+ 10^ - 18, r_ i+ 1- 10^ - 18) in the time range ( tl_ i- 1+ 10^ - 18, tr_ i+ 1- 10^ - 18) will die. To save the person on the street, AquaMoon can stop time at any moment t , and then move the person from his current coordinate x to any coordinate y ( t , x and y are not necessarily integers) . The movement costs AquaMoon | x- y| energy. The movement is continuous, so if there exists some cursed area between points x and y at time t , the person will die too. AquaMoon wants to know what is the minimum amount of energy she needs to spend in order to save the person on the street from all n curses. But she is not good at programming. As her friend, can you help her?",
    "input": "The first line contains a single integer n ( 1\u2264 n\u2264 2000 ) \u2014 the number of curses. The next line contains a single integer x ( 1\u2264 x\u2264 10^ 6 ) \u2014 the initial coordinate of the person. The following n lines contain four integers tl_ i , tr_ i , l_ i , r_ i each ( 1\u2264 tl_ i\u2264 tr_ i\u2264 10^ 6 , 1\u2264 l_ i\u2264 r_ i\u2264 10^ 6 ) .",
    "output": "Print a single integer \u2014 the minimum energy which AquaMoon needs to spent, rounded up to the nearest integer ( in case there are two nearest integers you should round the answer to the highest of them) .",
    "note": "",
    "topics": [
      "data structures",
      "dp"
    ],
    "id": "1545E1"
  },
  {
    "title": "Inverse Inversions",
    "url": "https://codeforces.com/problemset/problem/1540/D",
    "history": "You were playing with permutation p of length n , but you lost it in Blair, Alabama! Luckily, you remember some information about the permutation. More specifically, you remember an array b of length n , where b_ i is the number of indices j such that j < i and p_ j > p_ i . You have the array b , and you want to find the permutation p . However, your memory isn' t perfect, and you constantly change the values of b as you learn more. For the next q seconds, one of the following things happen: 1 i x \u2014 you realize that b_ i is equal to x ; 2 i \u2014 you need to find the value of p_ i . If there' s more than one answer, print any. It can be proven that there' s always at least one possible answer under the constraints of the problem. Answer the queries, so you can remember the array!",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the size of permutation. The second line contains n integers b_ 1, b_ 2 . . . , b_ n ( 0 \u2264 b_ i < i ) \u2014 your initial memory of the array b . The third line contains a single integer q ( 1 \u2264 q \u2264 10^ 5 ) \u2014 the number of queries. The next q lines contain the queries, each with one of the following formats: 1 i x ( 0 \u2264 x < i \u2264 n ) , representing a query of type 1 . 2 i ( 1 \u2264 i \u2264 n ) , representing a query of type 2 . It is guaranteed that there' s at least one query of type 2 .",
    "output": "For each query of type 2 , print one integer \u2014 the answer to the query.",
    "note": "For the first sample, there' s initially only one possible permutation that satisfies the constraints: [ 1, 2, 3] , as it must have 0 inversions. After the query of type 1 , the array b is [ 0, 1, 0] . The only permutation p that produces this array is [ 2, 1, 3] . With this permutation, b_ 2 is equal to 1 as p_ 1 > p_ 2 .",
    "topics": [
      "binary search",
      "brute force",
      "data structures"
    ],
    "id": "1540D"
  },
  {
    "title": "Strange Array",
    "url": "https://codeforces.com/problemset/problem/1539/F",
    "history": "Vasya has an array of n integers a_ 1, a_ 2, . . . , a_ n . Vasya thinks that all numbers in his array are strange for some reason. To calculate how strange the i - th number is, Vasya created the following algorithm. He chooses a subsegment a_ l, a_ l+ 1, . . . , a_ r , such that 1 \u2264 l \u2264 i \u2264 r \u2264 n , sort its elements in increasing order in his head ( he can arrange equal elements arbitrary) . After that he finds the center of the segment. The center of a segment is the element at position ( l + r) / 2 , if the length of the segment is odd, and at position ( l + r + 1) / 2 otherwise. Now Vasya finds the element that was at position i before the sorting, and calculates the distance between its current position and the center of the subsegment ( the distance between the elements with indices j and k is | j - k| ) . The strangeness of the number at position i is the maximum distance among all suitable choices of l and r . Vasya wants to calculate the strangeness of each number in his array. Help him to do it.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 200 000 ) \u2014 the size of the array. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 Vasya' s array.",
    "output": "Print a single line with n numbers. The i - th of them must be equal to the strangeness of the i - th element of the array.",
    "note": "In the first example: For the first position we choose the segment from 1 to 5 . After sorting, it looks like [ 1, 2, 3, 4, 5] , the center is 3 . The distance from the center to 5 is 2 . For the second position we choose the segment from 2 to 4 . For the third position we choose the segment from 3 to 5 . For the fourth position we choose the segment from 1 to 4 . After sorting, it looks like [ 2, 3, 4, 5] , the center is 4 . The distance from the center to 2 is 2 . For the fifth position we choose the segment from 1 to 5 .",
    "topics": [
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "1539F"
  },
  {
    "title": "Game with Cards",
    "url": "https://codeforces.com/problemset/problem/1539/E",
    "history": "The Alice' s computer is broken, so she can' t play her favorite card game now. To help Alice, Bob wants to answer n her questions. Initially, Bob holds one card with number 0 in the left hand and one in the right hand. In the i - th question, Alice asks Bob to replace a card in the left or right hand with a card with number k_ i ( Bob chooses which of two cards he changes, Bob must replace exactly one card) . After this action, Alice wants the numbers on the left and right cards to belong to given segments ( segments for left and right cards can be different) . Formally, let the number on the left card be x , and on the right card be y . Then after the i - th swap the following conditions must be satisfied: a_ l, i\u2264 x \u2264 b_ l, i , and a_ r, i\u2264 y \u2264 b_ r, i . Please determine if Bob can answer all requests. If it is possible, find a way to do it.",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 100 000 , 2 \u2264 m \u2264 10^ 9 ) \u2014 the number of questions and the maximum possible value on the card. Then n queries are described. Every description contains 3 lines. The first line of the description of the i - th query contains a single integer k_ i ( 0 \u2264 k_ i \u2264 m ) \u2014 the number on a new card. The second line of the description of the i - th query contains two integers a_ l, i and b_ l, i ( 0 \u2264 a_ l, i\u2264 b_ l, i\u2264 m ) \u2014 the minimum and maximum values of the card at the left hand after the replacement. The third line of the description of the i - th query contains two integers a_ r, i and b_ r, i ( 0 \u2264 a_ r, i\u2264 b_ r, i\u2264 m ) \u2014 the minimum and maximum values of the card at the right hand after the replacement.",
    "output": "At the first line, print \" Yes\" , if Bob can answer all queries, and \" No\" otherwise. If Bob can answer all n queries, then at the second line print n numbers: a way to satisfy all requirements. If in i - th query Bob needs to replace the card in the left hand, print 0 , otherwise print 1 . If there are multiple answers, print any.",
    "note": "",
    "topics": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "dp",
      "greedy",
      "implementation"
    ],
    "id": "1539E"
  },
  {
    "title": "Funny Substrings",
    "url": "https://codeforces.com/problemset/problem/1538/E",
    "history": "Polycarp came up with a new programming language. There are only two types of statements in it: \" x : = s\" : assign the variable named x the value s ( where s is a string) . For example, the statement var : = hello assigns the variable named var the value hello. Note that s is the value of a string, not the name of a variable. Between the variable name, the : = operator and the string contains exactly one space each. \" x = a + b\" : assign the variable named x the concatenation of values of two variables a and b. For example, if the program consists of three statements a : = hello, b : = world, c = a + b, then the variable c will contain the string helloworld. It is guaranteed that the program is correct and the variables a and b were previously defined. There is exactly one space between the variable names and the = and + operators. All variable names and strings only consist of lowercase letters of the English alphabet and do not exceed 5 characters. The result of the program is the number of occurrences of string haha in the string that was written to the variable in the last statement. Polycarp was very tired while inventing that language. He asks you to implement it. Your task is \u2014 for given program statements calculate the number of occurrences of string haha in the last assigned variable.",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 10^ 3 ) . Then t test cases follow. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 50 ) \u2014 the number of statements in the program. All variable names and strings are guaranteed to consist only of lowercase letters of the English alphabet and do not exceed 5 characters. This is followed by n lines describing the statements in the format described above. It is guaranteed that the program is correct.",
    "output": "For each set of input data, output the number of occurrences of the haha substring in the string that was written to the variable in the last statement.",
    "note": "In the first test case the resulting value of d is hhahahaha.",
    "topics": [
      "data structures",
      "hashing",
      "implementation",
      "matrices",
      "strings"
    ],
    "id": "1538E"
  },
  {
    "title": "Number of Pairs",
    "url": "https://codeforces.com/problemset/problem/1538/C",
    "history": "You are given an array a of n integers. Find the number of pairs ( i, j) ( 1 \u2264 i < j \u2264 n ) where the sum of a_ i + a_ j is greater than or equal to l and less than or equal to r ( that is, l \u2264 a_ i + a_ j \u2264 r ) . For example, if n = 3 , a = [ 5, 1, 2] , l = 4 and r = 7 , then two pairs are suitable: i= 1 and j= 2 ( 4 \u2264 5 + 1 \u2264 7 ) ; i= 1 and j= 3 ( 4 \u2264 5 + 2 \u2264 7 ) .",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) . Then t test cases follow. The first line of each test case contains three integers n, l, r ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 l \u2264 r \u2264 10^ 9 ) \u2014 the length of the array and the limits on the sum in the pair. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n overall test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output a single integer \u2014 the number of index pairs ( i, j) ( i < j ) , such that l \u2264 a_ i + a_ j \u2264 r .",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "math",
      "two pointers"
    ],
    "id": "1538C"
  },
  {
    "title": "Erase and Extend (Hard Version)",
    "url": "https://codeforces.com/problemset/problem/1537/E2",
    "history": "This is the hard version of the problem. The only difference is the constraints on n and k . You can make hacks only if all versions of the problem are solved. You have a string s , and you can do two types of operations on it: Delete the last character of the string. Duplicate the string: s: = s+ s , where + denotes concatenation. You can use each operation any number of times ( possibly none) . Your task is to find the lexicographically smallest string of length exactly k that can be obtained by doing these operations on string s . A string a is lexicographically smaller than a string b if and only if one of the following holds: a is a prefix of b , but a b ; In the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b .",
    "input": "The first line contains two integers n , k ( 1 \u2264 n, k \u2264 5\u00b7 10^ 5 ) \u2014 the length of the original string s and the length of the desired string. The second line contains the string s , consisting of n lowercase English letters.",
    "output": "Print the lexicographically smallest string of length k that can be obtained by doing the operations on string s .",
    "note": "In the first test, it is optimal to make one duplication: \" dbcadabc\" \u2192 \" dbcadabcdbcadabc\" . In the second test it is optimal to delete the last 3 characters, then duplicate the string 3 times, then delete the last 3 characters to make the string have length k . \" abcd\" \u2192 \" abc\" \u2192 \" ab\" \u2192 \" a\" \u2192 \" aa\" \u2192 \" aaaa\" \u2192 \" aaaaaaaa\" \u2192 \" aaaaaaa\" \u2192 \" aaaaaa\" \u2192 \" aaaaa\" .",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "hashing",
      "string suffix structures",
      "strings",
      "two pointers"
    ],
    "id": "1537E2"
  },
  {
    "title": "Omkar and Medians",
    "url": "https://codeforces.com/problemset/problem/1536/D",
    "history": "Uh oh! Ray lost his array yet again! However, Omkar might be able to help because he thinks he has found the OmkArray of Ray' s array. The OmkArray of an array a with elements a_ 1, a_ 2, . . . , a_ 2k- 1 , is the array b with elements b_ 1, b_ 2, . . . , b_ k such that b_ i is equal to the median of a_ 1, a_ 2, . . . , a_ 2i- 1 for all i . Omkar has found an array b of size n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , - 10^ 9 \u2264 b_ i \u2264 10^ 9 ) . Given this array b , Ray wants to test Omkar' s claim and see if b actually is an OmkArray of some array a . Can you help Ray? The median of a set of numbers a_ 1, a_ 2, . . . , a_ 2i- 1 is the number c_ i where c_ 1, c_ 2, . . . , c_ 2i- 1 represents a_ 1, a_ 2, . . . , a_ 2i- 1 sorted in nondecreasing order.",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the array b . The second line contains n integers b_ 1, b_ 2, . . . , b_ n ( - 10^ 9 \u2264 b_ i \u2264 10^ 9 ) \u2014 the elements of b . It is guaranteed the sum of n across all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output one line containing YES if there exists an array a such that b_ i is the median of a_ 1, a_ 2, . . . , a_ 2i- 1 for all i , and NO otherwise. The case of letters in YES and NO do not matter ( so yEs and No will also be accepted) .",
    "note": "In the second case of the first sample, the array [ 4] will generate an OmkArray of [ 4] , as the median of the first element is 4 . In the fourth case of the first sample, the array [ 3, 2, 5] will generate an OmkArray of [ 3, 3] , as the median of 3 is 3 and the median of 2, 3, 5 is 3 . In the fifth case of the first sample, the array [ 2, 1, 0, 3, 4, 4, 3] will generate an OmkArray of [ 2, 1, 2, 3] as the median of 2 is 2 the median of 0, 1, 2 is 1 the median of 0, 1, 2, 3, 4 is 2 and the median of 0, 1, 2, 3, 3, 4, 4 is 3 . In the second case of the second sample, the array [ 1, 0, 4, 3, 5, - 2, - 2, - 2, - 4, - 3, - 4, - 1, 5] will generate an OmkArray of [ 1, 1, 3, 1, 0, - 2, - 1] , as the median of 1 is 1 the median of 0, 1, 4 is 1 the median of 0, 1, 3, 4, 5 is 3 the median of - 2, - 2, 0, 1, 3, 4, 5 is 1 the median of - 4, - 2, - 2, - 2, 0, 1, 3, 4, 5 is 0 the median of - 4, - 4, - 3, - 2, - 2, - 2, 0, 1, 3, 4, 5 is - 2 and the median of - 4, - 4, - 3, - 2, - 2, - 2, - 1, 0, 1, 3, 4, 5, 5 is - 1 For all cases where the answer is NO, it can be proven that it is impossible to find an array a such that b is the OmkArray of a .",
    "topics": [
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "1536D"
  },
  {
    "title": "Diluc and Kaeya",
    "url": "https://codeforces.com/problemset/problem/1536/C",
    "history": "The tycoon of a winery empire in Mondstadt, unmatched in every possible way. A thinker in the Knights of Favonius with an exotic appearance. This time, the brothers are dealing with a strange piece of wood marked with their names. This plank of wood can be represented as a string of n characters. Each character is either a ' D' or a ' K' . You want to make some number of cuts ( possibly 0 ) on this string, partitioning it into several contiguous pieces, each with length at least 1 . Both brothers act with dignity, so they want to split the wood as evenly as possible. They want to know the maximum number of pieces you can split the wood into such that the ratios of the number of occurrences of ' D' to the number of occurrences of ' K' in each chunk are the same. Kaeya, the curious thinker, is interested in the solution for multiple scenarios. He wants to know the answer for every prefix of the given string. Help him to solve this problem! For a string we define a ratio as a: b where ' D' appears in it a times, and ' K' appears b times. Note that a or b can equal 0 , but not both. Ratios a: b and c: d are considered equal if and only if a\u00b7 d = b\u00b7 c . For example, for the string ' DDD' the ratio will be 3: 0 , for ' DKD' \u2014 2: 1 , for ' DKK' \u2014 1: 2 , and for ' KKKKDD' \u2014 2: 4 . Note that the ratios of the latter two strings are equal to each other, but they are not equal to the ratios of the first two strings.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 1000 ) . Description of the test cases follows. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 5 \u00b7 10^ 5 ) \u2014 the length of the wood. The second line of each test case contains a string s of length n . Every character of s will be either ' D' or ' K' . It is guaranteed that the sum of n over all test cases does not exceed 5 \u00b7 10^ 5 .",
    "output": "For each test case, output n space separated integers. The i - th of these numbers should equal the answer for the prefix s_ 1, s_ 2, . . . , s_ i .",
    "note": "For the first test case, there is no way to partition ' D' or ' DDK' into more than one block with equal ratios of numbers of ' D' and ' K' , while you can split ' DD' into ' D' and ' D' . For the second test case, you can split each prefix of length i into i blocks ' D' .",
    "topics": [
      "data structures",
      "dp",
      "hashing",
      "number theory"
    ],
    "id": "1536C"
  },
  {
    "title": "String Distance",
    "url": "https://codeforces.com/problemset/problem/1535/F",
    "history": "Suppose you are given two strings a and b . You can apply the following operation any number of times: choose any contiguous substring of a or b , and sort the characters in it in non- descending order. Let f( a, b) the minimum number of operations you have to apply in order to make them equal ( or f( a, b) = 1337 if it is impossible to make a and b equal using these operations) . For example: f( ab, ab) = 0 ; f( ba, ab) = 1 ( in one operation, we can sort the whole first string) ; f( ebcda, ecdba) = 1 ( in one operation, we can sort the substring of the second string starting from the 2 - nd character and ending with the 4 - th character) ; f( a, b) = 1337 . You are given n strings s_ 1, s_ 2, . . . , s_ k having equal length. Calculate \u2211_ i = 1^ n\u2211_ j = i + 1^ n f( s_ i, s_ j) .",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of strings. Then n lines follow, each line contains one of the strings s_ i , consisting of lowercase Latin letters. | s_ 1| = | s_ 2| = . . . = | s_ n| , and n \u00b7 | s_ 1| \u2264 2 \u00b7 10^ 5 . All these strings are pairwise distinct.",
    "output": "Print one integer: \u2211_ i = 1^ n\u2211_ j = i + 1^ n f( s_ i, s_ j) .",
    "note": "",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "hashing",
      "implementation",
      "strings"
    ],
    "id": "1535F"
  },
  {
    "title": "Gold Transfer",
    "url": "https://codeforces.com/problemset/problem/1535/E",
    "history": "You are given a rooted tree. Each vertex contains a_ i tons of gold, which costs c_ i per one ton. Initially, the tree consists only a root numbered 0 with a_ 0 tons of gold and price c_ 0 per ton. There are q queries. Each query has one of two types: Add vertex i ( where i is an index of query) as a son to some vertex p_ i ; vertex i will have a_ i tons of gold with c_ i per ton. It' s guaranteed that c_ i > c_ p_ i . For a given vertex v_ i consider the simple path from v_ i to the root. We need to purchase w_ i tons of gold from vertices on this path, spending the minimum amount of money. If there isn' t enough gold on the path, we buy all we can. If we buy x tons of gold in some vertex v the remaining amount of gold in it decreases by x ( of course, we can' t buy more gold that vertex has at the moment) . For each query of the second type, calculate the resulting amount of gold we bought and the amount of money we should spend. Note that you should solve the problem in online mode. It means that you can' t read the whole input at once. You can read each query only after writing the answer for the last query, so don' t forget to flush output after printing answers. You can use functions like fflush( stdout) in C+ + and BufferedWriter. flush in Java or similar after each writing in your program. In standard ( if you don' t tweak I/ O) , endl flushes cout in C+ + and System. out. println in Java ( or println in Kotlin) makes automatic flush as well.",
    "input": "The first line contains three integers q , a_ 0 and c_ 0 ( 1 \u2264 q \u2264 3 \u00b7 10^ 5 ; 1 \u2264 a_ 0, c_ 0 < 10^ 6 ) \u2014 the number of queries, the amount of gold in the root and its price. Next q lines contain descriptions of queries; The i - th query has one of two types: \" 1 p_ i a_ i c_ i \" ( 0 \u2264 p_ i < i ; 1 \u2264 a_ i, c_ i < 10^ 6 ) : add vertex i as a son to vertex p_ i . The vertex i will have a_ i tons of gold with price c_ i per one ton. It' s guaranteed that p_ i exists and c_ i > c_ p_ i . \" 2 v_ i w_ i \" ( 0 \u2264 v_ i < i ; 1 \u2264 w_ i < 10^ 6 ) : buy w_ i tons of gold from vertices on path from v_ i to 0 spending the minimum amount of money. If there isn' t enough gold, we buy as much as we can. It' s guaranteed that vertex v_ i exist. It' s guaranteed that there is at least one query of the second type.",
    "output": "For each query of the second type, print the resulting amount of gold we bought and the minimum amount of money we should spend.",
    "note": "Explanation of the sample: At the first query, the tree consist of root, so we purchase 2 tons of gold and pay 2 \u00b7 2 = 4 . 3 tons remain in the root. At the second query, we add vertex 2 as a son of vertex 0 . Vertex 2 now has 3 tons of gold with price 4 per one ton. At the third query, a path from 2 to 0 consists of only vertices 0 and 2 and since c_ 0 < c_ 2 we buy 3 remaining tons of gold in vertex 0 and 1 ton in vertex 2 . So we bought 3 + 1 = 4 tons and paid 3 \u00b7 2 + 1 \u00b7 4 = 10 . Now, in vertex 0 no gold left and 2 tons of gold remain in vertex 2 . At the fourth query, we add vertex 4 as a son of vertex 0 . Vertex 4 now has 1 ton of gold with price 3 . At the fifth query, a path from 4 to 0 consists of only vertices 0 and 4 . But since no gold left in vertex 0 and only 1 ton is in vertex 4 , we buy 1 ton of gold in vertex 4 and spend 1 \u00b7 3 = 3 . Now, in vertex 4 no gold left.",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "greedy",
      "interactive",
      "trees"
    ],
    "id": "1535E"
  },
  {
    "title": "Playoff Tournament",
    "url": "https://codeforces.com/problemset/problem/1535/D",
    "history": "2^ k teams participate in a playoff tournament. The tournament consists of 2^ k - 1 games. They are held as follows: first of all, the teams are split into pairs: team 1 plays against team 2 , team 3 plays against team 4 ( exactly in this order) , and so on ( so, 2^ k- 1 games are played in that phase) . When a team loses a game, it is eliminated, and each game results in elimination of one team ( there are no ties) . After that, only 2^ k- 1 teams remain. If only one team remains, it is declared the champion; otherwise, 2^ k- 2 games are played: in the first one of them, the winner of the game \" 1 vs 2 \" plays against the winner of the game \" 3 vs 4 \" , then the winner of the game \" 5 vs 6 \" plays against the winner of the game \" 7 vs 8 \" , and so on. This process repeats until only one team remains. For example, this picture describes the chronological order of games with k = 3 : Let the string s consisting of 2^ k - 1 characters describe the results of the games in chronological order as follows: if s_ i is 0, then the team with lower index wins the i - th game; if s_ i is 1, then the team with greater index wins the i - th game; if s_ i is ? , then the result of the i - th game is unknown ( any team could win this game) . Let f( s) be the number of possible winners of the tournament described by the string s . A team i is a possible winner of the tournament if it is possible to replace every ? with either 1 or 0 in such a way that team i is the champion. You are given the initial state of the string s . You have to process q queries of the following form: p c \u2014 replace s_ p with character c , and print f( s) as the result of the query.",
    "input": "The first line contains one integer k ( 1 \u2264 k \u2264 18 ) . The second line contains a string consisting of 2^ k - 1 characters \u2014 the initial state of the string s . Each character is either ? , 0, or 1. The third line contains one integer q ( 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of queries. Then q lines follow, the i - th line contains an integer p and a character c ( 1 \u2264 p \u2264 2^ k - 1 ; c is either ? , 0, or 1) , describing the i - th query.",
    "output": "For each query, print one integer \u2014 f( s) .",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "dp",
      "implementation",
      "trees"
    ],
    "id": "1535D"
  },
  {
    "title": "A New Beginning",
    "url": "https://codeforces.com/problemset/problem/1534/G",
    "history": "Annie has gotten bored of winning every coding contest and farming unlimited rating. Today, she is going to farm potatoes instead. Annie' s garden is an infinite 2D plane. She has n potatoes to plant, and the i - th potato must be planted at ( x_ i, y_ i) . Starting at the point ( 0, 0) , Annie begins walking, in one step she can travel one unit right or up ( increasing her x or y coordinate by 1 respectively) . At any point ( X, Y) during her walk she can plant some potatoes at arbitrary points using her potato gun, consuming max( | X- x| , | Y- y| ) units of energy in order to plant a potato at ( x, y) . Find the minimum total energy required to plant every potato. Note that Annie may plant any number of potatoes from any point.",
    "input": "The first line contains the integer n ( 1 \u2264 n \u2264 800 000 ) . The next n lines contain two integers x_ i and y_ i ( 0 \u2264 x_ i, y_ i \u2264 10^ 9 ) , representing the location of the i - th potato. It is possible that some potatoes should be planted in the same location.",
    "output": "Print the minimum total energy to plant all potatoes.",
    "note": "In example 1 , Annie can travel to each spot directly and plant a potato with no energy required. In example 2 , moving to ( 1, 0) , Annie plants the second potato using 1 energy. Next, she travels to ( 1, 1) and plants the first potato with 0 energy.",
    "topics": [
      "data structures",
      "dp",
      "geometry",
      "sortings"
    ],
    "id": "1534G"
  },
  {
    "title": "Submatrices",
    "url": "https://codeforces.com/problemset/problem/1533/H",
    "history": "You are given matrix s that contains n rows and m columns. Each element of a matrix is one of the 5 first Latin letters ( in upper case) . For each k ( 1 \u2264 k \u2264 5 ) calculate the number of submatrices that contain exactly k different letters. Recall that a submatrix of matrix s is a matrix that can be obtained from s after removing several ( possibly zero) first rows, several ( possibly zero) last rows, several ( possibly zero) first columns, and several ( possibly zero) last columns. If some submatrix can be obtained from s in two or more ways, you have to count this submatrix the corresponding number of times.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 800 ) . Then n lines follow, each containing the string s_ i ( | s_ i| = m ) \u2014 i - th row of the matrix.",
    "output": "For each k ( 1 \u2264 k \u2264 5 ) print one integer \u2014 the number of submatrices that contain exactly k different letters.",
    "note": "",
    "topics": [
      "*special",
      "bitmasks",
      "data structures",
      "dp"
    ],
    "id": "1533H"
  },
  {
    "title": "Chess Team Forming",
    "url": "https://codeforces.com/problemset/problem/1533/E",
    "history": "Polycarp is coaching a team for an upcoming game at the chess tournament. A complete team for the tournament should consist of n+ 1 members. There are n members in his team, the i - th member' s skill value is a_ i . Polycarp is yet to choose the final member for the team. The opposing team has n+ 1 members, the j - th member' s skill value is b_ j . Polycarp has m options for the final player of the team. The k - th of them has a skill value c_ k . Before the game starts, Polycarp pairs up the members of his team with the members of the opposing team. Every member of both teams is in exactly one pair. The difficulty of a game for a certain player is the difference between his paired opponent' s skill and his own skill. So if the i - th player of the Polycarp' s team is paired up with the j - th member of the opposing team, then the difficulty is equal to b_ j - a_ i . The difficulty of the game for a team is the maximum difficulty of all its players. So, before the game starts, Polycarp wants to pair up the players in such a way that the difficulty of the game for his team is minimized. For each of the m options for the final player print the smallest difficulty of the game for the team Polycarp can achieve.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of members in the Polycarp' s team. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is the skill value of the i - th player of the Polycarp' s team. The third line contains n+ 1 integers b_ 1, b_ 2, . . . , b_ n+ 1 ( 1 \u2264 b_ j \u2264 10^ 9 ) , where b_ j is the skill value of the j - th player of the opposing team. The fourth line contains a single integer m ( 1 \u2264 m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of options for the final player. The fifth line contains m integers c_ 1, c_ 2, . . . , c_ m ( 1 \u2264 c_ k \u2264 10^ 9 ) , where c_ k is the skill value of the k - th of the options for the final player of the Polycarp' s team.",
    "output": "Print m integers \u2014 the k - th of them should be equal to the smallest difficulty of the game for the team Polycarp can achieve if he picks the k - th option player as the final one.",
    "note": "In the first example the optimal pairings for the first three options are the following. Note that there might be multiple valid pairing for the minimum answer. First option: Polycarp' s team: 6 1 3 1 10 4Opposing team: 9 4 2 5 9 8The respective difficulties of the game for each player are: 3, 3, - 1, 4, - 1, 4. The maximum is 4, thus it' s the difficulty of the game for the team. Second option: Polycarp' s team: 10 4 1 3 7 6Opposing team: 9 4 2 5 9 8Third option: Polycarp' s team: 6 3 1 4 10 6Opposing team: 9 4 2 5 9 8",
    "topics": [
      "*special",
      "binary search",
      "data structures",
      "greedy"
    ],
    "id": "1533E"
  },
  {
    "title": "Sweets",
    "url": "https://codeforces.com/problemset/problem/1533/C",
    "history": "Anya came to her friend' s birthday party. There are n delicious sweets on a circle table ( for convenience, we will number them from 1 to n in clockwise direction) . For each of the sweets, it is known whether Anya likes it or not. Anya decided that she should eat all the sweets that are on the table, and she likes them. However, eating all the sweets in some random order is too boring. Therefore, Anya came up with a game that will make the process of eating sweets more interesting. The game is played according to the following rules: if there are no sweets that Anya likes left on the table, then the game ends; at the very beginning of the game, if there is at least one sweet on the table that Anya wants to eat, she eats the sweet number 1 ; after Anya has eaten some sweet, she counts k sweets clockwise, starting from the next sweet in the circle, and eats the k - th sweet in the count ( if there are less than k sweets in the circle, some sweets can participate in the count more than once, and the last sweet in the count is picked) . Obviously, the sweets that have already been eaten do not participate in the count. For example, let 6 sweets be arranged in a circle, Anya likes sweets 4 , 5 and 6 , k = 4 . Then the game goes as follows: initially there are sweets [ 1, 2, 3, 4, 5, 6] on the table, Anya chooses the sweet number 1 . Anya eats the sweet number 1 , after that, there are sweets [ 2, 3, 4, 5, 6] on the table. Anya counts 4 sweets, starting with the 2 - nd sweet, and stops at the 5 - th sweet. Anya eats the 5 - th sweet, after that, there are sweets [ 2, 3, 4, 6] on the table. Anya counts 4 sweets, starting with the 6 - th sweet, and stops at the 4 - th sweet. Anya eats the sweet number 4 , after that, there are sweets [ 2, 3, 6] on the table. Anya counts 4 sweets, starting with the 6 - th sweet, and stops at the 6 - th sweet. Anya eats the sweet number 6 , after that, there are sweets [ 2, 3] on the table. There are no sweets that Anya likes on the table, so the game ends. Your task is to calculate the number of sweets that Anya will eat.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 5000 ) \u2014 the number of test cases. The first line of each test case contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 5000 ) \u2014 the number of sweets and the parameter k . The next line contains the string s , where s_ i = 1 if Anya likes i - th sweet, and s_ i = 0 otherwise. It is guaranteed that the sum of n over all test cases does not exceed 5000 .",
    "output": "For each test case, print one integer \u2014 the number of sweets that Anya will eat.",
    "note": "The first test case of the example is described in the statement.",
    "topics": [
      "*special",
      "data structures",
      "implementation"
    ],
    "id": "1533C"
  },
  {
    "title": "Turing's Award",
    "url": "https://codeforces.com/problemset/problem/1530/H",
    "history": "Alan Turing is standing on a tape divided into cells that is infinite in both directions. Cells are numbered with consecutive integers from left to right. Alan is initially standing in cell 0 . Every cell x has cell x - 1 on the left and cell x + 1 on the right. Each cell can either contain an integer or be empty. Initially all cells are empty. Alan is given a permutation a_ 1, a_ 2, . . . , a_ n of integers from 1 to n that was chosen uniformly at random among all permutations of length n . At time 1 , integer a_ 1 is written down into cell 0 where Alan is located. At each time i from 2 to n inclusive, the following happens. First, Alan decides whether to stay in the same cell he' s currently in, move to the neighboring cell on the left, or move to the neighboring cell on the right. After that, integer a_ i is written down into the cell where Alan is located. If that cell already contained some integer, the old integer is overwritten and irrelevant from that moment on. Once a_ n is written down into some cell at time n , sequence b of all integers contained in the cells from left to right is formed. Empty cells are ignored. Turing' s award is equal to the length of the longest increasing subsequence of sequence b . Help Alan and determine the largest possible value of his award if he acts optimally.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 1000 ) . Description of the test cases follows. Each test case is given in two lines. The first line of each test case contains a single integer n ( 2 \u2264 n \u2264 15 000 ) \u2014 the length of the permutation given to Alan. The second line contains n distinct integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 the elements of the permutation. It is guaranteed that the permutation was chosen uniformly at random among all permutations of the corresponding length. The sum of n over all test cases does not exceed 15 000 .",
    "output": "For each test case output a single integer \u2014 the largest possible value of Turing' s award. Hacks are not allowed for this problem.",
    "note": "Longest increasing subsequence of sequence b is the longest increasing sequence that can be obtained from b by deletion of several ( possibly, zero or all) elements. In the first test case, Alan can make a decision only at time 2 . If Alan stays in cell 0 , sequence b will be equal to [ 2] . If Alan moves to the left, to cell - 1 , sequence b will be equal to [ 2, 1] . If Alan moves to the right, to cell 1 , sequence b will be equal to [ 1, 2] . Only in the last case the length of the longest increasing subsequence of b is 2 , therefore, the answer is equal to 2 . In the second test case, one of the optimal sequences of actions looks as follows: move to the left at times 2 and 3 , and move to the right at time 4 . Then sequence b will be equal to [ 2, 3, 4] , and the length of its longest increasing subsequence is 3 . In the third test case, one of the best ways is to always move to the left. Then sequence b will be equal to [ 2, 1, 4, 7, 5, 6, 3] , and the length of its longest increasing subsequence is 4 . In the fourth test case, one of the best ways is to move to the right four times, then move to the left once, and stay in the same cell once. Sequence b will be equal to [ 5, 2, 3, 4, 6] .",
    "topics": [
      "data structures",
      "dp"
    ],
    "id": "1530H"
  },
  {
    "title": "Trees of Tranquillity",
    "url": "https://codeforces.com/problemset/problem/1528/C",
    "history": "Soroush and Keshi each have a labeled and rooted tree on n vertices. Both of their trees are rooted from vertex 1 . Soroush and Keshi used to be at war. After endless decades of fighting, they finally became allies to prepare a Codeforces round. To celebrate this fortunate event, they decided to make a memorial graph on n vertices. They add an edge between vertices u and v in the memorial graph if both of the following conditions hold: One of u or v is the ancestor of the other in Soroush' s tree. Neither of u or v is the ancestor of the other in Keshi' s tree. Here vertex u is considered ancestor of vertex v , if u lies on the path from 1 ( the root) to the v . Popping out of nowhere, Mashtali tried to find the maximum clique in the memorial graph for no reason. He failed because the graph was too big. Help Mashtali by finding the size of the maximum clique in the memorial graph. As a reminder, clique is a subset of vertices of the graph, each two of which are connected by an edge.",
    "input": "The first line contains an integer t ( 1\u2264 t\u2264 3 \u00b7 10^ 5) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains an integer n ( 2\u2264 n\u2264 3 \u00b7 10^ 5) . The second line of each test case contains n- 1 integers a_ 2, . . . , a_ n ( 1 \u2264 a_ i < i) , a_ i being the parent of the vertex i in Soroush' s tree. The third line of each test case contains n- 1 integers b_ 2, . . . , b_ n ( 1 \u2264 b_ i < i) , b_ i being the parent of the vertex i in Keshi' s tree. It is guaranteed that the given graphs are trees. It is guaranteed that the sum of n over all test cases doesn' t exceed 3 \u00b7 10^ 5 .",
    "output": "For each test case print a single integer \u2014 the size of the maximum clique in the memorial graph.",
    "note": "In the first and third test cases, you can pick any vertex. In the second test case, one of the maximum cliques is { 2, 3, 4, 5} . In the fourth test case, one of the maximum cliques is { 3, 4, 6} .",
    "topics": [
      "data structures",
      "dfs and similar",
      "greedy",
      "trees"
    ],
    "id": "1528C"
  },
  {
    "title": "Partition Game",
    "url": "https://codeforces.com/problemset/problem/1527/E",
    "history": "You are given an array a of n integers. Define the cost of some array t as follows: cost( t) = \u2211_ x \u2208 set( t) last( x) - first( x) , where set( t) is the set of all values in t without repetitions, first( x) , and last( x) are the indices of the first and last occurrence of x in t , respectively. In other words, we compute the distance between the first and last occurrences for each distinct element and sum them up. You need to split the array a into k consecutive segments such that each element of a belongs to exactly one segment and the sum of the cost of individual segments is minimum.",
    "input": "The first line contains two integers n , k ( 1 \u2264 n \u2264 35 000 , 1 \u2264 k \u2264min( n, 100) ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) .",
    "output": "Output the minimum sum of the cost of individual segments.",
    "note": "In the first example, we can divide the array into [ 1, 6, 6, 4] and [ 6, 6, 6] . Cost of [ 1, 6, 6, 4] will be ( 1- 1) + ( 3 - 2) + ( 4- 4) = 1 and cost of [ 6, 6, 6] will be 3- 1 = 2 . Total cost would be 1 + 2 = 3 . In the second example, divide the array into [ 5, 5] , [ 5] , [ 5, 2, 3] and [ 3] . Total Cost would be 1 + 0 + 0 + 0 = 1 .",
    "topics": [
      "binary search",
      "data structures",
      "divide and conquer",
      "dp"
    ],
    "id": "1527E"
  },
  {
    "title": "Kill Anton",
    "url": "https://codeforces.com/problemset/problem/1526/D",
    "history": "After rejecting 10^ 100 data structure problems, Errorgorn is very angry at Anton and decided to kill him. Anton' s DNA can be represented as a string a which only contains the characters \" ANTON\" ( there are only 4 distinct characters) . Errorgorn can change Anton' s DNA into string b which must be a permutation of a . However, Anton' s body can defend against this attack. In 1 second, his body can swap 2 adjacent characters of his DNA to transform it back to a . Anton' s body is smart and will use the minimum number of moves. To maximize the chance of Anton dying, Errorgorn wants to change Anton' s DNA the string that maximizes the time for Anton' s body to revert his DNA. But since Errorgorn is busy making more data structure problems, he needs your help to find the best string B . Can you help him?",
    "input": "The first line of input contains a single integer t ( 1 \u2264 t \u2264 100000) \u2014 the number of testcases. The first and only line of each testcase contains 1 string a ( 1 \u2264 | a| \u2264 100000 ) . a consists of only the characters \" A\" , \" N\" , \" O\" and \" T\" . It is guaranteed that the sum of | a| over all testcases does not exceed 100000 .",
    "output": "For each testcase, print a single string, b . If there are multiple answers, you can output any one of them. b must be a permutation of the string a .",
    "note": "For the first testcase, it takes 7 seconds for Anton' s body to transform NNOTA to ANTON: NNOTA \u2192 NNOAT \u2192 NNAOT \u2192 NANOT \u2192 NANTO \u2192 ANNTO \u2192 ANTNO \u2192 ANTON. Note that you cannot output strings such as AANTON, ANTONTRYGUB, AAAAA and anton as it is not a permutation of ANTON. For the second testcase, it takes 2 seconds for Anton' s body to transform AANN to NAAN. Note that other strings such as NNAA and ANNA will also be accepted.",
    "topics": [
      "brute force",
      "constructive algorithms",
      "data structures",
      "math",
      "strings"
    ],
    "id": "1526D"
  },
  {
    "title": "Potions (Hard Version)",
    "url": "https://codeforces.com/problemset/problem/1526/C2",
    "history": "This is the hard version of the problem. The only difference is that in this version n \u2264 200000 . You can make hacks only if both versions of the problem are solved. There are n potions in a line, with potion 1 on the far left and potion n on the far right. Each potion will increase your health by a_ i when drunk. a_ i can be negative, meaning that potion will decrease will health. You start with 0 health and you will walk from left to right, from first potion to the last one. At each potion, you may choose to drink it or ignore it. You must ensure that your health is always non- negative. What is the largest number of potions you can drink?",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 200000 ) \u2014 the number of potions. The next line contains n integers a_ 1 , a_ 2 , . . . , a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) which represent the change in health after drinking that potion.",
    "output": "Output a single integer, the maximum number of potions you can drink without your health becoming negative.",
    "note": "For the sample, you can drink 5 potions by taking potions 1 , 3 , 4 , 5 and 6 . It is not possible to drink all 6 potions because your health will go negative at some point",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "1526C2"
  },
  {
    "title": "Potions (Easy Version)",
    "url": "https://codeforces.com/problemset/problem/1526/C1",
    "history": "This is the easy version of the problem. The only difference is that in this version n \u2264 2000 . You can make hacks only if both versions of the problem are solved. There are n potions in a line, with potion 1 on the far left and potion n on the far right. Each potion will increase your health by a_ i when drunk. a_ i can be negative, meaning that potion will decrease will health. You start with 0 health and you will walk from left to right, from first potion to the last one. At each potion, you may choose to drink it or ignore it. You must ensure that your health is always non- negative. What is the largest number of potions you can drink?",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2000 ) \u2014 the number of potions. The next line contains n integers a_ 1 , a_ 2 , . . . , a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) which represent the change in health after drinking that potion.",
    "output": "Output a single integer, the maximum number of potions you can drink without your health becoming negative.",
    "note": "For the sample, you can drink 5 potions by taking potions 1 , 3 , 4 , 5 and 6 . It is not possible to drink all 6 potions because your health will go negative at some point",
    "topics": [
      "brute force",
      "data structures",
      "dp",
      "greedy"
    ],
    "id": "1526C1"
  },
  {
    "title": "Robot Collisions",
    "url": "https://codeforces.com/problemset/problem/1525/C",
    "history": "There are n robots driving along an OX axis. There are also two walls: one is at coordinate 0 and one is at coordinate m . The i - th robot starts at an integer coordinate x_ i ( 0 < x_ i < m) and moves either left ( towards the 0 ) or right with the speed of 1 unit per second. No two robots start at the same coordinate. Whenever a robot reaches a wall, it turns around instantly and continues his ride in the opposite direction with the same speed. Whenever several robots meet at the same integer coordinate, they collide and explode into dust. Once a robot has exploded, it doesn' t collide with any other robot. Note that if several robots meet at a non- integer coordinate, nothing happens. For each robot find out if it ever explodes and print the time of explosion if it happens and - 1 otherwise.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of testcases. Then the descriptions of t testcases follow. The first line of each testcase contains two integers n and m ( 1 \u2264 n \u2264 3 \u00b7 10^ 5 ; 2 \u2264 m \u2264 10^ 8 ) \u2014 the number of robots and the coordinate of the right wall. The second line of each testcase contains n integers x_ 1, x_ 2, . . . , x_ n ( 0 < x_ i < m ) \u2014 the starting coordinates of the robots. The third line of each testcase contains n space- separated characters ' L' or ' R' \u2014 the starting directions of the robots ( ' L' stands for left and ' R' stands for right) . All coordinates x_ i in the testcase are distinct. The sum of n over all testcases doesn' t exceed 3 \u00b7 10^ 5 .",
    "output": "For each testcase print n integers \u2014 for the i - th robot output the time it explodes at if it does and - 1 otherwise.",
    "note": "Here is the picture for the seconds 0, 1, 2 and 3 of the first testcase: Notice that robots 2 and 3 don' t collide because they meet at the same point 2. 5 , which is not integer. After second 3 robot 6 just drive infinitely because there' s no robot to collide with.",
    "topics": [
      "data structures",
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "1525C"
  },
  {
    "title": "Hopping Around the Array ",
    "url": "https://codeforces.com/problemset/problem/1523/H",
    "history": "William really wants to get a pet. Since his childhood he dreamt about getting a pet grasshopper. William is being very responsible about choosing his pet, so he wants to set up a trial for the grasshopper! The trial takes place on an array a of length n , which defines lengths of hops for each of n cells. A grasshopper can hop around the sells according to the following rule: from a cell with index i it can jump to any cell with indices from i to i+ a_ i inclusive. Let' s call the k - grasshopper value of some array the smallest number of hops it would take a grasshopper to hop from the first cell to the last, but before starting you can select no more than k cells and remove them from the array. When a cell is removed all other cells are renumbered but the values of a_ i for each cell remains the same. During this the first and the last cells may not be removed. It is required to process q queries of the following format: you are given three numbers l , r , k . You are required to find the k - grasshopper value for an array, which is a subarray of the array a with elements from l to r inclusive.",
    "input": "The first line contains two integers n and q ( 1 \u2264 n, q \u2264 20000 ) , the length of the array and the number of queries respectively. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2013 the elements of the array. The following q lines contain queries: each line contains three integers l , r and k ( 1 \u2264 l \u2264 r \u2264 n , 0 \u2264 k \u2264 min( 30, r- l) ) , which are the edges of the subarray and the number of the grasshopper value respectively.",
    "output": "For each query print a single number in a new line \u2014 the response to a query.",
    "note": "For the second query the process occurs like this: For the third query the process occurs like this:",
    "topics": [
      "data structures",
      "dp"
    ],
    "id": "1523H"
  },
  {
    "title": "Try Booking",
    "url": "https://codeforces.com/problemset/problem/1523/G",
    "history": "William owns a flat in central London. He decided to rent his flat out for the next n days to earn some money. Since his flat is in the center of the city, he instantly got m offers in the form ( l_ i, r_ i) , which means that someone wants to book the flat from day l_ i until day r_ i inclusive. To avoid spending a lot of time figuring out whether it' s profitable for him to accept an offer, William decided to develop an algorithm. The algorithm processes all offers as they arrive and will only accept offer i if the following two conditions are satisfied: r_ i - l_ i + 1 \u2265 x . None of the days between l_ i and r_ i are occupied by a previously accepted offer William isn' t sure what value x should have and he asks you for help. For all x from 1 to n he wants you to calculate the total number of days for which the flat would be occupied if the corresponding value will be assigned to x .",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 5 \u00b7 10^ 4, 1 \u2264 m \u2264 10^ 5) , which are the number of days and the number of offers, respectively. Each of the next m lines contains two integers l_ i and r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 n) , which describe the i - th renting offer. All offers are given in chronological order.",
    "output": "Print n integers. The number in i - th line must be equal to the number of days the flat would be occupied if the algorithm will use the value of x equal to i .",
    "note": "The description of segments from the first sample test for each x : x = 1 \u2014 algorithm will approve offers: 1 ( 2. . 3) , 3 ( 1. . 1) . The total number of days for which William' s flat will be rented out is 3 x = 2 \u2014 algorithm will approve offers: 1 ( 2. . 3) . The total number of days for which William' s flat will be rented out is 2 x = 3 \u2014 algorithm will approve offers: 2 ( 3. . 5) . The total number of days for which William' s flat will be rented out is 3 x = 4 \u2014 algorithm will approve offers: 4 ( 1. . 5) . The total number of days for which William' s flat will be rented out is 5 x = 5 \u2014 algorithm will approve offers: 4 ( 1. . 5) . The total number of days for which William' s flat will be rented out is 5 x = 6 \u2014 algorithm will approve offers: 5 ( 1. . 6) . The total number of days for which William' s flat will be rented out is 6",
    "topics": [
      "data structures",
      "divide and conquer"
    ],
    "id": "1523G"
  },
  {
    "title": "Compression and Expansion",
    "url": "https://codeforces.com/problemset/problem/1523/C",
    "history": "William is a huge fan of planning ahead. That is why he starts his morning routine by creating a nested list of upcoming errands. A valid nested list is any list which can be created from a list with one item \" 1\" by applying some operations. Each operation inserts a new item into the list, on a new line, just after one of existing items a_ 1 . a_ 2 . a_ 3 . \u22ef . a_ k and can be one of two types: Add an item a_ 1 . a_ 2 . a_ 3 . \u22ef . a_ k . 1 ( starting a list of a deeper level) , or Add an item a_ 1 . a_ 2 . a_ 3 . \u22ef . ( a_ k + 1) ( continuing the current level) . Operation can only be applied if the list does not contain two identical items afterwards. And also, if we consider every item as a sequence of numbers, then the sequence of items should always remain increasing in lexicographical order. Examples of valid and invalid lists that are shown in the picture can found in the \" Notes\" section. When William decided to save a Word document with the list of his errands he accidentally hit a completely different keyboard shortcut from the \" Ctrl- S\" he wanted to hit. It' s not known exactly what shortcut he pressed but after triggering it all items in the list were replaced by a single number: the last number originally written in the item number. William wants you to help him restore a fitting original nested list.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10 ) . Description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 3 ) , which is the number of lines in the list. Each of the next n lines contains a single integer a_ i ( 1 \u2264 a_ i \u2264 n ) , which is what remains of William' s nested list. It is guaranteed that in each test case at least one fitting list exists. It is guaranteed that the sum of values n across all test cases does not exceed 10^ 3 .",
    "output": "For each test case output n lines which represent a valid nested list, which could become the data provided to you by William. If there are multiple answers, print any.",
    "note": "In the second example test case one example of a fitting list is: 11. 1 1. 1. 11. 1. 21. 21. 2. 122. 12. 2This list can be produced by using the sequence of operations shown below: Original list with a single item 1 . Insert item 2 by using the insertion operation of the second type after item 1 . Insert item 1. 1 by using the insertion operation of the first type after item 1 . Insert item 1. 2 by using the insertion operation of the second type after item 1. 1 . Insert item 1. 1. 1 by using the insertion operation of the first type after item 1. 1 . Insert item 1. 1. 2 by using the insertion operation of the second type after item 1. 1. 1 . Insert item 1. 2. 1 by using the insertion operation of the first type after item 1. 2 . Insert item 2. 1 by using the insertion operation of the first type after item 2 . Insert item 2. 2 by using the insertion operation of the second type after item 2. 1 .",
    "topics": [
      "brute force",
      "data structures",
      "greedy",
      "implementation",
      "trees"
    ],
    "id": "1523C"
  },
  {
    "title": "Nastia Plays with a Tree",
    "url": "https://codeforces.com/problemset/problem/1521/D",
    "history": "Nastia has an unweighted tree with n vertices and wants to play with it! The girl will perform the following operation with her tree, as long as she needs: Remove any existing edge. Add an edge between any pair of vertices. What is the minimum number of operations Nastia needs to get a bamboo from a tree? A bamboo is a tree in which no node has a degree greater than 2 .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10 000 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 2 \u2264 n \u2264 10^ 5 ) \u2014 the number of vertices in the tree. Next n - 1 lines of each test cases describe the edges of the tree in form a_ i , b_ i ( 1 \u2264 a_ i, b_ i \u2264 n , a_ i = \u0338 b_ i ) . It' s guaranteed the given graph is a tree and the sum of n in one test doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case in the first line print a single integer k \u2014 the minimum number of operations required to obtain a bamboo from the initial tree. In the next k lines print 4 integers x_ 1 , y_ 1 , x_ 2 , y_ 2 ( 1 \u2264 x_ 1, y_ 1, x_ 2, y_ 2\u2264 n , x_ 1 = \u0338 y_ 1 , x_ 2 = \u0338 y_ 2 ) \u2014 this way you remove the edge ( x_ 1, y_ 1) and add an undirected edge ( x_ 2, y_ 2) . Note that the edge ( x_ 1, y_ 1) must be present in the graph at the moment of removing.",
    "note": "Note the graph can be unconnected after a certain operation. Consider the first test case of the example: The red edges are removed, and the green ones are added.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "dfs and similar",
      "dp",
      "dsu",
      "greedy",
      "implementation",
      "trees"
    ],
    "id": "1521D"
  },
  {
    "title": "Guess the K-th Zero (Hard version)",
    "url": "https://codeforces.com/problemset/problem/1520/F2",
    "history": "This is an interactive problem. This is a hard version of the problem. The difference from the easy version is that in the hard version 1 \u2264 t \u2264min( n, 10^ 4) and the total number of queries is limited to 6 \u00b7 10^ 4 . Polycarp is playing a computer game. In this game, an array consisting of zeros and ones is hidden. Polycarp wins if he guesses the position of the k - th zero from the left t times. Polycarp can make no more than 6 \u00b7 10^ 4 requests totally of the following type: ? l r \u2014 find out the sum of all elements in positions from l to r ( 1 \u2264 l \u2264 r \u2264 n ) inclusive. To make the game more interesting, each guessed zero turns into one and the game continues on the changed array. More formally, if the position of the k - th zero was x , then after Polycarp guesses this position, the x - th element of the array will be replaced from 0 to 1 . Help Polycarp win the game. InteractionFirst, your program must read two integers n and t ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 t \u2264min( n, 10^ 4) ) . Then t lines follow, each of which contains one integer k ( 1 \u2264 k \u2264 n ) . It is guaranteed that at the moment of the request the array contains at least k zeros. In order to get the next value of k , you must output the answer for the previous value of k . After that, you can make no more than 6 \u00b7 10^ 4 requests in total. Use the following format to output the answer ( it is not a request, it doesn' t count in 6 \u00b7 10^ 4 ) : ! x \u2014 position of the k - th zero. Positions in the array are numbered from left to right from 1 to n inclusive. After printing t answers, your program should exit immediately. In this task, the interactor is not adaptive. This means that within the same test, the hidden array and the queries do not change. In case of an incorrect query, - 1 will be displayed. When this value is received, your program must immediately exit normally ( for example, by calling exit( 0) ) , otherwise, the testing system may issue an arbitrary verdict. If the number of requests is exceeded, the verdict wrong answer will be displayed. Your solution may get the verdict Idleness limit exceeded if you don' t print anything or forget to flush the output buffer. To flush the output buffer, you need to do the following immediately after the query output and the end- of- line character: fflush( stdout) or cout. flush( ) in C + + ; System. out. flush( ) in Java; flush( output) in Pascal; stdout. flush( ) in Python; see the documentation for other languages. HacksUse the following format for hacks: On the first line print the string s ( 1 \u2264 | s| \u2264 2 \u00b7 10^ 5 ) , consisting of zeros and ones, and an integer t ( 1 \u2264 t \u2264min( | s| , 10^ 4) ) \u2014 hidden array and number of requests, respectively. In the next t lines output the number k ( 1 \u2264 k \u2264 | s| ) . The hacked solution will not have direct access to the hidden array.",
    "input": "",
    "output": "",
    "note": "In the first test, the array [ 1, 0, 1, 1, 0, 1] is hidden. After answering the query k= 2 , the array changed to [ 1, 0, 1, 1, 1, 1] .",
    "topics": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "interactive"
    ],
    "id": "1520F2"
  },
  {
    "title": "Same Differences",
    "url": "https://codeforces.com/problemset/problem/1520/D",
    "history": "You are given an array a of n integers. Count the number of pairs of indices ( i, j) such that i < j and a_ j - a_ i = j - i .",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) . Then t test cases follow. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 array a . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case output the number of pairs of indices ( i, j) such that i < j and a_ j - a_ i = j - i .",
    "note": "",
    "topics": [
      "data structures",
      "hashing",
      "math"
    ],
    "id": "1520D"
  },
  {
    "title": "Berland Regional",
    "url": "https://codeforces.com/problemset/problem/1519/C",
    "history": "Polycarp is an organizer of a Berland ICPC regional event. There are n universities in Berland numbered from 1 to n . Polycarp knows all competitive programmers in the region. There are n students: the i - th student is enrolled at a university u_ i and has a programming skill s_ i . Polycarp has to decide on the rules now. In particular, the number of members in the team. Polycarp knows that if he chooses the size of the team to be some integer k , each university will send their k strongest ( with the highest programming skill s ) students in the first team, the next k strongest students in the second team and so on. If there are fewer than k students left, then the team can' t be formed. Note that there might be universities that send zero teams. The strength of the region is the total skill of the members of all present teams. If there are no teams present, then the strength is 0 . Help Polycarp to find the strength of the region for each choice of k from 1 to n .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of testcases. The first line of each testcase contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of universities and the number of students. The second line of each testcase contains n integers u_ 1, u_ 2, . . . , u_ n ( 1 \u2264 u_ i \u2264 n ) \u2014 the university the i - th student is enrolled at. The third line of each testcase contains n integers s_ 1, s_ 2, . . . , s_ n ( 1 \u2264 s_ i \u2264 10^ 9 ) \u2014 the programming skill of the i - th student. The sum of n over all testcases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each testcase print n integers: the strength of the region \u2014 the total skill of the members of the present teams \u2014 for each choice of team size k .",
    "note": "In the first testcase the teams from each university for each k are: k= 1 : university 1 : [ 6] , [ 5] , [ 5] , [ 3] ; university 2 : [ 8] , [ 1] , [ 1] ; k= 2 : university 1 : [ 6, 5] , [ 5, 3] ; university 2 : [ 8, 1] ; k= 3 : university 1 : [ 6, 5, 5] ; university 2 : [ 8, 1, 1] ; k= 4 : university 1 : [ 6, 5, 5, 3] ;",
    "topics": [
      "brute force",
      "data structures",
      "greedy",
      "number theory",
      "sortings"
    ],
    "id": "1519C"
  },
  {
    "title": "Group Photo",
    "url": "https://codeforces.com/problemset/problem/1517/E",
    "history": "In the 2050 Conference, some people from the competitive programming community meet together and are going to take a photo. The n people form a line. They are numbered from 1 to n from left to right. Each of them either holds a cardboard with the letter ' C' or a cardboard with the letter ' P' . Let C= { c_ 1, c_ 2, . . . , c_ m} ( c_ 1< c_ 2< . . . < c_ m) be the set of people who hold cardboards of ' C' . Let P= { p_ 1, p_ 2, . . . , p_ k} ( p_ 1< p_ 2< . . . < p_ k) be the set of people who hold cardboards of ' P' . The photo is good if and only if it satisfies the following constraints: C\u222a P= { 1, 2, . . . , n} C\u2229 P = \u2205 . c_ i- c_ i- 1\u2264 c_ i+ 1- c_ i( 1< i < m) . p_ i- p_ i- 1\u2265 p_ i+ 1- p_ i( 1< i < k) . Given an array a_ 1, . . . , a_ n , please find the number of good photos satisfying the following condition: \u2211_ x\u2208 C a_ x < \u2211_ y\u2208 P a_ y. The answer can be large, so output it modulo 998 244 353 . Two photos are different if and only if there exists at least one person who holds a cardboard of ' C' in one photo but holds a cardboard of ' P' in the other.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 200 000 ) . Description of the test cases follows. The first line of each test case contains a single integer n ( 1\u2264 n\u2264 200 000 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n over all test cases does not exceed 200 000 .",
    "output": "For each test case, output the answer modulo 998 244 353 in a separate line.",
    "note": "For the first test case, there are 10 possible good photos satisfying the condition: PPPPP, CPPPP, PCPPP, CCPPP, PCCPP, PCPCP, PPPPC, CPPPC, PCPPC, PPPCC. For the second test case, there are 7 possible good photos satisfying the condition: PPPP, PCPP, PCCP, PPPC, PCPC, PPCC, PCCC.",
    "topics": [
      "binary search",
      "data structures",
      "implementation",
      "two pointers"
    ],
    "id": "1517E"
  },
  {
    "title": "Cut",
    "url": "https://codeforces.com/problemset/problem/1516/D",
    "history": "This time Baby Ehab will only cut and not stick. He starts with a piece of paper with an array a of length n written on it, and then he does the following: he picks a range ( l, r) and cuts the subsegment a_ l, a_ l + 1, . . . , a_ r out, removing the rest of the array. he then cuts this range into multiple subranges. to add a number theory spice to it, he requires that the elements of every subrange must have their product equal to their least common multiple ( LCM) . Formally, he partitions the elements of a_ l, a_ l + 1, . . . , a_ r into contiguous subarrays such that the product of every subarray is equal to its LCM. Now, for q independent ranges ( l, r) , tell Baby Ehab the minimum number of subarrays he needs.",
    "input": "The first line contains 2 integers n and q ( 1 \u2264 n, q \u2264 10^ 5 ) \u2014 the length of the array a and the number of queries. The next line contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 5 ) \u2014 the elements of the array a . Each of the next q lines contains 2 integers l and r ( 1 \u2264 l \u2264 r \u2264 n ) \u2014 the endpoints of this query' s interval.",
    "output": "For each query, print its answer on a new line.",
    "note": "The first query asks about the whole array. You can partition it into [ 2] , [ 3, 10, 7] , and [ 5, 14] . The first subrange has product and LCM equal to 2 . The second has product and LCM equal to 210 . And the third has product and LCM equal to 70 . Another possible partitioning is [ 2, 3] , [ 10, 7] , and [ 5, 14] . The second query asks about the range ( 2, 4) . Its product is equal to its LCM, so you don' t need to partition it further. The last query asks about the range ( 3, 5) . You can partition it into [ 10, 7] and [ 5] .",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "graphs",
      "number theory",
      "two pointers"
    ],
    "id": "1516D"
  },
  {
    "title": "Phoenix and Diamonds",
    "url": "https://codeforces.com/problemset/problem/1515/I",
    "history": "Phoenix wonders what it is like to rob diamonds from a jewelry store! There are n types of diamonds. The i - th type has weight w_ i and value v_ i . The store initially has a_ i diamonds of the i - th type. Each day, for q days, one of the following will happen: A new shipment of k_ i diamonds of type d_ i arrive. The store sells k_ i diamonds of type d_ i . Phoenix wonders what will happen if he robs the store using a bag that can fit diamonds with total weight not exceeding c_ i . If he greedily takes diamonds of the largest value that fit, how much value would be taken? If there are multiple diamonds with the largest value, he will take the one with minimum weight. If, of the diamonds with the largest value, there are multiple with the same minimum weight, he will take any of them. Of course, since Phoenix is a law- abiding citizen, this is all a thought experiment and he never actually robs any diamonds from the store. This means that queries of type 3 do not affect the diamonds in the store.",
    "input": "The first line contains two integers n and q ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ; 1 \u2264 q \u2264 10^ 5 ) \u2014 the number of types of diamonds and number of days, respectively. The next n lines describe each type of diamond. The i - th line will contain three integers a_ i , w_ i , and v_ i ( 0 \u2264 a_ i \u2264 10^ 5 ; 1 \u2264 w_ i, v_ i \u2264 10^ 5 ) \u2014 the initial number of diamonds of the i - th type, the weight of diamonds of the i - th type, and the value of diamonds of the i - th type, respectively. The next q lines contain the queries. For each query, the first integer of each line is t ( 1 \u2264 t \u2264 3 ) \u2014 the type of query. If t= 1 , then two integers k_ i , d_ i follow ( 1 \u2264 k_ i \u2264 10^ 5 ; 1 \u2264 d_ i \u2264 n ) . This means that a new shipment of k_ i diamonds arrived, each of type d_ i . If t= 2 , then two integers k_ i , d_ i follow ( 1 \u2264 k_ i \u2264 10^ 5 ; 1 \u2264 d_ i \u2264 n ) . This means that the store has sold k_ i diamonds, each of type d_ i . It is guaranteed that the store had the diamonds before they sold them. If t= 3 , an integer c_ i will follow ( 1 \u2264 c_ i \u2264 10^ 18 ) \u2014 the weight capacity of Phoenix' s bag. It is guaranteed that there is at least one query where t= 3 .",
    "output": "Print the answer for each query of the third type ( t= 3 ) .",
    "note": "For the first query where t= 3 , Phoenix can fit 2 diamonds of type 1 , with total weight 6 and value 8 . For the second query where t= 3 , Phoenix will first fit in 3 diamonds of type 3 , then one diamond of type 1 for a total weight of 9 and a value of 16 . Note that diamonds of type 3 are prioritized over type 1 because type 3 has equal value but less weight. For the final query where t= 3 , Phoenix can fit every diamond for a total value of 13 .",
    "topics": [
      "binary search",
      "data structures",
      "sortings"
    ],
    "id": "1515I"
  },
  {
    "title": "Phoenix and Bits",
    "url": "https://codeforces.com/problemset/problem/1515/H",
    "history": "Phoenix loves playing with bits \u2014 specifically, by using the bitwise operations AND, OR, and XOR. He has n integers a_ 1, a_ 2, . . . , a_ n , and will perform q of the following queries: replace all numbers a_ i where l \u2264 a_ i \u2264 r with a_ i AND x ; replace all numbers a_ i where l \u2264 a_ i \u2264 r with a_ i OR x ; replace all numbers a_ i where l \u2264 a_ i \u2264 r with a_ i XOR x ; output how many distinct integers a_ i where l \u2264 a_ i \u2264 r . For each query, Phoenix is given l , r , and x . Note that he is considering the values of the numbers, not their indices.",
    "input": "The first line contains two integers n and q ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ; 1 \u2264 q \u2264 10^ 5 ) \u2014 the number of integers and the number of queries, respectively. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i < 2^ 20 ) \u2014 the integers that Phoenix starts with. The next q lines contain the queries. For each query, the first integer of each line is t ( 1 \u2264 t \u2264 4 ) \u2014 the type of query. If t \u2208{ 1, 2, 3} , then three integers l_ i , r_ i , and x_ i will follow ( 0 \u2264 l_ i, r_ i, x_ i < 2^ 20 ; l_ i \u2264 r_ i ) . Otherwise, if t= 4 , two integers l_ i and r_ i will follow ( 0 \u2264 l_ i \u2264 r_ i < 2^ 20 ) . It is guaranteed that there is at least one query where t= 4 .",
    "output": "Print the answer for each query where t= 4 .",
    "note": "In the first example: For the first query, 2 is replaced by 2 AND 2 = 2 and 3 is replaced with 3 AND 2 = 2 . The set of numbers is { 1, 2, 4, 5} . For the second query, there are 3 distinct numbers between 2 and 5 : 2 , 4 , and 5 . For the third query, 2 is replaced by 2 XOR 3 = 1 , 4 is replaced by 4 XOR 3 = 7 , and 5 is replaced by 5 XOR 3 = 6 . The set of numbers is { 1, 6, 7} . For the fourth query, there are 2 distinct numbers between 1 and 6 : 1 and 6 . For the fifth query, 1 is replaced by 1 OR 8 = 9 . The set of numbers is { 6, 7, 9} . For the sixth query, there is one distinct number between 8 and 10 : 9 .",
    "topics": [
      "bitmasks",
      "brute force",
      "data structures",
      "sortings"
    ],
    "id": "1515H"
  },
  {
    "title": "Phoenix and Towers",
    "url": "https://codeforces.com/problemset/problem/1515/C",
    "history": "Phoenix has n blocks of height h_ 1, h_ 2, . . . , h_ n , and all h_ i don' t exceed some value x . He plans to stack all n blocks into m separate towers. The height of a tower is simply the sum of the heights of its blocks. For the towers to look beautiful, no two towers may have a height difference of strictly more than x . Please help Phoenix build m towers that look beautiful. Each tower must have at least one block and all blocks must be used.",
    "input": "The input consists of multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains three integers n , m , and x ( 1 \u2264 m \u2264 n \u2264 10^ 5 ; 1 \u2264 x \u2264 10^ 4 ) \u2014 the number of blocks, the number of towers to build, and the maximum acceptable height difference of any two towers, respectively. The second line of each test case contains n space- separated integers ( 1 \u2264 h_ i \u2264 x ) \u2014 the heights of the blocks. It is guaranteed that the sum of n over all the test cases will not exceed 10^ 5 .",
    "output": "For each test case, if Phoenix cannot build m towers that look beautiful, print NO. Otherwise, print YES, followed by n integers y_ 1, y_ 2, . . . , y_ n , where y_ i ( 1 \u2264 y_ i \u2264 m ) is the index of the tower that the i - th block is placed in. If there are multiple solutions, print any of them.",
    "note": "In the first test case, the first tower has height 1+ 2+ 3= 6 and the second tower has height 1+ 2= 3 . Their difference is 6- 3= 3 which doesn' t exceed x= 3 , so the towers are beautiful. In the second test case, the first tower has height 1 , the second tower has height 1+ 2= 3 , and the third tower has height 3 . The maximum height difference of any two towers is 3- 1= 2 which doesn' t exceed x= 3 , so the towers are beautiful.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy"
    ],
    "id": "1515C"
  },
  {
    "title": "Cut and Stick",
    "url": "https://codeforces.com/problemset/problem/1514/D",
    "history": "Baby Ehab has a piece of Cut and Stick with an array a of length n written on it. He plans to grab a pair of scissors and do the following to it: pick a range ( l, r) and cut out every element a_ l , a_ l + 1 , . . . , a_ r in this range; stick some of the elements together in the same order they were in the array; end up with multiple pieces, where every piece contains some of the elements and every element belongs to some piece. More formally, he partitions the sequence a_ l , a_ l + 1 , . . . , a_ r into subsequences. He thinks a partitioning is beautiful if for every piece ( subsequence) it holds that, if it has length x , then no value occurs strictly more than \u2308x/ 2\u2309 times in it. He didn' t pick a range yet, so he' s wondering: for q ranges ( l, r) , what is the minimum number of pieces he needs to partition the elements a_ l , a_ l + 1 , . . . , a_ r into so that the partitioning is beautiful. A sequence b is a subsequence of an array a if b can be obtained from a by deleting some ( possibly zero) elements. Note that it does not have to be contiguous.",
    "input": "The first line contains two integers n and q ( 1 \u2264 n, q \u2264 3 \u00b7 10^ 5 ) \u2014 the length of the array a and the number of queries. The second line contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 the elements of the array a . Each of the next q lines contains two integers l and r ( 1 \u2264 l \u2264 r \u2264 n ) \u2014 the range of this query.",
    "output": "For each query, print the minimum number of subsequences you need to partition this range into so that the partitioning is beautiful. We can prove such partitioning always exists.",
    "note": "In the first query, you can just put the whole array in one subsequence, since its length is 6 , and no value occurs more than 3 times in it. In the second query, the elements of the query range are [ 3, 2, 3, 3] . You can' t put them all in one subsequence, since its length is 4 , and 3 occurs more than 2 times. However, you can partition it into two subsequences: [ 3] and [ 2, 3, 3] .",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "1514D"
  },
  {
    "title": "Swapping Problem",
    "url": "https://codeforces.com/problemset/problem/1513/F",
    "history": "You are given 2 arrays a and b , both of size n . You can swap two elements in b at most once ( or leave it as it is) , and you are required to minimize the value \u2211_ i| a_ i- b_ i| . Find the minimum possible value of this sum.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u226410^ 9 ) . The third line contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u226410^ 9 ) .",
    "output": "Output the minimum value of \u2211_ i| a_ i- b_ i| .",
    "note": "In the first example, we can swap the first and fifth element in array b , so that it becomes [ 5, 2, 3, 4, 1 ] . Therefore, the minimum possible value of this sum would be | 5- 5| + | 4- 2| + | 3- 3| + | 2- 4| + | 1- 1| = 4 . In the second example, we can swap the first and second elements. So, our answer would be 2 .",
    "topics": [
      "brute force",
      "constructive algorithms",
      "data structures",
      "sortings"
    ],
    "id": "1513F"
  },
  {
    "title": "Corrupted Array",
    "url": "https://codeforces.com/problemset/problem/1512/D",
    "history": "You are given a number n and an array b_ 1, b_ 2, . . . , b_ n+ 2 , obtained according to the following algorithm: some array a_ 1, a_ 2, . . . , a_ n was guessed; array a was written to array b , i. e. b_ i = a_ i ( 1 \u2264 i \u2264 n ) ; The ( n+ 1) - th element of the array b is the sum of the numbers in the array a , i. e. b_ n+ 1 = a_ 1+ a_ 2+ . . . + a_ n ; The ( n+ 2) - th element of the array b was written some number x ( 1 \u2264 x \u2264 10^ 9 ) , i. e. b_ n+ 2 = x ; The array b was shuffled. For example, the array b= [ 2, 3, 7, 12 , 2] it could be obtained in the following ways: a= [ 2, 2, 3] and x= 12 ; a= [ 3, 2, 7] and x= 2 . For the given array b , find any array a that could have been guessed initially.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) . Then t test cases follow. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) . The second row of each test case contains n+ 2 integers b_ 1, b_ 2, . . . , b_ n+ 2 ( 1 \u2264 b_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output: \" - 1\" , if the array b could not be obtained from any array a ; n integers a_ 1, a_ 2, . . . , a_ n , otherwise. If there are several arrays of a , you can output any.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy"
    ],
    "id": "1512D"
  },
  {
    "title": "Chips on a Board",
    "url": "https://codeforces.com/problemset/problem/1511/G",
    "history": "Alice and Bob have a rectangular board consisting of n rows and m columns. Each row contains exactly one chip. Alice and Bob play the following game. They choose two integers l and r such that 1 \u2264 l \u2264 r \u2264 m and cut the board in such a way that only the part of it between column l and column r ( inclusive) remains. So, all columns to the left of column l and all columns to the right of column r no longer belong to the board. After cutting the board, they move chips on the remaining part of the board ( the part from column l to column r ) . They make alternating moves, and the player which cannot make a move loses the game. The first move is made by Alice, the second \u2014 by Bob, the third \u2014 by Alice, and so on. During their move, the player must choose one of the chips from the board and move it any positive number of cells to the left ( so, if the chip was in column i , it can move to any column j < i , and the chips in the leftmost column cannot be chosen) . Alice and Bob have q pairs of numbers L_ i and R_ i . For each such pair, they want to determine who will be the winner of the game if l = L_ i and r = R_ i . Note that these games should be considered independently ( they don' t affect the state of the board for the next games) , and both Alice and Bob play optimally.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of rows and columns on the board, respectively. The second line contains n integers c_ 1, c_ 2, . . . , c_ n ( 1 \u2264 c_ i \u2264 m ) , where c_ i is the index of the column where the chip in the i - th row is located ( so, the chip in the i - th row is in the c_ i - th column) . The third line contains one integer q ( 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) . Then q lines follow, the i - th of them contains two integers L_ i and R_ i ( 1 \u2264 L_ i \u2264 R_ i \u2264 m ) .",
    "output": "Print a string of q characters. The i - th character should be A if Alice wins the game with l = L_ i and r = R_ i , or B if Bob wins it.",
    "note": "",
    "topics": [
      "bitmasks",
      "brute force",
      "data structures",
      "dp",
      "games",
      "two pointers"
    ],
    "id": "1511G"
  },
  {
    "title": "Chainword",
    "url": "https://codeforces.com/problemset/problem/1511/F",
    "history": "A chainword is a special type of crossword. As most of the crosswords do, it has cells that you put the letters in and some sort of hints to what these letters should be. The letter cells in a chainword are put in a single row. We will consider chainwords of length m in this task. A hint to a chainword is a sequence of segments such that the segments don' t intersect with each other and cover all m letter cells. Each segment contains a description of the word in the corresponding cells. The twist is that there are actually two hints: one sequence is the row above the letter cells and the other sequence is the row below the letter cells. When the sequences are different, they provide a way to resolve the ambiguity in the answers. You are provided with a dictionary of n words, each word consists of lowercase Latin letters. All words are pairwise distinct. An instance of a chainword is the following triple: a string of m lowercase Latin letters; the first hint: a sequence of segments such that the letters that correspond to each segment spell a word from the dictionary; the second hint: another sequence of segments such that the letters that correspond to each segment spell a word from the dictionary. Note that the sequences of segments don' t necessarily have to be distinct. Two instances of chainwords are considered different if they have different strings, different first hints or different second hints. Count the number of different instances of chainwords. Since the number might be pretty large, output it modulo 998 244 353 .",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 8 , 1 \u2264 m \u2264 10^ 9 ) \u2014 the number of words in the dictionary and the number of letter cells. Each of the next n lines contains a word \u2014 a non- empty string of no more than 5 lowercase Latin letters. All words are pairwise distinct.",
    "output": "Print a single integer \u2014 the number of different instances of chainwords of length m for the given dictionary modulo 998 244 353 .",
    "note": "Here are all the instances of the valid chainwords for the first example: The red lines above the letters denote the segments of the first hint, the blue lines below the letters denote the segments of the second hint. In the second example the possible strings are: \" abab\" , \" abcd\" , \" cdab\" and \" cdcd\" . All the hints are segments that cover the first two letters and the last two letters.",
    "topics": [
      "brute force",
      "data structures",
      "dp",
      "matrices",
      "string suffix structures",
      "strings"
    ],
    "id": "1511F"
  },
  {
    "title": "Yet Another Card Deck",
    "url": "https://codeforces.com/problemset/problem/1511/C",
    "history": "You have a card deck of n cards, numbered from top to bottom, i. e. the top card has index 1 and bottom card \u2014 index n . Each card has its color: the i - th card has color a_ i . You should process q queries. The j - th query is described by integer t_ j . For each query you should: find the highest card in the deck with color t_ j , i. e. the card with minimum index; print the position of the card you found; take the card and place it on top of the deck.",
    "input": "The first line contains two integers n and q ( 2 \u2264 n \u2264 3 \u00b7 10^ 5 ; 1 \u2264 q \u2264 3 \u00b7 10^ 5 ) \u2014 the number of cards in the deck and the number of queries. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 50 ) \u2014 the colors of cards. The third line contains q integers t_ 1, t_ 2, . . . , t_ q ( 1 \u2264 t_ j \u2264 50 ) \u2014 the query colors. It' s guaranteed that queries ask only colors that are present in the deck.",
    "output": "Print q integers \u2014 the answers for each query.",
    "note": "Description of the sample: the deck is [ 2, 1, 1, 4, 3, 3, 1] and the first card with color t_ 1 = 3 has position 5 ; the deck is [ 3, 2, 1, 1, 4, 3, 1] and the first card with color t_ 2 = 2 has position 2 ; the deck is [ 2, 3, 1, 1, 4, 3, 1] and the first card with color t_ 3 = 1 has position 3 ; the deck is [ 1, 2, 3, 1, 4, 3, 1] and the first card with color t_ 4 = 1 has position 1 ; the deck is [ 1, 2, 3, 1, 4, 3, 1] and the first card with color t_ 5 = 4 has position 5 .",
    "topics": [
      "brute force",
      "data structures",
      "implementation",
      "trees"
    ],
    "id": "1511C"
  },
  {
    "title": "Optimal Encoding",
    "url": "https://codeforces.com/problemset/problem/1508/F",
    "history": "Touko' s favorite sequence of numbers is a permutation a_ 1, a_ 2, . . . , a_ n of 1, 2, . . . , n , and she wants some collection of permutations that are similar to her favorite permutation. She has a collection of q intervals of the form [ l_ i, r_ i] with 1 \u2264 l_ i \u2264 r_ i \u2264 n . To create permutations that are similar to her favorite permutation, she coined the following definition: A permutation b_ 1, b_ 2, . . . , b_ n allows an interval [ l' , r' ] to holds its shape if for any pair of integers ( x, y) such that l' \u2264 x < y \u2264 r' , we have b_ x < b_ y if and only if a_ x < a_ y . A permutation b_ 1, b_ 2, . . . , b_ n is k - similar if b allows all intervals [ l_ i, r_ i] for all 1 \u2264 i \u2264 k to hold their shapes. Yuu wants to figure out all k - similar permutations for Touko, but it turns out this is a very hard task; instead, Yuu will encode the set of all k - similar permutations with directed acylic graphs ( DAG) . Yuu also coined the following definitions for herself: A permutation b_ 1, b_ 2, . . . , b_ n satisfies a DAG G' if for all edge u \u2192 v in G' , we must have b_ u < b_ v . A k - encoding is a DAG G_ k on the set of vertices 1, 2, . . . , n such that a permutation b_ 1, b_ 2, . . . , b_ n satisfies G_ k if and only if b is k - similar. Since Yuu is free today, she wants to figure out the minimum number of edges among all k - encodings for each k from 1 to q .",
    "input": "The first line contains two integers n and q ( 1 \u2264 n \u2264 25 000 , 1 \u2264 q \u2264 100 000 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n which form a permutation of 1, 2, . . . , n . The i - th of the following q lines contains two integers l_ i and r_ i . ( 1 \u2264 l_ i \u2264 r_ i \u2264 n ) .",
    "output": "Print q lines. The k - th of them should contain a single integer \u2014 The minimum number of edges among all k - encodings.",
    "note": "For the first test case: All 1 - similar permutations must allow the interval [ 1, 3] to hold its shape. Therefore, the set of all 1 - similar permutations is { [ 3, 4, 2, 1] , [ 3, 4, 1, 2] , [ 2, 4, 1, 3] , [ 2, 3, 1, 4] } . The optimal encoding of these permutations is All 2 - similar permutations must allow the intervals [ 1, 3] and [ 2, 4] to hold their shapes. Therefore, the set of all 2 - similar permutations is { [ 3, 4, 1, 2] , [ 2, 4, 1, 3] } . The optimal encoding of these permutations is All 3 - similar permutations must allow the intervals [ 1, 3] , [ 2, 4] , and [ 1, 4] to hold their shapes. Therefore, the set of all 3 - similar permutations only includes [ 2, 4, 1, 3] . The optimal encoding of this permutation is",
    "topics": [
      "brute force",
      "data structures"
    ],
    "id": "1508F"
  },
  {
    "title": "Tree Calendar",
    "url": "https://codeforces.com/problemset/problem/1508/E",
    "history": "Yuu Koito and Touko Nanami are newlyweds! On the wedding day, Yuu gifted Touko a directed tree with n nodes and rooted at 1 , and a labeling a which is some DFS order of the tree. Every edge in this tree is directed away from the root. After calling dfs( 1) the following algorithm returns a as a DFS order of a tree rooted at 1 : order : = 0a : = array of length n function dfs( u) : order : = order + 1 a[ u] : = order for all v such that there is a directed edge ( u - > v) : dfs( v) Note that there may be different DFS orders for a given tree. Touko likes the present so much she decided to play with it! On each day following the wedding day, Touko performs this procedure once: Among all directed edges u \u2192 v such that a_ u < a_ v , select the edge u' \u2192 v' with the lexicographically smallest pair ( a_ u' , a_ v' ) . Swap a_ u' and a_ v' . Days have passed since their wedding, and Touko has somehow forgotten which date the wedding was and what was the original labeling a ! Fearing that Yuu might get angry, Touko decided to ask you to derive these two pieces of information using the current labeling. Being her good friend, you need to find the number of days that have passed since the wedding, and the original labeling of the tree. However, there is a chance that Touko might have messed up her procedures, which result in the current labeling being impossible to obtain from some original labeling; in that case, please inform Touko as well.",
    "input": "The first line of the input contains an integer n ( 2 \u2264 n \u2264 3 \u00b7 10^ 5 ) \u2014 the number of nodes on the tree. The second line contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 1 \u2264 a_ i \u2264 n , all a_ i are distinct) \u2014 the current labeling of the tree. Each of the next n - 1 lines contains two integers u_ i and v_ i ( 1 \u2264 u, v \u2264 n , u = \u0338 v ) , describing an directed edge from u_ i to v_ i . The edges form a directed tree rooted at 1 .",
    "output": "If the current labeling is impossible to arrive at from any DFS order, print NO. Else, on the first line, print YES. On the second line, print a single integer denoting the number of days since the wedding. On the third line, print n numbers space- separated denoting the original labeling of the tree. If there are multiple correct outputs, print any. This means: you are allowed to output any pair ( DFS order, number of days) , such that we get the current configuration from the DFS order you provided in exactly the number of days you provided.",
    "note": "The following animation showcases the first sample test case. The white label inside the node represents the index of the node i , while the boxed orange label represents the value a_ i .",
    "topics": [
      "brute force",
      "constructive algorithms",
      "data structures",
      "dfs and similar",
      "sortings",
      "trees"
    ],
    "id": "1508E"
  },
  {
    "title": "Complete the MST",
    "url": "https://codeforces.com/problemset/problem/1508/C",
    "history": "As a teacher, Riko Hakozaki often needs to help her students with problems from various subjects. Today, she is asked a programming task which goes as follows. You are given an undirected complete graph with n nodes, where some edges are pre- assigned with a positive weight while the rest aren' t. You need to assign all unassigned edges with non- negative weights so that in the resulting fully- assigned complete graph the XOR sum of all weights would be equal to 0 . Define the ugliness of a fully- assigned complete graph the weight of its minimum spanning tree, where the weight of a spanning tree equals the sum of weights of its edges. You need to assign the weights so that the ugliness of the resulting graph is as small as possible. As a reminder, an undirected complete graph with n nodes contains all edges ( u, v) with 1 \u2264 u < v \u2264 n ; such a graph has n( n- 1) / 2 edges. She is not sure how to solve this problem, so she asks you to solve it for her.",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 , 0 \u2264 m \u2264min( 2 \u00b7 10^ 5, n( n- 1) / 2 - 1) ) \u2014 the number of nodes and the number of pre- assigned edges. The inputs are given so that there is at least one unassigned edge. The i - th of the following m lines contains three integers u_ i , v_ i , and w_ i ( 1 \u2264 u_ i, v_ i \u2264 n , u v , 1 \u2264 w_ i < 2^ 30 ) , representing the edge from u_ i to v_ i has been pre- assigned with the weight w_ i . No edge appears in the input more than once.",
    "output": "Print on one line one integer \u2014 the minimum ugliness among all weight assignments with XOR sum equal to 0 .",
    "note": "The following image showcases the first test case. The black weights are pre- assigned from the statement, the red weights are assigned by us, and the minimum spanning tree is denoted by the blue edges.",
    "topics": [
      "bitmasks",
      "brute force",
      "data structures",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "1508C"
  },
  {
    "title": "Maximize the Remaining String",
    "url": "https://codeforces.com/problemset/problem/1506/G",
    "history": "You are given a string s , consisting of lowercase Latin letters. While there is at least one character in the string s that is repeated at least twice, you perform the following operation: you choose the index i ( 1 \u2264 i \u2264 | s| ) such that the character at position i occurs at least two times in the string s , and delete the character at position i , that is, replace s with s_ 1 s_ 2 . . . s_ i- 1 s_ i+ 1 s_ i+ 2. . . s_ n . For example, if s= \" codeforces\" , then you can apply the following sequence of operations: i= 6 \u21d2 s= \" codefrces\" ; i= 1 \u21d2 s= \" odefrces\" ; i= 7 \u21d2 s= \" odefrcs\" ; Given a given string s , find the lexicographically maximum string that can be obtained after applying a certain sequence of operations after which all characters in the string become unique. A string a of length n is lexicographically less than a string b of length m , if: there is an index i ( 1 \u2264 i \u2264min( n, m) ) such that the first i- 1 characters of the strings a and b are the same, and the i - th character of the string a is less than i - th character of string b ; or the first min( n, m) characters in the strings a and b are the same and n < m . For example, the string a= \" aezakmi\" is lexicographically less than the string b= \" aezus\" .",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) . Then t test cases follow. Each test case is characterized by a string s , consisting of lowercase Latin letters ( 1 \u2264 | s| \u2264 2 \u00b7 10^ 5 ) . It is guaranteed that the sum of the lengths of the strings in all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output the lexicographically maximum string that can be obtained after applying a certain sequence of operations after which all characters in the string become unique.",
    "note": "",
    "topics": [
      "brute force",
      "data structures",
      "dp",
      "greedy",
      "strings"
    ],
    "id": "1506G"
  },
  {
    "title": "Epic Transformation",
    "url": "https://codeforces.com/problemset/problem/1506/D",
    "history": "You are given an array a of length n consisting of integers. You can apply the following operation, consisting of several steps, on the array a zero or more times: you select two different numbers in the array a_ i and a_ j ; you remove i - th and j - th elements from the array. For example, if n= 6 and a= [ 1, 6, 1, 1, 4, 4] , then you can perform the following sequence of operations: select i= 1, j= 5 . The array a becomes equal to [ 6, 1, 1, 4] ; select i= 1, j= 2 . The array a becomes equal to [ 1, 4] . What can be the minimum size of the array after applying some sequence of operations to it?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) . Then t test cases follow. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) is length of the array a . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output the minimum possible size of the array after applying some sequence of operations to it.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy"
    ],
    "id": "1506D"
  },
  {
    "title": "Balance the Cards",
    "url": "https://codeforces.com/problemset/problem/1503/F",
    "history": "A balanced bracket sequence is defined as an integer sequence that can be built with the following rules: The empty sequence is balanced. If [ a_ 1, . . . , a_ n] and [ b_ 1, . . . , b_ m] are balanced, then their concatenation [ a_ 1, . . . , a_ n, b_ 1, . . . , b_ m] is balanced. If x is a positive integer and [ a_ 1, . . . , a_ n] is balanced, then [ x, a_ 1, . . . , a_ n, - x] is balanced. The positive numbers can be imagined as opening brackets and the negative numbers as closing brackets, where matching brackets must have the same type ( absolute value) . For example, [ 1, 2, - 2, - 1] and [ 1, 3, - 3, 2, - 2, - 1] are balanced, but [ 1, 2, - 1, - 2] and [ - 1, 1] are not balanced. There are 2n cards. Each card has a number on the front and a number on the back. Each integer 1, - 1, 2, - 2, . . . , n, - n appears exactly once on the front of some card and exactly once on the back of some ( not necessarily the same) card. You can reorder the cards however you like. You are not allowed to flip cards, so numbers cannot move between the front and back. Your task is to order the cards so that the sequences given by the front numbers and the back numbers are both balanced, or report that it is impossible.",
    "input": "The first line contains a single integer n ( 1\u2264 n\u2264 2\u00b7 10^ 5 ) \u2014 the number of bracket types, and half the number of cards. The next 2n lines describe the cards. The i - th of these lines contains two integers a_ i , b_ i ( - n\u2264 a_ i, b_ i\u2264 n , a_ i 0 , b_ i 0 ) \u2014 the numbers on the front and back of the i - th card, respectively. Every integer 1, - 1, 2, - 2, . . . , n, - n appears exactly once as a_ i and exactly once as b_ i .",
    "output": "On the first line, output \" YES\" if it' s possible to reorder these cards to satisfy the condition. Otherwise, output \" NO\" . You can print each letter in any case ( upper or lower) . If it is possible, on the next 2n lines output the cards in an order so that the front and back are both balanced. If there are multiple solutions, you may output any.",
    "note": "In the first test case, the front numbers create the balanced sequence [ 1, 4, - 4, - 1, 5, 3, 2, - 2, - 3, - 5] and the back numbers create the balanced sequence [ 3, - 3, 4, - 4, 1, - 1, 2, 5, - 5, - 2] . In the second test case, the cards are given in an order so that the front numbers are balanced, but the back numbers create the unbalanced sequence [ 1, 2, - 1, - 2] . If we swapped the second and third cards, we would balance the back numbers and unbalance the front numbers. But there is no order that balances both.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "divide and conquer",
      "geometry",
      "graphs",
      "implementation"
    ],
    "id": "1503F"
  },
  {
    "title": "Flip the Cards",
    "url": "https://codeforces.com/problemset/problem/1503/D",
    "history": "There is a deck of n cards. The i - th card has a number a_ i on the front and a number b_ i on the back. Every integer between 1 and 2n appears exactly once on the cards. A deck is called sorted if the front values are in increasing order and the back values are in decreasing order. That is, if a_ i< a_ i+ 1 and b_ i> b_ i+ 1 for all 1\u2264 i< n . To flip a card i means swapping the values of a_ i and b_ i . You must flip some subset of cards ( possibly, none) , then put all the cards in any order you like. What is the minimum number of cards you must flip in order to sort the deck?",
    "input": "The first line contains a single integer n ( 1\u2264 n\u2264 2\u00b7 10^ 5 ) \u2014 the number of cards. The next n lines describe the cards. The i - th of these lines contains two integers a_ i, b_ i ( 1\u2264 a_ i, b_ i\u2264 2n ) . Every integer between 1 and 2n appears exactly once.",
    "output": "If it is impossible to sort the deck, output \" - 1\" . Otherwise, output the minimum number of flips required to sort the deck.",
    "note": "In the first test case, we flip the cards ( 1, 9) and ( 2, 7) . The deck is then ordered ( 3, 10) , ( 5, 8) , ( 6, 4) , ( 7, 2) , ( 9, 1) . It is sorted because 3< 5< 6< 7< 9 and 10> 8> 4> 2> 1 . In the second test case, it is impossible to sort the deck.",
    "topics": [
      "2-sat",
      "constructive algorithms",
      "data structures",
      "greedy",
      "sortings",
      "two pointers"
    ],
    "id": "1503D"
  },
  {
    "title": "Travelling Salesman Problem",
    "url": "https://codeforces.com/problemset/problem/1503/C",
    "history": "There are n cities numbered from 1 to n , and city i has beauty a_ i . A salesman wants to start at city 1 , visit every city exactly once, and return to city 1 . For all i j , a flight from city i to city j costs max( c_ i, a_ j- a_ i) dollars, where c_ i is the price floor enforced by city i . Note that there is no absolute value. Find the minimum total cost for the salesman to complete his trip.",
    "input": "The first line contains a single integer n ( 2\u2264 n\u2264 10^ 5 ) \u2014 the number of cities. The i - th of the next n lines contains two integers a_ i , c_ i ( 0\u2264 a_ i, c_ i\u2264 10^ 9 ) \u2014 the beauty and price floor of the i - th city.",
    "output": "Output a single integer \u2014 the minimum total cost.",
    "note": "In the first test case, we can travel in order 1\u2192 3\u2192 2\u2192 1 . The flight 1\u2192 3 costs max( c_ 1, a_ 3- a_ 1) = max( 9, 4- 1) = 9 . The flight 3\u2192 2 costs max( c_ 3, a_ 2- a_ 3) = max( 1, 2- 4) = 1 . The flight 2\u2192 1 costs max( c_ 2, a_ 1- a_ 2) = max( 1, 1- 2) = 1 . The total cost is 11 , and we cannot do better.",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "greedy",
      "shortest paths",
      "sortings",
      "two pointers"
    ],
    "id": "1503C"
  },
  {
    "title": "Subset Trick",
    "url": "https://codeforces.com/problemset/problem/1500/E",
    "history": "Vanya invented an interesting trick with a set of integers. Let an illusionist have a set of positive integers S . He names a positive integer x . Then an audience volunteer must choose some subset ( possibly, empty) of S without disclosing it to the illusionist. The volunteer tells the illusionist the size of the chosen subset. And here comes the trick: the illusionist guesses whether the sum of the subset elements does not exceed x . The sum of elements of an empty subset is considered to be 0 . Vanya wants to prepare the trick for a public performance. He prepared some set of distinct positive integers S . Vasya wants the trick to be successful. He calls a positive number x unsuitable, if he can' t be sure that the trick would be successful for every subset a viewer can choose. Vanya wants to count the number of unsuitable integers for the chosen set S . Vanya plans to try different sets S . He wants you to write a program that finds the number of unsuitable integers for the initial set S , and after each change to the set S . Vanya will make q changes to the set, and each change is one of the following two types: add a new integer a to the set S , or remove some integer a from the set S .",
    "input": "The first line contains two integers n , q ( 1 \u2264 n, q \u2264 200 000 ) \u2014 the size of the initial set S and the number of changes. The next line contains n distinct integers s_ 1, s_ 2, . . . , s_ n ( 1 \u2264 s_ i \u2264 10^ 13 ) \u2014 the initial elements of S . Each of the following q lines contain two integers t_ i , a_ i ( 1 \u2264 t_ i \u2264 2 , 1 \u2264 a_ i \u2264 10^ 13 ) , describing a change: If t_ i = 1 , then an integer a_ i is added to the set S . It is guaranteed that this integer is not present in S before this operation. If t_ i = 2 , then an integer a_ i is removed from the set S . In is guaranteed that this integer is present in S before this operation.",
    "output": "Print q + 1 lines. In the first line print the number of unsuitable integers for the initial set S . In the next q lines print the number of unsuitable integers for S after each change.",
    "note": "In the first example the initial set is S = { 1, 2, 3} . For this set the trick can be unsuccessful for x \u2208{ 1, 2, 3, 4} . For example, if x = 4 , the volunteer can choose the subset { 1, 2} with sum 3 \u2264 x , and can choose the subset { 2, 3} with sum 5 > x . However, in both cases the illusionist only know the same size of the subset ( 2 ) , so he can' t be sure answering making a guess. Since there is only one subset of size 3 , and the sum of each subset of smaller size does not exceed 5 , all x \u2265 5 are suitable.",
    "topics": [
      "binary search",
      "data structures"
    ],
    "id": "1500E"
  },
  {
    "title": "Tiles for Bathroom",
    "url": "https://codeforces.com/problemset/problem/1500/D",
    "history": "Kostya is extremely busy: he is renovating his house! He needs to hand wallpaper, assemble furniture throw away trash. Kostya is buying tiles for bathroom today. He is standing in front of a large square stand with tiles in a shop. The stand is a square of n \u00d7 n cells, each cell of which contains a small tile with color c_ i, j . The shop sells tiles in packs: more specifically, you can only buy a subsquare of the initial square. A subsquare is any square part of the stand, i. e. any set S( i_ 0, j_ 0, k) = { c_ i, j | i_ 0 \u2264 i < i_ 0 + k, j_ 0 \u2264 j < j_ 0 + k} with 1 \u2264 i_ 0, j_ 0 \u2264 n - k + 1 . Kostya still does not know how many tiles he needs, so he considers the subsquares of all possible sizes. He doesn' t want his bathroom to be too colorful. Help Kostya to count for each k \u2264 n the number of subsquares of size k \u00d7 k that have at most q different colors of tiles. Two subsquares are considered different if their location on the stand is different.",
    "input": "The first line contains two integers n and q ( 1 \u2264 n \u2264 1500 , 1 \u2264 q \u2264 10 ) \u2014 the size of the stand and the limit on the number of distinct colors in a subsquare. Each of the next n lines contains n integers c_ i, j ( 1 \u2264 c_ i, j\u2264 n^ 2 ) : the j - th integer in the i - th line is the color of the tile in the cell ( i, j) .",
    "output": "For each k from 1 to n print a single integer \u2014 the number of subsquares of size k \u00d7 k with no more than q different colors.",
    "note": "In the first example all colors are distinct. Kostya doesn' t want the subsquare have more than 4 colors, so he can buy any subsquare of size 1 \u00d7 1 or 2 \u00d7 2 , but he can' t buy a subsquare of size 3 \u00d7 3 . In the second example there are colors that appear multiple times. Because q = 8 , Kostya can buy any subsquare of size 1 \u00d7 1 and 2 \u00d7 2 , and any subsquare 3 \u00d7 3 , because of such subsquare has 7 different colors. He can' t buy the whole stand 4 \u00d7 4 , because there are 9 colors.",
    "topics": [
      "data structures",
      "sortings",
      "two pointers"
    ],
    "id": "1500D"
  },
  {
    "title": "Graph Coloring",
    "url": "https://codeforces.com/problemset/problem/1499/G",
    "history": "You are given a bipartite graph consisting of n_ 1 vertices in the first part, n_ 2 vertices in the second part, and m edges, numbered from 1 to m . You have to color each edge into one of two colors, red and blue. You have to minimize the following value: \u2211_ v \u2208 V | r( v) - b( v) | , where V is the set of vertices of the graph, r( v) is the number of red edges incident to v , and b( v) is the number of blue edges incident to v . Sounds classical and easy, right? Well, you have to process q queries of the following format: 1 v_ 1 v_ 2 \u2014 add a new edge connecting the vertex v_ 1 of the first part with the vertex v_ 2 of the second part. This edge gets a new index as follows: the first added edge gets the index m + 1 , the second \u2014 m + 2 , and so on. After adding the edge, you have to print the hash of the current optimal coloring ( if there are multiple optimal colorings, print the hash of any of them) . Actually, this hash won' t be verified, you may print any number as the answer to this query, but you may be asked to produce the coloring having this hash; 2 \u2014 print the optimal coloring of the graph with the same hash you printed while processing the previous query. The query of this type will only be asked after a query of type 1 , and there will be at most 10 queries of this type. If there are multiple optimal colorings corresponding to this hash, print any of them. Note that if an edge was red or blue in some coloring, it may change its color in next colorings. The hash of the coloring is calculated as follows: let R be the set of indices of red edges, then the hash is ( \u2211_ i \u2208 R 2^ i) 998244353 . Note that you should solve the problem in online mode. It means that you can' t read the whole input at once. You can read each query only after writing the answer for the last query. Use functions fflush in C+ + and BufferedWriter. flush in Java languages after each writing in your program.",
    "input": "The first line contains three integers n_ 1 , n_ 2 and m ( 1 \u2264 n_ 1, n_ 2, m \u2264 2 \u00b7 10^ 5 ) . Then m lines follow, the i - th of them contains two integers x_ i and y_ i ( 1 \u2264 x_ i \u2264 n_ 1 ; 1 \u2264 y_ i \u2264 n_ 2 ) meaning that the i - th edge connects the vertex x_ i from the first part and the vertex y_ i from the second part. The next line contains one integer q ( 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of queries you have to process. The next q lines contain the queries in the format introduced in the statement. Additional constraints on the input: at any moment, the graph won' t contain any multiple edges; the queries of type 2 are only asked if the previous query had type 1 ; there are at most 10 queries of type 2 .",
    "output": "To answer a query of type 1 , print one integer \u2014 the hash of the optimal coloring. To answer a query of type 2 , print one line. It should begin with the integer k \u2014 the number of red edges. Then, k distinct integer should follow \u2014 the indices of red edges in your coloring, in any order. Each index should correspond to an existing edge, and the hash of the coloring you produce should be equal to the hash you printed as the answer to the previous query. If there are multiple answers to a query, you may print any of them.",
    "note": "",
    "topics": [
      "data structures",
      "graphs",
      "interactive"
    ],
    "id": "1499G"
  },
  {
    "title": "Minimum Grid Path",
    "url": "https://codeforces.com/problemset/problem/1499/C",
    "history": "Let' s say you are standing on the XY - plane at point ( 0, 0) and you want to reach point ( n, n) . You can move only in two directions: to the right, i. e. horizontally and in the direction that increase your x coordinate, or up, i. e. vertically and in the direction that increase your y coordinate. In other words, your path will have the following structure: initially, you choose to go to the right or up; then you go some positive integer distance in the chosen direction ( distances can be chosen independently) ; after that you change your direction ( from right to up, or from up to right) and repeat the process. You don' t like to change your direction too much, so you will make no more than n - 1 direction changes. As a result, your path will be a polygonal chain from ( 0, 0) to ( n, n) , consisting of at most n line segments where each segment has positive integer length and vertical and horizontal segments alternate. Not all paths are equal. You have n integers c_ 1, c_ 2, . . . , c_ n where c_ i is the cost of the i - th segment. Using these costs we can define the cost of the path as the sum of lengths of the segments of this path multiplied by their cost, i. e. if the path consists of k segments ( k \u2264 n ) , then the cost of the path is equal to \u2211_ i= 1^ kc_ i \u00b7 length_ i ( segments are numbered from 1 to k in the order they are in the path) . Find the path of the minimum cost and print its cost.",
    "input": "The first line contains the single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains the single integer n ( 2 \u2264 n \u2264 10^ 5 ) . The second line of each test case contains n integers c_ 1, c_ 2, . . . , c_ n ( 1 \u2264 c_ i \u2264 10^ 9 ) \u2014 the costs of each segment. It' s guaranteed that the total sum of n doesn' t exceed 10^ 5 .",
    "output": "For each test case, print the minimum possible cost of the path from ( 0, 0) to ( n, n) consisting of at most n alternating segments.",
    "note": "In the first test case, to reach ( 2, 2) you need to make at least one turn, so your path will consist of exactly 2 segments: one horizontal of length 2 and one vertical of length 2 . The cost of the path will be equal to 2 \u00b7 c_ 1 + 2 \u00b7 c_ 2 = 26 + 176 = 202 . In the second test case, one of the optimal paths consists of 3 segments: the first segment of length 1 , the second segment of length 3 and the third segment of length 2 . The cost of the path is 1 \u00b7 2 + 3 \u00b7 3 + 2 \u00b7 1 = 13 . In the third test case, one of the optimal paths consists of 4 segments: the first segment of length 1 , the second one \u2014 1 , the third one \u2014 4 , the fourth one \u2014 4 . The cost of the path is 1 \u00b7 4 + 1 \u00b7 3 + 4 \u00b7 2 + 4 \u00b7 1 = 19 .",
    "topics": [
      "brute force",
      "data structures",
      "greedy",
      "math"
    ],
    "id": "1499C"
  },
  {
    "title": "Christmas Game",
    "url": "https://codeforces.com/problemset/problem/1498/F",
    "history": "Alice and Bob are going to celebrate Christmas by playing a game with a tree of presents. The tree has n nodes ( numbered 1 to n , with some node r as its root) . There are a_ i presents are hanging from the i - th node. Before beginning the game, a special integer k is chosen. The game proceeds as follows: Alice begins the game, with moves alternating each turn; in any move, the current player may choose some node ( for example, i ) which has depth at least k . Then, the player picks some positive number of presents hanging from that node, let' s call it m ( 1 \u2264 m \u2264 a_ i) ; the player then places these m presents on the k - th ancestor ( let' s call it j ) of the i - th node ( the k - th ancestor of vertex i is a vertex j such that i is a descendant of j , and the difference between the depth of j and the depth of i is exactly k ) . Now, the number of presents of the i - th node ( a_ i) is decreased by m , and, correspondingly, a_ j is increased by m ; Alice and Bob both play optimally. The player unable to make a move loses the game. For each possible root of the tree, find who among Alice or Bob wins the game. Note: The depth of a node i in a tree with root r is defined as the number of edges on the simple path from node r to node i . The depth of root r itself is zero.",
    "input": "The first line contains two space- separated integers n and k ( 3 \u2264 n \u2264 10^ 5, 1 \u2264 k \u2264 20) . The next n- 1 lines each contain two integers x and y ( 1 \u2264 x, y \u2264 n, x = \u0338 y) , denoting an undirected edge between the two nodes x and y . These edges form a tree of n nodes. The next line contains n space- separated integers denoting the array a ( 0 \u2264 a_ i \u2264 10^ 9) .",
    "output": "Output n integers, where the i - th integer is 1 if Alice wins the game when the tree is rooted at node i , or 0 otherwise.",
    "note": "Let us calculate the answer for sample input with root node as 1 and as 2. Root node 1Alice always wins in this case. One possible gameplay between Alice and Bob is: Alice moves one present from node 4 to node 3. Bob moves four presents from node 5 to node 2. Alice moves four presents from node 2 to node 1. Bob moves three presents from node 2 to node 1. Alice moves three presents from node 3 to node 1. Bob moves three presents from node 4 to node 3. Alice moves three presents from node 3 to node 1. Bob is now unable to make a move and hence loses. Root node 2Bob always wins in this case. One such gameplay is: Alice moves four presents from node 4 to node 3. Bob moves four presents from node 5 to node 2. Alice moves six presents from node 3 to node 1. Bob moves six presents from node 1 to node 2. Alice is now unable to make a move and hence loses.",
    "topics": [
      "bitmasks",
      "data structures",
      "dfs and similar",
      "dp",
      "games",
      "math",
      "trees"
    ],
    "id": "1498F"
  },
  {
    "title": "Planar Reflections",
    "url": "https://codeforces.com/problemset/problem/1498/C",
    "history": "Gaurang has grown up in a mystical universe. He is faced by n consecutive 2D planes. He shoots a particle of decay age k at the planes. A particle can pass through a plane directly, however, every plane produces an identical copy of the particle going in the opposite direction with a decay age k- 1 . If a particle has decay age equal to 1 , it will NOT produce a copy. For example, if there are two planes and a particle is shot with decay age 3 ( towards the right) , the process is as follows: ( here, D( x) refers to a single particle with decay age x ) the first plane produces a D( 2) to the left and lets D( 3) continue on to the right; the second plane produces a D( 2) to the left and lets D( 3) continue on to the right; the first plane lets D( 2) continue on to the left and produces a D( 1) to the right; the second plane lets D( 1) continue on to the right ( D( 1) cannot produce any copies) . In total, the final multiset S of particles is { D( 3) , D( 2) , D( 2) , D( 1) } . ( See notes for visual explanation of this test case. ) Gaurang is unable to cope up with the complexity of this situation when the number of planes is too large. Help Gaurang find the size of the multiset S , given n and k . Since the size of the multiset can be very large, you have to output it modulo 10^ 9+ 7 . Note: Particles can go back and forth between the planes without colliding with each other.",
    "input": "The first line of the input contains the number of test cases t ( 1 \u2264 t \u2264 100 ) . Then, t lines follow, each containing two integers n and k ( 1 \u2264 n, k \u2264 1000 ) . Additionally, the sum of n over all test cases will not exceed 1000 , and the sum of k over all test cases will not exceed 1000 . All test cases in one test are different.",
    "output": "Output t integers. The i - th of them should be equal to the answer to the i - th test case.",
    "note": "Let us explain the first example with four test cases. Test case 1: ( n = 2 , k = 3 ) is already explained in the problem statement. See the below figure of this simulation. Each straight line with a different color represents the path of a different particle. As you can see, there are four distinct particles in the multiset. Note that the vertical spacing between reflected particles is for visual clarity only ( as mentioned before, no two distinct particles collide with each other) Test case 2: ( n = 2 , k = 2 ) is explained as follows: the first plane produces a D( 1) to the left and lets D( 2) continue on to the right; the second plane produces a D( 1) to the left and lets D( 2) continue on to the right; the first plane lets D( 1) continue on to the left ( D( 1) cannot produce any copies) . Total size of multiset obtained { D( 1) , D( 1) , D( 2) } is equal to three. Test case 3: ( n = 3 , k = 1 ) , there are three planes, but decay age is only one. So no new copies are produced while the one particle passes through the planes. Hence, the answer is one. Test case 4: ( n = 1 , k = 3 ) there is only one plane. The particle produces a new copy to the left. The multiset { D( 2) , D( 3) } is of size two.",
    "topics": [
      "brute force",
      "data structures",
      "dp"
    ],
    "id": "1498C"
  },
  {
    "title": "Box Fitting",
    "url": "https://codeforces.com/problemset/problem/1498/B",
    "history": "You are given n rectangles, each of height 1 . Each rectangle' s width is a power of 2 ( i. e. it can be represented as 2^ x for some non- negative integer x ) . You are also given a two- dimensional box of width W . Note that W may or may not be a power of 2 . Moreover, W is at least as large as the width of the largest rectangle. You have to find the smallest height of this box, such that it is able to fit all the given rectangles. It is allowed to have some empty space left in this box after fitting all the rectangles. You cannot rotate the given rectangles to make them fit into the box. Moreover, any two distinct rectangles must not overlap, i. e. , any two distinct rectangles must have zero intersection area. See notes for visual explanation of sample input.",
    "input": "The first line of input contains one integer t ( 1 \u2264 t \u2264 5 \u00b7 10^ 3 ) \u2014 the number of test cases. Each test case consists of two lines. For each test case: the first line contains two integers n ( 1 \u2264 n \u2264 10^ 5 ) and W ( 1 \u2264 W \u2264 10^ 9 ) ; the second line contains n integers w_ 1, w_ 2, . . . , w_ n ( 1 \u2264 w_ i \u2264 10^ 6 ) , where w_ i is the width of the i - th rectangle. Each w_ i is a power of 2 ; additionally, max_ i= 1^ n w_ i \u2264 W . The sum of n over all test cases does not exceed 10^ 5 .",
    "output": "Output t integers. The i - th integer should be equal to the answer to the i - th test case \u2014 the smallest height of the box.",
    "note": "For the first test case in the sample input, the following figure shows one way to fit the given five rectangles into the 2D box with minimum height: In the figure above, the number inside each rectangle is its width. The width of the 2D box is 16 ( indicated with arrow below) . The minimum height required for the 2D box in this case is 2 ( indicated on the left) . In the second test case, you can have a minimum height of three by keeping two blocks ( one each of widths eight and two) on each of the three levels.",
    "topics": [
      "binary search",
      "bitmasks",
      "data structures",
      "greedy"
    ],
    "id": "1498B"
  },
  {
    "title": "Square-free division (hard version)",
    "url": "https://codeforces.com/problemset/problem/1497/E2",
    "history": "This is the hard version of the problem. The only difference is that in this version 0 \u2264 k \u2264 20 . There is an array a_ 1, a_ 2, . . . , a_ n of n positive integers. You should divide it into a minimal number of continuous segments, such that in each segment there are no two numbers ( on different positions) , whose product is a perfect square. Moreover, it is allowed to do at most k such operations before the division: choose a number in the array and change its value to any positive integer. What is the minimum number of continuous segments you should use if you will make changes optimally?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000) \u2014 the number of test cases. The first line of each test case contains two integers n , k ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 0 \u2264 k \u2264 20 ) . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 7 ) . It' s guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case print a single integer \u2014 the answer to the problem.",
    "note": "In the first test case it is possible to change the array this way: [ 3, 6, 2, 4, 5] ( changed elements are underlined) . After that the array does not need to be divided, so the answer is 1 . In the second test case it is possible to change the array this way: [ 6, 2, 3, 8, 9, 5, 3, 6, 10, 11, 7] . After that such division is optimal: [ 6, 2, 3] [ 8, 9, 5, 3, 6, 10, 11, 7]",
    "topics": [
      "data structures",
      "dp",
      "greedy",
      "math",
      "number theory",
      "two pointers"
    ],
    "id": "1497E2"
  },
  {
    "title": "Square-Free Division (easy version)",
    "url": "https://codeforces.com/problemset/problem/1497/E1",
    "history": "This is the easy version of the problem. The only difference is that in this version k = 0 . There is an array a_ 1, a_ 2, . . . , a_ n of n positive integers. You should divide it into a minimal number of continuous segments, such that in each segment there are no two numbers ( on different positions) , whose product is a perfect square. Moreover, it is allowed to do at most k such operations before the division: choose a number in the array and change its value to any positive integer. But in this version k = 0 , so it is not important. What is the minimum number of continuous segments you should use if you will make changes optimally?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000) \u2014 the number of test cases. The first line of each test case contains two integers n , k ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , k = 0 ) . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 7 ) . It' s guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case print a single integer \u2014 the answer to the problem.",
    "note": "In the first test case the division may be as follows: [ 18, 6] [ 2, 4] [ 1]",
    "topics": [
      "data structures",
      "dp",
      "greedy",
      "math",
      "number theory",
      "two pointers"
    ],
    "id": "1497E1"
  },
  {
    "title": "Meximization",
    "url": "https://codeforces.com/problemset/problem/1497/A",
    "history": "You are given an integer n and an array a_ 1, a_ 2, . . . , a_ n . You should reorder the elements of the array a in such way that the sum of MEX on prefixes ( i - th prefix is a_ 1, a_ 2, . . . , a_ i ) is maximized. Formally, you should find an array b_ 1, b_ 2, . . . , b_ n , such that the sets of elements of arrays a and b are equal ( it is equivalent to array b can be found as an array a with some reordering of its elements) and \u2211_ i= 1^ nMEX( b_ 1, b_ 2, . . . , b_ i) is maximized. MEX of a set of nonnegative integers is the minimal nonnegative integer such that it is not in the set. For example, MEX( { 1, 2, 3} ) = 0 , MEX( { 0, 1, 2, 4, 5} ) = 3 .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 100) . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 100) .",
    "output": "For each test case print an array b_ 1, b_ 2, . . . , b_ n \u2014 the optimal reordering of a_ 1, a_ 2, . . . , a_ n , so the sum of MEX on its prefixes is maximized. If there exist multiple optimal answers you can find any.",
    "note": "In the first test case in the answer MEX for prefixes will be: MEX( { 0} ) = 1 MEX( { 0, 1} ) = 2 MEX( { 0, 1, 2} ) = 3 MEX( { 0, 1, 2, 3} ) = 4 MEX( { 0, 1, 2, 3, 4} ) = 5 MEX( { 0, 1, 2, 3, 4, 7} ) = 5 MEX( { 0, 1, 2, 3, 4, 7, 3} ) = 5 The sum of MEX = 1 + 2 + 3 + 4 + 5 + 5 + 5 = 25 . It can be proven, that it is a maximum possible sum of MEX on prefixes.",
    "topics": [
      "brute force",
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "1497A"
  },
  {
    "title": "Squares",
    "url": "https://codeforces.com/problemset/problem/1495/F",
    "history": "There are n squares drawn from left to right on the floor. The i - th square has three integers p_ i, a_ i, b_ i , written on it. The sequence p_ 1, p_ 2, . . . , p_ n forms a permutation. Each round you will start from the leftmost square 1 and jump to the right. If you are now on the i - th square, you can do one of the following two operations: Jump to the i+ 1 - th square and pay the cost a_ i . If i= n , then you can end the round and pay the cost a_ i . Jump to the j - th square and pay the cost b_ i , where j is the leftmost square that satisfies j > i, p_ j > p_ i . If there is no such j then you can end the round and pay the cost b_ i . There are q rounds in the game. To make the game more difficult, you need to maintain a square set S ( initially it is empty) . You must pass through these squares during the round ( other squares can also be passed through) . The square set S for the i - th round is obtained by adding or removing a square from the square set for the ( i- 1) - th round. For each round find the minimum cost you should pay to end it.",
    "input": "The first line contains two integers n , q ( 1\u2264 n, q\u2264 2 \u00b7 10^ 5 ) \u2014 the number of squares and the number of rounds. The second line contains n distinct integers p_ 1, p_ 2, . . . , p_ n ( 1\u2264 p_ i\u2264 n ) . It is guaranteed that the sequence p_ 1, p_ 2, . . . , p_ n forms a permutation. The third line contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9\u2264 a_ i\u2264 10^ 9 ) . The fourth line contains n integers b_ 1, b_ 2, . . . , b_ n ( - 10^ 9\u2264 b_ i\u2264 10^ 9 ) . Then q lines follow, i - th of them contains a single integer x_ i ( 1\u2264 x_ i\u2264 n ) . If x_ i was in the set S on the ( i- 1) - th round you should remove it, otherwise, you should add it.",
    "output": "Print q lines, each of them should contain a single integer \u2014 the minimum cost you should pay to end the corresponding round.",
    "note": "Let' s consider the character T as the end of a round. Then we can draw two graphs for the first and the second test. In the first round of the first test, the set that you must pass through is { 1} . The path you can use is 1\u2192 3\u2192 T and its cost is 6 . In the second round of the first test, the set that you must pass through is { 1, 2} . The path you can use is 1\u2192 2\u2192 3\u2192 T and its cost is 8 .",
    "topics": [
      "constructive algorithms",
      "data structures",
      "dp",
      "graphs",
      "trees"
    ],
    "id": "1495F"
  },
  {
    "title": "Qingshan and Daniel",
    "url": "https://codeforces.com/problemset/problem/1495/E",
    "history": "Qingshan and Daniel are going to play a card game. But it will be so boring if only two persons play this. So they will make n robots in total to play this game automatically. Robots made by Qingshan belong to the team 1 , and robots made by Daniel belong to the team 2 . Robot i belongs to team t_ i . Before the game starts, a_ i cards are given for robot i . The rules for this card game are simple: Before the start, the robots are arranged in a circle in the order or their indices. The robots will discard cards in some order, in each step one robot discards a single card. When the game starts, robot 1 will discard one of its cards. After that, robots will follow the following rules: If robot i discards the card last, the nearest robot whose team is opposite from i ' s will discard the card next. In another word j will discard a card right after i , if and only if among all j that satisfy t_ i t_ j , dist( i, j) ( definition is below) is minimum. The robot who has no cards should quit the game immediately. This robot won' t be considered in the next steps. When no robot can discard the card next, the game ends. We define the distance from robot x to robot y as dist( x, y) = ( y- x+ n) n . It is similar to the oriented distance on the circle. For example, when n= 5 , the distance from 1 to 3 is dist( 1, 3) = ( 3- 1+ 5) 5= 2 , the distance from 3 to 1 is dist( 3, 1) = ( 1- 3+ 5) 5 = 3 . Later, Qingshan finds out that it will take so much time to see how robots play. She wants to know the result as quickly as possible. You, as Qingshan' s fan, are asked to calculate an array [ ans_ 1, ans_ 2, . . . , ans_ n] \u2014 ans_ i is equal to the number of cards, that i - th robot will discard during the game. You need to hurry! To avoid the large size of the input, the team and the number of cards of each robot will be generated in your code with some auxiliary arrays.",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 5\u00b7 10^ 6 ) \u2014 the number of robots playing this game. The second line contains one integer m ( 1 \u2264 m \u2264min( n, 200 000) ) . Each of the next m line contains four integers p_ i , k_ i , b_ i , w_ i ( 1 \u2264 p_ i \u2264 n , 1 \u2264 k_ i \u2264 10^ 9+ 7 , 0 \u2264 b_ i , w_ i< k_ i ) . It' s guaranteed that p_ m= n and p_ j- 1< p_ j ( 2 \u2264 j \u2264 m ) . Arrays a_ j and t_ j should be generated by the following pseudo code: seed = 0base = 0function rnd( ) : ret = seed seed = ( seed * base + 233) mod 1000000007 return retp[ 0] = 0for i = 1 to m: seed = b[ i] base = w[ i] for j = p[ i - 1] + 1 to p[ i] : t[ j] = ( rnd( ) mod 2) + 1 a[ j] = ( rnd( ) mod k[ i] ) + 1",
    "output": "Print a single integer ( \u220f_ i= 1^ n ( ( ans_ i \u2295 i^ 2) + 1) ) 10^ 9+ 7 , where \u2295 denotes the bitwise XOR operation.",
    "note": "In the first test case a= [ 5, 5, 1] and t= [ 1, 2, 2] . The robot 1 discards the card first. Then robot 2 discards the card next. Robot 3 doesn' t discard the card next because dist( 1, 2) < dist( 1, 3) . Then robot 1 discards the card next. Robot 3 doesn' t discard the card next because t_ 2= t_ 3 . If we write down the index of the robot who discards a card in time order, it will be the sequence [ 1, 2, 1, 2, 1, 2, 1, 2] . So robots 1 , 2 and 3 discard 5 , 5 and 0 cards, respectively. And the answer is ( ( ( 5 \u2295 1^ 2) + 1) \u00d7( ( 5 \u2295 2^ 2) + 1) \u00d7( ( 0 \u2295 3^ 2) + 1) ) 10^ 9+ 7= ( 5\u00d7 2 \u00d7 10) 10^ 9+ 7= 100 .",
    "topics": [
      "brute force",
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "1495E"
  },
  {
    "title": "A-Z Graph",
    "url": "https://codeforces.com/problemset/problem/1494/E",
    "history": "You are given a directed graph consisting of n vertices. Each directed edge ( or arc) labeled with a single character. Initially, the graph is empty. You should process m queries with it. Each query is one of three types: \" + u v c \" \u2014 add arc from u to v with label c . It' s guaranteed that there is no arc ( u, v) in the graph at this moment; \" - u v \" \u2014 erase arc from u to v . It' s guaranteed that the graph contains arc ( u, v) at this moment; \" ? k \" \u2014 find the sequence of k vertices v_ 1, v_ 2, . . . , v_ k such that there exist both routes v_ 1 \u2192 v_ 2 \u2192. . . \u2192 v_ k and v_ k \u2192 v_ k - 1\u2192. . . \u2192 v_ 1 and if you write down characters along both routes you' ll get the same string. You can visit the same vertices any number of times.",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ; 1 \u2264 m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of vertices in the graph and the number of queries. The next m lines contain queries \u2014 one per line. Each query is one of three types: \" + u v c \" ( 1 \u2264 u, v \u2264 n ; u = \u0338 v ; c is a lowercase Latin letter) ; \" - u v \" ( 1 \u2264 u, v \u2264 n ; u = \u0338 v ) ; \" ? k \" ( 2 \u2264 k \u2264 10^ 5 ) . It' s guaranteed that you don' t add multiple edges and erase only existing edges. Also, there is at least one query of the third type.",
    "output": "For each query of the third type, print YES if there exist the sequence v_ 1, v_ 2, . . . , v_ k described above, or NO otherwise.",
    "note": "In the first query of the third type k = 3 , we can, for example, choose a sequence [ 1, 2, 3] , since 1 2 3 and 3 2 1 . In the second query of the third type k = 2 , and we can' t find sequence p_ 1, p_ 2 such that arcs ( p_ 1, p_ 2) and ( p_ 2, p_ 1) have the same characters. In the third query of the third type, we can, for example, choose a sequence [ 1, 2, 3, 2, 1] , where 1 2 3 2 1 .",
    "topics": [
      "constructive algorithms",
      "data structures",
      "graphs",
      "hashing"
    ],
    "id": "1494E"
  },
  {
    "title": "Dogeforces",
    "url": "https://codeforces.com/problemset/problem/1494/D",
    "history": "The Dogeforces company has k employees. Each employee, except for lower- level employees, has at least 2 subordinates. Lower- level employees have no subordinates. Each employee, except for the head of the company, has exactly one direct supervisor. The head of the company is a direct or indirect supervisor of all employees. It is known that in Dogeforces, each supervisor receives a salary strictly more than all his subordinates. The full structure of the company is a secret, but you know the number of lower- level employees and for each pair of lower- level employees, the salary of their common supervisor is known ( if there are several such supervisors, then the supervisor with the minimum salary) . You have to restore the structure of the company.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 500 ) \u2014 the number of lower- level employees. This is followed by n lines, where i - th line contains n integers a_ i, 1, a_ i, 2, . . . , a_ i, n ( 1 \u2264 a_ i, j\u2264 5000 ) \u2014 salary of the common supervisor of employees with numbers i and j . It is guaranteed that a_ i, j = a_ j, i . Note that a_ i, i is equal to the salary of the i - th employee.",
    "output": "In the first line, print a single integer k \u2014 the number of employees in the company. In the second line, print k integers c_ 1, c_ 2, . . . , c_ k , where c_ i is the salary of the employee with the number i . In the third line, print a single integer r \u2014 the number of the employee who is the head of the company. In the following k- 1 lines, print two integers v and u ( 1 \u2264 v, u \u2264 k ) \u2014 the number of the employee and his direct supervisor. Note that the lower- level employees have numbers from 1 to n , and for the rest of the employees, you have to assign numbers from n+ 1 to k . If there are several correct company structures, you can print any of them.",
    "note": "One of the possible structures in the first example:",
    "topics": [
      "constructive algorithms",
      "data structures",
      "dfs and similar",
      "divide and conquer",
      "dsu",
      "greedy",
      "sortings",
      "trees"
    ],
    "id": "1494D"
  },
  {
    "title": "GCD of an Array",
    "url": "https://codeforces.com/problemset/problem/1493/D",
    "history": "You are given an array a of length n . You are asked to process q queries of the following format: given integers i and x , multiply a_ i by x . After processing each query you need to output the greatest common divisor ( GCD) of all elements of the array a . Since the answer can be too large, you are asked to output it modulo 10^ 9+ 7 .",
    "input": "The first line contains two integers \u2014 n and q ( 1 \u2264 n, q \u2264 2 \u00b7 10^ 5 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 2 \u00b7 10^ 5 ) \u2014 the elements of the array a before the changes. The next q lines contain queries in the following format: each line contains two integers i and x ( 1 \u2264 i \u2264 n , 1 \u2264 x \u2264 2 \u00b7 10^ 5 ) .",
    "output": "Print q lines: after processing each query output the GCD of all elements modulo 10^ 9+ 7 on a separate line.",
    "note": "After the first query the array is [ 12, 6, 8, 12] , gcd( 12, 6, 8, 12) = 2 . After the second query \u2014 [ 12, 18, 8, 12] , gcd( 12, 18, 8, 12) = 2 . After the third query \u2014 [ 12, 18, 24, 12] , gcd( 12, 18, 24, 12) = 6 . Here the gcd function denotes the greatest common divisor.",
    "topics": [
      "brute force",
      "data structures",
      "hashing",
      "implementation",
      "math",
      "number theory",
      "sortings",
      "two pointers"
    ],
    "id": "1493D"
  },
  {
    "title": "Maximum width",
    "url": "https://codeforces.com/problemset/problem/1492/C",
    "history": "Your classmate, whom you do not like because he is boring, but whom you respect for his intellect, has two strings: s of length n and t of length m . A sequence p_ 1, p_ 2, . . . , p_ m , where 1 \u2264 p_ 1 < p_ 2 < . . . < p_ m \u2264 n , is called beautiful, if s_ p_ i = t_ i for all i from 1 to m . The width of a sequence is defined as max_ 1 \u2264 i < m( p_ i + 1 - p_ i) . Please help your classmate to identify the beautiful sequence with the maximum width. Your classmate promised you that for the given strings s and t there is at least one beautiful sequence.",
    "input": "The first input line contains two integers n and m ( 2 \u2264 m \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the lengths of the strings s and t . The following line contains a single string s of length n , consisting of lowercase letters of the Latin alphabet. The last line contains a single string t of length m , consisting of lowercase letters of the Latin alphabet. It is guaranteed that there is at least one beautiful sequence for the given strings.",
    "output": "Output one integer \u2014 the maximum width of a beautiful sequence.",
    "note": "In the first example there are two beautiful sequences of width 3 : they are { 1, 2, 5} and { 1, 4, 5} . In the second example the beautiful sequence with the maximum width is { 1, 5} . In the third example there is exactly one beautiful sequence \u2014 it is { 1, 2, 3, 4, 5} . In the fourth example there is exactly one beautiful sequence \u2014 it is { 1, 2} .",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "greedy",
      "two pointers"
    ],
    "id": "1492C"
  },
  {
    "title": "Card Deck",
    "url": "https://codeforces.com/problemset/problem/1492/B",
    "history": "You have a deck of n cards, and you' d like to reorder it to a new one. Each card has a value between 1 and n equal to p_ i . All p_ i are pairwise distinct. Cards in a deck are numbered from bottom to top, i. e. p_ 1 stands for the bottom card, p_ n is the top card. In each step you pick some integer k > 0 , take the top k cards from the original deck and place them, in the order they are now, on top of the new deck. You perform this operation until the original deck is empty. ( Refer to the notes section for the better understanding. ) Let' s define an order of a deck as \u2211_ i = 1^ nn^ n - i\u00b7 p_ i . Given the original deck, output the deck with maximum possible order you can make using the operation above.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains the single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the size of deck you have. The second line contains n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ; p_ i = \u0338 p_ j if i = \u0338 j ) \u2014 values of card in the deck from bottom to top. It' s guaranteed that the sum of n over all test cases doesn' t exceed 10^ 5 .",
    "output": "For each test case print the deck with maximum possible order. Print values of cards in the deck from bottom to top. If there are multiple answers, print any of them.",
    "note": "In the first test case, one of the optimal strategies is the next one: take 1 card from the top of p and move it to p' : p becomes [ 1, 2, 3] , p' becomes [ 4] ; take 1 card from the top of p : p becomes [ 1, 2] , p' becomes [ 4, 3] ; take 1 card from the top of p : p becomes [ 1] , p' becomes [ 4, 3, 2] ; take 1 card from the top of p : p becomes empty, p' becomes [ 4, 3, 2, 1] . In result, p' has order equal to 4^ 3 \u00b7 4 + 4^ 2 \u00b7 3 + 4^ 1 \u00b7 2 + 4^ 0 \u00b7 1 = 256 + 48 + 8 + 1 = 313 . In the second test case, one of the optimal strategies is: take 4 cards from the top of p and move it to p' : p becomes [ 1] , p' becomes [ 5, 2, 4, 3] ; take 1 card from the top of p and move it to p' : p becomes empty, p' becomes [ 5, 2, 4, 3, 1] ; In result, p' has order equal to 5^ 4 \u00b7 5 + 5^ 3 \u00b7 2 + 5^ 2 \u00b7 4 + 5^ 1 \u00b7 3 + 5^ 0 \u00b7 1 = 3125 + 250 + 100 + 15 + 1 = 3491 . In the third test case, one of the optimal strategies is: take 2 cards from the top of p and move it to p' : p becomes [ 4, 2, 5, 3] , p' becomes [ 6, 1] ; take 2 cards from the top of p and move it to p' : p becomes [ 4, 2] , p' becomes [ 6, 1, 5, 3] ; take 2 cards from the top of p and move it to p' : p becomes empty, p' becomes [ 6, 1, 5, 3, 4, 2] . In result, p' has order equal to 6^ 5 \u00b7 6 + 6^ 4 \u00b7 1 + 6^ 3 \u00b7 5 + 6^ 2 \u00b7 3 + 6^ 1 \u00b7 4 + 6^ 0 \u00b7 2 = 46656 + 1296 + 1080 + 108 + 24 + 2 = 49166 .",
    "topics": [
      "data structures",
      "greedy",
      "math"
    ],
    "id": "1492B"
  },
  {
    "title": "Ruler Of The Zoo",
    "url": "https://codeforces.com/problemset/problem/1491/I",
    "history": "After realizing that Zookeeper is just a duck, the animals have overthrown Zookeeper. They now have to decide a new ruler among themselves through a fighting tournament of the following format: Initially, animal 0 is king, while everyone else queues up with animal 1 at the front of the queue and animal n- 1 at the back. The animal at the front of the queue will challenge the king to a fight, and the animal with greater strength will win the fight. The winner will become king, while the loser joins the back of the queue. An animal who wins 3 times consecutively will be crowned ruler for the whole zoo. The strength of each animal depends on how many consecutive fights he won. Animal i has strength A_ i with 0 consecutive win, B_ i with 1 consecutive win, and C_ i with 2 consecutive wins. Initially, everyone has 0 consecutive win. For all animals, A_ i > B_ i and C_ i > B_ i . Also, the values of A_ i , B_ i , C_ i are distinct ( all 3n values are pairwise different) . In other words, an animal who is not a king has strength A_ i . A king usually has a strength of B_ i or C_ i . The exception is on the first turn, the first king ( animal 0 ) has strength A_ i . Who is the new ruler, and after how many fights? Or will it end up that animals fight forever with no one ending up as ruler?",
    "input": "The first line contains one integer n ( 4 \u2264 n \u2264 6000 ) \u2014 number of the animals. i - th of the next n lines contains 3 integers A_ i , B_ i and C_ i ( 0 \u2264 A_ i, B_ i, C_ i \u2264 10^ 9 ) . It is guaranteed that A_ i > B_ i and C_ i > B_ i , and that all values of A_ i , B_ i and C_ i are distinct.",
    "output": "Output two integers in a single line. The first is the index of the animal that will become ruler, and the second is the number of fights passed until some animal becomes the ruler. If the animals will fight for infinitely long, output - 1 - 1 instead.",
    "note": "The following describes the sequence of events for the second sample. Note that in fight 1 , the king ( animal 0 ) has strength A_ 0 . The tournament ends at fight 7 as animal 1 wins fight 5 , 6 and 7 .",
    "topics": [
      "brute force",
      "data structures"
    ],
    "id": "1491I"
  },
  {
    "title": "Yuezheng Ling and Dynamic Tree",
    "url": "https://codeforces.com/problemset/problem/1491/H",
    "history": "Yuezheng Ling gives Luo Tianyi a tree which has n nodes, rooted at 1 . Luo Tianyi will tell you that the parent of the i - th node is a_ i ( 1 \u2264 a_ i< i for 2 \u2264 i \u2264 n ) , and she will ask you to perform q queries of 2 types: She' ll give you three integers l , r and x ( 2 \u2264 l \u2264 r \u2264 n , 1 \u2264 x \u2264 10^ 5 ) . You need to replace a_ i with max( a_ i- x, 1) for all i with l \u2264 i \u2264 r . She' ll give you two integers u , v ( 1 \u2264 u, v \u2264 n ) . You need to find the LCA of nodes u and v ( their lowest common ancestor) .",
    "input": "The first line contains two integers n and q ( 2\u2264 n, q \u2264 10^ 5 ) \u2014 the number of nodes and the number of queries, respectively. The second line contains n- 1 integers a_ 2, a_ 3, . . . , a_ n ( 1 \u2264 a_ i < i ) , where a_ i is the parent of the node i . Next q lines contain queries. For each query, the first integer of each line is t ( t = 1 or 2 ) \u2014 the type of the query. If t = 1 , this represents the query of the first type. Then, three integers will follow: l , r , x ( 2 \u2264 l \u2264 r \u2264 n , 1 \u2264 x \u2264 10^ 5 ) , meaning that you have to replace a_ i with max( a_ i- x, 1) for all i with l \u2264 i \u2264 r . If t = 2 , this represents the query of the second type. Then, two integers will follow: u and v ( 1 \u2264 u, v \u2264 n ) , and you have to find the LCA of u and v . It' s guaranteed that there is at least one query of the second type.",
    "output": "For each query of the second type output answer on a new line.",
    "note": "The tree in example is shown below. After the query of the first type, the tree changes and is looking as shown below.",
    "topics": [
      "data structures",
      "trees"
    ],
    "id": "1491H"
  },
  {
    "title": "Pekora and Trampoline",
    "url": "https://codeforces.com/problemset/problem/1491/C",
    "history": "There is a trampoline park with n trampolines in a line. The i - th of which has strength S_ i . Pekora can jump on trampolines in multiple passes. She starts the pass by jumping on any trampoline of her choice. If at the moment Pekora jumps on trampoline i , the trampoline will launch her to position i + S_ i , and S_ i will become equal to max( S_ i- 1, 1) . In other words, S_ i will decrease by 1 , except of the case S_ i= 1 , when S_ i will remain equal to 1 . If there is no trampoline in position i + S_ i , then this pass is over. Otherwise, Pekora will continue the pass by jumping from the trampoline at position i + S_ i by the same rule as above. Pekora can' t stop jumping during the pass until she lands at the position larger than n ( in which there is no trampoline) . Poor Pekora! Pekora is a naughty rabbit and wants to ruin the trampoline park by reducing all S_ i to 1 . What is the minimum number of passes she needs to reduce all S_ i to 1 ?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 500 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 5000 ) \u2014 the number of trampolines. The second line of each test case contains n integers S_ 1, S_ 2, . . . , S_ n ( 1 \u2264 S_ i \u2264 10^ 9 ) , where S_ i is the strength of the i - th trampoline. It' s guaranteed that the sum of n over all test cases doesn' t exceed 5000 .",
    "output": "For each test case, output a single integer \u2014 the minimum number of passes Pekora needs to do to reduce all S_ i to 1 .",
    "note": "For the first test case, here is an optimal series of passes Pekora can take. ( The bolded numbers are the positions that Pekora jumps into during these passes. ) [ 1, 4, 2, 2, 2, 2, 2] [ 1, 4, 1, 2, 1, 2, 1] [ 1, 3, 1, 2, 1, 1, 1] [ 1, 2, 1, 2, 1, 1, 1] For the second test case, the optimal series of passes is show below. [ 2, 3] [ 1, 3] [ 1, 2] For the third test case, all S_ i are already equal to 1 .",
    "topics": [
      "brute force",
      "data structures",
      "dp",
      "greedy",
      "implementation"
    ],
    "id": "1491C"
  },
  {
    "title": "Old Floppy Drive ",
    "url": "https://codeforces.com/problemset/problem/1490/G",
    "history": "Polycarp was dismantling his attic and found an old floppy drive on it. A round disc was inserted into the drive with n integers written on it. Polycarp wrote the numbers from the disk into the a array. It turned out that the drive works according to the following algorithm: the drive takes one positive number x as input and puts a pointer to the first element of the a array; after that, the drive starts rotating the disk, every second moving the pointer to the next element, counting the sum of all the elements that have been under the pointer. Since the disk is round, in the a array, the last element is again followed by the first one; as soon as the sum is at least x , the drive will shut down. Polycarp wants to learn more about the operation of the drive, but he has absolutely no free time. So he asked you m questions. To answer the i - th of them, you need to find how many seconds the drive will work if you give it x_ i as input. Please note that in some cases the drive can work infinitely. For example, if n= 3, m= 3 , a= [ 1, - 3, 4] and x= [ 1, 5, 2] , then the answers to the questions are as follows: the answer to the first query is 0 because the drive initially points to the first item and the initial sum is 1 . the answer to the second query is 6 , the drive will spin the disk completely twice and the amount becomes 1+ ( - 3) + 4+ 1+ ( - 3) + 4+ 1= 5 . the answer to the third query is 2 , the amount is 1+ ( - 3) + 4= 2 .",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of each test case consists of two positive integers n , m ( 1 \u2264 n, m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of numbers on the disk and the number of asked questions. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) . The third line of each test case contains m positive integers x_ 1, x_ 2, . . . , x_ m ( 1 \u2264 x \u2264 10^ 9 ) . It is guaranteed that the sums of n and m over all test cases do not exceed 2 \u00b7 10^ 5 .",
    "output": "Print m numbers on a separate line for each test case. The i - th number is: - 1 if the drive will run infinitely; the number of seconds the drive will run, otherwise.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "math"
    ],
    "id": "1490G"
  },
  {
    "title": "Equalize the Array",
    "url": "https://codeforces.com/problemset/problem/1490/F",
    "history": "Polycarp was gifted an array a of length n . Polycarp considers an array beautiful if there exists a number C , such that each number in the array occurs either zero or C times. Polycarp wants to remove some elements from the array a to make it beautiful. For example, if n= 6 and a = [ 1, 3, 2, 1, 4, 2] , then the following options are possible to make the array a array beautiful: Polycarp removes elements at positions 2 and 5 , array a becomes equal to [ 1, 2, 1, 2] ; Polycarp removes elements at positions 1 and 6 , array a becomes equal to [ 3, 2, 1, 4] ; Polycarp removes elements at positions 1, 2 and 6 , array a becomes equal to [ 2, 1, 4] ; Help Polycarp determine the minimum number of elements to remove from the array a to make it beautiful.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of each test case consists of one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the array a . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 array a . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output one integer \u2014 the minimum number of elements that Polycarp has to remove from the array a to make it beautiful.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1490F"
  },
  {
    "title": "Accidental Victory",
    "url": "https://codeforces.com/problemset/problem/1490/E",
    "history": "A championship is held in Berland, in which n players participate. The player with the number i has a_ i ( a_ i \u2265 1 ) tokens. The championship consists of n- 1 games, which are played according to the following rules: in each game, two random players with non- zero tokens are selected; the player with more tokens is considered the winner of the game ( in case of a tie, the winner is chosen randomly) ; the winning player takes all of the loser' s tokens; The last player with non- zero tokens is the winner of the championship. All random decisions that are made during the championship are made equally probable and independently. For example, if n= 4 , a = [ 1, 2, 4, 3] , then one of the options for the game ( there could be other options) is: during the first game, the first and fourth players were selected. The fourth player has more tokens, so he takes the first player' s tokens. Now a = [ 0, 2, 4, 4] ; during the second game, the fourth and third players were selected. They have the same number of tokens, but in a random way, the third player is the winner. Now a = [ 0, 2, 8, 0] ; during the third game, the second and third players were selected. The third player has more tokens, so he takes the second player' s tokens. Now a = [ 0, 0, 10, 0] ; the third player is declared the winner of the championship. Championship winners will receive personalized prizes. Therefore, the judges want to know in advance which players have a chance of winning, i. e have a non- zero probability of winning the championship. You have been asked to find all such players.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of each test case consists of one positive integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of players in the championship. The second line of each test case contains n positive integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the number of tokens the players have. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print the number of players who have a nonzero probability of winning the championship. On the next line print the numbers of these players in increasing order. Players are numbered starting from one in the order in which they appear in the input.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "greedy"
    ],
    "id": "1490E"
  },
  {
    "title": "Flower Shop",
    "url": "https://codeforces.com/problemset/problem/1488/J",
    "history": "Your friend is running a flower shop. In order to be prepared for the next holidays ( when, as usual, sales skyrocket) she asked you to write her a special program that will help to analyze the stocks she has. There are n different types of flowers she can order and each flower of the type i costs w_ i . The last holidays were a great success, she sold all flowers she had, so right now all her stocks are empty. From this point, she starts routine operations of ordering and selling flowers, while trying to analyze what she has at hand. All of this can be represented as m queries of three types: \" 1 i c \" \u2014 she bought c flowers of type i ; \" 2 i c \" \u2014 she disposed of c flowers of type i ; \" 3 l r k \" \u2014 how many variants of bouquets she can make using only flowers of types l, l + 1, . . . , r with the total cost no more than k . For simplicity, you can think that a bouquet is a multiset of flowers, and two bouquets are different if they are different as multisets. The cost of a bouquet is the sum of all flowers it has. Help your friend and write the program that can process all these queries.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 1000 ; 1 \u2264 m \u2264 1000 ) \u2014 the number of flower types and the number of queries. The second line contains n integers w_ 1, w_ 2, . . . , w_ n ( 1 \u2264 w_ i \u2264 1000 ) \u2014 the cost of one flower of each type. The next m lines contains queries \u2014 one per line. Each query has one of three types: 1 i c ( 1 \u2264 i \u2264 n ; 1 \u2264 c \u2264 5000 ) ; 2 i c ( 1 \u2264 i \u2264 n ; 1 \u2264 c \u2264 5000 ) . It' s guaranteed that there are at least c flowers of type i at this moment; 3 l r k ( 1 \u2264 l \u2264 r \u2264 n ; 1 \u2264 k \u2264 5000 ) It' s guaranteed that the total cost of all flowers in stock after each query doesn' t exceed 5000 .",
    "output": "For each query of the third type, print how many variants of bouquets she can make using only flowers of types l, l + 1, . . . , r with the total cost no more than k . Since the answer may be too large, print it modulo 998 244 353 .",
    "note": "",
    "topics": [
      "*special",
      "data structures",
      "fft",
      "math"
    ],
    "id": "1488J"
  },
  {
    "title": "Build From Suffixes",
    "url": "https://codeforces.com/problemset/problem/1488/H",
    "history": "You are given an integer n and a sequence a of n- 1 integers, each element is either 0 or 1 . You are asked to build a string of length n such that: each letter is one of \" abcd\" ; if a_ i= 1 , then the i - th suffix of the string is lexicographically smaller than the ( i+ 1) - th suffix; if a_ i= 0 , then the i - th suffix of the string is lexicographically greater than the ( i+ 1) - th suffix. You will be asked q queries of form: i ( 1 \u2264 i \u2264 n - 1 ) \u2014 flip the value of a_ i ( if a_ i= 0 , then set a_ i to 1 , and vice versa) . After each query print the number of different strings that satisfy the given constraints modulo 998 244 353 .",
    "input": "The first line contains two integers n and q ( 2 \u2264 n \u2264 10^ 5 ; 1 \u2264 q \u2264 10^ 5 ) \u2014 the length of the string and the number of queries. The second line contains n- 1 integers a_ 1, a_ 2, . . . , a_ n- 1 ( a_ i \u2208{ 0, 1} ) \u2014 the constraints on suffixes of the string. Each of the next q lines contains a query: an integer i ( 1 \u2264 i \u2264 n - 1 ) \u2014 flip the value of a_ i ( if a_ i= 0 , then set a_ i to 1 , and vice versa) .",
    "output": "After each query print the number of different strings that satisfy the given constraints modulo 998 244 353 .",
    "note": "The i - th suffix of a string is a continuous substring that starts from the i - th position and ends in the last position. A string a is lexicographically smaller than a string b if and only if one of the following holds: a is a prefix of b , but a b ; in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b . Two strings a and b of length n differ if there exists a position i such that a_ i = \u0338 b_ i .",
    "topics": [
      "*special",
      "combinatorics",
      "data structures"
    ],
    "id": "1488H"
  },
  {
    "title": "Painting Numbers",
    "url": "https://codeforces.com/problemset/problem/1488/G",
    "history": "You are given n integers, each integer is from 1 to n , all of them are pairwise distinct. You have to paint them red and blue ( each integer should have exactly one color) . The cost of painting is the number of pairs ( x, y) such that y x = 0 , y is red and x is blue. For each k \u2208 [ 1, n] , calculate the maximum cost of painting if exactly k integers should have a red color.",
    "input": "The first line contains one integer n ( 2 \u2264 n \u2264 10^ 5 ) .",
    "output": "For each k \u2208 [ 1, n] print one integer \u2014 the maximum cost of painting, if exactly k integers should be red.",
    "note": "",
    "topics": [
      "*special",
      "data structures",
      "greedy",
      "number theory"
    ],
    "id": "1488G"
  },
  {
    "title": "Dogecoin",
    "url": "https://codeforces.com/problemset/problem/1488/F",
    "history": "Recently, cryptocurrencies have become increasingly popular. Ann decided that it was about time she started mining the Dogecoin cryptocurrency. Ann' s computer is not very powerful, so Ann mines exactly 1 Dogecoin per day. On the Internet, there are forecasts of the cost of 1 dogecoin for the next n days. Every day, Ann can sell any amount of dogecoin that she currently has. Note that if Ann mined Dogecoin on the i - th day, then she can sell it on the same day. Ann has not yet decided when to start mining. She has prepared q possible plans and for each of them wants to know the maximum profit that she can get. Each of the plans is described by two numbers l and r \u2014 the first and last days of mining. Note that Ann should not have any Dogecoin left after the r - th day.",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) . The second line contains n integers c_ 1, c_ 2, . . . , c_ n ( 1 \u2264 c_ i \u2264 10^ 6 ) , where c_ i is the cost of Dogecoin on the i - th day. The third line contains one integer q ( 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of Ann' s plans. The following q lines contains two integers l and r ( 1 \u2264 l \u2264 r \u2264 n ) \u2014 the first and last days of mining.",
    "output": "For each Ann' s plan print one integer \u2014 the maximum profit that she can get using this plan.",
    "note": "",
    "topics": [
      "*special",
      "*special",
      "binary search",
      "data structures"
    ],
    "id": "1488F"
  },
  {
    "title": "Palindromic Doubles",
    "url": "https://codeforces.com/problemset/problem/1488/E",
    "history": "A subsequence is a sequence that can be obtained from another sequence by removing some elements without changing the order of the remaining elements. A palindromic sequence is a sequence that is equal to the reverse of itself. You are given a sequence of n integers a_ 1, a_ 2, . . . , a_ n . Any integer value appears in a no more than twice. What is the length of the longest palindromic subsequence of sequence a ?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of testcases. Then the descriptions of t testcases follow. The first line of each testcase contains a single integer n ( 1 \u2264 n \u2264 250 000 ) \u2014 the number of elements in the sequence. The second line of each testcase contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) . Any integer value appears in a no more than twice. The sum of n over all testcases doesn' t exceed 250 000 .",
    "output": "For each testcase print a single integer \u2014 the length of the longest palindromic subsequence of sequence a .",
    "note": "Here are the longest palindromic subsequences for the example testcases: 2 1 3 1 5 2 1 3 3 4 4 1 or 1 3 3 4 4 1 1 1 1 4 4 2 5 7 2 3 or 4 4 2 5 7 2 3",
    "topics": [
      "*special",
      "data structures",
      "dp"
    ],
    "id": "1488E"
  },
  {
    "title": "Cheap Dinner",
    "url": "https://codeforces.com/problemset/problem/1487/E",
    "history": "Ivan wants to have a good dinner. A good dinner should consist of a first course, a second course, a drink, and a dessert. There are n_ 1 different types of first courses Ivan can buy ( the i - th of them costs a_ i coins) , n_ 2 different types of second courses ( the i - th of them costs b_ i coins) , n_ 3 different types of drinks ( the i - th of them costs c_ i coins) and n_ 4 different types of desserts ( the i - th of them costs d_ i coins) . Some dishes don' t go well with each other. There are m_ 1 pairs of first courses and second courses that don' t go well with each other, m_ 2 pairs of second courses and drinks, and m_ 3 pairs of drinks and desserts that don' t go well with each other. Ivan wants to buy exactly one first course, one second course, one drink, and one dessert so that they go well with each other, and the total cost of the dinner is the minimum possible. Help him to find the cheapest dinner option!",
    "input": "The first line contains four integers n_ 1 , n_ 2 , n_ 3 and n_ 4 ( 1 \u2264 n_ i \u2264 150000 ) \u2014 the number of types of first courses, second courses, drinks and desserts, respectively. Then four lines follow. The first line contains n_ 1 integers a_ 1, a_ 2, . . . , a_ n_ 1 ( 1 \u2264 a_ i \u2264 10^ 8 ) , where a_ i is the cost of the i - th type of first course. Three next lines denote the costs of second courses, drinks, and desserts in the same way ( 1 \u2264 b_ i, c_ i, d_ i \u2264 10^ 8 ) . The next line contains one integer m_ 1 ( 0 \u2264 m_ 1 \u2264 200000 ) \u2014 the number of pairs of first and second courses that don' t go well with each other. Each of the next m_ 1 lines contains two integers x_ i and y_ i ( 1 \u2264 x_ i \u2264 n_ 1 ; 1 \u2264 y_ i \u2264 n_ 2 ) denoting that the first course number x_ i doesn' t go well with the second course number y_ i . All these pairs are different. The block of pairs of second dishes and drinks that don' t go well with each other is given in the same format. The same for pairs of drinks and desserts that don' t go well with each other ( 0 \u2264 m_ 2, m_ 3 \u2264 200000 ) .",
    "output": "If it' s impossible to choose a first course, a second course, a drink, and a dessert so that they go well with each other, print - 1 . Otherwise, print one integer \u2014 the minimum total cost of the dinner.",
    "note": "The best option in the first example is to take the first course 2 , the second course 1 , the drink 2 and the dessert 1 . In the second example, the only pair of the first course and the second course is bad, so it' s impossible to have dinner.",
    "topics": [
      "brute force",
      "data structures",
      "graphs",
      "greedy",
      "implementation",
      "sortings",
      "two pointers"
    ],
    "id": "1487E"
  },
  {
    "title": "Pairs of Paths",
    "url": "https://codeforces.com/problemset/problem/1486/F",
    "history": "You are given a tree consisting of n vertices, and m simple vertex paths. Your task is to find how many pairs of those paths intersect at exactly one vertex. More formally you have to find the number of pairs ( i, j) ( 1 \u2264 i < j \u2264 m) such that path_ i and path_ j have exactly one vertex in common.",
    "input": "First line contains a single integer n ( 1 \u2264 n \u2264 3 \u00b7 10^ 5) . Next n - 1 lines describe the tree. Each line contains two integers u and v ( 1 \u2264 u, v \u2264 n) describing an edge between vertices u and v . Next line contains a single integer m ( 1 \u2264 m \u2264 3 \u00b7 10^ 5) . Next m lines describe paths. Each line describes a path by it' s two endpoints u and v ( 1 \u2264 u, v \u2264 n) . The given path is all the vertices on the shortest path from u to v ( including u and v ) .",
    "output": "Output a single integer \u2014 the number of pairs of paths that intersect at exactly one vertex.",
    "note": "The tree in the first example and paths look like this. Pairs ( 1, 4) and ( 3, 4) intersect at one vertex. In the second example all three paths contain the same single vertex, so all pairs ( 1, 2) , ( 1, 3) and ( 2, 3) intersect at one vertex. The third example is the same as the first example with two additional paths. Pairs ( 1, 4) , ( 1, 5) , ( 2, 5) , ( 3, 4) , ( 3, 5) , ( 3, 6) and ( 5, 6) intersect at one vertex.",
    "topics": [
      "combinatorics",
      "data structures",
      "dfs and similar",
      "dp",
      "trees"
    ],
    "id": "1486F"
  },
  {
    "title": "Max Median",
    "url": "https://codeforces.com/problemset/problem/1486/D",
    "history": "You are a given an array a of length n . Find a subarray a[ l. . r] with length at least k with the largest median. A median in an array of length n is an element which occupies position number \u230an + 1/ 2\u230b after we sort the elements in non- decreasing order. For example: median( [ 1, 2, 3, 4] ) = 2 , median( [ 3, 2, 1] ) = 2 , median( [ 2, 1, 2, 1] ) = 1 . Subarray a[ l. . r] is a contiguous part of the array a , i. e. the array a_ l, a_ l+ 1, . . . , a_ r for some 1 \u2264 l \u2264 r \u2264 n , its length is r - l + 1 .",
    "input": "The first line contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 2 \u00b7 10^ 5 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) .",
    "output": "Output one integer m \u2014 the maximum median you can get.",
    "note": "In the first example all the possible subarrays are [ 1. . 3] , [ 1. . 4] , [ 1. . 5] , [ 2. . 4] , [ 2. . 5] and [ 3. . 5] and the median for all of them is 2 , so the maximum possible median is 2 too. In the second example median( [ 3. . 4] ) = 3 .",
    "topics": [
      "binary search",
      "data structures",
      "dp"
    ],
    "id": "1486D"
  },
  {
    "title": "Copy or Prefix Sum",
    "url": "https://codeforces.com/problemset/problem/1485/F",
    "history": "You are given an array of integers b_ 1, b_ 2, . . . , b_ n . An array a_ 1, a_ 2, . . . , a_ n of integers is hybrid if for each i ( 1 \u2264 i \u2264 n ) at least one of these conditions is true: b_ i = a_ i , or b_ i = \u2211_ j= 1^ i a_ j . Find the number of hybrid arrays a_ 1, a_ 2, . . . , a_ n . As the result can be very large, you should print the answer modulo 10^ 9 + 7 .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) . The second line of each test case contains n integers b_ 1, b_ 2, . . . , b_ n ( - 10^ 9 \u2264 b_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n for all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print a single integer: the number of hybrid arrays a_ 1, a_ 2, . . . , a_ n modulo 10^ 9 + 7 .",
    "note": "In the first test case, the hybrid arrays are [ 1, - 2, 1] , [ 1, - 2, 2] , [ 1, - 1, 1] . In the second test case, the hybrid arrays are [ 1, 1, 1, 1] , [ 1, 1, 1, 4] , [ 1, 1, 3, - 1] , [ 1, 1, 3, 4] , [ 1, 2, 0, 1] , [ 1, 2, 0, 4] , [ 1, 2, 3, - 2] , [ 1, 2, 3, 4] . In the fourth test case, the only hybrid array is [ 0, 0, 0, 1] .",
    "topics": [
      "combinatorics",
      "data structures",
      "dp",
      "sortings"
    ],
    "id": "1485F"
  },
  {
    "title": "Exam",
    "url": "https://codeforces.com/problemset/problem/1482/H",
    "history": "This year a Chunin Selection Exam is held again in Konoha, and taking part in it are n ninjas named s_ 1 , s_ 2 , . . . , s_ n . All names are distinct. One of the exam stages consists of fights between the participants. This year the rules determining the ninjas for each fight are the following: ninjas i and j fight against each other if the following conditions are held: i = \u0338 j ; s_ j is a substring of s_ i ; there is no k except i and j that s_ j is a substring of s_ k , and s_ k is a substring of s_ i . A string a is a substring of a string b if a can be obtained from b by deletion of several ( possibly, zero or all) characters from the beginning and several ( possibly, zero or all) characters from the end. Your task is to find out how many fights are going to take place this year.",
    "input": "The first line consists of the only integer n ( 1 \u2264 n \u2264 10^ 6 ) standing for the number of examinees. The following n lines contain their names. No two names coincide, all names are non- empty and consist of lowercase English letters. The total length of all names doesn' t exceed 10^ 6 .",
    "output": "Print the only integer standing for the number of fights.",
    "note": "In the first example hidan fights against dan, and hanabi fights against nabi, who also fights bi. Ninjas named hanabi and bi don' t fight each other since there is the ninja called nabi who breaks the third condition for them. In the second example the fights are held between abacaba and acaba, abacaba and abaca, acaba and aca, abaca and aca.",
    "topics": [
      "data structures",
      "string suffix structures",
      "trees"
    ],
    "id": "1482H"
  },
  {
    "title": "Skyline Photo",
    "url": "https://codeforces.com/problemset/problem/1482/E",
    "history": "Alice is visiting New York City. To make the trip fun, Alice will take photos of the city skyline and give the set of photos as a present to Bob. However, she wants to find the set of photos with maximum beauty and she needs your help. There are n buildings in the city, the i - th of them has positive height h_ i . All n building heights in the city are different. In addition, each building has a beauty value b_ i . Note that beauty can be positive or negative, as there are ugly buildings in the city too. A set of photos consists of one or more photos of the buildings in the skyline. Each photo includes one or more buildings in the skyline that form a contiguous segment of indices. Each building needs to be in exactly one photo. This means that if a building does not appear in any photo, or if a building appears in more than one photo, the set of pictures is not valid. The beauty of a photo is equivalent to the beauty b_ i of the shortest building in it. The total beauty of a set of photos is the sum of the beauty of all photos in it. Help Alice to find the maximum beauty a valid set of photos can have.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 3 \u00b7 10^ 5 ) , the number of buildings on the skyline. The second line contains n distinct integers h_ 1, h_ 2, . . . , h_ n ( 1 \u2264 h_ i \u2264 n ) . The i - th number represents the height of building i . The third line contains n integers b_ 1, b_ 2, . . . , b_ n ( - 10^ 9 \u2264 b_ i \u2264 10^ 9 ) . The i - th number represents the beauty of building i .",
    "output": "Print one number representing the maximum beauty Alice can achieve for a valid set of photos of the skyline.",
    "note": "In the first example, Alice can achieve maximum beauty by taking five photos, each one containing one building. In the second example, Alice can achieve a maximum beauty of 10 by taking four pictures: three just containing one building, on buildings 1 , 2 and 5 , each photo with beauty - 3 , 4 and 7 respectively, and another photo containing building 3 and 4 , with beauty 2 . In the third example, Alice will just take one picture of the whole city. In the fourth example, Alice can take the following pictures to achieve maximum beauty: photos with just one building on buildings 1 , 2 , 8 , 9 , and 10 , and a single photo of buildings 3 , 4 , 5 , 6 , and 7 .",
    "topics": [
      "data structures",
      "divide and conquer",
      "dp"
    ],
    "id": "1482E"
  },
  {
    "title": "Playlist",
    "url": "https://codeforces.com/problemset/problem/1482/D",
    "history": "Arkady has a playlist that initially consists of n songs, numerated from 1 to n in the order they appear in the playlist. Arkady starts listening to the songs in the playlist one by one, starting from song 1 . The playlist is cycled, i. e. after listening to the last song, Arkady will continue listening from the beginning. Each song has a genre a_ i , which is a positive integer. Let Arkady finish listening to a song with genre y , and the genre of the next- to- last listened song be x . If gcd( x, y) = 1 , he deletes the last listened song ( with genre y ) from the playlist. After that he continues listening normally, skipping the deleted songs, and forgetting about songs he listened to before. In other words, after he deletes a song, he can' t delete the next song immediately. Here gcd( x, y) denotes the greatest common divisor ( GCD) of integers x and y . For example, if the initial songs' genres were [ 5, 9, 2, 10, 15] , then the playlist is converted as follows: [ 5, 9, 2, 10, 15] \u2192 [ 5, 9, 2, 10, 15] \u2192 [ 5, 2, 10, 15] ( because gcd( 5, 9) = 1 ) \u2192 [ 5, 2, 10, 15] \u2192 [ 5, 2, 10, 15] \u2192 [ 5, 2, 10, 15] \u2192 [ 5, 2, 10, 15] \u2192 [ 5, 2, 10, 15] \u2192 [ 5, 10, 15] ( because gcd( 5, 2) = 1 ) \u2192 [ 5, 10, 15] \u2192 [ 5, 10, 15] \u2192 . . . The bold numbers represent the two last played songs. Note that after a song is deleted, Arkady forgets that he listened to that and the previous songs. Given the initial playlist, please determine which songs are eventually deleted and the order these songs are deleted.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10 000 ) . Description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of songs. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the genres of the songs. It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, print a single line. First, print a single integer k \u2014 the number of deleted songs. After that print k distinct integers: deleted songs in the order of their deletion.",
    "note": "Explanation of the first test case is given in the statement. In the second test case, the playlist is converted as follows: [ 1, 2, 4, 2, 4, 2] \u2192 [ 1, 2, 4, 2, 4, 2] \u2192 [ 1, 4, 2, 4, 2] ( because gcd( 1, 2) = 1 ) \u2192 [ 1, 4, 2, 4, 2] \u2192 [ 1, 4, 2, 4, 2] \u2192 [ 1, 4, 2, 4, 2] \u2192 [ 1, 4, 2, 4, 2] \u2192 [ 1, 4, 2, 4, 2] \u2192 [ 4, 2, 4, 2] ( because gcd( 2, 1) = 1 ) \u2192 [ 4, 2, 4, 2] \u2192 . . . In the third test case, the playlist is converted as follows: [ 1, 2] \u2192 [ 1, 2] \u2192 [ 1] ( because gcd( 1, 2) = 1 ) \u2192 [ 1] \u2192 [ 1] ( Arkady listened to the same song twice in a row) \u2192 [ ] ( because gcd( 1, 1) = 1 ) . The fourth test case is same as the third after deletion of the second song. In the fifth test case, the same song is listened to over and over again, but since gcd( 2, 2) 1 , it is not deleted.",
    "topics": [
      "data structures",
      "dsu",
      "implementation",
      "shortest paths"
    ],
    "id": "1482D"
  },
  {
    "title": "Sorting Books",
    "url": "https://codeforces.com/problemset/problem/1481/E",
    "history": "One day you wanted to read something, so you went to your bookshelf to grab some book. But when you saw how messy the bookshelf was you decided to clean it up first. There are n books standing in a row on the shelf, the i - th book has color a_ i . You' d like to rearrange the books to make the shelf look beautiful. The shelf is considered beautiful if all books of the same color are next to each other. In one operation you can take one book from any position on the shelf and move it to the right end of the shelf. What is the minimum number of operations you need to make the shelf beautiful?",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 5 \u00b7 10^ 5 ) \u2014 the number of books. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 the book colors.",
    "output": "Output the minimum number of operations to make the shelf beautiful.",
    "note": "In the first example, we have the bookshelf [ 1, 2, 2, 1, 3] and can, for example: take a book on position 4 and move to the right end: we' ll get [ 1, 2, 2, 3, 1] ; take a book on position 1 and move to the right end: we' ll get [ 2, 2, 3, 1, 1] . In the second example, we can move the first book to the end of the bookshelf and get [ 2, 2, 1, 1, 1] .",
    "topics": [
      "data structures",
      "dp",
      "greedy"
    ],
    "id": "1481E"
  },
  {
    "title": "Odd Mineral Resource",
    "url": "https://codeforces.com/problemset/problem/1479/D",
    "history": "In Homer' s country, there are n cities numbered 1 to n and they form a tree. That is, there are ( n- 1) undirected roads between these n cities and every two cities can reach each other through these roads. Homer' s country is an industrial country, and each of the n cities in it contains some mineral resource. The mineral resource of city i is labeled a_ i . Homer is given the plans of the country in the following q years. The plan of the i - th year is described by four parameters u_ i, v_ i, l_ i and r_ i , and he is asked to find any mineral resource c_ i such that the following two conditions hold: mineral resource c_ i appears an odd number of times between city u_ i and city v_ i ; and l_ i \u2264 c_ i \u2264 r_ i . As the best friend of Homer, he asks you for help. For every plan, find any such mineral resource c_ i , or tell him that there doesn' t exist one.",
    "input": "The first line contains two integers n ( 1 \u2264 n \u2264 3 \u00b7 10^ 5 ) and q ( 1 \u2264 q \u2264 3 \u00b7 10^ 5 ) , indicating the number of cities and the number of plans. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) . Then the i - th line of the following ( n- 1) lines contains two integers x_ i and y_ i ( 1 \u2264 x_ i, y_ i \u2264 n ) with x_ i = \u0338 y_ i , indicating that there is a bidirectional road between city x_ i and city y_ i . It is guaranteed that the given roads form a tree. Then the i - th line of the following q lines contains four integers u_ i , v_ i , l_ i , r_ i ( 1 \u2264 u_ i \u2264 n , 1 \u2264 v_ i \u2264 n , 1 \u2264 l_ i \u2264 r_ i \u2264 n ) , indicating the plan of the i - th year.",
    "output": "Print q lines, the i - th of which contains an integer c_ i such that c_ i = - 1 if there is no such mineral resource that meets the required condition; or c_ i is the label of the chosen mineral resource of the i - th year. The chosen mineral resource c_ i should meet those conditions in the i - th year described above in the problem statement. If there are multiple choices of c_ i , you can print any of them.",
    "note": "In the first three queries, there are four cities between city 3 and city 5 , which are city 1 , city 2 , city 3 and city 5 . The mineral resources appear in them are mineral resources 1 ( appears in city 3 and city 5 ) , 2 ( appears in city 2 ) and 3 ( appears in city 1 ) . It is noted that The first query is only to check whether mineral source 1 appears an odd number of times between city 3 and city 5 . The answer is no, because mineral source 1 appears twice ( an even number of times) between city 3 and city 5 . The second and the third queries are the same but they can choose different mineral resources. Both mineral resources 2 and 3 are available.",
    "topics": [
      "binary search",
      "bitmasks",
      "brute force",
      "data structures",
      "probabilities",
      "trees"
    ],
    "id": "1479D"
  },
  {
    "title": "Painting the Array II",
    "url": "https://codeforces.com/problemset/problem/1479/B2",
    "history": "The only difference between the two versions is that this version asks the minimal possible answer. Homer likes arrays a lot. Today he is painting an array a_ 1, a_ 2, . . . , a_ n with two kinds of colors, white and black. A painting assignment for a_ 1, a_ 2, . . . , a_ n is described by an array b_ 1, b_ 2, . . . , b_ n that b_ i indicates the color of a_ i ( 0 for white and 1 for black) . According to a painting assignment b_ 1, b_ 2, . . . , b_ n , the array a is split into two new arrays a^ ( 0) and a^ ( 1) , where a^ ( 0) is the sub- sequence of all white elements in a and a^ ( 1) is the sub- sequence of all black elements in a . For example, if a = [ 1, 2, 3, 4, 5, 6] and b = [ 0, 1, 0, 1, 0, 0] , then a^ ( 0) = [ 1, 3, 5, 6] and a^ ( 1) = [ 2, 4] . The number of segments in an array c_ 1, c_ 2, . . . , c_ k , denoted seg( c) , is the number of elements if we merge all adjacent elements with the same value in c . For example, the number of segments in [ 1, 1, 2, 2, 3, 3, 3, 2] is 4 , because the array will become [ 1, 2, 3, 2] after merging adjacent elements with the same value. Especially, the number of segments in an empty array is 0 . Homer wants to find a painting assignment b , according to which the number of segments in both a^ ( 0) and a^ ( 1) , i. e. seg( a^ ( 0) ) + seg( a^ ( 1) ) , is as small as possible. Find this number.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 10^ 5 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) .",
    "output": "Output a single integer, indicating the minimal possible total number of segments.",
    "note": "In the first example, we can choose a^ ( 0) = [ 1, 1, 2, 2] , a^ ( 1) = [ 2, 3] and seg( a^ ( 0) ) = seg( a^ ( 1) ) = 2 . So the answer is 2+ 2 = 4 . In the second example, we can choose a^ ( 0) = [ 1, 1, 1, 1] , a^ ( 1) = [ 2, 2, 2] and seg( a^ ( 0) ) = seg( a^ ( 1) ) = 1 . So the answer is 1+ 1 = 2 .",
    "topics": [
      "constructive algorithms",
      "data structures",
      "dp",
      "greedy",
      "implementation"
    ],
    "id": "1479B2"
  },
  {
    "title": "Painting the Array I",
    "url": "https://codeforces.com/problemset/problem/1479/B1",
    "history": "The only difference between the two versions is that this version asks the maximal possible answer. Homer likes arrays a lot. Today he is painting an array a_ 1, a_ 2, . . . , a_ n with two kinds of colors, white and black. A painting assignment for a_ 1, a_ 2, . . . , a_ n is described by an array b_ 1, b_ 2, . . . , b_ n that b_ i indicates the color of a_ i ( 0 for white and 1 for black) . According to a painting assignment b_ 1, b_ 2, . . . , b_ n , the array a is split into two new arrays a^ ( 0) and a^ ( 1) , where a^ ( 0) is the sub- sequence of all white elements in a and a^ ( 1) is the sub- sequence of all black elements in a . For example, if a = [ 1, 2, 3, 4, 5, 6] and b = [ 0, 1, 0, 1, 0, 0] , then a^ ( 0) = [ 1, 3, 5, 6] and a^ ( 1) = [ 2, 4] . The number of segments in an array c_ 1, c_ 2, . . . , c_ k , denoted seg( c) , is the number of elements if we merge all adjacent elements with the same value in c . For example, the number of segments in [ 1, 1, 2, 2, 3, 3, 3, 2] is 4 , because the array will become [ 1, 2, 3, 2] after merging adjacent elements with the same value. Especially, the number of segments in an empty array is 0 . Homer wants to find a painting assignment b , according to which the number of segments in both a^ ( 0) and a^ ( 1) , i. e. seg( a^ ( 0) ) + seg( a^ ( 1) ) , is as large as possible. Find this number.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 10^ 5 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) .",
    "output": "Output a single integer, indicating the maximal possible total number of segments.",
    "note": "In the first example, we can choose a^ ( 0) = [ 1, 2, 3, 3] , a^ ( 1) = [ 1, 2, 3] and seg( a^ ( 0) ) = seg( a^ ( 1) ) = 3 . So the answer is 3+ 3 = 6 . In the second example, we can choose a^ ( 0) = [ 1, 2, 3, 4, 5, 6, 7] and a^ ( 1) is empty. We can see that seg( a^ ( 0) ) = 7 and seg( a^ ( 1) ) = 0 . So the answer is 7+ 0 = 7 .",
    "topics": [
      "constructive algorithms",
      "data structures",
      "dp",
      "greedy",
      "implementation"
    ],
    "id": "1479B1"
  },
  {
    "title": "Nezzar and Tournaments",
    "url": "https://codeforces.com/problemset/problem/1477/E",
    "history": "In the famous Oh- Suit- United tournament, two teams are playing against each other for the grand prize of precious pepper points. The first team consists of n players, and the second team consists of m players. Each player has a potential: the potential of the i - th player in the first team is a_ i , and the potential of the i - th player in the second team is b_ i . In the tournament, all players will be on the stage in some order. There will be a scoring device, initially assigned to an integer k , which will be used to value the performance of all players. The scores for all players will be assigned in the order they appear on the stage. Let the potential of the current player be x , and the potential of the previous player be y ( y equals x for the first player) . Then, x- y is added to the value in the scoring device, Afterwards, if the value in the scoring device becomes negative, the value will be reset to 0 . Lastly, the player' s score is assigned to the current value on the scoring device. The score of a team is the sum of the scores of all its members. As an insane fan of the first team, Nezzar desperately wants the biggest win for the first team. He now wonders what is the maximum difference between scores of the first team and the second team. Formally, let the score of the first team be score_ f and the score of the second team be score_ s . Nezzar wants to find the maximum value of score_ f - score_ s over all possible orders of players on the stage. However, situation often changes and there are q events that will happen. There are three types of events: 1 pos x \u2014 change a_ pos to x ; 2 pos x \u2014 change b_ pos to x ; 3 x \u2014 tournament is held with k = x and Nezzar wants you to compute the maximum value of score_ f - score_ s . Can you help Nezzar to answer the queries of the third type?",
    "input": "The first line contains three integers n , m , and q ( 1 \u2264 n, m \u2264 2 \u00b7 10^ 5, 1 \u2264 q \u2264 5 \u00b7 10^ 5 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 6 ) . The third line contains m integers b_ 1, b_ 2, . . . , b_ m ( 0 \u2264 b_ i \u2264 10^ 6 ) . The following q lines contain descriptions of events, described in the statement, each in one of the three possible formats: 1 pos x ( 1 \u2264 pos \u2264 n , 0 \u2264 x \u2264 10^ 6 ) ; 2 pos x ( 1 \u2264 pos \u2264 m , 0 \u2264 x \u2264 10^ 6 ) ; 3 x ( 0 \u2264 x \u2264 10^ 6 ) .",
    "output": "For each query of the third type print the answer to this query.",
    "note": "In the first query of the first test, the tournament is held with k = 5 . It would be optimal to arrange players in such way ( here their potentials are written) : 7 , 3 , 5 , 4 , 6 , 1 , 2 ( underlined numbers are potentials of players that are from the first team) . The individual scores of players, numbered in the order of their appearance, are: max( 5 + ( 7 - 7) , 0) = 5 for the 1 - st player; max( 5 + ( 3 - 7) , 0) = 1 for the 2 - nd player; max( 1 + ( 5 - 3) , 0) = 3 for the 3 - rd player; max( 3 + ( 4 - 5) , 0) = 2 for the 4 - th player; max( 2 + ( 6 - 4) , 0) = 4 for the 5 - th player; max( 4 + ( 1 - 6) , 0) = 0 for the 6 - th player; max( 0 + ( 2 - 1) , 0) = 1 for the 7 - th player. So, score_ f = 5 + 0 + 1 = 6 and score_ s = 1 + 3 + 2 + 4 = 10 . The score difference is 6 - 10 = - 4 . It can be proven, that it is the maximum possible score difference.",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "1477E"
  },
  {
    "title": "Nezzar and Binary String",
    "url": "https://codeforces.com/problemset/problem/1477/B",
    "history": "Nezzar has a binary string s of length n that he wants to share with his best friend, Nanako. Nanako will spend q days inspecting the binary string. At the same time, Nezzar wants to change the string s into string f during these q days, because it looks better. It is known that Nanako loves consistency so much. On the i - th day, Nanako will inspect a segment of string s from position l_ i to position r_ i inclusive. If the segment contains both characters ' 0' and ' 1' , Nanako becomes unhappy and throws away the string. After this inspection, at the i - th night, Nezzar can secretly change strictly less than half of the characters in the segment from l_ i to r_ i inclusive, otherwise the change will be too obvious. Now Nezzar wonders, if it is possible to avoid Nanako being unhappy and at the same time have the string become equal to the string f at the end of these q days and nights.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 5 ) \u2014 the number of test cases. The first line of each test case contains two integers n, q ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 0 \u2264 q \u2264 2 \u00b7 10^ 5 ) . The second line of each test case contains a binary string s of length n . The third line of each test case contains a binary string f of length n . Then q lines follow, i - th of them contains two integers l_ i, r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 n ) \u2014 bounds of the segment, that Nanako will inspect on the i - th day. It is guaranteed that the sum of n for all test cases doesn' t exceed 2 \u00b7 10^ 5 , and the sum of q for all test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print \" YES\" on the single line if it is possible to avoid Nanako being unhappy and have the string f at the end of q days and nights. Otherwise, print \" NO\" . You can print each letter in any case ( upper or lower) .",
    "note": "In the first test case, 00000\u219200011 \u2192 00111 is one of the possible sequences of string changes. In the second test case, it can be shown that it is impossible to have the string f at the end.",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "1477B"
  },
  {
    "title": "Minimum Difference",
    "url": "https://codeforces.com/problemset/problem/1476/G",
    "history": "You are given an integer array a of size n . You have to perform m queries. Each query has one of two types: \" 1 l r k \" \u2014 calculate the minimum value dif such that there are exist k distinct integers x_ 1, x_ 2, . . . , x_ k such that cnt_ i > 0 ( for every i \u2208 [ 1, k] ) and | cnt_ i - cnt_ j| \u2264 dif ( for every i \u2208 [ 1, k] , j \u2208 [ 1, k] ) , where cnt_ i is the number of occurrences of x_ i in the subarray a[ l. . r] . If it is impossible to choose k integers, report it; \" 2 p x \" \u2014 assign a_ p : = x .",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 10^ 5 ) \u2014 the size of the array a and the number of queries. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 5 ) . Next m lines contain queries ( one per line) . Each query has one of two types: \" 1 l r k \" ( 1 \u2264 l \u2264 r \u2264 n; 1 \u2264 k \u2264 10^ 5 ) \" 2 p x \" ( 1 \u2264 p \u2264 n; 1 \u2264 x \u2264 10^ 5 ) . It' s guaranteed that there is at least one query of the first type.",
    "output": "For each query of the first type, print the minimum value of dif that satisfies all required conditions, or - 1 if it is impossible to choose k distinct integers.",
    "note": "",
    "topics": [
      "data structures",
      "hashing",
      "sortings",
      "two pointers"
    ],
    "id": "1476G"
  },
  {
    "title": "Lanterns",
    "url": "https://codeforces.com/problemset/problem/1476/F",
    "history": "There are n lanterns in a row. The lantern i is placed in position i and has power equal to p_ i . Each lantern can be directed to illuminate either some lanterns to the left or some lanterns to the right. If the i - th lantern is turned to the left, it illuminates all such lanterns j that j \u2208 [ i - p_ i, i - 1] . Similarly, if it is turned to the right, it illuminates all such lanterns j that j \u2208 [ i + 1, i + p_ i] . Your goal is to choose a direction for each lantern so each lantern is illuminated by at least one other lantern, or report that it is impossible.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10000 ) \u2014 the number of test cases. Each test case consists of two lines. The first line contains one integer n ( 2 \u2264 n \u2264 3 \u00b7 10^ 5 ) \u2014 the number of lanterns. The second line contains n integers p_ 1, p_ 2, . . . , p_ n ( 0 \u2264 p_ i \u2264 n ) \u2014 the power of the i - th lantern. The sum of n over all test cases does not exceed 3 \u00b7 10^ 5 .",
    "output": "For each test case, print the answer as follows: If it is possible to direct all lanterns so that each lantern is illuminated, print YES in the first line and a string of n characters L and/ or R ( the i - th character is L if the i - th lantern is turned to the left, otherwise this character is R) in the second line. If there are multiple answers, you may print any of them. If there is no answer, simply print NO for that test case.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "dp"
    ],
    "id": "1476F"
  },
  {
    "title": "Pattern Matching",
    "url": "https://codeforces.com/problemset/problem/1476/E",
    "history": "You are given n patterns p_ 1, p_ 2, . . . , p_ n and m strings s_ 1, s_ 2, . . . , s_ m . Each pattern p_ i consists of k characters that are either lowercase Latin letters or wildcard characters ( denoted by underscores) . All patterns are pairwise distinct. Each string s_ j consists of k lowercase Latin letters. A string a matches a pattern b if for each i from 1 to k either b_ i is a wildcard character or b_ i= a_ i . You are asked to rearrange the patterns in such a way that the first pattern the j - th string matches is p[ mt_ j] . You are allowed to leave the order of the patterns unchanged. Can you perform such a rearrangement? If you can, then print any valid order.",
    "input": "The first line contains three integers n , m and k ( 1 \u2264 n, m \u2264 10^ 5 , 1 \u2264 k \u2264 4 ) \u2014 the number of patterns, the number of strings and the length of each pattern and string. Each of the next n lines contains a pattern \u2014 k characters that are either lowercase Latin letters or underscores. All patterns are pairwise distinct. Each of the next m lines contains a string \u2014 k lowercase Latin letters, and an integer mt ( 1 \u2264 mt \u2264 n ) \u2014 the index of the first pattern the corresponding string should match.",
    "output": "Print \" NO\" if there is no way to rearrange the patterns in such a way that the first pattern that the j - th string matches is p[ mt_ j] . Otherwise, print \" YES\" in the first line. The second line should contain n distinct integers from 1 to n \u2014 the order of the patterns. If there are multiple answers, print any of them.",
    "note": "The order of patterns after the rearrangement in the first example is the following: aaaa _ _ b_ ab_ _ _ bcd _ b_ d Thus, the first string matches patterns ab_ _ , _ bcd, _ b_ d in that order, the first of them is ab_ _ , that is indeed p[ 4] . The second string matches _ _ b_ and ab_ _ , the first of them is _ _ b_ , that is p[ 2] . The last string matches _ bcd and _ b_ d, the first of them is _ bcd, that is p[ 5] . The answer to that test is not unique, other valid orders also exist. In the second example cba doesn' t match _ _ c, thus, no valid order exists. In the third example the order ( a_ , _ b) makes both strings match pattern 1 first and the order ( _ b, a_ ) makes both strings match pattern 2 first. Thus, there is no order that produces the result 1 and 2 .",
    "topics": [
      "bitmasks",
      "data structures",
      "dfs and similar",
      "graphs",
      "hashing",
      "sortings",
      "strings"
    ],
    "id": "1476E"
  },
  {
    "title": "Cleaning",
    "url": "https://codeforces.com/problemset/problem/1474/D",
    "history": "During cleaning the coast, Alice found n piles of stones. The i - th pile has a_ i stones. Piles i and i + 1 are neighbouring for all 1 \u2264 i \u2264 n - 1 . If pile i becomes empty, piles i - 1 and i + 1 doesn' t become neighbouring. Alice is too lazy to remove these stones, so she asked you to take this duty. She allowed you to do only the following operation: Select two neighboring piles and, if both of them are not empty, remove one stone from each of them. Alice understands that sometimes it' s impossible to remove all stones with the given operation, so she allowed you to use the following superability: Before the start of cleaning, you can select two neighboring piles and swap them. Determine, if it is possible to remove all stones using the superability not more than once.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains the single integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of piles. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the number of stones in each pile. It is guaranteed that the total sum of n over all test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print YES or NO \u2014 is it possible to remove all stones using the superability not more than once or not.",
    "note": "In the first test case, you can remove all stones without using a superability: [ 1, 2, 1] \u2192 [ 1, 1, 0] \u2192 [ 0, 0, 0] . In the second test case, you can apply superability to the second and the third piles and then act like in the first testcase. In the third test case, you can apply superability to the fourth and the fifth piles, thus getting a = [ 2, 2, 2, 3, 1] . In the fourth test case, you can apply superability to the first and the second piles, thus getting a = [ 1900, 2100, 1600, 3000, 1600] .",
    "topics": [
      "data structures",
      "dp",
      "greedy",
      "math"
    ],
    "id": "1474D"
  },
  {
    "title": "Array Destruction",
    "url": "https://codeforces.com/problemset/problem/1474/C",
    "history": "You found a useless array a of 2n positive integers. You have realized that you actually don' t need this array, so you decided to throw out all elements of a . It could have been an easy task, but it turned out that you should follow some rules: In the beginning, you select any positive integer x . Then you do the following operation n times: select two elements of array with sum equals x ; remove them from a and replace x with maximum of that two numbers. For example, if initially a = [ 3, 5, 1, 2] , you can select x = 6 . Then you can select the second and the third elements of a with sum 5 + 1 = 6 and throw them out. After this operation, x equals 5 and there are two elements in array: 3 and 2 . You can throw them out on the next operation. Note, that you choose x before the start and can' t change it as you want between the operations. Determine how should you behave to throw out all elements of a .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains the single integer n ( 1 \u2264 n \u2264 1000 ) . The second line of each test case contains 2n integers a_ 1, a_ 2, . . . , a_ 2n ( 1 \u2264 a_ i \u2264 10^ 6 ) \u2014 the initial array a . It is guaranteed that the total sum of n over all test cases doesn' t exceed 1000 .",
    "output": "For each test case in the first line print YES if it is possible to throw out all elements of the array and NO otherwise. If it is possible to throw out all elements, print the initial value of x you' ve chosen. Print description of n operations next. For each operation, print the pair of integers you remove.",
    "note": "The first test case was described in the statement. In the second and third test cases, we can show that it is impossible to throw out all elements of array a .",
    "topics": [
      "brute force",
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "1474C"
  },
  {
    "title": "Program",
    "url": "https://codeforces.com/problemset/problem/1473/D",
    "history": "You are given a program that consists of n instructions. Initially a single variable x is assigned to 0 . Afterwards, the instructions are of two types: increase x by 1 ; decrease x by 1 . You are given m queries of the following format: query l r \u2014 how many distinct values is x assigned to if all the instructions between the l - th one and the r - th one inclusive are ignored and the rest are executed without changing the order?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of testcases. Then the description of t testcases follows. The first line of each testcase contains two integers n and m ( 1 \u2264 n, m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of instructions in the program and the number of queries. The second line of each testcase contains a program \u2014 a string of n characters: each character is either ' + ' or ' - ' \u2014 increment and decrement instruction, respectively. Each of the next m lines contains two integers l and r ( 1 \u2264 l \u2264 r \u2264 n ) \u2014 the description of the query. The sum of n over all testcases doesn' t exceed 2 \u00b7 10^ 5 . The sum of m over all testcases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each testcase print m integers \u2014 for each query l , r print the number of distinct values variable x is assigned to if all the instructions between the l - th one and the r - th one inclusive are ignored and the rest are executed without changing the order.",
    "note": "The instructions that remain for each query of the first testcase are: empty program \u2014 x was only equal to 0 ; \" - \" \u2014 x had values 0 and - 1 ; \" \u2014+ \" \u2014 x had values 0 , - 1 , - 2 , - 3 , - 2 \u2014 there are 4 distinct values among them; \" + \u2013+ \u2013+ \" \u2014 the distinct values are 1 , 0 , - 1 , - 2 .",
    "topics": [
      "data structures",
      "dp",
      "implementation",
      "strings"
    ],
    "id": "1473D"
  },
  {
    "title": "Correct Placement",
    "url": "https://codeforces.com/problemset/problem/1472/E",
    "history": "Polycarp has invited n friends to celebrate the New Year. During the celebration, he decided to take a group photo of all his friends. Each friend can stand or lie on the side. Each friend is characterized by two values h_ i ( their height) and w_ i ( their width) . On the photo the i - th friend will occupy a rectangle h_ i \u00d7 w_ i ( if they are standing) or w_ i \u00d7 h_ i ( if they are lying on the side) . The j - th friend can be placed in front of the i - th friend on the photo if his rectangle is lower and narrower than the rectangle of the i - th friend. Formally, at least one of the following conditions must be fulfilled: h_ j < h_ i and w_ j < w_ i ( both friends are standing or both are lying) ; w_ j < h_ i and h_ j < w_ i ( one of the friends is standing and the other is lying) . For example, if n = 3 , h= [ 3, 5, 3] and w= [ 4, 4, 3] , then: the first friend can be placed in front of the second: w_ 1 < h_ 2 and h_ 1 < w_ 2 ( one of the them is standing and the other one is lying) ; the third friend can be placed in front of the second: h_ 3 < h_ 2 and w_ 3 < w_ 2 ( both friends are standing or both are lying) . In other cases, the person in the foreground will overlap the person in the background. Help Polycarp for each i find any j , such that the j - th friend can be located in front of the i - th friend ( i. e. at least one of the conditions above is fulfilled) . Please note that you do not need to find the arrangement of all people for a group photo. You just need to find for each friend i any other friend j who can be located in front of him. Think about it as you need to solve n separate independent subproblems.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of friends. This is followed by n lines, each of which contains a description of the corresponding friend. Each friend is described by two integers h_ i and w_ i ( 1 \u2264 h_ i, w_ i \u2264 10^ 9 ) \u2014 height and width of the i - th friend, respectively. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case output n integers on a separate line, where the i - th number is the index of a friend that can be placed in front of the i - th. If there is no such friend, then output - 1. If there are several answers, output any.",
    "note": "The first test case is described in the statement. In the third test case, the following answers are also correct: [ - 1, - 1, 1, 2] ; [ - 1, - 1, 1, 1] ; [ - 1, - 1, 2, 1] .",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "sortings",
      "two pointers"
    ],
    "id": "1472E"
  },
  {
    "title": "Strange Permutation",
    "url": "https://codeforces.com/problemset/problem/1470/E",
    "history": "Alice had a permutation p_ 1, p_ 2, . . . , p_ n . Unfortunately, the permutation looked very boring, so she decided to change it and choose some non- overlapping subranges of this permutation and reverse them. The cost of reversing a single subrange [ l, r] ( elements from position l to position r , inclusive) is equal to r - l , and the cost of the operation is the sum of costs of reversing individual subranges. Alice had an integer c in mind, so she only considered operations that cost no more than c . Then she got really bored, and decided to write down all the permutations that she could possibly obtain by performing exactly one operation on the initial permutation. Of course, Alice is very smart, so she wrote down each obtainable permutation exactly once ( no matter in how many ways it can be obtained) , and of course the list was sorted lexicographically. Now Bob would like to ask Alice some questions about her list. Each question is in the following form: what is the i - th number in the j - th permutation that Alice wrote down? Since Alice is too bored to answer these questions, she asked you to help her out.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 30 ) \u2014 the number of test cases. The first line of each test case contains three integers n , c , q ( 1 \u2264 n \u2264 3 \u00b7 10^ 4 , 1 \u2264 c \u2264 4 , 1 \u2264 q \u2264 3 \u00b7 10^ 5 ) \u2014 the length of the permutation, the maximum cost of the operation, and the number of queries. The next line of each test case contains n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n , p_ i = \u0338 p_ j if i = \u0338 j ) , describing the initial permutation. The following q lines describe the queries. Each of them contains two integers i and j ( 1 \u2264 i \u2264 n , 1 \u2264 j \u2264 10^ 18 ) , denoting parameters of this query. It is guaranteed that the sum of values n over all test cases does not exceed 3 \u00b7 10^ 5 , and the sum of values q over all test cases does not exceed 3 \u00b7 10^ 5 .",
    "output": "For each query output the answer for this query, or - 1 if j - th permutation does not exist in her list.",
    "note": "In the first test case, Alice wrote down the following permutations: [ 1, 2, 3] , [ 1, 3, 2] , [ 2, 1, 3] . Note that, for a permutation [ 3, 2, 1] Alice would have to reverse the whole array, and it would cost her 2 , which is greater than the specified value c= 1 . The other two permutations can not be obtained by performing exactly one operation described in the problem statement.",
    "topics": [
      "binary search",
      "combinatorics",
      "data structures",
      "dp",
      "graphs",
      "implementation",
      "two pointers"
    ],
    "id": "1470E"
  },
  {
    "title": "Power Sockets",
    "url": "https://codeforces.com/problemset/problem/1469/F",
    "history": "/ / We decided to drop the legend about the power sockets but feel free to come up with your own : ^ ) Define a chain: a chain of length 1 is a single vertex; a chain of length x is a chain of length x- 1 with a new vertex connected to the end of it with a single edge. You are given n chains of lengths l_ 1, l_ 2, . . . , l_ n . You plan to build a tree using some of them. Each vertex of the tree is either white or black. The tree initially only has a white root vertex. All chains initially consist only of white vertices. You can take one of the chains and connect any of its vertices to any white vertex of the tree with an edge. The chain becomes part of the tree. Both endpoints of this edge become black. Each chain can be used no more than once. Some chains can be left unused. The distance between two vertices of the tree is the number of edges on the shortest path between them. If there is at least k white vertices in the resulting tree, then the value of the tree is the distance between the root and the k - th closest white vertex. What' s the minimum value of the tree you can obtain? If there is no way to build a tree with at least k white vertices, then print - 1.",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 2 \u2264 k \u2264 10^ 9 ) \u2014 the number of chains and the minimum number of white vertices a tree should have to have a value. The second line contains n integers l_ 1, l_ 2, . . . , l_ n ( 3 \u2264 l_ i \u2264 2 \u00b7 10^ 5 ) \u2014 the lengths of the chains.",
    "output": "Print a single integer. If there is no way to build a tree with at least k white vertices, then print - 1. Otherwise, print the minimum value the tree can have.",
    "note": "You are allowed to not use all the chains, so it' s optimal to only use chain of length 4 in the second example.",
    "topics": [
      "binary search",
      "data structures",
      "greedy"
    ],
    "id": "1469F"
  },
  {
    "title": "Similar Sets",
    "url": "https://codeforces.com/problemset/problem/1468/M",
    "history": "You are given n sets of integers. The i - th set contains k_ i integers. Two sets are called similar if they share at least two common elements, i. e. there exist two integers x and y such that x y , and they both belong to each of the two sets. Your task is to find two similar sets among the given ones, or report that there is no such pair of sets.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 50000 ) \u2014 the number of test cases. Then t test cases follow. The first line of each test case contains a single integer n ( 2 \u2264 n \u2264 10^ 5 ) the number of given sets. The following n lines describe the sets. The i - th line starts with an integer k_ i ( 2 \u2264 k_ i \u2264 10^ 5 ) \u2014 the number of integers in the i - th set. Then k_ i integers a_ i, 1 , a_ i, 2 , . . . , a_ i, k_ i ( 1 \u2264 a_ i, j\u2264 10^ 9 ) follow \u2014 the elements of the i - th set. It is guaranteed that all elements in each set are different. The total number of elements in all sets in all test cases is not greater than 2\u00b7 10^ 5 .",
    "output": "For each test case, print the answer on a single line. If there is no pair of similar sets, print - 1. Otherwise, print two different integers \u2014 the indices of the similar sets. The sets are numbered from 1 to n in the order they are given in the input. If there are multiple answers, print any of them.",
    "note": "",
    "topics": [
      "data structures",
      "graphs",
      "implementation"
    ],
    "id": "1468M"
  },
  {
    "title": "Berpizza",
    "url": "https://codeforces.com/problemset/problem/1468/C",
    "history": "Monocarp and Polycarp are working as waiters in Berpizza, a pizzeria located near the center of Bertown. Since they are waiters, their job is to serve the customers, but they choose whom they serve first differently. At the start of the working day, there are no customers at the Berpizza. They come there one by one. When a customer comes into the pizzeria, she sits and waits for Monocarp or Polycarp to serve her. Monocarp has been working in Berpizza for just two weeks, so whenever he serves a customer, he simply chooses the one who came to Berpizza first, and serves that customer. On the other hand, Polycarp is an experienced waiter at Berpizza, and he knows which customers are going to spend a lot of money at the pizzeria ( and which aren' t) as soon as he sees them. For each customer, Polycarp estimates the amount of money this customer can spend, and when he serves a customer, he chooses the one that is expected to leave the most money at Berpizza ( in case there are several such customers, he chooses the one who came first among them) . Obviously, no customer can be served twice, so Monocarp and Polycarp choose which customer to serve only among those who haven' t been served yet. When the number of customers gets really high, it becomes difficult for both Monocarp and Polycarp to choose the customer they are going to serve. Your task is to write a program that makes these choices for them. Formally, your program should be able to process three types of queries: 1 m \u2014 a customer comes to Berpizza, and Polycarp estimates the amount of money that they will spend as m ; 2 \u2014 Monocarp serves a customer which came to the pizzeria first; 3 \u2014 Polycarp serves a customer which is expected to spend the largest amount of money at the pizzeria ( if there are several such customers, the one that came to the pizzeria first is chosen) . For each query of types 2 and 3 , report the number of the customer who was served ( the customers are numbered in the order they come to the pizzeria, starting from 1 ) .",
    "input": "The first line contains one integer q ( 2 \u2264 q \u2264 5 \u00b7 10^ 5 ) \u2014 the number of queries. Then q lines follow, each describing a query in one of the following formats: 1 m ( 1 \u2264 m \u2264 5 \u00b7 10^ 5 ) \u2014 a customer comes to Berpizza, and Polycarp estimates the amount of money that they will spend as m ; 2 \u2014 Monocarp serves a customer which came to the pizzeria first; 3 \u2014 Polycarp serves a customer which is expected to spend the largest amount of money at the pizzeria ( if there are multiple such customers, the one that came to the pizzeria first is chosen) . Queries of type 2 and 3 are asked only when there exists at least one customer that hasn' t been served yet. There is at least one query of type 2 or 3 in the input.",
    "output": "For each query of type 2 or 3 , print one integer \u2014 the number of the customer that has been served in that event. The customers are numbered in the order in which they come to the pizzeria, starting from 1 .",
    "note": "",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "1468C"
  },
  {
    "title": "Bakery",
    "url": "https://codeforces.com/problemset/problem/1468/B",
    "history": "Monocarp would like to open a bakery in his local area. But, at first, he should figure out whether he can compete with other shops. Monocarp plans that the bakery will work for n days. On the i - th day, a_ i loaves of bread will be baked in the morning before the opening. At the end of the n - th day, Monocarp will sell all the remaining bread that wasn' t sold earlier with a huge discount. Because of how bread is stored, the bakery seller sells the bread in the following order: firstly, he sells the loaves that were baked that morning; secondly, he sells the loaves that were baked the day before and weren' t sold yet; then the loaves that were baked two days before and weren' t sold yet, and so on. That' s why some customers may buy a rather stale bread and will definitely spread negative rumors. Let' s define loaf spoilage as the difference between the day it was baked and the day it was sold. Then the unattractiveness of the bakery will be equal to the maximum spoilage among all loaves of bread baked at the bakery. Suppose Monocarp' s local area has consumer demand equal to k , it means that each day k customers will come to the bakery and each of them will ask for one loaf of bread ( the loaves are sold according to the aforementioned order) . If there is no bread left, then the person just doesn' t buy anything. During the last day sale, all the remaining loaves will be sold ( and they will still count in the calculation of the unattractiveness) . Monocarp analyzed his competitors' data and came up with m possible consumer demand values k_ 1, k_ 2, . . . , k_ m , and now he' d like to calculate the unattractiveness of the bakery for each value of demand. Can you help him?",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ; 1 \u2264 m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of days the bakery is open and the number of possible values of consumer demand. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the number of bread loaves that will be baked each day. The third line contains m integers k_ 1, k_ 2, . . . , k_ m ( 1 \u2264 k_ 1 < k_ 2 < . . . < k_ m \u2264 10^ 9 ) \u2014 the possible consumer demand values in the ascending order.",
    "output": "Print m integers: for each consumer demand, print the unattractiveness of the bakery.",
    "note": "In the first example, let' s describe what happens for couple consumer demands: If consumer demand is equal to 1 : at day 1 : 5 loaves are baked and only 1 is sold with spoilage equal to 1 - 1 = 0 ; at day 2 : 4 loaves are left and 2 more are baked. Only 1 loaf was sold and it was the loaf baked today with spoilage 2 - 2 = 0 ; at day 3 : 4 loaves from the first day and 1 loaf from the second day left. One more loaf was baked and was sold this day with spoilage 3 - 3 = 0 ; at day 4 : 4 loaves from the first day and 1 loaf from the second day left. 3 more loaves were baked and one of them was sold this day with spoilage 4 - 4 = 0 ; at day 5 : 4 loaves from the first day, 1 loaf from the second day and 2 loaves from the fourth day left. 7 more loaves were baked and, since it' s the last day, all 14 loaves were sold. 4 loaves from the first day have the maximum spoilage equal to 5 - 1 = 4 . In total, the unattractiveness of the bakery will be equal to 4 . If consumer demand is equal to 10 then all baked bread will be sold in the day it was baked and will have spoilage equal to 0 .",
    "topics": [
      "data structures",
      "dsu"
    ],
    "id": "1468B"
  },
  {
    "title": "LaIS",
    "url": "https://codeforces.com/problemset/problem/1468/A",
    "history": "Let' s call a sequence b_ 1, b_ 2, b_ 3 . . . , b_ k - 1, b_ k almost increasing if min( b_ 1, b_ 2) \u2264min( b_ 2, b_ 3) \u2264. . . \u2264min( b_ k - 1, b_ k) . In particular, any sequence with no more than two elements is almost increasing. You are given a sequence of integers a_ 1, a_ 2, . . . , a_ n . Calculate the length of its longest almost increasing subsequence. You' ll be given t test cases. Solve each test case independently. Reminder: a subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of independent test cases. The first line of each test case contains a single integer n ( 2 \u2264 n \u2264 5 \u00b7 10^ 5 ) \u2014 the length of the sequence a . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 the sequence itself. It' s guaranteed that the total sum of n over all test cases doesn' t exceed 5 \u00b7 10^ 5 .",
    "output": "For each test case, print one integer \u2014 the length of the longest almost increasing subsequence.",
    "note": "In the first test case, one of the optimal answers is subsequence 1, 2, 7, 2, 2, 3 . In the second and third test cases, the whole sequence a is already almost increasing.",
    "topics": [
      "data structures",
      "dp",
      "greedy"
    ],
    "id": "1468A"
  },
  {
    "title": "Distinctive Roots in a Tree",
    "url": "https://codeforces.com/problemset/problem/1467/E",
    "history": "You are given a tree with n vertices. Each vertex i has a value a_ i associated with it. Let us root the tree at some vertex v . The vertex v is called a distinctive root if the following holds: in all paths that start at v and end at some other node, all the values encountered are distinct. Two different paths may have values in common but a single path must have all distinct values. Find the number of distinctive roots in the tree.",
    "input": "The first line of the input contains a single integer n ( 1 \u2264 n \u2264 2\u00b710^ 5 ) \u2014 the number of vertices in the tree. The next line contains n space- separated integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) . The following n- 1 lines each contain two space- separated integers u and v ( 1 \u2264 u , v \u2264 n ) , denoting an edge from u to v . It is guaranteed that the edges form a tree.",
    "output": "Print a single integer \u2014 the number of distinctive roots in the tree.",
    "note": "In the first example, 1 , 2 and 5 are distinctive roots.",
    "topics": [
      "data structures",
      "dfs and similar",
      "dp",
      "trees"
    ],
    "id": "1467E"
  },
  {
    "title": "The Riddle of the Sphinx",
    "url": "https://codeforces.com/problemset/problem/1466/I",
    "history": "What walks on four feet in the morning, two in the afternoon, and three at night? This is an interactive problem. This problem doesn' t support hacks. Sphinx' s duty is to guard the city of Thebes by making sure that no unworthy traveler crosses its gates. Only the ones who answer her riddle timely and correctly ( or get an acc for short) are allowed to pass. As of those who fail, no one heard of them ever again. . . So you don' t have a choice but to solve the riddle. Sphinx has an array a_ 1, a_ 2, . . . , a_ n of nonnegative integers strictly smaller than 2^ b and asked you to find the maximum value among its elements. Of course, she will not show you the array, but she will give you n and b . As it is impossible to answer this riddle blindly, you can ask her some questions. For given i, y , she' ll answer you whether a_ i is bigger than y . As sphinxes are not very patient, you can ask at most 3 \u00b7 ( n + b) such questions. Although cunning, sphinxes are honest. Even though the array can change between your queries, answers to the previously asked questions will remain valid. InteractionIn each round your program must output a single line with an integer i ( 0 \u2264 i \u2264 n ) and a binary string of length exactly b denoting the binary representation of y ( most significant bit first) . If i > 0 , this line encodes the question: Is a_ i bigger than y ? . There should be at most 3 \u00b7 ( n+ b) such lines; after each of them, the interactor will print yes or no in a single line. If i = 0 , this is the last round of interaction, after which your program should terminate, and y should be the maximal value among the elements of Sphinx' s array. Note that this round does not count to the query limit. Note that the interactor is adaptive. After printing a query, do not forget to output the end of the line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use: fflush( stdout) or cout. flush( ) in C+ + ; System. out. flush( ) in Java; flush( output) in Pascal; stdout. flush( ) in Python; see the documentation for other languages. If your solution does not correctly follow the interaction guideline above, it may receive an arbitrary verdict. Otherwise, your program will receive the Wrong Answer judgment if it reports the wrong maximum.",
    "input": "The first line contains two integers n and b ( 1 \u2264 n, b \u2264 200 ) . The remaining parts of the input will be given throughout the interaction process.",
    "output": "",
    "note": "In all examples, the sequence is fixed beforehand. In the first example, the sequence is 2, 1, 4, 0, 6 . In the second example, the sequence is 0, 0, 0, 0 . In the third example, the sequence is 0 . Note that if the interactor was adaptive, then the interaction in the first and the third example would not be sufficient to return the correct value of maximum.",
    "topics": [
      "binary search",
      "data structures",
      "data structures",
      "interactive"
    ],
    "id": "1466I"
  },
  {
    "title": "13th Labour of Heracles",
    "url": "https://codeforces.com/problemset/problem/1466/D",
    "history": "You' ve probably heard about the twelve labors of Heracles, but do you have any idea about the thirteenth? It is commonly assumed it took him a dozen years to complete the twelve feats, so on average, a year to accomplish every one of them. As time flows faster these days, you have minutes rather than months to solve this task. But will you manage? In this problem, you are given a tree with n weighted vertices. A tree is a connected graph with n - 1 edges. Let us define its k - coloring as an assignment of k colors to the edges so that each edge has exactly one color assigned to it. Note that you don' t have to use all k colors. A subgraph of color x consists of these edges from the original tree, which are assigned color x , and only those vertices that are adjacent to at least one such edge. So there are no vertices of degree 0 in such a subgraph. The value of a connected component is the sum of weights of its vertices. Let us define the value of a subgraph as a maximum of values of its connected components. We will assume that the value of an empty subgraph equals 0 . There is also a value of a k - coloring, which equals the sum of values of subgraphs of all k colors. Given a tree, for each k from 1 to n - 1 calculate the maximal value of a k - coloring.",
    "input": "In the first line of input, there is a single integer t ( 1 \u2264 t \u2264 10^ 5 ) denoting the number of test cases. Then t test cases follow. First line of each test case contains a single integer n ( 2 \u2264 n \u2264 10^ 5 ) . The second line consists of n integers w_ 1, w_ 2, . . . , w_ n ( 0 \u2264 w_ i \u2264 10^ 9 ) , w_ i equals the weight of i - th vertex. In each of the following n - 1 lines, there are two integers u , v ( 1 \u2264 u, v \u2264 n ) describing an edge between vertices u and v . It is guaranteed that these edges form a tree. The sum of n in all test cases will not exceed 2 \u00b7 10^ 5 .",
    "output": "For every test case, your program should print one line containing n - 1 integers separated with a single space. The i - th number in a line should be the maximal value of a i - coloring of the tree.",
    "note": "The optimal k - colorings from the first test case are the following: In the 1 - coloring all edges are given the same color. The subgraph of color 1 contains all the edges and vertices from the original graph. Hence, its value equals 3 + 5 + 4 + 6 = 18 . In an optimal 2 - coloring edges ( 2, 1) and ( 3, 1) are assigned color 1 . Edge ( 4, 3) is of color 2 . Hence the subgraph of color 1 consists of a single connected component ( vertices 1, 2, 3 ) and its value equals 3 + 5 + 4 = 12 . The subgraph of color 2 contains two vertices and one edge. Its value equals 4 + 6 = 10 . In an optimal 3 - coloring all edges are assigned distinct colors. Hence subgraphs of each color consist of a single edge. They values are as follows: 3 + 4 = 7 , 4 + 6 = 10 , 3 + 5 = 8 .",
    "topics": [
      "data structures",
      "greedy",
      "sortings",
      "trees"
    ],
    "id": "1466D"
  },
  {
    "title": "My Beautiful Madness",
    "url": "https://codeforces.com/problemset/problem/1464/F",
    "history": "You are given a tree. We will consider simple paths on it. Let' s denote path between vertices a and b as ( a, b) . Let d - neighborhood of a path be a set of vertices of the tree located at a distance \u2264 d from at least one vertex of the path ( for example, 0 - neighborhood of a path is a path itself) . Let P be a multiset of the tree paths. Initially, it is empty. You are asked to maintain the following queries: 1 u v \u2014 add path ( u, v) into P ( 1 \u2264 u, v \u2264 n ) . 2 u v \u2014 delete path ( u, v) from P ( 1 \u2264 u, v \u2264 n ) . Notice that ( u, v) equals to ( v, u) . For example, if P = { ( 1, 2) , ( 1, 2) } , than after query 2 2 1 , P = { ( 1, 2) } . 3 d \u2014 if intersection of all d - neighborhoods of paths from P is not empty output \" Yes\" , otherwise output \" No\" ( 0 \u2264 d \u2264 n - 1 ) .",
    "input": "The first line contains two integers n and q \u2014 the number of vertices in the tree and the number of queries, accordingly ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 2 \u2264 q \u2264 2 \u00b7 10^ 5 ) . Each of the following n - 1 lines contains two integers x_ i and y_ i \u2014 indices of vertices connected by i - th edge ( 1 \u2264 x_ i, y_ i \u2264 n ) . The following q lines contain queries in the format described in the statement. It' s guaranteed that: for a query 2 u v , path ( u, v) ( or ( v, u) ) is present in P , for a query 3 d , P = \u0338\u2205 , there is at least one query of the third type.",
    "output": "For each query of the third type output answer on a new line.",
    "note": "",
    "topics": [
      "data structures",
      "trees"
    ],
    "id": "1464F"
  },
  {
    "title": "The Treasure of The Segments",
    "url": "https://codeforces.com/problemset/problem/1462/F",
    "history": "Polycarp found n segments on the street. A segment with the index i is described by two integers l_ i and r_ i \u2014 coordinates of the beginning and end of the segment, respectively. Polycarp realized that he didn' t need all the segments, so he wanted to delete some of them. Polycarp believes that a set of k segments is good if there is a segment [ l_ i, r_ i] ( 1 \u2264 i \u2264 k ) from the set, such that it intersects every segment from the set ( the intersection must be a point or segment) . For example, a set of 3 segments [ [ 1, 4] , [ 2, 3] , [ 3, 6] ] is good, since the segment [ 2, 3] intersects each segment from the set. Set of 4 segments [ [ 1, 2] , [ 2, 3] , [ 3, 5] , [ 4, 5] ] is not good. Polycarp wonders, what is the minimum number of segments he has to delete so that the remaining segments form a good set?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 5 ) \u2014 number of test cases. Then t test cases follow. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of segments. This is followed by n lines describing the segments. Each segment is described by two integers l and r ( 1 \u2264 l \u2264 r \u2264 10^ 9 ) \u2014 coordinates of the beginning and end of the segment, respectively. It is guaranteed that the sum of n for all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output a single integer \u2014 the minimum number of segments that need to be deleted in order for the set of remaining segments to become good.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "greedy"
    ],
    "id": "1462F"
  },
  {
    "title": "Divide and Summarize",
    "url": "https://codeforces.com/problemset/problem/1461/D",
    "history": "Mike received an array a of length n as a birthday present and decided to test how pretty it is. An array would pass the i - th prettiness test if there is a way to get an array with a sum of elements totaling s_ i , using some number ( possibly zero) of slicing operations. An array slicing operation is conducted in the following way: assume mid = \u230amax( array) + min( array) / 2\u230b , where max and min \u2014 are functions that find the maximum and the minimum array elements. In other words, mid is the sum of the maximum and the minimum element of array divided by 2 rounded down. Then the array is split into two parts left and right . The left array contains all elements which are less than or equal mid , and the right array contains all elements which are greater than mid . Elements in left and right keep their relative order from array . During the third step we choose which of the left and right arrays we want to keep. The chosen array replaces the current one and the other is permanently discarded. You need to help Mike find out the results of q prettiness tests. Note that you test the prettiness of the array a , so you start each prettiness test with the primordial ( initial) array a . Thus, the first slice ( if required) is always performed on the array a .",
    "input": "Each test contains one or more test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 100 ) . The first line of each test case contains two integers n and q ( 1 \u2264 n, q \u2264 10^ 5) \u2014 the length of the array a and the total number of prettiness tests. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 6) \u2014 the contents of the array a . Next q lines of each test case contain a single integer s_ i ( 1 \u2264 s_ i \u2264 10^ 9) \u2014 the sum of elements which Mike wants to get in the i - th test. It is guaranteed that the sum of n and the sum of q does not exceed 10^ 5 ( \u2211 n, \u2211 q \u2264 10^ 5 ) .",
    "output": "Print q lines, each containing either a \" Yes\" if the corresponding prettiness test is passed and \" No\" in the opposite case.",
    "note": "Explanation of the first test case: We can get an array with the sum s_ 1 = 1 in the following way: 1. 1 a = [ 1, 2, 3, 4, 5] , mid = 1+ 5/ 2 = 3 , left = [ 1, 2, 3] , right = [ 4, 5] . We choose to keep the left array. 1. 2 a = [ 1, 2, 3] , mid = 1+ 3/ 2 = 2 , left = [ 1, 2] , right = [ 3] . We choose to keep the left array. 1. 3 a = [ 1, 2] , mid = 1+ 2/ 2 = 1 , left = [ 1] , right = [ 2] . We choose to keep the left array with the sum equalling 1 . It can be demonstrated that an array with the sum s_ 2 = 8 is impossible to generate. An array with the sum s_ 3 = 9 can be generated in the following way: 3. 1 a = [ 1, 2, 3, 4, 5] , mid = 1+ 5/ 2 = 3 , left = [ 1, 2, 3] , right = [ 4, 5] . We choose to keep the right array with the sum equalling 9 . It can be demonstrated that an array with the sum s_ 4 = 12 is impossible to generate. We can get an array with the sum s_ 5 = 6 in the following way: 5. 1 a = [ 1, 2, 3, 4, 5] , mid = 1+ 5/ 2 = 3 , left = [ 1, 2, 3] , right = [ 4, 5] . We choose to keep the left with the sum equalling 6 . Explanation of the second test case: It can be demonstrated that an array with the sum s_ 1 = 1 is imposssible to generate. We can get an array with the sum s_ 2 = 2 in the following way: 2. 1 a = [ 3, 1, 3, 1, 3] , mid = 1+ 3/ 2 = 2 , left = [ 1, 1] , right = [ 3, 3, 3] . We choose to keep the left array with the sum equalling 2 . It can be demonstrated that an array with the sum s_ 3 = 3 is imposssible to generate. We can get an array with the sum s_ 4 = 9 in the following way: 4. 1 a = [ 3, 1, 3, 1, 3] , mid = 1+ 3/ 2 = 2 , left = [ 1, 1] , right = [ 3, 3, 3] . We choose to keep the right array with the sum equalling 9 . We can get an array with the sum s_ 5 = 11 with zero slicing operations, because array sum is equal to 11 .",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "divide and conquer",
      "implementation",
      "sortings"
    ],
    "id": "1461D"
  },
  {
    "title": "Range Diameter Sum",
    "url": "https://codeforces.com/problemset/problem/1458/F",
    "history": "You are given a tree with n vertices numbered 1, . . . , n . A tree is a connected simple graph without cycles. Let dist( u, v) be the number of edges in the unique simple path connecting vertices u and v . Let diam( l, r) = maxdist( u, v) over all pairs u, v such that l \u2264 u, v \u2264 r . Compute \u2211_ 1 \u2264 l \u2264 r \u2264 ndiam( l, r) .",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of vertices in the tree. The next n - 1 lines describe the tree edges. Each of these lines contains two integers u, v ( 1 \u2264 u, v \u2264 n ) \u2014 endpoint indices of the respective tree edge. It is guaranteed that the edge list indeed describes a tree.",
    "output": "Print a single integer \u2014 \u2211_ 1 \u2264 l \u2264 r \u2264 ndiam( l, r) .",
    "note": "",
    "topics": [
      "data structures",
      "trees"
    ],
    "id": "1458F"
  },
  {
    "title": "Nim Shortcuts",
    "url": "https://codeforces.com/problemset/problem/1458/E",
    "history": "After your debut mobile game \" Nim\" blew up, you decided to make a sequel called \" Nim 2\" . This game will expand on the trusted Nim game formula, adding the much awaited second heap! In the game, there are two heaps, each containing a non- negative number of stones. Two players make moves in turn. On their turn, a player can take any positive number of stones from either one of the heaps. A player who is unable to move loses the game. To make the game easier to playtest, you' ve introduced developer shortcuts. There are n shortcut positions ( x_ 1, y_ 1) , . . . , ( x_ n, y_ n) . These change the game as follows: suppose that before a player' s turn the first and second heap contain x and y stones respectively. If the pair ( x, y) is equal to one of the pairs ( x_ i, y_ i) , then the player about to move loses instantly, otherwise they are able to make moves as normal. Note that in the above explanation the two heaps and all pairs are ordered, that is, x must refer to the size of the first heap, and y must refer to the size of the second heap. The game release was followed by too much celebration, and next thing you know is developer shortcuts made their way to the next official update of the game! Players now complain that the AI opponent has become unbeatable at certain stages of the game. You now have to write a program to figure out which of the given initial positions can be won by the starting player, assuming both players act optimally.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 10^ 5 ) \u2014 the number of shortcut positions, and the number of initial positions that need to be evaluated. The following n lines describe shortcut positions. The i - th of these lines contains two integers x_ i, y_ i ( 0 \u2264 x_ i, y_ i \u2264 10^ 9 ) . It is guaranteed that all shortcut positions are distinct. The following m lines describe initial positions. The i - th of these lines contains two integers a_ i, b_ i ( 0 \u2264 a_ i, b_ i \u2264 10^ 9 ) \u2014 the number of stones in the first and second heap respectively. It is guaranteed that all initial positions are distinct. However, initial positions are not necessarily distinct from shortcut positions.",
    "output": "For each initial position, on a separate line print \" WIN\" if the starting player is able to win from this position, and \" LOSE\" otherwise.",
    "note": "",
    "topics": [
      "data structures",
      "games"
    ],
    "id": "1458E"
  },
  {
    "title": "Flip and Reverse",
    "url": "https://codeforces.com/problemset/problem/1458/D",
    "history": "You are given a string s of 0' s and 1' s. You are allowed to perform the following operation: choose a non- empty contiguous substring of s that contains an equal number of 0' s and 1' s; flip all characters in the substring, that is, replace all 0' s with 1' s, and vice versa; reverse the substring. For example, consider s = 00111011, and the following operation: Choose the first six characters as the substring to act upon: 00111011. Note that the number of 0' s and 1' s are equal, so this is a legal choice. Choosing substrings 0, 110, or the entire string would not be possible. Flip all characters in the substring: 11000111. Reverse the substring: 10001111. Find the lexicographically smallest string that can be obtained from s after zero or more operations.",
    "input": "The first line contains a single integer T ( 1 \u2264 T \u2264 5 \u00b7 10^ 5 ) \u2014 the number of test cases. Each of the following T lines contains a single non- empty string \u2014 the input string s for the respective test case. All strings consist of characters 0 and 1, and their total length does not exceed 5 \u00b7 10^ 5 .",
    "output": "For each test case, on a separate line print the lexicographically smallest string that can be obtained from s after zero or more operations.",
    "note": "In the first test case a single operation should be applied to the entire string. In the second test case two operations are needed: 0111001, 0110110. In the third test case the string stays the same after any operation.",
    "topics": [
      "data structures",
      "graphs",
      "greedy"
    ],
    "id": "1458D"
  },
  {
    "title": "Forbidden Value",
    "url": "https://codeforces.com/problemset/problem/1455/G",
    "history": "Polycarp is editing a complicated computer program. First, variable x is declared and assigned to 0 . Then there are instructions of two types: set y v \u2014 assign x a value y or spend v burles to remove that instruction ( thus, not reassign x ) ; if y . . . end block \u2014 execute instructions inside the if block if the value of x is y and ignore the block otherwise. if blocks can contain set instructions and other if blocks inside them. However, when the value of x gets assigned to s , the computer breaks and immediately catches fire. Polycarp wants to prevent that from happening and spend as few burles as possible. What is the minimum amount of burles he can spend on removing set instructions to never assign x to s ?",
    "input": "The first line contains two integers n and s ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 s \u2264 2 \u00b7 10^ 5 ) \u2014 the number of lines in the program and the forbidden value of x . The following n lines describe the program. Each line is one of three types: set y v ( 0 \u2264 y \u2264 2 \u00b7 10^ 5, 1 \u2264 v \u2264 10^ 9) ; if y ( 0 \u2264 y \u2264 2 \u00b7 10^ 5) ; end. Each if instruction is matched by an end instruction. Each end instruction has an if instruction to match.",
    "output": "Print a single integer \u2014 the minimum amount of burles Polycarp can spend on removing set instructions to never assign x to s .",
    "note": "",
    "topics": [
      "data structures",
      "dp"
    ],
    "id": "1455G"
  },
  {
    "title": "Array Partition",
    "url": "https://codeforces.com/problemset/problem/1454/F",
    "history": "You are given an array a consisting of n integers. Let min( l, r) be the minimum value among a_ l, a_ l + 1, . . . , a_ r and max( l, r) be the maximum value among a_ l, a_ l + 1, . . . , a_ r . Your task is to choose three positive ( greater than 0 ) integers x , y and z such that: x + y + z = n ; max( 1, x) = min( x + 1, x + y) = max( x + y + 1, n) . In other words, you have to split the array a into three consecutive non- empty parts that cover the whole array and the maximum in the first part equals the minimum in the second part and equals the maximum in the third part ( or determine it is impossible to find such a partition) . Among all such triples ( partitions) , you can choose any. You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains one integer n ( 3 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of a . The second line of the test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is the i - th element of a . It is guaranteed that the sum of n does not exceed 2 \u00b7 10^ 5 ( \u2211 n \u2264 2 \u00b7 10^ 5 ) .",
    "output": "For each test case, print the answer: NO in the only line if there is no such partition of a that satisfies the conditions from the problem statement. Otherwise, print YES in the first line and three integers x , y and z ( x + y + z = n ) in the second line. If there are several answers, you can print any.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "two pointers"
    ],
    "id": "1454F"
  },
  {
    "title": "Game On Tree",
    "url": "https://codeforces.com/problemset/problem/1452/G",
    "history": "Alice and Bob are playing a game. They have a tree consisting of n vertices. Initially, Bob has k chips, the i - th chip is located in the vertex a_ i ( all these vertices are unique) . Before the game starts, Alice will place a chip into one of the vertices of the tree. The game consists of turns. Each turn, the following events happen ( sequentially, exactly in the following order) : Alice either moves her chip to an adjacent vertex or doesn' t move it; for each Bob' s chip, he either moves it to an adjacent vertex or doesn' t move it. Note that this choice is done independently for each chip. The game ends when Alice' s chip shares the same vertex with one ( or multiple) of Bob' s chips. Note that Bob' s chips may share the same vertex, even though they are in different vertices at the beginning of the game. Alice wants to maximize the number of turns, Bob wants to minimize it. If the game ends in the middle of some turn ( Alice moves her chip to a vertex that contains one or multiple Bob' s chips) , this turn is counted. For each vertex, calculate the number of turns the game will last if Alice places her chip in that vertex.",
    "input": "The first line contains one integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of vertices in the tree. Then n - 1 lines follow, each line contains two integers u_ i , v_ i ( 1 \u2264 u_ i, v_ i \u2264 n ; u_ i v_ i ) that denote the endpoints of an edge. These edges form a tree. The next line contains one integer k ( 1 \u2264 k \u2264 n - 1 ) \u2014 the number of Bob' s chips. The last line contains k integers a_ 1 , a_ 2 , . . . , a_ k ( 1 \u2264 a_ i \u2264 n ; a_ i a_ j if i j ) \u2014 the vertices where the Bob' s chips are initially placed.",
    "output": "Print n integers. The i - th of them should be equal to the number of turns the game will last if Alice initially places her chip in the vertex i . If one of Bob' s chips is already placed in vertex i , then the answer for vertex i is 0 .",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "greedy",
      "trees"
    ],
    "id": "1452G"
  },
  {
    "title": "Rating Compression",
    "url": "https://codeforces.com/problemset/problem/1450/D",
    "history": "On the competitive programming platform CodeCook, every person has a rating graph described by an array of integers a of length n . You are now updating the infrastructure, so you' ve created a program to compress these graphs. The program works as follows. Given an integer parameter k , the program takes the minimum of each contiguous subarray of length k in a . More formally, for an array a of length n and an integer k , define the k - compression array of a as an array b of length n- k+ 1 , such that b_ j = min_ j\u2264 i\u2264 j+ k- 1a_ i For example, the 3 - compression array of [ 1, 3, 4, 5, 2] is [ min{ 1, 3, 4} , min{ 3, 4, 5} , min{ 4, 5, 2} ] = [ 1, 3, 2] . A permutation of length m is an array consisting of m distinct integers from 1 to m in arbitrary order. For example, [ 2, 3, 1, 5, 4] is a permutation, but [ 1, 2, 2] is not a permutation ( 2 appears twice in the array) and [ 1, 3, 4] is also not a permutation ( m= 3 but there is 4 in the array) . A k - compression array will make CodeCook users happy if it will be a permutation. Given an array a , determine for all 1\u2264 k\u2264 n if CodeCook users will be happy after a k - compression of this array or not.",
    "input": "The first line contains a single integer t ( 1\u2264 t\u2264 10^ 4 ) \u2014 the number of test cases. The first line of the description of each test case contains a single integer n ( 1\u2264 n\u2264 3\u00b7 10^ 5 ) \u2014 the length of the array. The second line of the description of each test case contains n integers a_ 1, . . . , a_ n ( 1\u2264 a_ i\u2264 n ) \u2014 the elements of the array. It is guaranteed, that the sum of n for all test cases does not exceed 3\u00b7 10^ 5 .",
    "output": "For each test case, print a binary string of length n . The k - th character of the string should be 1 if CodeCook users will be happy after a k - compression of the array a , and 0 otherwise.",
    "note": "In the first test case, a= [ 1, 5, 3, 4, 2] . The 1 - compression of a is [ 1, 5, 3, 4, 2] and it is a permutation. The 2 - compression of a is [ 1, 3, 3, 2] and it is not a permutation, since 3 appears twice. The 3 - compression of a is [ 1, 3, 2] and it is a permutation. The 4 - compression of a is [ 1, 2] and it is a permutation. The 5 - compression of a is [ 1] and it is a permutation.",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "implementation",
      "two pointers"
    ],
    "id": "1450D"
  },
  {
    "title": "Line Distance",
    "url": "https://codeforces.com/problemset/problem/1446/F",
    "history": "You are given an integer k and n distinct points with integer coordinates on the Euclidean plane, the i - th point has coordinates ( x_ i, y_ i) . Consider a list of all the n( n - 1) / 2 pairs of points ( ( x_ i, y_ i) , ( x_ j, y_ j) ) ( 1 \u2264 i < j \u2264 n ) . For every such pair, write out the distance from the line through these two points to the origin ( 0, 0) . Your goal is to calculate the k - th smallest number among these distances.",
    "input": "The first line contains two integers n , k ( 2 \u2264 n \u2264 10^ 5 , 1 \u2264 k \u2264n( n - 1) / 2 ) . The i - th of the next n lines contains two integers x_ i and y_ i ( - 10^ 4 \u2264 x_ i, y_ i \u2264 10^ 4 ) \u2014 the coordinates of the i - th point. It is guaranteed that all given points are pairwise distinct.",
    "output": "You should output one number \u2014 the k - th smallest distance from the origin. Your answer is considered correct if its absolute or relative error does not exceed 10^ - 6 . Formally, let your answer be a , and the jury' s answer be b . Your answer is accepted if and only if | a - b| / max( 1, | b| ) \u2264 10^ - 6 .",
    "note": "There are 6 pairs of points: Line 1- 2 : distance 0 from the origin Line 1- 3 : distance \u221a( 2) / 2\u2248 0. 707106781 from the origin Line 1- 4 : distance 2 from the origin Line 2- 3 : distance 1 from the origin Line 2- 4 : distance 2 from the origin Line 3- 4 : distance 2/ \u221a( 29) \u2248 0. 371390676 from the origin The third smallest distance among those is approximately 0. 707106781 .",
    "topics": [
      "binary search",
      "data structures",
      "geometry"
    ],
    "id": "1446F"
  },
  {
    "title": "Frequency Problem (Hard Version)",
    "url": "https://codeforces.com/problemset/problem/1446/D2",
    "history": "This is the hard version of the problem. The difference between the versions is in the constraints on the array elements. You can make hacks only if all versions of the problem are solved. You are given an array [ a_ 1, a_ 2, . . . , a_ n] . Your goal is to find the length of the longest subarray of this array such that the most frequent value in it is not unique. In other words, you are looking for a subarray such that if the most frequent value occurs f times in this subarray, then at least 2 different values should occur exactly f times. An array c is a subarray of an array d if c can be obtained from d by deletion of several ( possibly, zero or all) elements from the beginning and several ( possibly, zero or all) elements from the end.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 200 000 ) \u2014 the length of the array. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 elements of the array.",
    "output": "You should output exactly one integer \u2014 the length of the longest subarray of the array whose most frequent value is not unique. If there is no such subarray, output 0 .",
    "note": "In the first sample, the subarray [ 1, 1, 2, 2, 3, 3] is good, but [ 1, 1, 2, 2, 3, 3, 3] isn' t: in the latter there are 3 occurrences of number 3 , and no other element appears 3 times.",
    "topics": [
      "data structures",
      "greedy",
      "two pointers"
    ],
    "id": "1446D2"
  },
  {
    "title": "Frequency Problem (Easy Version)",
    "url": "https://codeforces.com/problemset/problem/1446/D1",
    "history": "This is the easy version of the problem. The difference between the versions is in the constraints on the array elements. You can make hacks only if all versions of the problem are solved. You are given an array [ a_ 1, a_ 2, . . . , a_ n] . Your goal is to find the length of the longest subarray of this array such that the most frequent value in it is not unique. In other words, you are looking for a subarray such that if the most frequent value occurs f times in this subarray, then at least 2 different values should occur exactly f times. An array c is a subarray of an array d if c can be obtained from d by deletion of several ( possibly, zero or all) elements from the beginning and several ( possibly, zero or all) elements from the end.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 200 000 ) \u2014 the length of the array. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 min( n, 100) ) \u2014 elements of the array.",
    "output": "You should output exactly one integer \u2014 the length of the longest subarray of the array whose most frequent value is not unique. If there is no such subarray, output 0 .",
    "note": "In the first sample, the subarray [ 1, 1, 2, 2, 3, 3] is good, but [ 1, 1, 2, 2, 3, 3, 3] isn' t: in the latter there are 3 occurrences of number 3 , and no other element appears 3 times.",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "1446D1"
  },
  {
    "title": "Xor Tree",
    "url": "https://codeforces.com/problemset/problem/1446/C",
    "history": "For a given sequence of distinct non- negative integers ( b_ 1, b_ 2, . . . , b_ k) we determine if it is good in the following way: Consider a graph on k nodes, with numbers from b_ 1 to b_ k written on them. For every i from 1 to k : find such j ( 1 \u2264 j \u2264 k , j= \u0338 i ) , for which ( b_ i \u2295 b_ j) is the smallest among all such j , where \u2295 denotes the operation of bitwise XOR ( https: / / en. wikipedia. org/ wiki/ Bitwise_ operation# XOR) . Next, draw an undirected edge between vertices with numbers b_ i and b_ j in this graph. We say that the sequence is good if and only if the resulting graph forms a tree ( is connected and doesn' t have any simple cycles) . It is possible that for some numbers b_ i and b_ j , you will try to add the edge between them twice. Nevertheless, you will add this edge only once. You can find an example below ( the picture corresponding to the first test case) . Sequence ( 0, 1, 5, 2, 6) is not good as we cannot reach 1 from 5 . However, sequence ( 0, 1, 5, 2) is good. You are given a sequence ( a_ 1, a_ 2, . . . , a_ n) of distinct non- negative integers. You would like to remove some of the elements ( possibly none) to make the remaining sequence good. What is the minimum possible number of removals required to achieve this goal? It can be shown that for any sequence, we can remove some number of elements, leaving at least 2 , so that the remaining sequence is good.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 200, 000 ) \u2014 length of the sequence. The second line contains n distinct non- negative integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) \u2014 the elements of the sequence.",
    "output": "You should output exactly one integer \u2014 the minimum possible number of elements to remove in order to make the remaining sequence good.",
    "note": "Note that numbers which you remove don' t impact the procedure of telling whether the resulting sequence is good. It is possible that for some numbers b_ i and b_ j , you will try to add the edge between them twice. Nevertheless, you will add this edge only once.",
    "topics": [
      "binary search",
      "bitmasks",
      "data structures",
      "divide and conquer",
      "dp",
      "trees"
    ],
    "id": "1446C"
  },
  {
    "title": "Team-Building",
    "url": "https://codeforces.com/problemset/problem/1444/C",
    "history": "The new academic year has started, and Berland' s university has n first- year students. They are divided into k academic groups, however, some of the groups might be empty. Among the students, there are m pairs of acquaintances, and each acquaintance pair might be both in a common group or be in two different groups. Alice is the curator of the first years, she wants to host an entertaining game to make everyone know each other. To do that, she will select two different academic groups and then divide the students of those groups into two teams. The game requires that there are no acquaintance pairs inside each of the teams. Alice wonders how many pairs of groups she can select, such that it' ll be possible to play a game after that. All students of the two selected groups must take part in the game. Please note, that the teams Alice will form for the game don' t need to coincide with groups the students learn in. Moreover, teams may have different sizes ( or even be empty) .",
    "input": "The first line contains three integers n , m and k ( 1 \u2264 n \u2264 500 000 ; 0 \u2264 m \u2264 500 000 ; 2 \u2264 k \u2264 500 000 ) \u2014 the number of students, the number of pairs of acquaintances and the number of groups respectively. The second line contains n integers c_ 1, c_ 2, . . . , c_ n ( 1 \u2264 c_ i \u2264 k ) , where c_ i equals to the group number of the i - th student. Next m lines follow. The i - th of them contains two integers a_ i and b_ i ( 1 \u2264 a_ i, b_ i \u2264 n ) , denoting that students a_ i and b_ i are acquaintances. It' s guaranteed, that a_ i = \u0338 b_ i , and that no ( unordered) pair is mentioned more than once.",
    "output": "Print a single integer \u2014 the number of ways to choose two different groups such that it' s possible to select two teams to play the game.",
    "note": "The acquaintances graph for the first example is shown in the picture below ( next to each student there is their group number written) . In that test we can select the following groups: Select the first and the second groups. For instance, one team can be formed from students 1 and 4 , while other team can be formed from students 2 and 3 . Select the second and the third group. For instance, one team can be formed 3 and 6 , while other team can be formed from students 4 and 5 . We can' t select the first and the third group, because there is no way to form the teams for the game. In the second example, we can select any group pair. Please note, that even though the third group has no students, we still can select it ( with some other group) for the game.",
    "topics": [
      "data structures",
      "dfs and similar",
      "dsu",
      "graphs"
    ],
    "id": "1444C"
  },
  {
    "title": "Sum",
    "url": "https://codeforces.com/problemset/problem/1442/D",
    "history": "You are given n non- decreasing arrays of non- negative numbers. Vasya repeats the following operation k times: Selects a non- empty array. Puts the first element of the selected array in his pocket. Removes the first element from the selected array. Vasya wants to maximize the sum of the elements in his pocket.",
    "input": "The first line contains two integers n and k ( 1 \u2264 n, k \u2264 3 000 ) : the number of arrays and operations. Each of the next n lines contain an array. The first integer in each line is t_ i ( 1 \u2264 t_ i \u2264 10^ 6 ) : the size of the i - th array. The following t_ i integers a_ i, j ( 0 \u2264 a_ i, 1\u2264. . . \u2264 a_ i, t_ i\u2264 10^ 8 ) are the elements of the i - th array. It is guaranteed that k \u2264\u2211_ i= 1^ n t_ i \u2264 10^ 6 .",
    "output": "Print one integer: the maximum possible sum of all elements in Vasya' s pocket after k operations.",
    "note": "",
    "topics": [
      "data structures",
      "divide and conquer",
      "dp",
      "greedy"
    ],
    "id": "1442D"
  },
  {
    "title": "Identify the Operations",
    "url": "https://codeforces.com/problemset/problem/1442/B",
    "history": "We start with a permutation a_ 1, a_ 2, . . . , a_ n and with an empty array b . We apply the following operation k times. On the i - th iteration, we select an index t_ i ( 1 \u2264 t_ i \u2264 n- i+ 1 ) , remove a_ t_ i from the array, and append one of the numbers a_ t_ i- 1 or a_ t_ i+ 1 ( if t_ i- 1 or t_ i+ 1 are within the array bounds) to the right end of the array b . Then we move elements a_ t_ i+ 1, . . . , a_ n to the left in order to fill in the empty space. You are given the initial permutation a_ 1, a_ 2, . . . , a_ n and the resulting array b_ 1, b_ 2, . . . , b_ k . All elements of an array b are distinct. Calculate the number of possible sequences of indices t_ 1, t_ 2, . . . , t_ k modulo 998 244 353 .",
    "input": "Each test contains multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 100 000 ) , denoting the number of test cases, followed by a description of the test cases. The first line of each test case contains two integers n, k ( 1 \u2264 k < n \u2264 200 000 ) : sizes of arrays a and b . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) : elements of a . All elements of a are distinct. The third line of each test case contains k integers b_ 1, b_ 2, . . . , b_ k ( 1 \u2264 b_ i \u2264 n ) : elements of b . All elements of b are distinct. The sum of all n among all test cases is guaranteed to not exceed 200 000 .",
    "output": "For each test case print one integer: the number of possible sequences modulo 998 244 353 .",
    "note": "cancel Let' s denote as a_ 1 a_ 2 . . . a_ ia_ i+ 1. . . a_ n \u2192 a_ 1 a_ 2 . . . a_ i- 1 a_ i+ 1. . . a_ n- 1 an operation over an element with index i : removal of element a_ i from array a and appending element a_ i+ 1 to array b . In the first example test, the following two options can be used to produce the given array b : 1 2 34 5 \u2192 1 23 5 \u2192 1 25\u2192 1 2 ; ( t_ 1, t_ 2, t_ 3) = ( 4, 3, 2) ; 1 2 34 5 \u219212 3 5 \u2192 2 35\u2192 1 5 ; ( t_ 1, t_ 2, t_ 3) = ( 4, 1, 2) . In the second example test, it is impossible to achieve the given array no matter the operations used. That' s because, on the first application, we removed the element next to 4 , namely number 3 , which means that it couldn' t be added to array b on the second step. In the third example test, there are four options to achieve the given array b : 1 4 73 6 2 5 \u2192 1 4 3 62 5 \u219214 3 2 5 \u2192 4 3 25\u2192 4 3 5 ; 1 4 73 6 2 5 \u2192 1 4 3 62 5 \u2192 1 43 2 5 \u2192 1 4 25\u2192 1 4 5 ; 1 4 7 36 2 5 \u2192 1 4 7 32 5 \u219214 7 2 5 \u2192 4 7 25\u2192 4 7 5 ; 1 4 7 36 2 5 \u2192 1 4 7 32 5 \u2192 1 47 2 5 \u2192 1 4 25\u2192 1 4 5 ;",
    "topics": [
      "combinatorics",
      "data structures",
      "dsu",
      "greedy",
      "implementation"
    ],
    "id": "1442B"
  },
  {
    "title": "Cheat and Win",
    "url": "https://codeforces.com/problemset/problem/1439/E",
    "history": "Let' s consider a ( 10^ 9+ 1) \u00d7 ( 10^ 9+ 1) field. The rows are numbered with integers from 0 to 10^ 9 and the columns are numbered with integers from 0 to 10^ 9 . Let' s define as ( x, y) the cell located in the x - th row and y - th column. Let' s call a cell ( x, y) good if x & y = 0 , there & is the bitwise and operation. Let' s build a graph where vertices will be all good cells of the field and we will make an edge between all pairs of adjacent by side good cells. It can be proved that this graph will be a tree \u2014 connected graph without cycles. Let' s hang this tree on vertex ( 0, 0) , so we will have a rooted tree with root ( 0, 0) . Two players will play the game. Initially, some good cells are black and others are white. Each player on his turn chooses a black good cell and a subset of its ancestors ( possibly empty) and inverts their colors ( from white to black and vice versa) . The player who can' t move ( because all good cells are white) loses. It can be proved that the game is always finite. Initially, all cells are white. You are given m pairs of cells. For each pair color all cells in a simple path between them as black. Note that we do not invert their colors, we paint them black. Sohrab and Mashtali are going to play this game. Sohrab is the first player and Mashtali is the second. Mashtali wants to win and decided to cheat. He can make the following operation multiple times before the game starts: choose a cell and invert colors of all vertices on the path between it and the root of the tree. Mammad who was watching them wondered: \" what is the minimum number of operations Mashtali should do to have a winning strategy? \" . Find the answer to this question for the initial painting of the tree. It can be proved that at least one possible way to cheat always exists.",
    "input": "The first line contains one integer m ( 1 \u2264 m \u2264 10^ 5 ) . Each of the next m lines contains four integers x_ 1 , y_ 1 , x_ 2 , y_ 2 ( 0 \u2264 x_ i, y_ i \u2264 10^ 9 , x_ i & y_ i = 0 ) . You should color all cells on the path between vertices ( x_ 1, y_ 1) and ( x_ 2, y_ 2) as black.",
    "output": "Print a single integer \u2014 the minimum number of cheating operations the second player can do.",
    "note": "In the first test, you can make one cheating operation with the root of the tree. After that, the second player can win because he can use a symmetric strategy. In the second test, you can make cheating operations with cells ( 0, 2) , ( 0, 0) , ( 3, 4) . In the third test, the second player already has the winning strategy and doesn' t need to make any cheating operations.",
    "topics": [
      "bitmasks",
      "data structures",
      "games",
      "trees"
    ],
    "id": "1439E"
  },
  {
    "title": "Greedy Shopping",
    "url": "https://codeforces.com/problemset/problem/1439/C",
    "history": "You are given an array a_ 1, a_ 2, . . . , a_ n of integers. This array is non- increasing. Let' s consider a line with n shops. The shops are numbered with integers from 1 to n from left to right. The cost of a meal in the i - th shop is equal to a_ i . You should process q queries of two types: 1 x y: for each shop 1 \u2264 i \u2264 x set a_ i = max( a_ i, y) . 2 x y: let' s consider a hungry man with y money. He visits the shops from x - th shop to n - th and if he can buy a meal in the current shop he buys one item of it. Find how many meals he will purchase. The man can buy a meal in the shop i if he has at least a_ i money, and after it his money decreases by a_ i .",
    "input": "The first line contains two integers n , q ( 1 \u2264 n, q \u2264 2 \u00b7 10^ 5 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i\u2264 10^ 9) \u2014 the costs of the meals. It is guaranteed, that a_ 1 \u2265 a_ 2 \u2265. . . \u2265 a_ n . Each of the next q lines contains three integers t , x , y ( 1 \u2264 t \u2264 2 , 1\u2264 x \u2264 n , 1 \u2264 y \u2264 10^ 9 ) , each describing the next query. It is guaranteed that there exists at least one query of type 2 .",
    "output": "For each query of type 2 output the answer on the new line.",
    "note": "In the first query a hungry man will buy meals in all shops from 3 to 10 . In the second query a hungry man will buy meals in shops 4 , 9 , and 10 . After the third query the array a_ 1, a_ 2, . . . , a_ n of costs won' t change and will be { 10, 10, 10, 6, 6, 5, 5, 5, 3, 1} . In the fourth query a hungry man will buy meals in shops 2 , 3 , 4 , 5 , 9 , and 10 . After the fifth query the array a of costs will be { 10, 10, 10, 7, 6, 5, 5, 5, 3, 1} . In the sixth query a hungry man will buy meals in shops 2 and 4 .",
    "topics": [
      "binary search",
      "data structures",
      "divide and conquer",
      "greedy",
      "implementation"
    ],
    "id": "1439C"
  },
  {
    "title": "Graph Subset Problem",
    "url": "https://codeforces.com/problemset/problem/1439/B",
    "history": "You are given an undirected graph with n vertices and m edges. Also, you are given an integer k . Find either a clique of size k or a non- empty subset of vertices such that each vertex of this subset has at least k neighbors in the subset. If there are no such cliques and subsets report about it. A subset of vertices is called a clique of size k if its size is k and there exists an edge between every two vertices from the subset. A vertex is called a neighbor of the other vertex if there exists an edge between them.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. The next lines contain descriptions of test cases. The first line of the description of each test case contains three integers n , m , k ( 1 \u2264 n, m, k \u2264 10^ 5 , k \u2264 n ) . Each of the next m lines contains two integers u, v ( 1 \u2264 u, v \u2264 n, u = \u0338 v) , denoting an edge between vertices u and v . It is guaranteed that there are no self- loops or multiple edges. It is guaranteed that the sum of n for all test cases and the sum of m for all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case: If you found a subset of vertices such that each vertex of this subset has at least k neighbors in the subset in the first line output 1 and the size of the subset. On the second line output the vertices of the subset in any order. If you found a clique of size k then in the first line output 2 and in the second line output the vertices of the clique in any order. If there are no required subsets and cliques print - 1 . If there exists multiple possible answers you can print any of them.",
    "note": "In the first test case: the subset { 1, 2, 3, 4} is a clique of size 4 . In the second test case: degree of each vertex in the original graph is at least 3 . So the set of all vertices is a correct answer. In the third test case: there are no cliques of size 4 or required subsets, so the answer is - 1 .",
    "topics": [
      "constructive algorithms",
      "data structures",
      "graphs"
    ],
    "id": "1439B"
  },
  {
    "title": "Valerii Against Everyone",
    "url": "https://codeforces.com/problemset/problem/1438/B",
    "history": "You' re given an array b of length n . Let' s define another array a , also of length n , for which a_ i = 2^ b_ i ( 1 \u2264 i \u2264 n ) . Valerii says that every two non- intersecting subarrays of a have different sums of elements. You want to determine if he is wrong. More formally, you need to determine if there exist four integers l_ 1, r_ 1, l_ 2, r_ 2 that satisfy the following conditions: 1 \u2264 l_ 1 \u2264 r_ 1 l_ 2 \u2264 r_ 2 \u2264 n ; a_ l_ 1+ a_ l_ 1+ 1+ . . . + a_ r_ 1- 1+ a_ r_ 1 = a_ l_ 2+ a_ l_ 2+ 1+ . . . + a_ r_ 2- 1+ a_ r_ 2 . If such four integers exist, you will prove Valerii wrong. Do they exist? An array c is a subarray of an array d if c can be obtained from d by deletion of several ( possibly, zero or all) elements from the beginning and several ( possibly, zero or all) elements from the end.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 100 ) . Description of the test cases follows. The first line of every test case contains a single integer n ( 2 \u2264 n \u2264 1000 ) . The second line of every test case contains n integers b_ 1, b_ 2, . . . , b_ n ( 0 \u2264 b_ i \u2264 10^ 9 ) .",
    "output": "For every test case, if there exist two non- intersecting subarrays in a that have the same sum, output YES on a separate line. Otherwise, output NO on a separate line. Also, note that each letter can be in any case.",
    "note": "In the first case, a = [ 16, 8, 1, 2, 4, 1] . Choosing l_ 1 = 1 , r_ 1 = 1 , l_ 2 = 2 and r_ 2 = 6 works because 16 = ( 8+ 1+ 2+ 4+ 1) . In the second case, you can verify that there is no way to select to such subarrays.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "1438B"
  },
  {
    "title": "Death DBMS",
    "url": "https://codeforces.com/problemset/problem/1437/G",
    "history": "For the simplicity, let' s say that the \" Death Note\" is a notebook that kills a person when their name is written in it. It' s easy to kill with it, but it' s pretty hard to keep track of people you haven' t killed and still plan to. You decided to make a \" Death Database Management System\" \u2014 a computer program that provides the easy access to the database of possible victims. Let me describe its specifications to you. Let' s define a victim entity: a victim has a name ( not necessarily unique) that consists only of lowercase Latin letters and an integer suspicion value. At the start of the program the user enters a list of n victim names into a database, each suspicion value is set to 0 . Then the user makes queries of two types: 1 i x \u2014 set the suspicion value of the i - th victim to x ; 2 q \u2014 given a string q find the maximum suspicion value of a victim whose name is a contiguous substring of q . Just to remind you, this program doesn' t kill people, it only helps to search for the names to write down in an actual notebook. Thus, the list of the victims in the database doesn' t change throughout the queries. What are you waiting for? Write that program now!",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 3 \u00b7 10^ 5 ) \u2014 the number of victims and the number of queries, respectively. Each of the next n lines contains a single string s_ i \u2014 the name of the i - th victim. Each name consists only of lowercase Latin letters. Each of the next m lines contains a query of one of two types: 1 i x ( 1 \u2264 i \u2264 n , 0 \u2264 x \u2264 10^ 9 ) \u2014 change the suspicion value of the i - th victim to x ; 2 q \u2014 given a string q consisting only of lowercase Latin letters find the maximum suspicion value of a victim whose name is a contiguous substring of q . There is at least one query of the second type. The total length of the strings s_ i doesn' t exceed 3 \u00b7 10^ 5 . The total length of the strings q doesn' t exceed 3 \u00b7 10^ 5 .",
    "output": "For each query of the second type print an integer value. If there is no victim name that is a contiguous substring of q , then print - 1 . Otherwise, print the maximum suspicion value of a victim whose name is a contiguous substring of q .",
    "note": "",
    "topics": [
      "data structures",
      "string suffix structures",
      "strings",
      "trees"
    ],
    "id": "1437G"
  },
  {
    "title": "Make It Increasing",
    "url": "https://codeforces.com/problemset/problem/1437/E",
    "history": "You are given an array of n integers a_ 1 , a_ 2 , . . . , a_ n , and a set b of k distinct integers from 1 to n . In one operation, you may choose two integers i and x ( 1 \u2264 i \u2264 n , x can be any integer) and assign a_ i : = x . This operation can be done only if i does not belong to the set b . Calculate the minimum number of operations you should perform so the array a is increasing ( that is, a_ 1 < a_ 2 < a_ 3 < . . . < a_ n ) , or report that it is impossible.",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 5 \u00b7 10^ 5 , 0 \u2264 k \u2264 n ) \u2014 the size of the array a and the set b , respectively. The second line contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) . Then, if k 0 , the third line follows, containing k integers b_ 1 , b_ 2 , . . . , b_ k ( 1 \u2264 b_ 1 < b_ 2 < . . . < b_ k \u2264 n ) . If k = 0 , this line is skipped.",
    "output": "If it is impossible to make the array a increasing using the given operations, print - 1 . Otherwise, print one integer \u2014 the minimum number of operations you have to perform.",
    "note": "",
    "topics": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "dp",
      "implementation"
    ],
    "id": "1437E"
  },
  {
    "title": "Complicated Computations",
    "url": "https://codeforces.com/problemset/problem/1436/E",
    "history": "In this problem MEX of a certain array is the smallest positive integer not contained in this array. Everyone knows this definition, including Lesha. But Lesha loves MEX, so he comes up with a new problem involving MEX every day, including today. You are given an array a of length n . Lesha considers all the non- empty subarrays of the initial array and computes MEX for each of them. Then Lesha computes MEX of the obtained numbers. An array b is a subarray of an array a , if b can be obtained from a by deletion of several ( possible none or all) elements from the beginning and several ( possibly none or all) elements from the end. In particular, an array is a subarray of itself. Lesha understands that the problem is very interesting this time, but he doesn' t know how to solve it. Help him and find the MEX of MEXes of all the subarrays!",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of the array. The next line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 the elements of the array.",
    "output": "Print a single integer \u2014 the MEX of MEXes of all subarrays.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "two pointers"
    ],
    "id": "1436E"
  },
  {
    "title": "String Reversal",
    "url": "https://codeforces.com/problemset/problem/1430/E",
    "history": "You are given a string s . You have to reverse it \u2014 that is, the first letter should become equal to the last letter before the reversal, the second letter should become equal to the second- to- last letter before the reversal \u2014 and so on. For example, if your goal is to reverse the string \" abddea\" , you should get the string \" aeddba\" . To accomplish your goal, you can swap the neighboring elements of the string. Your task is to calculate the minimum number of swaps you have to perform to reverse the given string.",
    "input": "The first line contains one integer n ( 2 \u2264 n \u2264 200 000 ) \u2014 the length of s . The second line contains s \u2014 a string consisting of n lowercase Latin letters.",
    "output": "Print one integer \u2014 the minimum number of swaps of neighboring elements you have to perform to reverse the string.",
    "note": "In the first example, you have to swap the third and the fourth elements, so the string becomes \" aazaa\" . Then you have to swap the second and the third elements, so the string becomes \" azaaa\" . So, it is possible to reverse the string in two swaps. Since the string in the second example is a palindrome, you don' t have to do anything to reverse it.",
    "topics": [
      "data structures",
      "greedy",
      "strings"
    ],
    "id": "1430E"
  },
  {
    "title": "String Deletion",
    "url": "https://codeforces.com/problemset/problem/1430/D",
    "history": "You have a string s consisting of n characters. Each character is either 0 or 1. You can perform operations on the string. Each operation consists of two steps: select an integer i from 1 to the length of the string s , then delete the character s_ i ( the string length gets reduced by 1 , the indices of characters to the right of the deleted one also get reduced by 1 ) ; if the string s is not empty, delete the maximum length prefix consisting of the same characters ( the indices of the remaining characters and the string length get reduced by the length of the deleted prefix) . Note that both steps are mandatory in each operation, and their order cannot be changed. For example, if you have a string s = 111010, the first operation can be one of the following: select i = 1 : we' ll get 111010 \u2192 11010 \u2192 010; select i = 2 : we' ll get 111010 \u2192 11010 \u2192 010; select i = 3 : we' ll get 111010 \u2192 11010 \u2192 010; select i = 4 : we' ll get 111010 \u2192 11110 \u2192 0; select i = 5 : we' ll get 111010 \u2192 11100 \u2192 00; select i = 6 : we' ll get 111010 \u2192 11101 \u2192 01. You finish performing operations when the string s becomes empty. What is the maximum number of operations you can perform?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the string s . The second line contains string s of n characters. Each character is either 0 or 1. It' s guaranteed that the total sum of n over test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print a single integer \u2014 the maximum number of operations you can perform.",
    "note": "In the first test case, you can, for example, select i = 2 and get string 010 after the first operation. After that, you can select i = 3 and get string 1. Finally, you can only select i = 1 and get empty string.",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "two pointers"
    ],
    "id": "1430D"
  },
  {
    "title": "Numbers on Whiteboard",
    "url": "https://codeforces.com/problemset/problem/1430/C",
    "history": "Numbers 1, 2, 3, . . . n ( each integer from 1 to n once) are written on a board. In one operation you can erase any two numbers a and b from the board and write one integer a + b/ 2 rounded up instead. You should perform the given operation n - 1 times and make the resulting number that will be left on the board as small as possible. For example, if n = 4 , the following course of action is optimal: choose a = 4 and b = 2 , so the new number is 3 , and the whiteboard contains [ 1, 3, 3] ; choose a = 3 and b = 3 , so the new number is 3 , and the whiteboard contains [ 1, 3] ; choose a = 1 and b = 3 , so the new number is 2 , and the whiteboard contains [ 2] . It' s easy to see that after n - 1 operations, there will be left only one number. Your goal is to minimize it.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The only line of each test case contains one integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of integers written on the board initially. It' s guaranteed that the total sum of n over test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, in the first line, print the minimum possible number left on the board after n - 1 operations. Each of the next n - 1 lines should contain two integers \u2014 numbers a and b chosen and erased in each operation.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1430C"
  },
  {
    "title": "Fruit Sequences",
    "url": "https://codeforces.com/problemset/problem/1428/F",
    "history": "Zookeeper is buying a carton of fruit to feed his pet wabbit. The fruits are a sequence of apples and oranges, which is represented by a binary string s_ 1s_ 2. . . s_ n of length n . 1 represents an apple and 0 represents an orange. Since wabbit is allergic to eating oranges, Zookeeper would like to find the longest contiguous sequence of apples. Let f( l, r) be the longest contiguous sequence of apples in the substring s_ ls_ l+ 1. . . s_ r . Help Zookeeper find \u2211_ l= 1^ n\u2211_ r= l^ n f( l, r) , or the sum of f across all substrings.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 5 \u00b7 10^ 5) . The next line contains a binary string s of length n ( s_ i \u2208{ 0, 1} )",
    "output": "Print a single integer: \u2211_ l= 1^ n\u2211_ r= l^ n f( l, r) .",
    "note": "In the first test, there are ten substrings. The list of them ( we let [ l, r] be the substring s_ l s_ l+ 1. . . s_ r ) : [ 1, 1] : 0 [ 1, 2] : 01 [ 1, 3] : 011 [ 1, 4] : 0110 [ 2, 2] : 1 [ 2, 3] : 11 [ 2, 4] : 110 [ 3, 3] : 1 [ 3, 4] : 10 [ 4, 4] : 0 The lengths of the longest contiguous sequence of ones in each of these ten substrings are 0, 1, 2, 2, 1, 2, 2, 1, 1, 0 respectively. Hence, the answer is 0+ 1+ 2+ 2+ 1+ 2+ 2+ 1+ 1+ 0 = 12 .",
    "topics": [
      "binary search",
      "data structures",
      "divide and conquer",
      "dp",
      "two pointers"
    ],
    "id": "1428F"
  },
  {
    "title": "Carrots for Rabbits",
    "url": "https://codeforces.com/problemset/problem/1428/E",
    "history": "There are some rabbits in Singapore Zoo. To feed them, Zookeeper bought n carrots with lengths a_ 1, a_ 2, a_ 3, . . . , a_ n . However, rabbits are very fertile and multiply very quickly. Zookeeper now has k rabbits and does not have enough carrots to feed all of them. To solve this problem, Zookeeper decided to cut the carrots into k pieces. For some reason, all resulting carrot lengths must be positive integers. Big carrots are very difficult for rabbits to handle and eat, so the time needed to eat a carrot of size x is x^ 2 . Help Zookeeper split his carrots while minimizing the sum of time taken for rabbits to eat the carrots.",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 k \u2264 10^ 5) : the initial number of carrots and the number of rabbits. The next line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 6) : lengths of carrots. It is guaranteed that the sum of a_ i is at least k .",
    "output": "Output one integer: the minimum sum of time taken for rabbits to eat carrots.",
    "note": "For the first test, the optimal sizes of carrots are { 1, 1, 1, 2, 2, 2} . The time taken is 1^ 2+ 1^ 2+ 1^ 2+ 2^ 2+ 2^ 2+ 2^ 2= 15 For the second test, the optimal sizes of carrots are { 4, 5, 5, 5} . The time taken is 4^ 2+ 5^ 2+ 5^ 2+ 5^ 2= 91 .",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1428E"
  },
  {
    "title": "ABBB",
    "url": "https://codeforces.com/problemset/problem/1428/C",
    "history": "Zookeeper is playing a game. In this game, Zookeeper must use bombs to bomb a string that consists of letters ' A' and ' B' . He can use bombs to bomb a substring which is either \" AB\" or \" BB\" . When he bombs such a substring, the substring gets deleted from the string and the remaining parts of the string get concatenated. For example, Zookeeper can use two such operations: AABABBA \u2192 AABBA \u2192 AAA. Zookeeper wonders what the shortest string he can make is. Can you help him find the length of the shortest string?",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 20000) \u2014 the number of test cases. The description of the test cases follows. Each of the next t lines contains a single test case each, consisting of a non- empty string s : the string that Zookeeper needs to bomb. It is guaranteed that all symbols of s are either ' A' or ' B' . It is guaranteed that the sum of | s| ( length of s ) among all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print a single integer: the length of the shortest string that Zookeeper can make.",
    "note": "For the first test case, you can' t make any moves, so the answer is 3 . For the second test case, one optimal sequence of moves is BABA \u2192 BA. So, the answer is 2 . For the third test case, one optimal sequence of moves is AABBBABBBB \u2192 AABBBABB \u2192 AABBBB \u2192 ABBB \u2192 AB \u2192 ( empty string) . So, the answer is 0 .",
    "topics": [
      "brute force",
      "data structures",
      "greedy",
      "strings"
    ],
    "id": "1428C"
  },
  {
    "title": "Boring Card Game",
    "url": "https://codeforces.com/problemset/problem/1427/F",
    "history": "When they are bored, Federico and Giada often play the following card game with a deck containing 6n cards. Each card contains one number between 1 and 6n and each number appears on exactly one card. Initially the deck is sorted, so the first card contains the number 1 , the second card contains the number 2 , . . . , and the last one contains the number 6n . Federico and Giada take turns, alternating; Federico starts. In his turn, the player takes 3 contiguous cards from the deck and puts them in his pocket. The order of the cards remaining in the deck is not changed. They play until the deck is empty ( after exactly 2n turns) . At the end of the game both Federico and Giada have 3n cards in their pockets. You are given the cards in Federico' s pocket at the end of the game. Describe a sequence of moves that produces that set of cards in Federico' s pocket.",
    "input": "The first line of the input contains one integer n ( 1\u2264 n \u2264 200 ) . The second line of the input contains 3n numbers x_ 1, x_ 2, . . . , x_ 3n ( 1 \u2264 x_ 1 < x_ 2 < . . . < x_ 3n\u2264 6n ) \u2013 the cards in Federico' s pocket at the end of the game. It is guaranteed that for each test there is at least one sequence of moves that produces such set of cards in Federico' s pocket.",
    "output": "Print 2n lines, each containing 3 integers. The i - th line should contain, in increasing order, the integers a_ i< b_ i< c_ i written on the three cards taken by the player during the i - th turn ( so taken by Federico if i is odd and by Giada if i is even) . If there is more than one possible sequence of moves, you can print any.",
    "note": "Explanation of the first testcase: Initially the deck has 12 = 2\u00b7 6 sorted cards, so the deck is [ 1 2 3 4 5 6 7 8 9 10 11 12] . During turn 1 , Federico takes the three cards [ 9 10 11] . After his move, the deck is [ 1 2 3 4 5 6 7 8 12] . During turn 2 , Giada takes the three cards [ 6 7 8] . After her move, the deck is [ 1 2 3 4 5 12] . During turn 3 , Federico takes the three cards [ 2 3 4] . After his move, the deck is [ 1 5 12] . During turn 4 , Giada takes the three cards [ 1 5 12] . After her move, the deck is empty. At the end of the game, the cards in Federico' s pocket are [ 2 3 4 9 10 11] and the cards in Giada' s pocket are [ 1 5 6 7 8 12] .",
    "topics": [
      "data structures",
      "greedy",
      "trees"
    ],
    "id": "1427F"
  },
  {
    "title": "Non-zero Segments",
    "url": "https://codeforces.com/problemset/problem/1426/D",
    "history": "Kolya got an integer array a_ 1, a_ 2, . . . , a_ n . The array can contain both positive and negative integers, but Kolya doesn' t like 0 , so the array doesn' t contain any zeros. Kolya doesn' t like that the sum of some subsegments of his array can be 0 . The subsegment is some consecutive segment of elements of the array. You have to help Kolya and change his array in such a way that it doesn' t contain any subsegments with the sum 0 . To reach this goal, you can insert any integers between any pair of adjacent elements of the array ( integers can be really any: positive, negative, 0 , any by absolute value, even such a huge that they can' t be represented in most standard programming languages) . Your task is to find the minimum number of integers you have to insert into Kolya' s array in such a way that the resulting array doesn' t contain any subsegments with the sum 0 .",
    "input": "The first line of the input contains one integer n ( 2 \u2264 n \u2264 200 000 ) \u2014 the number of elements in Kolya' s array. The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9\u2264 a_ i \u2264 10^ 9, a_ i = \u0338 0 ) \u2014 the description of Kolya' s array.",
    "output": "Print the minimum number of integers you have to insert into Kolya' s array in such a way that the resulting array doesn' t contain any subsegments with the sum 0 .",
    "note": "Consider the first example. There is only one subsegment with the sum 0 . It starts in the second element and ends in the fourth element. It' s enough to insert one element so the array doesn' t contain any subsegments with the sum equal to zero. For example, it is possible to insert the integer 1 between second and third elements of the array. There are no subsegments having sum 0 in the second example so you don' t need to do anything.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "1426D"
  },
  {
    "title": "Impressive Harvesting of The Orchard",
    "url": "https://codeforces.com/problemset/problem/1425/I",
    "history": "Mr. Chanek has an orchard structured as a rooted ternary tree with N vertices numbered from 1 to N . The root of the tree is vertex 1 . P_ i denotes the parent of vertex i , for ( 2 \u2264 i \u2264 N) . Interestingly, the height of the tree is not greater than 10 . Height of a tree is defined to be the largest distance from the root to a vertex in the tree. There exist a bush on each vertex of the tree. Initially, all bushes have fruits. Fruits will not grow on bushes that currently already have fruits. The bush at vertex i will grow fruits after A_ i days since its last harvest. Mr. Chanek will visit his orchard for Q days. In day i , he will harvest all bushes that have fruits on the subtree of vertex X_ i . For each day, determine the sum of distances from every harvested bush to X_ i , and the number of harvested bush that day. Harvesting a bush means collecting all fruits on the bush. For example, if Mr. Chanek harvests all fruits on subtree of vertex X , and harvested bushes [ Y_ 1, Y_ 2, . . . , Y_ M] , the sum of distances is \u2211_ i = 1^ M distance( X, Y_ i) distance( U, V) in a tree is defined to be the number of edges on the simple path from U to V .",
    "input": "The first line contains two integers N and Q ( 1 \u2264 N, Q, \u2264 5 \u00b7 10^ 4) , which denotes the number of vertices and the number of days Mr. Chanek visits the orchard. The second line contains N integers A_ i ( 1 \u2264 A_ i \u2264 5 \u00b7 10^ 4) , which denotes the fruits growth speed on the bush at vertex i , for ( 1 \u2264 i \u2264 N) . The third line contains N- 1 integers P_ i ( 1 \u2264 P_ i \u2264 N, P_ i i) , which denotes the parent of vertex i in the tree, for ( 2 \u2264 i \u2264 N) . It is guaranteed that each vertex can be the parent of at most 3 other vertices. It is also guaranteed that the height of the tree is not greater than 10 . The next Q lines contain a single integer X_ i ( 1 \u2264 X_ i \u2264 N) , which denotes the start of Mr. Chanek' s visit on day i , for ( 1 \u2264 i \u2264 Q) .",
    "output": "Output Q lines, line i gives the sum of distances from the harvested bushes to X_ i , and the number of harvested bushes.",
    "note": "For the first example: On day 1, Mr. Chanek starts at vertex 2 and can harvest the bush at vertex 2. On day 2, Mr. Chanek starts at vertex 1 and only harvest from bush 1 ( bush 2' s fruit still has not grown yet) . On day 3, Mr. Chanek starts at vertex 1 and harvests the fruits on bush 1 and 2 . The sum of distances from every harvested bush to 1 is 1 . For the second example, Mr. Chanek always starts at vertex 1 . The bushes which Mr. Chanek harvests on day one, two, and three are [ 1, 2, 3, 4, 5] , [ 2, 3] , [ 1, 2, 3, 5] , respectively.",
    "topics": [
      "data structures"
    ],
    "id": "1425I"
  },
  {
    "title": "Years",
    "url": "https://codeforces.com/problemset/problem/1424/G",
    "history": "During one of the space missions, humans have found an evidence of previous life at one of the planets. They were lucky enough to find a book with birth and death years of each individual that had been living at this planet. What' s interesting is that these years are in the range ( 1, 10^ 9) ! Therefore, the planet was named Longlifer. In order to learn more about Longlifer' s previous population, scientists need to determine the year with maximum number of individuals that were alive, as well as the number of alive individuals in that year. Your task is to help scientists solve this problem!",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of people. Each of the following n lines contain two integers b and d ( 1 \u2264 b d \u2264 10^ 9 ) representing birth and death year ( respectively) of each individual.",
    "output": "Print two integer numbers separated by blank character, y \u2014 the year with a maximum number of people alive and k \u2014 the number of people alive in year y . In the case of multiple possible solutions, print the solution with minimum year.",
    "note": "You can assume that an individual living from b to d has been born at the beginning of b and died at the beginning of d , and therefore living for d - b years.",
    "topics": [
      "data structures",
      "sortings"
    ],
    "id": "1424G"
  },
  {
    "title": "Virus",
    "url": "https://codeforces.com/problemset/problem/1423/H",
    "history": "In Bubbleland a group of special programming forces gets a top secret job to calculate the number of potentially infected people by a new unknown virus. The state has a population of n people and every day there is new information about new contacts between people. The job of special programming forces is to calculate how many contacts in the last k days a given person had. The new virus has an incubation period of k days, and after that time people consider as non- infectious. Because the new virus is an extremely dangerous, government mark as suspicious everybody who had direct or indirect contact in the last k days, independently of the order of contacts. This virus is very strange, and people can' t get durable immunity. You need to help special programming forces to calculate the number of suspicious people for a given person ( number of people who had contact with a given person) . There are 3 given inputs on beginning n where n is population, q number of queries, k virus incubation time in days. Each query is one of three types: ( x , y ) person x and person y met that day ( x = \u0338 y ) . ( z ) return the number of people in contact with z , counting himself. The end of the current day moves on to the next day.",
    "input": "The first line of input contains three integers n ( 1 \u2264 n\u2264 10^ 5 ) the number of people in the state, q ( 1 \u2264 q\u2264 5\u00d710^ 5 ) number of queries and k ( 1 \u2264 k\u2264 10^ 5 ) virus incubation time in days. Each of the next q lines starts with an integer t ( 1 \u2264 t\u2264 3 ) the type of the query. A pair of integers x and y ( 1 \u2264 x, y \u2264 n ) follows in the query of the first type ( x = \u0338 y ) . An integer i ( 1 \u2264 i\u2264 n ) follows in the query of the second type. Query of third type does not have the following number.",
    "output": "For the queries of the second type print on a separate line the current number of people in contact with a given person.",
    "note": "Pay attention if persons 1 and 2 had contact first day and next day persons 1 and 3 had contact, for k > 1 number of contacts of person 3 is 3 ( persons: 1, 2, 3) .",
    "topics": [
      "data structures",
      "divide and conquer",
      "dsu",
      "graphs"
    ],
    "id": "1423H"
  },
  {
    "title": "Growing flowers",
    "url": "https://codeforces.com/problemset/problem/1423/G",
    "history": "Sarah has always been a lover of nature, and a couple of years ago she saved up enough money to travel the world and explore all the things built by nature over its lifetime on earth. During this time she visited some truly special places which were left untouched for centuries, from watching icebergs in freezing weather to scuba- diving in oceans and admiring the sea life, residing unseen. These experiences were enhanced with breathtaking views built by mountains over time and left there for visitors to see for years on end. Over time, all these expeditions took a toll on Sarah and culminated in her decision to settle down in the suburbs and live a quiet life. However, as Sarah' s love for nature never faded, she started growing flowers in her garden in an attempt to stay connected with nature. At the beginning she planted only blue orchids, but over time she started using different flower types to add variety to her collection of flowers. This collection of flowers can be represented as an array of N flowers and the i - th of them has a type associated with it, denoted as A_ i . Each resident, passing by her collection and limited by the width of his view, can only see K contiguous flowers at each moment in time. To see the whole collection, the resident will look at the first K contiguous flowers A_ 1, A_ 2, . . . , A_ K , then shift his view by one flower and look at the next section of K contiguous flowers A_ 2, A_ 3, . . . , A_ K+ 1 and so on until they scan the whole collection, ending with section A_ N- K+ 1, . . . , A_ N- 1, A_ N . Each resident determines the beautiness of a section of K flowers as the number of distinct flower types in that section. Furthermore, the beautiness of the whole collection is calculated by summing the beautiness values of each contiguous section. Formally, beautiness B_ i of a section starting at the i - th position is calculated as B_ i = distinct( A_ i, A_ i+ 1, . . . , A_ i+ K- 1) , and beautiness of the collection B is calculated as B= B_ 1 + B_ 2 + . . . + B_ N- K+ 1 . In addition, as Sarah wants to keep her collection of flowers have a fresh feel, she can also pick two points L and R , dispose flowers between those two points and plant new flowers, all of them being the same type. You will be given Q queries and each of those queries will be of the following two types: You will be given three integers L, R, X describing that Sarah has planted flowers of type X between positions L and R inclusive. Formally collection is changed such that A[ i] = X for all i in range [ L. . R] . You will be given integer K , width of the resident' s view and you have to determine the beautiness value B resident has associated with the collection For each query of second type print the result \u2013 beautiness B of the collection.",
    "input": "First line contains two integers N and Q ( 1 \u2264 N, Q \u2264 10^ 5) \u2014 number of flowers and the number of queries, respectively. The second line contains N integers A_ 1, A_ 2, . . . , A_ N ( 1 \u2264 A_ i \u2264 10^ 9) \u2014 where A_ i represents type of the i - th flower. Each of the next Q lines describe queries and start with integer T\u2208{ 1, 2} . If T = 1 , there will be three more integers in the line L, R, X ( 1 \u2264 L, R \u2264 N; 1 \u2264 X \u2264 10^ 9) \u2014 L and R describing boundaries and X describing the flower type If T = 2 , there will be one more integer in the line K ( 1 \u2264 K \u2264 N) \u2014 resident' s width of view",
    "output": "For each query of the second type print the beautiness B of the collection.",
    "note": "Let' s look at the example. Initially the collection is [ 1, 2, 3, 4, 5] . In the first query K = 3 , we consider sections of three flowers with the first being [ 1, 2, 3] . Since beautiness of the section is the number of distinct flower types in that section, B_ 1 = 3 . Second section is [ 2, 3, 4] and B_ 2 = 3 . Third section is [ 3, 4, 5] and B_ 3 = 3 , since the flower types are all distinct. The beautiness value resident has associated with the collection is B = B_ 1 + B_ 2 + B_ 3 = 3 + 3 + 3 = 9 . After the second query, the collection becomes [ 5, 5, 3, 4, 5] . For the third query K = 4 , so we consider sections of four flowers with the first being [ 5, 5, 3, 4] . There are three distinct flower types [ 5, 3, 4] in this section, so B_ 1 = 3 . Second section [ 5, 3, 4, 5] also has 3 distinct flower types, so B_ 2 = 3 . The beautiness value resident has associated with the collection is B = B_ 1 + B_ 2 = 3 + 3 = 6 After the fourth query, the collection becomes [ 5, 5, 5, 5, 5] . For the fifth query K = 2 and in this case all the four sections are same with each of them being [ 5, 5] . Beautiness of [ 5, 5] is 1 since there is only one distinct element in this section [ 5] . Beautiness of the whole collection is B = B_ 1 + B_ 2 + B_ 3 + B_ 4 = 1 + 1 + 1 + 1 = 4",
    "topics": [
      "data structures"
    ],
    "id": "1423G"
  },
  {
    "title": "Boring Queries",
    "url": "https://codeforces.com/problemset/problem/1422/F",
    "history": "Yura owns a quite ordinary and boring array a of length n . You think there is nothing more boring than that, but Vladik doesn' t agree! In order to make Yura' s array even more boring, Vladik makes q boring queries. Each query consists of two integers x and y . Before answering a query, the bounds l and r for this query are calculated: l = ( last + x) n + 1 , r = ( last + y) n + 1 , where last is the answer on the previous query ( zero initially) , and is the remainder operation. Whenever l > r , they are swapped. After Vladik computes l and r for a query, he is to compute the least common multiple ( LCM) on the segment [ l; r] of the initial array a modulo 10^ 9 + 7 . LCM of a multiset of integers is the smallest positive integer that is divisible by all the elements of the multiset. The obtained LCM is the answer for this query. Help Vladik and compute the answer for each query!",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of the array. The second line contains n integers a_ i ( 1 \u2264 a_ i \u2264 2 \u00b7 10^ 5 ) \u2014 the elements of the array. The third line contains a single integer q ( 1 \u2264 q \u2264 10^ 5 ) \u2014 the number of queries. The next q lines contain two integers x and y each ( 1 \u2264 x, y \u2264 n ) \u2014 the description of the corresponding query.",
    "output": "Print q integers \u2014 the answers for the queries.",
    "note": "Consider the example: boundaries for first query are ( 0 + 1) 3 + 1 = 2 and ( 0 + 3) 3 + 1 = 1 . LCM for segment [ 1, 2] is equal to 6 ; boundaries for second query are ( 6 + 3) 3 + 1 = 1 and ( 6 + 3) 3 + 1 = 1 . LCM for segment [ 1, 1] is equal to 2 ; boundaries for third query are ( 2 + 2) 3 + 1 = 2 and ( 2 + 3) 3 + 1 = 3 . LCM for segment [ 2, 3] is equal to 15 ; boundaries for fourth query are ( 15 + 2) 3 + 1 = 3 and ( 15 + 3) 3 + 1 = 1 . LCM for segment [ 1, 3] is equal to 30 .",
    "topics": [
      "data structures",
      "math",
      "number theory"
    ],
    "id": "1422F"
  },
  {
    "title": "Rescue Nibel!",
    "url": "https://codeforces.com/problemset/problem/1420/D",
    "history": "Ori and Sein have overcome many difficult challenges. They finally lit the Shrouded Lantern and found Gumon Seal, the key to the Forlorn Ruins. When they tried to open the door to the ruins. . . nothing happened. Ori was very surprised, but Sein gave the explanation quickly: clever Gumon decided to make an additional defence for the door. There are n lamps with Spirit Tree' s light. Sein knows the time of turning on and off for the i - th lamp \u2014 l_ i and r_ i respectively. To open the door you have to choose k lamps in such a way that there will be a moment of time when they all will be turned on. While Sein decides which of the k lamps to pick, Ori is interested: how many ways there are to pick such k lamps that the door will open? It may happen that Sein may be wrong and there are no such k lamps. The answer might be large, so print it modulo 998 244 353 .",
    "input": "First line contains two integers n and k ( 1 \u2264 n \u2264 3 \u00b7 10^ 5 , 1 \u2264 k \u2264 n ) \u2014 total number of lamps and the number of lamps that must be turned on simultaneously. Next n lines contain two integers l_ i ans r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 10^ 9 ) \u2014 period of time when i - th lamp is turned on.",
    "output": "Print one integer \u2014 the answer to the task modulo 998 244 353 .",
    "note": "In first test case there are nine sets of k lamps: ( 1, 2, 3) , ( 1, 2, 4) , ( 1, 2, 5) , ( 1, 2, 6) , ( 1, 3, 6) , ( 1, 4, 6) , ( 2, 3, 6) , ( 2, 4, 6) , ( 2, 6, 7) . In second test case k= 1 , so the answer is 3. In third test case there are no such pairs of lamps. In forth test case all lamps are turned on in a time 3 , so the answer is 1. In fifth test case there are seven sets of k lamps: ( 1, 2) , ( 1, 3) , ( 2, 3) , ( 2, 4) , ( 3, 4) , ( 3, 5) , ( 4, 5) .",
    "topics": [
      "combinatorics",
      "data structures",
      "sortings"
    ],
    "id": "1420D"
  },
  {
    "title": "Pok\u00e9mon Army (hard version)",
    "url": "https://codeforces.com/problemset/problem/1420/C2",
    "history": "This is the hard version of the problem. The difference between the versions is that the easy version has no swap operations. You can make hacks only if all versions of the problem are solved. Pikachu is a cute and friendly poke\u0301mon living in the wild pikachu herd. But it has become known recently that infamous team R wanted to steal all these poke\u0301mon! Poke\u0301mon trainer Andrew decided to help Pikachu to build a poke\u0301mon army to resist. First, Andrew counted all the poke\u0301mon \u2014 there were exactly n pikachu. The strength of the i - th poke\u0301mon is equal to a_ i , and all these numbers are distinct. As an army, Andrew can choose any non- empty subsequence of pokemons. In other words, Andrew chooses some array b from k indices such that 1 \u2264 b_ 1 < b_ 2 < . . . < b_ k \u2264 n , and his army will consist of poke\u0301mons with forces a_ b_ 1, a_ b_ 2, . . . , a_ b_ k . The strength of the army is equal to the alternating sum of elements of the subsequence; that is, a_ b_ 1 - a_ b_ 2 + a_ b_ 3 - a_ b_ 4 + . . . . Andrew is experimenting with poke\u0301mon order. He performs q operations. In i - th operation Andrew swaps l_ i - th and r_ i - th poke\u0301mon. Andrew wants to know the maximal stregth of the army he can achieve with the initial poke\u0301mon placement. He also needs to know the maximal strength after each operation. Help Andrew and the poke\u0301mon, or team R will realize their tricky plan!",
    "input": "Each test contains multiple test cases. The first line contains one positive integer t ( 1 \u2264 t \u2264 10^ 3 ) denoting the number of test cases. Description of the test cases follows. The first line of each test case contains two integers n and q ( 1 \u2264 n \u2264 3 \u00b7 10^ 5, 0 \u2264 q \u2264 3 \u00b7 10^ 5 ) denoting the number of poke\u0301mon and number of operations respectively. The second line contains n distinct positive integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) denoting the strengths of the poke\u0301mon. i - th of the last q lines contains two positive integers l_ i and r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 n ) denoting the indices of poke\u0301mon that were swapped in the i - th operation. It is guaranteed that the sum of n over all test cases does not exceed 3 \u00b7 10^ 5 , and the sum of q over all test cases does not exceed 3 \u00b7 10^ 5 .",
    "output": "For each test case, print q+ 1 integers: the maximal strength of army before the swaps and after each swap.",
    "note": "Let' s look at the third test case: Initially we can build an army in such way: [ 1 2 5 4 3 6 7] , its strength will be 5- 3+ 7= 9 . After first operation we can build an army in such way: [ 2 1 5 4 3 6 7] , its strength will be 2- 1+ 5- 3+ 7= 10 . After second operation we can build an army in such way: [ 2 1 5 4 3 7 6] , its strength will be 2- 1+ 5- 3+ 7= 10 . After third operation we can build an army in such way: [ 2 1 4 5 3 7 6] , its strength will be 2- 1+ 5- 3+ 7= 10 . After forth operation we can build an army in such way: [ 1 2 4 5 3 7 6] , its strength will be 5- 3+ 7= 9 . After all operations we can build an army in such way: [ 1 4 2 5 3 7 6] , its strength will be 4- 2+ 5- 3+ 7= 11 .",
    "topics": [
      "data structures",
      "divide and conquer",
      "dp",
      "greedy",
      "implementation"
    ],
    "id": "1420C2"
  },
  {
    "title": "Rain of Fire",
    "url": "https://codeforces.com/problemset/problem/1419/F",
    "history": "There are n detachments on the surface, numbered from 1 to n , the i - th detachment is placed in a point with coordinates ( x_ i, y_ i) . All detachments are placed in different points. Brimstone should visit each detachment at least once. You can choose the detachment where Brimstone starts. To move from one detachment to another he should first choose one of four directions of movement ( up, right, left or down) and then start moving with the constant speed of one unit interval in a second until he comes to a detachment. After he reaches an arbitrary detachment, he can repeat the same process. Each t seconds an orbital strike covers the whole surface, so at that moment Brimstone should be in a point where some detachment is located. He can stay with any detachment as long as needed. Brimstone is a good commander, that' s why he can create at most one detachment and place it in any empty point with integer coordinates he wants before his trip. Keep in mind that Brimstone will need to visit this detachment, too. Help Brimstone and find such minimal t that it is possible to check each detachment. If there is no such t report about it.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 1000) \u2014 the number of detachments. In each of the next n lines there is a pair of integers x_ i , y_ i ( | x_ i| , | y_ i| \u2264 10^ 9) \u2014 the coordinates of i - th detachment. It is guaranteed that all points are different.",
    "output": "Output such minimal integer t that it is possible to check all the detachments adding at most one new detachment. If there is no such t , print - 1 .",
    "note": "In the first test it is possible to place a detachment in ( 0, 0) , so that it is possible to check all the detachments for t = 100 . It can be proven that it is impossible to check all detachments for t < 100 ; thus the answer is 100 . In the second test, there is no such t that it is possible to check all detachments, even with adding at most one new detachment, so the answer is - 1 . In the third test, it is possible to place a detachment in ( 1, 0) , so that Brimstone can check all the detachments for t = 2 . It can be proven that it is the minimal such t . In the fourth test, there is no need to add any detachments, because the answer will not get better ( t = 2 ) . It can be proven that it is the minimal such t .",
    "topics": [
      "binary search",
      "data structures",
      "dfs and similar",
      "dsu",
      "graphs",
      "implementation"
    ],
    "id": "1419F"
  },
  {
    "title": "Three Occurrences",
    "url": "https://codeforces.com/problemset/problem/1418/G",
    "history": "You are given an array a consisting of n integers. We denote the subarray a[ l. . r] as the array [ a_ l, a_ l + 1, . . . , a_ r] ( 1 \u2264 l \u2264 r \u2264 n ) . A subarray is considered good if every integer that occurs in this subarray occurs there exactly thrice. For example, the array [ 1, 2, 2, 2, 1, 1, 2, 2, 2] has three good subarrays: a[ 1. . 6] = [ 1, 2, 2, 2, 1, 1] ; a[ 2. . 4] = [ 2, 2, 2] ; a[ 7. . 9] = [ 2, 2, 2] . Calculate the number of good subarrays of the given array a .",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 5 \u00b7 10^ 5 ) . The second line contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) .",
    "output": "Print one integer \u2014 the number of good subarrays of the array a .",
    "note": "",
    "topics": [
      "data structures",
      "divide and conquer",
      "hashing",
      "two pointers"
    ],
    "id": "1418G"
  },
  {
    "title": "Equal Product",
    "url": "https://codeforces.com/problemset/problem/1418/F",
    "history": "You are given four integers n , m , l and r . Let' s name a tuple ( x_ 1, y_ 1, x_ 2, y_ 2) as good if: 1 \u2264 x_ 1 < x_ 2 \u2264 n ; 1 \u2264 y_ 2 < y_ 1 \u2264 m ; x_ 1 \u00b7 y_ 1 = x_ 2 \u00b7 y_ 2 ; l \u2264 x_ 1 \u00b7 y_ 1 \u2264 r . Find any good tuple for each x_ 1 from 1 to n inclusive.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 2 \u00b7 10^ 5 ) . The second line contains two integers l and r ( 1 \u2264 l \u2264 r \u2264 nm ) .",
    "output": "For each x_ 1 from 1 to n inclusive: if there are no such four integers, print - 1 ; otherwise, print four integers x_ 1 , y_ 1 , x_ 2 and y_ 2 . If there are multiple answers, print any of them.",
    "note": "",
    "topics": [
      "data structures",
      "math",
      "number theory",
      "two pointers"
    ],
    "id": "1418F"
  },
  {
    "title": "Trash Problem",
    "url": "https://codeforces.com/problemset/problem/1418/D",
    "history": "Vova decided to clean his room. The room can be represented as the coordinate axis OX . There are n piles of trash in the room, coordinate of the i - th pile is the integer p_ i . All piles have different coordinates. Let' s define a total cleanup as the following process. The goal of this process is to collect all the piles in no more than two different x coordinates. To achieve this goal, Vova can do several ( possibly, zero) moves. During one move, he can choose some x and move all piles from x to x+ 1 or x- 1 using his broom. Note that he can' t choose how many piles he will move. Also, there are two types of queries: 0 x \u2014 remove a pile of trash from the coordinate x . It is guaranteed that there is a pile in the coordinate x at this moment. 1 x \u2014 add a pile of trash to the coordinate x . It is guaranteed that there is no pile in the coordinate x at this moment. Note that it is possible that there are zero piles of trash in the room at some moment. Vova wants to know the minimum number of moves he can spend if he wants to do a total cleanup before any queries. He also wants to know this number of moves after applying each query. Queries are applied in the given order. Note that the total cleanup doesn' t actually happen and doesn' t change the state of piles. It is only used to calculate the number of moves. For better understanding, please read the Notes section below to see an explanation for the first example.",
    "input": "The first line of the input contains two integers n and q ( 1 \u2264 n, q \u2264 10^ 5 ) \u2014 the number of piles in the room before all queries and the number of queries, respectively. The second line of the input contains n distinct integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 10^ 9 ) , where p_ i is the coordinate of the i - th pile. The next q lines describe queries. The i - th query is described with two integers t_ i and x_ i ( 0 \u2264 t_ i \u2264 1; 1 \u2264 x_ i \u2264 10^ 9 ) , where t_ i is 0 if you need to remove a pile from the coordinate x_ i and is 1 if you need to add a pile to the coordinate x_ i . It is guaranteed that for t_ i = 0 there is such pile in the current set of piles and for t_ i = 1 there is no such pile in the current set of piles.",
    "output": "Print q+ 1 integers: the minimum number of moves Vova needs to do a total cleanup before the first query and after each of q queries.",
    "note": "Consider the first example. Initially, the set of piles is [ 1, 2, 6, 8, 10] . The answer before the first query is 5 because you can move all piles from 1 to 2 with one move, all piles from 10 to 8 with 2 moves and all piles from 6 to 8 with 2 moves. After the first query, the set becomes [ 1, 2, 4, 6, 8, 10] . Then the answer is 7 because you can move all piles from 6 to 4 with 2 moves, all piles from 4 to 2 with 2 moves, all piles from 2 to 1 with 1 move and all piles from 10 to 8 with 2 moves. After the second query, the set of piles becomes [ 1, 2, 4, 6, 8, 9, 10] and the answer is the same ( and the previous sequence of moves can be applied to the current set of piles) . After the third query, the set of piles becomes [ 1, 2, 4, 8, 9, 10] and the answer is 5 because you can move all piles from 1 to 2 with 1 move, all piles from 2 to 4 with 2 moves, all piles from 10 to 9 with 1 move and all piles from 9 to 8 with 1 move. After the fourth query, the set becomes [ 1, 2, 4, 8, 9] and the answer is almost the same ( the previous sequence of moves can be applied without moving piles from 10 ) . After the fifth query, the set becomes [ 1, 2, 4, 8, 9, 100] . You can move all piles from 1 and further to 9 and keep 100 at its place. So the answer is 8 . After the sixth query, the set becomes [ 1, 2, 4, 8, 9, 50, 100] . The answer is 49 and can be obtained with almost the same sequence of moves as after the previous query. The only difference is that you need to move all piles from 50 to 9 too.",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "1418D"
  },
  {
    "title": "Split",
    "url": "https://codeforces.com/problemset/problem/1416/E",
    "history": "One day, BThero decided to play around with arrays and came up with the following problem: You are given an array a , which consists of n positive integers. The array is numerated 1 through n . You execute the following procedure exactly once: You create a new array b which consists of 2n positive integers, where for each 1 \u2264 i \u2264 n the condition b_ 2i- 1+ b_ 2i = a_ i holds. For example, for the array a = [ 6, 8, 2] you can create b = [ 2, 4, 4, 4, 1, 1] . You merge consecutive equal numbers in b . For example, b = [ 2, 4, 4, 4, 1, 1] becomes b = [ 2, 4, 1] . Find and print the minimum possible value of | b| ( size of b ) which can be achieved at the end of the procedure. It can be shown that under the given constraints there is at least one way to construct b .",
    "input": "The first line of the input file contains a single integer T ( 1 \u2264 T \u2264 5 \u00b7 10^ 5 ) denoting the number of test cases. The description of T test cases follows. The first line of each test contains a single integer n ( 1 \u2264 n \u2264 5 \u00b7 10^ 5 ) . The second line contains n space- separated integers a_ 1 , a_ 2 , . . . , a_ n ( 2 \u2264 a_ i \u2264 10^ 9 ) . It is guaranteed that \u2211n over all test cases does not exceed 5 \u00b7 10^ 5 .",
    "output": "For each test case, print a single line containing one integer \u2014 the minimum possible value of | b| .",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "greedy"
    ],
    "id": "1416E"
  },
  {
    "title": "Graph and Queries",
    "url": "https://codeforces.com/problemset/problem/1416/D",
    "history": "You are given an undirected graph consisting of n vertices and m edges. Initially there is a single integer written on every vertex: the vertex i has p_ i written on it. All p_ i are distinct integers from 1 to n . You have to process q queries of two types: 1 v \u2014 among all vertices reachable from the vertex v using the edges of the graph ( including the vertex v itself) , find a vertex u with the largest number p_ u written on it, print p_ u and replace p_ u with 0 ; 2 i \u2014 delete the i - th edge from the graph. Note that, in a query of the first type, it is possible that all vertices reachable from v have 0 written on them. In this case, u is not explicitly defined, but since the selection of u does not affect anything, you can choose any vertex reachable from v and print its value ( which is 0 ) .",
    "input": "The first line contains three integers n , m and q ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ; 1 \u2264 m \u2264 3 \u00b7 10^ 5 ; 1 \u2264 q \u2264 5 \u00b7 10^ 5 ) . The second line contains n distinct integers p_ 1 , p_ 2 , . . . , p_ n , where p_ i is the number initially written on vertex i ( 1 \u2264 p_ i \u2264 n ) . Then m lines follow, the i - th of them contains two integers a_ i and b_ i ( 1 \u2264 a_ i, b_ i \u2264 n , a_ i b_ i ) and means that the i - th edge connects vertices a_ i and b_ i . It is guaranteed that the graph does not contain multi- edges. Then q lines follow, which describe the queries. Each line is given by one of the following formats: 1 v \u2014 denotes a query of the first type with a vertex v ( 1 \u2264 v \u2264 n ) . 2 i \u2014 denotes a query of the second type with an edge i ( 1 \u2264 i \u2264 m ) . For each query of the second type, it is guaranteed that the corresponding edge is not deleted from the graph yet.",
    "output": "For every query of the first type, print the value of p_ u written on the chosen vertex u .",
    "note": "",
    "topics": [
      "data structures",
      "dsu",
      "graphs",
      "implementation",
      "trees"
    ],
    "id": "1416D"
  },
  {
    "title": "XOR Inverse",
    "url": "https://codeforces.com/problemset/problem/1416/C",
    "history": "You are given an array a consisting of n non- negative integers. You have to choose a non- negative integer x and form a new array b of size n according to the following rule: for all i from 1 to n , b_ i = a_ i \u2295 x ( \u2295 denotes the operation bitwise XOR) . An inversion in the b array is a pair of integers i and j such that 1 \u2264 i < j \u2264 n and b_ i > b_ j . You should choose x in such a way that the number of inversions in b is minimized. If there are several options for x \u2014 output the smallest one.",
    "input": "First line contains a single integer n ( 1 \u2264 n \u2264 3 \u00b7 10^ 5 ) \u2014 the number of elements in a . Second line contains n space- separated integers a_ 1 , a_ 2 , . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is the i - th element of a .",
    "output": "Output two integers: the minimum possible number of inversions in b , and the minimum possible value of x , which achieves those number of inversions.",
    "note": "In the first sample it is optimal to leave the array as it is by choosing x = 0 . In the second sample the selection of x = 14 results in b : [ 4, 9, 7, 4, 9, 11, 11, 13, 11] . It has 4 inversions: i = 2 , j = 3 ; i = 2 , j = 4 ; i = 3 , j = 4 ; i = 8 , j = 9 . In the third sample the selection of x = 8 results in b : [ 0, 2, 11] . It has no inversions.",
    "topics": [
      "bitmasks",
      "data structures",
      "divide and conquer",
      "dp",
      "greedy",
      "math",
      "sortings",
      "strings",
      "trees"
    ],
    "id": "1416C"
  },
  {
    "title": "k-Amazing Numbers",
    "url": "https://codeforces.com/problemset/problem/1416/A",
    "history": "You are given an array a consisting of n integers numbered from 1 to n . Let' s define the k - amazing number of the array as the minimum number that occurs in all of the subsegments of the array having length k ( recall that a subsegment of a of length k is a contiguous part of a containing exactly k elements) . If there is no integer occuring in all subsegments of length k for some value of k , then the k - amazing number is - 1 . For each k from 1 to n calculate the k - amazing number of the array a .",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Then t test cases follow. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 3 \u00b7 10^ 5 ) \u2014 the number of elements in the array. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 the elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 3 \u00b7 10^ 5 .",
    "output": "For each test case print n integers, where the i - th integer is equal to the i - amazing number of the array.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "implementation",
      "two pointers"
    ],
    "id": "1416A"
  },
  {
    "title": "Roads and Ramen",
    "url": "https://codeforces.com/problemset/problem/1413/F",
    "history": "In the Land of Fire there are n villages and n- 1 bidirectional road, and there is a path between any pair of villages by roads. There are only two types of roads: stone ones and sand ones. Since the Land of Fire is constantly renovating, every morning workers choose a single road and flip its type ( so it becomes a stone road if it was a sand road and vice versa) . Also everyone here loves ramen, that' s why every morning a ramen pavilion is set in the middle of every stone road, and at the end of each day all the pavilions are removed. For each of the following m days, after another road is flipped, Naruto and Jiraiya choose a simple path \u2014 that is, a route which starts in a village and ends in a ( possibly, the same) village, and doesn' t contain any road twice. Since Naruto and Jiraiya also love ramen very much, they buy a single cup of ramen on each stone road and one of them eats it. Since they don' t want to offend each other, they only choose routes where they can eat equal number of ramen cups. Since they both like traveling, they choose any longest possible path. After every renovation find the maximal possible length of a path ( that is, the number of roads in it) they can follow.",
    "input": "The first line contains the only positive integer n ( 2 \u2264 n \u2264 500 000 ) standing for the number of villages in the Land of Fire. Each of the following ( n- 1) lines contains a description of another road, represented as three positive integers u , v and t ( 1 \u2264 u, v \u2264 n , t \u2208{ 0, 1} ) . The first two numbers denote the villages connected by the road, and the third denotes the initial type of the road: 0 for the sand one and 1 for the stone one. Roads are numbered from 1 to ( n- 1) in the order from the input. The following line contains a positive integer m ( 1 \u2264 m \u2264 500 000 ) standing for the number of days Naruto and Jiraiya travel for. Each of the following m lines contains the single integer id ( 1 \u2264 id \u2264 n- 1 ) standing for the index of the road whose type is flipped on the morning of corresponding day. It is guaranteed that there is a road path between any pair of villages.",
    "output": "Output m lines. In the i - th of them print the only integer denoting the maximal possible length of any valid path on the i - th day.",
    "note": "After the renovation of the 3 - rd road the longest path consists of the roads 1 , 2 and 4 . After the renovation of the 4 - th road one of the longest paths consists of the roads 1 and 2 . After the renovation of the 1 - st road one of the longest paths consists of the roads 1 , 2 and 3 . After the renovation of the 3 - rd road the longest path consists of the roads 1 , 2 and 4 . After the renovation of the 4 - rd road one of the longest paths consists of the roads 2 and 4 .",
    "topics": [
      "data structures",
      "trees"
    ],
    "id": "1413F"
  },
  {
    "title": "Shurikens",
    "url": "https://codeforces.com/problemset/problem/1413/D",
    "history": "Tenten runs a weapon shop for ninjas. Today she is willing to sell n shurikens which cost 1 , 2 , . . . , n ryo ( local currency) . During a day, Tenten will place the shurikens onto the showcase, which is empty at the beginning of the day. Her job is fairly simple: sometimes Tenten places another shuriken ( from the available shurikens) on the showcase, and sometimes a ninja comes in and buys a shuriken from the showcase. Since ninjas are thrifty, they always buy the cheapest shuriken from the showcase. Tenten keeps a record for all events, and she ends up with a list of the following types of records: + means that she placed another shuriken on the showcase; - x means that the shuriken of price x was bought. Today was a lucky day, and all shurikens were bought. Now Tenten wonders if her list is consistent, and what could be a possible order of placing the shurikens on the showcase. Help her to find this out!",
    "input": "The first line contains the only integer n ( 1\u2264 n\u2264 10^ 5 ) standing for the number of shurikens. The following 2n lines describe the events in the format described above. It' s guaranteed that there are exactly n events of the first type, and each price from 1 to n occurs exactly once in the events of the second type.",
    "output": "If the list is consistent, print \" YES\" . Otherwise ( that is, if the list is contradictory and there is no valid order of shurikens placement) , print \" NO\" . In the first case the second line must contain n space- separated integers denoting the prices of shurikens in order they were placed. If there are multiple answers, print any.",
    "note": "In the first example Tenten first placed shurikens with prices 4 and 2 . After this a customer came in and bought the cheapest shuriken which costed 2 . Next, Tenten added a shuriken with price 3 on the showcase to the already placed 4 - ryo. Then a new customer bought this 3 - ryo shuriken. After this she added a 1 - ryo shuriken. Finally, the last two customers bought shurikens 1 and 4 , respectively. Note that the order [ 2, 4, 3, 1] is also valid. In the second example the first customer bought a shuriken before anything was placed, which is clearly impossible. In the third example Tenten put all her shurikens onto the showcase, after which a customer came in and bought a shuriken with price 2 . This is impossible since the shuriken was not the cheapest, we know that the 1 - ryo shuriken was also there.",
    "topics": [
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "1413D"
  },
  {
    "title": "Rainbow Triples",
    "url": "https://codeforces.com/problemset/problem/1408/H",
    "history": "You are given a sequence a_ 1, a_ 2, . . . , a_ n of non- negative integers. You need to find the largest number m of triples ( i_ 1, j_ 1, k_ 1) , ( i_ 2, j_ 2, k_ 2) , . . . , ( i_ m, j_ m, k_ m) such that: 1 \u2264 i_ p < j_ p < k_ p \u2264 n for each p in 1, 2, . . . , m ; a_ i_ p = a_ k_ p = 0 , a_ j_ p= \u0338 0 ; all a_ j_ 1, a_ j_ 2, . . . , a_ j_ m are different; all i_ 1, j_ 1, k_ 1, i_ 2, j_ 2, k_ 2, . . . , i_ m, j_ m, k_ m are different.",
    "input": "The first line of input contains one integer t ( 1 \u2264 t \u2264 500 000 ) : the number of test cases. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 500 000 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 n ) . The total sum of n is at most 500 000 .",
    "output": "For each test case, print one integer m : the largest number of proper triples that you can find.",
    "note": "In the first two test cases, there are not enough elements even for a single triple, so the answer is 0 . In the third test case we can select one triple ( 1, 2, 3) . In the fourth test case we can select two triples ( 1, 3, 5) and ( 2, 4, 6) . In the fifth test case we can select one triple ( 1, 2, 3) . We can' t select two triples ( 1, 2, 3) and ( 4, 5, 6) , because a_ 2 = a_ 5 .",
    "topics": [
      "binary search",
      "data structures",
      "flows",
      "greedy"
    ],
    "id": "1408H"
  },
  {
    "title": "Avoid Rainbow Cycles",
    "url": "https://codeforces.com/problemset/problem/1408/E",
    "history": "You are given m sets of integers A_ 1, A_ 2, . . . , A_ m ; elements of these sets are integers between 1 and n , inclusive. There are two arrays of positive integers a_ 1, a_ 2, . . . , a_ m and b_ 1, b_ 2, . . . , b_ n . In one operation you can delete an element j from the set A_ i and pay a_ i + b_ j coins for that. You can make several ( maybe none) operations ( some sets can become empty) . After that, you will make an edge- colored undirected graph consisting of n vertices. For each set A_ i you will add an edge ( x, y) with color i for all x, y \u2208 A_ i and x < y . Some pairs of vertices can be connected with more than one edge, but such edges have different colors. You call a cycle i_ 1 \u2192 e_ 1 \u2192 i_ 2 \u2192 e_ 2 \u2192. . . \u2192 i_ k \u2192 e_ k \u2192 i_ 1 ( e_ j is some edge connecting vertices i_ j and i_ j+ 1 in this graph) rainbow if all edges on it have different colors. Find the minimum number of coins you should pay to get a graph without rainbow cycles.",
    "input": "The first line contains two integers m and n ( 1 \u2264 m, n \u2264 10^ 5 ) , the number of sets and the number of vertices in the graph. The second line contains m integers a_ 1, a_ 2, . . . , a_ m ( 1 \u2264 a_ i \u2264 10^ 9 ) . The third line contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 10^ 9 ) . In the each of the next of m lines there are descriptions of sets. In the i - th line the first integer s_ i ( 1 \u2264 s_ i \u2264 n ) is equal to the size of A_ i . Then s_ i integers follow: the elements of the set A_ i . These integers are from 1 to n and distinct. It is guaranteed that the sum of s_ i for all 1 \u2264 i \u2264 m does not exceed 2 \u00b7 10^ 5 .",
    "output": "Print one integer: the minimum number of coins you should pay for operations to avoid rainbow cycles in the obtained graph.",
    "note": "In the first test, you can make such operations: Delete element 1 from set 1 . You should pay a_ 1 + b_ 1 = 5 coins for that. Delete element 1 from set 2 . You should pay a_ 2 + b_ 1 = 6 coins for that. You pay 11 coins in total. After these operations, the first and the second sets will be equal to { 2} and the third set will be equal to { 1, 2} . So, the graph will consist of one edge ( 1, 2) of color 3 . In the second test, you can make such operations: Delete element 1 from set 1 . You should pay a_ 1 + b_ 1 = 11 coins for that. Delete element 4 from set 2 . You should pay a_ 2 + b_ 4 = 13 coins for that. Delete element 7 from set 3 . You should pay a_ 3 + b_ 7 = 13 coins for that. Delete element 4 from set 4 . You should pay a_ 4 + b_ 4 = 16 coins for that. Delete element 7 from set 6 . You should pay a_ 6 + b_ 7 = 13 coins for that. You pay 66 coins in total. After these operations, the sets will be: { 2, 3} ; { 1} ; { 1, 3} ; { 3} ; { 3, 4, 5, 6, 7} ; { 5} ; { 8} . We will get the graph: There are no rainbow cycles in it.",
    "topics": [
      "data structures",
      "dsu",
      "graphs",
      "greedy",
      "sortings",
      "trees"
    ],
    "id": "1408E"
  },
  {
    "title": "Searchlights",
    "url": "https://codeforces.com/problemset/problem/1408/D",
    "history": "There are n robbers at coordinates ( a_ 1, b_ 1) , ( a_ 2, b_ 2) , . . . , ( a_ n, b_ n) and m searchlight at coordinates ( c_ 1, d_ 1) , ( c_ 2, d_ 2) , . . . , ( c_ m, d_ m) . In one move you can move each robber to the right ( increase a_ i of each robber by one) or move each robber up ( increase b_ i of each robber by one) . Note that you should either increase all a_ i or all b_ i , you can' t increase a_ i for some points and b_ i for some other points. Searchlight j can see a robber i if a_ i \u2264 c_ j and b_ i \u2264 d_ j . A configuration of robbers is safe if no searchlight can see a robber ( i. e. if there is no pair i, j such that searchlight j can see a robber i ) . What is the minimum number of moves you need to perform to reach a safe configuration?",
    "input": "The first line of input contains two integers n and m ( 1 \u2264 n, m \u2264 2000 ) : the number of robbers and the number of searchlight. Each of the next n lines contains two integers a_ i , b_ i ( 0 \u2264 a_ i, b_ i \u2264 10^ 6 ) , coordinates of robbers. Each of the next m lines contains two integers c_ i , d_ i ( 0 \u2264 c_ i, d_ i \u2264 10^ 6 ) , coordinates of searchlights.",
    "output": "Print one integer: the minimum number of moves you need to perform to reach a safe configuration.",
    "note": "In the first test, you can move each robber to the right three times. After that there will be one robber in the coordinates ( 3, 0) . The configuration of the robbers is safe, because the only searchlight can' t see the robber, because it is in the coordinates ( 2, 3) and 3 > 2 . In the second test, you can move each robber to the right two times and two times up. After that robbers will be in the coordinates ( 3, 8) , ( 8, 3) . It' s easy the see that the configuration of the robbers is safe. It can be proved that you can' t reach a safe configuration using no more than 3 moves.",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "dp",
      "implementation",
      "sortings",
      "two pointers"
    ],
    "id": "1408D"
  },
  {
    "title": "Discrete Centrifugal Jumps",
    "url": "https://codeforces.com/problemset/problem/1407/D",
    "history": "There are n beautiful skyscrapers in New York, the height of the i - th one is h_ i . Today some villains have set on fire first n - 1 of them, and now the only safety building is n - th skyscraper. Let' s call a jump from i - th skyscraper to j - th ( i < j ) discrete, if all skyscrapers between are strictly lower or higher than both of them. Formally, jump is discrete, if i < j and one of the following conditions satisfied: i + 1 = j max( h_ i + 1, . . . , h_ j - 1) < min( h_ i, h_ j) max( h_ i, h_ j) < min( h_ i + 1, . . . , h_ j - 1) . At the moment, Vasya is staying on the first skyscraper and wants to live a little longer, so his goal is to reach n - th skyscraper with minimal count of discrete jumps. Help him with calcualting this number.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 3 \u00b7 10^ 5 ) \u2014 total amount of skyscrapers. The second line contains n integers h_ 1, h_ 2, . . . , h_ n ( 1 \u2264 h_ i \u2264 10^ 9 ) \u2014 heights of skyscrapers.",
    "output": "Print single number k \u2014 minimal amount of discrete jumps. We can show that an answer always exists.",
    "note": "In the first testcase, Vasya can jump in the following way: 1 \u2192 2 \u2192 4 \u2192 5 . In the second and third testcases, we can reach last skyscraper in one jump. Sequence of jumps in the fourth testcase: 1 \u2192 3 \u2192 5 .",
    "topics": [
      "data structures",
      "dp",
      "graphs"
    ],
    "id": "1407D"
  },
  {
    "title": "Three Sequences",
    "url": "https://codeforces.com/problemset/problem/1406/D",
    "history": "You are given a sequence of n integers a_ 1, a_ 2, . . . , a_ n . You have to construct two sequences of integers b and c with length n that satisfy: for every i ( 1\u2264 i\u2264 n ) b_ i+ c_ i= a_ i b is non- decreasing, which means that for every 1< i\u2264 n , b_ i\u2265 b_ i- 1 must hold c is non- increasing, which means that for every 1< i\u2264 n , c_ i\u2264 c_ i- 1 must hold You have to minimize max( b_ i, c_ i) . In other words, you have to minimize the maximum number in sequences b and c . Also there will be q changes, the i - th change is described by three integers l, r, x . You should add x to a_ l, a_ l+ 1, . . . , a_ r . You have to find the minimum possible value of max( b_ i, c_ i) for the initial sequence and for sequence after each change.",
    "input": "The first line contains an integer n ( 1\u2264 n\u2264 10^ 5 ) . The secound line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1\u2264 i\u2264 n , - 10^ 9\u2264 a_ i\u2264 10^ 9 ) . The third line contains an integer q ( 1\u2264 q\u2264 10^ 5 ) . Each of the next q lines contains three integers l, r, x ( 1\u2264 l\u2264 r\u2264 n, - 10^ 9\u2264 x\u2264 10^ 9 ) , desribing the next change.",
    "output": "Print q+ 1 lines. On the i - th ( 1 \u2264 i \u2264 q+ 1 ) line, print the answer to the problem for the sequence after i- 1 changes.",
    "note": "In the first test: The initial sequence a = ( 2, - 1, 7, 3) . Two sequences b= ( - 3, - 3, 5, 5) , c= ( 5, 2, 2, - 2) is a possible choice. After the first change a = ( 2, - 4, 4, 0) . Two sequences b= ( - 3, - 3, 5, 5) , c= ( 5, - 1, - 1, - 5) is a possible choice. After the second change a = ( 2, - 4, 6, 2) . Two sequences b= ( - 4, - 4, 6, 6) , c= ( 6, 0, 0, - 4) is a possible choice.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "math"
    ],
    "id": "1406D"
  },
  {
    "title": "Fixed Point Removal",
    "url": "https://codeforces.com/problemset/problem/1404/C",
    "history": "Let a_ 1, . . . , a_ n be an array of n positive integers. In one operation, you can choose an index i such that a_ i = i , and remove a_ i from the array ( after the removal, the remaining parts are concatenated) . The weight of a is defined as the maximum number of elements you can remove. You must answer q independent queries ( x, y) : after replacing the x first elements of a and the y last elements of a by n+ 1 ( making them impossible to remove) , what would be the weight of a ?",
    "input": "The first line contains two integers n and q ( 1 \u2264 n, q \u2264 3 \u00b7 10^ 5 ) \u2014 the length of the array and the number of queries. The second line contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 elements of the array. The i - th of the next q lines contains two integers x and y ( x, y \u2265 0 and x+ y < n ) .",
    "output": "Print q lines, i - th line should contain a single integer \u2014 the answer to the i - th query.",
    "note": "Explanation of the first query: After making first x = 3 and last y = 1 elements impossible to remove, a becomes [ \u00d7, \u00d7, \u00d7, 9, 5, 4, 6, 5, 7, 8, 3, 11, \u00d7] ( we represent 14 as \u00d7 for clarity) . Here is a strategy that removes 5 elements ( the element removed is colored in red) : [ \u00d7, \u00d7, \u00d7, 9, 5, 4, 6, 5, 7, 8, 3, 11, \u00d7] [ \u00d7, \u00d7, \u00d7, 9, 4, 6, 5, 7, 8, 3, 11, \u00d7] [ \u00d7, \u00d7, \u00d7, 9, 4, 6, 5, 7, 8, 3, \u00d7] [ \u00d7, \u00d7, \u00d7, 9, 4, 5, 7, 8, 3, \u00d7] [ \u00d7, \u00d7, \u00d7, 9, 4, 5, 7, 3, \u00d7] [ \u00d7, \u00d7, \u00d7, 9, 4, 5, 3, \u00d7] ( final state) It is impossible to remove more than 5 elements, hence the weight is 5 .",
    "topics": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "greedy",
      "two pointers"
    ],
    "id": "1404C"
  },
  {
    "title": "Spring cleaning",
    "url": "https://codeforces.com/problemset/problem/1403/B",
    "history": "Spring cleanings are probably the most boring parts of our lives, except this year, when Flo\u0301ra and her mother found a dusty old tree graph under the carpet. This tree has N nodes ( numbered from 1 to N ) , connected by N- 1 edges. The edges gathered too much dust, so Flo\u0301ra' s mom decided to clean them. Cleaning the edges of an arbitrary tree is done by repeating the following process: She chooses 2 different leaves ( a node is a leaf if it is connected to exactly one other node by an edge) , and cleans every edge lying on the shortest path between them. If this path has d edges, then the cost of cleaning this path is d . She doesn' t want to harm the leaves of the tree, so she chooses every one of them at most once. A tree is cleaned when all of its edges are cleaned. The cost of this is the sum of costs for all cleaned paths. Flo\u0301ra thinks the tree they found is too small and simple, so she imagines Q variations of it. In the i - th variation, she adds a total of D_ i extra leaves to the original tree: for each new leaf, she chooses a node from the original tree, and connects that node with the new leaf by an edge. Note that some nodes may stop being leaves during this step. For all these Q variations, we are interested in the minimum cost that is required to clean the tree. Scoring [ Subtask Points Constraints; 1 0 samples; 2 9 Q = 1, there is an edge between node 1 and i for every i ( 2 \u2264 i \u2264 N) , ; Flo\u0301ra can' t add extra leaf to node 1; 3 9 Q = 1, there is an edge between node i and i+ 1 for all ( 1 \u2264 i < N) , ; Flo\u0301ra can' t add extra leaf to node 1 nor node N; 4 16 N \u2264 20000, Q \u2264 300; 5 19 the original tree is a perfect binary tree rooted at node 1; ( i. e. each internal node has exactly 2 children, and every leaf; has the same distance from the root) ; 6 17 D_ i = 1 for all i; 7 30 no additional constraints; ]",
    "input": "The first line contains two space- separated integer, N and Q ( 3 \u2264 N \u2264 10^ 5 , 1 \u2264 Q \u2264 10^ 5 ) \u2013 the number of nodes the tree has and the number of variations. Each of the next N- 1 lines contains two space- separated integers u and v denoting that nodes u and v are connected by an edge ( 1 \u2264 u, v \u2264 N ) . The next Q lines describe the variations. The first integer in the i th line is D_ i ( 1 \u2264 D_ i \u2264 10^ 5 ) . Then D_ i space- separated integers follow: if the j th number is a_ j , it means that Flo\u0301ra adds a new leaf to node a_ j ( 1 \u2264 a_ j \u2264 N ) . We may add more than one leaf to the same node. \u2211_ 1^ Q D_ i \u2264 10^ 5 i. e. the sum of D_ i in all varations is at most 10^ 5 . After each variation, Flo\u0301ra restarts and adds extra leaves to the original tree.",
    "output": "You should print Q lines. In the i - th line, print a single integer: the minimum cost required to clean the i - th variation of the tree. If the tree cannot be cleaned, print - 1 .",
    "note": "The following picture shows the second variation. A possible solution is to clean the path between leaves 1 - 6 , A - 7 and B - 3 . You can download the above example and an additional ( bigger) sample input here: https: / / gofile. io/ d/ 8QlbsS",
    "topics": [
      "*special",
      "data structures",
      "dfs and similar",
      "graphs",
      "trees"
    ],
    "id": "1403B"
  },
  {
    "title": "The Potion of Great Power",
    "url": "https://codeforces.com/problemset/problem/1403/A",
    "history": "Once upon a time, in the Land of the Shamans, everyone lived on the Sky- High Beanstalk. Each shaman had a unique identifying number i between 0 and N- 1 , and an altitude value H_ i , representing how high he lived above ground level. The distance between two altitudes is the absolute value of their difference. All shamans lived together in peace, until one of them stole the formula of the world- famous Potion of Great Power. To cover his/ her tracks, the Thief has put a Curse on the land: most inhabitants could no longer trust each other. . . Despite the very difficult circumstances, the Order of Good Investigators have gained the following information about the Curse: When the Curse first takes effect, everyone stops trusting each other. The Curse is unstable: at the end of each day ( exactly at midnight) , one pair of shamans will start or stop trusting each other. Unfortunately, each shaman will only ever trust at most D others at any given time. They have also reconstructed a log of who trusted whom: for each night they know which pair of shamans started/ stopped trusting each other. They believe the Thief has whispered the formula to an Evil Shaman. To avoid detection, both of them visited the home of one of their ( respective) trusted friends. During the visit, the Thief whispered the formula to the Evil Shaman through the window. ( Note: this trusted friend did not have to be home at the time. In fact, it' s even possible that they visited each other' s houses \u2013 shamans are weird. ) Fortunately, whispers only travel short distances, so the Order knows the two trusted friends visited ( by the Thief and the Evil Shaman) must live very close to each other. They ask you to help with their investigation. They would like to test their suspicions: what if the Thief was x , the Evil Shaman was y , and the formula was whispered on day v ? What is the smallest distance the whispered formula had to travel? That is, what is the minimum distance between the apartments of some shamans x' and y' ( i. e. min( | H_ x' - H_ y' | ) ) , such that x' was a trusted friend of x and y' was a trusted friend of y on day v ? They will share all their information with you, then ask you a number of questions. You need to answer each question immediately, before receiving the next one. InteractionThe interaction will begin with a line containing N , D , U and Q ( 2 \u2264 N \u2264 100000 , 1 \u2264 D \u2264 500 , 0 \u2264 U \u2264 200000 , 1 \u2264 Q \u2264 50000) \u2013 the number of shamans, the maximum number of trusted friends a shaman can have at any given point, the number of days, and the number of questions. On the next line N space separated integers will follow, the i th ( 1\u2264 i \u2264 N) of which being H_ i- 1 ( 0\u2264 H_ i- 1\u2264 10^ 9) , the altitude of shaman i- 1 . On the next U lines there will be two integers each, on the i th ( 1 \u2264 i \u2264 U ) A_ i and B_ i ( 0 \u2264 A_ i, B_ i < N and A_ i = \u0338 B_ i) , which represents a pair of shamans who started or stopped trusting each other at the end of day i- 1 . That is, if A_ i and B_ i trusted each other on day i- 1 , they did not trust each other on day i , or vice versa. Read all of these integers. The interactor now will ask you Q question, so the following interaction should happen Q times: Read 3 integers describing the current query: x, y and v ( x = \u0338 y , 0 \u2264 x, y < N and 0 \u2264 v \u2264 U ) , where x is the suspected Thief, y is the suspected Evil Shaman, and v is the suspected day. . Then print the answer to this query on a single line, i. e. you should print the minimum distance the whispered formula had to travel from some trusted friend x' of x to a trusted friend y' of y . In case someone trusted both x and y ( i. e. x' = y' ) , you should print 0 . If x or y had no trusted friends, print 10^ 9 . After printing each line do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use: fflush( stdout) or cout. flush( ) in C+ + ; System. out. flush( ) in Java; flush( output) in Pascal; stdout. flush( ) in Python; see documentation for other languages. Scoring [ Subtask Points Constraints; 1 0 samples; 2 17 Q, U \u2264 1000; 3 14 v= U for all questions; 4 18 H_ i \u2208{ 0, 1} for all shamans i; 5 21 U, N \u2264 10000; 6 30 no additional constraints; ]",
    "input": "",
    "output": "",
    "note": "Example queries: Evolution of friendships:",
    "topics": [
      "*special",
      "2-sat",
      "binary search",
      "data structures",
      "graphs",
      "interactive",
      "sortings",
      "two pointers"
    ],
    "id": "1403A"
  },
  {
    "title": "Fancy Fence",
    "url": "https://codeforces.com/problemset/problem/1402/A",
    "history": "Everybody knows that Bala\u0301zs has the fanciest fence in the whole town. It' s built up from N fancy sections. The sections are rectangles standing closely next to each other on the ground. The i th section has integer height h_ i and integer width w_ i . We are looking for fancy rectangles on this fancy fence. A rectangle is fancy if: its sides are either horizontal or vertical and have integer lengths the distance between the rectangle and the ground is integer the distance between the rectangle and the left side of the first section is integer it' s lying completely on sections What is the number of fancy rectangles? This number can be very big, so we are interested in it modulo 10^ 9+ 7 . Scoring [ Subtask Points Constraints; 1 0 sample; 2 12 N \u2264 50 and h_ i \u2264 50 and w_ i = 1 for all i; 3 13 h_ i = 1 or h_ i = 2 for all i; 4 15 all h_ i are equal; 5 15 h_ i \u2264 h_ i+ 1 for all i \u2264 N- 1; 6 18 N \u2264 1000; 7 27 no additional constraints; ]",
    "input": "The first line contains N ( 1\u2264 N \u2264 10^ 5 ) \u2013 the number of sections. The second line contains N space- separated integers, the i th number is h_ i ( 1 \u2264 h_ i \u2264 10^ 9 ) . The third line contains N space- separated integers, the i th number is w_ i ( 1 \u2264 w_ i \u2264 10^ 9 ) .",
    "output": "You should print a single integer, the number of fancy rectangles modulo 10^ 9+ 7 . So the output range is 0, 1, 2, . . . , 10^ 9+ 6 .",
    "note": "The fence looks like this: There are 5 fancy rectangles of shape: There are 3 fancy rectangles of shape: There is 1 fancy rectangle of shape: There are 2 fancy rectangles of shape: There is 1 fancy rectangle of shape:",
    "topics": [
      "*special",
      "data structures",
      "dsu",
      "implementation",
      "math",
      "sortings"
    ],
    "id": "1402A"
  },
  {
    "title": "Reverse and Swap",
    "url": "https://codeforces.com/problemset/problem/1401/F",
    "history": "You are given an array a of length 2^ n . You should process q queries on it. Each query has one of the following 4 types: Replace( x, k) \u2014 change a_ x to k ; Reverse( k) \u2014 reverse each subarray [ ( i- 1) \u00b7 2^ k+ 1, i \u00b7 2^ k] for all i ( i \u2265 1 ) ; Swap( k) \u2014 swap subarrays [ ( 2i- 2) \u00b7 2^ k+ 1, ( 2i- 1) \u00b7 2^ k] and [ ( 2i- 1) \u00b7 2^ k+ 1, 2i \u00b7 2^ k] for all i ( i \u2265 1 ) ; Sum( l, r) \u2014 print the sum of the elements of subarray [ l, r] . Write a program that can quickly process given queries.",
    "input": "The first line contains two integers n , q ( 0 \u2264 n \u2264 18 ; 1 \u2264 q \u2264 10^ 5 ) \u2014 the length of array a and the number of queries. The second line contains 2^ n integers a_ 1, a_ 2, . . . , a_ 2^ n ( 0 \u2264 a_ i \u2264 10^ 9 ) . Next q lines contains queries \u2014 one per line. Each query has one of 4 types: \" 1 x k \" ( 1 \u2264 x \u2264 2^ n ; 0 \u2264 k \u2264 10^ 9 ) \u2014 Replace( x, k) ; \" 2 k \" ( 0 \u2264 k \u2264 n ) \u2014 Reverse( k) ; \" 3 k \" ( 0 \u2264 k < n ) \u2014 Swap( k) ; \" 4 l r \" ( 1 \u2264 l \u2264 r \u2264 2^ n ) \u2014 Sum( l, r) . It is guaranteed that there is at least one Sum query.",
    "output": "Print the answer for each Sum query.",
    "note": "In the first sample, initially, the array a is equal to { 7, 4, 9, 9} . After processing the first query. the array a becomes { 7, 8, 9, 9} . After processing the second query, the array a_ i becomes { 9, 9, 7, 8} Therefore, the answer to the third query is 9+ 7+ 8= 24 . In the second sample, initially, the array a is equal to { 7, 0, 8, 8, 7, 1, 5, 2} . What happens next is: Sum( 3, 7) \u2192 8 + 8 + 7 + 1 + 5 = 29 ; Reverse( 1) \u2192 { 0, 7, 8, 8, 1, 7, 2, 5} ; Swap( 2) \u2192 { 1, 7, 2, 5, 0, 7, 8, 8} ; Sum( 1, 6) \u2192 1 + 7 + 2 + 5 + 0 + 7 = 22 ; Reverse( 3) \u2192 { 8, 8, 7, 0, 5, 2, 7, 1} ; Replace( 5, 16) \u2192 { 8, 8, 7, 0, 16, 2, 7, 1} ; Sum( 8, 8) \u2192 1 ; Swap( 0) \u2192 { 8, 8, 0, 7, 2, 16, 1, 7} .",
    "topics": [
      "binary search",
      "bitmasks",
      "data structures"
    ],
    "id": "1401F"
  },
  {
    "title": "Divide Square",
    "url": "https://codeforces.com/problemset/problem/1401/E",
    "history": "There is a square of size 10^ 6 \u00d7 10^ 6 on the coordinate plane with four points ( 0, 0) , ( 0, 10^ 6) , ( 10^ 6, 0) , and ( 10^ 6, 10^ 6) as its vertices. You are going to draw segments on the plane. All segments are either horizontal or vertical and intersect with at least one side of the square. Now you are wondering how many pieces this square divides into after drawing all segments. Write a program calculating the number of pieces of the square.",
    "input": "The first line contains two integers n and m ( 0 \u2264 n, m \u2264 10^ 5 ) \u2014 the number of horizontal segments and the number of vertical segments. The next n lines contain descriptions of the horizontal segments. The i - th line contains three integers y_ i , lx_ i and rx_ i ( 0 < y_ i < 10^ 6 ; 0 \u2264 lx_ i < rx_ i \u2264 10^ 6 ) , which means the segment connects ( lx_ i, y_ i) and ( rx_ i, y_ i) . The next m lines contain descriptions of the vertical segments. The i - th line contains three integers x_ i , ly_ i and ry_ i ( 0 < x_ i < 10^ 6 ; 0 \u2264 ly_ i < ry_ i \u2264 10^ 6 ) , which means the segment connects ( x_ i, ly_ i) and ( x_ i, ry_ i) . It' s guaranteed that there are no two segments on the same line, and each segment intersects with at least one of square' s sides.",
    "output": "Print the number of pieces the square is divided into after drawing all the segments.",
    "note": "The sample is like this:",
    "topics": [
      "data structures",
      "geometry",
      "implementation",
      "sortings"
    ],
    "id": "1401E"
  },
  {
    "title": "Clear the Multiset",
    "url": "https://codeforces.com/problemset/problem/1400/E",
    "history": "You have a multiset containing several integers. Initially, it contains a_ 1 elements equal to 1 , a_ 2 elements equal to 2 , . . . , a_ n elements equal to n . You may apply two types of operations: choose two integers l and r ( l \u2264 r ) , then remove one occurrence of l , one occurrence of l + 1 , . . . , one occurrence of r from the multiset. This operation can be applied only if each number from l to r occurs at least once in the multiset; choose two integers i and x ( x \u2265 1 ) , then remove x occurrences of i from the multiset. This operation can be applied only if the multiset contains at least x occurrences of i . What is the minimum number of operations required to delete all elements from the multiset?",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 5000 ) . The second line contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) .",
    "output": "Print one integer \u2014 the minimum number of operations required to delete all elements from the multiset.",
    "note": "",
    "topics": [
      "data structures",
      "divide and conquer",
      "dp",
      "greedy"
    ],
    "id": "1400E"
  },
  {
    "title": "Zigzags",
    "url": "https://codeforces.com/problemset/problem/1400/D",
    "history": "You are given an array a_ 1, a_ 2 . . . a_ n . Calculate the number of tuples ( i, j, k, l) such that: 1 \u2264 i < j < k < l \u2264 n ; a_ i = a_ k and a_ j = a_ l ;",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 4 \u2264 n \u2264 3000 ) \u2014 the size of the array a . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 the array a . It' s guaranteed that the sum of n in one test doesn' t exceed 3000 .",
    "output": "For each test case, print the number of described tuples.",
    "note": "In the first test case, for any four indices i < j < k < l are valid, so the answer is the number of tuples. In the second test case, there are 2 valid tuples: ( 1, 2, 4, 6) : a_ 1 = a_ 4 and a_ 2 = a_ 6 ; ( 1, 3, 4, 6) : a_ 1 = a_ 4 and a_ 3 = a_ 6 .",
    "topics": [
      "brute force",
      "combinatorics",
      "data structures",
      "math",
      "two pointers"
    ],
    "id": "1400D"
  },
  {
    "title": "Yet Another Segments Subset",
    "url": "https://codeforces.com/problemset/problem/1399/F",
    "history": "You are given n segments on a coordinate axis OX . The i - th segment has borders [ l_ i; r_ i] . All points x , for which l_ i \u2264 x \u2264 r_ i holds, belong to the i - th segment. Your task is to choose the maximum by size ( the number of segments) subset of the given set of segments such that each pair of segments in this subset either non- intersecting or one of them lies inside the other one. Two segments [ l_ i; r_ i] and [ l_ j; r_ j] are non- intersecting if they have no common points. For example, segments [ 1; 2] and [ 3; 4] , [ 1; 3] and [ 5; 5] are non- intersecting, while segments [ 1; 2] and [ 2; 3] , [ 1; 2] and [ 2; 2] are intersecting. The segment [ l_ i; r_ i] lies inside the segment [ l_ j; r_ j] if l_ j \u2264 l_ i and r_ i \u2264 r_ j . For example, segments [ 2; 2] , [ 2, 3] , [ 3; 4] and [ 2; 4] lie inside the segment [ 2; 4] , while [ 2; 5] and [ 1; 4] are not. You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains one integer n ( 1 \u2264 n \u2264 3000 ) \u2014 the number of segments. The next n lines describe segments. The i - th segment is given as two integers l_ i and r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 2 \u00b7 10^ 5 ) , where l_ i is the left border of the i - th segment and r_ i is the right border of the i - th segment. Additional constraint on the input: there are no duplicates in the list of segments. It is guaranteed that the sum of n does not exceed 3000 ( \u2211 n \u2264 3000 ) .",
    "output": "For each test case, print the answer: the maximum possible size of the subset of the given set of segments such that each pair of segments in this subset either non- intersecting or one of them lies inside the other one.",
    "note": "",
    "topics": [
      "data structures",
      "dp",
      "graphs",
      "sortings"
    ],
    "id": "1399F"
  },
  {
    "title": "Weights Division (easy version)",
    "url": "https://codeforces.com/problemset/problem/1399/E1",
    "history": "Easy and hard versions are actually different problems, so we advise you to read both statements carefully. You are given a weighted rooted tree, vertex 1 is the root of this tree. A tree is a connected graph without cycles. A rooted tree has a special vertex called the root. A parent of a vertex v is the last different from v vertex on the path from the root to the vertex v . Children of vertex v are all vertices for which v is the parent. A vertex is a leaf if it has no children. The weighted tree is such a tree that each edge of this tree has some weight. The weight of the path is the sum of edges weights on this path. The weight of the path from the vertex to itself is 0 . You can make a sequence of zero or more moves. On each move, you select an edge and divide its weight by 2 rounding down. More formally, during one move, you choose some edge i and divide its weight by 2 rounding down ( w_ i : = \u230aw_ i/ 2\u230b ) . Your task is to find the minimum number of moves required to make the sum of weights of paths from the root to each leaf at most S . In other words, if w( i, j) is the weight of the path from the vertex i to the vertex j , then you have to make \u2211_ v \u2208 leaves w( root, v) \u2264 S , where leaves is the list of all leaves. You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains two integers n and S ( 2 \u2264 n \u2264 10^ 5; 1 \u2264 S \u2264 10^ 16 ) \u2014 the number of vertices in the tree and the maximum possible sum of weights you have to obtain. The next n- 1 lines describe edges of the tree. The edge i is described as three integers v_ i , u_ i and w_ i ( 1 \u2264 v_ i, u_ i \u2264 n; 1 \u2264 w_ i \u2264 10^ 6 ) , where v_ i and u_ i are vertices the edge i connects and w_ i is the weight of this edge. It is guaranteed that the sum of n does not exceed 10^ 5 ( \u2211 n \u2264 10^ 5 ) .",
    "output": "For each test case, print the answer: the minimum number of moves required to make the sum of weights of paths from the root to each leaf at most S .",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "greedy",
      "trees"
    ],
    "id": "1399E1"
  },
  {
    "title": "Binary String To Subsequences",
    "url": "https://codeforces.com/problemset/problem/1399/D",
    "history": "You are given a binary string s consisting of n zeros and ones. Your task is to divide the given string into the minimum number of subsequences in such a way that each character of the string belongs to exactly one subsequence and each subsequence looks like \" 010101 . . . \" or \" 101010 . . . \" ( i. e. the subsequence should not contain two adjacent zeros or ones) . Recall that a subsequence is a sequence that can be derived from the given sequence by deleting zero or more elements without changing the order of the remaining elements. For example, subsequences of \" 1011101\" are \" 0\" , \" 1\" , \" 11111\" , \" 0111\" , \" 101\" , \" 1001\" , but not \" 000\" , \" 101010\" and \" 11100\" . You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of s . The second line of the test case contains n characters ' 0' and ' 1' \u2014 the string s . It is guaranteed that the sum of n does not exceed 2 \u00b7 10^ 5 ( \u2211 n \u2264 2 \u00b7 10^ 5 ) .",
    "output": "For each test case, print the answer: in the first line print one integer k ( 1 \u2264 k \u2264 n ) \u2014 the minimum number of subsequences you can divide the string s to. In the second line print n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 k ) , where a_ i is the number of subsequence the i - th character of s belongs to. If there are several answers, you can print any.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "1399D"
  },
  {
    "title": "Controversial Rounds",
    "url": "https://codeforces.com/problemset/problem/1398/F",
    "history": "Alice and Bob play a game. The game consists of several sets, and each set consists of several rounds. Each round is won either by Alice or by Bob, and the set ends when one of the players has won x rounds in a row. For example, if Bob won five rounds in a row and x = 2 , then two sets ends. You know that Alice and Bob have already played n rounds, and you know the results of some rounds. For each x from 1 to n , calculate the maximum possible number of sets that could have already finished if each set lasts until one of the players wins x rounds in a row. It is possible that the last set is still not finished \u2014 in that case, you should not count it in the answer.",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 10^ 6 ) \u2014 the number of rounds. The second line contains one string s of length n \u2014 the descriptions of rounds. If the i - th element of the string is 0, then Alice won the i - th round; if it is 1, then Bob won the i - th round, and if it is ? , then you don' t know who won the i - th round.",
    "output": "In the only line print n integers. The i - th integer should be equal to the maximum possible number of sets that could have already finished if each set lasts until one of the players wins i rounds in a row.",
    "note": "Let' s consider the first test case: if x = 1 and s = 110000 or s = 111000 then there are six finished sets; if x = 2 and s = 110000 then there are three finished sets; if x = 3 and s = 111000 then there are two finished sets; if x = 4 and s = 110000 then there is one finished set; if x = 5 then there are no finished sets; if x = 6 then there are no finished sets.",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "greedy",
      "two pointers"
    ],
    "id": "1398F"
  },
  {
    "title": "Two Types of Spells",
    "url": "https://codeforces.com/problemset/problem/1398/E",
    "history": "Polycarp plays a computer game ( yet again) . In this game, he fights monsters using magic spells. There are two types of spells: fire spell of power x deals x damage to the monster, and lightning spell of power y deals y damage to the monster and doubles the damage of the next spell Polycarp casts. Each spell can be cast only once per battle, but Polycarp can cast them in any order. For example, suppose that Polycarp knows three spells: a fire spell of power 5 , a lightning spell of power 1 , and a lightning spell of power 8 . There are 6 ways to choose the order in which he casts the spells: first, second, third. This order deals 5 + 1 + 2 \u00b7 8 = 22 damage; first, third, second. This order deals 5 + 8 + 2 \u00b7 1 = 15 damage; second, first, third. This order deals 1 + 2 \u00b7 5 + 8 = 19 damage; second, third, first. This order deals 1 + 2 \u00b7 8 + 2 \u00b7 5 = 27 damage; third, first, second. This order deals 8 + 2 \u00b7 5 + 1 = 19 damage; third, second, first. This order deals 8 + 2 \u00b7 1 + 2 \u00b7 5 = 20 damage. Initially, Polycarp knows 0 spells. His spell set changes n times, each time he either learns a new spell or forgets an already known one. After each change, calculate the maximum possible damage Polycarp may deal using the spells he knows.",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of changes to the spell set. Each of the next n lines contains two integers tp and d ( 0 \u2264 tp_ i \u2264 1 ; - 10^ 9 \u2264 d \u2264 10^ 9 ; d_ i = \u0338 0 ) \u2014 the description of the change. If tp_ i if equal to 0 , then Polycarp learns ( or forgets) a fire spell, otherwise he learns ( or forgets) a lightning spell. If d_ i > 0 , then Polycarp learns a spell of power d_ i . Otherwise, Polycarp forgets a spell with power - d_ i , and it is guaranteed that he knew that spell before the change. It is guaranteed that the powers of all spells Polycarp knows after each change are different ( Polycarp never knows two spells with the same power) .",
    "output": "After each change, print the maximum damage Polycarp can deal with his current set of spells.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "implementation",
      "math",
      "sortings"
    ],
    "id": "1398E"
  },
  {
    "title": "Good Subarrays",
    "url": "https://codeforces.com/problemset/problem/1398/C",
    "history": "You are given an array a_ 1, a_ 2, . . . , a_ n consisting of integers from 0 to 9 . A subarray a_ l, a_ l+ 1, a_ l+ 2, . . . , a_ r- 1, a_ r is good if the sum of elements of this subarray is equal to the length of this subarray ( \u2211_ i= l^ r a_ i = r - l + 1 ) . For example, if a = [ 1, 2, 0] , then there are 3 good subarrays: a_ 1 . . . 1 = [ 1] , a_ 2 . . . 3 = [ 2, 0] and a_ 1 . . . 3 = [ 1, 2, 0] . Calculate the number of good subarrays of the array a .",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of the array a . The second line of each test case contains a string consisting of n decimal digits, where the i - th digit is equal to the value of a_ i . It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case print one integer \u2014 the number of good subarrays of the array a .",
    "note": "The first test case is considered in the statement. In the second test case, there are 6 good subarrays: a_ 1 . . . 1 , a_ 2 . . . 2 , a_ 1 . . . 2 , a_ 4 . . . 4 , a_ 5 . . . 5 and a_ 4 . . . 5 . In the third test case there is only one good subarray: a_ 2 . . . 6 .",
    "topics": [
      "data structures",
      "dp",
      "math"
    ],
    "id": "1398C"
  },
  {
    "title": "Rainbow Rectangles",
    "url": "https://codeforces.com/problemset/problem/1396/D",
    "history": "Shrimpy Duc is a fat and greedy boy who is always hungry. After a while of searching for food to satisfy his never- ending hunger, Shrimpy Duc finds M M candies lying unguarded on a L \u00d7 L grid. There are n M M candies on the grid, the i - th M M is currently located at ( x_ i + 0. 5, y_ i + 0. 5) , and has color c_ i out of a total of k colors ( the size of M Ms are insignificant) . Shrimpy Duc wants to steal a rectangle of M Ms, specifically, he wants to select a rectangle with integer coordinates within the grid and steal all candies within the rectangle. Shrimpy Duc doesn' t need to steal every single candy, however, he would like to steal at least one candy for each color. In other words, he wants to select a rectangle whose sides are parallel to the coordinate axes and whose left- bottom vertex ( X_ 1, Y_ 1) and right- top vertex ( X_ 2, Y_ 2) are points with integer coordinates satisfying 0 \u2264 X_ 1 < X_ 2 \u2264 L and 0 \u2264 Y_ 1 < Y_ 2 \u2264 L , so that for every color 1 \u2264 c \u2264 k there is at least one M M with color c that lies within that rectangle. How many such rectangles are there? This number may be large, so you only need to find it modulo 10^ 9 + 7 .",
    "input": "The first line contains three positive integers n, k, L ( 1 \u2264 k \u2264 n \u2264 2 \u00b7 10^ 3, 1 \u2264 L \u2264 10^ 9 ) \u2014 the number of M Ms, the number of colors and the length of the grid respectively. The following n points describe the M Ms. Each line contains three integers x_ i, y_ i, c_ i ( 0 \u2264 x_ i, y_ i < L, 1 \u2264 c_ i \u2264 k) \u2014 the coordinates and color of the i - th M M respectively. Different M Ms have different coordinates ( x_ i x_ j or y_ i y_ j for every i j ) , and for every 1 \u2264 c \u2264 k there is at least one M M with color c .",
    "output": "Output a single integer \u2014 the number of rectangles satisfying Shrimpy Duc' s conditions, modulo 10^ 9 + 7 .",
    "note": "Grid for the first sample:",
    "topics": [
      "data structures",
      "sortings",
      "two pointers"
    ],
    "id": "1396D"
  },
  {
    "title": "Applejack and Storages",
    "url": "https://codeforces.com/problemset/problem/1393/B",
    "history": "This year in Equestria was a year of plenty, so Applejack has decided to build some new apple storages. According to the advice of the farm designers, she chose to build two storages with non- zero area: one in the shape of a square and another one in the shape of a rectangle ( which possibly can be a square as well) . Applejack will build the storages using planks, she is going to spend exactly one plank on each side of the storage. She can get planks from her friend' s company. Initially, the company storehouse has n planks, Applejack knows their lengths. The company keeps working so it receives orders and orders the planks itself. Applejack' s friend can provide her with information about each operation. For convenience, he will give her information according to the following format: + x : the storehouse received a plank with length x - x : one plank with length x was removed from the storehouse ( it is guaranteed that the storehouse had some planks with length x ) . Applejack is still unsure about when she is going to order the planks so she wants to know if she can order the planks to build rectangular and square storages out of them after every event at the storehouse. Applejack is busy collecting apples and she has completely no time to do the calculations so she asked you for help! We remind you that all four sides of a square are equal, and a rectangle has two pairs of equal sides.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) : the initial amount of planks at the company' s storehouse, the second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 5 ) : the lengths of the planks. The third line contains a single integer q ( 1 \u2264 q \u2264 10^ 5 ) : the number of events in the company. Each of the next q lines contains a description of the events in a given format: the type of the event ( a symbol + or - ) is given first, then goes the integer x ( 1 \u2264 x \u2264 10^ 5 ) .",
    "output": "After every event in the company, print \" YES\" if two storages of the required shape can be built from the planks of that company' s set, and print \" NO\" otherwise. You can print each letter in any case ( upper or lower) .",
    "note": "After the second event Applejack can build a rectangular storage using planks with lengths 1 , 2 , 1 , 2 and a square storage using planks with lengths 1 , 1 , 1 , 1 . After the sixth event Applejack can build a rectangular storage using planks with lengths 2 , 2 , 2 , 2 and a square storage using planks with lengths 1 , 1 , 1 , 1 .",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "1393B"
  },
  {
    "title": "Omkar and Landslide",
    "url": "https://codeforces.com/problemset/problem/1392/F",
    "history": "Omkar is standing at the foot of Celeste mountain. The summit is n meters away from him, and he can see all of the mountains up to the summit, so for all 1 \u2264 j \u2264 n he knows that the height of the mountain at the point j meters away from himself is h_ j meters. It turns out that for all j satisfying 1 \u2264 j \u2264 n - 1 , h_ j < h_ j + 1 ( meaning that heights are strictly increasing) . Suddenly, a landslide occurs! While the landslide is occurring, the following occurs: every minute, if h_ j + 2 \u2264 h_ j + 1 , then one square meter of dirt will slide from position j + 1 to position j , so that h_ j + 1 is decreased by 1 and h_ j is increased by 1 . These changes occur simultaneously, so for example, if h_ j + 2 \u2264 h_ j + 1 and h_ j + 1 + 2 \u2264 h_ j + 2 for some j , then h_ j will be increased by 1 , h_ j + 2 will be decreased by 1 , and h_ j + 1 will be both increased and decreased by 1 , meaning that in effect h_ j + 1 is unchanged during that minute. The landslide ends when there is no j such that h_ j + 2 \u2264 h_ j + 1 . Help Omkar figure out what the values of h_ 1, . . . , h_ n will be after the landslide ends. It can be proven that under the given constraints, the landslide will always end in finitely many minutes. Note that because of the large amount of input, it is recommended that your code uses fast IO.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 6 ) . The second line contains n integers h_ 1, h_ 2, . . . , h_ n satisfying 0 \u2264 h_ 1 < h_ 2 < . . . < h_ n \u2264 10^ 12 \u2014 the heights.",
    "output": "Output n integers, where the j - th integer is the value of h_ j after the landslide has stopped.",
    "note": "Initially, the mountain has heights 2, 6, 7, 8 . In the first minute, we have 2 + 2 \u2264 6 , so 2 increases to 3 and 6 decreases to 5 , leaving 3, 5, 7, 8 . In the second minute, we have 3 + 2 \u2264 5 and 5 + 2 \u2264 7 , so 3 increases to 4 , 5 is unchanged, and 7 decreases to 6 , leaving 4, 5, 6, 8 . In the third minute, we have 6 + 2 \u2264 8 , so 6 increases to 7 and 8 decreases to 7 , leaving 4, 5, 7, 7 . In the fourth minute, we have 5 + 2 \u2264 7 , so 5 increases to 6 and 7 decreases to 6 , leaving 4, 6, 6, 7 . In the fifth minute, we have 4 + 2 \u2264 6 , so 4 increases to 5 and 6 decreases to 5 , leaving 5, 5, 6, 7 . In the sixth minute, nothing else can change so the landslide stops and our answer is 5, 5, 6, 7 .",
    "topics": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "greedy",
      "math"
    ],
    "id": "1392F"
  },
  {
    "title": "Bicolored Segments",
    "url": "https://codeforces.com/problemset/problem/1389/F",
    "history": "You are given n segments [ l_ 1, r_ 1] , [ l_ 2, r_ 2] , . . . , [ l_ n, r_ n] . Each segment has one of two colors: the i - th segment' s color is t_ i . Let' s call a pair of segments i and j bad if the following two conditions are met: t_ i t_ j ; the segments [ l_ i, r_ i] and [ l_ j, r_ j] intersect, embed or touch, i. e. there exists an integer x such that x \u2208 [ l_ i, r_ i] and x \u2208 [ l_ j, r_ j] . Calculate the maximum number of segments that can be selected from the given ones, so that there is no bad pair among the selected ones.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 number of segments. The next n lines contains three integers l_ i, r_ i, t_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 10^ 9; t_ i \u2208{ 1, 2} ) \u2014 description of the i - th segment.",
    "output": "Print the maximum number of segments that can be selected, so that there is no bad pair among the selected segments.",
    "note": "",
    "topics": [
      "data structures",
      "dp",
      "graph matchings",
      "sortings"
    ],
    "id": "1389F"
  },
  {
    "title": "Uncle Bogdan and Projections",
    "url": "https://codeforces.com/problemset/problem/1388/E",
    "history": "After returning to shore, uncle Bogdan usually visits the computer club \" The Rock\" , to solve tasks in a pleasant company. One day, uncle Bogdan met his good old friend who told him one unusual task. . . There are n non- intersecting horizontal segments with ends in integers points on the plane with the standard cartesian coordinate system. All segments are strictly above the OX axis. You can choose an arbitrary vector ( a , b ) , where b < 0 and coordinates are real numbers, and project all segments to OX axis along this vector. The projections shouldn' t intersect but may touch each other. Find the minimum possible difference between x coordinate of the right end of the rightmost projection and x coordinate of the left end of the leftmost projection.",
    "input": "The first line contains the single integer n ( 1 \u2264 n \u2264 2000 ) \u2014 the number of segments. The i - th of the next n lines contains three integers xl_ i , xr_ i and y_ i ( - 10^ 6 \u2264 xl_ i < xr_ i \u2264 10^ 6 ; 1 \u2264 y_ i \u2264 10^ 6 ) \u2014 coordinates of the corresponding segment. It' s guaranteed that the segments don' t intersect or touch.",
    "output": "Print the minimum possible difference you can get. Your answer will be considered correct if its absolute or relative error doesn' t exceed 10^ - 6 . Formally, if your answer is a and jury' s answer is b then your answer will be considered correct if | a - b| / max( 1, | b| ) \u2264 10^ - 6 .",
    "note": "In the first example if we project segments along the vector ( 1, - 1) then we get an answer 12- 3= 9 and ( it can be proven) it is impossible to get less. It is optimal to project along the vector ( 1, - 3) in the second example. The answer is 82/ 3- 21/ 3= 61/ 3",
    "topics": [
      "data structures",
      "geometry",
      "sortings"
    ],
    "id": "1388E"
  },
  {
    "title": "Captain Flint and Treasure",
    "url": "https://codeforces.com/problemset/problem/1388/D",
    "history": "Captain Fint is involved in another treasure hunt, but have found only one strange problem. The problem may be connected to the treasure' s location or may not. That' s why captain Flint decided to leave the solving the problem to his crew and offered an absurdly high reward: one day off. The problem itself sounds like this. . . There are two arrays a and b of length n . Initially, an ans is equal to 0 and the following operation is defined: Choose position i ( 1 \u2264 i \u2264 n ) ; Add a_ i to ans ; If b_ i = \u0338 - 1 then add a_ i to a_ b_ i . What is the maximum ans you can get by performing the operation on each i ( 1 \u2264 i \u2264 n ) exactly once? Uncle Bogdan is eager to get the reward, so he is asking your help to find the optimal order of positions to perform the operation on them.",
    "input": "The first line contains the integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of arrays a and b . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( \u221210^ 6 \u2264 a_ i \u2264 10^ 6 ) . The third line contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 n or b_ i = - 1 ) . Additional constraint: it' s guaranteed that for any i ( 1 \u2264 i \u2264 n ) the sequence b_ i, b_ b_ i, b_ b_ b_ i, . . . is not cyclic, in other words it will always end with - 1 .",
    "output": "In the first line, print the maximum ans you can get. In the second line, print the order of operations: n different integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) . The p_ i is the position which should be chosen at the i - th step. If there are multiple orders, print any of them.",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "graphs",
      "greedy",
      "implementation",
      "trees"
    ],
    "id": "1388D"
  },
  {
    "title": "Joker",
    "url": "https://codeforces.com/problemset/problem/1386/C",
    "history": "Joker returns to Gotham City to execute another evil plan. In Gotham City, there are N street junctions ( numbered from 1 to N ) and M streets ( numbered from 1 to M ) . Each street connects two distinct junctions, and two junctions are connected by at most one street. For his evil plan, Joker needs to use an odd number of streets that together form a cycle. That is, for a junction S and an even positive integer k , there is a sequence of junctions S, s_ 1, . . . , s_ k, S such that there are streets connecting ( a) S and s_ 1 , ( b) s_ k and S , and ( c) s_ i- 1 and s_ i for each i = 2, . . . , k . However, the police are controlling the streets of Gotham City. On each day i , they monitor a different subset of all streets with consecutive numbers j : l_ i \u2264 j \u2264 r_ i . These monitored streets cannot be a part of Joker' s plan, of course. Unfortunately for the police, Joker has spies within the Gotham City Police Department; they tell him which streets are monitored on which day. Now Joker wants to find out, for some given number of days, whether he can execute his evil plan. On such a day there must be a cycle of streets, consisting of an odd number of streets which are not monitored on that day. ScoringSubtasks: ( 6 points) 1 \u2264 N, M, Q \u2264 200 ( 8 points) 1 \u2264 N, M, Q \u2264 2 000 ( 25 points) l_ i = 1 for i = 1, . . . , Q ( 10 points) l_ i \u2264 200 for i = 1, . . . , Q ( 22 points) Q \u2264 2 000 ( 29 points) No further constraints",
    "input": "The first line of the input contains three integers N , M , and Q ( 1 \u2264 N, M, Q \u2264 200 000 ) : the number of junctions, the number of streets, and the number of days to be investigated. The following M lines describe the streets. The j - th of these lines ( 1 \u2264 j \u2264 M ) contains two junction numbers u and v ( u = \u0338 v ) , saying that street j connects these two junctions. It is guaranteed that any two junctions are connected by at most one street. The following Q lines contain two integers l_ i and r_ i , saying that all streets j with l_ i \u2264 j \u2264 r_ i are checked by the police on day i ( 1 \u2264 i \u2264 Q ) .",
    "output": "Your output is to contain Q lines. Line i ( 1 \u2264 i \u2264 Q ) contains \" YES\" if Joker can execute his plan on day i , or \" NO\" otherwise.",
    "note": "The graph in the example test:",
    "topics": [
      "*special",
      "bitmasks",
      "data structures",
      "divide and conquer",
      "dsu"
    ],
    "id": "1386C"
  },
  {
    "title": "Mixture",
    "url": "https://codeforces.com/problemset/problem/1386/B",
    "history": "Serge, the chef of the famous restaurant \" Salt, Pepper Garlic\" is trying to obtain his first Michelin star. He has been informed that a secret expert plans to visit his restaurant this evening. Even though the expert' s name hasn' t been disclosed, Serge is certain he knows which dish from the menu will be ordered as well as what the taste preferences of the expert are. Namely, the expert requires an extremely precise proportion of salt, pepper and garlic powder in his dish. Serge keeps a set of bottles with mixtures of salt, pepper and garlic powder on a special shelf in the kitchen. For each bottle, he knows the exact amount of each of the ingredients in kilograms. Serge can combine any number of bottled mixtures ( or just use one of them directly) to get a mixture of particular proportions needed for a certain dish. Luckily, the absolute amount of a mixture that needs to be added to a dish is so small that you can assume that the amounts in the bottles will always be sufficient. However, the numeric values describing the proportions may be quite large. Serge would like to know whether it is possible to obtain the expert' s favourite mixture from the available bottles, and if so\u2014what is the smallest possible number of bottles needed to achieve that. Furthermore, the set of bottles on the shelf may change over time as Serge receives new ones or lends his to other chefs. So he would like to answer this question after each such change. For example, assume that expert' s favorite mixture is 1: 1: 1 and there are three bottles of mixtures on the shelf: [ Mixture Salt Pepper Garlic powder; 1 10 20 30; 2 300 200 100; 3 12 15 27; ] Amount of ingredient in the bottle, kg To obtain the desired mixture it is enough to use an equivalent amount of mixtures from bottles 1 and 2. If bottle 2 is removed, then it is no longer possible to obtain it. Write a program that helps Serge to solve this task! ScoringSubtasks: ( 13 points) N \u2264 50 , 0 < S_ i+ P_ i+ G_ i \u2264 10^ 2 ( 17 points) N \u2264 500 , 0 < S_ i+ P_ i+ G_ i \u2264 10^ 3 ( 30 points) N \u2264 5000 , 0 < S_ i+ P_ i+ G_ i \u2264 10^ 4 ( 40 points) No further constraints",
    "input": "The first row contains three non- negative integers S_ f , P_ f and G_ f ( 0 \u2264 S_ f, P_ f, G_ f ; 0 < S_ f+ P_ f+ G_ f \u2264 10^ 6 ) describing the amount of salt, pepper and garlic powder in the expert' s favourite mixture. For any real \u03b1> 0 , ( \u03b1S_ f, \u03b1P_ f, \u03b1G_ f) also is an expert' s favourite mixture. In the second row, there is a positive integer N ( number of changes on the shelf, N \u2264 100 000 ) . You should assume that initially the shelf is empty. Each of the next N rows describes a single change on the shelf: If a new bottle is added, the row contains capital letter A followed by three non- negative integers S_ i , P_ i and G_ i ( 0 \u2264 S_ i, P_ i, G_ i ; 0 < S_ i+ P_ i+ G_ i \u2264 10^ 6 ) describing the amount of salt, pepper and garlic powder in the added bottle. Added bottles are numbered consecutively by unique integers starting from 1 , that is, the i - th bottle corresponds to the i - th added bottle in the input data. If a particular bottle is removed from the shelf, the row contains capital letter R followed by the integer\u2014the bottle number r_ i . All values r_ i in the removals are unique, r_ i never exceeds total number of bottles added thus far.",
    "output": "Output N rows. The j - th row ( 1 \u2264 j \u2264 N ) should contain the number x_ j , the smallest number of bottles needed to prepare a mixture with the expert' s favourite proportions of salt, pepper and garlic powder using the bottles available after the first j changes on the shelf, or 0 if it is not possible.",
    "note": "Pay attention that in the example, bottles 1 and 3 contain the same proportions of salt, pepper and garlic powder.",
    "topics": [
      "*special",
      "data structures",
      "geometry",
      "math",
      "sortings"
    ],
    "id": "1386B"
  },
  {
    "title": "Removing Leaves",
    "url": "https://codeforces.com/problemset/problem/1385/F",
    "history": "You are given a tree ( connected graph without cycles) consisting of n vertices. The tree is unrooted \u2014 it is just a connected undirected graph without cycles. In one move, you can choose exactly k leaves ( leaf is such a vertex that is connected to only one another vertex) connected to the same vertex and remove them with edges incident to them. I. e. you choose such leaves u_ 1, u_ 2, . . . , u_ k that there are edges ( u_ 1, v) , ( u_ 2, v) , . . . , ( u_ k, v) and remove these leaves and these edges. Your task is to find the maximum number of moves you can perform if you remove leaves optimally. You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains two integers n and k ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ; 1 \u2264 k < n ) \u2014 the number of vertices in the tree and the number of leaves you remove in one move, respectively. The next n- 1 lines describe edges. The i - th edge is represented as two integers x_ i and y_ i ( 1 \u2264 x_ i, y_ i \u2264 n ) , where x_ i and y_ i are vertices the i - th edge connects. It is guaranteed that the given set of edges forms a tree. It is guaranteed that the sum of n does not exceed 2 \u00b7 10^ 5 ( \u2211 n \u2264 2 \u00b7 10^ 5 ) .",
    "output": "For each test case, print the answer \u2014 the maximum number of moves you can perform if you remove leaves optimally.",
    "note": "The picture corresponding to the first test case of the example: There you can remove vertices 2 , 5 and 3 during the first move and vertices 1 , 7 and 4 during the second move. The picture corresponding to the second test case of the example: There you can remove vertices 7 , 8 and 9 during the first move, then vertices 5 , 6 and 10 during the second move and vertices 1 , 3 and 4 during the third move. The picture corresponding to the third test case of the example: There you can remove vertices 5 and 7 during the first move, then vertices 2 and 4 during the second move and vertices 1 and 6 during the third move.",
    "topics": [
      "data structures",
      "greedy",
      "implementation",
      "trees"
    ],
    "id": "1385F"
  },
  {
    "title": "Strange Operation",
    "url": "https://codeforces.com/problemset/problem/1383/E",
    "history": "Koa the Koala has a binary string s of length n . Koa can perform no more than n- 1 ( possibly zero) operations of the following form: In one operation Koa selects positions i and i+ 1 for some i with 1 \u2264 i < | s| and sets s_ i to max( s_ i, s_ i+ 1) . Then Koa deletes position i+ 1 from s ( after the removal, the remaining parts are concatenated) . Note that after every operation the length of s decreases by 1 . How many different binary strings can Koa obtain by doing no more than n- 1 ( possibly zero) operations modulo 10^ 9+ 7 ( 1000000007 ) ?",
    "input": "The only line of input contains binary string s ( 1 \u2264 | s| \u2264 10^ 6 ) . For all i ( 1 \u2264 i \u2264 | s| ) s_ i = 0 or s_ i = 1 .",
    "output": "On a single line print the answer to the problem modulo 10^ 9+ 7 ( 1000000007 ) .",
    "note": "In the first sample Koa can obtain binary strings: 0 , 00 and 000 . In the second sample Koa can obtain binary strings: 1 , 01 , 11 , 011 , 101 and 0101 . For example: to obtain 01 from 0101 Koa can operate as follows: 0101 \u2192 0( 10) 1 \u2192 011 \u2192 0( 11) \u2192 01 . to obtain 11 from 0101 Koa can operate as follows: 0101 \u2192 ( 01) 01 \u2192 101 \u2192 1( 01) \u2192 11 . Parentheses denote the two positions Koa selected in each operation.",
    "topics": [
      "combinatorics",
      "data structures",
      "dp"
    ],
    "id": "1383E"
  },
  {
    "title": "Prefix Flip (Hard Version)",
    "url": "https://codeforces.com/problemset/problem/1381/A2",
    "history": "This is the hard version of the problem. The difference between the versions is the constraint on n and the required number of operations. You can make hacks only if all versions of the problem are solved. There are two binary strings a and b of length n ( a binary string is a string consisting of symbols 0 and 1 ) . In an operation, you select a prefix of a , and simultaneously invert the bits in the prefix ( 0 changes to 1 and 1 changes to 0 ) and reverse the order of the bits in the prefix. For example, if a= 001011 and you select the prefix of length 3 , it becomes 011011 . Then if you select the entire string, it becomes 001001 . Your task is to transform the string a into b in at most 2n operations. It can be proved that it is always possible.",
    "input": "The first line contains a single integer t ( 1\u2264 t\u2264 1000 ) \u2014 the number of test cases. Next 3t lines contain descriptions of test cases. The first line of each test case contains a single integer n ( 1\u2264 n\u2264 10^ 5 ) \u2014 the length of the binary strings. The next two lines contain two binary strings a and b of length n . It is guaranteed that the sum of n across all test cases does not exceed 10^ 5 .",
    "output": "For each test case, output an integer k ( 0\u2264 k\u2264 2n ) , followed by k integers p_ 1, . . . , p_ k ( 1\u2264 p_ i\u2264 n ) . Here k is the number of operations you use and p_ i is the length of the prefix you flip in the i - th operation.",
    "note": "In the first test case, we have 01\u2192 11\u2192 00\u2192 10 . In the second test case, we have 01011\u2192 00101\u2192 11101\u2192 01000\u2192 10100\u2192 00100\u2192 11100 . In the third test case, the strings are already the same. Another solution is to flip the prefix of length 2 , which will leave a unchanged.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "implementation",
      "strings",
      "two pointers"
    ],
    "id": "1381A2"
  },
  {
    "title": "Prefix Flip (Easy Version)",
    "url": "https://codeforces.com/problemset/problem/1381/A1",
    "history": "This is the easy version of the problem. The difference between the versions is the constraint on n and the required number of operations. You can make hacks only if all versions of the problem are solved. There are two binary strings a and b of length n ( a binary string is a string consisting of symbols 0 and 1 ) . In an operation, you select a prefix of a , and simultaneously invert the bits in the prefix ( 0 changes to 1 and 1 changes to 0 ) and reverse the order of the bits in the prefix. For example, if a= 001011 and you select the prefix of length 3 , it becomes 011011 . Then if you select the entire string, it becomes 001001 . Your task is to transform the string a into b in at most 3n operations. It can be proved that it is always possible.",
    "input": "The first line contains a single integer t ( 1\u2264 t\u2264 1000 ) \u2014 the number of test cases. Next 3t lines contain descriptions of test cases. The first line of each test case contains a single integer n ( 1\u2264 n\u2264 1000 ) \u2014 the length of the binary strings. The next two lines contain two binary strings a and b of length n . It is guaranteed that the sum of n across all test cases does not exceed 1000 .",
    "output": "For each test case, output an integer k ( 0\u2264 k\u2264 3n ) , followed by k integers p_ 1, . . . , p_ k ( 1\u2264 p_ i\u2264 n ) . Here k is the number of operations you use and p_ i is the length of the prefix you flip in the i - th operation.",
    "note": "In the first test case, we have 01\u2192 11\u2192 00\u2192 10 . In the second test case, we have 01011\u2192 00101\u2192 11101\u2192 01000\u2192 10100\u2192 00100\u2192 11100 . In the third test case, the strings are already the same. Another solution is to flip the prefix of length 2 , which will leave a unchanged.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "strings"
    ],
    "id": "1381A1"
  },
  {
    "title": "Strange Addition",
    "url": "https://codeforces.com/problemset/problem/1380/F",
    "history": "Let a and b be some non- negative integers. Let' s define strange addition of a and b as following: write down the numbers one under another and align them by their least significant digit; add them up digit by digit and concatenate the respective sums together. Assume that both numbers have an infinite number of leading zeros. For example, let' s take a look at a strange addition of numbers 3248 and 908 : You are given a string c , consisting of n digits from 0 to 9 . You are also given m updates of form: x d \u2014 replace the digit at the x - th position of c with a digit d . Note that string c might have leading zeros at any point of time. After each update print the number of pairs ( a, b) such that both a and b are non- negative integers and the result of a strange addition of a and b is equal to c . Note that the numbers of pairs can be quite large, so print them modulo 998244353 .",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 5 \u00b7 10^ 5 ) \u2014 the length of the number c and the number of updates. The second line contains a string c , consisting of exactly n digits from 0 to 9 . Each of the next m lines contains two integers x and d ( 1 \u2264 x \u2264 n , 0 \u2264 d \u2264 9 ) \u2014 the descriptions of updates.",
    "output": "Print m integers \u2014 the i - th value should be equal to the number of pairs ( a, b) such that both a and b are non- negative integers and the result of a strange addition of a and b is equal to c after i updates are applied. Note that the numbers of pairs can be quite large, so print them modulo 998244353 .",
    "note": "After the first update c is equal to 14 . The pairs that sum up to 14 are: ( 0, 14) , ( 1, 13) , ( 2, 12) , ( 3, 11) , ( 4, 10) , ( 5, 9) , ( 6, 8) , ( 7, 7) , ( 8, 6) , ( 9, 5) , ( 10, 4) , ( 11, 3) , ( 12, 2) , ( 13, 1) , ( 14, 0) . After the second update c is equal to 11 . After the third update c is equal to 01 .",
    "topics": [
      "data structures",
      "dp",
      "matrices"
    ],
    "id": "1380F"
  },
  {
    "title": "Merging Towers",
    "url": "https://codeforces.com/problemset/problem/1380/E",
    "history": "You have a set of n discs, the i - th disc has radius i . Initially, these discs are split among m towers: each tower contains at least one disc, and the discs in each tower are sorted in descending order of their radii from bottom to top. You would like to assemble one tower containing all of those discs. To do so, you may choose two different towers i and j ( each containing at least one disc) , take several ( possibly all) top discs from the tower i and put them on top of the tower j in the same order, as long as the top disc of tower j is bigger than each of the discs you move. You may perform this operation any number of times. For example, if you have two towers containing discs [ 6, 4, 2, 1] and [ 8, 7, 5, 3] ( in order from bottom to top) , there are only two possible operations: move disc 1 from the first tower to the second tower, so the towers are [ 6, 4, 2] and [ 8, 7, 5, 3, 1] ; move discs [ 2, 1] from the first tower to the second tower, so the towers are [ 6, 4] and [ 8, 7, 5, 3, 2, 1] . Let the difficulty of some set of towers be the minimum number of operations required to assemble one tower containing all of the discs. For example, the difficulty of the set of towers [ [ 3, 1] , [ 2] ] is 2 : you may move the disc 1 to the second tower, and then move both discs from the second tower to the first tower. You are given m - 1 queries. Each query is denoted by two numbers a_ i and b_ i , and means \" merge the towers a_ i and b_ i \" ( that is, take all discs from these two towers and assemble a new tower containing all of them in descending order of their radii from top to bottom) . The resulting tower gets index a_ i . For each k \u2208 [ 0, m - 1] , calculate the difficulty of the set of towers after the first k queries are performed.",
    "input": "The first line of the input contains two integers n and m ( 2 \u2264 m \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of discs and the number of towers, respectively. The second line contains n integers t_ 1 , t_ 2 , . . . , t_ n ( 1 \u2264 t_ i \u2264 m ) , where t_ i is the index of the tower disc i belongs to. Each value from 1 to m appears in this sequence at least once. Then m - 1 lines follow, denoting the queries. Each query is represented by two integers a_ i and b_ i ( 1 \u2264 a_ i, b_ i \u2264 m , a_ i b_ i ) , meaning that, during the i - th query, the towers with indices a_ i and b_ i are merged ( a_ i and b_ i are chosen in such a way that these towers exist before the i - th query) .",
    "output": "Print m integers. The k - th integer ( 0 - indexed) should be equal to the difficulty of the set of towers after the first k queries are performed.",
    "note": "The towers in the example are: before the queries: [ [ 5, 1] , [ 2] , [ 7, 4, 3] , [ 6] ] ; after the first query: [ [ 2] , [ 7, 5, 4, 3, 1] , [ 6] ] ; after the second query: [ [ 7, 5, 4, 3, 2, 1] , [ 6] ] ; after the third query, there is only one tower: [ 7, 6, 5, 4, 3, 2, 1] .",
    "topics": [
      "data structures",
      "dsu",
      "implementation",
      "trees"
    ],
    "id": "1380E"
  },
  {
    "title": "Three Indices",
    "url": "https://codeforces.com/problemset/problem/1380/A",
    "history": "You are given a permutation p_ 1, p_ 2, . . . , p_ n . Recall that sequence of n integers is called a permutation if it contains all integers from 1 to n exactly once. Find three indices i , j and k such that: 1 \u2264 i < j < k \u2264 n ; p_ i < p_ j and p_ j > p_ k . Or say that there are no such indices.",
    "input": "The first line contains a single integer T ( 1 \u2264 T \u2264 200 ) \u2014 the number of test cases. Next 2T lines contain test cases \u2014 two lines per test case. The first line of each test case contains the single integer n ( 3 \u2264 n \u2264 1000 ) \u2014 the length of the permutation p . The second line contains n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ; p_ i = \u0338 p_ j if i = \u0338 j ) \u2014 the permutation p .",
    "output": "For each test case: if there are such indices i , j and k , print YES ( case insensitive) and the indices themselves; if there are no such indices, print NO ( case insensitive) . If there are multiple valid triples of indices, print any of them.",
    "note": "",
    "topics": [
      "brute force",
      "data structures"
    ],
    "id": "1380A"
  },
  {
    "title": "Chess Strikes Back (hard version)",
    "url": "https://codeforces.com/problemset/problem/1379/F2",
    "history": "Note that the difference between easy and hard versions is that in hard version unavailable cells can become available again and in easy version can' t. You can make hacks only if all versions are solved. Ildar and Ivan are tired of chess, but they really like the chessboard, so they invented a new game. The field is a chessboard 2n \u00d7 2m : it has 2n rows, 2m columns, and the cell in row i and column j is colored white if i+ j is even, and is colored black otherwise. The game proceeds as follows: Ildar marks some of the white cells of the chessboard as unavailable, and asks Ivan to place n \u00d7 m kings on the remaining white cells in such way, so that there are no kings attacking each other. A king can attack another king if they are located in the adjacent cells, sharing an edge or a corner. Ildar would like to explore different combinations of cells. Initially all cells are marked as available, and then he has q queries. In each query he either marks a cell as unavailable, or marks the previously unavailable cell as available. After each query he would like to know whether it is possible to place the kings on the available cells in a desired way. Please help him!",
    "input": "The first line of input contains three integers n , m , q ( 1 \u2264 n, m, q \u2264 200 000 ) \u2014 the size of the board and the number of queries. q lines follow, each of them contains a description of a query: two integers i and j , denoting a white cell on the board ( 1 \u2264 i \u2264 2n , 1 \u2264 j \u2264 2m , i + j is even) . If the cell ( i, j) was available before the query, then it becomes unavailable. Otherwise, if the cell was unavailable, it becomes available.",
    "output": "Output q lines, i - th line should contain answer for a board after i queries of Ildar. This line should contain \" YES\" if it is possible to place the kings on the available cells in the desired way, or \" NO\" otherwise.",
    "note": "In the first example case after the second query only cells ( 1, 1) and ( 1, 5) are unavailable. Then Ivan can place three kings on cells ( 2, 2) , ( 2, 4) and ( 2, 6) . After the third query three cells ( 1, 1) , ( 1, 5) and ( 2, 4) are unavailable, so there remain only 3 available cells: ( 2, 2) , ( 1, 3) and ( 2, 6) . Ivan can not put 3 kings on those cells, because kings on cells ( 2, 2) and ( 1, 3) attack each other, since these cells share a corner.",
    "topics": [
      "data structures",
      "divide and conquer"
    ],
    "id": "1379F2"
  },
  {
    "title": "Chess Strikes Back (easy version)",
    "url": "https://codeforces.com/problemset/problem/1379/F1",
    "history": "Note that the difference between easy and hard versions is that in hard version unavailable cells can become available again and in easy version can' t. You can make hacks only if all versions are solved. Ildar and Ivan are tired of chess, but they really like the chessboard, so they invented a new game. The field is a chessboard 2n \u00d7 2m : it has 2n rows, 2m columns, and the cell in row i and column j is colored white if i+ j is even, and is colored black otherwise. The game proceeds as follows: Ildar marks some of the white cells of the chessboard as unavailable, and asks Ivan to place n \u00d7 m kings on the remaining white cells in such way, so that there are no kings attacking each other. A king can attack another king if they are located in the adjacent cells, sharing an edge or a corner. Ildar would like to explore different combinations of cells. Initially all cells are marked as available, and then he has q queries. In each query he marks a cell as unavailable. After each query he would like to know whether it is possible to place the kings on the available cells in a desired way. Please help him!",
    "input": "The first line of input contains three integers n , m , q ( 1 \u2264 n, m, q \u2264 200 000 ) \u2014 the size of the board and the number of queries. q lines follow, each of them contains a description of a query: two integers i and j , denoting a white cell ( i, j) on the board ( 1 \u2264 i \u2264 2n , 1 \u2264 j \u2264 2m , i + j is even) that becomes unavailable. It' s guaranteed, that each cell ( i, j) appears in input at most once.",
    "output": "Output q lines, i - th line should contain answer for a board after i queries of Ildar. This line should contain \" YES\" if it is possible to place the kings on the available cells in the desired way, or \" NO\" otherwise.",
    "note": "In the first example case after the second query only cells ( 1, 1) and ( 1, 5) are unavailable. Then Ivan can place three kings on cells ( 2, 2) , ( 2, 4) and ( 2, 6) . After the third query three cells ( 1, 1) , ( 1, 5) and ( 2, 4) are unavailable, so there remain only 3 available cells: ( 2, 2) , ( 1, 3) and ( 2, 6) . Ivan can not put 3 kings on those cells, because kings on cells ( 2, 2) and ( 1, 3) attack each other, since these cells share a corner.",
    "topics": [
      "binary search",
      "data structures"
    ],
    "id": "1379F1"
  },
  {
    "title": "New Passenger Trams",
    "url": "https://codeforces.com/problemset/problem/1379/D",
    "history": "There are many freight trains departing from Kirnes planet every day. One day on that planet consists of h hours, and each hour consists of m minutes, where m is an even number. Currently, there are n freight trains, and they depart every day at the same time: i - th train departs at h_ i hours and m_ i minutes. The government decided to add passenger trams as well: they plan to add a regular tram service with half- hour intervals. It means that the first tram of the day must depart at 0 hours and t minutes, where 0 \u2264 t < m 2 , the second tram departs m 2 minutes after the first one and so on. This schedule allows exactly two passenger trams per hour, which is a great improvement. To allow passengers to board the tram safely, the tram must arrive k minutes before. During the time when passengers are boarding the tram, no freight train can depart from the planet. However, freight trains are allowed to depart at the very moment when the boarding starts, as well as at the moment when the passenger tram departs. Note that, if the first passenger tram departs at 0 hours and t minutes, where t < k , then the freight trains can not depart during the last k - t minutes of the day. A schematic picture of the correct way to run passenger trams. Here h= 2 ( therefore, the number of passenger trams is 2h= 4 ) , the number of freight trains is n= 6 . The passenger trams are marked in red ( note that the spaces between them are the same) . The freight trains are marked in blue. Time segments of length k before each passenger tram are highlighted in red. Note that there are no freight trains inside these segments. Unfortunately, it might not be possible to satisfy the requirements of the government without canceling some of the freight trains. Please help the government find the optimal value of t to minimize the number of canceled freight trains in case all passenger trams depart according to schedule.",
    "input": "The first line of input contains four integers n , h , m , k ( 1 \u2264 n \u2264 100 000 , 1 \u2264 h \u2264 10^ 9 , 2 \u2264 m \u2264 10^ 9 , m is even, 1 \u2264 k \u2264m 2 ) \u2014 the number of freight trains per day, the number of hours and minutes on the planet, and the boarding time for each passenger tram. n lines follow, each contains two integers h_ i and m_ i ( 0 \u2264 h_ i < h , 0 \u2264 m_ i < m ) \u2014 the time when i - th freight train departs. It is guaranteed that no freight trains depart at the same time.",
    "output": "The first line of output should contain two integers: the minimum number of trains that need to be canceled, and the optimal starting time t . Second line of output should contain freight trains that need to be canceled.",
    "note": "In the first test case of the example the first tram can depart at 0 hours and 0 minutes. Then the freight train at 16 hours and 0 minutes can depart at the same time as the passenger tram, and the freight train at 17 hours and 15 minutes can depart at the same time as the boarding starts for the upcoming passenger tram. In the second test case of the example it is not possible to design the passenger tram schedule without cancelling any of the freight trains: if t \u2208 [ 1, 15] , then the freight train at 16 hours and 0 minutes is not able to depart ( since boarding time is 16 minutes) . If t = 0 or t \u2208 [ 16, 29] , then the freight train departing at 17 hours 15 minutes is not able to depart. However, if the second freight train is canceled, one can choose t = 0 . Another possible option is to cancel the first train and choose t = 13 .",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "sortings",
      "two pointers"
    ],
    "id": "1379D"
  },
  {
    "title": "Choosing flowers",
    "url": "https://codeforces.com/problemset/problem/1379/C",
    "history": "Vladimir would like to prepare a present for his wife: they have an anniversary! He decided to buy her exactly n flowers. Vladimir went to a flower shop, and he was amazed to see that there are m types of flowers being sold there, and there is unlimited supply of flowers of each type. Vladimir wants to choose flowers to maximize the happiness of his wife. He knows that after receiving the first flower of the i - th type happiness of his wife increases by a_ i and after receiving each consecutive flower of this type her happiness increases by b_ i . That is, if among the chosen flowers there are x_ i > 0 flowers of type i , his wife gets a_ i + ( x_ i - 1) \u00b7 b_ i additional happiness ( and if there are no flowers of type i , she gets nothing for this particular type) . Please help Vladimir to choose exactly n flowers to maximize the total happiness of his wife.",
    "input": "The first line contains the only integer t ( 1 \u2264 t \u2264 10 000 ) , the number of test cases. It is followed by t descriptions of the test cases. Each test case description starts with two integers n and m ( 1 \u2264 n \u2264 10^ 9 , 1 \u2264 m \u2264 100 000 ) , the number of flowers Vladimir needs to choose and the number of types of available flowers. The following m lines describe the types of flowers: each line contains integers a_ i and b_ i ( 0 \u2264 a_ i, b_ i \u2264 10^ 9 ) for i - th available type of flowers. The test cases are separated by a blank line. It is guaranteed that the sum of values m among all test cases does not exceed 100 000 .",
    "output": "For each test case output a single integer: the maximum total happiness of Vladimir' s wife after choosing exactly n flowers optimally.",
    "note": "In the first example case Vladimir can pick 1 flower of the first type and 3 flowers of the second type, in this case the total happiness equals 5 + ( 1 + 2 \u00b7 4) = 14 . In the second example Vladimir can pick 2 flowers of the first type, 2 flowers of the second type, and 1 flower of the third type, in this case the total happiness equals ( 5 + 1 \u00b7 2) + ( 4 + 1 \u00b7 2) + 3 = 16 .",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "dfs and similar",
      "dp",
      "greedy",
      "sortings",
      "two pointers"
    ],
    "id": "1379C"
  },
  {
    "title": "Element Extermination",
    "url": "https://codeforces.com/problemset/problem/1375/C",
    "history": "You are given an array a of length n , which initially is a permutation of numbers from 1 to n . In one operation, you can choose an index i ( 1 \u2264 i < n ) such that a_ i < a_ i + 1 , and remove either a_ i or a_ i + 1 from the array ( after the removal, the remaining parts are concatenated) . For example, if you have the array [ 1, 3, 2] , you can choose i = 1 ( since a_ 1 = 1 < a_ 2 = 3 ) , then either remove a_ 1 which gives the new array [ 3, 2] , or remove a_ 2 which gives the new array [ 1, 2] . Is it possible to make the length of this array equal to 1 with these operations?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 4 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n ( 2 \u2264 n \u2264 3 \u00b7 10^ 5 ) \u2014 the length of the array. The second line of each test case contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 1 \u2264 a_ i \u2264 n , a_ i are pairwise distinct) \u2014 elements of the array. It is guaranteed that the sum of n over all test cases doesn' t exceed 3 \u00b7 10^ 5 .",
    "output": "For each test case, output on a single line the word \" YES\" if it is possible to reduce the array to a single element using the aforementioned operation, or \" NO\" if it is impossible to do so.",
    "note": "For the first two test cases and the fourth test case, we can operate as follow ( the bolded elements are the pair chosen for that operation) : [ 1, 2, 3] \u2192 [ 1, 2] \u2192 [ 1] [ 3, 1, 2, 4] \u2192 [ 3, 1, 4] \u2192 [ 3, 4] \u2192 [ 4] [ 2, 4, 6, 1, 3, 5] \u2192 [ 4, 6, 1, 3, 5] \u2192 [ 4, 1, 3, 5] \u2192 [ 4, 1, 5] \u2192 [ 4, 5] \u2192 [ 4]",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy"
    ],
    "id": "1375C"
  },
  {
    "title": "Reading Books (hard version)",
    "url": "https://codeforces.com/problemset/problem/1374/E2",
    "history": "Easy and hard versions are actually different problems, so read statements of both problems completely and carefully. Summer vacation has started so Alice and Bob want to play and joy, but. . . Their mom doesn' t think so. She says that they have to read exactly m books before all entertainments. Alice and Bob will read each book together to end this exercise faster. There are n books in the family library. The i - th book is described by three integers: t_ i \u2014 the amount of time Alice and Bob need to spend to read it, a_ i ( equals 1 if Alice likes the i - th book and 0 if not) , and b_ i ( equals 1 if Bob likes the i - th book and 0 if not) . So they need to choose exactly m books from the given n books in such a way that: Alice likes at least k books from the chosen set and Bob likes at least k books from the chosen set; the total reading time of these m books is minimized ( they are children and want to play and joy as soon a possible) . The set they choose is the same for both Alice an Bob ( it' s shared between them) and they read all books together, so the total reading time is the sum of t_ i over all books that are in the chosen set. Your task is to help them and find any suitable set of books or determine that it is impossible to find such a set.",
    "input": "The first line of the input contains three integers n , m and k ( 1 \u2264 k \u2264 m \u2264 n \u2264 2 \u00b7 10^ 5 ) . The next n lines contain descriptions of books, one description per line: the i - th line contains three integers t_ i , a_ i and b_ i ( 1 \u2264 t_ i \u2264 10^ 4 , 0 \u2264 a_ i, b_ i \u2264 1 ) , where: t_ i \u2014 the amount of time required for reading the i - th book; a_ i equals 1 if Alice likes the i - th book and 0 otherwise; b_ i equals 1 if Bob likes the i - th book and 0 otherwise.",
    "output": "If there is no solution, print only one integer - 1. If the solution exists, print T in the first line \u2014 the minimum total reading time of the suitable set of books. In the second line print m distinct integers from 1 to n in any order \u2014 indices of books which are in the set you found. If there are several answers, print any of them.",
    "note": "",
    "topics": [
      "data structures",
      "greedy",
      "implementation",
      "sortings",
      "ternary search",
      "two pointers"
    ],
    "id": "1374E2"
  },
  {
    "title": "Reading Books (easy version)",
    "url": "https://codeforces.com/problemset/problem/1374/E1",
    "history": "Easy and hard versions are actually different problems, so read statements of both problems completely and carefully. Summer vacation has started so Alice and Bob want to play and joy, but. . . Their mom doesn' t think so. She says that they have to read some amount of books before all entertainments. Alice and Bob will read each book together to end this exercise faster. There are n books in the family library. The i - th book is described by three integers: t_ i \u2014 the amount of time Alice and Bob need to spend to read it, a_ i ( equals 1 if Alice likes the i - th book and 0 if not) , and b_ i ( equals 1 if Bob likes the i - th book and 0 if not) . So they need to choose some books from the given n books in such a way that: Alice likes at least k books from the chosen set and Bob likes at least k books from the chosen set; the total reading time of these books is minimized ( they are children and want to play and joy as soon a possible) . The set they choose is the same for both Alice an Bob ( it' s shared between them) and they read all books together, so the total reading time is the sum of t_ i over all books that are in the chosen set. Your task is to help them and find any suitable set of books or determine that it is impossible to find such a set.",
    "input": "The first line of the input contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 2 \u00b7 10^ 5 ) . The next n lines contain descriptions of books, one description per line: the i - th line contains three integers t_ i , a_ i and b_ i ( 1 \u2264 t_ i \u2264 10^ 4 , 0 \u2264 a_ i, b_ i \u2264 1 ) , where: t_ i \u2014 the amount of time required for reading the i - th book; a_ i equals 1 if Alice likes the i - th book and 0 otherwise; b_ i equals 1 if Bob likes the i - th book and 0 otherwise.",
    "output": "If there is no solution, print only one integer - 1. Otherwise print one integer T \u2014 the minimum total reading time of the suitable set of books.",
    "note": "",
    "topics": [
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "1374E1"
  },
  {
    "title": "Pawns",
    "url": "https://codeforces.com/problemset/problem/1373/G",
    "history": "You are given a chessboard consisting of n rows and n columns. Rows are numbered from bottom to top from 1 to n . Columns are numbered from left to right from 1 to n . The cell at the intersection of the x - th column and the y - th row is denoted as ( x, y) . Furthermore, the k - th column is a special column. Initially, the board is empty. There are m changes to the board. During the i - th change one pawn is added or removed from the board. The current board is good if we can move all pawns to the special column by the followings rules: Pawn in the cell ( x, y) can be moved to the cell ( x, y + 1) , ( x - 1, y + 1) or ( x + 1, y + 1) ; You can make as many such moves as you like; Pawns can not be moved outside the chessboard; Each cell can not contain more than one pawn. The current board may not always be good. To fix it, you can add new rows to the board. New rows are added at the top, i. e. they will have numbers n+ 1, n+ 2, n+ 3, . . . . After each of m changes, print one integer \u2014 the minimum number of rows which you have to add to make the board good.",
    "input": "The first line contains three integers n , k and m ( 1 \u2264 n, m \u2264 2 \u00b7 10^ 5; 1 \u2264 k \u2264 n ) \u2014 the size of the board, the index of the special column and the number of changes respectively. Then m lines follow. The i - th line contains two integers x and y ( 1 \u2264 x, y \u2264 n ) \u2014 the index of the column and the index of the row respectively. If there is no pawn in the cell ( x, y) , then you add a pawn to this cell, otherwise \u2014 you remove the pawn from this cell.",
    "output": "After each change print one integer \u2014 the minimum number of rows which you have to add to make the board good.",
    "note": "",
    "topics": [
      "data structures",
      "divide and conquer",
      "greedy"
    ],
    "id": "1373G"
  },
  {
    "title": "Network Coverage",
    "url": "https://codeforces.com/problemset/problem/1373/F",
    "history": "The government of Berland decided to improve network coverage in his country. Berland has a unique structure: the capital in the center and n cities in a circle around the capital. The capital already has a good network coverage ( so the government ignores it) , but the i - th city contains a_ i households that require a connection. The government designed a plan to build n network stations between all pairs of neighboring cities which will maintain connections only for these cities. In other words, the i - th network station will provide service only for the i - th and the ( i + 1) - th city ( the n - th station is connected to the n - th and the 1 - st city) . All network stations have capacities: the i - th station can provide the connection to at most b_ i households. Now the government asks you to check can the designed stations meet the needs of all cities or not \u2014 that is, is it possible to assign each household a network station so that each network station i provides the connection to at most b_ i households.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains the single integer n ( 2 \u2264 n \u2264 10^ 6 ) \u2014 the number of cities and stations. The second line of each test case contains n integers ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the number of households in the i - th city. The third line of each test case contains n integers ( 1 \u2264 b_ i \u2264 10^ 9 ) \u2014 the capacities of the designed stations. It' s guaranteed that the sum of n over test cases doesn' t exceed 10^ 6 .",
    "output": "For each test case, print YES, if the designed stations can meet the needs of all cities, or NO otherwise ( case insensitive) .",
    "note": "In the first test case: the first network station can provide 2 connections to the first city and 1 connection to the second city; the second station can provide 2 connections to the second city and 1 connection to the third city; the third station can provide 3 connections to the third city. In the second test case: the 1 - st station can provide 2 connections to the 1 - st city; the 2 - nd station can provide 3 connections to the 2 - nd city; the 3 - rd station can provide 3 connections to the 3 - rd city and 1 connection to the 1 - st station. In the third test case, the fourth city needs 5 connections, but the third and the fourth station has 4 connections in total.",
    "topics": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "greedy"
    ],
    "id": "1373F"
  },
  {
    "title": "Raging Thunder",
    "url": "https://codeforces.com/problemset/problem/1371/F",
    "history": "You are a warrior fighting against the machine god Thor. Thor challenge you to solve the following problem: There are n conveyors arranged in a line numbered with integers from 1 to n from left to right. Each conveyor has a symbol \" < \" or \" > \" . The initial state of the conveyor i is equal to the i - th character of the string s . There are n+ 1 holes numbered with integers from 0 to n . The hole 0 is on the left side of the conveyor 1 , and for all i \u2265 1 the hole i is on the right side of the conveyor i . When a ball is on the conveyor i , the ball moves by the next rules: If the symbol \" < \" is on the conveyor i , then: If i= 1 , the ball falls into the hole 0 . If the symbol \" < \" is on the conveyor i- 1 , the ball moves to the conveyor i- 1 . If the symbol \" > \" is on the conveyor i- 1 , the ball falls into the hole i- 1 . If the symbol \" > \" is on the conveyor i , then: If i= n , the ball falls into the hole n . If the symbol \" > \" is on the conveyor i+ 1 , the ball moves to the conveyor i+ 1 . If the symbol \" < \" is on the conveyor i+ 1 , the ball falls into the hole i . You should answer next q queries, each query is defined by the pair of integers l, r ( 1 \u2264 l \u2264 r \u2264 n ) : First, for all conveyors l, l+ 1, . . . , r , the symbol \" < \" changes to \" > \" and vice versa. These changes remain for the next queries. After that, put one ball on each conveyor l, l+ 1, . . . , r . Then, each ball falls into some hole. Find the maximum number of balls in one hole. After the query all balls disappear and don' t considered in the next queries.",
    "input": "The first line contains two integers n , q ( 1 \u2264 n \u2264 5 \u00d7 10^ 5 , 1 \u2264 q \u2264 10^ 5 ) . The second line contains a string s of length n . It consists of characters \" < \" and \" > \" . Next q lines contain the descriptions of the queries, i - th of them contains two integers l , r ( 1 \u2264 l \u2264 r \u2264 n) , describing the i - th query.",
    "output": "Print q lines, in the i - th of them print the answer to the i - th query.",
    "note": "In the first query, the conveyors change to \" > > < < < \" . After that, put a ball on each conveyor { 2, 3, 4} . All three balls fall into the hole 2 . So the answer is 3 . In the second query, the conveyors change to \" > > > > > \" . After that, put a ball on each conveyor { 3, 4, 5} . All three balls fall into the hole 5 . So the answer is 3 . In the third query, the conveyors change to \" < < < < < \" . After that, put a ball on each conveyor { 1, 2, 3, 4, 5} . All five balls fall into the hole 0 . So the answer is 5 . In the fourth query, the conveyors change to \" > > > < < \" . After that, put a ball on each conveyor { 1, 2, 3} . All three balls fall into the hole 3 . So the answer is 3 . In the fifth query, the conveyors change to \" > < < > < \" . After that, put a ball on each conveyor { 2, 3, 4} . Two balls fall into the hole 1 , and one ball falls into the hole 4 . So, the answer is 2 . In the sixth query, the conveyors change to \" < > > < > \" . After that, put a ball on each conveyor { 1, 2, 3, 4, 5} . Three balls fall into the hole 3 , one ball falls into the hole 0 and one ball falls into the hole 5 . So, the answer is 3 .",
    "topics": [
      "data structures",
      "divide and conquer",
      "implementation"
    ],
    "id": "1371F"
  },
  {
    "title": "Binary Subsequence Rotation",
    "url": "https://codeforces.com/problemset/problem/1370/E",
    "history": "Naman has two binary strings s and t of length n ( a binary string is a string which only consists of the characters \" 0\" and \" 1\" ) . He wants to convert s into t using the following operation as few times as possible. In one operation, he can choose any subsequence of s and rotate it clockwise once. For example, if s = 1110100 , he can choose a subsequence corresponding to indices ( 1 - based) { 2, 6, 7 } and rotate them clockwise. The resulting string would then be s = 1010110 . A string a is said to be a subsequence of string b if a can be obtained from b by deleting some characters without changing the ordering of the remaining characters. To perform a clockwise rotation on a sequence c of size k is to perform an operation which sets c_ 1: = c_ k, c_ 2: = c_ 1, c_ 3: = c_ 2, . . . , c_ k: = c_ k- 1 simultaneously. Determine the minimum number of operations Naman has to perform to convert s into t or say that it is impossible.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 6) \u2014 the length of the strings. The second line contains the binary string s of length n . The third line contains the binary string t of length n .",
    "output": "If it is impossible to convert s to t after any number of operations, print - 1 . Otherwise, print the minimum number of operations required.",
    "note": "In the first test, Naman can choose the subsequence corresponding to indices { 2, 6} and rotate it once to convert s into t . In the second test, he can rotate the subsequence corresponding to all indices 5 times. It can be proved, that it is the minimum required number of operations. In the last test, it is impossible to convert s into t .",
    "topics": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "greedy"
    ],
    "id": "1370E"
  },
  {
    "title": "DeadLee",
    "url": "https://codeforces.com/problemset/problem/1369/E",
    "history": "Lee bought some food for dinner time, but Lee' s friends eat dinner in a deadly way. Lee is so scared, he doesn' t want to die, at least not before seeing Online IOI 2020. . . There are n different types of food and m Lee' s best friends. Lee has w_ i plates of the i - th type of food and each friend has two different favorite types of food: the i - th friend' s favorite types of food are x_ i and y_ i ( x_ i y_ i ) . Lee will start calling his friends one by one. Whoever is called will go to the kitchen and will try to eat one plate of each of his favorite food types. Each of the friends will go to the kitchen exactly once. The only problem is the following: if a friend will eat at least one plate of food ( in total) then he will be harmless. But if there is nothing left for him to eat ( neither x_ i nor y_ i ) , he will eat Lee instead \u00d7_ \u00d7 . Lee can choose the order of friends to call, so he' d like to determine if he can survive dinner or not. Also, he' d like to know the order itself.",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 10^ 5 ; 1 \u2264 m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of different food types and the number of Lee' s friends. The second line contains n integers w_ 1, w_ 2, . . . , w_ n ( 0 \u2264 w_ i \u2264 10^ 6 ) \u2014 the number of plates of each food type. The i - th line of the next m lines contains two integers x_ i and y_ i ( 1 \u2264 x_ i, y_ i \u2264 n ; x_ i y_ i ) \u2014 the favorite types of food of the i - th friend.",
    "output": "If Lee can survive the dinner then print ALIVE ( case insensitive) , otherwise print DEAD ( case insensitive) . Also, if he can survive the dinner, print the order Lee should call friends. If there are multiple valid orders, print any of them.",
    "note": "In the first example, any of the following orders of friends are correct : [ 1, 3, 2] , [ 3, 1, 2] , [ 2, 3, 1] , [ 3, 2, 1] . In the second example, Lee should call the second friend first ( the friend will eat a plate of food 1 ) and then call the first friend ( the friend will eat a plate of food 2 ) . If he calls the first friend sooner than the second one, then the first friend will eat one plate of food 1 and food 2 and there will be no food left for the second friend to eat.",
    "topics": [
      "data structures",
      "dfs and similar",
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "1369E"
  },
  {
    "title": "Shifting Dominoes",
    "url": "https://codeforces.com/problemset/problem/1368/G",
    "history": "Bill likes to play with dominoes. He took an n \u00d7 m board divided into equal square cells, and covered it with dominoes. Each domino covers two adjacent cells of the board either horizontally or vertically, and each cell is covered exactly once with a half of one domino ( that is, there are no uncovered cells, and no two dominoes cover the same cell twice) . After that Bill decided to play with the covered board and share some photos of it on social media. First, he removes exactly one domino from the board, freeing two of the cells. Next, he moves dominoes around. A domino can only be moved along the line parallel to its longer side. A move in the chosen direction is possible if the next cell in this direction is currently free. Bill doesn' t want to lose track of what the original tiling looks like, so he makes sure that at any point each domino shares at least one cell with its original position. After removing a domino and making several ( possibly, zero) moves Bill takes a photo of the board and posts it. However, with the amount of filters Bill is using, domino borders are not visible, so only the two free cells of the board can be identified. When the photo is posted, Bill reverts the board to its original state and starts the process again. Bill wants to post as many photos as possible, but he will not post any photo twice. How many distinct photos can he take? Recall that photos are different if the pairs of free cells in the photos are different.",
    "input": "The first line contains two positive integers n and m ( nm \u2264 2 \u00b7 10^ 5 ) \u2014 height and width of the board respectively. The next n lines describe the tiling of the board, row by row from top to bottom. Each of these lines contains m characters, describing the cells in the corresponding row left to right. Each character is one of U, D, L, or R, meaning that the cell is covered with a top, bottom, left, or right half of a domino respectively. It is guaranteed that the described tiling is valid, that is, each half- domino has a counterpart in the relevant location. In particular, since tiling is possible, the number of cells in the board is even.",
    "output": "Print a single integer \u2014 the number of distinct photos Bill can take.",
    "note": "In the first sample case, no moves are possible after removing any domino, thus there are four distinct photos. In the second sample case, four photos are possible after removing the leftmost domino by independently moving/ not moving the remaining two dominoes. Two more different photos are obtained by removing one of the dominoes on the right.",
    "topics": [
      "data structures",
      "geometry",
      "graphs",
      "trees"
    ],
    "id": "1368G"
  },
  {
    "title": "Flying Sort (Hard Version)",
    "url": "https://codeforces.com/problemset/problem/1367/F2",
    "history": "This is a hard version of the problem. In this version, the given array can contain equal elements and the constraints on n are greater than in the easy version of the problem. You are given an array a of n integers ( the given array can contain equal elements) . You can perform the following operations on array elements: choose any index i ( 1 \u2264 i \u2264 n ) and move the element a[ i] to the begin of the array; choose any index i ( 1 \u2264 i \u2264 n ) and move the element a[ i] to the end of the array. For example, if n = 5 , a = [ 4, 7, 2, 2, 9] , then the following sequence of operations can be performed: after performing the operation of the first type to the second element, the array a will become [ 7, 4, 2, 2, 9] ; after performing the operation of the second type to the second element, the array a will become [ 7, 2, 2, 9, 4] . You can perform operations of any type any number of times in any order. Find the minimum total number of operations of the first and second type that will make the a array sorted in non- decreasing order. In other words, what is the minimum number of operations must be performed so the array satisfies the inequalities a[ 1] \u2264 a[ 2] \u2264. . . \u2264 a[ n] .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the test. Then t test cases follow. Each test case starts with a line containing an integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the size of the array a . Then follow n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) \u2014 an array that needs to be sorted by the given operations. The given array can contain equal elements. The sum of n for all test cases in one test does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case output one integer \u2014 the minimum total number of operations of the first and second type, which will make the array sorted in non- decreasing order.",
    "note": "In the first test case, you first need to move two 2, to the beginning of the array. Therefore, the desired sequence of operations: [ 4, 7, 2, 2, 9] \u2192 [ 2, 4, 7, 2, 9] \u2192 [ 2, 2, 4, 7, 9] . In the second test case, you need to move the 1 to the beginning of the array, and the 8 \u2014 to the end. Therefore, the desired sequence of operations: [ 3, 5, 8, 1, 7] \u2192 [ 1, 3, 5, 8, 7] \u2192 [ 1, 3, 5, 7, 8] . In the third test case, the array is already sorted.",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "greedy",
      "sortings",
      "two pointers"
    ],
    "id": "1367F2"
  },
  {
    "title": "Construct the String",
    "url": "https://codeforces.com/problemset/problem/1366/G",
    "history": "Let' s denote the function f( s) that takes a string s consisting of lowercase Latin letters and dots, and returns a string consisting of lowercase Latin letters as follows: let r be an empty string; process the characters of s from left to right. For each character c , do the following: if c is a lowercase Latin letter, append c at the end of the string r ; otherwise, delete the last character from r ( if r is empty before deleting the last character \u2014 the function crashes) ; return r as the result of the function. You are given two strings s and t . You have to delete the minimum possible number of characters from s so that f( s) = t ( and the function does not crash) . Note that you aren' t allowed to insert new characters into s or reorder the existing ones.",
    "input": "The input consists of two lines: the first one contains s \u2014 a string consisting of lowercase Latin letters and dots, the second one contains t \u2014 a string consisting of lowercase Latin letters ( 1 \u2264 | t| \u2264 | s| \u2264 10000 ) . Additional constraint on the input: it is possible to remove some number of characters from s so that f( s) = t .",
    "output": "Print one integer \u2014 the minimum possible number of characters you have to delete from s so f( s) does not crash and returns t as the result of the function.",
    "note": "",
    "topics": [
      "data structures",
      "dp",
      "strings"
    ],
    "id": "1366G"
  },
  {
    "title": "Rotation Matching",
    "url": "https://codeforces.com/problemset/problem/1365/C",
    "history": "After the mysterious disappearance of Ashish, his two favourite disciples Ishika and Hriday, were each left with one half of a secret message. These messages can each be represented by a permutation of size n . Let' s call them a and b . Note that a permutation of n elements is a sequence of numbers a_ 1, a_ 2, . . . , a_ n , in which every number from 1 to n appears exactly once. The message can be decoded by an arrangement of sequence a and b , such that the number of matching pairs of elements between them is maximum. A pair of elements a_ i and b_ j is said to match if: i = j , that is, they are at the same index. a_ i = b_ j His two disciples are allowed to perform the following operation any number of times: choose a number k and cyclically shift one of the permutations to the left or right k times. A single cyclic shift to the left on any permutation c is an operation that sets c_ 1: = c_ 2, c_ 2: = c_ 3, . . . , c_ n: = c_ 1 simultaneously. Likewise, a single cyclic shift to the right on any permutation c is an operation that sets c_ 1: = c_ n, c_ 2: = c_ 1, . . . , c_ n: = c_ n- 1 simultaneously. Help Ishika and Hriday find the maximum number of pairs of elements that match after performing the operation any ( possibly zero) number of times.",
    "input": "The first line of the input contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5) \u2014 the size of the arrays. The second line contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 1 \u2264 a_ i \u2264 n) \u2014 the elements of the first permutation. The third line contains n integers b_ 1 , b_ 2 , . . . , b_ n ( 1 \u2264 b_ i \u2264 n) \u2014 the elements of the second permutation.",
    "output": "Print the maximum number of matching pairs of elements after performing the above operations some ( possibly zero) times.",
    "note": "For the first case: b can be shifted to the right by k = 1 . The resulting permutations will be { 1, 2, 3, 4, 5} and { 1, 2, 3, 4, 5} . For the second case: The operation is not required. For all possible rotations of a and b , the number of matching pairs won' t exceed 1 . For the third case: b can be shifted to the left by k = 1 . The resulting permutations will be { 1, 3, 2, 4} and { 2, 3, 1, 4} . Positions 2 and 4 have matching pairs of elements. For all possible rotations of a and b , the number of matching pairs won' t exceed 2 .",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "1365C"
  },
  {
    "title": "XXXXX",
    "url": "https://codeforces.com/problemset/problem/1364/A",
    "history": "Ehab loves number theory, but for some reason he hates the number x . Given an array a , find the length of its longest subarray such that the sum of its elements isn' t divisible by x , or determine that such subarray doesn' t exist. An array a is a subarray of an array b if a can be obtained from b by deletion of several ( possibly, zero or all) elements from the beginning and several ( possibly, zero or all) elements from the end.",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 5) \u2014 the number of test cases you need to solve. The description of the test cases follows. The first line of each test case contains 2 integers n and x ( 1 \u2264 n \u2264 10^ 5 , 1 \u2264 x \u2264 10^ 4 ) \u2014 the number of elements in the array a and the number that Ehab hates. The second line contains n space- separated integers a_ 1 , a_ 2 , . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 4 ) \u2014 the elements of the array a .",
    "output": "For each testcase, print the length of the longest subarray whose sum isn' t divisible by x . If there' s no such subarray, print - 1 .",
    "note": "In the first test case, the subarray [ 2, 3] has sum of elements 5 , which isn' t divisible by 3 . In the second test case, the sum of elements of the whole array is 6 , which isn' t divisible by 4 . In the third test case, all subarrays have an even sum, so the answer is - 1 .",
    "topics": [
      "brute force",
      "data structures",
      "number theory",
      "two pointers"
    ],
    "id": "1364A"
  },
  {
    "title": "Johnny and New Toy",
    "url": "https://codeforces.com/problemset/problem/1361/F",
    "history": "Johnny has a new toy. As you may guess, it is a little bit extraordinary. The toy is a permutation P of numbers from 1 to n , written in one row next to each other. For each i from 1 to n - 1 between P_ i and P_ i + 1 there is a weight W_ i written, and those weights form a permutation of numbers from 1 to n - 1 . There are also extra weights W_ 0 = W_ n = 0 . The instruction defines subsegment [ L, R] as good if W_ L - 1 < W_ i and W_ R < W_ i for any i in { L, L + 1, . . . , R - 1} . For such subsegment it also defines W_ M as minimum of set { W_ L, W_ L + 1, . . . , W_ R - 1} . Now the fun begins. In one move, the player can choose one of the good subsegments, cut it into [ L, M] and [ M + 1, R] and swap the two parts. More precisely, before one move the chosen subsegment of our toy looks like: W_ L - 1, P_ L, W_ L, . . . , W_ M - 1, P_ M, W_ M, P_ M + 1, W_ M + 1, . . . , W_ R - 1, P_ R, W_ R and afterwards it looks like this: W_ L - 1, P_ M + 1, W_ M + 1, . . . , W_ R - 1, P_ R, W_ M, P_ L, W_ L, . . . , W_ M - 1, P_ M, W_ R Such a move can be performed multiple times ( possibly zero) , and the goal is to achieve the minimum number of inversions in P . Johnny' s younger sister Megan thinks that the rules are too complicated, so she wants to test her brother by choosing some pair of indices X and Y , and swapping P_ X and P_ Y ( X might be equal Y ) . After each sister' s swap, Johnny wonders, what is the minimal number of inversions that he can achieve, starting with current P and making legal moves? You can assume that the input is generated randomly. P and W were chosen independently and equiprobably over all permutations; also, Megan' s requests were chosen independently and equiprobably over all pairs of indices.",
    "input": "The first line contains single integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5) denoting the length of the toy. The second line contains n distinct integers P_ 1, P_ 2, . . . , P_ n ( 1 \u2264 P_ i \u2264 n) denoting the initial permutation P . The third line contains n - 1 distinct integers W_ 1, W_ 2, . . . , W_ n - 1 ( 1 \u2264 W_ i \u2264 n - 1) denoting the weights. The fourth line contains single integer q ( 1 \u2264 q \u2264 5 \u00b7 10^ 4) \u2014 the number of Megan' s swaps. The following q lines contain two integers X and Y ( 1 \u2264 X, Y \u2264 n) \u2014 the indices of elements of P to swap. The queries aren' t independent; after each of them, the permutation is changed.",
    "output": "Output q lines. The i - th line should contain exactly one integer \u2014 the minimum number of inversions in permutation, which can be obtained by starting with the P after first i queries and making moves described in the game' s instruction.",
    "note": "Consider the first sample. After the first query, P is sorted, so we already achieved a permutation with no inversions. After the second query, P is equal to [ 1 , 3 , 2 ] , it has one inversion, it can be proven that it is impossible to achieve 0 inversions. In the end, P is equal to [ 2 , 3 , 1 ] ; we can make a move on the whole permutation, as it is a good subsegment itself, which results in P equal to [ 1 , 2 , 3 ] , which has 0 inversions.",
    "topics": [
      "data structures",
      "implementation",
      "math"
    ],
    "id": "1361F"
  },
  {
    "title": "RC Kaboom Show",
    "url": "https://codeforces.com/problemset/problem/1359/F",
    "history": "You know, it' s hard to conduct a show with lots of participants and spectators at the same place nowadays. Still, you are not giving up on your dream to make a car crash showcase! You decided to replace the real cars with remote controlled ones, call the event \" Remote Control Kaboom Show\" and stream everything online. For the preparation you arranged an arena \u2014 an infinite 2D- field. You also bought n remote controlled cars and set them up on the arena. Unfortunately, the cars you bought can only go forward without turning left, right or around. So you additionally put the cars in the direction you want them to go. To be formal, for each car i ( 1 \u2264 i \u2264 n ) you chose its initial position ( x_ i, y_ i ) and a direction vector ( dx_ i, dy_ i ) . Moreover, each car has a constant speed s_ i units per second. So after car i is launched, it stars moving from ( x_ i, y_ i ) in the direction ( dx_ i, dy_ i ) with constant speed s_ i . The goal of the show is to create a car collision as fast as possible! You noted that launching every car at the beginning of the show often fails to produce any collisions at all. Thus, you plan to launch the i - th car at some moment t_ i . You haven' t chosen t_ i , that' s yet to be decided. Note that it' s not necessary for t_ i to be integer and t_ i is allowed to be equal to t_ j for any i, j . The show starts at time 0 . The show ends when two cars i and j ( i j ) collide ( i. e. come to the same coordinate at the same time) . The duration of the show is the time between the start and the end. What' s the fastest crash you can arrange by choosing all t_ i ? If it' s possible to arrange a crash then print the shortest possible duration of the show. Otherwise, report that it' s impossible.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 25000 ) \u2014 the number of cars. Each of the next n lines contains five integers x_ i , y_ i , dx_ i , dy_ i , s_ i ( - 10^ 3 \u2264 x_ i, y_ i \u2264 10^ 3 ; 1 \u2264 | dx_ i| \u2264 10^ 3 ; 1 \u2264 | dy_ i| \u2264 10^ 3 ; 1 \u2264 s_ i \u2264 10^ 3 ) \u2014 the initial position of the i - th car, its direction vector and its speed, respectively. It' s guaranteed that all cars start at distinct positions ( i. e. ( x_ i, y_ i) = \u0338 ( x_ j, y_ j) for i = \u0338 j ) .",
    "output": "Print the shortest possible duration of the show if it' s possible to arrange a crash by choosing all t_ i . Otherwise, print \" No show : ( \" . Your answer is considered correct if its absolute or relative error does not exceed 10^ - 6 . Formally, let your answer be a , and the jury' s answer be b . Your answer is accepted if and only if | a - b| / max( 1, | b| ) \u2264 10^ - 6 .",
    "note": "Here is the picture for the first example: The fastest cars to crash are cars 2 and 4 . Let' s launch car 2 at 0 , car 4 at about 0. 096762 and cars 1 and 3 at arbitrary time. That way cars 2 and 4 will crash into each other at about 0. 585902 . So here' s what it looks like at the moment of the collision: Here' s the picture for the second example:",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "geometry",
      "math"
    ],
    "id": "1359F"
  },
  {
    "title": "Yet Another Yet Another Task",
    "url": "https://codeforces.com/problemset/problem/1359/D",
    "history": "Alice and Bob are playing yet another card game. This time the rules are the following. There are n cards lying in a row in front of them. The i - th card has value a_ i . First, Alice chooses a non- empty consecutive segment of cards [ l; r] ( l \u2264 r ) . After that Bob removes a single card j from that segment ( l \u2264 j \u2264 r) . The score of the game is the total value of the remaining cards on the segment ( a_ l + a_ l + 1 + . . . + a_ j - 1 + a_ j + 1 + . . . + a_ r - 1 + a_ r) . In particular, if Alice chooses a segment with just one element, then the score after Bob removes the only card is 0 . Alice wants to make the score as big as possible. Bob takes such a card that the score is as small as possible. What segment should Alice choose so that the score is maximum possible? Output the maximum score.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of cards. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( - 30 \u2264 a_ i \u2264 30 ) \u2014 the values on the cards.",
    "output": "Print a single integer \u2014 the final score of the game.",
    "note": "In the first example Alice chooses a segment [ 1; 5] \u2014 the entire row of cards. Bob removes card 3 with the value 10 from the segment. Thus, the final score is 5 + ( - 2) + ( - 1) + 4 = 6 . In the second example Alice chooses a segment [ 1; 4] , so that Bob removes either card 1 or 3 with the value 5 , making the answer 5 + 2 + 3 = 10 . In the third example Alice can choose any of the segments of length 1 : [ 1; 1] , [ 2; 2] or [ 3; 3] . Bob removes the only card, so the score is 0 . If Alice chooses some other segment then the answer will be less than 0 .",
    "topics": [
      "data structures",
      "dp",
      "implementation",
      "two pointers"
    ],
    "id": "1359D"
  },
  {
    "title": "Are You Fired?",
    "url": "https://codeforces.com/problemset/problem/1358/E",
    "history": "Levian works as an accountant in a large company. Levian knows how much the company has earned in each of the n consecutive months \u2014 in the i - th month the company had income equal to a_ i ( positive income means profit, negative income means loss, zero income means no change) . Because of the general self- isolation, the first \u2308n2\u2309 months income might have been completely unstable, but then everything stabilized and for the last \u230an2\u230b months the income was the same. Levian decided to tell the directors n- k+ 1 numbers \u2014 the total income of the company for each k consecutive months. In other words, for each i between 1 and n- k+ 1 he will say the value a_ i + a_ i+ 1 + . . . + a_ i + k - 1 . For example, if a= [ - 1, 0, 1, 2, 2] and k= 3 he will say the numbers 0, 3, 5 . Unfortunately, if at least one total income reported by Levian is not a profit ( income \u2264 0 ) , the directors will get angry and fire the failed accountant. Save Levian' s career: find any such k , that for each k months in a row the company had made a profit, or report that it is impossible.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 5\u00b7 10^ 5 ) \u2014 the number of months for which Levian must account. The second line contains \u2308n/ 2\u2309 integers a_ 1, a_ 2, . . . , a_ \u2308n/ 2\u2309 , where a_ i ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) \u2014 the income of the company in the i - th month. Third line contains a single integer x ( - 10^ 9 \u2264 x \u2264 10^ 9 ) \u2014 income in every month from \u2308n/ 2\u2309 + 1 to n .",
    "output": "In a single line, print the appropriate integer k or - 1 , if it does not exist. If there are multiple possible answers, you can print any.",
    "note": "In the first example, k= 2 and k= 3 satisfy: in the first case, Levian will report the numbers 1, 1 , and in the second case \u2014 one number 3 . In the second example, there is no such k . In the third example, the only answer is k= 4 : he will report the numbers 1, 2, 3 .",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "1358E"
  },
  {
    "title": "Multiset",
    "url": "https://codeforces.com/problemset/problem/1354/D",
    "history": "Note that the memory limit is unusual. You are given a multiset consisting of n integers. You have to process queries of two types: add integer k into the multiset; find the k - th order statistics in the multiset and remove it. k - th order statistics in the multiset is the k - th element in the sorted list of all elements of the multiset. For example, if the multiset contains elements 1 , 4 , 2 , 1 , 4 , 5 , 7 , and k = 3 , then you have to find the 3 - rd element in [ 1, 1, 2, 4, 4, 5, 7] , which is 2 . If you try to delete an element which occurs multiple times in the multiset, only one occurence is removed. After processing all queries, print any number belonging to the multiset, or say that it is empty.",
    "input": "The first line contains two integers n and q ( 1 \u2264 n, q \u2264 10^ 6 ) \u2014 the number of elements in the initial multiset and the number of queries, respectively. The second line contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 1 \u2264 a_ 1 \u2264 a_ 2 \u2264. . . \u2264 a_ n \u2264 n ) \u2014 the elements of the multiset. The third line contains q integers k_ 1 , k_ 2 , . . . , k_ q , each representing a query: if 1 \u2264 k_ i \u2264 n , then the i - th query is \" insert k_ i into the multiset\" ; if k_ i < 0 , then the i - th query is \" remove the | k_ i| - th order statistics from the multiset\" . For this query, it is guaranteed that | k_ i| is not greater than the size of the multiset.",
    "output": "If the multiset is empty after all queries, print 0 . Otherwise, print any integer that belongs to the resulting multiset.",
    "note": "In the first example, all elements of the multiset are deleted. In the second example, the elements 5 , 1 , 4 , 2 are deleted ( they are listed in chronological order of their removal) . In the third example, 6 is not the only answer.",
    "topics": [
      "binary search",
      "data structures"
    ],
    "id": "1354D"
  },
  {
    "title": "Constructing the Array",
    "url": "https://codeforces.com/problemset/problem/1353/D",
    "history": "You are given an array a of length n consisting of zeros. You perform n actions with this array: during the i - th action, the following sequence of operations appears: Choose the maximum by length subarray ( continuous subsegment) consisting only of zeros, among all such segments choose the leftmost one; Let this segment be [ l; r] . If r- l+ 1 is odd ( not divisible by 2 ) then assign ( set) a[ l+ r/ 2] : = i ( where i is the number of the current action) , otherwise ( if r- l+ 1 is even) assign ( set) a[ l+ r- 1/ 2] : = i . Consider the array a of length 5 ( initially a= [ 0, 0, 0, 0, 0] ) . Then it changes as follows: Firstly, we choose the segment [ 1; 5] and assign a[ 3] : = 1 , so a becomes [ 0, 0, 1, 0, 0] ; then we choose the segment [ 1; 2] and assign a[ 1] : = 2 , so a becomes [ 2, 0, 1, 0, 0] ; then we choose the segment [ 4; 5] and assign a[ 4] : = 3 , so a becomes [ 2, 0, 1, 3, 0] ; then we choose the segment [ 2; 2] and assign a[ 2] : = 4 , so a becomes [ 2, 4, 1, 3, 0] ; and at last we choose the segment [ 5; 5] and assign a[ 5] : = 5 , so a becomes [ 2, 4, 1, 3, 5] . Your task is to find the array a of length n after performing all n actions. Note that the answer exists and unique. You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The only line of the test case contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of a . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 ( \u2211 n \u2264 2 \u00b7 10^ 5 ) .",
    "output": "For each test case, print the answer \u2014 the array a of length n after performing n actions described in the problem statement. Note that the answer exists and unique.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "data structures",
      "sortings"
    ],
    "id": "1353D"
  },
  {
    "title": "Skier",
    "url": "https://codeforces.com/problemset/problem/1351/C",
    "history": "Skier rides on a snowy field. Its movements can be described by a string of characters ' S' , ' N' , ' W' , ' E' ( which correspond to 1 meter movement in the south, north, west or east direction respectively) . It is known that if he moves along a previously unvisited segment of a path ( i. e. this segment of the path is visited the first time) , then the time of such movement is 5 seconds. If he rolls along previously visited segment of a path ( i. e. , this segment of the path has been covered by his path before) , then it takes 1 second. Find the skier' s time to roll all the path.",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the input. Then t test cases follow. Each set is given by one nonempty string of the characters ' S' , ' N' , ' W' , ' E' . The length of the string does not exceed 10^ 5 characters. The sum of the lengths of t given lines over all test cases in the input does not exceed 10^ 5 .",
    "output": "For each test case, print the desired path time in seconds.",
    "note": "",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "1351C"
  },
  {
    "title": "Orac and LCM",
    "url": "https://codeforces.com/problemset/problem/1349/A",
    "history": "For the multiset of positive integers s= { s_ 1, s_ 2, . . . , s_ k} , define the Greatest Common Divisor ( GCD) and Least Common Multiple ( LCM) of s as follow: ( s) is the maximum positive integer x , such that all integers in s are divisible on x . lcm( s) is the minimum positive integer x , that divisible on all integers from s . For example, ( { 8, 12} ) = 4, ( { 12, 18, 6} ) = 6 and lcm( { 4, 6} ) = 12 . Note that for any positive integer x , ( { x} ) = lcm( { x} ) = x . Orac has a sequence a with length n . He come up with the multiset t= { lcm( { a_ i, a_ j} ) | i< j} , and asked you to find the value of ( t) for him. In other words, you need to calculate the GCD of LCMs of all pairs of elements in the given sequence.",
    "input": "The first line contains one integer n ( 2\u2264 n\u2264 100 000) . The second line contains n integers, a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 200 000 ) .",
    "output": "Print one integer: ( { lcm( { a_ i, a_ j} ) | i< j} ) .",
    "note": "For the first example, t= { lcm( { 1, 1} ) } = { 1} , so ( t) = 1 . For the second example, t= { 120, 40, 80, 120, 240, 80} , and it' s not hard to see that ( t) = 40 .",
    "topics": [
      "data structures",
      "math",
      "number theory"
    ],
    "id": "1349A"
  },
  {
    "title": "Phoenix and Memory",
    "url": "https://codeforces.com/problemset/problem/1348/F",
    "history": "Phoenix is trying to take a photo of his n friends with labels 1, 2, . . . , n who are lined up in a row in a special order. But before he can take the photo, his friends get distracted by a duck and mess up their order. Now, Phoenix must restore the order but he doesn' t remember completely! He only remembers that the i - th friend from the left had a label between a_ i and b_ i inclusive. Does there exist a unique way to order his friends based of his memory?",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 2\u00b710^ 5 ) \u2014 the number of friends. The i - th of the next n lines contain two integers a_ i and b_ i ( 1 \u2264 a_ i \u2264 b_ i \u2264 n ) \u2014 Phoenix' s memory of the i - th position from the left. It is guaranteed that Phoenix' s memory is valid so there is at least one valid ordering.",
    "output": "If Phoenix can reorder his friends in a unique order, print YES followed by n integers \u2014 the i - th integer should be the label of the i - th friend from the left. Otherwise, print NO. Then, print any two distinct valid orderings on the following two lines. If are multiple solutions, print any.",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "graphs",
      "greedy"
    ],
    "id": "1348F"
  },
  {
    "title": "Phoenix and Beauty",
    "url": "https://codeforces.com/problemset/problem/1348/B",
    "history": "Phoenix loves beautiful arrays. An array is beautiful if all its subarrays of length k have the same sum. A subarray of an array is any sequence of consecutive elements. Phoenix currently has an array a of length n . He wants to insert some number of integers, possibly zero, into his array such that it becomes beautiful. The inserted integers must be between 1 and n inclusive. Integers may be inserted anywhere ( even before the first or after the last element) , and he is not trying to minimize the number of inserted integers.",
    "input": "The input consists of multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 50 ) \u2014 the number of test cases. The first line of each test case contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 100 ) . The second line of each test case contains n space- separated integers ( 1 \u2264 a_ i \u2264 n ) \u2014 the array that Phoenix currently has. This array may or may not be already beautiful.",
    "output": "For each test case, if it is impossible to create a beautiful array, print - 1. Otherwise, print two lines. The first line should contain the length of the beautiful array m ( n \u2264 m \u2264 10^ 4 ) . You don' t need to minimize m . The second line should contain m space- separated integers ( 1 \u2264 b_ i \u2264 n ) \u2014 a beautiful array that Phoenix can obtain after inserting some, possibly zero, integers into his array a . You may print integers that weren' t originally in array a . If there are multiple solutions, print any. It' s guaranteed that if we can make array a beautiful, we can always make it with resulting length no more than 10^ 4 .",
    "note": "In the first test case, we can make array a beautiful by inserting the integer 1 at index 3 ( in between the two existing 2 s) . Now, all subarrays of length k= 2 have the same sum 3 . There exists many other possible solutions, for example: 2, 1, 2, 1, 2, 1 1, 2, 1, 2, 1, 2 In the second test case, the array is already beautiful: all subarrays of length k= 3 have the same sum 5 . In the third test case, it can be shown that we cannot insert numbers to make array a beautiful. In the fourth test case, the array b shown is beautiful and all subarrays of length k= 4 have the same sum 10 . There exist other solutions also.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "1348B"
  },
  {
    "title": "Game with Segments",
    "url": "https://codeforces.com/problemset/problem/1346/H",
    "history": "Alice and Bob are playing a game ( yet again) . They have two sequences of segments of the coordinate axis: a sequence of n initial segments: [ l_ 1, r_ 1] , [ l_ 2, r_ 2] , . . . , [ l_ n, r_ n] , and a sequence of m terminal segments: [ L_ 1, R_ 1] , [ L_ 2, R_ 2] , . . . , [ L_ m, R_ m] . At the beginning of the game, they choose one of the initial segments and set it as the current segment. Alice and Bob make alternating moves: Alice makes the first move, Bob makes the second move, Alice makes the third one, and so on. During each move, the current player must shrink the current segment either by increasing its left endpoint by 1 , or by decreasing its right endpoint by 1 . So, if the current segment is [ c_ l, c_ r] , it becomes either [ c_ l + 1, c_ r] , or [ c_ l, c_ r - 1] . If at the beginning of the game or after Bob' s move the current segment coincides with one of the terminal segments, Bob wins. If the current segment becomes degenerate ( c_ l = c_ r ) , and Bob hasn' t won yet, Alice wins. If the current segment coincides with one of the terminal segments after Alice' s move, nothing happens \u2014 the game continues. Both players play optimally \u2014 if they can win, they always use a strategy that leads them to victory in the minimum number of turns, and if they cannot win, they try to prolong the game, using the strategy allowing them to make the maximum possible number of moves until their defeat. For each of the initial segments you have to determine who will win the game if this segment is chosen as the current segment at the beginning of the game. If Bob wins, you also have to calculate the number of moves Alice will make before her defeat.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of initial segments and terminal segments, respectively. Then n lines follow, the i - th line contains two integers l_ i and r_ i ( 1 \u2264 l_ i < r_ i \u2264 10^ 6 ) \u2014 the endpoints of the i - th initial segment. Then m lines follow, the i - th line contains two integers L_ i and R_ i ( 1 \u2264 L_ i < R_ i \u2264 10^ 6 ) \u2014 the endpoints of the i - th terminal segment. Note that some of the segments given in the input may coincide.",
    "output": "Print n integers, the i - th of them should describe the result of the game if the i - th initial segment is chosen at the beginning of the game: if Alice wins, print - 1 ; if Bob wins, print the number of moves Alice will make before she is defeated.",
    "note": "",
    "topics": [
      "*special",
      "data structures",
      "games"
    ],
    "id": "1346H"
  },
  {
    "title": "Dune II: Battle For Arrakis",
    "url": "https://codeforces.com/problemset/problem/1346/F",
    "history": "You' re at the last mission in one very old and very popular strategy game Dune II: Battle For Arrakis. The map of the mission can be represented as a rectangular matrix of size n \u00d7 m . Initially, there are a_ i, j units of your army in the cell ( i, j) . You want to prepare for the final battle, so you want to move all your army into exactly one cell of the map ( i. e. nm- 1 cells should contain 0 units of the army and the remaining cell should contain the entire army) . To do this, you can do some ( possibly, zero) number of moves. During one move, you can select exactly one unit from some cell and move it to one of the adjacent by side cells. I. e. from the cell ( i, j) you can move the unit to cells: ( i - 1, j) ; ( i, j - 1) ; ( i + 1, j) ; ( i, j + 1) . Of course, you want to move all your army into exactly one cell as fast as possible. So, you want to know the minimum number of moves you need to do that. And, of course, life goes on, so the situation on the map changes. There are q updates, the i - th update is denoted by three integers x, y, z . This update affects the army in the cell ( x, y) : after this update, the number of units in the cell ( x, y) becomes z ( i. e. you replace a_ x, y with z ) . Also, you want to determine, for each i , the minimum number of moves needed to move your entire army into exactly one cell with the first i updates applied to the initial map. In other words, the map after the i - th update equals the initial map with the first i updates applied to it.",
    "input": "The first line of the input contains three integers n, m and q ( 1 \u2264 n, m \u2264 1000; 1 \u2264 q \u2264 5000 ) \u2014 the size of the matrix and the number of updates correspondingly. The next n lines contain m integers each, where the j - th integer in the i - th line is a_ i, j ( 1 \u2264 a_ i, j\u2264 10^ 9 ) \u2014 the number of units in the cell ( i, j) . The next q lines contain three integers each, where the i - th line contains three integers x_ i, y_ i and z_ i ( 1 \u2264 x_ i \u2264 n; 1 \u2264 y_ i \u2264 m; 1 \u2264 z_ i \u2264 10^ 9 ) \u2014 the cell in which the number of units updates and the new number of units in this cell correspondingly.",
    "output": "Print q+ 1 integers r_ 0, r_ 1, r_ 2, . . . , r_ n , where r_ 0 is the minimum number of moves you need to move all your army into exactly one cell, and r_ i for all i from 1 to q is the minimum number of moves you need to move all your army into exactly one cell after the first i updates.",
    "note": "",
    "topics": [
      "*special",
      "data structures",
      "greedy",
      "math"
    ],
    "id": "1346F"
  },
  {
    "title": "Train Tracks",
    "url": "https://codeforces.com/problemset/problem/1344/E",
    "history": "That' s right. I' m a Purdue student, and I shamelessly wrote a problem about trains. There are n stations and m trains. The stations are connected by n- 1 one- directional railroads that form a tree rooted at station 1 . All railroads are pointed in the direction from the root station 1 to the leaves. A railroad connects a station u to a station v , and has a distance d , meaning it takes d time to travel from u to v . Each station with at least one outgoing railroad has a switch that determines the child station an incoming train will be directed toward. For example, it might look like this: Here, stations 1 and 3 have switches directed toward stations 2 and 4 , respectively. Initially, no trains are at any station. Train i will enter station 1 at time t_ i . Every unit of time, starting at time 1 , the following two steps happen: You can switch at most one station to point to a different child station. A switch change takes effect before step 2 . For every train that is on a station u , it is directed toward the station v indicated by u ' s switch. So, if the railroad from u to v has distance d , the train will enter station v in d units of time from now. Every train has a destination station s_ i . When it enters s_ i , it will stop there permanently. If at some point the train is going in the wrong direction, so that it will never be able to reach s_ i no matter where the switches point, it will immediately explode. Find the latest possible time of the first explosion if you change switches optimally, or determine that you can direct every train to its destination so that no explosion occurs. Also, find the minimum number of times you need to change a switch to achieve this.",
    "input": "The first line contains two integers n and m ( 1\u2264 n, m\u2264 10^ 5 ) \u2014 the number of stations and trains, respectively. The next n- 1 lines describe the railroads. The i - th line contains three integers u, v, d ( 1\u2264 u, v\u2264 n , 1\u2264 d\u2264 10^ 9 ) , denoting a railroad from station u to station v with distance d . It is guaranteed that the railroads form a tree rooted at station 1 . The switch of a station u is initially directed towards the last outgoing railroad from u that appears in the input. The next m lines describe the trains. The i - th line contains two integers s_ i, t_ i ( 1\u2264 s_ i\u2264 n , 1\u2264 t_ 1< t_ 2< \u22ef< t_ m\u2264 10^ 9 ) \u2014 the destination station and the time the i - th train enters station 1 , respectively.",
    "output": "Output two integers: the latest possible time of the first explosion ( or - 1 if it is possible to never have an explosion) and the minimum number of switch changes to achieve it.",
    "note": "For the first test, here' s an example timeline: At time 1 , train 1 enters station 1 . We switch station 1 to point to station 2 . Train 1 is directed to station 2 . At time 2 , train 2 enters station 1 , and train 1 enters station 2 , where it stops permanently. We switch station 1 to point to station 3 . Train 2 is directed to station 3 . At time 4 , train 2 enters station 3 . We switch station 3 to point to station 4 . Train 2 is directed to station 4 . At time 5 , train 2 enters station 4 , where it stops permanently. At time 6 , train 3 enters station 1 . We switch station 1 to point to station 2 . Train 3 is directed to station 2 . At time 7 , train 3 enters station 2 , where it stops permanently. We switch station 3 to point to station 5 . At time 10 , train 4 enters station 1 . We switch station 1 to point to station 3 . Train 4 is directed to station 3 . At time 12 , train 4 enters station 3 . Train 4 is directed to station 5 . At time 15 , train 4 enters station 5 , where it stops permanently. For the second test, we switch nothing. At time 4 , train 2 is directed to station 5 and train 4 is directed to station 3 . They both explode. It is impossible to prevent an explosion by time 4 . For the third test, denote a switch change by ( u\u2192 v, t) if we make station u point to station v at time t . One solution is to make these 4 switch changes: ( 1\u2192 2, 1) , ( 1\u2192 3, 2) , ( 7\u2192 8, 5) , ( 5\u2192 6, 8) . At time 11 , trains 4 , 5 , and 6 explode. It is impossible to prevent an explosion by time 11 .",
    "topics": [
      "data structures",
      "trees"
    ],
    "id": "1344E"
  },
  {
    "title": "Restore the Permutation by Sorted Segments",
    "url": "https://codeforces.com/problemset/problem/1343/F",
    "history": "We guessed a permutation p consisting of n integers. The permutation of length n is the array of length n where each element from 1 to n appears exactly once. This permutation is a secret for you. For each position r from 2 to n we chose some other index l ( l < r ) and gave you the segment p_ l, p_ l + 1, . . . , p_ r in sorted order ( i. e. we rearranged the elements of this segment in a way that the elements of this segment are sorted) . Thus, you are given exactly n- 1 segments of the initial permutation but elements inside each segment are sorted. The segments are given to you in random order. For example, if the secret permutation is p= [ 3, 1, 4, 6, 2, 5] then the possible given set of segments can be: [ 2, 5, 6] [ 4, 6] [ 1, 3, 4] [ 1, 3] [ 1, 2, 4, 6] Your task is to find any suitable permutation ( i. e. any permutation corresponding to the given input data) . It is guaranteed that the input data corresponds to some permutation ( i. e. such permutation exists) . You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains one integer n ( 2 \u2264 n \u2264 200 ) \u2014 the length of the permutation. The next n- 1 lines describe given segments. The i - th line contains the description of the i - th segment. The line starts with the integer k_ i ( 2 \u2264 k_ i \u2264 n ) \u2014 the length of the i - th segment. Then k_ i integers follow. All integers in a line are distinct, sorted in ascending order, between 1 and n , inclusive. It is guaranteed that the required p exists for each test case. It is also guaranteed that the sum of n over all test cases does not exceed 200 ( \u2211 n \u2264 200 ) .",
    "output": "For each test case, print the answer: n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n , all p_ i should be distinct) \u2014 any suitable permutation ( i. e. any permutation corresponding to the test case input) .",
    "note": "",
    "topics": [
      "brute force",
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "1343F"
  },
  {
    "title": "Constant Palindrome Sum",
    "url": "https://codeforces.com/problemset/problem/1343/D",
    "history": "You are given an array a consisting of n integers ( it is guaranteed that n is even, i. e. divisible by 2 ) . All a_ i does not exceed some integer k . Your task is to replace the minimum number of elements ( replacement is the following operation: choose some index i from 1 to n and replace a_ i with some integer in range [ 1; k] ) to satisfy the following conditions: after all replacements, all a_ i are positive integers not greater than k ; for all i from 1 to n/ 2 the following equation is true: a_ i + a_ n - i + 1 = x , where x should be the same for all n/ 2 pairs of elements. You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains two integers n and k ( 2 \u2264 n \u2264 2 \u00b7 10^ 5, 1 \u2264 k \u2264 2 \u00b7 10^ 5 ) \u2014 the length of a and the maximum possible value of some a_ i correspondingly. It is guratanteed that n is even ( i. e. divisible by 2 ) . The second line of the test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 k ) , where a_ i is the i - th element of a . It is guaranteed that the sum of n ( as well as the sum of k ) over all test cases does not exceed 2 \u00b7 10^ 5 ( \u2211 n \u2264 2 \u00b7 10^ 5 , \u2211 k \u2264 2 \u00b7 10^ 5 ) .",
    "output": "For each test case, print the answer \u2014 the minimum number of elements you have to replace in a to satisfy the conditions from the problem statement.",
    "note": "",
    "topics": [
      "brute force",
      "data structures",
      "greedy",
      "two pointers"
    ],
    "id": "1343D"
  },
  {
    "title": "Multiple Testcases",
    "url": "https://codeforces.com/problemset/problem/1342/D",
    "history": "So you decided to hold a contest on Codeforces. You prepared the problems: statements, solutions, checkers, validators, tests. . . Suddenly, your coordinator asks you to change all your tests to multiple testcases in the easiest problem! Initially, each test in that problem is just an array. The maximum size of an array is k . For simplicity, the contents of arrays don' t matter. You have n tests \u2014 the i - th test is an array of size m_ i ( 1 \u2264 m_ i \u2264 k ) . Your coordinator asks you to distribute all of your arrays into multiple testcases. Each testcase can include multiple arrays. However, each testcase should include no more than c_ 1 arrays of size greater than or equal to 1 ( \u2265 1 ) , no more than c_ 2 arrays of size greater than or equal to 2 , . . . , no more than c_ k arrays of size greater than or equal to k . Also, c_ 1 \u2265 c_ 2 \u2265. . . \u2265 c_ k . So now your goal is to create the new testcases in such a way that: each of the initial arrays appears in exactly one testcase; for each testcase the given conditions hold; the number of testcases is minimum possible. Print the minimum possible number of testcases you can achieve and the sizes of arrays included in each testcase.",
    "input": "The first line contains two integers n and k ( 1 \u2264 n, k \u2264 2 \u00b7 10^ 5 ) \u2014 the number of initial tests and the limit for the size of each array. The second line contains n integers m_ 1, m_ 2, . . . , m_ n ( 1 \u2264 m_ i \u2264 k ) \u2014 the sizes of the arrays in the original tests. The third line contains k integers c_ 1, c_ 2, . . . , c_ k ( n \u2265 c_ 1 \u2265 c_ 2 \u2265. . . \u2265 c_ k \u2265 1 ) ; c_ i is the maximum number of arrays of size greater than or equal to i you can have in a single testcase.",
    "output": "In the first line print a single integer ans ( 1 \u2264 ans \u2264 n ) \u2014 the minimum number of testcases you can achieve. Each of the next ans lines should contain the description of a testcase in the following format: t a_ 1 a_ 2 . . . a_ t ( 1 \u2264 t\u2264 n ) \u2014 the testcase includes t arrays, a_ i is the size of the i - th array in that testcase. Each of the initial arrays should appear in exactly one testcase. In particular, it implies that the sum of t over all ans testcases should be equal to n . Note that the answer always exists due to c_ k \u2265 1 ( and therefore c_ 1 \u2265 1 ) . If there are multiple answers, you can output any one of them.",
    "note": "In the first example there is no way to distribute the tests into less than 3 testcases. The given answer satisfies the conditions: each of the testcases includes no more than 4 arrays of size greater than or equal to 1 and no more than 1 array of sizes greater than or equal to 2 and 3 . Note that there are multiple valid answers for this test. For example, testcases with sizes [ [ 2] , [ 1, 2] , [ 3] ] would also be correct. However, testcases with sizes [ [ 1, 2] , [ 2, 3] ] would be incorrect because there are 2 arrays of size greater than or equal to 2 in the second testcase. Note the difference between the third and the fourth examples. You can include up to 5 arrays of size greater than or equal to 1 in the third example, so you can put all arrays into a single testcase. And you can have only up to 1 array in the fourth example. Thus, every array should be included in a separate testcase.",
    "topics": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "greedy",
      "sortings",
      "two pointers"
    ],
    "id": "1342D"
  },
  {
    "title": "Nastya and CBS",
    "url": "https://codeforces.com/problemset/problem/1340/F",
    "history": "Nastya is a competitive programmer, but she is only studying now. Recently, Denis told her about the way to check if the string is correct bracket sequence. After that, unexpectedly, Nastya came up with a much more complex problem that Denis couldn' t solve. Can you solve it? A string s is given. It consists of k kinds of pairs of brackets. Each bracket has the form t \u2014 it is an integer, such that 1 \u2264 | t| \u2264 k . If the bracket has a form t , then: If t > 0 , then it' s an opening bracket of the type t . If t < 0 , then it' s a closing bracket of the type - t . Thus, there are k types of pairs of brackets in total. The queries need to be answered: Replace the bracket at position i with the bracket of the form t . Check if the substring from the l - th to r - th position ( including) is the correct bracket sequence. Recall the definition of the correct bracket sequence: An empty sequence is correct. If A and B are two correct bracket sequences, then their concatenation \" A B \" is also correct bracket sequence. If A is the correct bracket sequence, c ( 1 \u2264 c \u2264 k) is a type of brackets, then the sequence \" c A - c \" is also correct bracket sequence.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 10^ 5) \u2014 length of string and k ( 1 \u2264 k \u2264 n) \u2014 the number of kinds of pairs of brackets. The second line contains string s of length n \u2014 n integers s_ 1, s_ 2, . . . , s_ n ( 1 \u2264 | s_ i| \u2264 k) The third line contains single integer q ( 1 \u2264 q \u2264 10^ 5) \u2014 the number of queries. Each of the following q lines describes the queries: 1 i t - query of the 1 type ( 1 \u2264 i \u2264 n, 1 \u2264 | t| \u2264 k) . 2 l r - query of the 2 type ( 1 \u2264 l \u2264 r \u2264 n) .",
    "output": "For each query of 2 type, output \" Yes\" if the substring from the query is the correct bracket sequence and \" No\" , otherwise. All letters can be displayed in any case.",
    "note": "In the fourth test, initially, the string is not a correct bracket sequence, so the answer to the first query is \" No\" . After two changes it will be equal to \" 1 - 1 \" , so it is a correct bracket sequence and the answer to the fourth query is \" Yes\" .",
    "topics": [
      "brute force",
      "data structures",
      "hashing"
    ],
    "id": "1340F"
  },
  {
    "title": "Nastya and Strange Generator",
    "url": "https://codeforces.com/problemset/problem/1340/A",
    "history": "Denis was very sad after Nastya rejected him. So he decided to walk through the gateways to have some fun. And luck smiled at him! When he entered the first courtyard, he met a strange man who was selling something. Denis bought a mysterious item and it was. . . Random permutation generator! Denis could not believed his luck. When he arrived home, he began to study how his generator works and learned the algorithm. The process of generating a permutation consists of n steps. At the i - th step, a place is chosen for the number i ( 1 \u2264 i \u2264 n) . The position for the number i is defined as follows: For all j from 1 to n , we calculate r_ j \u2014 the minimum index such that j \u2264 r_ j \u2264 n , and the position r_ j is not yet occupied in the permutation. If there are no such positions, then we assume that the value of r_ j is not defined. For all t from 1 to n , we calculate count_ t \u2014 the number of positions 1 \u2264 j \u2264 n such that r_ j is defined and r_ j = t . Consider the positions that are still not occupied by permutation and among those we consider the positions for which the value in the count array is maximum. The generator selects one of these positions for the number i . The generator can choose any position. Let' s have a look at the operation of the algorithm in the following example: Let n = 5 and the algorithm has already arranged the numbers 1, 2, 3 in the permutation. Consider how the generator will choose a position for the number 4 : The values of r will be r = [ 3, 3, 3, 4, \u00d7] , where \u00d7 means an indefinite value. Then the count values will be count = [ 0, 0, 3, 1, 0] . There are only two unoccupied positions in the permutation: 3 and 4 . The value in the count array for position 3 is 3 , for position 4 it is 1 . The maximum value is reached only for position 3 , so the algorithm will uniquely select this position for number 4 . Satisfied with his purchase, Denis went home. For several days without a break, he generated permutations. He believes that he can come up with random permutations no worse than a generator. After that, he wrote out the first permutation that came to mind p_ 1, p_ 2, . . . , p_ n and decided to find out if it could be obtained as a result of the generator. Unfortunately, this task was too difficult for him, and he asked you for help. It is necessary to define whether the written permutation could be obtained using the described algorithm if the generator always selects the position Denis needs.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 5) \u2014 the number of test cases. Then the descriptions of the test cases follow. The first line of the test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5) \u2014 the size of the permutation. The second line of the test case contains n different integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) \u2014 the permutation written by Denis. It is guaranteed that the sum of n over all test cases doesn' t exceed 10^ 5 .",
    "output": "Print \" Yes\" if this permutation could be obtained as a result of the generator. Otherwise, print \" No\" . All letters can be displayed in any case.",
    "note": "Let' s simulate the operation of the generator in the first test. At the 1 step, r = [ 1, 2, 3, 4, 5] , count = [ 1, 1, 1, 1, 1] . The maximum value is reached in any free position, so the generator can choose a random position from 1 to 5 . In our example, it chose 5 . At the 2 step, r = [ 1, 2, 3, 4, \u00d7] , count = [ 1, 1, 1, 1, 0] . The maximum value is reached in positions from 1 to 4 , so the generator can choose a random position among them. In our example, it chose 1 . At the 3 step, r = [ 2, 2, 3, 4, \u00d7] , count = [ 0, 2, 1, 1, 0] . The maximum value is 2 and is reached only at the 2 position, so the generator will choose this position. At the 4 step, r = [ 3, 3, 3, 4, \u00d7] , count = [ 0, 0, 3, 1, 0] . The maximum value is 3 and is reached only at the 3 position, so the generator will choose this position. At the 5 step, r = [ 4, 4, 4, 4, \u00d7] , count = [ 0, 0, 0, 4, 0] . The maximum value is 4 and is reached only at the 4 position, so the generator will choose this position. In total, we got a permutation of 2, 3, 4, 5, 1 , that is, a generator could generate it.",
    "topics": [
      "brute force",
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "1340A"
  },
  {
    "title": "Journey",
    "url": "https://codeforces.com/problemset/problem/1336/F",
    "history": "In the wilds far beyond lies the Land of Sacredness, which can be viewed as a tree \u2014 connected undirected graph consisting of n nodes and n- 1 edges. The nodes are numbered from 1 to n . There are m travelers attracted by its prosperity and beauty. Thereupon, they set off their journey on this land. The i - th traveler will travel along the shortest path from s_ i to t_ i . In doing so, they will go through all edges in the shortest path from s_ i to t_ i , which is unique in the tree. During their journey, the travelers will acquaint themselves with the others. Some may even become friends. To be specific, the i - th traveler and the j - th traveler will become friends if and only if there are at least k edges that both the i - th traveler and the j - th traveler will go through. Your task is to find out the number of pairs of travelers ( i, j) satisfying the following conditions: 1 \u2264 i < j \u2264 m . the i - th traveler and the j - th traveler will become friends.",
    "input": "The first line contains three integers n , m and k ( 2 \u2264 n, m \u2264 1. 5 \u00b7 10^ 5 , 1\u2264 k\u2264 n ) . Each of the next n- 1 lines contains two integers u and v ( 1 \u2264 u, v \u2264 n ) , denoting there is an edge between u and v . The i - th line of the next m lines contains two integers s_ i and t_ i ( 1\u2264 s_ i, t_ i\u2264 n , s_ i = \u0338 t_ i ) , denoting the starting point and the destination of i - th traveler. It is guaranteed that the given edges form a tree.",
    "output": "The only line contains a single integer \u2014 the number of pairs of travelers satisfying the given conditions.",
    "note": "In the first example there are 4 pairs satisfying the given requirements: ( 1, 2) , ( 1, 3) , ( 1, 4) , ( 3, 4) . The 1 - st traveler and the 2 - nd traveler both go through the edge 6- 8 . The 1 - st traveler and the 3 - rd traveler both go through the edge 2- 6 . The 1 - st traveler and the 4 - th traveler both go through the edge 1- 2 and 2- 6 . The 3 - rd traveler and the 4 - th traveler both go through the edge 2- 6 .",
    "topics": [
      "data structures",
      "divide and conquer",
      "graphs",
      "trees"
    ],
    "id": "1336F"
  },
  {
    "title": "Robots on a Grid",
    "url": "https://codeforces.com/problemset/problem/1335/F",
    "history": "There is a rectangular grid of size n \u00d7 m . Each cell of the grid is colored black ( ' 0' ) or white ( ' 1' ) . The color of the cell ( i, j) is c_ i, j . You are also given a map of directions: for each cell, there is a direction s_ i, j which is one of the four characters ' U' , ' R' , ' D' and ' L' . If s_ i, j is ' U' then there is a transition from the cell ( i, j) to the cell ( i - 1, j) ; if s_ i, j is ' R' then there is a transition from the cell ( i, j) to the cell ( i, j + 1) ; if s_ i, j is ' D' then there is a transition from the cell ( i, j) to the cell ( i + 1, j) ; if s_ i, j is ' L' then there is a transition from the cell ( i, j) to the cell ( i, j - 1) . It is guaranteed that the top row doesn' t contain characters ' U' , the bottom row doesn' t contain characters ' D' , the leftmost column doesn' t contain characters ' L' and the rightmost column doesn' t contain characters ' R' . You want to place some robots in this field ( at most one robot in a cell) . The following conditions should be satisfied. Firstly, each robot should move every time ( i. e. it cannot skip the move) . During one move each robot goes to the adjacent cell depending on the current direction. Secondly, you have to place robots in such a way that there is no move before which two different robots occupy the same cell ( it also means that you cannot place two robots in the same cell) . I. e. if the grid is \" RL\" ( one row, two columns, colors does not matter there) then you can place two robots in cells ( 1, 1) and ( 1, 2) , but if the grid is \" RLL\" then you cannot place robots in cells ( 1, 1) and ( 1, 3) because during the first second both robots will occupy the cell ( 1, 2) . The robots make an infinite number of moves. Your task is to place the maximum number of robots to satisfy all the conditions described above and among all such ways, you have to choose one where the number of black cells occupied by robots before all movements is the maximum possible. Note that you can place robots only before all movements. You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 5 \u00b7 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains two integers n and m ( 1 < nm \u2264 10^ 6 ) \u2014 the number of rows and the number of columns correspondingly. The next n lines contain m characters each, where the j - th character of the i - th line is c_ i, j ( c_ i, j is either ' 0' if the cell ( i, j) is black or ' 1' if the cell ( i, j) is white) . The next n lines also contain m characters each, where the j - th character of the i - th line is s_ i, j ( s_ i, j is ' U' , ' R' , ' D' or ' L' and describes the direction of the cell ( i, j) ) . It is guaranteed that the sum of the sizes of fields does not exceed 10^ 6 ( \u2211 nm \u2264 10^ 6 ) .",
    "output": "For each test case, print two integers \u2014 the maximum number of robots you can place to satisfy all the conditions described in the problem statement and the maximum number of black cells occupied by robots before all movements if the number of robots placed is maximized. Note that you can place robots only before all movements.",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "matrices"
    ],
    "id": "1335F"
  },
  {
    "title": "Three Blocks Palindrome (hard version)",
    "url": "https://codeforces.com/problemset/problem/1335/E2",
    "history": "The only difference between easy and hard versions is constraints. You are given a sequence a consisting of n positive integers. Let' s define a three blocks palindrome as the sequence, consisting of at most two distinct elements ( let these elements are a and b , a can be equal b ) and is as follows: [ a, a, . . . , a_ x, b, b, . . . , b_ y, a, a, . . . , a_ x] . There x, y are integers greater than or equal to 0 . For example, sequences [ ] , [ 2] , [ 1, 1] , [ 1, 2, 1] , [ 1, 2, 2, 1] and [ 1, 1, 2, 1, 1] are three block palindromes but [ 1, 2, 3, 2, 1] , [ 1, 2, 1, 2, 1] and [ 1, 2] are not. Your task is to choose the maximum by length subsequence of a that is a three blocks palindrome. You have to answer t independent test cases. Recall that the sequence t is a a subsequence of the sequence s if t can be derived from s by removing zero or more elements without changing the order of the remaining elements. For example, if s= [ 1, 2, 1, 3, 1, 2, 1] , then possible subsequences are: [ 1, 1, 1, 1] , [ 3] and [ 1, 2, 1, 3, 1, 2, 1] , but not [ 3, 2, 3] and [ 1, 1, 1, 1, 2] .",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of a . The second line of the test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 200 ) , where a_ i is the i - th element of a . Note that the maximum value of a_ i can be up to 200 . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 ( \u2211 n \u2264 2 \u00b7 10^ 5 ) .",
    "output": "For each test case, print the answer \u2014 the maximum possible length of some subsequence of a that is a three blocks palindrome.",
    "note": "",
    "topics": [
      "brute force",
      "data structures",
      "dp",
      "two pointers"
    ],
    "id": "1335E2"
  },
  {
    "title": "Three Blocks Palindrome (easy version)",
    "url": "https://codeforces.com/problemset/problem/1335/E1",
    "history": "The only difference between easy and hard versions is constraints. You are given a sequence a consisting of n positive integers. Let' s define a three blocks palindrome as the sequence, consisting of at most two distinct elements ( let these elements are a and b , a can be equal b ) and is as follows: [ a, a, . . . , a_ x, b, b, . . . , b_ y, a, a, . . . , a_ x] . There x, y are integers greater than or equal to 0 . For example, sequences [ ] , [ 2] , [ 1, 1] , [ 1, 2, 1] , [ 1, 2, 2, 1] and [ 1, 1, 2, 1, 1] are three block palindromes but [ 1, 2, 3, 2, 1] , [ 1, 2, 1, 2, 1] and [ 1, 2] are not. Your task is to choose the maximum by length subsequence of a that is a three blocks palindrome. You have to answer t independent test cases. Recall that the sequence t is a a subsequence of the sequence s if t can be derived from s by removing zero or more elements without changing the order of the remaining elements. For example, if s= [ 1, 2, 1, 3, 1, 2, 1] , then possible subsequences are: [ 1, 1, 1, 1] , [ 3] and [ 1, 2, 1, 3, 1, 2, 1] , but not [ 3, 2, 3] and [ 1, 1, 1, 1, 2] .",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 2000 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains one integer n ( 1 \u2264 n \u2264 2000 ) \u2014 the length of a . The second line of the test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 26 ) , where a_ i is the i - th element of a . Note that the maximum value of a_ i can be up to 26 . It is guaranteed that the sum of n over all test cases does not exceed 2000 ( \u2211 n \u2264 2000 ) .",
    "output": "For each test case, print the answer \u2014 the maximum possible length of some subsequence of a that is a three blocks palindrome.",
    "note": "",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "dp",
      "two pointers"
    ],
    "id": "1335E1"
  },
  {
    "title": "Strange Function",
    "url": "https://codeforces.com/problemset/problem/1334/F",
    "history": "Let' s denote the following function f . This function takes an array a of length n and returns an array. Initially the result is an empty array. For each integer i from 1 to n we add element a_ i to the end of the resulting array if it is greater than all previous elements ( more formally, if a_ i > max_ 1 \u2264 j < ia_ j ) . Some examples of the function f : if a = [ 3, 1, 2, 7, 7, 3, 6, 7, 8] then f( a) = [ 3, 7, 8] ; if a = [ 1] then f( a) = [ 1] ; if a = [ 4, 1, 1, 2, 3] then f( a) = [ 4] ; if a = [ 1, 3, 1, 2, 6, 8, 7, 7, 4, 11, 10] then f( a) = [ 1, 3, 6, 8, 11] . You are given two arrays: array a_ 1, a_ 2, . . . , a_ n and array b_ 1, b_ 2, . . . , b_ m . You can delete some elements of array a ( possibly zero) . To delete the element a_ i , you have to pay p_ i coins ( the value of p_ i can be negative, then you get | p_ i| coins, if you delete this element) . Calculate the minimum number of coins ( possibly negative) you have to spend for fulfilling equality f( a) = b .",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 5 \u00b7 10^ 5) \u2014 the length of array a . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n) \u2014 the array a . The third line contains n integers p_ 1, p_ 2, . . . , p_ n ( | p_ i| \u2264 10^ 9) \u2014 the array p . The fourth line contains one integer m ( 1 \u2264 m \u2264 n) \u2014 the length of array b . The fifth line contains m integers b_ 1, b_ 2, . . . , b_ m ( 1 \u2264 b_ i \u2264 n, b_ i- 1 < b_ i) \u2014 the array b .",
    "output": "If the answer exists, in the first line print YES. In the second line, print the minimum number of coins you have to spend for fulfilling equality f( a) = b . Otherwise in only line print NO.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "greedy"
    ],
    "id": "1334F"
  },
  {
    "title": "Eugene and an array",
    "url": "https://codeforces.com/problemset/problem/1333/C",
    "history": "Eugene likes working with arrays. And today he needs your help in solving one challenging task. An array c is a subarray of an array b if c can be obtained from b by deletion of several ( possibly, zero or all) elements from the beginning and several ( possibly, zero or all) elements from the end. Let' s call a nonempty array good if for every nonempty subarray of this array, sum of the elements of this subarray is nonzero. For example, array [ - 1, 2, - 3] is good, as all arrays [ - 1] , [ - 1, 2] , [ - 1, 2, - 3] , [ 2] , [ 2, - 3] , [ - 3] have nonzero sums of elements. However, array [ - 1, 2, - 1, - 3] isn' t good, as his subarray [ - 1, 2, - 1] has sum of elements equal to 0 . Help Eugene to calculate the number of nonempty good subarrays of a given array a .",
    "input": "The first line of the input contains a single integer n ( 1 \u2264 n \u2264 2 \u00d7 10^ 5 ) \u2014 the length of array a . The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) \u2014 the elements of a .",
    "output": "Output a single integer \u2014 the number of good subarrays of a .",
    "note": "In the first sample, the following subarrays are good: [ 1] , [ 1, 2] , [ 2] , [ 2, - 3] , [ - 3] . However, the subarray [ 1, 2, - 3] isn' t good, as its subarray [ 1, 2, - 3] has sum of elements equal to 0 . In the second sample, three subarrays of size 1 are the only good subarrays. At the same time, the subarray [ 41, - 41, 41] isn' t good, as its subarray [ 41, - 41] has sum of elements equal to 0 .",
    "topics": [
      "binary search",
      "data structures",
      "implementation",
      "two pointers"
    ],
    "id": "1333C"
  },
  {
    "title": "No Monotone Triples",
    "url": "https://codeforces.com/problemset/problem/1332/G",
    "history": "Given a sequence of integers a of length n , a tuple ( i, j, k) is called monotone triples if 1 \u2264 i< j< k\u2264 n ; a_ i \u2264 a_ j \u2264 a_ k or a_ i \u2265 a_ j \u2265 a_ k is satisfied. For example, a= [ 5, 3, 4, 5] , then ( 2, 3, 4) is monotone triples for sequence a while ( 1, 3, 4) is not. Bob is given a sequence of integers a of length n in a math exam. The exams itself contains questions of form L, R , for each of them he is asked to find any subsequence b with size greater than 2 ( i. e. | b| \u2265 3 ) of sequence a_ L, a_ L+ 1, . . . , a_ R . Recall that an sequence b is a subsequence of sequence a if b can be obtained by deletion of several ( possibly zero, or all) elements. However, he hates monotone stuff, and he wants to find a subsequence free from monotone triples. Besides, he wants to find one subsequence with the largest length among all subsequences free from monotone triples for every query. Please help Bob find out subsequences meeting the above constraints.",
    "input": "The first line contains two integers n , q ( 3 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) \u2014 the length of sequence a and the number of queries. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) , representing the sequence a . Then each of the following q lines contains two integers L , R ( 1 \u2264 L, R \u2264 n , R- L\u2265 2 ) .",
    "output": "For each query, output 0 if there is no subsequence b satisfying the constraints mentioned in the legend. You can print the empty line after but that' s not mandatory. Otherwise, output one integer k ( k > 2 ) denoting the length of sequence b , then output k integers i_ 1, i_ 2, . . . , i_ k ( L \u2264 i_ 1 < i_ 2< . . . < i_ k\u2264 R ) satisfying that b_ j = a_ i_ j for 1 \u2264 j \u2264 k . If there are multiple answers with the maximum length, print any of them.",
    "note": "For the first query, the given sequence itself is monotone triples free. For the second query, it can be shown that there is no subsequence b with length greater than 2 such that b is monotone triples free.",
    "topics": [
      "data structures"
    ],
    "id": "1332G"
  },
  {
    "title": "Dreamoon Likes Strings",
    "url": "https://codeforces.com/problemset/problem/1329/D",
    "history": "Dreamoon likes strings. Today he created a game about strings: String s_ 1, s_ 2, . . . , s_ n is beautiful if and only if for each 1 \u2264 i < n, s_ i s_ i+ 1 . Initially, Dreamoon has a string a . In each step Dreamoon can choose a beautiful substring of a and remove it. Then he should concatenate the remaining characters ( in the same order) . Dreamoon wants to use the smallest number of steps to make a empty. Please help Dreamoon, and print any sequence of the smallest number of steps to make a empty.",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 200 000 ) , denoting the number of test cases in the input. For each test case, there' s one line with a non- empty string of lowercase Latin letters a . The total sum of lengths of strings in all test cases is at most 200 000 .",
    "output": "For each test case, in the first line, you should print m : the smallest number of steps to make a empty. Each of the following m lines should contain two integers l_ i, r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 | a| ) , denoting, that the i - th step is removing the characters from index l_ i to r_ i in the current string. ( indices are numbered starting from 1 ) . Note that after the deletion of the substring, indices of remaining characters may change, and r_ i should be at most the current length of a . If there are several possible solutions, you can print any.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "data structures"
    ],
    "id": "1329D"
  },
  {
    "title": "Drazil Likes Heap",
    "url": "https://codeforces.com/problemset/problem/1329/C",
    "history": "Drazil likes heap very much. So he created a problem with heap: There is a max heap with a height h implemented on the array. The details of this heap are the following: This heap contains exactly 2^ h - 1 distinct positive non- zero integers. All integers are distinct. These numbers are stored in the array a indexed from 1 to 2^ h- 1 . For any 1 < i < 2^ h , a[ i] < a[ \u230ai/ 2\u230b] . Now we want to reduce the height of this heap such that the height becomes g with exactly 2^ g- 1 numbers in heap. To reduce the height, we should perform the following action 2^ h- 2^ g times: Choose an index i , which contains an element and call the following function f in index i : Note that we suppose that if a[ i] = 0 , then index i don' t contain an element. After all operations, the remaining 2^ g- 1 element must be located in indices from 1 to 2^ g- 1 . Now Drazil wonders what' s the minimum possible sum of the remaining 2^ g- 1 elements. Please find this sum and find a sequence of the function calls to achieve this value.",
    "input": "The first line of the input contains an integer t ( 1 \u2264 t \u2264 70 000 ) : the number of test cases. Each test case contain two lines. The first line contains two integers h and g ( 1 \u2264 g < h \u2264 20 ) . The second line contains n = 2^ h- 1 distinct positive integers a[ 1] , a[ 2] , . . . , a[ n] ( 1 \u2264 a[ i] < 2^ 20 ) . For all i from 2 to 2^ h - 1 , a[ i] < a[ \u230ai/ 2\u230b] . The total sum of n is less than 2^ 20 .",
    "output": "For each test case, print two lines. The first line should contain one integer denoting the minimum sum after reducing the height of heap to g . The second line should contain 2^ h - 2^ g integers v_ 1, v_ 2, . . . , v_ 2^ h- 2^ g . In i - th operation f( v_ i) should be called.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "1329C"
  },
  {
    "title": "AND Segments",
    "url": "https://codeforces.com/problemset/problem/1327/F",
    "history": "You are given three integers n , k , m and m conditions ( l_ 1, r_ 1, x_ 1) , ( l_ 2, r_ 2, x_ 2) , . . . , ( l_ m, r_ m, x_ m) . Calculate the number of distinct arrays a , consisting of n integers such that: 0 \u2264 a_ i < 2^ k for each 1 \u2264 i \u2264 n ; bitwise AND of numbers a[ l_ i] & a[ l_ i + 1] & . . . & a[ r_ i] = x_ i for each 1 \u2264 i \u2264 m . Two arrays a and b are considered different if there exists such a position i that a_ i = \u0338 b_ i . The number can be pretty large so print it modulo 998244353 .",
    "input": "The first line contains three integers n , k and m ( 1 \u2264 n \u2264 5 \u00b7 10^ 5 , 1 \u2264 k \u2264 30 , 0 \u2264 m \u2264 5 \u00b7 10^ 5 ) \u2014 the length of the array a , the value such that all numbers in a should be smaller than 2^ k and the number of conditions, respectively. Each of the next m lines contains the description of a condition l_ i , r_ i and x_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 n , 0 \u2264 x_ i < 2^ k ) \u2014 the borders of the condition segment and the required bitwise AND value on it.",
    "output": "Print a single integer \u2014 the number of distinct arrays a that satisfy all the above conditions modulo 998244353 .",
    "note": "You can recall what is a bitwise AND operation here. In the first example, the answer is the following arrays: [ 3, 3, 7, 6] , [ 3, 7, 7, 6] and [ 7, 3, 7, 6] .",
    "topics": [
      "bitmasks",
      "combinatorics",
      "data structures",
      "dp",
      "two pointers"
    ],
    "id": "1327F"
  },
  {
    "title": "Bombs",
    "url": "https://codeforces.com/problemset/problem/1326/E",
    "history": "You are given a permutation, p_ 1, p_ 2, . . . , p_ n . Imagine that some positions of the permutation contain bombs, such that there exists at least one position without a bomb. For some fixed configuration of bombs, consider the following process. Initially, there is an empty set, A . For each i from 1 to n : Add p_ i to A . If the i - th position contains a bomb, remove the largest element in A . After the process is completed, A will be non- empty. The cost of the configuration of bombs equals the largest element in A . You are given another permutation, q_ 1, q_ 2, . . . , q_ n . For each 1 \u2264 i \u2264 n , find the cost of a configuration of bombs such that there exists a bomb in positions q_ 1, q_ 2, . . . , q_ i- 1 . For example, for i= 1 , you need to find the cost of a configuration without bombs, and for i= n , you need to find the cost of a configuration with bombs in positions q_ 1, q_ 2, . . . , q_ n- 1 .",
    "input": "The first line contains a single integer, n ( 2 \u2264 n \u2264 300 000 ) . The second line contains n distinct integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n) . The third line contains n distinct integers q_ 1, q_ 2, . . . , q_ n ( 1 \u2264 q_ i \u2264 n) .",
    "output": "Print n space- separated integers, such that the i - th of them equals the cost of a configuration of bombs in positions q_ 1, q_ 2, . . . , q_ i- 1 .",
    "note": "In the first test: If there are no bombs, A is equal to { 1, 2, 3} at the end of the process, so the cost of the configuration is 3 . If there is one bomb in position 1 , A is equal to { 1, 2} at the end of the process, so the cost of the configuration is 2 ; If there are two bombs in positions 1 and 2 , A is equal to { 1} at the end of the process, so the cost of the configuration is 1 . In the second test: Let' s consider the process for i = 4 . There are three bombs on positions q_ 1 = 5 , q_ 2 = 2 , and q_ 3 = 1 . At the beginning, A = { } . Operation 1 : Add p_ 1 = 2 to A , so A is equal to { 2} . There exists a bomb in position 1 , so we should delete the largest element from A . A is equal to { } . Operation 2 : Add p_ 2 = 3 to A , so A is equal to { 3} . There exists a bomb in position 2 , so we should delete the largest element from A . A is equal to { } . Operation 3 : Add p_ 3 = 6 to A , so A is equal to { 6} . There is no bomb in position 3 , so we do nothing. Operation 4 : Add p_ 4 = 1 to A , so A is equal to { 1, 6} . There is no bomb in position 4 , so we do nothing. Operation 5 : Add p_ 5 = 5 to A , so A is equal to { 1, 5, 6} . There exists a bomb in position 5 , so we delete the largest element from A . Now, A is equal to { 1, 5} . Operation 6 : Add p_ 6 = 4 to A , so A is equal to { 1, 4, 5} . There is no bomb in position 6 , so we do nothing. In the end, we have A = { 1, 4, 5} , so the cost of the configuration is equal to 5 .",
    "topics": [
      "data structures",
      "two pointers"
    ],
    "id": "1326E"
  },
  {
    "title": "Pair of Topics",
    "url": "https://codeforces.com/problemset/problem/1324/D",
    "history": "The next lecture in a high school requires two topics to be discussed. The i - th topic is interesting by a_ i units for the teacher and by b_ i units for the students. The pair of topics i and j ( i < j ) is called good if a_ i + a_ j > b_ i + b_ j ( i. e. it is more interesting for the teacher) . Your task is to find the number of good pairs of topics.",
    "input": "The first line of the input contains one integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of topics. The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is the interestingness of the i - th topic for the teacher. The third line of the input contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 10^ 9 ) , where b_ i is the interestingness of the i - th topic for the students.",
    "output": "Print one integer \u2014 the number of good pairs of topic.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "sortings",
      "two pointers"
    ],
    "id": "1324D"
  },
  {
    "title": "Frog Jumps",
    "url": "https://codeforces.com/problemset/problem/1324/C",
    "history": "There is a frog staying to the left of the string s = s_ 1 s_ 2 . . . s_ n consisting of n characters ( to be more precise, the frog initially stays at the cell 0 ) . Each character of s is either ' L' or ' R' . It means that if the frog is staying at the i - th cell and the i - th character is ' L' , the frog can jump only to the left. If the frog is staying at the i - th cell and the i - th character is ' R' , the frog can jump only to the right. The frog can jump only to the right from the cell 0 . Note that the frog can jump into the same cell twice and can perform as many jumps as it needs. The frog wants to reach the n+ 1 - th cell. The frog chooses some positive integer value d before the first jump ( and cannot change it later) and jumps by no more than d cells at once. I. e. if the i - th character is ' L' then the frog can jump to any cell in a range [ max( 0, i - d) ; i - 1] , and if the i - th character is ' R' then the frog can jump to any cell in a range [ i + 1; min( n + 1; i + d) ] . The frog doesn' t want to jump far, so your task is to find the minimum possible value of d such that the frog can reach the cell n+ 1 from the cell 0 if it can jump by no more than d cells at once. It is guaranteed that it is always possible to reach n+ 1 from 0 . You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The next t lines describe test cases. The i - th test case is described as a string s consisting of at least 1 and at most 2 \u00b7 10^ 5 characters ' L' and ' R' . It is guaranteed that the sum of lengths of strings over all test cases does not exceed 2 \u00b7 10^ 5 ( \u2211 | s| \u2264 2 \u00b7 10^ 5 ) .",
    "output": "For each test case, print the answer \u2014 the minimum possible value of d such that the frog can reach the cell n+ 1 from the cell 0 if it jumps by no more than d at once.",
    "note": "The picture describing the first test case of the example and one of the possible answers: In the second test case of the example, the frog can only jump directly from 0 to n+ 1 . In the third test case of the example, the frog can choose d= 3 , jump to the cell 3 from the cell 0 and then to the cell 4 from the cell 3 . In the fourth test case of the example, the frog can choose d= 1 and jump 5 times to the right. In the fifth test case of the example, the frog can only jump directly from 0 to n+ 1 . In the sixth test case of the example, the frog can choose d= 1 and jump 2 times to the right.",
    "topics": [
      "binary search",
      "data structures",
      "dfs and similar",
      "greedy",
      "implementation"
    ],
    "id": "1324C"
  },
  {
    "title": "Median Mountain Range",
    "url": "https://codeforces.com/problemset/problem/1322/E",
    "history": "Berland \u2014 is a huge country with diverse geography. One of the most famous natural attractions of Berland is the \" Median mountain range\" . This mountain range is n mountain peaks, located on one straight line and numbered in order of 1 to n . The height of the i - th mountain top is a_ i . \" Median mountain range\" is famous for the so called alignment of mountain peaks happening to it every day. At the moment of alignment simultaneously for each mountain from 2 to n - 1 its height becomes equal to the median height among it and two neighboring mountains. Formally, if before the alignment the heights were equal b_ i , then after the alignment new heights a_ i are as follows: a_ 1 = b_ 1 , a_ n = b_ n and for all i from 2 to n - 1 a_ i = ( b_ i- 1, b_ i, b_ i+ 1) . The median of three integers is the second largest number among them. For example, ( 5, 1, 2) = 2 , and ( 4, 2, 4) = 4 . Recently, Berland scientists have proved that whatever are the current heights of the mountains, the alignment process will stabilize sooner or later, i. e. at some point the altitude of the mountains won' t changing after the alignment any more. The government of Berland wants to understand how soon it will happen, i. e. to find the value of c \u2014 how many alignments will occur, which will change the height of at least one mountain. Also, the government of Berland needs to determine the heights of the mountains after c alignments, that is, find out what heights of the mountains stay forever. Help scientists solve this important problem!",
    "input": "The first line contains integers n ( 1 \u2264 n \u2264 500 000 ) \u2014 the number of mountains. The second line contains integers a_ 1, a_ 2, a_ 3, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 current heights of the mountains.",
    "output": "In the first line print c \u2014 the number of alignments, which change the height of at least one mountain. In the second line print n integers \u2014 the final heights of the mountains after c alignments.",
    "note": "In the first example, the heights of the mountains at index 1 and 5 never change. Since the median of 1 , 2 , 1 is 1 , the second and the fourth mountains will have height 1 after the first alignment, and since the median of 2 , 1 , 2 is 2 , the third mountain will have height 2 after the first alignment. This way, after one alignment the heights are 1 , 1 , 2 , 1 , 1 . After the second alignment the heights change into 1 , 1 , 1 , 1 , 1 and never change from now on, so there are only 2 alignments changing the mountain heights. In the third examples the alignment doesn' t change any mountain height, so the number of alignments changing any height is 0 .",
    "topics": [
      "data structures"
    ],
    "id": "1322E"
  },
  {
    "title": "Present",
    "url": "https://codeforces.com/problemset/problem/1322/B",
    "history": "Catherine received an array of integers as a gift for March 8. Eventually she grew bored with it, and she started calculated various useless characteristics for it. She succeeded to do it for each one she came up with. But when she came up with another one \u2014 xor of all pairwise sums of elements in the array, she realized that she couldn' t compute it for a very large array, thus she asked for your help. Can you do it? Formally, you need to compute ( a_ 1 + a_ 2) \u2295 ( a_ 1 + a_ 3) \u2295. . . \u2295 ( a_ 1 + a_ n) \u2295 ( a_ 2 + a_ 3) \u2295. . . \u2295 ( a_ 2 + a_ n) . . . \u2295 ( a_ n- 1 + a_ n) Here x \u2295 y is a bitwise XOR operation ( i. e. x ^ y in many modern programming languages) . You can read about it in Wikipedia: https: / / en. wikipedia. org/ wiki/ Exclusive_ or# Bitwise_ operation.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 400 000 ) \u2014 the number of integers in the array. The second line contains integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 7 ) .",
    "output": "Print a single integer \u2014 xor of all pairwise sums of integers in the given array.",
    "note": "In the first sample case there is only one sum 1 + 2 = 3 . In the second sample case there are three sums: 1 + 2 = 3 , 1 + 3 = 4 , 2 + 3 = 5 . In binary they are represented as 011_ 2 \u2295 100_ 2 \u2295 101_ 2 = 010_ 2 , thus the answer is 2. \u2295 is the bitwise xor operation. To define x \u2295 y , consider binary representations of integers x and y . We put the i - th bit of the result to be 1 when exactly one of the i - th bits of x and y is 1. Otherwise, the i - th bit of the result is put to be 0. For example, 0101_ 2 \u2295 0011_ 2 = 0110_ 2 .",
    "topics": [
      "binary search",
      "bitmasks",
      "constructive algorithms",
      "data structures",
      "math",
      "sortings"
    ],
    "id": "1322B"
  },
  {
    "title": "Treeland and Viruses",
    "url": "https://codeforces.com/problemset/problem/1320/E",
    "history": "There are n cities in Treeland connected with n - 1 bidirectional roads in such that a way that any city is reachable from any other; in other words, the graph of cities and roads is a tree. Treeland is preparing for a seasonal virus epidemic, and currently, they are trying to evaluate different infection scenarios. In each scenario, several cities are initially infected with different virus species. Suppose that there are k_ i virus species in the i - th scenario. Let us denote v_ j the initial city for the virus j , and s_ j the propagation speed of the virus j . The spread of the viruses happens in turns: first virus 1 spreads, followed by virus 2 , and so on. After virus k_ i spreads, the process starts again from virus 1 . A spread turn of virus j proceeds as follows. For each city x not infected with any virus at the start of the turn, at the end of the turn it becomes infected with virus j if and only if there is such a city y that: city y was infected with virus j at the start of the turn; the path between cities x and y contains at most s_ j edges; all cities on the path between cities x and y ( excluding y ) were uninfected with any virus at the start of the turn. Once a city is infected with a virus, it stays infected indefinitely and can not be infected with any other virus. The spread stops once all cities are infected. You need to process q independent scenarios. Each scenario is described by k_ i virus species and m_ i important cities. For each important city determine which the virus it will be infected by in the end.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of cities in Treeland. The following n - 1 lines describe the roads. The i - th of these lines contains two integers x_ i and y_ i ( 1 \u2264 x_ i, y_ i \u2264 n ) \u2014 indices of cities connecting by the i - th road. It is guaranteed that the given graph of cities and roads is a tree. The next line contains a single integer q ( 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of infection scenarios. q scenario descriptions follow. The description of the i - th scenario starts with a line containing two integers k_ i and m_ i ( 1 \u2264 k_ i, m_ i \u2264 n ) \u2014 the number of virus species and the number of important cities in this scenario respectively. It is guaranteed that \u2211_ i = 1^ q k_ i and \u2211_ i = 1^ q m_ i do not exceed 2 \u00b7 10^ 5 . The following k_ i lines describe the virus species. The j - th of these lines contains two integers v_ j and s_ j ( 1 \u2264 v_ j \u2264 n , 1 \u2264 s_ j \u2264 10^ 6 ) \u2013 the initial city and the propagation speed of the virus species j . It is guaranteed that the initial cities of all virus species within a scenario are distinct. The following line contains m_ i distinct integers u_ 1, . . . , u_ m_ i ( 1 \u2264 u_ j \u2264 n ) \u2014 indices of important cities.",
    "output": "Print q lines. The i - th line should contain m_ i integers \u2014 indices of virus species that cities u_ 1, . . . , u_ m_ i are infected with at the end of the i - th scenario.",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "dp",
      "shortest paths",
      "trees"
    ],
    "id": "1320E"
  },
  {
    "title": "Reachable Strings",
    "url": "https://codeforces.com/problemset/problem/1320/D",
    "history": "In this problem, we will deal with binary strings. Each character of a binary string is either a 0 or a 1. We will also deal with substrings; recall that a substring is a contiguous subsequence of a string. We denote the substring of string s starting from the l - th character and ending with the r - th character as s[ l . . . r] . The characters of each string are numbered from 1 . We can perform several operations on the strings we consider. Each operation is to choose a substring of our string and replace it with another string. There are two possible types of operations: replace 011 with 110, or replace 110 with 011. For example, if we apply exactly one operation to the string 110011110, it can be transformed into 011011110, 110110110, or 110011011. Binary string a is considered reachable from binary string b if there exists a sequence s_ 1 , s_ 2 , . . . , s_ k such that s_ 1 = a , s_ k = b , and for every i \u2208 [ 1, k - 1] , s_ i can be transformed into s_ i + 1 using exactly one operation. Note that k can be equal to 1 , i. e. , every string is reachable from itself. You are given a string t and q queries to it. Each query consists of three integers l_ 1 , l_ 2 and len . To answer each query, you have to determine whether t[ l_ 1 . . . l_ 1 + len - 1] is reachable from t[ l_ 2 . . . l_ 2 + len - 1] .",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of string t . The second line contains one string t ( | t| = n ) . Each character of t is either 0 or 1. The third line contains one integer q ( 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of queries. Then q lines follow, each line represents a query. The i - th line contains three integers l_ 1 , l_ 2 and len ( 1 \u2264 l_ 1, l_ 2 \u2264 | t| , 1 \u2264 len \u2264 | t| - max( l_ 1, l_ 2) + 1 ) for the i - th query.",
    "output": "For each query, print either YES if t[ l_ 1 . . . l_ 1 + len - 1] is reachable from t[ l_ 2 . . . l_ 2 + len - 1] , or NO otherwise. You may print each letter in any register.",
    "note": "",
    "topics": [
      "data structures",
      "hashing",
      "strings"
    ],
    "id": "1320D"
  },
  {
    "title": "World of Darkraft: Battle for Azathoth",
    "url": "https://codeforces.com/problemset/problem/1320/C",
    "history": "Roma is playing a new expansion for his favorite game World of Darkraft. He made a new character and is going for his first grind. Roma has a choice to buy exactly one of n different weapons and exactly one of m different armor sets. Weapon i has attack modifier a_ i and is worth ca_ i coins, and armor set j has defense modifier b_ j and is worth cb_ j coins. After choosing his equipment Roma can proceed to defeat some monsters. There are p monsters he can try to defeat. Monster k has defense x_ k , attack y_ k and possesses z_ k coins. Roma can defeat a monster if his weapon' s attack modifier is larger than the monster' s defense, and his armor set' s defense modifier is larger than the monster' s attack. That is, a monster k can be defeated with a weapon i and an armor set j if a_ i > x_ k and b_ j > y_ k . After defeating the monster, Roma takes all the coins from them. During the grind, Roma can defeat as many monsters as he likes. Monsters do not respawn, thus each monster can be defeated at most one. Thanks to Roma' s excessive donations, we can assume that he has an infinite amount of in- game currency and can afford any of the weapons and armor sets. Still, he wants to maximize the profit of the grind. The profit is defined as the total coins obtained from all defeated monsters minus the cost of his equipment. Note that Roma must purchase a weapon and an armor set even if he can not cover their cost with obtained coins. Help Roma find the maximum profit of the grind.",
    "input": "The first line contains three integers n , m , and p ( 1 \u2264 n, m, p \u2264 2 \u00b7 10^ 5 ) \u2014 the number of available weapons, armor sets and monsters respectively. The following n lines describe available weapons. The i - th of these lines contains two integers a_ i and ca_ i ( 1 \u2264 a_ i \u2264 10^ 6 , 1 \u2264 ca_ i \u2264 10^ 9 ) \u2014 the attack modifier and the cost of the weapon i . The following m lines describe available armor sets. The j - th of these lines contains two integers b_ j and cb_ j ( 1 \u2264 b_ j \u2264 10^ 6 , 1 \u2264 cb_ j \u2264 10^ 9 ) \u2014 the defense modifier and the cost of the armor set j . The following p lines describe monsters. The k - th of these lines contains three integers x_ k, y_ k, z_ k ( 1 \u2264 x_ k, y_ k \u2264 10^ 6 , 1 \u2264 z_ k \u2264 10^ 3 ) \u2014 defense, attack and the number of coins of the monster k .",
    "output": "Print a single integer \u2014 the maximum profit of the grind.",
    "note": "",
    "topics": [
      "brute force",
      "data structures",
      "sortings"
    ],
    "id": "1320C"
  },
  {
    "title": "Journey Planning",
    "url": "https://codeforces.com/problemset/problem/1320/A",
    "history": "Tanya wants to go on a journey across the cities of Berland. There are n cities situated along the main railroad line of Berland, and these cities are numbered from 1 to n . Tanya plans her journey as follows. First of all, she will choose some city c_ 1 to start her journey. She will visit it, and after that go to some other city c_ 2 > c_ 1 , then to some other city c_ 3 > c_ 2 , and so on, until she chooses to end her journey in some city c_ k > c_ k - 1 . So, the sequence of visited cities [ c_ 1, c_ 2, . . . , c_ k] should be strictly increasing. There are some additional constraints on the sequence of cities Tanya visits. Each city i has a beauty value b_ i associated with it. If there is only one city in Tanya' s journey, these beauty values imply no additional constraints. But if there are multiple cities in the sequence, then for any pair of adjacent cities c_ i and c_ i + 1 , the condition c_ i + 1 - c_ i = b_ c_ i + 1 - b_ c_ i must hold. For example, if n = 8 and b = [ 3, 4, 4, 6, 6, 7, 8, 9] , there are several three possible ways to plan a journey: c = [ 1, 2, 4] ; c = [ 3, 5, 6, 8] ; c = [ 7] ( a journey consisting of one city is also valid) . There are some additional ways to plan a journey that are not listed above. Tanya wants her journey to be as beautiful as possible. The beauty value of the whole journey is the sum of beauty values over all visited cities. Can you help her to choose the optimal plan, that is, to maximize the beauty value of the journey?",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of cities in Berland. The second line contains n integers b_ 1 , b_ 2 , . . . , b_ n ( 1 \u2264 b_ i \u2264 4 \u00b7 10^ 5 ) , where b_ i is the beauty value of the i - th city.",
    "output": "Print one integer \u2014 the maximum beauty of a journey Tanya can choose.",
    "note": "The optimal journey plan in the first example is c = [ 2, 4, 5] . The optimal journey plan in the second example is c = [ 1] . The optimal journey plan in the third example is c = [ 3, 6] .",
    "topics": [
      "data structures",
      "dp",
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1320A"
  },
  {
    "title": "Battalion Strength",
    "url": "https://codeforces.com/problemset/problem/1316/F",
    "history": "There are n officers in the Army of Byteland. Each officer has some power associated with him. The power of the i - th officer is denoted by p_ i . As the war is fast approaching, the General would like to know the strength of the army. The strength of an army is calculated in a strange way in Byteland. The General selects a random subset of officers from these n officers and calls this subset a battalion. ( All 2^ n subsets of the n officers can be chosen equally likely, including empty subset and the subset of all officers) . The strength of a battalion is calculated in the following way: Let the powers of the chosen officers be a_ 1, a_ 2, . . . , a_ k , where a_ 1 \u2264 a_ 2 \u2264. . . \u2264 a_ k . The strength of this battalion is equal to a_ 1a_ 2 + a_ 2a_ 3 + . . . + a_ k- 1a_ k . ( If the size of Battalion is \u2264 1 , then the strength of this battalion is 0 ) . The strength of the army is equal to the expected value of the strength of the battalion. As the war is really long, the powers of officers may change. Precisely, there will be q changes. Each one of the form i x indicating that p_ i is changed to x . You need to find the strength of the army initially and after each of these q updates. Note that the changes are permanent. The strength should be found by modulo 10^ 9+ 7 . Formally, let M= 10^ 9+ 7 . It can be shown that the answer can be expressed as an irreducible fraction p/ q , where p and q are integers and q\u2261\u03380 M ) . Output the integer equal to p\u00b7 q^ - 1 M . In other words, output such an integer x that 0 \u2264 x < M and x \u22c5 q \u2261 p M ) .",
    "input": "The first line of the input contains a single integer n ( 1 \u2264 n \u2264 3\u22c510^ 5 ) \u2014 the number of officers in Byteland' s Army. The second line contains n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i\u2264 10^ 9 ) . The third line contains a single integer q ( 1 \u2264 q \u2264 3\u22c510^ 5 ) \u2014 the number of updates. Each of the next q lines contains two integers i and x ( 1 \u2264 i \u2264 n , 1 \u2264 x \u2264 10^ 9 ) , indicating that p_ i is updated to x .",
    "output": "In the first line output the initial strength of the army. In i - th of the next q lines, output the strength of the army after i - th update.",
    "note": "In first testcase, initially, there are four possible battalions Strength = 0 1 Strength = 0 2 Strength = 0 1, 2 Strength = 2 So strength of army is 0+ 0+ 0+ 2/ 4 = 1/ 2 After changing p_ 1 to 2 , strength of battallion 1, 2 changes to 4 , so strength of army becomes 1 . After changing p_ 2 to 1 , strength of battalion 1, 2 again becomes 2 , so strength of army becomes 1/ 2 .",
    "topics": [
      "data structures",
      "divide and conquer",
      "probabilities"
    ],
    "id": "1316F"
  },
  {
    "title": "Concatenation with intersection",
    "url": "https://codeforces.com/problemset/problem/1313/E",
    "history": "Vasya had three strings a , b and s , which consist of lowercase English letters. The lengths of strings a and b are equal to n , the length of the string s is equal to m . Vasya decided to choose a substring of the string a , then choose a substring of the string b and concatenate them. Formally, he chooses a segment [ l_ 1, r_ 1] ( 1 \u2264 l_ 1 \u2264 r_ 1 \u2264 n ) and a segment [ l_ 2, r_ 2] ( 1 \u2264 l_ 2 \u2264 r_ 2 \u2264 n ) , and after concatenation he obtains a string a[ l_ 1, r_ 1] + b[ l_ 2, r_ 2] = a_ l_ 1 a_ l_ 1 + 1. . . a_ r_ 1 b_ l_ 2 b_ l_ 2 + 1. . . b_ r_ 2 . Now, Vasya is interested in counting number of ways to choose those segments adhering to the following conditions: segments [ l_ 1, r_ 1] and [ l_ 2, r_ 2] have non- empty intersection, i. e. there exists at least one integer x , such that l_ 1 \u2264 x \u2264 r_ 1 and l_ 2 \u2264 x \u2264 r_ 2 ; the string a[ l_ 1, r_ 1] + b[ l_ 2, r_ 2] is equal to the string s .",
    "input": "The first line contains integers n and m ( 1 \u2264 n \u2264 500 000, 2 \u2264 m \u2264 2 \u00b7 n ) \u2014 the length of strings a and b and the length of the string s . The next three lines contain strings a , b and s , respectively. The length of the strings a and b is n , while the length of the string s is m . All strings consist of lowercase English letters.",
    "output": "Print one integer \u2014 the number of ways to choose a pair of segments, which satisfy Vasya' s conditions.",
    "note": "Let' s list all the pairs of segments that Vasya could choose in the first example: [ 2, 2] and [ 2, 5] ; [ 1, 2] and [ 2, 4] ; [ 5, 5] and [ 2, 5] ; [ 5, 6] and [ 3, 5] ;",
    "topics": [
      "data structures",
      "hashing",
      "strings",
      "two pointers"
    ],
    "id": "1313E"
  },
  {
    "title": "Skyscrapers (hard version)",
    "url": "https://codeforces.com/problemset/problem/1313/C2",
    "history": "This is a harder version of the problem. In this version n \u2264 500 000 The outskirts of the capital are being actively built up in Berland. The company \" Kernel Panic\" manages the construction of a residential complex of skyscrapers in New Berlskva. All skyscrapers are built along the highway. It is known that the company has already bought n plots along the highway and is preparing to build n skyscrapers, one skyscraper per plot. Architects must consider several requirements when planning a skyscraper. Firstly, since the land on each plot has different properties, each skyscraper has a limit on the largest number of floors it can have. Secondly, according to the design code of the city, it is unacceptable for a skyscraper to simultaneously have higher skyscrapers both to the left and to the right of it. Formally, let' s number the plots from 1 to n . Then if the skyscraper on the i - th plot has a_ i floors, it must hold that a_ i is at most m_ i ( 1 \u2264 a_ i \u2264 m_ i ) . Also there mustn' t be integers j and k such that j < i < k and a_ j > a_ i < a_ k . Plots j and k are not required to be adjacent to i . The company wants the total number of floors in the built skyscrapers to be as large as possible. Help it to choose the number of floors for each skyscraper in an optimal way, i. e. in such a way that all requirements are fulfilled, and among all such construction plans choose any plan with the maximum possible total number of floors.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 500 000 ) \u2014 the number of plots. The second line contains the integers m_ 1, m_ 2, . . . , m_ n ( 1 \u2264 m_ i \u2264 10^ 9 ) \u2014 the limit on the number of floors for every possible number of floors for a skyscraper on each plot.",
    "output": "Print n integers a_ i \u2014 the number of floors in the plan for each skyscraper, such that all requirements are met, and the total number of floors in all skyscrapers is the maximum possible. If there are multiple answers possible, print any of them.",
    "note": "In the first example, you can build all skyscrapers with the highest possible height. In the second test example, you cannot give the maximum height to all skyscrapers as this violates the design code restriction. The answer [ 10, 6, 6] is optimal. Note that the answer of [ 6, 6, 8] also satisfies all restrictions, but is not optimal.",
    "topics": [
      "data structures",
      "dp",
      "greedy"
    ],
    "id": "1313C2"
  },
  {
    "title": "Skyscrapers (easy version)",
    "url": "https://codeforces.com/problemset/problem/1313/C1",
    "history": "This is an easier version of the problem. In this version n \u2264 1000 The outskirts of the capital are being actively built up in Berland. The company \" Kernel Panic\" manages the construction of a residential complex of skyscrapers in New Berlskva. All skyscrapers are built along the highway. It is known that the company has already bought n plots along the highway and is preparing to build n skyscrapers, one skyscraper per plot. Architects must consider several requirements when planning a skyscraper. Firstly, since the land on each plot has different properties, each skyscraper has a limit on the largest number of floors it can have. Secondly, according to the design code of the city, it is unacceptable for a skyscraper to simultaneously have higher skyscrapers both to the left and to the right of it. Formally, let' s number the plots from 1 to n . Then if the skyscraper on the i - th plot has a_ i floors, it must hold that a_ i is at most m_ i ( 1 \u2264 a_ i \u2264 m_ i ) . Also there mustn' t be integers j and k such that j < i < k and a_ j > a_ i < a_ k . Plots j and k are not required to be adjacent to i . The company wants the total number of floors in the built skyscrapers to be as large as possible. Help it to choose the number of floors for each skyscraper in an optimal way, i. e. in such a way that all requirements are fulfilled, and among all such construction plans choose any plan with the maximum possible total number of floors.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 1000 ) \u2014 the number of plots. The second line contains the integers m_ 1, m_ 2, . . . , m_ n ( 1 \u2264 m_ i \u2264 10^ 9 ) \u2014 the limit on the number of floors for every possible number of floors for a skyscraper on each plot.",
    "output": "Print n integers a_ i \u2014 the number of floors in the plan for each skyscraper, such that all requirements are met, and the total number of floors in all skyscrapers is the maximum possible. If there are multiple answers possible, print any of them.",
    "note": "In the first example, you can build all skyscrapers with the highest possible height. In the second test example, you cannot give the maximum height to all skyscrapers as this violates the design code restriction. The answer [ 10, 6, 6] is optimal. Note that the answer of [ 6, 6, 8] also satisfies all restrictions, but is not optimal.",
    "topics": [
      "brute force",
      "data structures",
      "dp",
      "greedy"
    ],
    "id": "1313C1"
  },
  {
    "title": "Autocompletion",
    "url": "https://codeforces.com/problemset/problem/1312/G",
    "history": "You are given a set of strings S . Each string consists of lowercase Latin letters. For each string in this set, you want to calculate the minimum number of seconds required to type this string. To type a string, you have to start with an empty string and transform it into the string you want to type using the following actions: if the current string is t , choose some lowercase Latin letter c and append it to the back of t , so the current string becomes t + c . This action takes 1 second; use autocompletion. When you try to autocomplete the current string t , a list of all strings s \u2208 S such that t is a prefix of s is shown to you. This list includes t itself, if t is a string from S , and the strings are ordered lexicographically. You can transform t into the i - th string from this list in i seconds. Note that you may choose any string from this list you want, it is not necessarily the string you are trying to type. What is the minimum number of seconds that you have to spend to type each string from S ? Note that the strings from S are given in an unusual way.",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 10^ 6 ) . Then n lines follow, the i - th line contains one integer p_ i ( 0 \u2264 p_ i < i ) and one lowercase Latin character c_ i . These lines form some set of strings such that S is its subset as follows: there are n + 1 strings, numbered from 0 to n ; the 0 - th string is an empty string, and the i - th string ( i \u2265 1 ) is the result of appending the character c_ i to the string p_ i . It is guaranteed that all these strings are distinct. The next line contains one integer k ( 1 \u2264 k \u2264 n ) \u2014 the number of strings in S . The last line contains k integers a_ 1 , a_ 2 , . . . , a_ k ( 1 \u2264 a_ i \u2264 n , all a_ i are pairwise distinct) denoting the indices of the strings generated by above- mentioned process that form the set S \u2014 formally, if we denote the i - th generated string as s_ i , then S = s_ a_ 1, s_ a_ 2, . . . , s_ a_ k .",
    "output": "Print k integers, the i - th of them should be equal to the minimum number of seconds required to type the string s_ a_ i .",
    "note": "In the first example, S consists of the following strings: ieh, iqgp, i, iqge, ier.",
    "topics": [
      "data structures",
      "dfs and similar",
      "dp"
    ],
    "id": "1312G"
  },
  {
    "title": "Moving Points",
    "url": "https://codeforces.com/problemset/problem/1311/F",
    "history": "There are n points on a coordinate axis OX . The i - th point is located at the integer point x_ i and has a speed v_ i . It is guaranteed that no two points occupy the same coordinate. All n points move with the constant speed, the coordinate of the i - th point at the moment t ( t can be non- integer) is calculated as x_ i + t \u00b7 v_ i . Consider two points i and j . Let d( i, j) be the minimum possible distance between these two points over any possible moments of time ( even non- integer) . It means that if two points i and j coincide at some moment, the value d( i, j) will be 0 . Your task is to calculate the value \u2211_ 1 \u2264 i < j \u2264 n d( i, j) ( the sum of minimum distances over all pairs of points) .",
    "input": "The first line of the input contains one integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of points. The second line of the input contains n integers x_ 1, x_ 2, . . . , x_ n ( 1 \u2264 x_ i \u2264 10^ 8 ) , where x_ i is the initial coordinate of the i - th point. It is guaranteed that all x_ i are distinct. The third line of the input contains n integers v_ 1, v_ 2, . . . , v_ n ( - 10^ 8 \u2264 v_ i \u2264 10^ 8 ) , where v_ i is the speed of the i - th point.",
    "output": "Print one integer \u2014 the value \u2211_ 1 \u2264 i < j \u2264 n d( i, j) ( the sum of minimum distances over all pairs of points) .",
    "note": "",
    "topics": [
      "data structures",
      "divide and conquer",
      "implementation",
      "sortings"
    ],
    "id": "1311F"
  },
  {
    "title": "Recommendations",
    "url": "https://codeforces.com/problemset/problem/1310/A",
    "history": "VK news recommendation system daily selects interesting publications of one of n disjoint categories for each user. Each publication belongs to exactly one category. For each category i batch algorithm selects a_ i publications. The latest A/ B test suggests that users are reading recommended publications more actively if each category has a different number of publications within daily recommendations. The targeted algorithm can find a single interesting publication of i - th category within t_ i seconds. What is the minimum total time necessary to add publications to the result of batch algorithm execution, so all categories have a different number of publications? You can' t remove publications recommended by the batch algorithm.",
    "input": "The first line of input consists of single integer n \u2014 the number of news categories ( 1 \u2264 n \u2264 200 000 ) . The second line of input consists of n integers a_ i \u2014 the number of publications of i - th category selected by the batch algorithm ( 1 \u2264 a_ i \u2264 10^ 9 ) . The third line of input consists of n integers t_ i \u2014 time it takes for targeted algorithm to find one new publication of category i ( 1 \u2264 t_ i \u2264 10^ 5) .",
    "output": "Print one integer \u2014 the minimal required time for the targeted algorithm to get rid of categories with the same size.",
    "note": "In the first example, it is possible to find three publications of the second type, which will take 6 seconds. In the second example, all news categories contain a different number of publications.",
    "topics": [
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "1310A"
  },
  {
    "title": "Cow and Fields",
    "url": "https://codeforces.com/problemset/problem/1307/D",
    "history": "Bessie is out grazing on the farm, which consists of n fields connected by m bidirectional roads. She is currently at field 1 , and will return to her home at field n at the end of the day. The Cowfederation of Barns has ordered Farmer John to install one extra bidirectional road. The farm has k special fields and he has decided to install the road between two different special fields. He may add the road between two special fields that already had a road directly connecting them. After the road is added, Bessie will return home on the shortest path from field 1 to field n . Since Bessie needs more exercise, Farmer John must maximize the length of this shortest path. Help him!",
    "input": "The first line contains integers n , m , and k ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 , n- 1 \u2264 m \u2264 2 \u00b7 10^ 5 , 2 \u2264 k \u2264 n ) \u2014 the number of fields on the farm, the number of roads, and the number of special fields. The second line contains k integers a_ 1, a_ 2, . . . , a_ k ( 1 \u2264 a_ i \u2264 n ) \u2014 the special fields. All a_ i are distinct. The i - th of the following m lines contains integers x_ i and y_ i ( 1 \u2264 x_ i, y_ i \u2264 n , x_ i y_ i ) , representing a bidirectional road between fields x_ i and y_ i . It is guaranteed that one can reach any field from every other field. It is also guaranteed that for any pair of fields there is at most one road connecting them.",
    "output": "Output one integer, the maximum possible length of the shortest path from field 1 to n after Farmer John installs one road optimally.",
    "note": "The graph for the first example is shown below. The special fields are denoted by red. It is optimal for Farmer John to add a road between fields 3 and 5 , and the resulting shortest path from 1 to 5 is length 3 . The graph for the second example is shown below. Farmer John must add a road between fields 2 and 4 , and the resulting shortest path from 1 to 5 is length 3 .",
    "topics": [
      "binary search",
      "data structures",
      "dfs and similar",
      "graphs",
      "greedy",
      "shortest paths",
      "sortings"
    ],
    "id": "1307D"
  },
  {
    "title": "Animal Observation (hard version)",
    "url": "https://codeforces.com/problemset/problem/1304/F2",
    "history": "The only difference between easy and hard versions is the constraint on k . Gildong loves observing animals, so he bought two cameras to take videos of wild animals in a forest. The color of one camera is red, and the other one' s color is blue. Gildong is going to take videos for n days, starting from day 1 to day n . The forest can be divided into m areas, numbered from 1 to m . He' ll use the cameras in the following way: On every odd day ( 1 - st, 3 - rd, 5 - th, . . . ) , bring the red camera to the forest and record a video for 2 days. On every even day ( 2 - nd, 4 - th, 6 - th, . . . ) , bring the blue camera to the forest and record a video for 2 days. If he starts recording on the n - th day with one of the cameras, the camera records for only one day. Each camera can observe k consecutive areas of the forest. For example, if m= 5 and k= 3 , he can put a camera to observe one of these three ranges of areas for two days: [ 1, 3] , [ 2, 4] , and [ 3, 5] . Gildong got information about how many animals will be seen in each area on each day. Since he would like to observe as many animals as possible, he wants you to find the best way to place the two cameras for n days. Note that if the two cameras are observing the same area on the same day, the animals observed in that area are counted only once.",
    "input": "The first line contains three integers n , m , and k ( 1 \u2264 n \u2264 50 , 1 \u2264 m \u2264 2 \u00b7 10^ 4 , 1 \u2264 k \u2264 m ) \u2013 the number of days Gildong is going to record, the number of areas of the forest, and the range of the cameras, respectively. Next n lines contain m integers each. The j - th integer in the i+ 1 - st line is the number of animals that can be seen on the i - th day in the j - th area. Each number of animals is between 0 and 1000 , inclusive.",
    "output": "Print one integer \u2013 the maximum number of animals that can be observed.",
    "note": "The optimal way to observe animals in the four examples are as follows: Example 1: Example 2: Example 3: Example 4:",
    "topics": [
      "data structures",
      "dp",
      "greedy"
    ],
    "id": "1304F2"
  },
  {
    "title": "Animal Observation (easy version)",
    "url": "https://codeforces.com/problemset/problem/1304/F1",
    "history": "The only difference between easy and hard versions is the constraint on k . Gildong loves observing animals, so he bought two cameras to take videos of wild animals in a forest. The color of one camera is red, and the other one' s color is blue. Gildong is going to take videos for n days, starting from day 1 to day n . The forest can be divided into m areas, numbered from 1 to m . He' ll use the cameras in the following way: On every odd day ( 1 - st, 3 - rd, 5 - th, . . . ) , bring the red camera to the forest and record a video for 2 days. On every even day ( 2 - nd, 4 - th, 6 - th, . . . ) , bring the blue camera to the forest and record a video for 2 days. If he starts recording on the n - th day with one of the cameras, the camera records for only one day. Each camera can observe k consecutive areas of the forest. For example, if m= 5 and k= 3 , he can put a camera to observe one of these three ranges of areas for two days: [ 1, 3] , [ 2, 4] , and [ 3, 5] . Gildong got information about how many animals will be seen in each area each day. Since he would like to observe as many animals as possible, he wants you to find the best way to place the two cameras for n days. Note that if the two cameras are observing the same area on the same day, the animals observed in that area are counted only once.",
    "input": "The first line contains three integers n , m , and k ( 1 \u2264 n \u2264 50 , 1 \u2264 m \u2264 2 \u00b7 10^ 4 , 1 \u2264 k \u2264 min( m, 20) ) \u2013 the number of days Gildong is going to record, the number of areas of the forest, and the range of the cameras, respectively. Next n lines contain m integers each. The j - th integer in the i+ 1 - st line is the number of animals that can be seen on the i - th day in the j - th area. Each number of animals is between 0 and 1000 , inclusive.",
    "output": "Print one integer \u2013 the maximum number of animals that can be observed.",
    "note": "The optimal way to observe animals in the four examples are as follows: Example 1: Example 2: Example 3: Example 4:",
    "topics": [
      "data structures",
      "dp"
    ],
    "id": "1304F1"
  },
  {
    "title": "1-Trees and Queries",
    "url": "https://codeforces.com/problemset/problem/1304/E",
    "history": "Gildong was hiking a mountain, walking by millions of trees. Inspired by them, he suddenly came up with an interesting idea for trees in data structures: What if we add another edge in a tree? Then he found that such tree- like graphs are called 1- trees. Since Gildong was bored of solving too many tree problems, he wanted to see if similar techniques in trees can be used in 1- trees as well. Instead of solving it by himself, he' s going to test you by providing queries on 1- trees. First, he' ll provide you a tree ( not 1- tree) with n vertices, then he will ask you q queries. Each query contains 5 integers: x , y , a , b , and k . This means you' re asked to determine if there exists a path from vertex a to b that contains exactly k edges after adding a bidirectional edge between vertices x and y . A path can contain the same vertices and same edges multiple times. All queries are independent of each other; i. e. the added edge in a query is removed in the next query.",
    "input": "The first line contains an integer n ( 3 \u2264 n \u2264 10^ 5 ) , the number of vertices of the tree. Next n- 1 lines contain two integers u and v ( 1 \u2264 u, v \u2264 n , u v ) each, which means there is an edge between vertex u and v . All edges are bidirectional and distinct. Next line contains an integer q ( 1 \u2264 q \u2264 10^ 5 ) , the number of queries Gildong wants to ask. Next q lines contain five integers x , y , a , b , and k each ( 1 \u2264 x, y, a, b \u2264 n , x y , 1 \u2264 k \u2264 10^ 9 ) \u2013 the integers explained in the description. It is guaranteed that the edge between x and y does not exist in the original tree.",
    "output": "For each query, print \" YES\" if there exists a path that contains exactly k edges from vertex a to b after adding an edge between vertices x and y . Otherwise, print \" NO\" . You can print each letter in any case ( upper or lower) .",
    "note": "The image below describes the tree ( circles and solid lines) and the added edges for each query ( dotted lines) . Possible paths for the queries with \" YES\" answers are: 1 - st query: 1 \u2013 3 \u2013 2 2 - nd query: 1 \u2013 2 \u2013 3 4 - th query: 3 \u2013 4 \u2013 2 \u2013 3 \u2013 4 \u2013 2 \u2013 3 \u2013 4 \u2013 2 \u2013 3",
    "topics": [
      "data structures",
      "dfs and similar",
      "shortest paths",
      "trees"
    ],
    "id": "1304E"
  },
  {
    "title": "Sum of Prefix Sums",
    "url": "https://codeforces.com/problemset/problem/1303/G",
    "history": "We define the sum of prefix sums of an array [ s_ 1, s_ 2, . . . , s_ k] as s_ 1 + ( s_ 1 + s_ 2) + ( s_ 1 + s_ 2 + s_ 3) + . . . + ( s_ 1 + s_ 2 + . . . + s_ k) . You are given a tree consisting of n vertices. Each vertex i has an integer a_ i written on it. We define the value of the simple path from vertex u to vertex v as follows: consider all vertices appearing on the path from u to v , write down all the numbers written on these vertices in the order they appear on the path, and compute the sum of prefix sums of the resulting sequence. Your task is to calculate the maximum value over all paths in the tree.",
    "input": "The first line contains one integer n ( 2 \u2264 n \u2264 150000 ) \u2014 the number of vertices in the tree. Then n - 1 lines follow, representing the edges of the tree. Each line contains two integers u_ i and v_ i ( 1 \u2264 u_ i, v_ i \u2264 n , u_ i v_ i ) , denoting an edge between vertices u_ i and v_ i . It is guaranteed that these edges form a tree. The last line contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 6 ) .",
    "output": "Print one integer \u2014 the maximum value over all paths in the tree.",
    "note": "The best path in the first example is from vertex 3 to vertex 1 . It gives the sequence [ 3, 3, 7, 1] , and the sum of prefix sums is 36 .",
    "topics": [
      "data structures",
      "divide and conquer",
      "geometry",
      "trees"
    ],
    "id": "1303G"
  },
  {
    "title": "Segment tree or Fenwick?",
    "url": "https://codeforces.com/problemset/problem/1302/C",
    "history": "This is an unusual problem in an unusual contest, here is the announcement: http: / / codeforces. com/ blog/ entry/ 73543You are given an array A of length n , initially filled with zeros. You need to process q queries to the array, each of one of the following types: 1 x y: you need to assign A_ x= y ; 2 l r: you need to print \u2211_ i= l^ r A_ i . Furthermore, there are T independent tests you need to process.",
    "input": "The first line contains an integer T ( 1 \u2264 T \u2264 10^ 5 ) \u2014 the number of test cases. Each test case description starts with two integers n, q ( 1 \u2264 n, q \u2264 10^ 5 ) \u2014 the length of the array and the number of queries. The following q lines contain the description of queries: 1 x y ( 1 \u2264 x \u2264 n , 0 \u2264 y \u2264 10^ 9 ) for queries of the first type and 2 l r ( 1 \u2264 l \u2264 r \u2264 n ) for queries of the second type. It is guaranteed that the sum of n as well as the sum of q does not exceed 10^ 6 .",
    "output": "For each query of the second type print its result on a separate line.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": "1302C"
  },
  {
    "title": "Nanosoft",
    "url": "https://codeforces.com/problemset/problem/1301/E",
    "history": "Warawreh created a great company called Nanosoft. The only thing that Warawreh still has to do is to place a large picture containing its logo on top of the company' s building. The logo of Nanosoft can be described as four squares of the same size merged together into one large square. The top left square is colored with red, the top right square is colored with green, the bottom left square is colored with yellow and the bottom right square is colored with blue. An Example of some correct logos: An Example of some incorrect logos: Warawreh went to Adhami' s store in order to buy the needed picture. Although Adhami' s store is very large he has only one picture that can be described as a grid of n rows and m columns. The color of every cell in the picture will be green ( the symbol ' G' ) , red ( the symbol ' R' ) , yellow ( the symbol ' Y' ) or blue ( the symbol ' B' ) . Adhami gave Warawreh q options, in every option he gave him a sub- rectangle from that picture and told him that he can cut that sub- rectangle for him. To choose the best option, Warawreh needs to know for every option the maximum area of sub- square inside the given sub- rectangle that can be a Nanosoft logo. If there are no such sub- squares, the answer is 0 . Warawreh couldn' t find the best option himself so he asked you for help, can you help him?",
    "input": "The first line of input contains three integers n , m and q ( 1 \u2264 n , m \u2264 500, 1 \u2264 q \u2264 3 \u00b7 10^ 5) \u2014 the number of row, the number columns and the number of options. For the next n lines, every line will contain m characters. In the i - th line the j - th character will contain the color of the cell at the i - th row and j - th column of the Adhami' s picture. The color of every cell will be one of these: ' G' , ' Y' , ' R' , ' B' . For the next q lines, the input will contain four integers r_ 1 , c_ 1 , r_ 2 and c_ 2 ( 1 \u2264 r_ 1 \u2264 r_ 2 \u2264 n, 1 \u2264 c_ 1 \u2264 c_ 2 \u2264 m) . In that option, Adhami gave to Warawreh a sub- rectangle of the picture with the upper- left corner in the cell ( r_ 1, c_ 1) and with the bottom- right corner in the cell ( r_ 2, c_ 2) .",
    "output": "For every option print the maximum area of sub- square inside the given sub- rectangle, which can be a NanoSoft Logo. If there are no such sub- squares, print 0 .",
    "note": "Picture for the first test: The pictures from the left to the right corresponds to the options. The border of the sub- rectangle in the option is marked with black, the border of the sub- square with the maximal possible size, that can be cut is marked with gray.",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "implementation"
    ],
    "id": "1301E"
  },
  {
    "title": "Water Balance",
    "url": "https://codeforces.com/problemset/problem/1299/C",
    "history": "There are n water tanks in a row, i - th of them contains a_ i liters of water. The tanks are numbered from 1 to n from left to right. You can perform the following operation: choose some subsegment [ l, r] ( 1\u2264 l \u2264 r \u2264 n ) , and redistribute water in tanks l, l+ 1, . . . , r evenly. In other words, replace each of a_ l, a_ l+ 1, . . . , a_ r by a_ l + a_ l+ 1 + . . . + a_ r/ r- l+ 1 . For example, if for volumes [ 1, 3, 6, 7] you choose l = 2, r = 3 , new volumes of water will be [ 1, 4. 5, 4. 5, 7] . You can perform this operation any number of times. What is the lexicographically smallest sequence of volumes of water that you can achieve? As a reminder: A sequence a is lexicographically smaller than a sequence b of the same length if and only if the following holds: in the first ( leftmost) position where a and b differ, the sequence a has a smaller element than the corresponding element in b .",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 10^ 6 ) \u2014 the number of water tanks. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 6 ) \u2014 initial volumes of water in the water tanks, in liters. Because of large input, reading input as doubles is not recommended.",
    "output": "Print the lexicographically smallest sequence you can get. In the i - th line print the final volume of water in the i - th tank. Your answer is considered correct if the absolute or relative error of each a_ i does not exceed 10^ - 9 . Formally, let your answer be a_ 1, a_ 2, . . . , a_ n , and the jury' s answer be b_ 1, b_ 2, . . . , b_ n . Your answer is accepted if and only if | a_ i - b_ i| / max( 1, | b_ i| ) \u2264 10^ - 9 for each i .",
    "note": "In the first sample, you can get the sequence by applying the operation for subsegment [ 1, 3] . In the second sample, you can' t get any lexicographically smaller sequence.",
    "topics": [
      "data structures",
      "geometry",
      "greedy"
    ],
    "id": "1299C"
  },
  {
    "title": "Falling Blocks",
    "url": "https://codeforces.com/problemset/problem/1297/I",
    "history": "Recently, Polycarp has invented a new mobile game with falling blocks. In the game, n blocks are falling down, one at a time, towards a flat surface with length d units. Each block can be represented as a rectangle with coordinates from l_ i to r_ i and unit height, dropped downwards from very high up. A block falls until it comes in contact with the flat surface or any other block. Let' s define that block a covers block b if l_ a \u2264 l_ b \u2264 r_ b \u2264 r_ a . Consider what happens when a new block i falls. If the new ( upper) block i comes in contact with any block j such that block i does not cover block j , block i will stick to block j , and no blocks will disappear. Otherwise, all blocks that block i covers and is in contact with will be vaporized, and block i will continue falling with the ability to vaporize lower blocks. For example, consider what happens when three blocks ( 1, 2) , ( 2, 3) and ( 1, 3) fall, in that order. The first block will stick to the flat surface. Then, the second block will stick to the first block. Finally, the third block will vaporize the second block, keep falling, vaporize the first block, and stick to the flat surface. Here is a graphic for the first example. After each block falls, help Polycarp determine how many blocks will remain!",
    "input": "The first line contains two integers n and d ( 1 \u2264 n, d \u2264 10^ 5 ) \u2014 the number of falling blocks and the length of the flat surface. The i - th of the following n lines contains integers l_ i and r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 d ) \u2014 the coordinates of the i - th block.",
    "output": "Output n integers. The i - th integer should be the number of blocks that will be left after the i - th block falls.",
    "note": "The first example is explained above. In the second example, this is what happens after each block falls: Block 1 will stick to the flat surface. Block 2 will stick to the flat surface. Block 3 will stick to blocks 1 and 2 . Note that block 3 will not vaporize block 2 because it does not cover block 1 and is in contact with it. Block 4 will vaporize all the blocks and stick to the flat surface. Block 5 will stick to block 4 Block 6 will stick to block 5 . Block 7 will stick to block 6 . Note that no blocks are vaporized because although block 7 covers block 4 and block 5 , they never come in contact. Block 8 vaporizes block 7 and sticks to block 6 .",
    "topics": [
      "*special",
      "data structures"
    ],
    "id": "1297I"
  },
  {
    "title": "Movie Fan",
    "url": "https://codeforces.com/problemset/problem/1297/F",
    "history": "Recently, Polycarp has been a fan of cinema novelties and is trying not to miss them! In the near future, n new movies will be released: the i - th of them will be airing from the day a_ i and to the day b_ i . This means that if Polycarp wants to watch the i - th movie in the cinema, he must do so in the period from a_ i to b_ i inclusive. If perhaps Polycarp will not have the opportunity to watch a movie in a cinema, he can then do it after day b_ i by watching it using an online service. Of course, this is an undesirable outcome for Polycarp because the whole world will have time to discuss this movie on social networks! Polycarp can watch no more than m movies per day. Help Polycarp find a movie- watching schedule such that every movie will be watched in the cinema. If such a schedule does not exist, then Polycarp wants to watch movies so that: for each movie that he doesn' t have time to watch in the cinema, we will find the number of days between the end of its airing and the day when Polycarpus watches the movie, the maximum of the values from the previous point should be as small as possible.",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the input. The following are descriptions of the t test cases. The first line of each test case contains two integers n and m ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 m \u2264 10^ 9 ) \u2014 the number of movies and the maximum number of movies that Polycarp can view per day. In the next n lines, the movies themselves are described, one per line, by a pair of integers a_ i , b_ i ( 1 \u2264 a_ i \u2264 b_ i \u2264 10^ 9 ) \u2014 the first and last airing days for the i - th movie. It is guaranteed that the sum of the values n for all test cases in the input does not exceed 2 \u00b7 10^ 5 .",
    "output": "Print t answers to given test cases in the order in which they appear in the input: the i - th answer should consist of two lines. Print the integer d in the first line of each test case answer: d= 0 , if there is a schedule such that all movies are watched during airing, d> 0 , if such a schedule does not exist \u2014 in this case, d is equal to the minimum value of maximum among all the watching \" delays\" after the end of airing. In the second line of the answer to each test case, print n positive integers t_ 1, t_ 2, . . . , t_ n , where t_ i is the number of the day when Polycarp needs to watch the i - th movie in the optimal schedule. If there are several answers, print any of them.",
    "note": "",
    "topics": [
      "*special",
      "data structures",
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "1297F"
  },
  {
    "title": "String Coloring (hard version)",
    "url": "https://codeforces.com/problemset/problem/1296/E2",
    "history": "This is a hard version of the problem. The actual problems are different, but the easy version is almost a subtask of the hard version. Note that the constraints and the output format are different. You are given a string s consisting of n lowercase Latin letters. You have to color all its characters the minimum number of colors ( each character to exactly one color, the same letters can be colored the same or different colors, i. e. you can choose exactly one color for each index in s ) . After coloring, you can swap any two neighboring characters of the string that are colored different colors. You can perform such an operation arbitrary ( possibly, zero) number of times. The goal is to make the string sorted, i. e. all characters should be in alphabetical order. Your task is to find the minimum number of colors which you have to color the given string in so that after coloring it can become sorted by some sequence of swaps. Note that you have to restore only coloring, not the sequence of swaps.",
    "input": "The first line of the input contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of s . The second line of the input contains the string s consisting of exactly n lowercase Latin letters.",
    "output": "In the first line print one integer res ( 1 \u2264 res \u2264 n ) \u2014 the minimum number of colors in which you have to color the given string so that after coloring it can become sorted by some sequence of swaps. In the second line print any possible coloring that can be used to sort the string using some sequence of swaps described in the problem statement. The coloring is the array c of length n , where 1 \u2264 c_ i \u2264 res and c_ i means the color of the i - th character.",
    "note": "",
    "topics": [
      "data structures",
      "dp"
    ],
    "id": "1296E2"
  },
  {
    "title": "Yet Another Walking Robot",
    "url": "https://codeforces.com/problemset/problem/1296/C",
    "history": "There is a robot on a coordinate plane. Initially, the robot is located at the point ( 0, 0) . Its path is described as a string s of length n consisting of characters ' L' , ' R' , ' U' , ' D' . Each of these characters corresponds to some move: ' L' ( left) : means that the robot moves from the point ( x, y) to the point ( x - 1, y) ; ' R' ( right) : means that the robot moves from the point ( x, y) to the point ( x + 1, y) ; ' U' ( up) : means that the robot moves from the point ( x, y) to the point ( x, y + 1) ; ' D' ( down) : means that the robot moves from the point ( x, y) to the point ( x, y - 1) . The company that created this robot asked you to optimize the path of the robot somehow. To do this, you can remove any non- empty substring of the path. But this company doesn' t want their customers to notice the change in the robot behavior. It means that if before the optimization the robot ended its path at the point ( x_ e, y_ e) , then after optimization ( i. e. removing some single substring from s ) the robot also ends its path at the point ( x_ e, y_ e) . This optimization is a low- budget project so you need to remove the shortest possible non- empty substring to optimize the robot' s path such that the endpoint of his path doesn' t change. It is possible that you can' t optimize the path. Also, it is possible that after the optimization the target path is an empty string ( i. e. deleted substring is the whole string s ) . Recall that the substring of s is such string that can be obtained from s by removing some amount of characters ( possibly, zero) from the prefix and some amount of characters ( possibly, zero) from the suffix. For example, the substrings of \" LURLLR\" are \" LU\" , \" LR\" , \" LURLLR\" , \" URL\" , but not \" RR\" and \" UL\" . You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The next 2t lines describe test cases. Each test case is given on two lines. The first line of the test case contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the robot' s path. The second line of the test case contains one string s consisting of n characters ' L' , ' R' , ' U' , ' D' \u2014 the robot' s path. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 ( \u2211 n \u2264 2 \u00b7 10^ 5 ) .",
    "output": "For each test case, print the answer on it. If you cannot remove such non- empty substring that the endpoint of the robot' s path doesn' t change, print - 1. Otherwise, print two integers l and r such that 1 \u2264 l \u2264 r \u2264 n \u2014 endpoints of the substring you remove. The value r- l+ 1 should be minimum possible. If there are several answers, print any of them.",
    "note": "",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "1296C"
  },
  {
    "title": "Permutation Separation",
    "url": "https://codeforces.com/problemset/problem/1295/E",
    "history": "You are given a permutation p_ 1, p_ 2, . . . , p_ n ( an array where each integer from 1 to n appears exactly once) . The weight of the i - th element of this permutation is a_ i . At first, you separate your permutation into two non- empty sets \u2014 prefix and suffix. More formally, the first set contains elements p_ 1, p_ 2, . . . , p_ k , the second \u2014 p_ k+ 1, p_ k+ 2, . . . , p_ n , where 1 \u2264 k < n . After that, you may move elements between sets. The operation you are allowed to do is to choose some element of the first set and move it to the second set, or vice versa ( move from the second set to the first) . You have to pay a_ i dollars to move the element p_ i . Your goal is to make it so that each element of the first set is less than each element of the second set. Note that if one of the sets is empty, this condition is met. For example, if p = [ 3, 1, 2] and a = [ 7, 1, 4] , then the optimal strategy is: separate p into two parts [ 3, 1] and [ 2] and then move the 2 - element into first set ( it costs 4 ) . And if p = [ 3, 5, 1, 6, 2, 4] , a = [ 9, 1, 9, 9, 1, 9] , then the optimal strategy is: separate p into two parts [ 3, 5, 1] and [ 6, 2, 4] , and then move the 2 - element into first set ( it costs 1 ) , and 5 - element into second set ( it also costs 1 ) . Calculate the minimum number of dollars you have to spend.",
    "input": "The first line contains one integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of permutation. The second line contains n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) . It' s guaranteed that this sequence contains each element from 1 to n exactly once. The third line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) .",
    "output": "Print one integer \u2014 the minimum number of dollars you have to spend.",
    "note": "",
    "topics": [
      "data structures",
      "divide and conquer"
    ],
    "id": "1295E"
  },
  {
    "title": "MEX maximizing",
    "url": "https://codeforces.com/problemset/problem/1294/D",
    "history": "Recall that MEX of an array is a minimum non- negative integer that does not belong to the array. Examples: for the array [ 0, 0, 1, 0, 2] MEX equals to 3 because numbers 0, 1 and 2 are presented in the array and 3 is the minimum non- negative integer not presented in the array; for the array [ 1, 2, 3, 4] MEX equals to 0 because 0 is the minimum non- negative integer not presented in the array; for the array [ 0, 1, 4, 3] MEX equals to 2 because 2 is the minimum non- negative integer not presented in the array. You are given an empty array a= [ ] ( in other words, a zero- length array) . You are also given a positive integer x . You are also given q queries. The j - th query consists of one integer y_ j and means that you have to append one element y_ j to the array. The array length increases by 1 after a query. In one move, you can choose any index i and set a_ i : = a_ i + x or a_ i : = a_ i - x ( i. e. increase or decrease any element of the array by x ) . The only restriction is that a_ i cannot become negative. Since initially the array is empty, you can perform moves only after the first query. You have to maximize the MEX ( minimum excluded) of the array if you can perform any number of such operations ( you can even perform the operation multiple times with one element) . You have to find the answer after each of q queries ( i. e. the j - th answer corresponds to the array of length j ) . Operations are discarded before each query. I. e. the array a after the j - th query equals to [ y_ 1, y_ 2, . . . , y_ j] .",
    "input": "The first line of the input contains two integers q, x ( 1 \u2264 q, x \u2264 4 \u00b7 10^ 5 ) \u2014 the number of queries and the value of x . The next q lines describe queries. The j - th query consists of one integer y_ j ( 0 \u2264 y_ j \u2264 10^ 9 ) and means that you have to append one element y_ j to the array.",
    "output": "Print the answer to the initial problem after each query \u2014 for the query j print the maximum value of MEX after first j queries. Note that queries are dependent ( the array changes after each query) but operations are independent between queries.",
    "note": "In the first example: After the first query, the array is a= [ 0] : you don' t need to perform any operations, maximum possible MEX is 1 . After the second query, the array is a= [ 0, 1] : you don' t need to perform any operations, maximum possible MEX is 2 . After the third query, the array is a= [ 0, 1, 2] : you don' t need to perform any operations, maximum possible MEX is 3 . After the fourth query, the array is a= [ 0, 1, 2, 2] : you don' t need to perform any operations, maximum possible MEX is 3 ( you can' t make it greater with operations) . After the fifth query, the array is a= [ 0, 1, 2, 2, 0] : you can perform a[ 4] : = a[ 4] + 3 = 3 . The array changes to be a= [ 0, 1, 2, 2, 3] . Now MEX is maximum possible and equals to 4 . After the sixth query, the array is a= [ 0, 1, 2, 2, 0, 0] : you can perform a[ 4] : = a[ 4] + 3 = 0 + 3 = 3 . The array changes to be a= [ 0, 1, 2, 2, 3, 0] . Now MEX is maximum possible and equals to 4 . After the seventh query, the array is a= [ 0, 1, 2, 2, 0, 0, 10] . You can perform the following operations: a[ 3] : = a[ 3] + 3 = 2 + 3 = 5 , a[ 4] : = a[ 4] + 3 = 0 + 3 = 3 , a[ 5] : = a[ 5] + 3 = 0 + 3 = 3 , a[ 5] : = a[ 5] + 3 = 3 + 3 = 6 , a[ 6] : = a[ 6] - 3 = 10 - 3 = 7 , a[ 6] : = a[ 6] - 3 = 7 - 3 = 4 . The resulting array will be a= [ 0, 1, 2, 5, 3, 6, 4] . Now MEX is maximum possible and equals to 7 .",
    "topics": [
      "data structures",
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1294D"
  },
  {
    "title": "NEKO's Maze Game",
    "url": "https://codeforces.com/problemset/problem/1292/A",
    "history": "3R2 as DJ Mashiro - Happiness Breeze Ice - DJ Mashiro is dead or aliveNEKO# \u03a6\u03c9\u03a6 has just got a new maze game on her PC! The game' s main puzzle is a maze, in the forms of a 2 \u00d7 n rectangle grid. NEKO' s task is to lead a Nekomimi girl from cell ( 1, 1) to the gate at ( 2, n) and escape the maze. The girl can only move between cells sharing a common side. However, at some moments during the game, some cells may change their state: either from normal ground to lava ( which forbids movement into that cell) , or vice versa ( which makes that cell passable again) . Initially all cells are of the ground type. After hours of streaming, NEKO finally figured out there are only q such moments: the i - th moment toggles the state of cell ( r_ i, c_ i) ( either from ground to lava or vice versa) . Knowing this, NEKO wonders, after each of the q moments, whether it is still possible to move from cell ( 1, 1) to cell ( 2, n) without going through any lava cells. Although NEKO is a great streamer and gamer, she still can' t get through quizzes and problems requiring large amount of Brain Power. Can you help her?",
    "input": "The first line contains integers n , q ( 2 \u2264 n \u2264 10^ 5 , 1 \u2264 q \u2264 10^ 5 ) . The i - th of q following lines contains two integers r_ i , c_ i ( 1 \u2264 r_ i \u2264 2 , 1 \u2264 c_ i \u2264 n ) , denoting the coordinates of the cell to be flipped at the i - th moment. It is guaranteed that cells ( 1, 1) and ( 2, n) never appear in the query list.",
    "output": "For each moment, if it is possible to travel from cell ( 1, 1) to cell ( 2, n) , print \" Yes\" , otherwise print \" No\" . There should be exactly q answers, one after every update. You can print the words in any case ( either lowercase, uppercase or mixed) .",
    "note": "We' ll crack down the example test here: After the first query, the girl still able to reach the goal. One of the shortest path ways should be: ( 1, 1) \u2192 ( 1, 2) \u2192 ( 1, 3) \u2192 ( 1, 4) \u2192 ( 1, 5) \u2192 ( 2, 5) . After the second query, it' s impossible to move to the goal, since the farthest cell she could reach is ( 1, 3) . After the fourth query, the ( 2, 3) is not blocked, but now all the 4 - th column is blocked, so she still can' t reach the goal. After the fifth query, the column barrier has been lifted, thus she can go to the final goal again.",
    "topics": [
      "data structures",
      "dsu",
      "implementation"
    ],
    "id": "1292A"
  },
  {
    "title": "Cartesian Tree ",
    "url": "https://codeforces.com/problemset/problem/1290/E",
    "history": "Ildar is the algorithm teacher of William and Harris. Today, Ildar is teaching Cartesian Tree. However, Harris is sick, so Ildar is only teaching William. A cartesian tree is a rooted tree, that can be constructed from a sequence of distinct integers. We build the cartesian tree as follows: If the sequence is empty, return an empty tree; Let the position of the maximum element be x ; Remove element on the position x from the sequence and break it into the left part and the right part ( which might be empty) ( not actually removing it, just taking it away temporarily) ; Build cartesian tree for each part; Create a new vertex for the element, that was on the position x which will serve as the root of the new tree. Then, for the root of the left part and right part, if exists, will become the children for this vertex; Return the tree we have gotten. For example, this is the cartesian tree for the sequence 4, 2, 7, 3, 5, 6, 1 : After teaching what the cartesian tree is, Ildar has assigned homework. He starts with an empty sequence a . In the i - th round, he inserts an element with value i somewhere in a . Then, he asks a question: what is the sum of the sizes of the subtrees for every node in the cartesian tree for the current sequence a ? Node v is in the node u subtree if and only if v = u or v is in the subtree of one of the vertex u children. The size of the subtree of node u is the number of nodes v such that v is in the subtree of u . Ildar will do n rounds in total. The homework is the sequence of answers to the n questions. The next day, Ildar told Harris that he has to complete the homework as well. Harris obtained the final state of the sequence a from William. However, he has no idea how to find the answers to the n questions. Help Harris!",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 150000 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) . It is guarenteed that each integer from 1 to n appears in the sequence exactly once.",
    "output": "Print n lines, i - th line should contain a single integer \u2014 the answer to the i - th question.",
    "note": "After the first round, the sequence is 1 . The tree is The answer is 1 . After the second round, the sequence is 2, 1 . The tree is The answer is 2+ 1= 3 . After the third round, the sequence is 2, 1, 3 . The tree is The answer is 2+ 1+ 3= 6 . After the fourth round, the sequence is 2, 4, 1, 3 . The tree is The answer is 1+ 4+ 1+ 2= 8 . After the fifth round, the sequence is 2, 4, 1, 5, 3 . The tree is The answer is 1+ 3+ 1+ 5+ 1= 11 .",
    "topics": [
      "data structures"
    ],
    "id": "1290E"
  },
  {
    "title": "Irreducible Anagrams",
    "url": "https://codeforces.com/problemset/problem/1290/B",
    "history": "Let' s call two strings s and t anagrams of each other if it is possible to rearrange symbols in the string s to get a string, equal to t . Let' s consider two strings s and t which are anagrams of each other. We say that t is a reducible anagram of s if there exists an integer k \u2265 2 and 2k non- empty strings s_ 1, t_ 1, s_ 2, t_ 2, . . . , s_ k, t_ k that satisfy the following conditions: If we write the strings s_ 1, s_ 2, . . . , s_ k in order, the resulting string will be equal to s ; If we write the strings t_ 1, t_ 2, . . . , t_ k in order, the resulting string will be equal to t ; For all integers i between 1 and k inclusive, s_ i and t_ i are anagrams of each other. If such strings don' t exist, then t is said to be an irreducible anagram of s . Note that these notions are only defined when s and t are anagrams of each other. For example, consider the string s = \" gamegame\" . Then the string t = \" megamage\" is a reducible anagram of s , we may choose for example s_ 1 = \" game\" , s_ 2 = \" gam\" , s_ 3 = \" e\" and t_ 1 = \" mega\" , t_ 2 = \" mag\" , t_ 3 = \" e\" : On the other hand, we can prove that t = \" memegaga\" is an irreducible anagram of s . You will be given a string s and q queries, represented by two integers 1 \u2264 l \u2264 r \u2264 | s| ( where | s| is equal to the length of the string s ) . For each query, you should find if the substring of s formed by characters from the l - th to the r - th has at least one irreducible anagram.",
    "input": "The first line contains a string s , consisting of lowercase English characters ( 1 \u2264 | s| \u2264 2 \u00b7 10^ 5 ) . The second line contains a single integer q ( 1 \u2264 q \u2264 10^ 5 ) \u2014 the number of queries. Each of the following q lines contain two integers l and r ( 1 \u2264 l \u2264 r \u2264 | s| ) , representing a query for the substring of s formed by characters from the l - th to the r - th.",
    "output": "For each query, print a single line containing \" Yes\" ( without quotes) if the corresponding substring has at least one irreducible anagram, and a single line containing \" No\" ( without quotes) otherwise.",
    "note": "In the first sample, in the first and third queries, the substring is \" a\" , which has itself as an irreducible anagram since two or more non- empty strings cannot be put together to obtain \" a\" . On the other hand, in the second query, the substring is \" aaa\" , which has no irreducible anagrams: its only anagram is itself, and we may choose s_ 1 = \" a\" , s_ 2 = \" aa\" , t_ 1 = \" a\" , t_ 2 = \" aa\" to show that it is a reducible anagram. In the second query of the second sample, the substring is \" abb\" , which has, for example, \" bba\" as an irreducible anagram.",
    "topics": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "strings",
      "two pointers"
    ],
    "id": "1290B"
  },
  {
    "title": "Mind Control",
    "url": "https://codeforces.com/problemset/problem/1290/A",
    "history": "You and your n - 1 friends have found an array of integers a_ 1, a_ 2, . . . , a_ n . You have decided to share it in the following way: All n of you stand in a line in a particular order. Each minute, the person at the front of the line chooses either the first or the last element of the array, removes it, and keeps it for himself. He then gets out of line, and the next person in line continues the process. You are standing in the m - th position in the line. Before the process starts, you may choose up to k different people in the line, and persuade them to always take either the first or the last element in the array on their turn ( for each person his own choice, not necessarily equal for all people) , no matter what the elements themselves are. Once the process starts, you cannot persuade any more people, and you cannot change the choices for the people you already persuaded. Suppose that you' re doing your choices optimally. What is the greatest integer x such that, no matter what are the choices of the friends you didn' t choose to control, the element you will take from the array will be greater than or equal to x ? Please note that the friends you don' t control may do their choice arbitrarily, and they will not necessarily take the biggest element available.",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains three space- separated integers n , m and k ( 1 \u2264 m \u2264 n \u2264 3500 , 0 \u2264 k \u2264 n - 1 ) \u2014 the number of elements in the array, your position in line and the number of people whose choices you can fix. The second line of each test case contains n positive integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 3500 .",
    "output": "For each test case, print the largest integer x such that you can guarantee to obtain at least x .",
    "note": "In the first test case, an optimal strategy is to force the first person to take the last element and the second person to take the first element. the first person will take the last element ( 5 ) because he or she was forced by you to take the last element. After this turn the remaining array will be [ 2, 9, 2, 3, 8] ; the second person will take the first element ( 2 ) because he or she was forced by you to take the first element. After this turn the remaining array will be [ 9, 2, 3, 8] ; if the third person will choose to take the first element ( 9 ) , at your turn the remaining array will be [ 2, 3, 8] and you will take 8 ( the last element) ; if the third person will choose to take the last element ( 8 ) , at your turn the remaining array will be [ 9, 2, 3] and you will take 9 ( the first element) . Thus, this strategy guarantees to end up with at least 8 . We can prove that there is no strategy that guarantees to end up with at least 9 . Hence, the answer is 8 . In the second test case, an optimal strategy is to force the first person to take the first element. Then, in the worst case, both the second and the third person will take the first element: you will end up with 4 .",
    "topics": [
      "brute force",
      "data structures",
      "implementation"
    ],
    "id": "1290A"
  },
  {
    "title": "Messenger Simulator",
    "url": "https://codeforces.com/problemset/problem/1288/E",
    "history": "Polycarp is a frequent user of the very popular messenger. He' s chatting with his friends all the time. He has n friends, numbered from 1 to n . Recall that a permutation of size n is an array of size n such that each integer from 1 to n occurs exactly once in this array. So his recent chat list can be represented with a permutation p of size n . p_ 1 is the most recent friend Polycarp talked to, p_ 2 is the second most recent and so on. Initially, Polycarp' s recent chat list p looks like 1, 2, . . . , n ( in other words, it is an identity permutation) . After that he receives m messages, the j - th message comes from the friend a_ j . And that causes friend a_ j to move to the first position in a permutation, shifting everyone between the first position and the current position of a_ j by 1 . Note that if the friend a_ j is in the first position already then nothing happens. For example, let the recent chat list be p = [ 4, 1, 5, 3, 2] : if he gets messaged by friend 3 , then p becomes [ 3, 4, 1, 5, 2] ; if he gets messaged by friend 4 , then p doesn' t change [ 4, 1, 5, 3, 2] ; if he gets messaged by friend 2 , then p becomes [ 2, 4, 1, 5, 3] . For each friend consider all position he has been at in the beginning and after receiving each message. Polycarp wants to know what were the minimum and the maximum positions.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 3 \u00b7 10^ 5 ) \u2014 the number of Polycarp' s friends and the number of received messages, respectively. The second line contains m integers a_ 1, a_ 2, . . . , a_ m ( 1 \u2264 a_ i \u2264 n ) \u2014 the descriptions of the received messages.",
    "output": "Print n pairs of integers. For each friend output the minimum and the maximum positions he has been in the beginning and after receiving each message.",
    "note": "In the first example, Polycarp' s recent chat list looks like this: [ 1, 2, 3, 4, 5] [ 3, 1, 2, 4, 5] [ 5, 3, 1, 2, 4] [ 1, 5, 3, 2, 4] [ 4, 1, 5, 3, 2] So, for example, the positions of the friend 2 are 2, 3, 4, 4, 5 , respectively. Out of these 2 is the minimum one and 5 is the maximum one. Thus, the answer for the friend 2 is a pair ( 2, 5) . In the second example, Polycarp' s recent chat list looks like this: [ 1, 2, 3, 4] [ 1, 2, 3, 4] [ 2, 1, 3, 4] [ 4, 2, 1, 3]",
    "topics": [
      "data structures"
    ],
    "id": "1288E"
  },
  {
    "title": "Hyperset",
    "url": "https://codeforces.com/problemset/problem/1287/B",
    "history": "Bees Alice and Alesya gave beekeeper Polina famous card game \" Set\" as a Christmas present. The deck consists of cards that vary in four features across three options for each kind of feature: number of shapes, shape, shading, and color. In this game, some combinations of three cards are said to make up a set. For every feature \u2014 color, number, shape, and shading \u2014 the three cards must display that feature as either all the same, or pairwise different. The picture below shows how sets look. Polina came up with a new game called \" Hyperset\" . In her game, there are n cards with k features, each feature has three possible values: \" S\" , \" E\" , or \" T\" . The original \" Set\" game can be viewed as \" Hyperset\" with k = 4 . Similarly to the original game, three cards form a set, if all features are the same for all cards or are pairwise different. The goal of the game is to compute the number of ways to choose three cards that form a set. Unfortunately, winter holidays have come to an end, and it' s time for Polina to go to school. Help Polina find the number of sets among the cards lying on the table.",
    "input": "The first line of each test contains two integers n and k ( 1 \u2264 n \u2264 1500 , 1 \u2264 k \u2264 30 ) \u2014 number of cards and number of features. Each of the following n lines contains a card description: a string consisting of k letters \" S\" , \" E\" , \" T\" . The i - th character of this string decribes the i - th feature of that card. All cards are distinct.",
    "output": "Output a single integer \u2014 the number of ways to choose three cards that form a set.",
    "note": "In the third example test, these two triples of cards are sets: \" SETT\" , \" TEST\" , \" EEET\" \" TEST\" , \" ESTE\" , \" STES\"",
    "topics": [
      "brute force",
      "data structures",
      "implementation"
    ],
    "id": "1287B"
  },
  {
    "title": "Fedya the Potter Strikes Back",
    "url": "https://codeforces.com/problemset/problem/1286/E",
    "history": "Fedya has a string S , initially empty, and an array W , also initially empty. There are n queries to process, one at a time. Query i consists of a lowercase English letter c_ i and a nonnegative integer w_ i . First, c_ i must be appended to S , and w_ i must be appended to W . The answer to the query is the sum of suspiciousnesses for all subsegments of W [ L, R] , ( 1 \u2264 L \u2264 R \u2264 i) . We define the suspiciousness of a subsegment as follows: if the substring of S corresponding to this subsegment ( that is, a string of consecutive characters from L - th to R - th, inclusive) matches the prefix of S of the same length ( that is, a substring corresponding to the subsegment [ 1, R - L + 1] ) , then its suspiciousness is equal to the minimum in the array W on the [ L, R] subsegment. Otherwise, in case the substring does not match the corresponding prefix, the suspiciousness is 0 . Help Fedya answer all the queries before the orderlies come for him!",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 600 000) \u2014 the number of queries. The i - th of the following n lines contains the query i : a lowercase letter of the Latin alphabet c_ i and an integer w_ i ( 0 \u2264 w_ i \u2264 2^ 30 - 1) . All queries are given in an encrypted form. Let ans be the answer to the previous query ( for the first query we set this value equal to 0 ) . Then, in order to get the real query, you need to do the following: perform a cyclic shift of c_ i in the alphabet forward by ans , and set w_ i equal to w_ i \u2295 ( ans & MASK) , where \u2295 is the bitwise exclusive \" or\" , & is the bitwise \" and\" , and MASK = 2^ 30 - 1 .",
    "output": "Print n lines, i - th line should contain a single integer \u2014 the answer to the i - th query.",
    "note": "For convenience, we will call \" suspicious\" those subsegments for which the corresponding lines are prefixes of S , that is, those whose suspiciousness may not be zero. As a result of decryption in the first example, after all requests, the string S is equal to \" abacaba\" , and all w_ i = 1 , that is, the suspiciousness of all suspicious sub- segments is simply equal to 1 . Let' s see how the answer is obtained after each request: 1. S = \" a\" , the array W has a single subsegment \u2014 [ 1, 1] , and the corresponding substring is \" a\" , that is, the entire string S , thus it is a prefix of S , and the suspiciousness of the subsegment is 1 . 2. S = \" ab\" , suspicious subsegments: [ 1, 1] and [ 1, 2] , total 2 . 3. S = \" aba\" , suspicious subsegments: [ 1, 1] , [ 1, 2] , [ 1, 3] and [ 3, 3] , total 4 . 4. S = \" abac\" , suspicious subsegments: [ 1, 1] , [ 1, 2] , [ 1, 3] , [ 1, 4] and [ 3, 3] , total 5 . 5. S = \" abaca\" , suspicious subsegments: [ 1, 1] , [ 1, 2] , [ 1, 3] , [ 1, 4] , [ 1, 5] , [ 3, 3] and [ 5, 5] , total 7 . 6. S = \" abacab\" , suspicious subsegments: [ 1, 1] , [ 1, 2] , [ 1, 3] , [ 1, 4] , [ 1, 5] , [ 1, 6] , [ 3, 3] , [ 5, 5] and [ 5, 6] , total 9 . 7. S = \" abacaba\" , suspicious subsegments: [ 1, 1] , [ 1, 2] , [ 1, 3] , [ 1, 4] , [ 1, 5] , [ 1, 6] , [ 1, 7] , [ 3, 3] , [ 5, 5] , [ 5, 6] , [ 5, 7] and [ 7, 7] , total 12 . In the second example, after all requests S = \" aaba\" , W = [ 2, 0, 2, 0] . 1. S = \" a\" , suspicious subsegments: [ 1, 1] ( suspiciousness 2 ) , totaling 2 . 2. S = \" aa\" , suspicious subsegments: [ 1, 1] ( 2 ) , [ 1, 2] ( 0 ) , [ 2, 2] ( 0 ) , totaling 2 . 3. S = \" aab\" , suspicious subsegments: [ 1, 1] ( 2 ) , [ 1, 2] ( 0 ) , [ 1, 3] ( 0 ) , [ 2, 2] ( 0 ) , totaling 2 . 4. S = \" aaba\" , suspicious subsegments: [ 1, 1] ( 2 ) , [ 1, 2] ( 0 ) , [ 1, 3] ( 0 ) , [ 1, 4] ( 0 ) , [ 2, 2] ( 0 ) , [ 4, 4] ( 0 ) , totaling 2 . In the third example, from the condition after all requests S = \" abcde\" , W = [ 7, 2, 10, 1, 7] . 1. S = \" a\" , suspicious subsegments: [ 1, 1] ( 7 ) , totaling 7 . 2. S = \" ab\" , suspicious subsegments: [ 1, 1] ( 7 ) , [ 1, 2] ( 2 ) , totaling 9 . 3. S = \" abc\" , suspicious subsegments: [ 1, 1] ( 7 ) , [ 1, 2] ( 2 ) , [ 1, 3] ( 2 ) , totaling 11 . 4. S = \" abcd\" , suspicious subsegments: [ 1, 1] ( 7 ) , [ 1, 2] ( 2 ) , [ 1, 3] ( 2 ) , [ 1, 4] ( 1 ) , totaling 12 . 5. S = \" abcde\" , suspicious subsegments: [ 1, 1] ( 7 ) , [ 1, 2] ( 2 ) , [ 1, 3] ( 2 ) , [ 1, 4] ( 1 ) , [ 1, 5] ( 1 ) , totaling 13 .",
    "topics": [
      "data structures",
      "strings"
    ],
    "id": "1286E"
  },
  {
    "title": "LCC",
    "url": "https://codeforces.com/problemset/problem/1286/D",
    "history": "An infinitely long Line Chillland Collider ( LCC) was built in Chillland. There are n pipes with coordinates x_ i that are connected to LCC. When the experiment starts at time 0, i - th proton flies from the i - th pipe with speed v_ i . It flies to the right with probability p_ i and flies to the left with probability ( 1 - p_ i) . The duration of the experiment is determined as the time of the first collision of any two protons. In case there is no collision, the duration of the experiment is considered to be zero. Find the expected value of the duration of the experiment. Illustration for the first example",
    "input": "The first line of input contains one integer n \u2014 the number of pipes ( 1 \u2264 n \u2264 10^ 5 ) . Each of the following n lines contains three integers x_ i , v_ i , p_ i \u2014 the coordinate of the i - th pipe, the speed of the i - th proton and the probability that the i - th proton flies to the right in percentage points ( - 10^ 9 \u2264 x_ i \u2264 10^ 9, 1 \u2264 v \u2264 10^ 6, 0 \u2264 p_ i \u2264 100 ) . It is guaranteed that all x_ i are distinct and sorted in increasing order.",
    "output": "It' s possible to prove that the answer can always be represented as a fraction P/ Q , where P is an integer and Q is a natural number not divisible by 998 244 353 . In this case, print P \u00b7 Q^ - 1 modulo 998 244 353 .",
    "note": "",
    "topics": [
      "data structures",
      "math",
      "matrices",
      "probabilities"
    ],
    "id": "1286D"
  },
  {
    "title": "Numbers on Tree",
    "url": "https://codeforces.com/problemset/problem/1286/B",
    "history": "Evlampiy was gifted a rooted tree. The vertices of the tree are numbered from 1 to n . Each of its vertices also has an integer a_ i written on it. For each vertex i , Evlampiy calculated c_ i \u2014 the number of vertices j in the subtree of vertex i , such that a_ j < a_ i . Illustration for the second example, the first integer is a_ i and the integer in parentheses is c_ i After the new year, Evlampiy could not remember what his gift was! He remembers the tree and the values of c_ i , but he completely forgot which integers a_ i were written on the vertices. Help him to restore initial integers!",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 2000) \u2014 the number of vertices in the tree. The next n lines contain descriptions of vertices: the i - th line contains two integers p_ i and c_ i ( 0 \u2264 p_ i \u2264 n ; 0 \u2264 c_ i \u2264 n- 1 ) , where p_ i is the parent of vertex i or 0 if vertex i is root, and c_ i is the number of vertices j in the subtree of vertex i , such that a_ j < a_ i . It is guaranteed that the values of p_ i describe a rooted tree with n vertices.",
    "output": "If a solution exists, in the first line print \" YES\" , and in the second line output n integers a_ i ( 1 \u2264 a_ i \u226410^ 9) . If there are several solutions, output any of them. One can prove that if there is a solution, then there is also a solution in which all a_ i are between 1 and 10^ 9 . If there are no solutions, print \" NO\" .",
    "note": "",
    "topics": [
      "constructive algorithms",
      "data structures",
      "dfs and similar",
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "1286B"
  },
  {
    "title": "Delete a Segment",
    "url": "https://codeforces.com/problemset/problem/1285/E",
    "history": "There are n segments on a Ox axis [ l_ 1, r_ 1] , [ l_ 2, r_ 2] , . . . , [ l_ n, r_ n] . Segment [ l, r] covers all points from l to r inclusive, so all x such that l \u2264 x \u2264 r . Segments can be placed arbitrarily \u2014 be inside each other, coincide and so on. Segments can degenerate into points, that is l_ i= r_ i is possible. Union of the set of segments is such a set of segments which covers exactly the same set of points as the original set. For example: if n= 3 and there are segments [ 3, 6] , [ 100, 100] , [ 5, 8] then their union is 2 segments: [ 3, 8] and [ 100, 100] ; if n= 5 and there are segments [ 1, 2] , [ 2, 3] , [ 4, 5] , [ 4, 6] , [ 6, 6] then their union is 2 segments: [ 1, 3] and [ 4, 6] . Obviously, a union is a set of pairwise non- intersecting segments. You are asked to erase exactly one segment of the given n so that the number of segments in the union of the rest n- 1 segments is maximum possible. For example, if n= 4 and there are segments [ 1, 4] , [ 2, 3] , [ 3, 6] , [ 5, 7] , then: erasing the first segment will lead to [ 2, 3] , [ 3, 6] , [ 5, 7] remaining, which have 1 segment in their union; erasing the second segment will lead to [ 1, 4] , [ 3, 6] , [ 5, 7] remaining, which have 1 segment in their union; erasing the third segment will lead to [ 1, 4] , [ 2, 3] , [ 5, 7] remaining, which have 2 segments in their union; erasing the fourth segment will lead to [ 1, 4] , [ 2, 3] , [ 3, 6] remaining, which have 1 segment in their union. Thus, you are required to erase the third segment to get answer 2 . Write a program that will find the maximum number of segments in the union of n- 1 segments if you erase any of the given n segments. Note that if there are multiple equal segments in the given set, then you can erase only one of them anyway. So the set after erasing will have exactly n- 1 segments.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the test. Then the descriptions of t test cases follow. The first of each test case contains a single integer n ( 2 \u2264 n \u2264 2\u00b710^ 5 ) \u2014 the number of segments in the given set. Then n lines follow, each contains a description of a segment \u2014 a pair of integers l_ i , r_ i ( - 10^ 9 \u2264 l_ i \u2264 r_ i \u2264 10^ 9 ) , where l_ i and r_ i are the coordinates of the left and right borders of the i - th segment, respectively. The segments are given in an arbitrary order. It is guaranteed that the sum of n over all test cases does not exceed 2\u00b710^ 5 .",
    "output": "Print t integers \u2014 the answers to the t given test cases in the order of input. The answer is the maximum number of segments in the union of n- 1 segments if you erase any of the given n segments.",
    "note": "",
    "topics": [
      "brute force",
      "constructive algorithms",
      "data structures",
      "dp",
      "graphs",
      "sortings",
      "trees",
      "two pointers"
    ],
    "id": "1285E"
  },
  {
    "title": "New Year and Social Network",
    "url": "https://codeforces.com/problemset/problem/1284/F",
    "history": "Donghyun' s new social network service ( SNS) contains n users numbered 1, 2, . . . , n . Internally, their network is a tree graph, so there are n- 1 direct connections between each user. Each user can reach every other users by using some sequence of direct connections. From now on, we will denote this primary network as T_ 1 . To prevent a possible server breakdown, Donghyun created a backup network T_ 2 , which also connects the same n users via a tree graph. If a system breaks down, exactly one edge e \u2208 T_ 1 becomes unusable. In this case, Donghyun will protect the edge e by picking another edge f \u2208 T_ 2 , and add it to the existing network. This new edge should make the network be connected again. Donghyun wants to assign a replacement edge f \u2208 T_ 2 for as many edges e \u2208 T_ 1 as possible. However, since the backup network T_ 2 is fragile, f \u2208 T_ 2 can be assigned as the replacement edge for at most one edge in T_ 1 . With this restriction, Donghyun wants to protect as many edges in T_ 1 as possible. Formally, let E( T) be an edge set of the tree T . We consider a bipartite graph with two parts E( T_ 1) and E( T_ 2) . For e \u2208 E( T_ 1) , f \u2208 E( T_ 2) , there is an edge connecting { e, f} if and only if graph T_ 1 - { e} + { f} is a tree. You should find a maximum matching in this bipartite graph.",
    "input": "The first line contains an integer n ( 2 \u2264 n \u2264 250 000 ) , the number of users. In the next n- 1 lines, two integers a_ i , b_ i ( 1 \u2264 a_ i, b_ i \u2264 n ) are given. Those two numbers denote the indices of the vertices connected by the corresponding edge in T_ 1 . In the next n- 1 lines, two integers c_ i , d_ i ( 1 \u2264 c_ i, d_ i \u2264 n ) are given. Those two numbers denote the indices of the vertices connected by the corresponding edge in T_ 2 . It is guaranteed that both edge sets form a tree of size n .",
    "output": "In the first line, print the number m ( 0 \u2264 m < n ) , the maximum number of edges that can be protected. In the next m lines, print four integers a_ i, b_ i, c_ i, d_ i . Those four numbers denote that the edge ( a_ i, b_ i) in T_ 1 is will be replaced with an edge ( c_ i, d_ i) in T_ 2 . All printed edges should belong to their respective network, and they should link to distinct edges in their respective network. If one removes an edge ( a_ i, b_ i) from T_ 1 and adds edge ( c_ i, d_ i) from T_ 2 , the network should remain connected. The order of printing the edges or the order of vertices in each edge does not matter. If there are several solutions, you can print any.",
    "note": "",
    "topics": [
      "data structures",
      "graph matchings",
      "graphs",
      "math",
      "trees"
    ],
    "id": "1284F"
  },
  {
    "title": "New Year and Conference",
    "url": "https://codeforces.com/problemset/problem/1284/D",
    "history": "Filled with optimism, Hyunuk will host a conference about how great this new year will be! The conference will have n lectures. Hyunuk has two candidate venues a and b . For each of the n lectures, the speaker specified two time intervals [ sa_ i, ea_ i] ( sa_ i \u2264 ea_ i ) and [ sb_ i, eb_ i] ( sb_ i \u2264 eb_ i ) . If the conference is situated in venue a , the lecture will be held from sa_ i to ea_ i , and if the conference is situated in venue b , the lecture will be held from sb_ i to eb_ i . Hyunuk will choose one of these venues and all lectures will be held at that venue. Two lectures are said to overlap if they share any point in time in common. Formally, a lecture held in interval [ x, y] overlaps with a lecture held in interval [ u, v] if and only if max( x, u) \u2264min( y, v) . We say that a participant can attend a subset s of the lectures if the lectures in s do not pairwise overlap ( i. e. no two lectures overlap) . Note that the possibility of attending may depend on whether Hyunuk selected venue a or venue b to hold the conference. A subset of lectures s is said to be venue- sensitive if, for one of the venues, the participant can attend s , but for the other venue, the participant cannot attend s . A venue- sensitive set is problematic for a participant who is interested in attending the lectures in s because the participant cannot be sure whether the lecture times will overlap. Hyunuk will be happy if and only if there are no venue- sensitive sets. Determine whether Hyunuk will be happy.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 100 000 ) , the number of lectures held in the conference. Each of the next n lines contains four integers sa_ i , ea_ i , sb_ i , eb_ i ( 1 \u2264 sa_ i, ea_ i, sb_ i, eb_ i \u2264 10^ 9 , sa_ i \u2264 ea_ i, sb_ i \u2264 eb_ i ) .",
    "output": "Print \" YES\" if Hyunuk will be happy. Print \" NO\" otherwise. You can print each letter in any case ( upper or lower) .",
    "note": "In second example, lecture set { 1, 3} is venue- sensitive. Because participant can' t attend this lectures in venue a , but can attend in venue b . In first and third example, venue- sensitive set does not exist.",
    "topics": [
      "binary search",
      "data structures",
      "hashing",
      "sortings"
    ],
    "id": "1284D"
  },
  {
    "title": "New Year and Ascent Sequence",
    "url": "https://codeforces.com/problemset/problem/1284/B",
    "history": "A sequence a = [ a_ 1, a_ 2, . . . , a_ l] of length l has an ascent if there exists a pair of indices ( i, j) such that 1 \u2264 i < j \u2264 l and a_ i < a_ j . For example, the sequence [ 0, 2, 0, 2, 0] has an ascent because of the pair ( 1, 4) , but the sequence [ 4, 3, 3, 3, 1] doesn' t have an ascent. Let' s call a concatenation of sequences p and q the sequence that is obtained by writing down sequences p and q one right after another without changing the order. For example, the concatenation of the [ 0, 2, 0, 2, 0] and [ 4, 3, 3, 3, 1] is the sequence [ 0, 2, 0, 2, 0, 4, 3, 3, 3, 1] . The concatenation of sequences p and q is denoted as p+ q . Gyeonggeun thinks that sequences with ascents bring luck. Therefore, he wants to make many such sequences for the new year. Gyeonggeun has n sequences s_ 1, s_ 2, . . . , s_ n which may have different lengths. Gyeonggeun will consider all n^ 2 pairs of sequences s_ x and s_ y ( 1 \u2264 x, y \u2264 n ) , and will check if its concatenation s_ x + s_ y has an ascent. Note that he may select the same sequence twice, and the order of selection matters. Please count the number of pairs ( x, y ) of sequences s_ 1, s_ 2, . . . , s_ n whose concatenation s_ x + s_ y contains an ascent.",
    "input": "The first line contains the number n ( 1 \u2264 n \u2264 100 000 ) denoting the number of sequences. The next n lines contain the number l_ i ( 1 \u2264 l_ i ) denoting the length of s_ i , followed by l_ i integers s_ i, 1, s_ i, 2, . . . , s_ i, l_ i ( 0 \u2264 s_ i, j\u2264 10^ 6 ) denoting the sequence s_ i . It is guaranteed that the sum of all l_ i does not exceed 100 000 .",
    "output": "Print a single integer, the number of pairs of sequences whose concatenation has an ascent.",
    "note": "For the first example, the following 9 arrays have an ascent: [ 1, 2] , [ 1, 2] , [ 1, 3] , [ 1, 3] , [ 1, 4] , [ 1, 4] , [ 2, 3] , [ 2, 4] , [ 3, 4] . Arrays with the same contents are counted as their occurences.",
    "topics": [
      "binary search",
      "combinatorics",
      "data structures",
      "dp",
      "implementation",
      "sortings"
    ],
    "id": "1284B"
  },
  {
    "title": "Friends and Gifts",
    "url": "https://codeforces.com/problemset/problem/1283/C",
    "history": "There are n friends who want to give gifts for the New Year to each other. Each friend should give exactly one gift and receive exactly one gift. The friend cannot give the gift to himself. For each friend the value f_ i is known: it is either f_ i = 0 if the i - th friend doesn' t know whom he wants to give the gift to or 1 \u2264 f_ i \u2264 n if the i - th friend wants to give the gift to the friend f_ i . You want to fill in the unknown values ( f_ i = 0 ) in such a way that each friend gives exactly one gift and receives exactly one gift and there is no friend who gives the gift to himself. It is guaranteed that the initial information isn' t contradictory. If there are several answers, you can print any.",
    "input": "The first line of the input contains one integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of friends. The second line of the input contains n integers f_ 1, f_ 2, . . . , f_ n ( 0 \u2264 f_ i \u2264 n , f_ i i , all f_ i 0 are distinct) , where f_ i is the either f_ i = 0 if the i - th friend doesn' t know whom he wants to give the gift to or 1 \u2264 f_ i \u2264 n if the i - th friend wants to give the gift to the friend f_ i . It is also guaranteed that there is at least two values f_ i = 0 .",
    "output": "Print n integers nf_ 1, nf_ 2, . . . , nf_ n , where nf_ i should be equal to f_ i if f_ i 0 or the number of friend whom the i - th friend wants to give the gift to. All values nf_ i should be distinct, nf_ i cannot be equal to i . Each friend gives exactly one gift and receives exactly one gift and there is no friend who gives the gift to himself. If there are several answers, you can print any.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "data structures",
      "math"
    ],
    "id": "1283C"
  },
  {
    "title": "The Cake Is a Lie",
    "url": "https://codeforces.com/problemset/problem/1282/E",
    "history": "We are committed to the well being of all participants. Therefore, instead of the problem, we suggest you enjoy a piece of cake. Uh oh. Somebody cut the cake. We told them to wait for you, but they did it anyway. There is still some left, though, if you hurry back. Of course, before you taste the cake, you thought about how the cake was cut. It is known that the cake was originally a regular n - sided polygon, each vertex of which had a unique number from 1 to n . The vertices were numbered in random order. Each piece of the cake is a triangle. The cake was cut into n - 2 pieces as follows: each time one cut was made with a knife ( from one vertex to another) such that exactly one triangular piece was separated from the current cake, and the rest continued to be a convex polygon. In other words, each time three consecutive vertices of the polygon were selected and the corresponding triangle was cut off. A possible process of cutting the cake is presented in the picture below. Example of 6- sided cake slicing. You are given a set of n- 2 triangular pieces in random order. The vertices of each piece are given in random order \u2014 clockwise or counterclockwise. Each piece is defined by three numbers \u2014 the numbers of the corresponding n - sided cake vertices. For example, for the situation in the picture above, you could be given a set of pieces: [ 3, 6, 5] , [ 5, 2, 4] , [ 5, 4, 6] , [ 6, 3, 1] . You are interested in two questions. What was the enumeration of the n - sided cake vertices? In what order were the pieces cut? Formally, you have to find two permutations p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) and q_ 1, q_ 2, . . . , q_ n - 2 ( 1 \u2264 q_ i \u2264 n - 2 ) such that if the cake vertices are numbered with the numbers p_ 1, p_ 2, . . . , p_ n in order clockwise or counterclockwise, then when cutting pieces of the cake in the order q_ 1, q_ 2, . . . , q_ n - 2 always cuts off a triangular piece so that the remaining part forms one convex polygon. For example, in the picture above the answer permutations could be: p= [ 2, 4, 6, 1, 3, 5] ( or any of its cyclic shifts, or its reversal and after that any cyclic shift) and q= [ 2, 4, 1, 3] . Write a program that, based on the given triangular pieces, finds any suitable permutations p and q .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Then there are t independent sets of input data. The first line of each set consists of a single integer n ( 3 \u2264 n \u2264 10^ 5 ) \u2014 the number of vertices in the cake. The following n - 2 lines describe the numbers of the pieces vertices: each line consists of three different integers a, b, c ( 1 \u2264 a, b, c \u2264 n ) \u2014 the numbers of the pieces vertices of cake given in random order. The pieces are given in random order. It is guaranteed that the answer to each of the tests exists. It is also guaranteed that the sum of n for all test cases does not exceed 10^ 5 .",
    "output": "Print 2t lines \u2014 answers to given t test cases in the order in which they are written in the input. Each answer should consist of 2 lines. In the first line of an answer on a test case print n distinct numbers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) \u2014 the numbers of the cake vertices in clockwise or counterclockwise order. In the second line of an answer on a test case print n - 2 distinct numbers q_ 1, q_ 2, . . . , q_ n - 2 ( 1 \u2264 q_ i \u2264 n - 2 ) \u2014 the order of cutting pieces of the cake. The number of a piece of the cake corresponds to its number in the input. If there are several answers, print any. It is guaranteed that the answer to each of the tests exists.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "data structures",
      "dfs and similar",
      "graphs"
    ],
    "id": "1282E"
  },
  {
    "title": "Stack of Presents",
    "url": "https://codeforces.com/problemset/problem/1279/C",
    "history": "Santa has to send presents to the kids. He has a large stack of n presents, numbered from 1 to n ; the topmost present has number a_ 1 , the next present is a_ 2 , and so on; the bottom present has number a_ n . All numbers are distinct. Santa has a list of m distinct presents he has to send: b_ 1 , b_ 2 , . . . , b_ m . He will send them in the order they appear in the list. To send a present, Santa has to find it in the stack by removing all presents above it, taking this present and returning all removed presents on top of the stack. So, if there are k presents above the present Santa wants to send, it takes him 2k + 1 seconds to do it. Fortunately, Santa can speed the whole process up \u2014 when he returns the presents to the stack, he may reorder them as he wishes ( only those which were above the present he wanted to take; the presents below cannot be affected in any way) . What is the minimum time required to send all of the presents, provided that Santa knows the whole list of presents he has to send and reorders the presents optimally? Santa cannot change the order of presents or interact with the stack of presents in any other way. Your program has to answer t different test cases.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. Then the test cases follow, each represented by three lines. The first line contains two integers n and m ( 1 \u2264 m \u2264 n \u2264 10^ 5 ) \u2014 the number of presents in the stack and the number of presents Santa wants to send, respectively. The second line contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 1 \u2264 a_ i \u2264 n , all a_ i are unique) \u2014 the order of presents in the stack. The third line contains m integers b_ 1 , b_ 2 , . . . , b_ m ( 1 \u2264 b_ i \u2264 n , all b_ i are unique) \u2014 the ordered list of presents Santa has to send. The sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case print one integer \u2014 the minimum number of seconds which Santa has to spend sending presents, if he reorders the presents optimally each time he returns them into the stack.",
    "note": "",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "1279C"
  },
  {
    "title": "Segment Tree",
    "url": "https://codeforces.com/problemset/problem/1278/D",
    "history": "As the name of the task implies, you are asked to do some work with segments and trees. Recall that a tree is a connected undirected graph such that there is exactly one simple path between every pair of its vertices. You are given n segments [ l_ 1, r_ 1] , [ l_ 2, r_ 2] , . . . , [ l_ n, r_ n] , l_ i < r_ i for every i . It is guaranteed that all segments' endpoints are integers, and all endpoints are unique \u2014 there is no pair of segments such that they start in the same point, end in the same point or one starts in the same point the other one ends. Let' s generate a graph with n vertices from these segments. Vertices v and u are connected by an edge if and only if segments [ l_ v, r_ v] and [ l_ u, r_ u] intersect and neither of it lies fully inside the other one. For example, pairs ( [ 1, 3] , [ 2, 4] ) and ( [ 5, 10] , [ 3, 7] ) will induce the edges but pairs ( [ 1, 2] , [ 3, 4] ) and ( [ 5, 7] , [ 3, 10] ) will not. Determine if the resulting graph is a tree or not.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 5 \u00b7 10^ 5 ) \u2014 the number of segments. The i - th of the next n lines contain the description of the i - th segment \u2014 two integers l_ i and r_ i ( 1 \u2264 l_ i < r_ i \u2264 2n ) . It is guaranteed that all segments borders are pairwise distinct.",
    "output": "Print \" YES\" if the resulting graph is a tree and \" NO\" otherwise.",
    "note": "The graph corresponding to the first example: The graph corresponding to the second example: The graph corresponding to the third example:",
    "topics": [
      "data structures",
      "dsu",
      "graphs",
      "trees"
    ],
    "id": "1278D"
  },
  {
    "title": "Berry Jam",
    "url": "https://codeforces.com/problemset/problem/1278/C",
    "history": "Karlsson has recently discovered a huge stock of berry jam jars in the basement of the house. More specifically, there were 2n jars of strawberry and blueberry jam. All the 2n jars are arranged in a row. The stairs to the basement are exactly in the middle of that row. So when Karlsson enters the basement, he sees exactly n jars to his left and n jars to his right. For example, the basement might look like this: Being the starightforward man he is, he immediately starts eating the jam. In one minute he chooses to empty either the first non- empty jar to his left or the first non- empty jar to his right. Finally, Karlsson decided that at the end the amount of full strawberry and blueberry jam jars should become the same. For example, this might be the result: He has eaten 1 jar to his left and then 5 jars to his right. There remained exactly 3 full jars of both strawberry and blueberry jam. Jars are numbered from 1 to 2n from left to right, so Karlsson initially stands between jars n and n+ 1 . What is the minimum number of jars Karlsson is required to empty so that an equal number of full strawberry and blueberry jam jars is left? Your program should answer t independent test cases.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) . The second line of each test case contains 2n integers a_ 1, a_ 2, . . . , a_ 2n ( 1 \u2264 a_ i \u2264 2 ) \u2014 a_ i= 1 means that the i - th jar from the left is a strawberry jam jar and a_ i= 2 means that it is a blueberry jam jar. It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case print the answer to it \u2014 the minimum number of jars Karlsson is required to empty so that an equal number of full strawberry and blueberry jam jars is left.",
    "note": "The picture from the statement describes the first test case. In the second test case the number of strawberry and blueberry jam jars is already equal. In the third test case Karlsson is required to eat all 6 jars so that there remain 0 jars of both jams. In the fourth test case Karlsson can empty either the second and the third jars or the third and the fourth one. The both scenarios will leave 1 jar of both jams.",
    "topics": [
      "data structures",
      "dp",
      "greedy",
      "implementation"
    ],
    "id": "1278C"
  },
  {
    "title": "Let's Play the Words?",
    "url": "https://codeforces.com/problemset/problem/1277/D",
    "history": "Polycarp has n different binary words. A word called binary if it contains only characters ' 0' and ' 1' . For example, these words are binary: \" 0001\" , \" 11\" , \" 0\" and \" 0011100\" . Polycarp wants to offer his set of n binary words to play a game \" words\" . In this game, players name words and each next word ( starting from the second) must start with the last character of the previous word. The first word can be any. For example, these sequence of words can be named during the game: \" 0101\" , \" 1\" , \" 10\" , \" 00\" , \" 00001\" . Word reversal is the operation of reversing the order of the characters. For example, the word \" 0111\" after the reversal becomes \" 1110\" , the word \" 11010\" after the reversal becomes \" 01011\" . Probably, Polycarp has such a set of words that there is no way to put them in the order correspondent to the game rules. In this situation, he wants to reverse some words from his set so that: the final set of n words still contains different words ( i. e. all words are unique) ; there is a way to put all words of the final set of words in the order so that the final sequence of n words is consistent with the game rules. Polycarp wants to reverse minimal number of words. Please, help him.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the input. Then t test cases follow. The first line of a test case contains one integer n ( 1 \u2264 n \u2264 2\u00b710^ 5 ) \u2014 the number of words in the Polycarp' s set. Next n lines contain these words. All of n words aren' t empty and contains only characters ' 0' and ' 1' . The sum of word lengths doesn' t exceed 4\u00b710^ 6 . All words are different. Guaranteed, that the sum of n for all test cases in the input doesn' t exceed 2\u00b710^ 5 . Also, guaranteed that the sum of word lengths for all test cases in the input doesn' t exceed 4\u00b710^ 6 .",
    "output": "Print answer for all of t test cases in the order they appear. If there is no answer for the test case, print - 1. Otherwise, the first line of the output should contain k ( 0 \u2264 k \u2264 n ) \u2014 the minimal number of words in the set which should be reversed. The second line of the output should contain k distinct integers \u2014 the indexes of the words in the set which should be reversed. Words are numerated from 1 to n in the order they appear. If k= 0 you can skip this line ( or you can print an empty line) . If there are many answers you can print any of them.",
    "note": "",
    "topics": [
      "data structures",
      "hashing",
      "implementation",
      "math"
    ],
    "id": "1277D"
  },
  {
    "title": "Beautiful Rectangle",
    "url": "https://codeforces.com/problemset/problem/1276/C",
    "history": "You are given n integers. You need to choose a subset and put the chosen numbers in a beautiful rectangle ( rectangular matrix) . Each chosen number should occupy one of its rectangle cells, each cell must be filled with exactly one chosen number. Some of the n numbers may not be chosen. A rectangle ( rectangular matrix) is called beautiful if in each row and in each column all values are different. What is the largest ( by the total number of cells) beautiful rectangle you can construct? Print the rectangle itself.",
    "input": "The first line contains n ( 1 \u2264 n \u2264 4\u00b710^ 5 ) . The second line contains n integers ( 1 \u2264 a_ i \u2264 10^ 9 ) .",
    "output": "In the first line print x ( 1 \u2264 x \u2264 n ) \u2014 the total number of cells of the required maximum beautiful rectangle. In the second line print p and q ( p \u00b7 q= x ) : its sizes. In the next p lines print the required rectangle itself. If there are several answers, print any.",
    "note": "",
    "topics": [
      "brute force",
      "combinatorics",
      "constructive algorithms",
      "data structures",
      "greedy",
      "math"
    ],
    "id": "1276C"
  },
  {
    "title": "Portals",
    "url": "https://codeforces.com/problemset/problem/1271/D",
    "history": "You play a strategic video game ( yeah, we ran out of good problem legends) . In this game you control a large army, and your goal is to conquer n castles of your opponent. Let' s describe the game process in detail. Initially you control an army of k warriors. Your enemy controls n castles; to conquer the i - th castle, you need at least a_ i warriors ( you are so good at this game that you don' t lose any warriors while taking over a castle, so your army stays the same after the fight) . After you take control over a castle, you recruit new warriors into your army \u2014 formally, after you capture the i - th castle, b_ i warriors join your army. Furthermore, after capturing a castle ( or later) you can defend it: if you leave at least one warrior in a castle, this castle is considered defended. Each castle has an importance parameter c_ i , and your total score is the sum of importance values over all defended castles. There are two ways to defend a castle: if you are currently in the castle i , you may leave one warrior to defend castle i ; there are m one- way portals connecting the castles. Each portal is characterised by two numbers of castles u and v ( for each portal holds u > v ) . A portal can be used as follows: if you are currently in the castle u , you may send one warrior to defend castle v . Obviously, when you order your warrior to defend some castle, he leaves your army. You capture the castles in fixed order: you have to capture the first one, then the second one, and so on. After you capture the castle i ( but only before capturing castle i + 1 ) you may recruit new warriors from castle i , leave a warrior to defend castle i , and use any number of portals leading from castle i to other castles having smaller numbers. As soon as you capture the next castle, these actions for castle i won' t be available to you. If, during some moment in the game, you don' t have enough warriors to capture the next castle, you lose. Your goal is to maximize the sum of importance values over all defended castles ( note that you may hire new warriors in the last castle, defend it and use portals leading from it even after you capture it \u2014 your score will be calculated afterwards) . Can you determine an optimal strategy of capturing and defending the castles?",
    "input": "The first line contains three integers n , m and k ( 1 \u2264 n \u2264 5000 , 0 \u2264 m \u2264min( n( n - 1) / 2, 3 \u00b7 10^ 5) , 0 \u2264 k \u2264 5000 ) \u2014 the number of castles, the number of portals and initial size of your army, respectively. Then n lines follow. The i - th line describes the i - th castle with three integers a_ i , b_ i and c_ i ( 0 \u2264 a_ i, b_ i, c_ i \u2264 5000 ) \u2014 the number of warriors required to capture the i - th castle, the number of warriors available for hire in this castle and its importance value. Then m lines follow. The i - th line describes the i - th portal with two integers u_ i and v_ i ( 1 \u2264 v_ i < u_ i \u2264 n ) , meaning that the portal leads from the castle u_ i to the castle v_ i . There are no two same portals listed. It is guaranteed that the size of your army won' t exceed 5000 under any circumstances ( i. e. k + \u2211_ i = 1^ n b_ i \u2264 5000 ) .",
    "output": "If it' s impossible to capture all the castles, print one integer - 1 . Otherwise, print one integer equal to the maximum sum of importance values of defended castles.",
    "note": "The best course of action in the first example is as follows: capture the first castle; hire warriors from the first castle, your army has 11 warriors now; capture the second castle; capture the third castle; hire warriors from the third castle, your army has 13 warriors now; capture the fourth castle; leave one warrior to protect the fourth castle, your army has 12 warriors now. This course of action ( and several other ones) gives 5 as your total score. The best course of action in the second example is as follows: capture the first castle; hire warriors from the first castle, your army has 11 warriors now; capture the second castle; capture the third castle; hire warriors from the third castle, your army has 13 warriors now; capture the fourth castle; leave one warrior to protect the fourth castle, your army has 12 warriors now; send one warrior to protect the first castle through the third portal, your army has 11 warriors now. This course of action ( and several other ones) gives 22 as your total score. In the third example it' s impossible to capture the last castle: you need 14 warriors to do so, but you can accumulate no more than 13 without capturing it.",
    "topics": [
      "data structures",
      "dp",
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "1271D"
  },
  {
    "title": "Number of Components",
    "url": "https://codeforces.com/problemset/problem/1270/H",
    "history": "Suppose that we have an array of n distinct numbers a_ 1, a_ 2, . . . , a_ n . Let' s build a graph on n vertices as follows: for every pair of vertices i < j let' s connect i and j with an edge, if a_ i < a_ j . Let' s define weight of the array to be the number of connected components in this graph. For example, weight of array [ 1, 4, 2] is 1 , weight of array [ 5, 4, 3] is 3 . You have to perform q queries of the following form \u2014 change the value at some position of the array. After each operation, output the weight of the array. Updates are not independent ( the change stays for the future) .",
    "input": "The first line contains two integers n and q ( 1 \u2264 n, q \u2264 5 \u00b7 10^ 5 ) \u2014 the size of the array and the number of queries. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 6 ) \u2014 the initial array. Each of the next q lines contains two integers pos and x ( 1 \u2264 pos \u2264 n , 1 \u2264 x \u2264 10^ 6, x a_ pos ) . It means that you have to make a_ pos= x . It' s guaranteed that at every moment of time, all elements of the array are different.",
    "output": "After each query, output the weight of the array.",
    "note": "After the first query array looks like [ 25, 40, 30, 20, 10] , the weight is equal to 3 . After the second query array looks like [ 25, 40, 45, 20, 10] , the weight is still equal to 3 . After the third query array looks like [ 48, 40, 45, 20, 10] , the weight is equal to 4 .",
    "topics": [
      "data structures"
    ],
    "id": "1270H"
  },
  {
    "title": "K Integers",
    "url": "https://codeforces.com/problemset/problem/1268/C",
    "history": "You are given a permutation p_ 1, p_ 2, . . . , p_ n . In one move you can swap two adjacent values. You want to perform a minimum number of moves, such that in the end there will exist a subsegment 1, 2, . . . , k , in other words in the end there should be an integer i , 1 \u2264 i \u2264 n- k+ 1 such that p_ i = 1, p_ i+ 1 = 2, . . . , p_ i+ k- 1= k . Let f( k) be the minimum number of moves that you need to make a subsegment with values 1, 2, . . . , k appear in the permutation. You need to find f( 1) , f( 2) , . . . , f( n) .",
    "input": "The first line of input contains one integer n ( 1 \u2264 n \u2264 200 000 ) : the number of elements in the permutation. The next line of input contains n integers p_ 1, p_ 2, . . . , p_ n : given permutation ( 1 \u2264 p_ i \u2264 n ) .",
    "output": "Print n integers, the minimum number of moves that you need to make a subsegment with values 1, 2, . . . , k appear in the permutation, for k= 1, 2, . . . , n .",
    "note": "",
    "topics": [
      "binary search",
      "data structures"
    ],
    "id": "1268C"
  },
  {
    "title": "Spaceship Solitaire",
    "url": "https://codeforces.com/problemset/problem/1266/E",
    "history": "Bob is playing a game of Spaceship Solitaire. The goal of this game is to build a spaceship. In order to do this, he first needs to accumulate enough resources for the construction. There are n types of resources, numbered 1 through n . Bob needs at least a_ i pieces of the i - th resource to build the spaceship. The number a_ i is called the goal for resource i . Each resource takes 1 turn to produce and in each turn only one resource can be produced. However, there are certain milestones that speed up production. Every milestone is a triple ( s_ j, t_ j, u_ j) , meaning that as soon as Bob has t_ j units of the resource s_ j , he receives one unit of the resource u_ j for free, without him needing to spend a turn. It is possible that getting this free resource allows Bob to claim reward for another milestone. This way, he can obtain a large number of resources in a single turn. The game is constructed in such a way that there are never two milestones that have the same s_ j and t_ j , that is, the award for reaching t_ j units of resource s_ j is at most one additional resource. A bonus is never awarded for 0 of any resource, neither for reaching the goal a_ i nor for going past the goal \u2014 formally, for every milestone 0 < t_ j < a_ s_ j . A bonus for reaching certain amount of a resource can be the resource itself, that is, s_ j = u_ j . Initially there are no milestones. You are to process q updates, each of which adds, removes or modifies a milestone. After every update, output the minimum number of turns needed to finish the game, that is, to accumulate at least a_ i of i - th resource for each i \u2208 [ 1, n] .",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of types of resources. The second line contains n space separated integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) , the i - th of which is the goal for the i - th resource. The third line contains a single integer q ( 1 \u2264 q \u2264 10^ 5 ) \u2014 the number of updates to the game milestones. Then q lines follow, the j - th of which contains three space separated integers s_ j , t_ j , u_ j ( 1 \u2264 s_ j \u2264 n , 1 \u2264 t_ j < a_ s_ j , 0 \u2264 u_ j \u2264 n ) . For each triple, perform the following actions: First, if there is already a milestone for obtaining t_ j units of resource s_ j , it is removed. If u_ j = 0 , no new milestone is added. If u_ j = \u0338 0 , add the following milestone: \" For reaching t_ j units of resource s_ j , gain one free piece of u_ j . \" Output the minimum number of turns needed to win the game.",
    "output": "Output q lines, each consisting of a single integer, the i - th represents the answer after the i - th update.",
    "note": "After the first update, the optimal strategy is as follows. First produce 2 once, which gives a free resource 1 . Then, produce 2 twice and 1 once, for a total of four turns. After the second update, the optimal strategy is to produce 2 three times \u2014 the first two times a single unit of resource 1 is also granted. After the third update, the game is won as follows. First produce 2 once. This gives a free unit of 1 . This gives additional bonus of resource 1 . After the first turn, the number of resources is thus [ 2, 1] . Next, produce resource 2 again, which gives another unit of 1 . After this, produce one more unit of 2 . The final count of resources is [ 3, 3] , and three turns are needed to reach this situation. Notice that we have more of resource 1 than its goal, which is of no use.",
    "topics": [
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "1266E"
  },
  {
    "title": "Decreasing Debts",
    "url": "https://codeforces.com/problemset/problem/1266/D",
    "history": "There are n people in this world, conveniently numbered 1 through n . They are using burles to buy goods and services. Occasionally, a person might not have enough currency to buy what he wants or needs, so he borrows money from someone else, with the idea that he will repay the loan later with interest. Let d( a, b) denote the debt of a towards b , or 0 if there is no such debt. Sometimes, this becomes very complex, as the person lending money can run into financial troubles before his debtor is able to repay his debt, and finds himself in the need of borrowing money. When this process runs for a long enough time, it might happen that there are so many debts that they can be consolidated. There are two ways this can be done: Let d( a, b) > 0 and d( c, d) > 0 such that a = \u0338 c or b = \u0338 d . We can decrease the d( a, b) and d( c, d) by z and increase d( c, b) and d( a, d) by z , where 0 < z \u2264min( d( a, b) , d( c, d) ) . Let d( a, a) > 0 . We can set d( a, a) to 0 . The total debt is defined as the sum of all debts: \u03a3_ d = \u2211_ a, b d( a, b) Your goal is to use the above rules in any order any number of times, to make the total debt as small as possible. Note that you don' t have to minimise the number of non- zero debts, only the total debt.",
    "input": "The first line contains two space separated integers n ( 1 \u2264 n \u2264 10^ 5 ) and m ( 0 \u2264 m \u2264 3\u00b7 10^ 5 ) , representing the number of people and the number of debts, respectively. m lines follow, each of which contains three space separated integers u_ i , v_ i ( 1 \u2264 u_ i, v_ i \u2264 n, u_ i = \u0338 v_ i ) , d_ i ( 1 \u2264 d_ i \u2264 10^ 9 ) , meaning that the person u_ i borrowed d_ i burles from person v_ i .",
    "output": "On the first line print an integer m' ( 0 \u2264 m' \u2264 3\u00b7 10^ 5 ) , representing the number of debts after the consolidation. It can be shown that an answer always exists with this additional constraint. After that print m' lines, i - th of which contains three space separated integers u_ i, v_ i, d_ i , meaning that the person u_ i owes the person v_ i exactly d_ i burles. The output must satisfy 1 \u2264 u_ i, v_ i \u2264 n , u_ i = \u0338 v_ i and 0 < d_ i \u2264 10^ 18 . For each pair i = \u0338 j , it should hold that u_ i = \u0338 u_ j or v_ i = \u0338 v_ j . In other words, each pair of people can be included at most once in the output.",
    "note": "In the first example the optimal sequence of operations can be the following: Perform an operation of the first type with a = 1 , b = 2 , c = 2 , d = 3 and z = 5 . The resulting debts are: d( 1, 2) = 5 , d( 2, 2) = 5 , d( 1, 3) = 5 , all other debts are 0 ; Perform an operation of the second type with a = 2 . The resulting debts are: d( 1, 2) = 5 , d( 1, 3) = 5 , all other debts are 0 . In the second example the optimal sequence of operations can be the following: Perform an operation of the first type with a = 1 , b = 2 , c = 3 , d = 1 and z = 10 . The resulting debts are: d( 3, 2) = 10 , d( 2, 3) = 15 , d( 1, 1) = 10 , all other debts are 0 ; Perform an operation of the first type with a = 2 , b = 3 , c = 3 , d = 2 and z = 10 . The resulting debts are: d( 2, 2) = 10 , d( 3, 3) = 10 , d( 2, 3) = 5 , d( 1, 1) = 10 , all other debts are 0 ; Perform an operation of the second type with a = 2 . The resulting debts are: d( 3, 3) = 10 , d( 2, 3) = 5 , d( 1, 1) = 10 , all other debts are 0 ; Perform an operation of the second type with a = 3 . The resulting debts are: d( 2, 3) = 5 , d( 1, 1) = 10 , all other debts are 0 ; Perform an operation of the second type with a = 1 . The resulting debts are: d( 2, 3) = 5 , all other debts are 0 .",
    "topics": [
      "constructive algorithms",
      "data structures",
      "graphs",
      "greedy",
      "implementation",
      "math",
      "two pointers"
    ],
    "id": "1266D"
  },
  {
    "title": "Beautiful Mirrors",
    "url": "https://codeforces.com/problemset/problem/1265/E",
    "history": "Creatnx has n mirrors, numbered from 1 to n . Every day, Creatnx asks exactly one mirror \" Am I beautiful? \" . The i - th mirror will tell Creatnx that he is beautiful with probability p_ i/ 100 for all 1 \u2264 i \u2264 n . Creatnx asks the mirrors one by one, starting from the 1 - st mirror. Every day, if he asks i - th mirror, there are two possibilities: The i - th mirror tells Creatnx that he is beautiful. In this case, if i = n Creatnx will stop and become happy, otherwise he will continue asking the i+ 1 - th mirror next day; In the other case, Creatnx will feel upset. The next day, Creatnx will start asking from the 1 - st mirror again. You need to calculate the expected number of days until Creatnx becomes happy. This number should be found by modulo 998244353 . Formally, let M = 998244353 . It can be shown that the answer can be expressed as an irreducible fraction p/ q , where p and q are integers and q \u2261\u03380 M . Output the integer equal to p \u00b7 q^ - 1 M . In other words, output such an integer x that 0 \u2264 x < M and x \u00b7 q \u2261 p M .",
    "input": "The first line contains one integer n ( 1\u2264 n\u2264 2\u00b7 10^ 5 ) \u2014 the number of mirrors. The second line contains n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 100 ) .",
    "output": "Print the answer modulo 998244353 in a single line.",
    "note": "In the first test, there is only one mirror and it tells, that Creatnx is beautiful with probability 1/ 2 . So, the expected number of days until Creatnx becomes happy is 2 .",
    "topics": [
      "data structures",
      "dp",
      "math",
      "probabilities"
    ],
    "id": "1265E"
  },
  {
    "title": "Beautiful Numbers",
    "url": "https://codeforces.com/problemset/problem/1265/B",
    "history": "You are given a permutation p= [ p_ 1, p_ 2, . . . , p_ n] of integers from 1 to n . Let' s call the number m ( 1 \u2264 m \u2264 n ) beautiful, if there exists two indices l, r ( 1 \u2264 l \u2264 r \u2264 n ) , such that the numbers [ p_ l, p_ l+ 1, . . . , p_ r] is a permutation of numbers 1, 2, . . . , m . For example, let p = [ 4, 5, 1, 3, 2, 6] . In this case, the numbers 1, 3, 5, 6 are beautiful and 2, 4 are not. It is because: if l = 3 and r = 3 we will have a permutation [ 1] for m = 1 ; if l = 3 and r = 5 we will have a permutation [ 1, 3, 2] for m = 3 ; if l = 1 and r = 5 we will have a permutation [ 4, 5, 1, 3, 2] for m = 5 ; if l = 1 and r = 6 we will have a permutation [ 4, 5, 1, 3, 2, 6] for m = 6 ; it is impossible to take some l and r , such that [ p_ l, p_ l+ 1, . . . , p_ r] is a permutation of numbers 1, 2, . . . , m for m = 2 and for m = 4 . You are given a permutation p= [ p_ 1, p_ 2, . . . , p_ n] . For all m ( 1 \u2264 m \u2264 n ) determine if it is a beautiful number or not.",
    "input": "The first line contains the only integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases in the input. The next lines contain the description of test cases. The first line of a test case contains a number n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the given permutation p . The next line contains n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n , all p_ i are different) \u2014 the given permutation p . It is guaranteed, that the sum of n from all test cases in the input doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "Print t lines \u2014 the answers to test cases in the order they are given in the input. The answer to a test case is the string of length n , there the i - th character is equal to 1 if i is a beautiful number and is equal to 0 if i is not a beautiful number.",
    "note": "The first test case is described in the problem statement. In the second test case all numbers from 1 to 5 are beautiful: if l = 3 and r = 3 we will have a permutation [ 1] for m = 1 ; if l = 3 and r = 4 we will have a permutation [ 1, 2] for m = 2 ; if l = 2 and r = 4 we will have a permutation [ 3, 1, 2] for m = 3 ; if l = 2 and r = 5 we will have a permutation [ 3, 1, 2, 4] for m = 4 ; if l = 1 and r = 5 we will have a permutation [ 5, 3, 1, 2, 4] for m = 5 .",
    "topics": [
      "data structures",
      "implementation",
      "math",
      "two pointers"
    ],
    "id": "1265B"
  },
  {
    "title": "Beautiful Mirrors with queries",
    "url": "https://codeforces.com/problemset/problem/1264/C",
    "history": "Creatnx has n mirrors, numbered from 1 to n . Every day, Creatnx asks exactly one mirror \" Am I beautiful? \" . The i - th mirror will tell Creatnx that he is beautiful with probability p_ i/ 100 for all 1 \u2264 i \u2264 n . Some mirrors are called checkpoints. Initially, only the 1 st mirror is a checkpoint. It remains a checkpoint all the time. Creatnx asks the mirrors one by one, starting from the 1 - st mirror. Every day, if he asks i - th mirror, there are two possibilities: The i - th mirror tells Creatnx that he is beautiful. In this case, if i = n Creatnx will stop and become happy, otherwise he will continue asking the i+ 1 - th mirror next day; In the other case, Creatnx will feel upset. The next day, Creatnx will start asking from the checkpoint with a maximal number that is less or equal to i . There are some changes occur over time: some mirrors become new checkpoints and some mirrors are no longer checkpoints. You are given q queries, each query is represented by an integer u : If the u - th mirror isn' t a checkpoint then we set it as a checkpoint. Otherwise, the u - th mirror is no longer a checkpoint. After each query, you need to calculate the expected number of days until Creatnx becomes happy. Each of this numbers should be found by modulo 998244353 . Formally, let M = 998244353 . It can be shown that the answer can be expressed as an irreducible fraction p/ q , where p and q are integers and q \u2261\u03380 M . Output the integer equal to p \u00b7 q^ - 1 M . In other words, output such an integer x that 0 \u2264 x < M and x \u00b7 q \u2261 p M .",
    "input": "The first line contains two integers n , q ( 2 \u2264 n, q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of mirrors and queries. The second line contains n integers: p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 100 ) . Each of q following lines contains a single integer u ( 2 \u2264 u \u2264 n ) \u2014 next query.",
    "output": "Print q numbers \u2013 the answers after each query by modulo 998244353 .",
    "note": "In the first test after the first query, the first and the second mirrors are checkpoints. Creatnx will ask the first mirror until it will say that he is beautiful, after that he will ask the second mirror until it will say that he is beautiful because the second mirror is a checkpoint. After that, he will become happy. Probabilities that the mirrors will say, that he is beautiful are equal to 1/ 2 . So, the expected number of days, until one mirror will say, that he is beautiful is equal to 2 and the answer will be equal to 4 = 2 + 2 .",
    "topics": [
      "data structures",
      "probabilities"
    ],
    "id": "1264C"
  },
  {
    "title": "Economic Difficulties",
    "url": "https://codeforces.com/problemset/problem/1263/F",
    "history": "An electrical grid in Berland palaces consists of 2 grids: main and reserve. Wires in palaces are made of expensive material, so selling some of them would be a good idea! Each grid ( main and reserve) has a head node ( its number is 1 ) . Every other node gets electricity from the head node. Each node can be reached from the head node by a unique path. Also, both grids have exactly n nodes, which do not spread electricity further. In other words, every grid is a rooted directed tree on n leaves with a root in the node, which number is 1 . Each tree has independent enumeration and nodes from one grid are not connected with nodes of another grid. Also, the palace has n electrical devices. Each device is connected with one node of the main grid and with one node of the reserve grid. Devices connect only with nodes, from which electricity is not spread further ( these nodes are the tree' s leaves) . Each grid' s leaf is connected with exactly one device. In this example the main grid contains 6 nodes ( the top tree) and the reserve grid contains 4 nodes ( the lower tree) . There are 3 devices with numbers colored in blue. It is guaranteed that the whole grid ( two grids and n devices) can be shown in this way ( like in the picture above) : main grid is a top tree, whose wires are directed ' from the top to the down' , reserve grid is a lower tree, whose wires are directed ' from the down to the top' , devices \u2014 horizontal row between two grids, which are numbered from 1 to n from the left to the right, wires between nodes do not intersect. Formally, for each tree exists a depth- first search from the node with number 1 , that visits leaves in order of connection to devices 1, 2, . . . , n ( firstly, the node, that is connected to the device 1 , then the node, that is connected to the device 2 , etc. ) . Businessman wants to sell ( remove) maximal amount of wires so that each device will be powered from at least one grid ( main or reserve) . In other words, for each device should exist at least one path to the head node ( in the main grid or the reserve grid) , which contains only nodes from one grid.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 1000 ) \u2014 the number of devices in the palace. The next line contains an integer a ( 1 + n \u2264 a \u2264 1000 + n ) \u2014 the amount of nodes in the main grid. Next line contains a - 1 integers p_ i ( 1 \u2264 p_ i \u2264 a ) . Each integer p_ i means that the main grid contains a wire from p_ i - th node to ( i + 1) - th. The next line contains n integers x_ i ( 1 \u2264 x_ i \u2264 a ) \u2014 the number of a node in the main grid that is connected to the i - th device. The next line contains an integer b ( 1 + n \u2264 b \u2264 1000 + n ) \u2014 the amount of nodes in the reserve grid. Next line contains b - 1 integers q_ i ( 1 \u2264 q_ i \u2264 b ) . Each integer q_ i means that the reserve grid contains a wire from q_ i - th node to ( i + 1) - th. The next line contains n integers y_ i ( 1 \u2264 y_ i \u2264 b ) \u2014 the number of a node in the reserve grid that is connected to the i - th device. It is guaranteed that each grid is a tree, which has exactly n leaves and each leaf is connected with one device. Also, it is guaranteed, that for each tree exists a depth- first search from the node 1 , that visits leaves in order of connection to devices.",
    "output": "Print a single integer \u2014 the maximal amount of wires that can be cut so that each device is powered.",
    "note": "For the first example, the picture below shows one of the possible solutions ( wires that can be removed are marked in red) : The second and the third examples can be seen below:",
    "topics": [
      "data structures",
      "dfs and similar",
      "dp",
      "flows",
      "graphs",
      "trees"
    ],
    "id": "1263F"
  },
  {
    "title": "Editor",
    "url": "https://codeforces.com/problemset/problem/1263/E",
    "history": "The development of a text editor is a hard problem. You need to implement an extra module for brackets coloring in text. Your editor consists of a line with infinite length and cursor, which points to the current character. Please note that it points to only one of the characters ( and not between a pair of characters) . Thus, it points to an index character. The user can move the cursor left or right one position. If the cursor is already at the first ( leftmost) position, then it does not move left. Initially, the cursor is in the first ( leftmost) character. Also, the user can write a letter or brackets ( either ( , or ) ) to the position that the cursor is currently pointing at. A new character always overwrites the old value at that position. Your editor must check, whether the current line is the correct text. Text is correct if the brackets in them form the correct bracket sequence. Formally, correct text ( CT) must satisfy the following rules: any line without brackets is CT ( the line can contain whitespaces) ; If the first character of the string \u2014 is ( , the last \u2014 is ) , and all the rest form a CT, then the whole line is a CT; two consecutively written CT is also CT. Examples of correct texts: hello( codeforces) , round, ( ( i) ( write) ) edi( tor) s, ( me) . Examples of incorrect texts: hello) oops( , round) , ( ( me) . The user uses special commands to work with your editor. Each command has its symbol, which must be written to execute this command. The correspondence of commands and characters is as follows: L \u2014 move the cursor one character to the left ( remains in place if it already points to the first character) ; R \u2014 move the cursor one character to the right; any lowercase Latin letter or bracket ( ( or ) ) \u2014 write the entered character to the position where the cursor is now. For a complete understanding, take a look at the first example and its illustrations in the note below. You are given a string containing the characters that the user entered. For the brackets coloring module' s work, after each command you need to: check if the current text in the editor is a correct text; if it is, print the least number of colors that required, to color all brackets. If two pairs of brackets are nested ( the first in the second or vice versa) , then these pairs of brackets should be painted in different colors. If two pairs of brackets are not nested, then they can be painted in different or the same colors. For example, for the bracket sequence ( ) ( ( ) ) ( ) ( ) the least number of colors is 2 , and for the bracket sequence ( ( ) ( ( ) ( ) ) ( ) ) ( ( ) ) \u2014 is 3 . Write a program that prints the minimal number of colors after processing each command.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 10^ 6 ) \u2014 the number of commands. The second line contains s \u2014 a sequence of commands. The string s consists of n characters. It is guaranteed that all characters in a string are valid commands.",
    "output": "In a single line print n integers, where the i - th number is: - 1 if the line received after processing the first i commands is not valid text, the minimal number of colors in the case of the correct text.",
    "note": "In the first example, the text in the editor will take the following form: ( ^ ( ^ ( a ^ ( a ^ ( ab ^ ( ab ^ ( ab) ^ ( ab) ^ ( a) ) ^ ( a) ) ^ ( ( ) ) ^",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "1263E"
  },
  {
    "title": "Colored Tree",
    "url": "https://codeforces.com/problemset/problem/1260/F",
    "history": "You' re given a tree with n vertices. The color of the i - th vertex is h_ i . The value of the tree is defined as \u2211_ h_ i = h_ j, 1 \u2264 i < j \u2264 ndis( i, j) , where dis( i, j) is the number of edges on the shortest path between i and j . The color of each vertex is lost, you only remember that h_ i can be any integer from [ l_ i, r_ i] ( inclusive) . You want to calculate the sum of values of all trees meeting these conditions modulo 10^ 9 + 7 ( the set of edges is fixed, but each color is unknown, so there are \u220f_ i = 1^ n ( r_ i - l_ i + 1) different trees) .",
    "input": "The first line contains one integer n ( 2 \u2264 n \u2264 10^ 5 ) \u2014 the number of vertices. Then n lines follow, each line contains two integers l_ i and r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 10^ 5 ) denoting the range of possible colors of vertex i . Then n - 1 lines follow, each containing two integers u and v ( 1 \u2264 u, v \u2264 n , u v ) denoting an edge of the tree. It is guaranteed that these edges form a tree.",
    "output": "Print one integer \u2014 the sum of values of all possible trees, taken modulo 10^ 9 + 7 .",
    "note": "In the first example there are four different ways to color the tree ( so, there are four different trees) : a tree with vertices colored as follows: { 1, 1, 1, 1 } . The value of this tree is dis( 1, 2) + dis( 1, 3) + dis( 1, 4) + dis( 2, 3) + dis( 2, 4) + dis( 3, 4) = 10 ; a tree with vertices colored as follows: { 1, 2, 1, 1 } . The value of this tree is dis( 1, 3) + dis( 1, 4) + dis( 3, 4) = 4 ; a tree with vertices colored as follows: { 1, 1, 1, 2 } . The value of this tree is dis( 1, 2) + dis( 1, 3) + dis( 2, 3) = 4 ; a tree with vertices colored as follows: { 1, 2, 1, 2 } . The value of this tree is dis( 1, 3) + dis( 2, 4) = 4 . Overall the sum of all values is 10+ 4+ 4+ 4= 22 .",
    "topics": [
      "data structures",
      "trees"
    ],
    "id": "1260F"
  },
  {
    "title": "The Contest",
    "url": "https://codeforces.com/problemset/problem/1257/E",
    "history": "A team of three programmers is going to play a contest. The contest consists of n problems, numbered from 1 to n . Each problem is printed on a separate sheet of paper. The participants have decided to divide the problem statements into three parts: the first programmer took some prefix of the statements ( some number of first paper sheets) , the third contestant took some suffix of the statements ( some number of last paper sheets) , and the second contestant took all remaining problems. But something went wrong \u2014 the statements were printed in the wrong order, so the contestants have received the problems in some random order. The first contestant has received problems a_ 1, 1, a_ 1, 2, . . . , a_ 1, k_ 1 . The second one has received problems a_ 2, 1, a_ 2, 2, . . . , a_ 2, k_ 2 . The third one has received all remaining problems ( a_ 3, 1, a_ 3, 2, . . . , a_ 3, k_ 3 ) . The contestants don' t want to play the contest before they redistribute the statements. They want to redistribute them so that the first contestant receives some prefix of the problemset, the third contestant receives some suffix of the problemset, and the second contestant receives all the remaining problems. During one move, some contestant may give one of their problems to other contestant. What is the minimum number of moves required to redistribute the problems? It is possible that after redistribution some participant ( or even two of them) will not have any problems.",
    "input": "The first line contains three integers k_ 1, k_ 2 and k_ 3 ( 1 \u2264 k_ 1, k_ 2, k_ 3 \u2264 2 \u00b7 10^ 5, k_ 1 + k_ 2 + k_ 3 \u2264 2 \u00b7 10^ 5 ) \u2014 the number of problems initially taken by the first, the second and the third participant, respectively. The second line contains k_ 1 integers a_ 1, 1, a_ 1, 2, . . . , a_ 1, k_ 1 \u2014 the problems initially taken by the first participant. The third line contains k_ 2 integers a_ 2, 1, a_ 2, 2, . . . , a_ 2, k_ 2 \u2014 the problems initially taken by the second participant. The fourth line contains k_ 3 integers a_ 3, 1, a_ 3, 2, . . . , a_ 3, k_ 3 \u2014 the problems initially taken by the third participant. It is guaranteed that no problem has been taken by two ( or three) participants, and each integer a_ i, j meets the condition 1 \u2264 a_ i, j\u2264 n , where n = k_ 1 + k_ 2 + k_ 3 .",
    "output": "Print one integer \u2014 the minimum number of moves required to redistribute the problems so that the first participant gets the prefix of the problemset, the third participant gets the suffix of the problemset, and the second participant gets all of the remaining problems.",
    "note": "In the first example the third contestant should give the problem 2 to the first contestant, so the first contestant has 3 first problems, the third contestant has 1 last problem, and the second contestant has 1 remaining problem. In the second example the distribution of problems is already valid: the first contestant has 3 first problems, the third contestant has 1 last problem, and the second contestant has 2 remaining problems. The best course of action in the third example is to give all problems to the third contestant. The best course of action in the fourth example is to give all problems to the second contestant.",
    "topics": [
      "data structures",
      "dp",
      "greedy"
    ],
    "id": "1257E"
  },
  {
    "title": "Yet Another Monster Killing Problem",
    "url": "https://codeforces.com/problemset/problem/1257/D",
    "history": "You play a computer game. In this game, you lead a party of m heroes, and you have to clear a dungeon with n monsters. Each monster is characterized by its power a_ i . Each hero is characterized by his power p_ i and endurance s_ i . The heroes clear the dungeon day by day. In the beginning of each day, you choose a hero ( exactly one) who is going to enter the dungeon this day. When the hero enters the dungeon, he is challenged by the first monster which was not defeated during the previous days ( so, if the heroes have already defeated k monsters, the hero fights with the monster k + 1 ) . When the hero fights the monster, there are two possible outcomes: if the monster' s power is strictly greater than the hero' s power, the hero retreats from the dungeon. The current day ends; otherwise, the monster is defeated. After defeating a monster, the hero either continues fighting with the next monster or leaves the dungeon. He leaves the dungeon either if he has already defeated the number of monsters equal to his endurance during this day ( so, the i - th hero cannot defeat more than s_ i monsters during each day) , or if all monsters are defeated \u2014 otherwise, he fights with the next monster. When the hero leaves the dungeon, the current day ends. Your goal is to defeat the last monster. What is the minimum number of days that you need to achieve your goal? Each day you have to use exactly one hero; it is possible that some heroes don' t fight the monsters at all. Each hero can be used arbitrary number of times.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. Then the test cases follow. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of monsters in the dungeon. The second line contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is the power of the i - th monster. The third line contains one integer m ( 1 \u2264 m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of heroes in your party. Then m lines follow, each describing a hero. Each line contains two integers p_ i and s_ i ( 1 \u2264 p_ i \u2264 10^ 9 , 1 \u2264 s_ i \u2264 n ) \u2014 the power and the endurance of the i - th hero. It is guaranteed that the sum of n + m over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case print one integer \u2014 the minimum number of days you have to spend to defeat all of the monsters ( or - 1 if it is impossible) .",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "greedy",
      "sortings",
      "two pointers"
    ],
    "id": "1257D"
  },
  {
    "title": "Tree Queries",
    "url": "https://codeforces.com/problemset/problem/1254/D",
    "history": "Hanh is a famous biologist. He loves growing trees and doing experiments on his own garden. One day, he got a tree consisting of n vertices. Vertices are numbered from 1 to n . A tree with n vertices is an undirected connected graph with n- 1 edges. Initially, Hanh sets the value of every vertex to 0 . Now, Hanh performs q operations, each is either of the following types: Type 1 : Hanh selects a vertex v and an integer d . Then he chooses some vertex r uniformly at random, lists all vertices u such that the path from r to u passes through v . Hanh then increases the value of all such vertices u by d . Type 2 : Hanh selects a vertex v and calculates the expected value of v . Since Hanh is good at biology but not math, he needs your help on these operations.",
    "input": "The first line contains two integers n and q ( 1 \u2264 n, q \u2264 150 000 ) \u2014 the number of vertices on Hanh' s tree and the number of operations he performs. Each of the next n - 1 lines contains two integers u and v ( 1 \u2264 u, v \u2264 n ) , denoting that there is an edge connecting two vertices u and v . It is guaranteed that these n - 1 edges form a tree. Each of the last q lines describes an operation in either formats: 1 v d ( 1 \u2264 v \u2264 n, 0 \u2264 d \u2264 10^ 7 ) , representing a first- type operation. 2 v ( 1 \u2264 v \u2264 n ) , representing a second- type operation. It is guaranteed that there is at least one query of the second type.",
    "output": "For each operation of the second type, write the expected value on a single line. Let M = 998244353 , it can be shown that the expected value can be expressed as an irreducible fraction p/ q , where p and q are integers and q \u2261\u03380 M . Output the integer equal to p \u00b7 q^ - 1 M . In other words, output such an integer x that 0 \u2264 x < M and x \u00b7 q \u2261 p M .",
    "note": "The image below shows the tree in the example: For the first query, where v = 1 and d = 1 : If r = 1 , the values of all vertices get increased. If r = 2 , the values of vertices 1 and 3 get increased. If r = 3 , the values of vertices 1 , 2 , 4 and 5 get increased. If r = 4 , the values of vertices 1 and 3 get increased. If r = 5 , the values of vertices 1 and 3 get increased. Hence, the expected values of all vertices after this query are ( 1, 0. 4, 0. 8, 0. 4, 0. 4 ) . For the second query, where v = 2 and d = 2 : If r = 1 , the values of vertices 2 , 4 and 5 get increased. If r = 2 , the values of all vertices get increased. If r = 3 , the values of vertices 2 , 4 and 5 get increased. If r = 4 , the values of vertices 1 , 2 , 3 and 5 get increased. If r = 5 , the values of vertices 1 , 2 , 3 and 4 get increased. Hence, the expected values of all vertices after this query are ( 2. 2, 2. 4, 2, 2, 2 ) .",
    "topics": [
      "data structures",
      "probabilities",
      "trees"
    ],
    "id": "1254D"
  },
  {
    "title": "Antenna Coverage",
    "url": "https://codeforces.com/problemset/problem/1253/E",
    "history": "The mayor of the Central Town wants to modernize Central Street, represented in this problem by the ( Ox) axis. On this street, there are n antennas, numbered from 1 to n . The i - th antenna lies on the position x_ i and has an initial scope of s_ i : it covers all integer positions inside the interval [ x_ i - s_ i; x_ i + s_ i] . It is possible to increment the scope of any antenna by 1 , this operation costs 1 coin. We can do this operation as much as we want ( multiple times on the same antenna if we want) . To modernize the street, we need to make all integer positions from 1 to m inclusive covered by at least one antenna. Note that it is authorized to cover positions outside [ 1; m] , even if it' s not required. What is the minimum amount of coins needed to achieve this modernization?",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 80 and n \u2264 m \u2264 100 000 ) . The i - th of the next n lines contains two integers x_ i and s_ i ( 1 \u2264 x_ i \u2264 m and 0 \u2264 s_ i \u2264 m ) . On each position, there is at most one antenna ( values x_ i are pairwise distinct) .",
    "output": "You have to output a single integer: the minimum amount of coins required to make all integer positions from 1 to m inclusive covered by at least one antenna.",
    "note": "In the first example, here is a possible strategy: Increase the scope of the first antenna by 40 , so that it becomes 2 + 40 = 42 . This antenna will cover interval [ 43 - 42; 43 + 42] which is [ 1; 85] Increase the scope of the second antenna by 210 , so that it becomes 4 + 210 = 214 . This antenna will cover interval [ 300 - 214; 300 + 214] , which is [ 86; 514] Increase the scope of the third antenna by 31 , so that it becomes 10 + 31 = 41 . This antenna will cover interval [ 554 - 41; 554 + 41] , which is [ 513; 595] Total cost is 40 + 210 + 31 = 281 . We can prove that it' s the minimum cost required to make all positions from 1 to 595 covered by at least one antenna. Note that positions 513 and 514 are in this solution covered by two different antennas, but it' s not important. \u2014In the second example, the first antenna already covers an interval [ 0; 2] so we have nothing to do. Note that the only position that we needed to cover was position 1 ; positions 0 and 2 are covered, but it' s not important.",
    "topics": [
      "data structures",
      "dp",
      "greedy",
      "sortings"
    ],
    "id": "1253E"
  },
  {
    "title": "Addition Robot",
    "url": "https://codeforces.com/problemset/problem/1252/K",
    "history": "Adding two numbers several times is a time- consuming task, so you want to build a robot. The robot should have a string S = S_ 1 S_ 2 . . . S_ N of N characters on its memory that represents addition instructions. Each character of the string, S_ i , is either ' A' or ' B' . You want to be able to give Q commands to the robot, each command is either of the following types: 1 L R . The robot should toggle all the characters of S_ i where L \u2264 i \u2264 R . Toggling a character means changing it to ' A' if it was previously ' B' , or changing it to ' B' if it was previously ' A' . 2 L R A B . The robot should call f( L, R, A, B) and return two integers as defined in the following pseudocode: function f( L, R, A, B) : FOR i from L to R if S[ i] = ' A' A = A + B else B = A + B return ( A, B) You want to implement the robot' s expected behavior.",
    "input": "Input begins with a line containing two integers: N Q ( 1 \u2264 N, Q \u2264 100 000 ) representing the number of characters in the robot' s memory and the number of commands, respectively. The next line contains a string S containing N characters ( each either ' A' or ' B' ) representing the initial string in the robot' s memory. The next Q lines each contains a command of the following types. 1 L R ( 1 \u2264 L \u2264 R \u2264 N ) 2 L R A B ( 1 \u2264 L \u2264 R \u2264 N ; 0 \u2264 A, B \u2264 10^ 9 ) There is at least one command of the second type.",
    "output": "For each command of the second type in the same order as input, output in a line two integers ( separated by a single space) , the value of A and B returned by f( L, R, A, B) , respectively. As this output can be large, you need to modulo the output by 1 000 000 007 .",
    "note": "Explanation for the sample input/ output # 1For the first command, calling f( L, R, A, B) causes the following: Initially, A = 1 and B = 1 . At the end of i = 1 , A = 2 and B = 1 . At the end of i = 2 , A = 2 and B = 3 . At the end of i = 3 , A = 5 and B = 3 . At the end of i = 4 , A = 8 and B = 3 . At the end of i = 5 , A = 11 and B = 3 . Therefore, f( L, R, A, B) will return ( 11, 3) . For the second command, string S will be updated to \" ABBBB\" . For the third command, the value of A will always be 0 and the value of B will always be 1 000 000 000 . Therefore, f( L, R, A, B) will return ( 0, 1 000 000 000) .",
    "topics": [
      "data structures",
      "math",
      "matrices"
    ],
    "id": "1252K"
  },
  {
    "title": "Performance Review",
    "url": "https://codeforces.com/problemset/problem/1252/G",
    "history": "Randall is a software engineer at a company with N employees. Every year, the company re- evaluates its employees. At the end of every year, the company replaces its several worst- performing employees and replaces with the same number of new employees, so that the company keeps having N employees. Each person has a constant performance and can be represented by an integer ( higher integer means better performance) , and no two people have the same performance. The performance of the initial employees are represented by an array of integers A = [ A_ 1, A_ 2, . . . , A_ N] where A_ i is the performance of the i^ th employee. Randall is employee 1 , so his performance is A_ 1 . We will consider the first M years. At the end of the i^ th year, the company replaces its R_ i worst- performing employees and replaces with R_ i new employees. The performance of these new employees are represented by an array of integers B_ i = [ ( B_ i) _ 1, ( B_ i) _ 2, . . . , ( B_ i) _ R_ i] where ( B_ i) _ j is the performance of the j^ th new employee. He will consider Q scenarios. On the i^ th scenario, he will change the value of ( B_ X_ i) _ Y_ i to Z_ i . For each scenario, Randall is wondering whether he will still be in the company after M years. Note that the changes in each scenario are kept for the subsequent scenarios.",
    "input": "Input begins with a line containing three integers: N M Q ( 2 \u2264 N \u2264 100 000 ; 1 \u2264 M, Q \u2264 100 000 ) representing the number of employees, the number of years to be considered, and the number of scenarios, respectively. The next line contains N integers: A_ i ( 0 \u2264 A_ i \u2264 10^ 9 ) representing the performance of the initial employees. The next M lines each contains several integers: R_ i ( B_ i) _ 1 , ( B_ i) _ 2 , \u22ef , ( B_ i) _ R_ i ( 1 \u2264 R_ i < N ; 0 \u2264 ( B_ i) _ j \u2264 10^ 9 ) representing the number of employees replaced and the performance of the new employees, respectively. It is guaranteed that the sum of R_ i does not exceed 10^ 6 . The next Q lines each contains three integers: X_ i Y_ i Z_ i ( 1 \u2264 X_ i \u2264 M ; 1 \u2264 Y_ i \u2264 R_ ( X_ i) ; 0 \u2264 Z_ i \u2264 10^ 9 ) representing a scenario. It is guaranteed that all integers in all A_ i , ( B_ i) _ j , and Z_ i ( combined together) are distinct.",
    "output": "For each scenario in the same order as input, output in a line an integer 0 if Randall will not be in the company after M years, or 1 if Randall will still be in the company after M years.",
    "note": "Explanation for the sample input/ output # 1Randall performance is represented by 50 . For the first scenario, the value of ( B_ 1) _ 3 is updated to 300 , causes the following: Initially, the performance of the employees is [ 50, 40, 30, 20, 10] . At the end of the first year, 4 worst- performing employees are replaced by employees with performance [ 300, 100, 2, 1] . Therefore, the performance of the employees is [ 300, 100, 50, 2, 1] . At the end of the second year, the performance of the employees is [ 300, 100, 50, 4, 2] . At the end of the third year, the performance of the employees is [ 300, 100, 50, 7, 6] . Therefore, Randall will still be in the company after 3 years. For the second scenario, the value of ( B_ 2) _ 1 is updated to 400 , causes the following: Initially, the performance of the employees is [ 50, 40, 30, 20, 10] . At the end of the first year, the performance of the employees is [ 300, 100, 50, 2, 1] . Recall that the change in the first scenario is kept for this scenario as well. At the end of the second year, the performance of the employees is [ 400, 300, 100, 50, 2] . At the end of the third year, the performance of the employees is [ 400, 300, 100, 7, 6] . Therefore, Randall will not be in the company after 3 years.",
    "topics": [
      "data structures"
    ],
    "id": "1252G"
  },
  {
    "title": "Find String in a Grid",
    "url": "https://codeforces.com/problemset/problem/1252/D",
    "history": "You have a grid G containing R rows ( numbered from 1 to R , top to bottom) and C columns ( numbered from 1 to C , left to right) of uppercase characters. The character in the r^ th row and the c^ th column is denoted by G_ r, c . You also have Q strings containing uppercase characters. For each of the string, you want to find the number of occurrences of the string in the grid. An occurrence of string S in the grid is counted if S can be constructed by starting at one of the cells in the grid, going right 0 or more times, and then going down 0 or more times. Two occurrences are different if the set of cells used to construct the string is different. Formally, for each string S , you would like to count the number of tuples \u27e8 r, c, \u0394 r, \u0394 c \u27e9 such that: 1 \u2264 r \u2264 R and r \u2264 r + \u0394 r \u2264 R 1 \u2264 c \u2264 C and c \u2264 c + \u0394 c \u2264 C S = G_ r, c G_ r, c + 1. . . G_ r, c + \u0394 c G_ r + 1, c + \u0394 c. . . G_ r + \u0394 r, c + \u0394 c",
    "input": "Input begins with a line containing three integers: R C Q ( 1 \u2264 R, C \u2264 500 ; 1 \u2264 Q \u2264 200 000 ) representing the size of the grid and the number of strings, respectively. The next R lines each contains C uppercase characters representing the grid. The c^ th character on the r^ th line is G_ r, c . The next Q lines each contains a string S containing uppercase characters. The length of this string is a positive integer not more than 200 000 . The sum of the length of all Q strings combined is not more than 200 000 .",
    "output": "For each query in the same order as input, output in a line an integer representing the number of occurrences of the string in the grid.",
    "note": "Explanation for the sample input/ output # 1 There are 2 occurrences of \" ABC\" , represented by the tuples \u27e8 1, 1, 1, 1 \u27e9 and \u27e8 1, 1, 0, 2 \u27e9 . There are 3 occurrences of \" BC\" , represented by the tuples \u27e8 1, 2, 0, 1 \u27e9 , \u27e8 1, 2, 1, 0 \u27e9 , and \u27e8 2, 1, 0, 1 \u27e9 . There is 1 occurrence of \" BD\" , represented by the tuple \u27e8 2, 1, 1, 0 \u27e9 . There is no occurrence of \" AC\" . There are 2 occurrences of \" A\" , represented by the tuples \u27e8 1, 1, 0, 0 \u27e9 and \u27e8 3, 2, 0, 0 \u27e9 .",
    "topics": [
      "data structures",
      "dp",
      "strings",
      "trees"
    ],
    "id": "1252D"
  },
  {
    "title": "Even Path",
    "url": "https://codeforces.com/problemset/problem/1252/C",
    "history": "Pathfinding is a task of finding a route between two points. It often appears in many problems. For example, in a GPS navigation software where a driver can query for a suggested route, or in a robot motion planning where it should find a valid sequence of movements to do some tasks, or in a simple maze solver where it should find a valid path from one point to another point. This problem is related to solving a maze. The maze considered in this problem is in the form of a matrix of integers A of N \u00d7 N . The value of each cell is generated from a given array R and C of N integers each. Specifically, the value on the i^ th row and j^ th column, cell ( i, j) , is equal to R_ i + C_ j . Note that all indexes in this problem are from 1 to N . A path in this maze is defined as a sequence of cells ( r_ 1, c_ 1) , ( r_ 2, c_ 2) , . . . , ( r_ k, c_ k) such that | r_ i - r_ i+ 1| + | c_ i - c_ i+ 1| = 1 for all 1 \u2264 i < k . In other words, each adjacent cell differs only by 1 row or only by 1 column. An even path in this maze is defined as a path in which all the cells in the path contain only even numbers. Given a tuple \u27e8 r_ a, c_ a, r_ b, c_ b \u27e9 as a query, your task is to determine whether there exists an even path from cell ( r_ a, c_ a) to cell ( r_ b, c_ b) . To simplify the problem, it is guaranteed that both cell ( r_ a, c_ a) and cell ( r_ b, c_ b) contain even numbers. For example, let N = 5 , R = { 6, 2, 7, 8, 3} , and C = { 3, 4, 8, 5, 1} . The following figure depicts the matrix A of 5 \u00d7 5 which is generated from the given array R and C . Let us consider several queries: \u27e8 2, 2, 1, 3 \u27e9 : There is an even path from cell ( 2, 2) to cell ( 1, 3) , e. g. , ( 2, 2) , ( 2, 3) , ( 1, 3) . Of course, ( 2, 2) , ( 1, 2) , ( 1, 3) is also a valid even path. \u27e8 4, 2, 4, 3 \u27e9 : There is an even path from cell ( 4, 2) to cell ( 4, 3) , namely ( 4, 2) , ( 4, 3) . \u27e8 5, 1, 3, 4 \u27e9 : There is no even path from cell ( 5, 1) to cell ( 3, 4) . Observe that the only two neighboring cells of ( 5, 1) are cell ( 5, 2) and cell ( 4, 1) , and both of them contain odd numbers ( 7 and 11, respectively) , thus, there cannot be any even path originating from cell ( 5, 1) .",
    "input": "Input begins with a line containing two integers: N Q ( 2 \u2264 N \u2264 100 000 ; 1 \u2264 Q \u2264 100 000 ) representing the size of the maze and the number of queries, respectively. The next line contains N integers: R_ i ( 0 \u2264 R_ i \u2264 10^ 6 ) representing the array R . The next line contains N integers: C_ i ( 0 \u2264 C_ i \u2264 10^ 6 ) representing the array C . The next Q lines each contains four integers: r_ a c_ a r_ b c_ b ( 1 \u2264 r_ a, c_ a, r_ b, c_ b \u2264 N ) representing a query of \u27e8 r_ a, c_ a, r_ b, c_ b \u27e9 . It is guaranteed that ( r_ a, c_ a) and ( r_ b, c_ b) are two different cells in the maze and both of them contain even numbers.",
    "output": "For each query in the same order as input, output in a line a string \" YES\" ( without quotes) or \" NO\" ( without quotes) whether there exists an even path from cell ( r_ a, c_ a) to cell ( r_ b, c_ b) .",
    "note": "Explanation for the sample input/ output # 1This is the example from the problem description.",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "1252C"
  },
  {
    "title": "Voting (Hard Version)",
    "url": "https://codeforces.com/problemset/problem/1251/E2",
    "history": "The only difference between easy and hard versions is constraints. Now elections are held in Berland and you want to win them. More precisely, you want everyone to vote for you. There are n voters, and two ways to convince each of them to vote for you. The first way to convince the i - th voter is to pay him p_ i coins. The second way is to make m_ i other voters vote for you, and the i - th voter will vote for free. Moreover, the process of such voting takes place in several steps. For example, if there are five voters with m_ 1 = 1 , m_ 2 = 2 , m_ 3 = 2 , m_ 4 = 4 , m_ 5 = 5 , then you can buy the vote of the fifth voter, and eventually everyone will vote for you. Set of people voting for you will change as follows: 5\u21921, 5\u21921, 2, 3, 5\u21921, 2, 3, 4, 5 . Calculate the minimum number of coins you have to spend so that everyone votes for you.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 5 ) \u2014 the number of test cases. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of voters. The next n lines contains the description of voters. i - th line contains two integers m_ i and p_ i ( 1 \u2264 p_ i \u2264 10^ 9, 0 \u2264 m_ i < n ) . It is guaranteed that the sum of all n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case print one integer \u2014 the minimum number of coins you have to spend so that everyone votes for you.",
    "note": "In the first test case you have to buy vote of the third voter. Then the set of people voting for you will change as follows: 3\u21921, 3\u21921, 2, 3 . In the second example you don' t need to buy votes. The set of people voting for you will change as follows: 1\u21921, 3, 5\u21921, 2, 3, 5\u21921, 2, 3, 5, 6, 7\u21921, 2, 3, 4, 5, 6, 7 . In the third test case you have to buy votes of the second and the fifth voters. Then the set of people voting for you will change as follows: 2, 5\u21921, 2, 3, 4, 5\u21921, 2, 3, 4, 5, 6 .",
    "topics": [
      "binary search",
      "data structures",
      "greedy"
    ],
    "id": "1251E2"
  },
  {
    "title": "Voting (Easy Version)",
    "url": "https://codeforces.com/problemset/problem/1251/E1",
    "history": "The only difference between easy and hard versions is constraints. Now elections are held in Berland and you want to win them. More precisely, you want everyone to vote for you. There are n voters, and two ways to convince each of them to vote for you. The first way to convince the i - th voter is to pay him p_ i coins. The second way is to make m_ i other voters vote for you, and the i - th voter will vote for free. Moreover, the process of such voting takes place in several steps. For example, if there are five voters with m_ 1 = 1 , m_ 2 = 2 , m_ 3 = 2 , m_ 4 = 4 , m_ 5 = 5 , then you can buy the vote of the fifth voter, and eventually everyone will vote for you. Set of people voting for you will change as follows: 5\u21921, 5\u21921, 2, 3, 5\u21921, 2, 3, 4, 5 . Calculate the minimum number of coins you have to spend so that everyone votes for you.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 5000 ) \u2014 the number of test cases. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 5000 ) \u2014 the number of voters. The next n lines contains the description of voters. i - th line contains two integers m_ i and p_ i ( 1 \u2264 p_ i \u2264 10^ 9, 0 \u2264 m_ i < n ) . It is guaranteed that the sum of all n over all test cases does not exceed 5000 .",
    "output": "For each test case print one integer \u2014 the minimum number of coins you have to spend so that everyone votes for you.",
    "note": "In the first test case you have to buy vote of the third voter. Then the set of people voting for you will change as follows: 3\u21921, 3\u21921, 2, 3 . In the second example you don' t need to buy votes. The set of people voting for you will change as follows: 1\u21921, 3, 5\u21921, 2, 3, 5\u21921, 2, 3, 5, 6, 7\u21921, 2, 3, 4, 5, 6, 7 . In the third test case you have to buy votes of the second and the fifth voters. Then the set of people voting for you will change as follows: 2, 5\u21921, 2, 3, 4, 5\u21921, 2, 3, 4, 5, 6 .",
    "topics": [
      "data structures",
      "dp",
      "greedy"
    ],
    "id": "1251E1"
  },
  {
    "title": "Trip to Saint Petersburg",
    "url": "https://codeforces.com/problemset/problem/1250/C",
    "history": "You are planning your trip to Saint Petersburg. After doing some calculations, you estimated that you will have to spend k rubles each day you stay in Saint Petersburg \u2014 you have to rent a flat, to eat at some local cafe, et cetera. So, if the day of your arrival is L , and the day of your departure is R , you will have to spend k( R - L + 1) rubles in Saint Petersburg. You don' t want to spend a lot of money on your trip, so you decided to work in Saint Petersburg during your trip. There are n available projects numbered from 1 to n , the i - th of them lasts from the day l_ i to the day r_ i inclusive. If you choose to participate in the i - th project, then you have to stay and work in Saint Petersburg for the entire time this project lasts, but you get paid p_ i rubles for completing it. Now you want to come up with an optimal trip plan: you have to choose the day of arrival L , the day of departure R and the set of projects S to participate in so that all the following conditions are met: your trip lasts at least one day ( formally, R \u2265 L ) ; you stay in Saint Petersburg for the duration of every project you have chosen ( formally, for each s \u2208 S L \u2264 l_ s and R \u2265 r_ s ) ; your total profit is strictly positive and maximum possible ( formally, you have to maximize the value of \u2211_ s \u2208 S p_ s - k( R - L + 1) , and this value should be positive) . You may assume that no matter how many projects you choose, you will still have time and ability to participate in all of them, even if they overlap.",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 2\u00b710^ 5 , 1 \u2264 k \u2264 10^ 12 ) \u2014 the number of projects and the amount of money you have to spend during each day in Saint Petersburg, respectively. Then n lines follow, each containing three integers l_ i , r_ i , p_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 2\u00b710^ 5 , 1 \u2264 p_ i \u2264 10^ 12 ) \u2014 the starting day of the i - th project, the ending day of the i - th project, and the amount of money you get paid if you choose to participate in it, respectively.",
    "output": "If it is impossible to plan a trip with strictly positive profit, print the only integer 0 . Otherwise, print two lines. The first line should contain four integers p , L , R and m \u2014 the maximum profit you can get, the starting day of your trip, the ending day of your trip and the number of projects you choose to complete, respectively. The second line should contain m distinct integers s_ 1 , s_ 2 , . . . , s_ m \u2014 the projects you choose to complete, listed in arbitrary order. If there are multiple answers with maximum profit, print any of them.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": "1250C"
  },
  {
    "title": "Too Many Segments (hard version)",
    "url": "https://codeforces.com/problemset/problem/1249/D2",
    "history": "The only difference between easy and hard versions is constraints. You are given n segments on the coordinate axis OX . Segments can intersect, lie inside each other and even coincide. The i - th segment is [ l_ i; r_ i] ( l_ i \u2264 r_ i ) and it covers all integer points j such that l_ i \u2264 j \u2264 r_ i . The integer point is called bad if it is covered by strictly more than k segments. Your task is to remove the minimum number of segments so that there are no bad points at all.",
    "input": "The first line of the input contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of segments and the maximum number of segments by which each integer point can be covered. The next n lines contain segments. The i - th line contains two integers l_ i and r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 2 \u00b7 10^ 5 ) \u2014 the endpoints of the i - th segment.",
    "output": "In the first line print one integer m ( 0 \u2264 m \u2264 n ) \u2014 the minimum number of segments you need to remove so that there are no bad points. In the second line print m distinct integers p_ 1, p_ 2, . . . , p_ m ( 1 \u2264 p_ i \u2264 n ) \u2014 indices of segments you remove in any order. If there are multiple answers, you can print any of them.",
    "note": "",
    "topics": [
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "1249D2"
  },
  {
    "title": "Queue in the Train",
    "url": "https://codeforces.com/problemset/problem/1239/C",
    "history": "There are n seats in the train' s car and there is exactly one passenger occupying every seat. The seats are numbered from 1 to n from left to right. The trip is long, so each passenger will become hungry at some moment of time and will go to take boiled water for his noodles. The person at seat i ( 1 \u2264 i \u2264 n ) will decide to go for boiled water at minute t_ i . Tank with a boiled water is located to the left of the 1 - st seat. In case too many passengers will go for boiled water simultaneously, they will form a queue, since there can be only one passenger using the tank at each particular moment of time. Each passenger uses the tank for exactly p minutes. We assume that the time it takes passengers to go from their seat to the tank is negligibly small. Nobody likes to stand in a queue. So when the passenger occupying the i - th seat wants to go for a boiled water, he will first take a look on all seats from 1 to i - 1 . In case at least one of those seats is empty, he assumes that those people are standing in a queue right now, so he would be better seating for the time being. However, at the very first moment he observes that all seats with numbers smaller than i are busy, he will go to the tank. There is an unspoken rule, that in case at some moment several people can go to the tank, than only the leftmost of them ( that is, seating on the seat with smallest number) will go to the tank, while all others will wait for the next moment. Your goal is to find for each passenger, when he will receive the boiled water for his noodles.",
    "input": "The first line contains integers n and p ( 1 \u2264 n \u2264 100 000 , 1 \u2264 p \u2264 10^ 9 ) \u2014 the number of people and the amount of time one person uses the tank. The second line contains n integers t_ 1, t_ 2, . . . , t_ n ( 0 \u2264 t_ i \u2264 10^ 9 ) \u2014 the moments when the corresponding passenger will go for the boiled water.",
    "output": "Print n integers, where i - th of them is the time moment the passenger on i - th seat will receive his boiled water.",
    "note": "Consider the example. At the 0 - th minute there were two passengers willing to go for a water, passenger 1 and 5 , so the first passenger has gone first, and returned at the 314 - th minute. At this moment the passenger 2 was already willing to go for the water, so the passenger 2 has gone next, and so on. In the end, 5 - th passenger was last to receive the boiled water.",
    "topics": [
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "1239C"
  },
  {
    "title": "Adilbek and the Watering System",
    "url": "https://codeforces.com/problemset/problem/1238/G",
    "history": "Adilbek has to water his garden. He is going to do it with the help of a complex watering system: he only has to deliver water to it, and the mechanisms will do all the remaining job. The watering system consumes one liter of water per minute ( if there is no water, it is not working) . It can hold no more than c liters. Adilbek has already poured c_ 0 liters of water into the system. He is going to start watering the garden right now and water it for m minutes, and the watering system should contain at least one liter of water at the beginning of the i - th minute ( for every i from 0 to m - 1 ) . Now Adilbek wonders what he will do if the watering system runs out of water. He called n his friends and asked them if they are going to bring some water. The i - th friend answered that he can bring no more than a_ i liters of water; he will arrive at the beginning of the t_ i - th minute and pour all the water he has into the system ( if the system cannot hold such amount of water, the excess water is poured out) ; and then he will ask Adilbek to pay b_ i dollars for each liter of water he has brought. You may assume that if a friend arrives at the beginning of the t_ i - th minute and the system runs out of water at the beginning of the same minute, the friend pours his water fast enough so that the system does not stop working. Of course, Adilbek does not want to pay his friends, but he has to water the garden. So he has to tell his friends how much water should they bring. Formally, Adilbek wants to choose n integers k_ 1 , k_ 2 , . . . , k_ n in such a way that: if each friend i brings exactly k_ i liters of water, then the watering system works during the whole time required to water the garden; the sum \u2211_ i = 1^ n k_ i b_ i is minimum possible. Help Adilbek to determine the minimum amount he has to pay his friends or determine that Adilbek not able to water the garden for m minutes. You have to answer q independent queries.",
    "input": "The first line contains one integer q ( 1 \u2264 q \u2264 5 \u00b7 10^ 5 ) \u2013 the number of queries. The first line of each query contains four integers n, m, c and c_ 0 ( 0 \u2264 n \u2264 5 \u00b7 10^ 5, 2 \u2264 m \u2264 10^ 9, 1 \u2264 c_ 0 \u2264 c \u2264 10^ 9 ) \u2014 the number of friends, the number of minutes of watering, the capacity of the watering system and the number of liters poured by Adilbek. Each of the next n lines contains three integers t_ i, a_ i, b_ i ( 0 < t_ i < m, 1 \u2264 a_ i \u2264 c, 1 \u2264 b_ i \u2264 10^ 9 ) \u2014 the i - th friend' s arrival time, the maximum amount of water i - th friend can bring and the cost of 1 liter from i - th friend. It is guaranteed that sum of all n over all queries does not exceed 5 \u00b7 10^ 5 .",
    "output": "For each query print one integer \u2014 the minimum amount Adilbek has to pay his friends, or - 1 if Adilbek is not able to water the garden for m minutes.",
    "note": "",
    "topics": [
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "1238G"
  },
  {
    "title": "Balanced Distribution",
    "url": "https://codeforces.com/problemset/problem/1237/G",
    "history": "There are n friends living on a circular street. The friends and their houses are numbered clockwise from 0 to n- 1 . Initially person i has a_ i stones. The friends want to make the distribution of stones among them perfectly balanced: everyone should possess the same number of stones. The only way to change the distribution of stones is by conducting meetings. During a meeting, people from exactly k consecutive houses ( remember that the street is circular) gather at the same place and bring all their stones with them. All brought stones may be redistributed among people attending the meeting arbitrarily. The total number of stones they possess before the meeting and after the meeting must stay the same. After the meeting, everyone returns to their home. Find a way to make the distribution of stones perfectly balanced conducting as few meetings as possible.",
    "input": "The first line contains two integers n and k ( 2 \u2264 k < n \u2264 10^ 5 ) , denoting the number of friends and the size of each meeting. The second line contains n integers a_ 0, a_ 1, . . . , a_ n- 1 ( 0 \u2264 a_ i \u2264 10^ 4 ) , denoting the number of stones people initially have. The sum of all a_ i is divisible by n .",
    "output": "Output the minimum number of meetings m ( m \u2265 0 ) , followed by m descriptions of meetings in chronological order. The i - th description must consist of an integer s_ i ( 0 \u2264 s_ i < n ) , followed by k non- negative integers b_ i, 0, b_ i, 1, . . . , b_ i, k- 1 ( b_ i, j\u2265 0 ) . Such a description denotes a meeting of people s_ i, ( s_ i + 1) n, . . . , ( s_ i + k - 1) n , and b_ i, j denotes the number of stones person ( s_ i + j) n must have after the i - th meeting. The sum of b_ i, j must match the total number of stones owned by these people before the i - th meeting. We can show that a solution exists for any valid input, and any correct output contains at most 10^ 7 non- whitespace characters.",
    "note": "In the first example, the distribution of stones changes as follows: after the first meeting: 2 6 7 3 4 2 ; after the second meeting: 4 2 7 3 4 4 ; after the third meeting: 4 4 4 4 4 4 . In the second example, the distribution of stones changes as follows: after the first meeting: 1 0 1 2 2 2 2 2 4 3 3 ; after the second meeting: 5 0 1 2 2 2 2 2 2 2 2 ; after the third meeting: 2 2 2 2 2 2 2 2 2 2 2 .",
    "topics": [
      "data structures",
      "dp",
      "greedy"
    ],
    "id": "1237G"
  },
  {
    "title": "Balanced Playlist",
    "url": "https://codeforces.com/problemset/problem/1237/D",
    "history": "Your favorite music streaming platform has formed a perfectly balanced playlist exclusively for you. The playlist consists of n tracks numbered from 1 to n . The playlist is automatic and cyclic: whenever track i finishes playing, track i+ 1 starts playing automatically; after track n goes track 1 . For each track i , you have estimated its coolness a_ i . The higher a_ i is, the cooler track i is. Every morning, you choose a track. The playlist then starts playing from this track in its usual cyclic fashion. At any moment, you remember the maximum coolness x of already played tracks. Once you hear that a track with coolness strictly less than x/ 2 ( no rounding) starts playing, you turn off the music immediately to keep yourself in a good mood. For each track i , find out how many tracks you will listen to before turning off the music if you start your morning with track i , or determine that you will never turn the music off. Note that if you listen to the same track several times, every time must be counted.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 10^ 5 ) , denoting the number of tracks in the playlist. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) , denoting coolnesses of the tracks.",
    "output": "Output n integers c_ 1, c_ 2, . . . , c_ n , where c_ i is either the number of tracks you will listen to if you start listening from track i or - 1 if you will be listening to music indefinitely.",
    "note": "In the first example, here is what will happen if you start with. . . track 1 : listen to track 1 , stop as a_ 2 < a_ 1/ 2 . track 2 : listen to track 2 , stop as a_ 3 < a_ 2/ 2 . track 3 : listen to track 3 , listen to track 4 , listen to track 1 , stop as a_ 2 < max( a_ 3, a_ 4, a_ 1) / 2 . track 4 : listen to track 4 , listen to track 1 , stop as a_ 2 < max( a_ 4, a_ 1) / 2 . In the second example, if you start with track 4 , you will listen to track 4 , listen to track 1 , listen to track 2 , listen to track 3 , listen to track 4 again, listen to track 1 again, and stop as a_ 2 < max( a_ 4, a_ 1, a_ 2, a_ 3, a_ 4, a_ 1) / 2 . Note that both track 1 and track 4 are counted twice towards the result.",
    "topics": [
      "binary search",
      "data structures",
      "implementation"
    ],
    "id": "1237D"
  },
  {
    "title": "Balanced Tunnel",
    "url": "https://codeforces.com/problemset/problem/1237/B",
    "history": "Consider a tunnel on a one- way road. During a particular day, n cars numbered from 1 to n entered and exited the tunnel exactly once. All the cars passed through the tunnel at constant speeds. A traffic enforcement camera is mounted at the tunnel entrance. Another traffic enforcement camera is mounted at the tunnel exit. Perfectly balanced. Thanks to the cameras, the order in which the cars entered and exited the tunnel is known. No two cars entered or exited at the same time. Traffic regulations prohibit overtaking inside the tunnel. If car i overtakes any other car j inside the tunnel, car i must be fined. However, each car can be fined at most once. Formally, let' s say that car i definitely overtook car j if car i entered the tunnel later than car j and exited the tunnel earlier than car j . Then, car i must be fined if and only if it definitely overtook at least one other car. Find the number of cars that must be fined.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 10^ 5 ) , denoting the number of cars. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) , denoting the ids of cars in order of entering the tunnel. All a_ i are pairwise distinct. The third line contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 n ) , denoting the ids of cars in order of exiting the tunnel. All b_ i are pairwise distinct.",
    "output": "Output the number of cars to be fined.",
    "note": "The first example is depicted below: Car 2 definitely overtook car 5 , while car 4 definitely overtook cars 1 , 2 , 3 and 5 . Cars 2 and 4 must be fined. In the second example car 5 was definitely overtaken by all other cars. In the third example no car must be fined.",
    "topics": [
      "data structures",
      "sortings",
      "two pointers"
    ],
    "id": "1237B"
  },
  {
    "title": "Alice and the Unfair Game",
    "url": "https://codeforces.com/problemset/problem/1236/E",
    "history": "Alice is playing a game with her good friend, Marisa. There are n boxes arranged in a line, numbered with integers from 1 to n from left to right. Marisa will hide a doll in one of the boxes. Then Alice will have m chances to guess where the doll is. If Alice will correctly guess the number of box, where doll is now, she will win the game, otherwise, her friend will win the game. In order to win, Marisa will use some unfair tricks. After each time Alice guesses a box, she can move the doll to the neighboring box or just keep it at its place. Boxes i and i + 1 are neighboring for all 1 \u2264 i \u2264 n - 1 . She can also use this trick once before the game starts. So, the game happens in this order: the game starts, Marisa makes the trick, Alice makes the first guess, Marisa makes the trick, Alice makes the second guess, Marisa makes the trick, . . . , Alice makes m - th guess, Marisa makes the trick, the game ends. Alice has come up with a sequence a_ 1, a_ 2, . . . , a_ m . In the i - th guess, she will ask if the doll is in the box a_ i . She wants to know the number of scenarios ( x, y) ( for all 1 \u2264 x, y \u2264 n ) , such that Marisa can win the game if she will put the doll at the x - th box at the beginning and at the end of the game, the doll will be at the y - th box. Help her and calculate this number.",
    "input": "The first line contains two integers n and m , separated by space ( 1 \u2264 n, m \u2264 10^ 5 ) \u2014 the number of boxes and the number of guesses, which Alice will make. The next line contains m integers a_ 1, a_ 2, . . . , a_ m , separated by spaces ( 1 \u2264 a_ i \u2264 n ) , the number a_ i means the number of the box which Alice will guess in the i - th guess.",
    "output": "Print the number of scenarios in a single line, or the number of pairs of boxes ( x, y) ( 1 \u2264 x, y \u2264 n ) , such that if Marisa will put the doll into the box with number x , she can make tricks in such way, that at the end of the game the doll will be in the box with number y and she will win the game.",
    "note": "In the first example, the possible scenarios are ( 1, 1) , ( 1, 2) , ( 2, 1) , ( 2, 2) , ( 2, 3) , ( 3, 2) , ( 3, 3) . Let' s take ( 2, 2) as an example. The boxes, in which the doll will be during the game can be 2 \u2192 3 \u2192 3 \u2192 3 \u2192 2",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "dsu"
    ],
    "id": "1236E"
  },
  {
    "title": "Alice and the Doll",
    "url": "https://codeforces.com/problemset/problem/1236/D",
    "history": "Alice got a new doll these days. It can even walk! Alice has built a maze for the doll and wants to test it. The maze is a grid with n rows and m columns. There are k obstacles, the i - th of them is on the cell ( x_ i, y_ i) , which means the cell in the intersection of the x_ i - th row and the y_ i - th column. However, the doll is clumsy in some ways. It can only walk straight or turn right at most once in the same cell ( including the start cell) . It cannot get into a cell with an obstacle or get out of the maze. More formally, there exist 4 directions, in which the doll can look: The doll looks in the direction along the row from the first cell to the last. While moving looking in this direction the doll will move from the cell ( x, y) into the cell ( x, y + 1) ; The doll looks in the direction along the column from the first cell to the last. While moving looking in this direction the doll will move from the cell ( x, y) into the cell ( x + 1, y) ; The doll looks in the direction along the row from the last cell to first. While moving looking in this direction the doll will move from the cell ( x, y) into the cell ( x, y - 1) ; The doll looks in the direction along the column from the last cell to the first. While moving looking in this direction the doll will move from the cell ( x, y) into the cell ( x - 1, y) . . Standing in some cell the doll can move into the cell in the direction it looks or it can turn right once. Turning right once, the doll switches it' s direction by the following rules: 1 \u2192 2 , 2 \u2192 3 , 3 \u2192 4 , 4 \u2192 1 . Standing in one cell, the doll can make at most one turn right. Now Alice is controlling the doll' s moves. She puts the doll in of the cell ( 1, 1) ( the upper- left cell of the maze) . Initially, the doll looks to the direction 1 , so along the row from the first cell to the last. She wants to let the doll walk across all the cells without obstacles exactly once and end in any place. Can it be achieved?",
    "input": "The first line contains three integers n , m and k , separated by spaces ( 1 \u2264 n, m \u2264 10^ 5, 0 \u2264 k \u2264 10^ 5 ) \u2014 the size of the maze and the number of obstacles. Next k lines describes the obstacles, the i - th line contains two integer numbers x_ i and y_ i , separated by spaces ( 1 \u2264 x_ i \u2264 n, 1 \u2264 y_ i \u2264 m ) , which describes the position of the i - th obstacle. It is guaranteed that no two obstacles are in the same cell and no obstacle is in cell ( 1, 1) .",
    "output": "Print ' Yes' ( without quotes) if the doll can walk across all the cells without obstacles exactly once by the rules, described in the statement. If it is impossible to walk across the maze by these rules print ' No' ( without quotes) .",
    "note": "Here is the picture of maze described in the first example: In the first example, the doll can walk in this way: The doll is in the cell ( 1, 1) , looks to the direction 1 . Move straight; The doll is in the cell ( 1, 2) , looks to the direction 1 . Move straight; The doll is in the cell ( 1, 3) , looks to the direction 1 . Turn right; The doll is in the cell ( 1, 3) , looks to the direction 2 . Move straight; The doll is in the cell ( 2, 3) , looks to the direction 2 . Move straight; The doll is in the cell ( 3, 3) , looks to the direction 2 . Turn right; The doll is in the cell ( 3, 3) , looks to the direction 3 . Move straight; The doll is in the cell ( 3, 2) , looks to the direction 3 . Move straight; The doll is in the cell ( 3, 1) , looks to the direction 3 . The goal is achieved, all cells of the maze without obstacles passed exactly once.",
    "topics": [
      "brute force",
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "1236D"
  },
  {
    "title": "Distinct Characters Queries",
    "url": "https://codeforces.com/problemset/problem/1234/D",
    "history": "You are given a string s consisting of lowercase Latin letters and q queries for this string. Recall that the substring s[ l; r] of the string s is the string s_ l s_ l + 1. . . s_ r . For example, the substrings of \" codeforces\" are \" code\" , \" force\" , \" f\" , \" for\" , but not \" coder\" and \" top\" . There are two types of queries: 1 pos c ( 1 \u2264 pos \u2264 | s| , c is lowercase Latin letter) : replace s_ pos with c ( set s_ pos : = c ) ; 2 l r ( 1 \u2264 l \u2264 r \u2264 | s| ) : calculate the number of distinct characters in the substring s[ l; r] .",
    "input": "The first line of the input contains one string s consisting of no more than 10^ 5 lowercase Latin letters. The second line of the input contains one integer q ( 1 \u2264 q \u2264 10^ 5 ) \u2014 the number of queries. The next q lines contain queries, one per line. Each query is given in the format described in the problem statement. It is guaranteed that there is at least one query of the second type.",
    "output": "For each query of the second type print the answer for it \u2014 the number of distinct characters in the required substring in this query.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": "1234D"
  },
  {
    "title": "Social Network (hard version)",
    "url": "https://codeforces.com/problemset/problem/1234/B2",
    "history": "The only difference between easy and hard versions are constraints on n and k . You are messaging in one of the popular social networks via your smartphone. Your smartphone can show at most k most recent conversations with your friends. Initially, the screen is empty ( i. e. the number of displayed conversations equals 0 ) . Each conversation is between you and some of your friends. There is at most one conversation with any of your friends. So each conversation is uniquely defined by your friend. You ( suddenly! ) have the ability to see the future. You know that during the day you will receive n messages, the i - th message will be received from the friend with ID id_ i ( 1 \u2264 id_ i \u2264 10^ 9 ) . If you receive a message from id_ i in the conversation which is currently displayed on the smartphone then nothing happens: the conversations of the screen do not change and do not change their order, you read the message and continue waiting for new messages. Otherwise ( i. e. if there is no conversation with id_ i on the screen) : Firstly, if the number of conversations displayed on the screen is k , the last conversation ( which has the position k ) is removed from the screen. Now the number of conversations on the screen is guaranteed to be less than k and the conversation with the friend id_ i is not displayed on the screen. The conversation with the friend id_ i appears on the first ( the topmost) position on the screen and all the other displayed conversations are shifted one position down. Your task is to find the list of conversations ( in the order they are displayed on the screen) after processing all n messages.",
    "input": "The first line of the input contains two integers n and k ( 1 \u2264 n, k \u2264 2 \u00b7 10^ 5) \u2014 the number of messages and the number of conversations your smartphone can show. The second line of the input contains n integers id_ 1, id_ 2, . . . , id_ n ( 1 \u2264 id_ i \u2264 10^ 9 ) , where id_ i is the ID of the friend which sends you the i - th message.",
    "output": "In the first line of the output print one integer m ( 1 \u2264 m \u2264 min( n, k) ) \u2014 the number of conversations shown after receiving all n messages. In the second line print m integers ids_ 1, ids_ 2, . . . , ids_ m , where ids_ i should be equal to the ID of the friend corresponding to the conversation displayed on the position i after receiving all n messages.",
    "note": "In the first example the list of conversations will change in the following way ( in order from the first to last message) : [ ] ; [ 1] ; [ 2, 1] ; [ 3, 2] ; [ 3, 2] ; [ 1, 3] ; [ 1, 3] ; [ 2, 1] . In the second example the list of conversations will change in the following way: [ ] ; [ 2] ; [ 3, 2] ; [ 3, 2] ; [ 1, 3, 2] ; and then the list will not change till the end.",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "1234B2"
  },
  {
    "title": "Optimal Subsequences (Hard Version)",
    "url": "https://codeforces.com/problemset/problem/1227/D2",
    "history": "This is the harder version of the problem. In this version, 1 \u2264 n, m \u2264 2\u00b710^ 5 . You can hack this problem if you locked it. But you can hack the previous problem only if you locked both problems. You are given a sequence of integers a= [ a_ 1, a_ 2, . . . , a_ n] of length n . Its subsequence is obtained by removing zero or more elements from the sequence a ( they do not necessarily go consecutively) . For example, for the sequence a= [ 11, 20, 11, 33, 11, 20, 11] : [ 11, 20, 11, 33, 11, 20, 11] , [ 11, 20, 11, 33, 11, 20] , [ 11, 11, 11, 11] , [ 20] , [ 33, 20] are subsequences ( these are just some of the long list) ; [ 40] , [ 33, 33] , [ 33, 20, 20] , [ 20, 20, 11, 11] are not subsequences. Suppose that an additional non- negative integer k ( 1 \u2264 k \u2264 n ) is given, then the subsequence is called optimal if: it has a length of k and the sum of its elements is the maximum possible among all subsequences of length k ; and among all subsequences of length k that satisfy the previous item, it is lexicographically minimal. Recall that the sequence b= [ b_ 1, b_ 2, . . . , b_ k] is lexicographically smaller than the sequence c= [ c_ 1, c_ 2, . . . , c_ k] if the first element ( from the left) in which they differ less in the sequence b than in c . Formally: there exists t ( 1 \u2264 t \u2264 k ) such that b_ 1= c_ 1 , b_ 2= c_ 2 , . . . , b_ t- 1= c_ t- 1 and at the same time b_ t< c_ t . For example: [ 10, 20, 20] lexicographically less than [ 10, 21, 1] , [ 7, 99, 99] is lexicographically less than [ 10, 21, 1] , [ 10, 21, 0] is lexicographically less than [ 10, 21, 1] . You are given a sequence of a= [ a_ 1, a_ 2, . . . , a_ n] and m requests, each consisting of two numbers k_ j and pos_ j ( 1 \u2264 k \u2264 n , 1 \u2264 pos_ j \u2264 k_ j ) . For each query, print the value that is in the index pos_ j of the optimal subsequence of the given sequence a for k= k_ j . For example, if n= 4 , a= [ 10, 20, 30, 20] , k_ j= 2 , then the optimal subsequence is [ 20, 30] \u2014 it is the minimum lexicographically among all subsequences of length 2 with the maximum total sum of items. Thus, the answer to the request k_ j= 2 , pos_ j= 1 is the number 20 , and the answer to the request k_ j= 2 , pos_ j= 2 is the number 30 .",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 2\u00b710^ 5 ) \u2014 the length of the sequence a . The second line contains elements of the sequence a : integer numbers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) . The third line contains an integer m ( 1 \u2264 m \u2264 2\u00b710^ 5 ) \u2014 the number of requests. The following m lines contain pairs of integers k_ j and pos_ j ( 1 \u2264 k \u2264 n , 1 \u2264 pos_ j \u2264 k_ j ) \u2014 the requests.",
    "output": "Print m integers r_ 1, r_ 2, . . . , r_ m ( 1 \u2264 r_ j \u2264 10^ 9 ) one per line: answers to the requests in the order they appear in the input. The value of r_ j should be equal to the value contained in the position pos_ j of the optimal subsequence for k= k_ j .",
    "note": "In the first example, for a= [ 10, 20, 10] the optimal subsequences are: for k= 1 : [ 20] , for k= 2 : [ 10, 20] , for k= 3 : [ 10, 20, 10] .",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "1227D2"
  },
  {
    "title": "Optimal Subsequences (Easy Version)",
    "url": "https://codeforces.com/problemset/problem/1227/D1",
    "history": "This is the easier version of the problem. In this version 1 \u2264 n, m \u2264 100 . You can hack this problem only if you solve and lock both problems. You are given a sequence of integers a= [ a_ 1, a_ 2, . . . , a_ n] of length n . Its subsequence is obtained by removing zero or more elements from the sequence a ( they do not necessarily go consecutively) . For example, for the sequence a= [ 11, 20, 11, 33, 11, 20, 11] : [ 11, 20, 11, 33, 11, 20, 11] , [ 11, 20, 11, 33, 11, 20] , [ 11, 11, 11, 11] , [ 20] , [ 33, 20] are subsequences ( these are just some of the long list) ; [ 40] , [ 33, 33] , [ 33, 20, 20] , [ 20, 20, 11, 11] are not subsequences. Suppose that an additional non- negative integer k ( 1 \u2264 k \u2264 n ) is given, then the subsequence is called optimal if: it has a length of k and the sum of its elements is the maximum possible among all subsequences of length k ; and among all subsequences of length k that satisfy the previous item, it is lexicographically minimal. Recall that the sequence b= [ b_ 1, b_ 2, . . . , b_ k] is lexicographically smaller than the sequence c= [ c_ 1, c_ 2, . . . , c_ k] if the first element ( from the left) in which they differ less in the sequence b than in c . Formally: there exists t ( 1 \u2264 t \u2264 k ) such that b_ 1= c_ 1 , b_ 2= c_ 2 , . . . , b_ t- 1= c_ t- 1 and at the same time b_ t< c_ t . For example: [ 10, 20, 20] lexicographically less than [ 10, 21, 1] , [ 7, 99, 99] is lexicographically less than [ 10, 21, 1] , [ 10, 21, 0] is lexicographically less than [ 10, 21, 1] . You are given a sequence of a= [ a_ 1, a_ 2, . . . , a_ n] and m requests, each consisting of two numbers k_ j and pos_ j ( 1 \u2264 k \u2264 n , 1 \u2264 pos_ j \u2264 k_ j ) . For each query, print the value that is in the index pos_ j of the optimal subsequence of the given sequence a for k= k_ j . For example, if n= 4 , a= [ 10, 20, 30, 20] , k_ j= 2 , then the optimal subsequence is [ 20, 30] \u2014 it is the minimum lexicographically among all subsequences of length 2 with the maximum total sum of items. Thus, the answer to the request k_ j= 2 , pos_ j= 1 is the number 20 , and the answer to the request k_ j= 2 , pos_ j= 2 is the number 30 .",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 100 ) \u2014 the length of the sequence a . The second line contains elements of the sequence a : integer numbers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) . The third line contains an integer m ( 1 \u2264 m \u2264 100 ) \u2014 the number of requests. The following m lines contain pairs of integers k_ j and pos_ j ( 1 \u2264 k \u2264 n , 1 \u2264 pos_ j \u2264 k_ j ) \u2014 the requests.",
    "output": "Print m integers r_ 1, r_ 2, . . . , r_ m ( 1 \u2264 r_ j \u2264 10^ 9 ) one per line: answers to the requests in the order they appear in the input. The value of r_ j should be equal to the value contained in the position pos_ j of the optimal subsequence for k= k_ j .",
    "note": "In the first example, for a= [ 10, 20, 10] the optimal subsequences are: for k= 1 : [ 20] , for k= 2 : [ 10, 20] , for k= 3 : [ 10, 20, 10] .",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "1227D1"
  },
  {
    "title": "Stack Exterminable Arrays",
    "url": "https://codeforces.com/problemset/problem/1223/F",
    "history": "Let' s look at the following process: initially you have an empty stack and an array s of the length l . You are trying to push array elements to the stack in the order s_ 1, s_ 2, s_ 3, . . . s_ l . Moreover, if the stack is empty or the element at the top of this stack is not equal to the current element, then you just push the current element to the top of the stack. Otherwise, you don' t push the current element to the stack and, moreover, pop the top element of the stack. If after this process the stack remains empty, the array s is considered stack exterminable. There are samples of stack exterminable arrays: [ 1, 1] ; [ 2, 1, 1, 2] ; [ 1, 1, 2, 2] ; [ 1, 3, 3, 1, 2, 2] ; [ 3, 1, 3, 3, 1, 3] ; [ 3, 3, 3, 3, 3, 3] ; [ 5, 1, 2, 2, 1, 4, 4, 5] ; Let' s consider the changing of stack more details if s = [ 5, 1, 2, 2, 1, 4, 4, 5] ( the top of stack is highlighted) . after pushing s_ 1 = 5 the stack turn into [ 5] ; after pushing s_ 2 = 1 the stack turn into [ 5, 1] ; after pushing s_ 3 = 2 the stack turn into [ 5, 1, 2] ; after pushing s_ 4 = 2 the stack turn into [ 5, 1] ; after pushing s_ 5 = 1 the stack turn into [ 5] ; after pushing s_ 6 = 4 the stack turn into [ 5, 4] ; after pushing s_ 7 = 4 the stack turn into [ 5] ; after pushing s_ 8 = 5 the stack is empty. You are given an array a_ 1, a_ 2, . . . , a_ n . You have to calculate the number of its subarrays which are stack exterminable. Note, that you have to answer q independent queries.",
    "input": "The first line contains one integer q ( 1 \u2264 q \u2264 3 \u00b7 10^ 5 ) \u2014 the number of queries. The first line of each query contains one integer n ( 1 \u2264 n \u2264 3 \u00b7 10^ 5 ) \u2014 the length of array a . The second line of each query contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 the elements. It is guaranteed that the sum of all n over all queries does not exceed 3 \u00b7 10^ 5 .",
    "output": "For each test case print one integer in single line \u2014 the number of stack exterminable subarrays of the array a .",
    "note": "In the first query there are four stack exterminable subarrays: a_ 1 . . . 4 = [ 2, 1, 1, 2] , a_ 2 . . . 3 = [ 1, 1] , a_ 2 . . . 5 = [ 1, 1, 2, 2] , a_ 4 . . . 5 = [ 2, 2] . In the second query, only one subarray is exterminable subarray \u2014 a_ 3 . . . 4 . In the third query, there are eight stack exterminable subarrays: a_ 1 . . . 8, a_ 2 . . . 5, a_ 2 . . . 7, a_ 2 . . . 9, a_ 3 . . . 4, a_ 6 . . . 7, a_ 6 . . . 9, a_ 8 . . . 9 .",
    "topics": [
      "data structures",
      "divide and conquer",
      "dp",
      "hashing"
    ],
    "id": "1223F"
  },
  {
    "title": "Choose a Square",
    "url": "https://codeforces.com/problemset/problem/1221/F",
    "history": "Petya recently found a game \" Choose a Square\" . In this game, there are n points numbered from 1 to n on an infinite field. The i - th point has coordinates ( x_ i, y_ i) and cost c_ i . You have to choose a square such that its sides are parallel to coordinate axes, the lower left and upper right corners belong to the line y = x , and all corners have integer coordinates. The score you get is the sum of costs of the points covered by the selected square minus the length of the side of the square. Note that the length of the side can be zero. Petya asks you to calculate the maximum possible score in the game that can be achieved by placing exactly one square.",
    "input": "The first line of the input contains one integer n ( 1 \u2264 n \u2264 5 \u00b7 10^ 5 ) \u2014 the number of points on the field. Each of the following n lines contains three integers x_ i, y_ i, c_ i ( 0 \u2264 x_ i, y_ i \u2264 10^ 9, - 10^ 6 \u2264 c_ i \u2264 10^ 6 ) \u2014 coordinates of the i - th point and its cost, respectively.",
    "output": "In the first line print the maximum score Petya can achieve. In the second line print four integers x_ 1, y_ 1, x_ 2, y_ 2 ( 0 \u2264 x_ 1, y_ 1, x_ 2, y_ 2 \u2264 2 \u00b7 10^ 9, x_ 1 = y_ 1, x_ 2 = y_ 2, x_ 1 \u2264 x_ 2 ) separated by spaces \u2014 the coordinates of the lower left and upper right corners of the square which Petya has to select in order to achieve the maximum score.",
    "note": "The field corresponding to the first example:",
    "topics": [
      "binary search",
      "data structures",
      "sortings"
    ],
    "id": "1221F"
  },
  {
    "title": "Gardener Alex",
    "url": "https://codeforces.com/problemset/problem/1220/F",
    "history": "Gardener Alex loves to grow trees. We remind that tree is a connected acyclic graph on n vertices. Today he decided to grow a rooted binary tree. A binary tree is a tree where any vertex has no more than two sons. Luckily, Alex has a permutation of numbers from 1 to n which he was presented at his last birthday, so he decided to grow a tree according to this permutation. To do so he does the following process: he finds a minimum element and makes it a root of the tree. After that permutation is divided into two parts: everything that is to the left of the minimum element, and everything that is to the right. The minimum element on the left part becomes the left son of the root, and the minimum element on the right part becomes the right son of the root. After that, this process is repeated recursively on both parts. Now Alex wants to grow a forest of trees: one tree for each cyclic shift of the permutation. He is interested in what cyclic shift gives the tree of minimum depth. Unfortunately, growing a forest is a hard and long process, but Alex wants the answer right now. Will you help him? We remind that cyclic shift of permutation a_ 1, a_ 2, . . . , a_ k, . . . , a_ n for k elements to the left is the permutation a_ k + 1, a_ k + 2, . . . , a_ n, a_ 1, a_ 2, . . . , a_ k .",
    "input": "First line contains an integer number n ( 1 \u2a7d n \u2a7d 200 000) \u2014 length of the permutation. Second line contains n integer numbers a_ 1, a_ 2, . . . , a_ n ( 1 \u2a7d a_ i \u2a7d n) , and it is guaranteed that all numbers occur exactly one time.",
    "output": "Print two numbers separated with space: minimum possible depth of a tree and how many elements we need to shift left to achieve this depth. The number of elements should be a number from 0 to n - 1 . If there are several possible answers, print any of them.",
    "note": "The following picture depicts all possible trees for sample test and cyclic shifts on which they are achieved.",
    "topics": [
      "binary search",
      "data structures"
    ],
    "id": "1220F"
  },
  {
    "title": "Workout plan",
    "url": "https://codeforces.com/problemset/problem/1218/F",
    "history": "Alan decided to get in shape for the summer, so he created a precise workout plan to follow. His plan is to go to a different gym every day during the next N days and lift X[ i] grams on day i . In order to improve his workout performance at the gym, he can buy exactly one pre- workout drink at the gym he is currently in and it will improve his performance by A grams permanently and immediately. In different gyms these pre- workout drinks can cost different amounts C[ i] because of the taste and the gym' s location but its permanent workout gains are the same. Before the first day of starting his workout plan, Alan knows he can lift a maximum of K grams. Help Alan spend a minimum total amount of money in order to reach his workout plan. If there is no way for him to complete his workout plan successfully output - 1 .",
    "input": "The first one contains two integer numbers, integers N ( 1 \u2264 N \u2264 10^ 5) and K ( 1 \u2264 K \u2264 10^ 5) \u2013 representing number of days in the workout plan and how many grams he can lift before starting his workout plan respectively. The second line contains N integer numbers X[ i] ( 1 \u2264 X[ i] \u2264 10^ 9) separated by a single space representing how many grams Alan wants to lift on day i . The third line contains one integer number A ( 1 \u2264 A \u2264 10^ 9) representing permanent performance gains from a single drink. The last line contains N integer numbers C[ i] ( 1 \u2264 C[ i] \u2264 10^ 9) , representing cost of performance booster drink in the gym he visits on day i .",
    "output": "One integer number representing minimal money spent to finish his workout plan. If he cannot finish his workout plan, output - 1.",
    "note": "First example: After buying drinks on days 2 and 4 Alan can finish his workout plan. Second example: Alan cannot lift 40000 grams on day 2.",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "1218F"
  },
  {
    "title": "Guarding warehouses",
    "url": "https://codeforces.com/problemset/problem/1218/B",
    "history": "Bob Bubblestrong just got a new job as security guard. Bob is now responsible for safety of a collection of warehouses, each containing the most valuable Bubble Cup assets - the high- quality bubbles. His task is to detect thieves inside the warehouses and call the police. Looking from the sky, each warehouse has a shape of a convex polygon. Walls of no two warehouses intersect, and of course, none of the warehouses is built inside of another warehouse. Little did the Bubble Cup bosses know how lazy Bob is and that he enjoys watching soap operas ( he heard they are full of bubbles) from the coziness of his office. Instead of going from one warehouse to another to check if warehouses are secured, the plan Bob has is to monitor all the warehouses from the comfort of his office using the special X- ray goggles. The goggles have an infinite range, so a thief in any of the warehouses could easily be spotted. However, the goggles promptly broke and the X- rays are now strong only enough to let Bob see through a single wall. Now, Bob would really appreciate if you could help him find out what is the total area inside of the warehouses monitored by the broken goggles, so that he could know how much area of the warehouses he needs to monitor in person.",
    "input": "The first line contains one integer N ( 1 \u2264 N \u2264 10^ 4 ) \u2013 the number of warehouses. The next N lines describe the warehouses. The first number of the line is integer c_ i ( 3 \u2264 c_ i \u2264 10^ 4 ) \u2013 the number corners in the i^ th warehouse, followed by c_ i pairs of integers. The j^ th pair is ( x_ j, y_ j) \u2013 the coordinates of the j^ th corner ( | x_ j| , | y_ j| \u2264 3 * 10^ 4 ) . The corners are listed in the clockwise order. The total number of corners in all the warehouses is at most 5 * 10^ 4 . Bob' s office is positioned at the point with coordinates ( 0, 0) . The office is not contained within any of the warehouses.",
    "output": "Print a single line containing a single decimal number accurate to at least four decimal places \u2013 the total area of the warehouses Bob can monitor using the broken X- ray goggles.",
    "note": "Areas monitored by the X- ray goggles are colored green and areas not monitored by the goggles are colored red. The warehouses ABCD , IJK and LMNOPQ are completely monitored using the googles. The warehouse EFGH is partially monitored using the goggles: part EFW is not monitored because to monitor each point inside it, the X- rays must go through two walls of warehouse ABCD . The warehouse RUTS is not monitored from the Bob' s office, because there are two walls of the warehouse IJK between Bob' s office and each point in RUTS . The total area monitored by the goggles is P = P_ ABCD + P_ FGHW + P_ IJK + P_ LMNOPQ = 4 + 3. 333333333333 + 2 + 4 = 13. 333333333333 .",
    "topics": [
      "data structures",
      "geometry"
    ],
    "id": "1218B"
  },
  {
    "title": "Forced Online Queries Problem",
    "url": "https://codeforces.com/problemset/problem/1217/F",
    "history": "You are given an undirected graph with n vertices numbered from 1 to n . Initially there are no edges. You are asked to perform some queries on the graph. Let last be the answer to the latest query of the second type, it is set to 0 before the first such query. Then the queries are the following: 1 x y ( 1 \u2264 x, y \u2264 n , x y ) \u2014 add an undirected edge between the vertices ( x + last - 1) mod n + 1 and ( y + last - 1) mod n + 1 if it doesn' t exist yet, otherwise remove it; 2 x y ( 1 \u2264 x, y \u2264 n , x y ) \u2014 check if there exists a path between the vertices ( x + last - 1) mod n + 1 and ( y + last - 1) mod n + 1 , which goes only through currently existing edges, and set last to 1 if so and 0 otherwise. Good luck!",
    "input": "The first line contains two integer numbers n and m ( 2 \u2264 n, m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of vertices and the number of queries, respectively. Each of the following m lines contains a query of one of two aforementioned types. It is guaranteed that there is at least one query of the second type.",
    "output": "Print a string, consisting of characters ' 0' and ' 1' . The i - th character should be the answer to the i - th query of the second type. Therefore the length of the string should be equal to the number of queries of the second type.",
    "note": "The converted queries in the first example are: 1 1 2 1 1 3 2 3 2 1 3 5 2 4 5 1 2 4 2 3 4 1 2 4 2 5 4 The converted queries in the second example are: 1 1 2 1 2 3 1 3 1 2 1 3 1 1 3 2 3 1 1 2 3 2 2 3 2 1 2",
    "topics": [
      "data structures",
      "divide and conquer",
      "dsu",
      "graphs",
      "trees"
    ],
    "id": "1217F"
  },
  {
    "title": "Sum Queries?",
    "url": "https://codeforces.com/problemset/problem/1217/E",
    "history": "Let' s define a balanced multiset the following way. Write down the sum of all elements of the multiset in its decimal representation. For each position of that number check if the multiset includes at least one element such that the digit of the element and the digit of the sum at that position are the same. If that holds for every position, then the multiset is balanced. Otherwise it' s unbalanced. For example, multiset { 20, 300, 10001} is balanced and multiset { 20, 310, 10001} is unbalanced: The red digits mark the elements and the positions for which these elements have the same digit as the sum. The sum of the first multiset is 10321 , every position has the digit required. The sum of the second multiset is 10331 and the second- to- last digit doesn' t appear in any number, thus making the multiset unbalanced. You are given an array a_ 1, a_ 2, . . . , a_ n , consisting of n integers. You are asked to perform some queries on it. The queries can be of two types: 1 i x \u2014 replace a_ i with the value x ; 2 l r \u2014 find the unbalanced subset of the multiset of the numbers a_ l, a_ l + 1, . . . , a_ r with the minimum sum, or report that no unbalanced subset exists. Note that the empty multiset is balanced. For each query of the second type print the lowest sum of the unbalanced subset. Print - 1 if no unbalanced subset exists.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of elements in the array and the number of queries, respectively. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i < 10^ 9 ) . Each of the following m lines contains a query of one of two types: 1 i x ( 1 \u2264 i \u2264 n , 1 \u2264 x < 10^ 9 ) \u2014 replace a_ i with the value x ; 2 l r ( 1 \u2264 l \u2264 r \u2264 n ) \u2014 find the unbalanced subset of the multiset of the numbers a_ l, a_ l + 1, . . . , a_ r with the lowest sum, or report that no unbalanced subset exists. It is guaranteed that there is at least one query of the second type.",
    "output": "For each query of the second type print the lowest sum of the unbalanced subset. Print - 1 if no unbalanced subset exists.",
    "note": "All the subsets of multiset { 20, 300, 10001} are balanced, thus the answer is - 1. The possible unbalanced subsets in the third query are { 20, 310} and { 20, 310, 10001} . The lowest sum one is { 20, 310} . Note that you are asked to choose a subset, not a subsegment, thus the chosen elements might not be adjancent in the array. The fourth query includes only the empty subset and subset { 20} . Both of them are balanced. The last query includes the empty subset and the subsets { 20} , { 20} and { 20, 20} . Only { 20, 20} is unbalanced, its sum is 40 . Note that you are asked to choose a multiset, thus it might include equal elements.",
    "topics": [
      "data structures",
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1217E"
  },
  {
    "title": "Wi-Fi",
    "url": "https://codeforces.com/problemset/problem/1216/F",
    "history": "You work as a system administrator in a dormitory, which has n rooms one after another along a straight hallway. Rooms are numbered from 1 to n . You have to connect all n rooms to the Internet. You can connect each room to the Internet directly, the cost of such connection for the i - th room is i coins. Some rooms also have a spot for a router. The cost of placing a router in the i - th room is also i coins. You cannot place a router in a room which does not have a spot for it. When you place a router in the room i , you connect all rooms with the numbers from max( 1, i - k) to min( n, i + k) inclusive to the Internet, where k is the range of router. The value of k is the same for all routers. Calculate the minimum total cost of connecting all n rooms to the Internet. You can assume that the number of rooms which have a spot for a router is not greater than the number of routers you have.",
    "input": "The first line of the input contains two integers n and k ( 1 \u2264 n, k \u2264 2 \u00b7 10^ 5 ) \u2014 the number of rooms and the range of each router. The second line of the input contains one string s of length n , consisting only of zeros and ones. If the i - th character of the string equals to ' 1' then there is a spot for a router in the i - th room. If the i - th character of the string equals to ' 0' then you cannot place a router in the i - th room.",
    "output": "Print one integer \u2014 the minimum total cost of connecting all n rooms to the Internet.",
    "note": "In the first example it is enough to place the router in the room 3 , then all rooms will be connected to the Internet. The total cost of connection is 3 . In the second example you can place routers nowhere, so you need to connect all rooms directly. Thus, the total cost of connection of all rooms is 1 + 2 + 3 + 4 + 5 + 6 = 21 . In the third example you need to connect the room 1 directly and place the router in the room 3 . Thus, the total cost of connection of all rooms is 1 + 3 = 4 . In the fourth example you need to place routers in rooms 5 and 10 . Then all rooms will be connected to the Internet. The total cost of connection is 5 + 10 = 15 .",
    "topics": [
      "data structures",
      "dp",
      "greedy"
    ],
    "id": "1216F"
  },
  {
    "title": "Feeling Good",
    "url": "https://codeforces.com/problemset/problem/1214/G",
    "history": "Recently biologists came to a fascinating conclusion about how to find a chameleon mood. Consider chameleon body to be a rectangular table n \u00d7 m , each cell of which may be green or blue and may change between these two colors. We will denote as ( x, y) ( 1 \u2264 x \u2264 n , 1 \u2264 y \u2264 m ) the cell in row x and column y . Let us define a chameleon good mood certificate to be four cells which are corners of some subrectangle of the table, such that colors in opposite cells among these four are similar, and at the same time not all of the four cell colors are similar. Formally, it is a group of four cells ( x_ 1, y_ 1) , ( x_ 1, y_ 2) , ( x_ 2, y_ 1) , ( x_ 2, y_ 2) for some 1 \u2264 x_ 1 < x_ 2 \u2264 n , 1 \u2264 y_ 1 < y_ 2 \u2264 m , that colors of ( x_ 1, y_ 1) and ( x_ 2, y_ 2) coincide and colors of ( x_ 1, y_ 2) and ( x_ 2, y_ 1) coincide, but not all of the four cells share the same color. It was found that whenever such four cells are present, chameleon is in good mood, and vice versa: if there are no such four cells, chameleon is in bad mood. You are asked to help scientists write a program determining the mood of chameleon. Let us consider that initially all cells of chameleon are green. After that chameleon coloring may change several times. On one change, colors of contiguous segment of some table row are replaced with the opposite. Formally, each color change is defined by three integers a , l , r ( 1 \u2264 a \u2264 n , 1 \u2264 l \u2264 r \u2264 m ) . On such change colors of all cells ( a, b) such that l \u2264 b \u2264 r are replaced with the opposite. Write a program that reports mood of the chameleon after each change. Additionally, if the chameleon mood is good, program should find out any four numbers x_ 1 , y_ 1 , x_ 2 , y_ 2 such that four cells ( x_ 1, y_ 1) , ( x_ 1, y_ 2) , ( x_ 2, y_ 1) , ( x_ 2, y_ 2) are the good mood certificate.",
    "input": "The first line of input contains three integers n , m , q ( 1 \u2264 n, m \u2264 2000 , 1 \u2264 q \u2264 500 000 ) , the sizes of the table and the number of changes respectively. Each of the following q lines contains 3 integers a_ i , l_ i , r_ i ( 1 \u2264 a_ i \u2264 n , 1 \u2264 l_ i \u2264 r_ i \u2264 m ) , describing i - th coloring change.",
    "output": "Print q lines. In the i - th line report the chameleon mood after first i color changes for all 1 \u2264 i \u2264 q . If chameleon is in bad mood, print the only integer - 1 . Otherwise, print four integers x_ 1 , y_ 1 , x_ 2 , y_ 2 ( 1 \u2264 x_ 1 < x_ 2 \u2264 n , 1 \u2264 y_ 1 < y_ 2 \u2264 m ) such that four cells ( x_ 1, y_ 1) , ( x_ 1, y_ 2) , ( x_ 2, y_ 1) , ( x_ 2, y_ 2) are the good mood certificate. If there are several ways to choose such four integers, print any valid one.",
    "note": "",
    "topics": [
      "bitmasks",
      "data structures"
    ],
    "id": "1214G"
  },
  {
    "title": "Bad Sequence",
    "url": "https://codeforces.com/problemset/problem/1214/C",
    "history": "Petya' s friends made him a birthday present \u2014 a bracket sequence. Petya was quite disappointed with his gift, because he dreamed of correct bracket sequence, yet he told his friends nothing about his dreams and decided to fix present himself. To make everything right, Petya is going to move at most one bracket from its original place in the sequence to any other position. Reversing the bracket ( e. g. turning \" ( \" into \" ) \" or vice versa) isn' t allowed. We remind that bracket sequence s is called correct if: s is empty; s is equal to \" ( t ) \" , where t is correct bracket sequence; s is equal to t_ 1 t_ 2 , i. e. concatenation of t_ 1 and t_ 2 , where t_ 1 and t_ 2 are correct bracket sequences. For example, \" ( ( ) ( ) ) \" , \" ( ) \" are correct, while \" ) ( \" and \" ( ) ) \" are not. Help Petya to fix his birthday present and understand whether he can move one bracket so that the sequence becomes correct.",
    "input": "First of line of input contains a single number n ( 1 \u2264 n \u2264 200 000 ) \u2014 length of the sequence which Petya received for his birthday. Second line of the input contains bracket sequence of length n , containing symbols \" ( \" and \" ) \" .",
    "output": "Print \" Yes\" if Petya can make his sequence correct moving at most one bracket. Otherwise print \" No\" .",
    "note": "In the first example, Petya can move first bracket to the end, thus turning the sequence into \" ( ) \" , which is correct bracket sequence. In the second example, there is no way to move at most one bracket so that the sequence becomes correct. In the third example, the sequence is already correct and there' s no need to move brackets.",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "1214C"
  },
  {
    "title": "Unstable String Sort",
    "url": "https://codeforces.com/problemset/problem/1213/F",
    "history": "Authors have come up with the string s consisting of n lowercase Latin letters. You are given two permutations of its indices ( not necessary equal) p and q ( both of length n ) . Recall that the permutation is the array of length n which contains each integer from 1 to n exactly once. For all i from 1 to n- 1 the following properties hold: s[ p_ i] \u2264 s[ p_ i + 1] and s[ q_ i] \u2264 s[ q_ i + 1] . It means that if you will write down all characters of s in order of permutation indices, the resulting string will be sorted in the non- decreasing order. Your task is to restore any such string s of length n consisting of at least k distinct lowercase Latin letters which suits the given permutations. If there are multiple answers, you can print any of them.",
    "input": "The first line of the input contains two integers n and k ( 1 \u2264 n \u2264 2 \u00b7 10^ 5, 1 \u2264 k \u2264 26 ) \u2014 the length of the string and the number of distinct characters required. The second line of the input contains n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n , all p_ i are distinct integers from 1 to n ) \u2014 the permutation p . The third line of the input contains n integers q_ 1, q_ 2, . . . , q_ n ( 1 \u2264 q_ i \u2264 n , all q_ i are distinct integers from 1 to n ) \u2014 the permutation q .",
    "output": "If it is impossible to find the suitable string, print \" NO\" on the first line. Otherwise print \" YES\" on the first line and string s on the second line. It should consist of n lowercase Latin letters, contain at least k distinct characters and suit the given permutations. If there are multiple answers, you can print any of them.",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "implementation",
      "strings"
    ],
    "id": "1213F"
  },
  {
    "title": "Bad Prices",
    "url": "https://codeforces.com/problemset/problem/1213/B",
    "history": "Polycarp analyzes the prices of the new berPhone. At his disposal are the prices for n last days: a_ 1, a_ 2, . . . , a_ n , where a_ i is the price of berPhone on the day i . Polycarp considers the price on the day i to be bad if later ( that is, a day with a greater number) berPhone was sold at a lower price. For example, if n= 6 and a= [ 3, 9, 4, 6, 7, 5] , then the number of days with a bad price is 3 \u2014 these are days 2 ( a_ 2= 9 ) , 4 ( a_ 4= 6 ) and 5 ( a_ 5= 7 ) . Print the number of days with a bad price. You have to answer t independent data sets.",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 10000 ) \u2014 the number of sets of input data in the test. Input data sets must be processed independently, one after another. Each input data set consists of two lines. The first line contains an integer n ( 1 \u2264 n \u2264 150000 ) \u2014 the number of days. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 6 ) , where a_ i is the price on the i - th day. It is guaranteed that the sum of n over all data sets in the test does not exceed 150000 .",
    "output": "Print t integers, the j - th of which should be equal to the number of days with a bad price in the j - th input data set.",
    "note": "",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "1213B"
  },
  {
    "title": "Moving Walkways",
    "url": "https://codeforces.com/problemset/problem/1209/H",
    "history": "Airports often use moving walkways to help you walking big distances faster. Each such walkway has some speed that effectively increases your speed. You can stand on such a walkway and let it move you, or you could also walk and then your effective speed is your walking speed plus walkway' s speed. Limak wants to get from point 0 to point L on a straight line. There are n disjoint walkways in between. The i - th walkway is described by two integers x_ i and y_ i and a real value s_ i . The i - th walkway starts at x_ i , ends at y_ i and has speed s_ i . Every walkway is located inside the segment [ 0, L] and no two walkways have positive intersection. However, they can touch by endpoints. Limak needs to decide how to distribute his energy. For example, it might make more sense to stand somewhere ( or to walk slowly) to then have a lot of energy to walk faster. Limak' s initial energy is 0 and it must never drop below that value. At any moment, he can walk with any speed v in the interval [ 0, 2] and it will cost him v energy per second, but he continuously recovers energy with speed of 1 energy per second. So, when he walks with speed v , his energy increases by ( 1- v) . Note that negative value would mean losing energy. In particular, he can walk with speed 1 and this won' t change his energy at all, while walking with speed 0. 77 effectively gives him 0. 23 energy per second. Limak can choose his speed arbitrarily ( any real value in interval [ 0, 2] ) at every moment of time ( including the moments when he is located on non- integer positions) . Everything is continuous ( non- discrete) . What is the fastest time Limak can get from 0 to L ?",
    "input": "The first line contains integers n and L ( 1 \u2264 n \u2264 200 000 , 1 \u2264 L \u2264 10^ 9 ) , the number of walkways and the distance to walk. Each of the next n lines contains integers x_ i , y_ i and real value s_ i ( 0 \u2264 x_ i < y_ i \u2264 L , 0. 1 \u2264 s_ i \u2264 10. 0 ) . The value s_ i is given with at most 9 digits after decimal point. It' s guaranteed, that no two walkways have a positive intersection. The walkways are listed from left to right. That is, y_ i \u2264 x_ i + 1 for 1 \u2264 i \u2264 n - 1 .",
    "output": "Print one real value, the fastest possible time to reach L . Your answer will be considered correct if its absolute or relative error won' t exceed 10^ - 9 .",
    "note": "The drawings show the first two examples. In the first one, there is a walkway from 0 to 2 with speed 2. 0 and Limak wants to get to point 5 . The second example has a walkway from 2 to 4 with speed 0. 91 . In the first example, one of optimal strategies is as follows. Get from 0 to 2 by standing still on the walkway. It moves you with speed 2 so it takes 1 second and you save up 1 energy. Get from 2 to 4 by walking with max speed 2 for next 1 second. It takes 1 second again and the energy drops to 0 . Get from 4 to 5 by walking with speed 1 . It takes 1 second and the energy stays constant at the value 0 . The total time is 1 + 1 + 1 = 3 .",
    "topics": [
      "data structures",
      "greedy",
      "math"
    ],
    "id": "1209H"
  },
  {
    "title": "Into Blocks (hard version)",
    "url": "https://codeforces.com/problemset/problem/1209/G2",
    "history": "This is a harder version of the problem. In this version q \u2264 200 000 . A sequence of integers is called nice if its elements are arranged in blocks like in [ 3, 3, 3, 4, 1, 1] . Formally, if two elements are equal, everything in between must also be equal. Let' s define difficulty of a sequence as a minimum possible number of elements to change to get a nice sequence. However, if you change at least one element of value x to value y , you must also change all other elements of value x into y as well. For example, for [ 3, 3, 1, 3, 2, 1, 2] it isn' t allowed to change first 1 to 3 and second 1 to 2 . You need to leave 1 ' s untouched or change them to the same value. You are given a sequence of integers a_ 1, a_ 2, . . . , a_ n and q updates. Each update is of form \" i x \" \u2014 change a_ i to x . Updates are not independent ( the change stays for the future) . Print the difficulty of the initial sequence and of the sequence after every update.",
    "input": "The first line contains integers n and q ( 1 \u2264 n \u2264 200 000 , 0 \u2264 q \u2264 200 000 ) , the length of the sequence and the number of the updates. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 200 000 ) , the initial sequence. Each of the following q lines contains integers i_ t and x_ t ( 1 \u2264 i_ t \u2264 n , 1 \u2264 x_ t \u2264 200 000 ) , the position and the new value for this position.",
    "output": "Print q+ 1 integers, the answer for the initial sequence and the answer after every update.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": "1209G2"
  },
  {
    "title": "Into Blocks (easy version)",
    "url": "https://codeforces.com/problemset/problem/1209/G1",
    "history": "This is an easier version of the next problem. In this version, q = 0 . A sequence of integers is called nice if its elements are arranged in blocks like in [ 3, 3, 3, 4, 1, 1] . Formally, if two elements are equal, everything in between must also be equal. Let' s define difficulty of a sequence as a minimum possible number of elements to change to get a nice sequence. However, if you change at least one element of value x to value y , you must also change all other elements of value x into y as well. For example, for [ 3, 3, 1, 3, 2, 1, 2] it isn' t allowed to change first 1 to 3 and second 1 to 2 . You need to leave 1 ' s untouched or change them to the same value. You are given a sequence of integers a_ 1, a_ 2, . . . , a_ n and q updates. Each update is of form \" i x \" \u2014 change a_ i to x . Updates are not independent ( the change stays for the future) . Print the difficulty of the initial sequence and of the sequence after every update.",
    "input": "The first line contains integers n and q ( 1 \u2264 n \u2264 200 000 , q = 0 ) , the length of the sequence and the number of the updates. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 200 000 ) , the initial sequence. Each of the following q lines contains integers i_ t and x_ t ( 1 \u2264 i_ t \u2264 n , 1 \u2264 x_ t \u2264 200 000 ) , the position and the new value for this position.",
    "output": "Print q+ 1 integers, the answer for the initial sequence and the answer after every update.",
    "note": "",
    "topics": [
      "data structures",
      "dsu",
      "greedy",
      "implementation",
      "two pointers"
    ],
    "id": "1209G1"
  },
  {
    "title": "Koala and Notebook",
    "url": "https://codeforces.com/problemset/problem/1209/F",
    "history": "Koala Land consists of m bidirectional roads connecting n cities. The roads are numbered from 1 to m by order in input. It is guaranteed, that one can reach any city from every other city. Koala starts traveling from city 1 . Whenever he travels on a road, he writes its number down in his notebook. He doesn' t put spaces between the numbers, so they all get concatenated into a single number. Before embarking on his trip, Koala is curious about the resulting number for all possible destinations. For each possible destination, what is the smallest number he could have written for it? Since these numbers may be quite large, print their remainders modulo 10^ 9+ 7 . Please note, that you need to compute the remainder of the minimum possible number, not the minimum possible remainder.",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 10^ 5, n - 1 \u2264 m \u2264 10^ 5 ) , the number of cities and the number of roads, respectively. The i - th of the following m lines contains integers x_ i and y_ i ( 1 \u2264 x_ i, y_ i \u2264 n , x_ i y_ i ) , representing a bidirectional road between cities x_ i and y_ i . It is guaranteed, that for any pair of cities there is at most one road connecting them, and that one can reach any city from every other city.",
    "output": "Print n - 1 integers, the answer for every city except for the first city. The i - th integer should be equal to the smallest number he could have written for destination i+ 1 . Since this number may be large, output its remainder modulo 10^ 9+ 7 .",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "graphs",
      "shortest paths",
      "strings",
      "trees"
    ],
    "id": "1209F"
  },
  {
    "title": "Red Blue Tree",
    "url": "https://codeforces.com/problemset/problem/1208/H",
    "history": "You are given a tree of n nodes. The tree is rooted at node 1 , which is not considered as a leaf regardless of its degree. Each leaf of the tree has one of the two colors: red or blue. Leaf node v initially has color s_ v . The color of each of the internal nodes ( including the root) is determined as follows. Let b be the number of blue immediate children, and r be the number of red immediate children of a given vertex. Then the color of this vertex is blue if and only if b - r \u2265 k , otherwise red. Integer k is a parameter that is same for all the nodes. You need to handle the following types of queries: 1 v: print the color of node v ; 2 v c: change the color of leaf v to c ( c = 0 means red, c = 1 means blue) ; 3 h: update the current value of k to h .",
    "input": "The first line of the input consists of two integers n and k ( 2 \u2264 n \u2264 10^ 5 , - n \u2264 k \u2264 n ) \u2014 the number of nodes and the initial parameter k . Each of the next n - 1 lines contains two integers u and v ( 1 \u2264 u, v \u2264 n ) , denoting that there is an edge between vertices u and v . The next line consists of n space separated integers \u2014 the initial array s ( - 1 \u2264 s_ i \u2264 1 ) . s_ i = 0 means that the color of node i is red. s_ i = 1 means that the color of node i is blue. s_ i = - 1 means that the node i is not a leaf. The next line contains an integer q ( 1 \u2264 q \u2264 10^ 5 ) , the number of queries. q lines follow, each containing a query in one of the following queries: 1 v ( 1 \u2264 v \u2264 n ) : print the color of node v ; 2 v c ( 1 \u2264 v \u2264 n , c = 0 or c = 1 ) : change the color of leaf v to c ( c = 0 means red, c = 1 means blue) . It is guaranteed that v is a leaf; 3 h ( - n \u2264 h \u2264 n ) : update the current value of k to h .",
    "output": "For each query of the first type, print 0 if the color of vertex v is red, and 1 otherwise.",
    "note": "Figures: ( i) The initial tree ( ii) The tree after the 3rd query ( iii) The tree after the 7th query",
    "topics": [
      "data structures",
      "implementation",
      "trees"
    ],
    "id": "1208H"
  },
  {
    "title": "Let Them Slide",
    "url": "https://codeforces.com/problemset/problem/1208/E",
    "history": "You are given n arrays that can have different sizes. You also have a table with w columns and n rows. The i - th array is placed horizontally in the i - th row. You can slide each array within its row as long as it occupies several consecutive cells and lies completely inside the table. You need to find the maximum sum of the integers in the j - th column for each j from 1 to w independently. Optimal placements for columns 1 , 2 and 3 are shown on the pictures from left to right. Note that you can exclude any array out of a column provided it remains in the window. In this case its value is considered to be zero.",
    "input": "The first line contains two integers n ( 1 \u2264 n \u2264 10^ 6 ) and w ( 1 \u2264 w \u2264 10^ 6 ) \u2014 the number of arrays and the width of the table. Each of the next n lines consists of an integer l_ i ( 1 \u2264 l_ i\u2264 w ) , the length of the i - th array, followed by l_ i integers a_ i1, a_ i2, . . . , a_ il_ i ( - 10^ 9\u2264 a_ ij\u2264 10^ 9 ) \u2014 the elements of the array. The total length of the arrays does no exceed 10^ 6 .",
    "output": "Print w integers, the i - th of them should be the maximum sum for column i .",
    "note": "Illustration for the first example is in the statement.",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "1208E"
  },
  {
    "title": "Restore Permutation",
    "url": "https://codeforces.com/problemset/problem/1208/D",
    "history": "An array of integers p_ 1, p_ 2, . . . , p_ n is called a permutation if it contains each number from 1 to n exactly once. For example, the following arrays are permutations: [ 3, 1, 2] , [ 1] , [ 1, 2, 3, 4, 5] and [ 4, 3, 1, 2] . The following arrays are not permutations: [ 2] , [ 1, 1] , [ 2, 3, 4] . There is a hidden permutation of length n . For each index i , you are given s_ i , which equals to the sum of all p_ j such that j < i and p_ j < p_ i . In other words, s_ i is the sum of elements before the i - th element that are smaller than the i - th element. Your task is to restore the permutation.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the size of the permutation. The second line contains n integers s_ 1, s_ 2, . . . , s_ n ( 0 \u2264 s_ i\u2264n( n- 1) / 2 ) . It is guaranteed that the array s corresponds to a valid permutation of length n .",
    "output": "Print n integers p_ 1, p_ 2, . . . , p_ n \u2014 the elements of the restored permutation. We can show that the answer is always unique.",
    "note": "In the first example for each i there is no index j satisfying both conditions, hence s_ i are always 0 . In the second example for i = 2 it happens that j = 1 satisfies the conditions, so s_ 2 = p_ 1 . In the third example for i = 2, 3, 4 only j = 1 satisfies the conditions, so s_ 2 = s_ 3 = s_ 4 = 1 . For i = 5 all j = 1, 2, 3, 4 are possible, so s_ 5 = p_ 1 + p_ 2 + p_ 3 + p_ 4 = 10 .",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "1208D"
  },
  {
    "title": "Indie Album",
    "url": "https://codeforces.com/problemset/problem/1207/G",
    "history": "Mishka' s favourite experimental indie band has recently dropped a new album! Songs of that album share one gimmick. Each name s_ i is one of the following types: 1 c \u2014 a single lowercase Latin letter; 2 j c \u2014 name s_ j ( 1 \u2264 j < i ) with a single lowercase Latin letter appended to its end. Songs are numbered from 1 to n . It' s guaranteed that the first song is always of type 1 . Vova is rather interested in the new album but he really doesn' t have the time to listen to it entirely. Thus he asks Mishka some questions about it to determine if some song is worth listening to. Questions have the following format: i t \u2014 count the number of occurrences of string t in s_ i ( the name of the i - th song of the album) as a continuous substring, t consists only of lowercase Latin letters. Mishka doesn' t question the purpose of that information, yet he struggles to provide it. Can you please help Mishka answer all Vova' s questions?",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 4 \u00b7 10^ 5 ) \u2014 the number of songs in the album. Each of the next n lines contains the desciption of the i - th song of the album in the following format: 1 c \u2014 s_ i is a single lowercase Latin letter; 2 j c \u2014 s_ i is the name s_ j ( 1 \u2264 j < i ) with a single lowercase Latin letter appended to its end. The next line contains a single integer m ( 1 \u2264 m \u2264 4 \u00b7 10^ 5 ) \u2014 the number of Vova' s questions. Each of the next m lines contains the desciption of the j - th Vova' s question in the following format: i t ( 1 \u2264 i \u2264 n , 1 \u2264 | t| \u2264 4 \u00b7 10^ 5 ) \u2014 count the number of occurrences of string t in s_ i ( the name of the i - th song of the album) as a continuous substring, t consists only of lowercase Latin letters. It' s guaranteed that the total length of question strings t doesn' t exceed 4 \u00b7 10^ 5 .",
    "output": "For each question print a single integer \u2014 the number of occurrences of the question string t in the name of the i - th song of the album as a continuous substring.",
    "note": "Song names of the first example: d da dad dada dadad dadada dadadad dadadada d do dok doki dokid dokido dokidok dokidoki do dok doki dokidoki Thus the occurrences for each question string are: string \" da\" starts in positions [ 1, 3, 5, 7] in the name \" dadadada\" ; string \" dada\" starts in positions [ 1, 3, 5] in the name \" dadadada\" ; string \" ada\" starts in positions [ 2, 4, 6] in the name \" dadadada\" ; string \" dada\" starts in positions [ 1, 3] in the name \" dadada\" ; no occurrences of string \" dada\" in the name \" dad\" ; string \" doki\" starts in position [ 1] in the name \" doki\" ; string \" ok\" starts in position [ 2] in the name \" doki\" ; string \" doki\" starts in positions [ 1, 5] in the name \" dokidoki\" ; string \" doki\" starts in position [ 1] in the name \" dokidok\" ; string \" d\" starts in position [ 1] in the name \" d\" ; no occurrences of string \" a\" in the name \" d\" ; string \" doki\" starts in positions [ 1, 5] in the name \" dokidoki\" .",
    "topics": [
      "data structures",
      "dfs and similar",
      "hashing",
      "string suffix structures",
      "strings",
      "trees"
    ],
    "id": "1207G"
  },
  {
    "title": "Remainder Problem",
    "url": "https://codeforces.com/problemset/problem/1207/F",
    "history": "You are given an array a consisting of 500000 integers ( numbered from 1 to 500000 ) . Initially all elements of a are zero. You have to process two types of queries to this array: 1 x y \u2014 increase a_ x by y ; 2 x y \u2014 compute \u2211_ i \u2208 R( x, y) a_ i , where R( x, y) is the set of all integers from 1 to 500000 which have remainder y modulo x . Can you process all the queries?",
    "input": "The first line contains one integer q ( 1 \u2264 q \u2264 500000 ) \u2014 the number of queries. Then q lines follow, each describing a query. The i - th line contains three integers t_ i , x_ i and y_ i ( 1 \u2264 t_ i \u2264 2 ) . If t_ i = 1 , then it is a query of the first type, 1 \u2264 x_ i \u2264 500000 , and - 1000 \u2264 y_ i \u2264 1000 . If t_ i = 2 , then it it a query of the second type, 1 \u2264 x_ i \u2264 500000 , and 0 \u2264 y_ i < x_ i . It is guaranteed that there will be at least one query of type 2 .",
    "output": "For each query of type 2 print one integer \u2014 the answer to it.",
    "note": "",
    "topics": [
      "brute force",
      "data structures",
      "implementation"
    ],
    "id": "1207F"
  },
  {
    "title": "Kirk and a Binary String (hard version)",
    "url": "https://codeforces.com/problemset/problem/1204/D2",
    "history": "The only difference between easy and hard versions is the length of the string. You can hack this problem if you solve it. But you can hack the previous problem only if you solve both problems. Kirk has a binary string s ( a string which consists of zeroes and ones) of length n and he is asking you to find a binary string t of the same length which satisfies the following conditions: For any l and r ( 1 \u2264 l \u2264 r \u2264 n ) the length of the longest non- decreasing subsequence of the substring s_ ls_ l+ 1. . . s_ r is equal to the length of the longest non- decreasing subsequence of the substring t_ lt_ l+ 1. . . t_ r ; The number of zeroes in t is the maximum possible. A non- decreasing subsequence of a string p is a sequence of indices i_ 1, i_ 2, . . . , i_ k such that i_ 1 < i_ 2 < . . . < i_ k and p_ i_ 1\u2264 p_ i_ 2\u2264. . . \u2264 p_ i_ k . The length of the subsequence is k . If there are multiple substrings which satisfy the conditions, output any.",
    "input": "The first line contains a binary string of length not more than 10^ 5 .",
    "output": "Output a binary string which satisfied the above conditions. If there are many such strings, output any of them.",
    "note": "In the first example: For the substrings of the length 1 the length of the longest non- decreasing subsequnce is 1 ; For l = 1, r = 2 the longest non- decreasing subsequnce of the substring s_ 1s_ 2 is 11 and the longest non- decreasing subsequnce of the substring t_ 1t_ 2 is 01 ; For l = 1, r = 3 the longest non- decreasing subsequnce of the substring s_ 1s_ 3 is 11 and the longest non- decreasing subsequnce of the substring t_ 1t_ 3 is 00 ; For l = 2, r = 3 the longest non- decreasing subsequnce of the substring s_ 2s_ 3 is 1 and the longest non- decreasing subsequnce of the substring t_ 2t_ 3 is 1 ; The second example is similar to the first one.",
    "topics": [
      "data structures",
      "greedy",
      "math",
      "strings"
    ],
    "id": "1204D2"
  },
  {
    "title": "You Are Given a WASD-string...",
    "url": "https://codeforces.com/problemset/problem/1202/C",
    "history": "You have a string s \u2014 a sequence of commands for your toy robot. The robot is placed in some cell of a rectangular grid. He can perform four commands: ' W' \u2014 move one cell up; ' S' \u2014 move one cell down; ' A' \u2014 move one cell left; ' D' \u2014 move one cell right. Let Grid( s) be the grid of minimum possible area such that there is a position in the grid where you can place the robot in such a way that it will not fall from the grid while running the sequence of commands s . For example, if s = DSAWWAW then Grid( s) is the 4 \u00d7 3 grid: you can place the robot in the cell ( 3, 2) ; the robot performs the command ' D' and moves to ( 3, 3) ; the robot performs the command ' S' and moves to ( 4, 3) ; the robot performs the command ' A' and moves to ( 4, 2) ; the robot performs the command ' W' and moves to ( 3, 2) ; the robot performs the command ' W' and moves to ( 2, 2) ; the robot performs the command ' A' and moves to ( 2, 1) ; the robot performs the command ' W' and moves to ( 1, 1) . You have 4 extra letters: one ' W' , one ' A' , one ' S' , one ' D' . You' d like to insert at most one of these letters in any position of sequence s to minimize the area of Grid( s) . What is the minimum area of Grid( s) you can achieve?",
    "input": "The first line contains one integer T ( 1 \u2264 T \u2264 1000 ) \u2014 the number of queries. Next T lines contain queries: one per line. This line contains single string s ( 1 \u2264 | s| \u2264 2 \u00b7 10^ 5 , s_ i \u2208{ W, A, S, D} ) \u2014 the sequence of commands. It' s guaranteed that the total length of s over all queries doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "Print T integers: one per query. For each query print the minimum area of Grid( s) you can achieve.",
    "note": "In the first query you have to get string DSAWWDAW . In second and third queries you can not decrease the area of Grid( s) .",
    "topics": [
      "brute force",
      "data structures",
      "dp",
      "greedy",
      "implementation",
      "math",
      "strings"
    ],
    "id": "1202C"
  },
  {
    "title": "Graph Traveler",
    "url": "https://codeforces.com/problemset/problem/1200/F",
    "history": "Gildong is experimenting with an interesting machine Graph Traveler. In Graph Traveler, there is a directed graph consisting of n vertices numbered from 1 to n . The i - th vertex has m_ i outgoing edges that are labeled as e_ i[ 0] , e_ i[ 1] , . . . , e_ i[ m_ i- 1] , each representing the destination vertex of the edge. The graph can have multiple edges and self- loops. The i - th vertex also has an integer k_ i written on itself. A travel on this graph works as follows. Gildong chooses a vertex to start from, and an integer to start with. Set the variable c to this integer. After arriving at the vertex i , or when Gildong begins the travel at some vertex i , add k_ i to c . The next vertex is e_ i[ x] where x is an integer 0 \u2264 x \u2264 m_ i- 1 satisfying x \u2261 c m_ i . Go to the next vertex and go back to step 2. It' s obvious that a travel never ends, since the 2nd and the 3rd step will be repeated endlessly. For example, assume that Gildong starts at vertex 1 with c = 5 , and m_ 1 = 2 , e_ 1[ 0] = 1 , e_ 1[ 1] = 2 , k_ 1 = - 3 . Right after he starts at vertex 1 , c becomes 2 . Since the only integer x ( 0 \u2264 x \u2264 1 ) where x \u2261 c m_ i is 0 , Gildong goes to vertex e_ 1[ 0] = 1 . After arriving at vertex 1 again, c becomes - 1 . The only integer x satisfying the conditions is 1 , so he goes to vertex e_ 1[ 1] = 2 , and so on. Since Gildong is quite inquisitive, he' s going to ask you q queries. He wants to know how many distinct vertices will be visited infinitely many times, if he starts the travel from a certain vertex with a certain value of c . Note that you should not count the vertices that will be visited only finite times.",
    "input": "The first line of the input contains an integer n ( 1 \u2264 n \u2264 1000 ) , the number of vertices in the graph. The second line contains n integers. The i - th integer is k_ i ( - 10^ 9 \u2264 k_ i \u2264 10^ 9 ) , the integer written on the i - th vertex. Next 2 \u00b7 n lines describe the edges of each vertex. The ( 2 \u00b7 i + 1) - st line contains an integer m_ i ( 1 \u2264 m_ i \u2264 10 ) , the number of outgoing edges of the i - th vertex. The ( 2 \u00b7 i + 2) - nd line contains m_ i integers e_ i[ 0] , e_ i[ 1] , . . . , e_ i[ m_ i- 1] , each having an integer value between 1 and n , inclusive. Next line contains an integer q ( 1 \u2264 q \u2264 10^ 5 ) , the number of queries Gildong wants to ask. Next q lines contains two integers x and y ( 1 \u2264 x \u2264 n , - 10^ 9 \u2264 y \u2264 10^ 9 ) each, which mean that the start vertex is x and the starting value of c is y .",
    "output": "For each query, print the number of distinct vertices that will be visited infinitely many times, if Gildong starts at vertex x with starting integer y .",
    "note": "The first example can be shown like the following image: Three integers are marked on i - th vertex: i , k_ i , and m_ i respectively. The outgoing edges are labeled with an integer representing the edge number of i - th vertex. The travel for each query works as follows. It is described as a sequence of phrases, each in the format \" vertex ( c after k_ i added) \" . 1( 0) \u2192 2( 0) \u2192 2( 0) \u2192. . . 2( 0) \u2192 2( 0) \u2192. . . 3( - 1) \u2192 1( - 1) \u2192 3( - 1) \u2192. . . 4( - 2) \u2192 2( - 2) \u2192 2( - 2) \u2192. . . 1( 1) \u2192 3( 1) \u2192 4( 1) \u2192 1( 1) \u2192. . . 1( 5) \u2192 3( 5) \u2192 1( 5) \u2192. . . The second example is same as the first example, except that the vertices have non- zero values. Therefore the answers to the queries also differ from the first example. The queries for the second example works as follows: 1( 4) \u2192 2( - 1) \u2192 2( - 6) \u2192. . . 2( - 5) \u2192 2( - 10) \u2192. . . 3( - 4) \u2192 1( 0) \u2192 2( - 5) \u2192 2( - 10) \u2192. . . 4( - 3) \u2192 1( 1) \u2192 3( - 2) \u2192 4( - 3) \u2192. . . 1( 5) \u2192 3( 2) \u2192 1( 6) \u2192 2( 1) \u2192 2( - 4) \u2192. . . 1( 9) \u2192 3( 6) \u2192 2( 1) \u2192 2( - 4) \u2192. . .",
    "topics": [
      "brute force",
      "data structures",
      "dfs and similar",
      "dp",
      "graphs",
      "implementation",
      "math",
      "number theory"
    ],
    "id": "1200F"
  },
  {
    "title": "White Lines",
    "url": "https://codeforces.com/problemset/problem/1200/D",
    "history": "Gildong has bought a famous painting software cfpaint. The working screen of cfpaint is square- shaped consisting of n rows and n columns of square cells. The rows are numbered from 1 to n , from top to bottom, and the columns are numbered from 1 to n , from left to right. The position of a cell at row r and column c is represented as ( r, c) . There are only two colors for the cells in cfpaint \u2014 black and white. There is a tool named eraser in cfpaint. The eraser has an integer size k ( 1 \u2264 k \u2264 n ) . To use the eraser, Gildong needs to click on a cell ( i, j) where 1 \u2264 i, j \u2264 n - k + 1 . When a cell ( i, j) is clicked, all of the cells ( i' , j' ) where i \u2264 i' \u2264 i + k - 1 and j \u2264 j' \u2264 j + k - 1 become white. In other words, a square with side equal to k cells and top left corner at ( i, j) is colored white. A white line is a row or a column without any black cells. Gildong has worked with cfpaint for some time, so some of the cells ( possibly zero or all) are currently black. He wants to know the maximum number of white lines after using the eraser exactly once. Help Gildong find the answer to his question.",
    "input": "The first line contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 2000 ) \u2014 the number of rows and columns, and the size of the eraser. The next n lines contain n characters each without spaces. The j - th character in the i - th line represents the cell at ( i, j) . Each character is given as either ' B' representing a black cell, or ' W' representing a white cell.",
    "output": "Print one integer: the maximum number of white lines after using the eraser exactly once.",
    "note": "In the first example, Gildong can click the cell ( 2, 2) , then the working screen becomes: BWWWWWWWWWWWWWWBThen there are four white lines \u2014 the 2 - nd and 3 - rd row, and the 2 - nd and 3 - rd column. In the second example, clicking the cell ( 2, 3) makes the 2 - nd row a white line. In the third example, both the 2 - nd column and 5 - th row become white lines by clicking the cell ( 3, 2) .",
    "topics": [
      "brute force",
      "data structures",
      "dp",
      "implementation",
      "two pointers"
    ],
    "id": "1200D"
  },
  {
    "title": "Hotelier",
    "url": "https://codeforces.com/problemset/problem/1200/A",
    "history": "Amugae has a hotel consisting of 10 rooms. The rooms are numbered from 0 to 9 from left to right. The hotel has two entrances \u2014 one from the left end, and another from the right end. When a customer arrives to the hotel through the left entrance, they are assigned to an empty room closest to the left entrance. Similarly, when a customer arrives at the hotel through the right entrance, they are assigned to an empty room closest to the right entrance. One day, Amugae lost the room assignment list. Thankfully Amugae' s memory is perfect, and he remembers all of the customers: when a customer arrived, from which entrance, and when they left the hotel. Initially the hotel was empty. Write a program that recovers the room assignment list from Amugae' s memory.",
    "input": "The first line consists of an integer n ( 1 \u2264 n \u2264 10^ 5 ) , the number of events in Amugae' s memory. The second line consists of a string of length n describing the events in chronological order. Each character represents: ' L' : A customer arrives from the left entrance. ' R' : A customer arrives from the right entrance. ' 0' , ' 1' , . . . , ' 9' : The customer in room x ( 0 , 1 , . . . , 9 respectively) leaves. It is guaranteed that there is at least one empty room when a customer arrives, and there is a customer in the room x when x ( 0 , 1 , . . . , 9 ) is given. Also, all the rooms are initially empty.",
    "output": "In the only line, output the hotel room' s assignment status, from room 0 to room 9 . Represent an empty room as ' 0' , and an occupied room as ' 1' , without spaces.",
    "note": "In the first example, hotel room' s assignment status after each action is as follows. First of all, all rooms are empty. Assignment status is 0000000000. L: a customer arrives to the hotel through the left entrance. Assignment status is 1000000000. L: one more customer from the left entrance. Assignment status is 1100000000. R: one more customer from the right entrance. Assignment status is 1100000001. L: one more customer from the left entrance. Assignment status is 1110000001. 1: the customer in room 1 leaves. Assignment status is 1010000001. R: one more customer from the right entrance. Assignment status is 1010000011. L: one more customer from the left entrance. Assignment status is 1110000011. 1: the customer in room 1 leaves. Assignment status is 1010000011. So after all, hotel room' s final assignment status is 1010000011. In the second example, hotel room' s assignment status after each action is as follows. L: a customer arrives to the hotel through the left entrance. Assignment status is 1000000000. 0: the customer in room 0 leaves. Assignment status is 0000000000. L: a customer arrives to the hotel through the left entrance. Assignment status is 1000000000 again. 0: the customer in room 0 leaves. Assignment status is 0000000000. L: a customer arrives to the hotel through the left entrance. Assignment status is 1000000000. L: one more customer from the left entrance. Assignment status is 1100000000. R: one more customer from the right entrance. Assignment status is 1100000001. R: one more customer from the right entrance. Assignment status is 1100000011. 9: the customer in room 9 leaves. Assignment status is 1100000010. So after all, hotel room' s final assignment status is 1100000010.",
    "topics": [
      "brute force",
      "data structures",
      "implementation"
    ],
    "id": "1200A"
  },
  {
    "title": "Welfare State",
    "url": "https://codeforces.com/problemset/problem/1198/B",
    "history": "There is a country with n citizens. The i - th of them initially has a_ i money. The government strictly controls the wealth of its citizens. Whenever a citizen makes a purchase or earns some money, they must send a receipt to the social services mentioning the amount of money they currently have. Sometimes the government makes payouts to the poor: all citizens who have strictly less money than x are paid accordingly so that after the payout they have exactly x money. In this case the citizens don' t send a receipt. You know the initial wealth of every citizen and the log of all events: receipts and payouts. Restore the amount of money each citizen has after all events.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the numer of citizens. The next line contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 0 \u2264 a_ i\u2264 10^ 9 ) \u2014 the initial balances of citizens. The next line contains a single integer q ( 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of events. Each of the next q lines contains a single event. The events are given in chronological order. Each event is described as either 1 p x ( 1 \u2264 p \u2264 n , 0 \u2264 x \u2264 10^ 9 ) , or 2 x ( 0 \u2264 x \u2264 10^ 9 ) . In the first case we have a receipt that the balance of the p - th person becomes equal to x . In the second case we have a payoff with parameter x .",
    "output": "Print n integers \u2014 the balances of all citizens after all events.",
    "note": "In the first example the balances change as follows: 1 2 3 4 \u2192 3 3 3 4 \u2192 3 2 3 4 \u2192 3 2 3 4In the second example the balances change as follows: 3 50 2 1 10 \u2192 3 0 2 1 10 \u2192 8 8 8 8 10 \u2192 8 8 20 8 10",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "sortings"
    ],
    "id": "1198B"
  },
  {
    "title": "Culture Code",
    "url": "https://codeforces.com/problemset/problem/1197/E",
    "history": "There are famous Russian nesting dolls named matryoshkas sold in one of the souvenir stores nearby, and you' d like to buy several of them. The store has n different matryoshkas. Any matryoshka is a figure of volume out_ i with an empty space inside of volume in_ i ( of course, out_ i > in_ i ) . You don' t have much free space inside your bag, but, fortunately, you know that matryoshkas can be nested one inside another. Formally, let' s call a set of matryoshkas nested if we can rearrange dolls in such a way, that the first doll can be nested inside the second one, the second doll \u2014 inside the third one and so on. Matryoshka i can be nested inside matryoshka j if out_ i \u2264 in_ j . So only the last doll will take space inside your bag. Let' s call extra space of a nested set of dolls as a total volume of empty space inside this structure. Obviously, it' s equal to in_ i_ 1 + ( in_ i_ 2 - out_ i_ 1) + ( in_ i_ 3 - out_ i_ 2) + . . . + ( in_ i_ k - out_ i_ k- 1) , where i_ 1 , i_ 2 , . . . , i_ k are the indices of the chosen dolls in the order they are nested in each other. Finally, let' s call a nested subset of the given sequence as big enough if there isn' t any doll from the sequence that can be added to the nested subset without breaking its nested property. You want to buy many matryoshkas, so you should choose a big enough nested subset to buy it. But you will be disappointed if too much space in your bag will be wasted, so you want to choose a big enough subset so that its extra space is minimum possible among all big enough subsets. Now you wonder, how many different nested subsets meet these conditions ( they are big enough, and there is no big enough subset such that its extra space is less than the extra space of the chosen subset) . Two subsets are considered different if there exists at least one index i such that one of the subsets contains the i - th doll, and another subset doesn' t. Since the answer can be large, print it modulo 10^ 9 + 7 .",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of matryoshkas. The next n lines contain a description of each doll: two integers out_ i and in_ i ( 1 \u2264 in_ i < out_ i \u2264 10^ 9 ) \u2014 the outer and inners volumes of the i - th matryoshka.",
    "output": "Print one integer \u2014 the number of big enough nested subsets such that extra space of each of these subsets is minimum possible. Since the answer can be large, print it modulo 10^ 9 + 7 .",
    "note": "There are 6 big enough nested subsets with minimum possible extra space in the example: { 1, 5} : we can' t add any other matryoshka and keep it nested; it' s extra space is 1 ; { 1, 6} ; { 2, 4, 5} ; { 2, 4, 6} ; { 3, 4, 5} ; { 3, 4, 6} . There are no more \" good\" subsets because, for example, subset { 6, 7} is not big enough ( we can add the 4 - th matryoshka to it) or subset { 4, 6, 7} has extra space equal to 2 .",
    "topics": [
      "binary search",
      "combinatorics",
      "data structures",
      "dp",
      "shortest paths",
      "sortings"
    ],
    "id": "1197E"
  },
  {
    "title": "RGB Substring (hard version)",
    "url": "https://codeforces.com/problemset/problem/1196/D2",
    "history": "The only difference between easy and hard versions is the size of the input. You are given a string s consisting of n characters, each character is ' R' , ' G' or ' B' . You are also given an integer k . Your task is to change the minimum number of characters in the initial string s so that after the changes there will be a string of length k that is a substring of s , and is also a substring of the infinite string \" RGBRGBRGB . . . \" . A string a is a substring of string b if there exists a positive integer i such that a_ 1 = b_ i , a_ 2 = b_ i + 1 , a_ 3 = b_ i + 2 , . . . , a_ | a| = b_ i + | a| - 1 . For example, strings \" GBRG\" , \" B\" , \" BR\" are substrings of the infinite string \" RGBRGBRGB . . . \" while \" GR\" , \" RGR\" and \" GGG\" are not. You have to answer q independent queries.",
    "input": "The first line of the input contains one integer q ( 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of queries. Then q queries follow. The first line of the query contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the string s and the length of the substring. The second line of the query contains a string s consisting of n characters ' R' , ' G' and ' B' . It is guaranteed that the sum of n over all queries does not exceed 2 \u00b7 10^ 5 ( \u2211 n \u2264 2 \u00b7 10^ 5 ) .",
    "output": "For each query print one integer \u2014 the minimum number of characters you need to change in the initial string s so that after changing there will be a substring of length k in s that is also a substring of the infinite string \" RGBRGBRGB . . . \" .",
    "note": "In the first example, you can change the first character to ' R' and obtain the substring \" RG\" , or change the second character to ' R' and obtain \" BR\" , or change the third, fourth or fifth character to ' B' and obtain \" GB\" . In the second example, the substring is \" BRG\" .",
    "topics": [
      "data structures",
      "dp",
      "implementation",
      "two pointers"
    ],
    "id": "1196D2"
  },
  {
    "title": "Geometers Anonymous Club",
    "url": "https://codeforces.com/problemset/problem/1195/F",
    "history": "Denis holds a Geometers Anonymous Club meeting in SIS. He has prepared n convex polygons numbered from 1 to n for the club. He plans to offer members of the club to calculate Minkowski sums of these polygons. More precisely, he plans to give q tasks, the i - th of them asks to calculate the sum of Minkowski of polygons with indices from l_ i to r_ i inclusive. The sum of Minkowski of two sets A and B is the set C = { a + b : a \u2208 A, b \u2208 B} . It can be proven that if A and B are convex polygons then C will also be a convex polygon. Sum of two convex polygons To calculate the sum of Minkowski of p polygons ( p > 2 ) , you need to calculate the sum of Minkowski of the first p - 1 polygons, and then calculate the sum of Minkowski of the resulting polygon and the p - th polygon. For the convenience of checking answers, Denis has decided to prepare and calculate the number of vertices in the sum of Minkowski for each task he prepared. Help him to do it.",
    "input": "The first line of the input contains one integer n \u2014 the number of convex polygons Denis prepared ( 1 \u2264 n \u2264 100 000 ) . Then n convex polygons follow. The description of the i - th polygon starts with one integer k_ i \u2014 the number of vertices in the i - th polygon ( 3 \u2264 k_ i ) . The next k_ i lines contain two integers x_ ij , y_ ij each \u2014 coordinates of vertices of the i - th polygon in counterclockwise order ( | x_ ij| , | y_ ij| \u2264 10 ^ 9 ) . It is guaranteed, that there are no three consecutive vertices lying on the same line. The total number of vertices over all polygons does not exceed 300 000 . The following line contains one integer q \u2014 the number of tasks ( 1 \u2264 q \u2264 100 000 ) . The next q lines contain descriptions of tasks. Description of the i - th task contains two integers l_ i and r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 n ) .",
    "output": "For each task print a single integer \u2014 the number of vertices in the sum of Minkowski of polygons with indices from l_ i to r_ i .",
    "note": "Description of the example: First, second and third polygons from the example Minkowski sums of the first and second, the second and third and all polygons correspondingly",
    "topics": [
      "data structures",
      "geometry",
      "math",
      "sortings"
    ],
    "id": "1195F"
  },
  {
    "title": "OpenStreetMap",
    "url": "https://codeforces.com/problemset/problem/1195/E",
    "history": "Seryozha conducts a course dedicated to building a map of heights of Stepanovo recreation center. He laid a rectangle grid of size n \u00d7 m cells on a map ( rows of grid are numbered from 1 to n from north to south, and columns are numbered from 1 to m from west to east) . After that he measured the average height of each cell above Rybinsk sea level and obtained a matrix of heights of size n \u00d7 m . The cell ( i, j) lies on the intersection of the i - th row and the j - th column and has height h_ i, j . Seryozha is going to look at the result of his work in the browser. The screen of Seryozha' s laptop can fit a subrectangle of size a \u00d7 b of matrix of heights ( 1 \u2264 a \u2264 n , 1 \u2264 b \u2264 m ) . Seryozha tries to decide how the weather can affect the recreation center \u2014 for example, if it rains, where all the rainwater will gather. To do so, he is going to find the cell having minimum height among all cells that are shown on the screen of his laptop. Help Seryozha to calculate the sum of heights of such cells for all possible subrectangles he can see on his screen. In other words, you have to calculate the sum of minimum heights in submatrices of size a \u00d7 b with top left corners in ( i, j) over all 1 \u2264 i \u2264 n - a + 1 and 1 \u2264 j \u2264 m - b + 1 . Consider the sequence g_ i = ( g_ i - 1\u00b7 x + y) z . You are given integers g_ 0 , x , y and z . By miraculous coincidence, h_ i, j = g_ ( i - 1) \u00b7 m + j - 1 ( ( i - 1) \u00b7 m + j - 1 is the index) .",
    "input": "The first line of the input contains four integers n , m , a and b ( 1 \u2264 n, m \u2264 3 000 , 1 \u2264 a \u2264 n , 1 \u2264 b \u2264 m ) \u2014 the number of rows and columns in the matrix Seryozha has, and the number of rows and columns that can be shown on the screen of the laptop, respectively. The second line of the input contains four integers g_ 0 , x , y and z ( 0 \u2264 g_ 0, x, y < z \u2264 10^ 9 ) .",
    "output": "Print a single integer \u2014 the answer to the problem.",
    "note": "The matrix from the first example:",
    "topics": [
      "data structures",
      "two pointers"
    ],
    "id": "1195E"
  },
  {
    "title": "Count The Rectangles",
    "url": "https://codeforces.com/problemset/problem/1194/E",
    "history": "There are n segments drawn on a plane; the i - th segment connects two points ( x_ i, 1 , y_ i, 1 ) and ( x_ i, 2 , y_ i, 2 ) . Each segment is non- degenerate, and is either horizontal or vertical \u2014 formally, for every i \u2208 [ 1, n] either x_ i, 1 = x_ i, 2 or y_ i, 1 = y_ i, 2 ( but only one of these conditions holds) . Only segments of different types may intersect: no pair of horizontal segments shares any common points, and no pair of vertical segments shares any common points. We say that four segments having indices h_ 1 , h_ 2 , v_ 1 and v_ 2 such that h_ 1 < h_ 2 and v_ 1 < v_ 2 form a rectangle if the following conditions hold: segments h_ 1 and h_ 2 are horizontal; segments v_ 1 and v_ 2 are vertical; segment h_ 1 intersects with segment v_ 1 ; segment h_ 2 intersects with segment v_ 1 ; segment h_ 1 intersects with segment v_ 2 ; segment h_ 2 intersects with segment v_ 2 . Please calculate the number of ways to choose four segments so they form a rectangle. Note that the conditions h_ 1 < h_ 2 and v_ 1 < v_ 2 should hold.",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 5000 ) \u2014 the number of segments. Then n lines follow. The i - th line contains four integers x_ i, 1 , y_ i, 1 , x_ i, 2 and y_ i, 2 denoting the endpoints of the i - th segment. All coordinates of the endpoints are in the range [ - 5000, 5000] . It is guaranteed that each segment is non- degenerate and is either horizontal or vertical. Furthermore, if two segments share a common point, one of these segments is horizontal, and another one is vertical.",
    "output": "Print one integer \u2014 the number of ways to choose four segments so they form a rectangle.",
    "note": "The following pictures represent sample cases:",
    "topics": [
      "bitmasks",
      "brute force",
      "data structures",
      "geometry",
      "sortings"
    ],
    "id": "1194E"
  },
  {
    "title": "Magic Tree",
    "url": "https://codeforces.com/problemset/problem/1193/B",
    "history": "We have a magic tree: a rooted tree on n vertices. The vertices are numbered 1 through n . Vertex 1 is the root. The magic tree gives us magic fruit. The fruit only grows in vertices of the tree other than the root. Each vertex contains at most one piece of fruit. It is now day 0 and no fruit is ripe yet. Each fruit will only be ripe for a single day. For each fruit, we are given the vertex v_ j where it grows, the day d_ j on which it will be ripe, and the amount w_ j of magic juice we can extract from it if we harvest it when it is ripe. The fruits have to be harvested by cutting some branches of the tree. On each day, you may cut as many branches of the tree as you like. The parts of the tree you cut off will fall to the ground and you can collect all the ripe fruits they contain. All fruits that fall to the ground when they are not ripe are discarded and no magic juice is collected from them. Formally, on each day, you may erase some edges of the tree. Whenever you do so, the tree will split into multiple connected components. You then erase all components that do not contain the root and you harvest all ripe fruits those components contained. Given is a description of the tree together with the locations, ripening days and juiciness of all m fruits. Calculate the maximum total amount of magic juice we can harvest from the tree. ScoringSubtask 1 ( 6 points) : n, k \u2264 20 , and w_ j = 1 for all j Subtask 2 ( 3 points) : fruits only grow in the leaves of the treeSubtask 3 ( 11 points) : p_ i = i- 1 for each i , and w_ j = 1 for all j Subtask 4 ( 12 points) : k \u2264 2 Subtask 5 ( 16 points) : k \u2264 20 , and w_ j = 1 for all j Subtask 6 ( 13 points) : m \u2264 1, 000 Subtask 7 ( 22 points) : w_ j = 1 for all j Subtask 8 ( 17 points) : no additional constraints",
    "input": "The first line contains three space- separated integers n ( 2 \u2264 n \u2264 100, 000 ) , m ( 1 \u2264 m \u2264 n- 1 ) and k ( 1 \u2264 k \u2264 100, 000 ) \u2013 the number of vertices, the number of fruits, and the maximum day on which a fruit may become ripe. The following n- 1 lines contain the integers p_ 2, . . . , p_ n , one per line. For each i ( from 2 to n , inclusive) , vertex p_ i ( 1 \u2264 p_ i \u2264 i- 1 ) is the parent of vertex i . Each of the last m lines describes one fruit. The j - th of these lines has the form \" v_ j d_ j w_ j \" ( 2 \u2264 v_ j \u2264 n , 1 \u2264 d_ j \u2264 k , 1 \u2264 w_ j \u2264 10^ 9 ) . It is guaranteed that no vertex contains more than one fruit ( i. e. , the values v_ j are distinct) .",
    "output": "Output a single line with a single integer, the maximum amount of magic juice we can harvest from the tree.",
    "note": "In the example input, one optimal solution looks as follows: On day 4, cut the edge between vertices 4 and 5 and harvest a ripe fruit with 1 unit of magic juice. On the same day, cut the edge between vertices 1 and 2 and harvest 5 units of magic juice from the ripe fruit in vertex 3. On day 7, do nothing. ( We could harvest the fruit in vertex 4 that just became ripe, but doing so is not optimal. ) On day 9, cut the edge between vertices 1 and 4. Discard the fruit in vertex 4 that is no longer ripe, and harvest 3 units of magic juice from the ripe fruit in vertex 6. ( Alternately, we could achieve the same effect by cutting the edge between vertices 4 and 6. )",
    "topics": [
      "*special",
      "data structures",
      "dp",
      "trees"
    ],
    "id": "1193B"
  },
  {
    "title": "Dynamic Diameter",
    "url": "https://codeforces.com/problemset/problem/1192/B",
    "history": "You are given a weighted undirected tree on n vertices and a list of q updates. Each update changes the weight of one edge. The task is to output the diameter of the tree after each update. ( The distance between two vertices is the sum of the weights on the unique simple path that connects them. The diameter is the largest of all those distances. ) ScoringSubtask 1 ( 11 points) : n, q \u2264 100 and w \u2264 10, 000 Subtask 2 ( 13 points) : n, q \u2264 5, 000 and w \u2264 10, 000 Subtask 3 ( 7 points) : w \u2264 10, 000 and the edges of the tree are exactly all valid edges of the form { 1, i} ( Hence, the tree is a star centered at vertex 1. ) Subtask 4 ( 18 points) : w \u2264 10, 000 , and the edges of the tree are exactly all valid edges of the forms { i, 2i} and { i, 2i+ 1} ( Hence, if we were to root the tree at vertex 1, it would be a balanced binary tree. ) Subtask 5 ( 24 points) : it is guaranteed that after each update a longest simple path goes through vertex 1 Subtask 6 ( 27 points) : no additional constraints",
    "input": "The first line contains three space- separated integers n , q and w ( 2 \u2264 n \u2264 100, 000, 1 \u2264 q \u2264 100, 000 , 1 \u2264 w \u2264 20, 000, 000, 000, 000 ) \u2013 the number of vertices in the tree, the number of updates and the limit on the weights of edges. The vertices are numbered 1 through n . Next, n- 1 lines describing the initial tree follow. The i - th of these lines contains three space- separated integers a_ i , b_ i , c_ i ( 1 \u2264 a_ i, b_ i \u2264 n , 0 \u2264 c_ i < w ) meaning that initially, there is an edge between vertices a_ i and b_ i with weight c_ i . It is guaranteed that these n- 1 lines describe a tree. Finally, q lines describing queries follow. The j - th of these lines contains two space- separated integers d_ j , e_ j ( 0 \u2264 d_ j < n - 1, 0 \u2264 e_ j < w ) . These two integers are then transformed according to the following scheme: d' _ j = ( d_ j + last) ( n - 1) e' _ j = ( e_ j + last) w where last is the result of the last query ( initially last= 0 ) . Tuple ( d' _ j, e' _ j) represents a query which takes the d' _ j+ 1 - th edge from the input and sets its weight to e' _ j .",
    "output": "Output q lines. For each i , line i should contain the diameter of the tree after the i - th update.",
    "note": "The first sample is depicted in the figure below. The left- most picture shows the initial state of the graph. Each following picture depicts the situation after an update. The weight of the updated edge is painted green, and the diameter is red. The first query changes the weight of the 3 rd edge, i. e. { 2, 4} , to 1030 . The largest distance between any pair of vertices is 2030 \u2013 the distance between 3 and 4 . As the answer is 2030 , the second query is d' _ 2 = ( 1 + 2030) 3 = 0 e' _ 2 = ( 1020 + 2030) 2000 = 1050 Hence the weight of the edge { 1, 2} is changed to 1050 . This causes the pair { 1, 4} to be the pair with the greatest distance, namely 2080 . The third query is decoded as d' _ 3 = ( 1 + 2080) 3 = 2 e' _ 3 = ( 890 + 2080) 2000 = 970 As the weight of the edge { 2, 4} decreases to 970 , the most distant pair is suddenly { 1, 3} with 2050 .",
    "topics": [
      "*special",
      "data structures",
      "dfs and similar",
      "divide and conquer",
      "trees"
    ],
    "id": "1192B"
  },
  {
    "title": "Tokitsukaze and Strange Rectangle",
    "url": "https://codeforces.com/problemset/problem/1190/D",
    "history": "There are n points on the plane, the i - th of which is at ( x_ i, y_ i) . Tokitsukaze wants to draw a strange rectangular area and pick all the points in the area. The strange area is enclosed by three lines, x = l , y = a and x = r , as its left side, its bottom side and its right side respectively, where l , r and a can be any real numbers satisfying that l < r . The upper side of the area is boundless, which you can regard as a line parallel to the x - axis at infinity. The following figure shows a strange rectangular area. A point ( x_ i, y_ i) is in the strange rectangular area if and only if l < x_ i < r and y_ i > a . For example, in the above figure, p_ 1 is in the area while p_ 2 is not. Tokitsukaze wants to know how many different non- empty sets she can obtain by picking all the points in a strange rectangular area, where we think two sets are different if there exists at least one point in one set of them but not in the other.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2 \u00d7 10^ 5 ) \u2014 the number of points on the plane. The i - th of the next n lines contains two integers x_ i , y_ i ( 1 \u2264 x_ i, y_ i \u2264 10^ 9 ) \u2014 the coordinates of the i - th point. All points are distinct.",
    "output": "Print a single integer \u2014 the number of different non- empty sets of points she can obtain.",
    "note": "For the first example, there is exactly one set having k points for k = 1, 2, 3 , so the total number is 3 . For the second example, the numbers of sets having k points for k = 1, 2, 3 are 3 , 2 , 1 respectively, and their sum is 6 . For the third example, as the following figure shows, there are 2 sets having one point; 3 sets having two points; 1 set having four points. Therefore, the number of different non- empty sets in this example is 2 + 3 + 0 + 1 = 6 .",
    "topics": [
      "data structures",
      "divide and conquer",
      "sortings",
      "two pointers"
    ],
    "id": "1190D"
  },
  {
    "title": "Candies!",
    "url": "https://codeforces.com/problemset/problem/1189/C",
    "history": "Consider a sequence of digits of length 2^ k [ a_ 1, a_ 2, . . . , a_ 2^ k] . We perform the following operation with it: replace pairs ( a_ 2i+ 1, a_ 2i+ 2) with ( a_ 2i+ 1 + a_ 2i+ 2) 10 for 0\u2264 i< 2^ k- 1 . For every i where a_ 2i+ 1 + a_ 2i+ 2\u2265 10 we get a candy! As a result, we will get a sequence of length 2^ k- 1 . Less formally, we partition sequence of length 2^ k into 2^ k- 1 pairs, each consisting of 2 numbers: the first pair consists of the first and second numbers, the second of the third and fourth . . . , the last pair consists of the ( 2^ k- 1 ) - th and ( 2^ k ) - th numbers. For every pair such that sum of numbers in it is at least 10 , we get a candy. After that, we replace every pair of numbers with a remainder of the division of their sum by 10 ( and don' t change the order of the numbers) . Perform this operation with a resulting array until it becomes of length 1 . Let f( [ a_ 1, a_ 2, . . . , a_ 2^ k] ) denote the number of candies we get in this process. For example: if the starting sequence is [ 8, 7, 3, 1, 7, 0, 9, 4] then: After the first operation the sequence becomes [ ( 8 + 7) 10, ( 3 + 1) 10, ( 7 + 0) 10, ( 9 + 4) 10] = [ 5, 4, 7, 3] , and we get 2 candies as 8 + 7 \u2265 10 and 9 + 4 \u2265 10 . After the second operation the sequence becomes [ ( 5 + 4) 10, ( 7 + 3) 10] = [ 9, 0] , and we get one more candy as 7 + 3 \u2265 10 . After the final operation sequence becomes [ ( 9 + 0) 10] = [ 9] . Therefore, f( [ 8, 7, 3, 1, 7, 0, 9, 4] ) = 3 as we got 3 candies in total. You are given a sequence of digits of length n s_ 1, s_ 2, . . . s_ n . You have to answer q queries of the form ( l_ i, r_ i) , where for i - th query you have to output f( [ s_ l_ i, s_ l_ i+ 1, . . . , s_ r_ i] ) . It is guaranteed that r_ i- l_ i+ 1 is of form 2^ k for some nonnegative integer k .",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of the sequence. The second line contains n digits s_ 1, s_ 2, . . . , s_ n ( 0 \u2264 s_ i \u2264 9 ) . The third line contains a single integer q ( 1 \u2264 q \u2264 10^ 5 ) \u2014 the number of queries. Each of the next q lines contains two integers l_ i , r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 n ) \u2014 i - th query. It is guaranteed that r_ i- l_ i+ 1 is a nonnegative integer power of 2 .",
    "output": "Output q lines, in i - th line output single integer \u2014 f( [ s_ l_ i, s_ l_ i + 1, . . . , s_ r_ i] ) , answer to the i - th query.",
    "note": "The first example illustrates an example from the statement. f( [ 7, 3, 1, 7] ) = 1 : sequence of operations is [ 7, 3, 1, 7] \u2192 [ ( 7 + 3) 10, ( 1 + 7) 10] = [ 0, 8] and one candy as 7 + 3 \u2265 10 \u2192 [ ( 0 + 8) 10] = [ 8] , so we get only 1 candy. f( [ 9] ) = 0 as we don' t perform operations with it.",
    "topics": [
      "data structures",
      "dp",
      "implementation",
      "math"
    ],
    "id": "1189C"
  },
  {
    "title": "Subarray Sorting",
    "url": "https://codeforces.com/problemset/problem/1187/D",
    "history": "You are given an array a_ 1, a_ 2, . . . , a_ n and an array b_ 1, b_ 2, . . . , b_ n . For one operation you can sort in non- decreasing order any subarray a[ l . . . r] of the array a . For example, if a = [ 4, 2, 2, 1, 3, 1] and you choose subbarray a[ 2 . . . 5] , then the array turns into [ 4, 1, 2, 2, 3, 1] . You are asked to determine whether it is possible to obtain the array b by applying this operation any number of times ( possibly zero) to the array a .",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 3 \u00b7 10^ 5 ) \u2014 the number of queries. The first line of each query contains one integer n ( 1 \u2264 n \u2264 3 \u00b7 10^ 5 ) . The second line of each query contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) . The third line of each query contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 n ) . It is guaranteed that \u2211 n \u2264 3 \u00b7 10^ 5 over all queries in a test.",
    "output": "For each query print YES ( in any letter case) if it is possible to obtain an array b and NO ( in any letter case) otherwise.",
    "note": "In first test case the can sort subarray a_ 1 . . . a_ 5 , then a will turn into [ 1, 1, 4, 4, 7, 5, 6] , and then sort subarray a_ 5 . . . a_ 6 .",
    "topics": [
      "data structures",
      "sortings"
    ],
    "id": "1187D"
  },
  {
    "title": "Exam in BerSU (hard version)",
    "url": "https://codeforces.com/problemset/problem/1185/C2",
    "history": "The only difference between easy and hard versions is constraints. If you write a solution in Python, then prefer to send it in PyPy to speed up execution time. A session has begun at Beland State University. Many students are taking exams. Polygraph Poligrafovich is going to examine a group of n students. Students will take the exam one- by- one in order from 1 - th to n - th. Rules of the exam are following: The i - th student randomly chooses a ticket. if this ticket is too hard to the student, he doesn' t answer and goes home immediately ( this process is so fast that it' s considered no time elapses) . This student fails the exam. if the student finds the ticket easy, he spends exactly t_ i minutes to pass the exam. After it, he immediately gets a mark and goes home. Students take the exam in the fixed order, one- by- one, without any interruption. At any moment of time, Polygraph Poligrafovich takes the answer from one student. The duration of the whole exam for all students is M minutes ( max t_ i \u2264 M ) , so students at the end of the list have a greater possibility to run out of time to pass the exam. For each student i , you should count the minimum possible number of students who need to fail the exam so the i - th student has enough time to pass the exam. For each student i , find the answer independently. That is, if when finding the answer for the student i_ 1 some student j should leave, then while finding the answer for i_ 2 ( i_ 2> i_ 1 ) the student j student does not have to go home.",
    "input": "The first line of the input contains two integers n and M ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 M \u2264 2 \u00b7 10^ 7 ) \u2014 the number of students and the total duration of the exam in minutes, respectively. The second line of the input contains n integers t_ i ( 1 \u2264 t_ i \u2264 100 ) \u2014 time in minutes that i - th student spends to answer to a ticket. It' s guaranteed that all values of t_ i are not greater than M .",
    "output": "Print n numbers: the i - th number must be equal to the minimum number of students who have to leave the exam in order to i - th student has enough time to pass the exam.",
    "note": "The explanation for the example 1. Please note that the sum of the first five exam times does not exceed M= 15 ( the sum is 1+ 2+ 3+ 4+ 5= 15 ) . Thus, the first five students can pass the exam even if all the students before them also pass the exam. In other words, the first five numbers in the answer are 0 . In order for the 6 - th student to pass the exam, it is necessary that at least 2 students must fail it before ( for example, the 3 - rd and 4 - th, then the 6 - th will finish its exam in 1+ 2+ 5+ 6= 14 minutes, which does not exceed M ) . In order for the 7 - th student to pass the exam, it is necessary that at least 3 students must fail it before ( for example, the 2 - nd, 5 - th and 6 - th, then the 7 - th will finish its exam in 1+ 3+ 4+ 7= 15 minutes, which does not exceed M ) .",
    "topics": [
      "brute force",
      "data structures",
      "greedy",
      "math"
    ],
    "id": "1185C2"
  },
  {
    "title": "Daleks' Invasion (hard)",
    "url": "https://codeforces.com/problemset/problem/1184/E3",
    "history": "With your help, Heidi has prepared a plan of trap placement and defence. Yet suddenly, the Doctor popped out of the TARDIS and told her that he had spied on the Daleks' preparations, and there is more of them than ever. Desperate times require desperate measures, so Heidi is going to risk meeting with the Daleks and she will consider placing a trap along any Corridor. This means she needs your help again in calculating E_ max( c) \u2013 the largest e \u2264 10^ 9 such that if we changed the energy requirement of c to e , then the Daleks might use c in their invasion \u2013 but this time for all Time Corridors.",
    "input": "First line: number n of destinations, number m of corridors ( 2 \u2264 n \u2264 10^ 5 , n - 1 \u2264 m \u2264 10^ 6 ) . The next m lines: destinations a , b and energy e ( 1 \u2264 a, b \u2264 n , a = \u0338 b , 0 \u2264 e \u2264 10^ 9 ) . No pair { a, b} will repeat. The graph is guaranteed to be connected. It is not guaranteed that all energy requirements e are distinct, or that the minimum spanning tree is unique.",
    "output": "Output m lines, each containing one integer: E_ max( c_ i) for the i - th Corridor c_ i from the input.",
    "note": "",
    "topics": [
      "data structures",
      "dsu",
      "graphs",
      "trees"
    ],
    "id": "1184E3"
  },
  {
    "title": "Heidi and the Turing Test (Medium)",
    "url": "https://codeforces.com/problemset/problem/1184/C2",
    "history": "The Cybermen solved that first test much quicker than the Daleks. Luckily for us, the Daleks were angry ( shocking! ) and they destroyed some of the Cybermen. After the fighting stopped, Heidi gave them another task to waste their time on. There are n points on a plane. Given a radius r , find the maximum number of points that can be covered by an L^ 1 - ball with radius r . An L^ 1 - ball with radius r and center ( x_ 0, y_ 0) in a 2D- plane is defined as the set of points ( x, y) such that the Manhattan distance between ( x_ 0, y_ 0) and ( x, y) is at most r . Manhattan distance between ( x_ 0, y_ 0) and ( x, y) is defined as | x - x_ 0| + | y - y_ 0| .",
    "input": "The first line contains two integers n, r ( 1 \u2264 n \u2264 300 000, 1 \u2264 r \u2264 10^ 6 ) , the number of points and the radius of the ball, respectively. Each of the next n lines contains integers x_ i, y_ i ( - 10^ 6 \u2264 x_ i, y_ i \u2264 10^ 6 ) , describing the coordinates of the i - th point. It is guaranteed, that all points are distinct.",
    "output": "Print one integer \u2014 the maximum number points that an L^ 1 - ball with radius r can cover.",
    "note": "In the first example, a ball centered at ( 1, 0) covers the points ( 1, 1) , ( 1, - 1) , ( 2, 0) . In the second example, a ball centered at ( 0, 0) covers all the points. Note that x_ 0 and y_ 0 need not be integer.",
    "topics": [
      "data structures"
    ],
    "id": "1184C2"
  },
  {
    "title": "Maximum Sine",
    "url": "https://codeforces.com/problemset/problem/1182/F",
    "history": "You have given integers a , b , p , and q . Let f( x) = abs( sin( p/ q\u03c0 x) ) . Find minimum possible integer x that maximizes f( x) where a \u2264 x \u2264 b .",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The first line of each test case contains four integers a , b , p , and q ( 0 \u2264 a \u2264 b \u2264 10^ 9 , 1 \u2264 p , q \u2264 10^ 9 ) .",
    "output": "Print the minimum possible integer x for each test cases, separated by newline.",
    "note": "In the first test case, f( 0) = 0 , f( 1) = f( 2) \u2248 0. 866 , f( 3) = 0 . In the second test case, f( 55) \u2248 0. 999969 , which is the largest among all possible values.",
    "topics": [
      "binary search",
      "data structures",
      "number theory"
    ],
    "id": "1182F"
  },
  {
    "title": "Beautiful Lyrics",
    "url": "https://codeforces.com/problemset/problem/1182/C",
    "history": "You are given n words, each of which consists of lowercase alphabet letters. Each word contains at least one vowel. You are going to choose some of the given words and make as many beautiful lyrics as possible. Each lyric consists of two lines. Each line consists of two words separated by whitespace. A lyric is beautiful if and only if it satisfies all conditions below. The number of vowels in the first word of the first line is the same as the number of vowels in the first word of the second line. The number of vowels in the second word of the first line is the same as the number of vowels in the second word of the second line. The last vowel of the first line is the same as the last vowel of the second line. Note that there may be consonants after the vowel. Also, letters \" a\" , \" e\" , \" o\" , \" i\" , and \" u\" are vowels. Note that \" y\" is never vowel. For example of a beautiful lyric, \" hello hellooowww\" \" whatsup yowowowow\" is a beautiful lyric because there are two vowels each in \" hello\" and \" whatsup\" , four vowels each in \" hellooowww\" and \" yowowowow\" ( keep in mind that \" y\" is not a vowel) , and the last vowel of each line is \" o\" . For example of a not beautiful lyric, \" hey man\" \" iam mcdic\" is not a beautiful lyric because \" hey\" and \" iam\" don' t have same number of vowels and the last vowels of two lines are different ( \" a\" in the first and \" i\" in the second) . How many beautiful lyrics can you write from given words? Note that you cannot use a word more times than it is given to you. For example, if a word is given three times, you can use it at most three times.",
    "input": "The first line contains single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of words. The i - th of the next n lines contains string s_ i consisting lowercase alphabet letters \u2014 the i - th word. It is guaranteed that the sum of the total word length is equal or less than 10^ 6 . Each word contains at least one vowel.",
    "output": "In the first line, print m \u2014 the number of maximum possible beautiful lyrics. In next 2m lines, print m beautiful lyrics ( two lines per lyric) . If there are multiple answers, print any.",
    "note": "In the first example, those beautiful lyrics are one of the possible answers. Let' s look at the first lyric on the sample output of the first example. \" about proud hooray round\" forms a beautiful lyric because \" about\" and \" hooray\" have same number of vowels, \" proud\" and \" round\" have same number of vowels, and both lines have same last vowel. On the other hand, you cannot form any beautiful lyric with the word \" codeforces\" . In the second example, you cannot form any beautiful lyric from given words. In the third example, you can use the word \" same\" up to three times.",
    "topics": [
      "data structures",
      "greedy",
      "strings"
    ],
    "id": "1182C"
  },
  {
    "title": "Irrigation",
    "url": "https://codeforces.com/problemset/problem/1181/D",
    "history": "Misha was interested in water delivery from childhood. That' s why his mother sent him to the annual Innovative Olympiad in Irrigation ( IOI) . Pupils from all Berland compete there demonstrating their skills in watering. It is extremely expensive to host such an olympiad, so after the first n olympiads the organizers introduced the following rule of the host city selection. The host cities of the olympiads are selected in the following way. There are m cities in Berland wishing to host the olympiad, they are numbered from 1 to m . The host city of each next olympiad is determined as the city that hosted the olympiad the smallest number of times before. If there are several such cities, the city with the smallest index is selected among them. Misha' s mother is interested where the olympiad will be held in some specific years. The only information she knows is the above selection rule and the host cities of the first n olympiads. Help her and if you succeed, she will ask Misha to avoid flooding your house.",
    "input": "The first line contains three integers n , m and q ( 1 \u2264 n, m, q \u2264 500 000 ) \u2014 the number of olympiads before the rule was introduced, the number of cities in Berland wishing to host the olympiad, and the number of years Misha' s mother is interested in, respectively. The next line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 m ) , where a_ i denotes the city which hosted the olympiad in the i - th year. Note that before the rule was introduced the host city was chosen arbitrarily. Each of the next q lines contains an integer k_ i ( n + 1 \u2264 k_ i \u2264 10^ 18 ) \u2014 the year number Misha' s mother is interested in host city in.",
    "output": "Print q integers. The i - th of them should be the city the olympiad will be hosted in the year k_ i .",
    "note": "In the first example Misha' s mother is interested in the first 10 years after the rule was introduced. The host cities these years are 4, 3, 4, 2, 3, 4, 1, 2, 3, 4. In the second example the host cities after the new city is introduced are 2, 3, 1, 2, 3, 5, 1, 2, 3, 4, 5, 1.",
    "topics": [
      "binary search",
      "data structures",
      "implementation",
      "sortings",
      "trees",
      "two pointers"
    ],
    "id": "1181D"
  },
  {
    "title": "Fedor Runs for President",
    "url": "https://codeforces.com/problemset/problem/1179/D",
    "history": "Fedor runs for president of Byteland! In the debates, he will be asked how to solve Byteland' s transport problem. It' s a really hard problem because of Byteland' s transport system is now a tree ( connected graph without cycles) . Fedor' s team has found out in the ministry of transport of Byteland that there is money in the budget only for one additional road. In the debates, he is going to say that he will build this road as a way to maximize the number of distinct simple paths in the country. A simple path is a path which goes through every vertex no more than once. Two simple paths are named distinct if sets of their edges are distinct. But Byteland' s science is deteriorated, so Fedor' s team hasn' t succeeded to find any scientists to answer how many distinct simple paths they can achieve after adding exactly one edge on the transport system? Help Fedor to solve it. An edge can be added between vertices that are already connected, but it can' t be a loop. In this problem, we consider only simple paths of length at least two.",
    "input": "The first line contains one integer n ( 2 \u2264 n \u2264 500 000 ) \u2014 number of vertices in Byteland' s transport system. Each of the following n - 1 lines contains two integers v_ i and u_ i ( 1 \u2264 v_ i, u_ i \u2264 n ) . It' s guaranteed that the graph is tree.",
    "output": "Print exactly one integer \u2014 a maximal number of simple paths that can be achieved after adding one edge.",
    "note": "",
    "topics": [
      "data structures",
      "dp",
      "trees"
    ],
    "id": "1179D"
  },
  {
    "title": "Serge and Dining Room",
    "url": "https://codeforces.com/problemset/problem/1179/C",
    "history": "Serge came to the school dining room and discovered that there is a big queue here. There are m pupils in the queue. He' s not sure now if he wants to wait until the queue will clear, so he wants to know which dish he will receive if he does. As Serge is very tired, he asks you to compute it instead of him. Initially there are n dishes with costs a_ 1, a_ 2, . . . , a_ n . As you already know, there are the queue of m pupils who have b_ 1, . . . , b_ m togrogs respectively ( pupils are enumerated by queue order, i. e the first pupil in the queue has b_ 1 togrogs and the last one has b_ m togrogs) Pupils think that the most expensive dish is the most delicious one, so every pupil just buys the most expensive dish for which he has money ( every dish has a single copy, so when a pupil has bought it nobody can buy it later) , and if a pupil doesn' t have money for any dish, he just leaves the queue ( so brutal capitalism. . . ) But money isn' t a problem at all for Serge, so Serge is buying the most expensive dish if there is at least one remaining. Moreover, Serge' s school has a very unstable economic situation and the costs of some dishes or number of togrogs of some pupils can change. More formally, you must process q queries: change a_ i to x . It means that the price of the i - th dish becomes x togrogs. change b_ i to x . It means that the i - th pupil in the queue has x togrogs now. Nobody leaves the queue during those queries because a saleswoman is late. After every query, you must tell Serge price of the dish which he will buy if he has waited until the queue is clear, or - 1 if there are no dishes at this point, according to rules described above.",
    "input": "The first line contains integers n and m ( 1 \u2264 n, m \u2264 300 000 ) \u2014 number of dishes and pupils respectively. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 6 ) \u2014 elements of array a . The third line contains m integers b_ 1, b_ 2, . . . , b_ m ( 1 \u2264 b_ i \u2264 10^ 6 ) \u2014 elements of array b . The fourth line conatins integer q ( 1 \u2264 q \u2264 300 000 ) \u2014 number of queries. Each of the following q lines contains as follows: if a query changes price of some dish, it contains 1 , and two integers i and x ( 1 \u2264 i \u2264 n , 1 \u2264 x \u2264 10^ 6 ) , what means a_ i becomes x . if a query changes number of togrogs of some pupil, it contains 2 , and two integers i and x ( 1 \u2264 i \u2264 m , 1 \u2264 x \u2264 10^ 6 ) , what means b_ i becomes x .",
    "output": "For each of q queries prints the answer as the statement describes, the answer of the i - th query in the i - th line ( the price of the dish which Serge will buy or - 1 if nothing remains)",
    "note": "In the first sample after the first query, there is one dish with price 100 togrogs and one pupil with one togrog, so Serge will buy the dish with price 100 togrogs. In the second sample after the first query, there is one dish with price one togrog and one pupil with 100 togrogs, so Serge will get nothing. In the third sample after the first query, nobody can buy the dish with price 8 , so Serge will take it. After the second query, all dishes will be bought, after the third one the third and fifth pupils will by the first and the second dishes respectively and nobody will by the fourth one.",
    "topics": [
      "binary search",
      "data structures",
      "graph matchings",
      "greedy",
      "implementation",
      "math",
      "trees"
    ],
    "id": "1179C"
  },
  {
    "title": "Valeriy and Deque",
    "url": "https://codeforces.com/problemset/problem/1179/A",
    "history": "Recently, on the course of algorithms and data structures, Valeriy learned how to use a deque. He built a deque filled with n elements. The i - th element is a_ i ( i = 1, 2, . . . , n ) . He gradually takes the first two leftmost elements from the deque ( let' s call them A and B , respectively) , and then does the following: if A > B , he writes A to the beginning and writes B to the end of the deque, otherwise, he writes to the beginning B , and A writes to the end of the deque. We call this sequence of actions an operation. For example, if deque was [ 2, 3, 4, 5, 1] , on the operation he will write B= 3 to the beginning and A= 2 to the end, so he will get [ 3, 4, 5, 1, 2] . The teacher of the course, seeing Valeriy, who was passionate about his work, approached him and gave him q queries. Each query consists of the singular number m_ j ( j = 1, 2, . . . , q) . It is required for each query to answer which two elements he will pull out on the m_ j - th operation. Note that the queries are independent and for each query the numbers A and B should be printed in the order in which they will be pulled out of the deque. Deque is a data structure representing a list of elements where insertion of new elements or deletion of existing elements can be made from both sides.",
    "input": "The first line contains two integers n and q ( 2 \u2264 n \u2264 10^ 5 , 0 \u2264 q \u2264 3 \u00b7 10^ 5 ) \u2014 the number of elements in the deque and the number of queries. The second line contains n integers a_ 1 , a_ 2 , . . . , a_ n , where a_ i ( 0 \u2264 a_ i \u2264 10^ 9) \u2014 the deque element in i - th position. The next q lines contain one number each, meaning m_ j ( 1 \u2264 m_ j \u2264 10^ 18 ) .",
    "output": "For each teacher' s query, output two numbers A and B \u2014 the numbers that Valeriy pulls out of the deque for the m_ j - th operation.",
    "note": "Consider all 10 steps for the first test in detail: [ 1, 2, 3, 4, 5] \u2014 on the first operation, A and B are 1 and 2 , respectively. So, 2 we write to the beginning of the deque, and 1 \u2014 to the end. We get the following status of the deque: [ 2, 3, 4, 5, 1] . [ 2, 3, 4, 5, 1] \u21d2 A = 2, B = 3 . [ 3, 4, 5, 1, 2] [ 4, 5, 1, 2, 3] [ 5, 1, 2, 3, 4] [ 5, 2, 3, 4, 1] [ 5, 3, 4, 1, 2] [ 5, 4, 1, 2, 3] [ 5, 1, 2, 3, 4] [ 5, 2, 3, 4, 1] \u21d2 A = 5, B = 2 .",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "1179A"
  },
  {
    "title": "The Awesomest Vertex",
    "url": "https://codeforces.com/problemset/problem/1178/G",
    "history": "You are given a rooted tree on n vertices. The vertices are numbered from 1 to n ; the root is the vertex number 1 . Each vertex has two integers associated with it: a_ i and b_ i . We denote the set of all ancestors of v ( including v itself) by R( v) . The awesomeness of a vertex v is defined as | \u2211_ w \u2208 R( v) a_ w| \u00b7| \u2211_ w \u2208 R( v) b_ w| , where | x| denotes the absolute value of x . Process q queries of one of the following forms: 1 v x \u2014 increase a_ v by a positive integer x . 2 v \u2014 report the maximum awesomeness in the subtree of vertex v .",
    "input": "The first line contains two integers n and q ( 1 \u2264 n \u2264 2\u00b7 10^ 5, 1 \u2264 q \u2264 10^ 5 ) \u2014 the number of vertices in the tree and the number of queries, respectively. The second line contains n - 1 integers p_ 2, p_ 3, . . . , p_ n ( 1 \u2264 p_ i < i ) , where p_ i means that there is an edge between vertices i and p_ i . The third line contains n integers a_ 1, a_ 2, . . . , a_ n ( - 5000 \u2264 a_ i \u2264 5000 ) , the initial values of a_ i for each vertex. The fourth line contains n integers b_ 1, b_ 2, . . . , b_ n ( - 5000 \u2264 b_ i \u2264 5000 ) , the values of b_ i for each vertex. Each of the next q lines describes a query. It has one of the following forms: 1 v x ( 1 \u2264 v \u2264 n , 1\u2264 x \u2264 5000 ) . 2 v ( 1 \u2264 v \u2264 n ) .",
    "output": "For each query of the second type, print a single line with the maximum awesomeness in the respective subtree.",
    "note": "The initial awesomeness of the vertices is [ 100, 91, 57, 64, 57] . The most awesome vertex in the subtree of vertex 1 ( the first query) is 1 , and the most awesome vertex in the subtree of vertex 2 ( the second query) is 2 . After the first update ( the third query) , the awesomeness changes to [ 100, 169, 57, 160, 57] and thus the most awesome vertex in the whole tree ( the fourth query) is now 2 . After the second update ( the fifth query) , the awesomeness becomes [ 100, 234, 57, 240, 152] , hence the most awesome vertex ( the sixth query) is now 4 .",
    "topics": [
      "data structures",
      "dfs and similar"
    ],
    "id": "1178G"
  },
  {
    "title": "Yet Another Partiton Problem",
    "url": "https://codeforces.com/problemset/problem/1175/G",
    "history": "You are given array a_ 1, a_ 2, . . . , a_ n . You need to split it into k subsegments ( so every element is included in exactly one subsegment) . The weight of a subsegment a_ l, a_ l+ 1, . . . , a_ r is equal to ( r - l + 1) \u00b7max_ l \u2264 i \u2264 r( a_ i) . The weight of a partition is a total weight of all its segments. Find the partition of minimal weight.",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 2 \u00b7 10^ 4 , 1 \u2264 k \u2264min( 100, n) ) \u2014 the length of the array a and the number of subsegments in the partition. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 2 \u00b7 10^ 4 ) \u2014 the array a .",
    "output": "Print single integer \u2014 the minimal weight among all possible partitions.",
    "note": "The optimal partition in the first example is next: 6 1 7 | 4 . The optimal partition in the second example is next: 6 | 1 | 7 4 . One of the optimal partitions in the third example is next: 5 | 1 5 | 1 | 5 .",
    "topics": [
      "data structures",
      "divide and conquer",
      "dp",
      "geometry",
      "two pointers"
    ],
    "id": "1175G"
  },
  {
    "title": "The Number of Subpermutations",
    "url": "https://codeforces.com/problemset/problem/1175/F",
    "history": "You have an array a_ 1, a_ 2, . . . , a_ n . Let' s call some subarray a_ l, a_ l + 1, . . . , a_ r of this array a subpermutation if it contains all integers from 1 to r- l+ 1 exactly once. For example, array a = [ 2, 2, 1, 3, 2, 3, 1] contains 6 subarrays which are subpermutations: [ a_ 2 . . . a_ 3] , [ a_ 2 . . . a_ 4] , [ a_ 3 . . . a_ 3] , [ a_ 3 . . . a_ 5] , [ a_ 5 . . . a_ 7] , [ a_ 7 . . . a_ 7] . You are asked to calculate the number of subpermutations.",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 3 \u00b7 10^ 5 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) . This array can contain the same integers.",
    "output": "Print the number of subpermutations of the array a .",
    "note": "There are 7 subpermutations in the first test case. Their segments of indices are [ 1, 4] , [ 3, 3] , [ 3, 6] , [ 4, 7] , [ 6, 7] , [ 7, 7] and [ 7, 8] . In the second test case 6 subpermutations exist: [ 1, 1] , [ 2, 2] , [ 2, 3] , [ 3, 4] , [ 4, 4] and [ 4, 5] .",
    "topics": [
      "brute force",
      "data structures",
      "divide and conquer",
      "hashing",
      "math"
    ],
    "id": "1175F"
  },
  {
    "title": "Minimal Segment Cover",
    "url": "https://codeforces.com/problemset/problem/1175/E",
    "history": "You are given n intervals in form [ l; r] on a number line. You are also given m queries in form [ x; y] . What is the minimal number of intervals you have to take so that every point ( not necessarily integer) from x to y is covered by at least one of them? If you can' t choose intervals so that every point from x to y is covered, then print - 1 for that query.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of intervals and the number of queries, respectively. Each of the next n lines contains two integer numbers l_ i and r_ i ( 0 \u2264 l_ i < r_ i \u2264 5 \u00b7 10^ 5 ) \u2014 the given intervals. Each of the next m lines contains two integer numbers x_ i and y_ i ( 0 \u2264 x_ i < y_ i \u2264 5 \u00b7 10^ 5 ) \u2014 the queries.",
    "output": "Print m integer numbers. The i - th number should be the answer to the i - th query: either the minimal number of intervals you have to take so that every point ( not necessarily integer) from x_ i to y_ i is covered by at least one of them or - 1 if you can' t choose intervals so that every point from x_ i to y_ i is covered.",
    "note": "In the first example there are three queries: query [ 1; 3] can be covered by interval [ 1; 3] ; query [ 1; 4] can be covered by intervals [ 1; 3] and [ 2; 4] . There is no way to cover [ 1; 4] by a single interval; query [ 3; 4] can be covered by interval [ 2; 4] . It doesn' t matter that the other points are covered besides the given query. In the second example there are four queries: query [ 1; 2] can be covered by interval [ 1; 3] . Note that you can choose any of the two given intervals [ 1; 3] ; query [ 1; 3] can be covered by interval [ 1; 3] ; query [ 1; 4] can' t be covered by any set of intervals; query [ 1; 5] can' t be covered by any set of intervals. Note that intervals [ 1; 3] and [ 4; 5] together don' t cover [ 1; 5] because even non- integer points should be covered. Here 3. 5 , for example, isn' t covered.",
    "topics": [
      "data structures",
      "dfs and similar",
      "divide and conquer",
      "dp",
      "greedy",
      "implementation",
      "trees"
    ],
    "id": "1175E"
  },
  {
    "title": "Catch Overflow!",
    "url": "https://codeforces.com/problemset/problem/1175/B",
    "history": "You are given a function f written in some basic language. The function accepts an integer value, which is immediately written into some variable x . x is an integer variable and can be assigned values from 0 to 2^ 32- 1 . The function contains three types of commands: for n \u2014 for loop; end \u2014 every command between \" for n \" and corresponding \" end\" is executed n times; add \u2014 adds 1 to x . After the execution of these commands, value of x is returned. Every \" for n \" is matched with \" end\" , thus the function is guaranteed to be valid. \" for n \" can be immediately followed by \" end\" . \" add\" command can be outside of any for loops. Notice that \" add\" commands might overflow the value of x ! It means that the value of x becomes greater than 2^ 32- 1 after some \" add\" command. Now you run f( 0) and wonder if the resulting value of x is correct or some overflow made it incorrect. If overflow happened then output \" OVERFLOW! ! ! \" , otherwise print the resulting value of x .",
    "input": "The first line contains a single integer l ( 1 \u2264 l \u2264 10^ 5 ) \u2014 the number of lines in the function. Each of the next l lines contains a single command of one of three types: for n ( 1 \u2264 n \u2264 100 ) \u2014 for loop; end \u2014 every command between \" for n \" and corresponding \" end\" is executed n times; add \u2014 adds 1 to x .",
    "output": "If overflow happened during execution of f( 0) , then output \" OVERFLOW! ! ! \" , otherwise print the resulting value of x .",
    "note": "In the first example the first \" add\" is executed 1 time, the second \" add\" is executed 150 times and the last \" add\" is executed 10 times. Note that \" for n \" can be immediately followed by \" end\" and that \" add\" can be outside of any for loops. In the second example there are no commands \" add\" , thus the returning value is 0. In the third example \" add\" command is executed too many times, which causes x to go over 2^ 32- 1 .",
    "topics": [
      "data structures",
      "expression parsing",
      "implementation"
    ],
    "id": "1175B"
  },
  {
    "title": "Nauuo and Bug",
    "url": "https://codeforces.com/problemset/problem/1172/F",
    "history": "Nauuo is a girl who loves coding. One day she was solving a problem which requires to calculate a sum of some numbers modulo p . She wrote the following code and got the verdict \" Wrong answer\" . She soon discovered the bug \u2014 the ModAdd function only worked for numbers in the range [ 0, p) , but the numbers in the problem may be out of the range. She was curious about the wrong function, so she wanted to know the result of it. However, the original code worked too slow, so she asked you to help her. You are given an array a_ 1, a_ 2, . . . , a_ n and a number p . Nauuo will make m queries, in each query, you are given l and r , and you have to calculate the results of Sum( a, l, r, p) . You can see the definition of the Sum function in the pseudocode above. Note that the integers won' t overflow in the code above.",
    "input": "The first line contains three integers n , m , p ( 1 \u2264 n \u2264 10^ 6 , 1 \u2264 m \u2264 2 \u00b7 10^ 5 , 1 \u2264 p \u2264 10^ 9 ) \u2014 the length of the given array, the number of queries and the modulus. Note that the modulus is used only in the ModAdd function. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9\u2264 a_ i\u226410^ 9 ) \u2014 the given array. In the following m lines, each line contains two integers l , r ( 1\u2264 l\u2264 r\u2264 n ) \u2014 you have to calculate the result of Sum( a, l, r, p) .",
    "output": "The output contains m integers to answer the queries in the given order.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": "1172F"
  },
  {
    "title": "Nauuo and ODT",
    "url": "https://codeforces.com/problemset/problem/1172/E",
    "history": "Nauuo is a girl who loves traveling. One day she went to a tree, Old Driver Tree, literally, a tree with an old driver on it. The tree is a connected graph consisting of n nodes and n- 1 edges. Each node has a color, and Nauuo will visit the ODT through a simple path on the tree in the old driver' s car. Nauuo wants to visit see more different colors in her journey, but she doesn' t know which simple path she will be traveling on. So, she wants to calculate the sum of the numbers of different colors on all different paths. Can you help her? What' s more, the ODT is being redecorated, so there will be m modifications, each modification will change a single node' s color. Nauuo wants to know the answer after each modification too. Note that in this problem, we consider the simple path from u to v and the simple path from v to u as two different simple paths if and only if u v .",
    "input": "The first line contains two integers n and m ( 2\u2264 n\u2264 4\u00b7 10^ 5 , 1\u2264 m\u2264 4\u00b7 10^ 5 ) \u2014 the number of nodes and the number of modifications. The second line contains n integers c_ 1, c_ 2, . . . , c_ n ( 1\u2264 c_ i\u2264 n ) , where c_ i is the initial color of node i . Each of the next n- 1 lines contains two integers u and v ( 1\u2264 u, v\u2264 n ) , denoting there is an edge between u and v . It is guaranteed that the given edges form a tree. Each of the next m lines contains two integers u and x ( 1\u2264 u, x\u2264 n ) , which means a modification that changes the color of node u into x .",
    "output": "The output contains m+ 1 integers \u2014 the first integer is the answer at the beginning, the rest integers are the answers after every modification in the given order.",
    "note": "Example 1The number of colors on each simple path at the beginning:",
    "topics": [
      "data structures"
    ],
    "id": "1172E"
  },
  {
    "title": "Decoding of Integer Sequences",
    "url": "https://codeforces.com/problemset/problem/1170/D",
    "history": "Polycarp is developing a method for transmitting n integer sequences over a network. This method should support the transmission of an arbitrary number of integer sequences; sequences can have different lengths. The sequences contain arbitrary non- negative integers. Polycarp developed the following encoding procedure: We assume that the sequences are numbered from 1 to n . We add a special terminating marker to each sequence at the end, an element equal to - 1. The encoding result is a new single sequence that contains all the elements of the specified n in a special order: first, add to the result of coding all the first elements of the sequences ( in the order from the 1 - st to the n - th) , then all the second elements ( in the order from the 1 - st to the n - th) and so on, if the sequence does not have the corresponding element, then it is simply skipped. The process ends when all elements of all sequences are added. For example, if you want to encode three sequences [ 3, 1, 4] , [ 2, 7] and [ 1, 2, 3, 4] , then the sequence of actions will be as follows: we modify all three sequences by appending - 1: [ 3, 1, 4, - 1] , [ 2, 7, - 1] and [ 1, 2, 3, 4, - 1] ; we write out all the first elements, we get [ 3, 2, 1] ; then write down all the second elements, we get [ 3, 2, 1, 1, 7, 2] ; then write down all the third elements, we get [ 3, 2, 1, 1, 7, 2, 4, - 1, 3] ; then write down all fourth elements, get [ 3, 2, 1, 1, 7, 2, 4, - 1, 3, - 1, 4] ( note that the second sequence has already ended) ; then write down all the fifth elements, we get [ 3, 2, 1, 1, 7, 2, 4, - 1, 3, - 1, 4, - 1] ( note that the first and second sequences have already ended) ; all the sequences are ended now, and the encoding process is finished; the encoding result is: [ 3, 2, 1, 1, 7, 2, 4, - 1, 3, - 1, 4, - 1] . Your task is to implement decoding by a given encoding result.",
    "input": "The first line contains integer number m ( 1 \u2264 m \u2264 3\u00b710^ 5 ) , denoting the length of the encoding result. The second line contains the result of encoding as a sequence of integers b_ 1, b_ 2, . . . , b_ m ( - 1 \u2264 b_ i \u2264 100 ) . It is guaranteed that in the initial sequences before encoding contains only non- negative integers from 0 to 100 , that you are in fact given the result of correct encoding ( in other words, it is guaranteed that the answer exists) . It is possible that one or more initial sequences were empty before encoding.",
    "output": "Print n , where n is the number of encoded sequences. Then print n lines in the format k_ i, a_ i1, a_ i2, . . . , a_ ik_ i , where k_ i is the length of the i - th sequence, and a_ i1, a_ i2, . . . , a_ ik_ i are its elements. Separate the numbers in the lines with spaces. Please note that the encoding procedure is such that every possible encoding result can be decoded in only one way.",
    "note": "",
    "topics": [
      "*special",
      "data structures",
      "implementation"
    ],
    "id": "1170D"
  },
  {
    "title": "Scalar Queries",
    "url": "https://codeforces.com/problemset/problem/1167/F",
    "history": "You are given an array a_ 1, a_ 2, . . . , a_ n . All a_ i are pairwise distinct. Let' s define function f( l, r) as follows: let' s define array b_ 1, b_ 2, . . . , b_ r - l + 1 , where b_ i = a_ l - 1 + i ; sort array b in increasing order; result of the function f( l, r) is \u2211_ i = 1^ r - l + 1b_ i \u00b7 i . Calculate ( \u2211_ 1 \u2264 l \u2264 r \u2264 nf( l, r) ) ( 10^ 9+ 7) , i. e. total sum of f for all subsegments of a modulo 10^ 9+ 7 .",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 5 \u00b7 10^ 5 ) \u2014 the length of array a . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 , a_ i = \u0338 a_ j for i = \u0338 j ) \u2014 array a .",
    "output": "Print one integer \u2014 the total sum of f for all subsegments of a modulo 10^ 9+ 7",
    "note": "Description of the first example: f( 1, 1) = 5 \u00b7 1 = 5 ; f( 1, 2) = 2 \u00b7 1 + 5 \u00b7 2 = 12 ; f( 1, 3) = 2 \u00b7 1 + 4 \u00b7 2 + 5 \u00b7 3 = 25 ; f( 1, 4) = 2 \u00b7 1 + 4 \u00b7 2 + 5 \u00b7 3 + 7 \u00b7 4 = 53 ; f( 2, 2) = 2 \u00b7 1 = 2 ; f( 2, 3) = 2 \u00b7 1 + 4 \u00b7 2 = 10 ; f( 2, 4) = 2 \u00b7 1 + 4 \u00b7 2 + 7 \u00b7 3 = 31 ; f( 3, 3) = 4 \u00b7 1 = 4 ; f( 3, 4) = 4 \u00b7 1 + 7 \u00b7 2 = 18 ; f( 4, 4) = 7 \u00b7 1 = 7 ;",
    "topics": [
      "combinatorics",
      "data structures",
      "math",
      "sortings"
    ],
    "id": "1167F"
  },
  {
    "title": "Range Deleting",
    "url": "https://codeforces.com/problemset/problem/1167/E",
    "history": "You are given an array consisting of n integers a_ 1, a_ 2, . . . , a_ n and an integer x . It is guaranteed that for every i , 1 \u2264 a_ i \u2264 x . Let' s denote a function f( l, r) which erases all values such that l \u2264 a_ i \u2264 r from the array a and returns the resulting array. For example, if a = [ 4, 1, 1, 4, 5, 2, 4, 3] , then f( 2, 4) = [ 1, 1, 5] . Your task is to calculate the number of pairs ( l, r) such that 1 \u2264 l \u2264 r \u2264 x and f( l, r) is sorted in non- descending order. Note that the empty array is also considered sorted.",
    "input": "The first line contains two integers n and x ( 1 \u2264 n, x \u2264 10^ 6 ) \u2014 the length of array a and the upper limit for its elements, respectively. The second line contains n integers a_ 1, a_ 2, . . . a_ n ( 1 \u2264 a_ i \u2264 x ) .",
    "output": "Print the number of pairs 1 \u2264 l \u2264 r \u2264 x such that f( l, r) is sorted in non- descending order.",
    "note": "In the first test case correct pairs are ( 1, 1) , ( 1, 2) , ( 1, 3) and ( 2, 3) . In the second test case correct pairs are ( 1, 3) , ( 1, 4) , ( 2, 3) , ( 2, 4) , ( 3, 3) and ( 3, 4) .",
    "topics": [
      "binary search",
      "combinatorics",
      "data structures",
      "two pointers"
    ],
    "id": "1167E"
  },
  {
    "title": "Vicky's Delivery Service",
    "url": "https://codeforces.com/problemset/problem/1166/F",
    "history": "In a magical land there are n cities conveniently numbered 1, 2, . . . , n . Some pairs of these cities are connected by magical colored roads. Magic is unstable, so at any time, new roads may appear between two cities. Vicky the witch has been tasked with performing deliveries between some pairs of cities. However, Vicky is a beginner, so she can only complete a delivery if she can move from her starting city to her destination city through a double rainbow. A double rainbow is a sequence of cities c_ 1, c_ 2, . . . , c_ k satisfying the following properties: For each i with 1 \u2264 i \u2264 k - 1 , the cities c_ i and c_ i + 1 are connected by a road. For each i with 1 \u2264 i \u2264k - 1/ 2 , the roads connecting c_ 2i with c_ 2i - 1 and c_ 2i + 1 have the same color. For example if k = 5 , the road between c_ 1 and c_ 2 must be the same color as the road between c_ 2 and c_ 3 , and the road between c_ 3 and c_ 4 must be the same color as the road between c_ 4 and c_ 5 . Vicky has a list of events in chronological order, where each event is either a delivery she must perform, or appearance of a new road. Help her determine which of her deliveries she will be able to complete.",
    "input": "The first line contains four integers n , m , c , and q ( 2 \u2264 n \u2264 10^ 5 , 1 \u2264 m, c, q \u2264 10^ 5 ) , denoting respectively the number of cities, the number of roads initially present, the number of different colors the roads can take, and the number of events. Each of the following m lines contains three integers x , y , and z ( 1 \u2264 x, y \u2264 n , 1 \u2264 z \u2264 c ) , describing that there initially exists a bidirectional road with color z between cities x and y . Then q lines follow, describing the events. Each event is one of the following two types: + x y z ( 1 \u2264 x, y \u2264 n , 1 \u2264 z \u2264 c ) , meaning a road with color z appears between cities x and y ; ? x y ( 1 \u2264 x, y \u2264 n ) , meaning you should determine whether Vicky can make a delivery starting at city x and ending at city y . It is guaranteed that x = \u0338 y . It is guaranteed that at any moment, there is at most one road connecting any pair of cities, and that no road connects a city to itself. It is guaranteed that the input contains at least one event of the second type.",
    "output": "For each event of the second type, print a single line containing \" Yes\" ( without quotes) if the delivery can be made, or a single line containing \" No\" ( without quotes) otherwise.",
    "note": "The following picture corresponds to the sample. For her first delivery, Vicky can use the sequence 1, 2, 3, 4 which is a double rainbow. However, she cannot complete the second delivery, as she can only reach city 3 . After adding the road between cities 1 and 3 , she can now complete a delivery from city 4 to city 1 by using the double rainbow 4, 3, 1.",
    "topics": [
      "data structures",
      "dsu",
      "graphs",
      "hashing"
    ],
    "id": "1166F"
  },
  {
    "title": "Polycarp Training",
    "url": "https://codeforces.com/problemset/problem/1165/B",
    "history": "Polycarp wants to train before another programming competition. During the first day of his training he should solve exactly 1 problem, during the second day \u2014 exactly 2 problems, during the third day \u2014 exactly 3 problems, and so on. During the k - th day he should solve k problems. Polycarp has a list of n contests, the i - th contest consists of a_ i problems. During each day Polycarp has to choose exactly one of the contests he didn' t solve yet and solve it. He solves exactly k problems from this contest. Other problems are discarded from it. If there are no contests consisting of at least k problems that Polycarp didn' t solve yet during the k - th day, then Polycarp stops his training. How many days Polycarp can train if he chooses the contests optimally?",
    "input": "The first line of the input contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of contests. The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 2 \u00b7 10^ 5 ) \u2014 the number of problems in the i - th contest.",
    "output": "Print one integer \u2014 the maximum number of days Polycarp can train if he chooses the contests optimally.",
    "note": "",
    "topics": [
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "1165B"
  },
  {
    "title": "Indecisive Taxi Fee",
    "url": "https://codeforces.com/problemset/problem/1163/F",
    "history": "In the city of Capypaland where Kuro and Shiro resides, there are n towns numbered from 1 to n and there are m bidirectional roads numbered from 1 to m connecting them. The i - th road connects towns u_ i and v_ i . Since traveling between the towns is quite difficult, the taxi industry is really popular here. To survive the harsh competition, each taxi company has to find a distinctive trait for their customers. Kuro is the owner of a taxi company. He has decided to introduce a new fee model for his taxi brand, where the fee for each ride is not calculated based on the trip length, but on the sum of the prices of the roads traveled. The price for each of the m roads has been decided by Kuro himself. As of now, the price for the road i is w_ i and hence the fee for a taxi ride traveling through roads e_ 1, e_ 2, . . . , e_ k is \u2211_ i= 1^ k w_ e_ i . However, Kuro himself is an indecisive person, so he has drafted q plans to change the road price. Each of the plans will be based on the original prices w_ i , except for a single road t_ j , the price of which is changed to x_ j . Note, that the plans are independent of each other. Shiro is a regular customer of the Kuro' s taxi brand since she uses the taxi to travel from town 1 to town n every day. Since she' s so a regular customer, Kuro decided to show her all his q plans before publishing them to the public. Now, Shiro wants to know the lowest fee she must pay to travel from the town 1 to the town n for each Kuro' s plan.",
    "input": "The first line contains three integers n , m and q ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 m, q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of towns, the number of roads, and the number of plans that Kuro has drafted respectively. The i - th of the next m contains three integers u_ i , v_ i and w_ i ( 1 \u2264 u_ i, v_ i \u2264 n , 1 \u2264 w_ i \u2264 10^ 9 , u_ i v_ i ) \u2014 two endpoints and the original price of the i - th road. It is guaranteed, that there is at least one way to travel from town 1 to town n using these m bidirectional roads. Each of the next q lines contains two integers t_ j and x_ j ( 1 \u2264 t_ j \u2264 m, 1 \u2264 x_ j \u2264 10^ 9 ) \u2014 the index of the road Kuro has planned to change and its new price respectively.",
    "output": "Print q integers \u2014 the lowest fee Shiro must pay to get from town 1 to town n in each of those q plans.",
    "note": "In the first example, the original overview of Capypaland looks like this, where the number next to each road denotes the original prices of the roads, The overview of the first plan, The lowest fee Shiro must pay in this plan is 4 , which corresponds to the path 1 \u2192 4 . The overview of the second plan, The lowest fee Shiro must pay in this plan is 2 , which corresponds to the path 1 \u2192 3 \u2192 4 . The overview of the third plan, The lowest fee Shiro must pay in this plan is 5 , which corresponds to the path 1 \u2192 2 \u2192 4 .",
    "topics": [
      "data structures",
      "graphs",
      "shortest paths"
    ],
    "id": "1163F"
  },
  {
    "title": "Magical Permutation",
    "url": "https://codeforces.com/problemset/problem/1163/E",
    "history": "Kuro has just learned about permutations and he is really excited to create a new permutation type. He has chosen n distinct positive integers and put all of them in a set S . Now he defines a magical permutation to be: A permutation of integers from 0 to 2^ x - 1 , where x is a non- negative integer. The bitwise xor of any two consecutive elements in the permutation is an element in S . Since Kuro is really excited about magical permutations, he wants to create the longest magical permutation possible. In other words, he wants to find the largest non- negative integer x such that there is a magical permutation of integers from 0 to 2^ x - 1 . Since he is a newbie in the subject, he wants you to help him find this value of x and also the magical permutation for that x .",
    "input": "The first line contains the integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of elements in the set S . The next line contains n distinct integers S_ 1, S_ 2, . . . , S_ n ( 1 \u2264 S_ i \u2264 2 \u00b7 10^ 5 ) \u2014 the elements in the set S .",
    "output": "In the first line print the largest non- negative integer x , such that there is a magical permutation of integers from 0 to 2^ x - 1 . Then print 2^ x integers describing a magical permutation of integers from 0 to 2^ x - 1 . If there are multiple such magical permutations, print any of them.",
    "note": "In the first example, 0, 1, 3, 2 is a magical permutation since: 0 \u2295 1 = 1 \u2208 S 1 \u2295 3 = 2 \u2208 S 3 \u2295 2 = 1 \u2208 S Where \u2295 denotes bitwise xor operation.",
    "topics": [
      "bitmasks",
      "brute force",
      "constructive algorithms",
      "data structures",
      "graphs",
      "math"
    ],
    "id": "1163E"
  },
  {
    "title": "Power Transmission (Hard Edition)",
    "url": "https://codeforces.com/problemset/problem/1163/C2",
    "history": "This problem is same as the previous one, but has larger constraints. It was a Sunday morning when the three friends Selena, Shiro and Katie decided to have a trip to the nearby power station ( do not try this at home) . After arriving at the power station, the cats got impressed with a large power transmission system consisting of many chimneys, electric poles, and wires. Since they are cats, they found those things gigantic. At the entrance of the station, there is a map describing the complicated wiring system. Selena is the best at math among three friends. He decided to draw the map on the Cartesian plane. Each pole is now a point at some coordinates ( x_ i, y_ i) . Since every pole is different, all of the points representing these poles are distinct. Also, every two poles are connected with each other by wires. A wire is a straight line on the plane infinite in both directions. If there are more than two poles lying on the same line, they are connected by a single common wire. Selena thinks, that whenever two different electric wires intersect, they may interfere with each other and cause damage. So he wonders, how many pairs are intersecting? Could you help him with this problem?",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 1000 ) \u2014 the number of electric poles. Each of the following n lines contains two integers x_ i , y_ i ( - 10^ 4 \u2264 x_ i, y_ i \u2264 10^ 4 ) \u2014 the coordinates of the poles. It is guaranteed that all of these n points are distinct.",
    "output": "Print a single integer \u2014 the number of pairs of wires that are intersecting.",
    "note": "In the first example: In the second example: Note that the three poles ( 0, 0) , ( 0, 2) and ( 0, 4) are connected by a single wire. In the third example:",
    "topics": [
      "data structures",
      "geometry",
      "implementation",
      "math"
    ],
    "id": "1163C2"
  },
  {
    "title": "Cat Party (Hard Edition)",
    "url": "https://codeforces.com/problemset/problem/1163/B2",
    "history": "This problem is same as the previous one, but has larger constraints. Shiro' s just moved to the new house. She wants to invite all friends of her to the house so they can play monopoly. However, her house is too small, so she can only invite one friend at a time. For each of the n days since the day Shiro moved to the new house, there will be exactly one cat coming to the Shiro' s house. The cat coming in the i - th day has a ribbon with color u_ i . Shiro wants to know the largest number x , such that if we consider the streak of the first x days, it is possible to remove exactly one day from this streak so that every ribbon color that has appeared among the remaining x - 1 will have the same number of occurrences. For example, consider the following sequence of u_ i : [ 2, 2, 1, 1, 5, 4, 4, 5] . Then x = 7 makes a streak, since if we remove the leftmost u_ i = 5 , each ribbon color will appear exactly twice in the prefix of x - 1 days. Note that x = 8 doesn' t form a streak, since you must remove exactly one day. Since Shiro is just a cat, she is not very good at counting and needs your help finding the longest streak.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the total number of days. The second line contains n integers u_ 1, u_ 2, . . . , u_ n ( 1 \u2264 u_ i \u2264 10^ 5 ) \u2014 the colors of the ribbons the cats wear.",
    "output": "Print a single integer x \u2014 the largest possible streak of days.",
    "note": "In the first example, we can choose the longest streak of 13 days, since upon removing the last day out of the streak, all of the remaining colors 1 , 2 , 3 , and 4 will have the same number of occurrences of 3 . Note that the streak can also be 10 days ( by removing the 10 - th day from this streak) but we are interested in the longest streak. In the fourth example, if we take the streak of the first 6 days, we can remove the third day from this streak then all of the remaining colors 1 , 2 , 3 , 4 and 5 will occur exactly once.",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "1163B2"
  },
  {
    "title": "Cat Party (Easy Edition)",
    "url": "https://codeforces.com/problemset/problem/1163/B1",
    "history": "This problem is same as the next one, but has smaller constraints. Shiro' s just moved to the new house. She wants to invite all friends of her to the house so they can play monopoly. However, her house is too small, so she can only invite one friend at a time. For each of the n days since the day Shiro moved to the new house, there will be exactly one cat coming to the Shiro' s house. The cat coming in the i - th day has a ribbon with color u_ i . Shiro wants to know the largest number x , such that if we consider the streak of the first x days, it is possible to remove exactly one day from this streak so that every ribbon color that has appeared among the remaining x - 1 will have the same number of occurrences. For example, consider the following sequence of u_ i : [ 2, 2, 1, 1, 5, 4, 4, 5] . Then x = 7 makes a streak, since if we remove the leftmost u_ i = 5 , each ribbon color will appear exactly twice in the prefix of x - 1 days. Note that x = 8 doesn' t form a streak, since you must remove exactly one day. Since Shiro is just a cat, she is not very good at counting and needs your help finding the longest streak.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the total number of days. The second line contains n integers u_ 1, u_ 2, . . . , u_ n ( 1 \u2264 u_ i \u2264 10 ) \u2014 the colors of the ribbons the cats wear.",
    "output": "Print a single integer x \u2014 the largest possible streak of days.",
    "note": "In the first example, we can choose the longest streak of 13 days, since upon removing the last day out of the streak, all of the remaining colors 1 , 2 , 3 , and 4 will have the same number of occurrences of 3 . Note that the streak can also be 10 days ( by removing the 10 - th day from this streak) but we are interested in the longest streak. In the fourth example, if we take the streak of the first 6 days, we can remove the third day from this streak then all of the remaining colors 1 , 2 , 3 , 4 and 5 will occur exactly once.",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "1163B1"
  },
  {
    "title": "Permutation recovery",
    "url": "https://codeforces.com/problemset/problem/1158/C",
    "history": "Vasya has written some permutation p_ 1, p_ 2, . . . , p_ n of integers from 1 to n , so for all 1 \u2264 i \u2264 n it is true that 1 \u2264 p_ i \u2264 n and all p_ 1, p_ 2, . . . , p_ n are different. After that he wrote n numbers next_ 1, next_ 2, . . . , next_ n . The number next_ i is equal to the minimal index i < j \u2264 n , such that p_ j > p_ i . If there is no such j let' s let' s define as next_ i = n + 1 . In the evening Vasya went home from school and due to rain, his notebook got wet. Now it is impossible to read some written numbers. Permutation and some values next_ i are completely lost! If for some i the value next_ i is lost, let' s say that next_ i = - 1 . You are given numbers next_ 1, next_ 2, . . . , next_ n ( maybe some of them are equal to - 1 ) . Help Vasya to find such permutation p_ 1, p_ 2, . . . , p_ n of integers from 1 to n , that he can write it to the notebook and all numbers next_ i , which are not equal to - 1 , will be correct.",
    "input": "The first line contains one integer t \u2014 the number of test cases ( 1 \u2264 t \u2264 100 000 ) . Next 2 \u00b7 t lines contains the description of test cases, two lines for each. The first line contains one integer n \u2014 the length of the permutation, written by Vasya ( 1 \u2264 n \u2264 500 000 ) . The second line contains n integers next_ 1, next_ 2, . . . , next_ n , separated by spaces ( next_ i = - 1 or i < next_ i \u2264 n + 1 ) . It is guaranteed, that the sum of n in all test cases doesn' t exceed 500 000 . In hacks you can only use one test case, so T = 1 .",
    "output": "Print T lines, in i - th of them answer to the i - th test case. If there is no such permutations p_ 1, p_ 2, . . . , p_ n of integers from 1 to n , that Vasya could write, print the only number - 1 . In the other case print n different integers p_ 1, p_ 2, . . . , p_ n , separated by spaces ( 1 \u2264 p_ i \u2264 n ) . All defined values of next_ i which are not equal to - 1 should be computed correctly p_ 1, p_ 2, . . . , p_ n using defenition given in the statement of the problem. If there exists more than one solution you can find any of them.",
    "note": "In the first test case for permutation p = [ 1, 2, 3] Vasya should write next = [ 2, 3, 4] , because each number in permutation is less than next. It' s easy to see, that it is the only satisfying permutation. In the third test case, any permutation can be the answer because all numbers next_ i are lost. In the fourth test case, there is no satisfying permutation, so the answer is - 1 .",
    "topics": [
      "constructive algorithms",
      "data structures",
      "dfs and similar",
      "graphs",
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1158C"
  },
  {
    "title": "Minimum Array",
    "url": "https://codeforces.com/problemset/problem/1157/E",
    "history": "You are given two arrays a and b , both of length n . All elements of both arrays are from 0 to n- 1 . You can reorder elements of the array b ( if you want, you may leave the order of elements as it is) . After that, let array c be the array of length n , the i - th element of this array is c_ i = ( a_ i + b_ i) % n , where x % y is x modulo y . Your task is to reorder elements of the array b to obtain the lexicographically minimum possible array c . Array x of length n is lexicographically less than array y of length n , if there exists such i ( 1 \u2264 i \u2264 n ) , that x_ i < y_ i , and for any j ( 1 \u2264 j < i ) x_ j = y_ j .",
    "input": "The first line of the input contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of elements in a , b and c . The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i < n ) , where a_ i is the i - th element of a . The third line of the input contains n integers b_ 1, b_ 2, . . . , b_ n ( 0 \u2264 b_ i < n ) , where b_ i is the i - th element of b .",
    "output": "Print the lexicographically minimum possible array c . Recall that your task is to reorder elements of the array b and obtain the lexicographically minimum possible array c , where the i - th element of c is c_ i = ( a_ i + b_ i) % n .",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "greedy"
    ],
    "id": "1157E"
  },
  {
    "title": "Special Segments of Permutation",
    "url": "https://codeforces.com/problemset/problem/1156/E",
    "history": "You are given a permutation p of n integers 1 , 2 , . . . , n ( a permutation is an array where each element from 1 to n occurs exactly once) . Let' s call some subsegment p[ l, r] of this permutation special if p_ l + p_ r = max_ i = l^ r p_ i . Please calculate the number of special subsegments.",
    "input": "The first line contains one integer n ( 3 \u2264 n \u2264 2 \u00b7 10^ 5 ) . The second line contains n integers p_ 1 , p_ 2 , . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) . All these integers are pairwise distinct.",
    "output": "Print the number of special subsegments of the given permutation.",
    "note": "Special subsegments in the first example are [ 1, 5] and [ 1, 3] . The only special subsegment in the second example is [ 1, 3] .",
    "topics": [
      "data structures",
      "divide and conquer",
      "dsu",
      "two pointers"
    ],
    "id": "1156E"
  },
  {
    "title": "Beautiful Array",
    "url": "https://codeforces.com/problemset/problem/1155/D",
    "history": "You are given an array a consisting of n integers. Beauty of array is the maximum sum of some consecutive subarray of this array ( this subarray may be empty) . For example, the beauty of the array [ 10, - 5, 10, - 4, 1] is 15, and the beauty of the array [ - 3, - 5, - 1] is 0. You may choose at most one consecutive subarray of a and multiply all values contained in this subarray by x . You want to maximize the beauty of array after applying at most one such operation.",
    "input": "The first line contains two integers n and x ( 1 \u2264 n \u2264 3 \u00b7 10^ 5, - 100 \u2264 x \u2264 100 ) \u2014 the length of array a and the integer x respectively. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) \u2014 the array a .",
    "output": "Print one integer \u2014 the maximum possible beauty of array a after multiplying all values belonging to some consecutive subarray x .",
    "note": "In the first test case we need to multiply the subarray [ - 2, 1, - 6] , and the array becomes [ - 3, 8, 4, - 2, 12] with beauty 22 ( [ - 3, 8, 4, - 2, 12] ) . In the second test case we don' t need to multiply any subarray at all. In the third test case no matter which subarray we multiply, the beauty of array will be equal to 0.",
    "topics": [
      "brute force",
      "data structures",
      "divide and conquer",
      "dp",
      "greedy"
    ],
    "id": "1155D"
  },
  {
    "title": "Two Teams",
    "url": "https://codeforces.com/problemset/problem/1154/E",
    "history": "There are n students standing in a row. Two coaches are forming two teams \u2014 the first coach chooses the first team and the second coach chooses the second team. The i - th student has integer programming skill a_ i . All programming skills are distinct and between 1 and n , inclusive. Firstly, the first coach will choose the student with maximum programming skill among all students not taken into any team, and k closest students to the left of him and k closest students to the right of him ( if there are less than k students to the left or to the right, all of them will be chosen) . All students that are chosen leave the row and join the first team. Secondly, the second coach will make the same move ( but all students chosen by him join the second team) . Then again the first coach will make such move, and so on. This repeats until the row becomes empty ( i. e. the process ends when each student becomes to some team) . Your problem is to determine which students will be taken into the first team and which students will be taken into the second team.",
    "input": "The first line of the input contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of students and the value determining the range of chosen students during each move, respectively. The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) , where a_ i is the programming skill of the i - th student. It is guaranteed that all programming skills are distinct.",
    "output": "Print a string of n characters; i - th character should be 1 if i - th student joins the first team, or 2 otherwise.",
    "note": "In the first example the first coach chooses the student on a position 3 , and the row becomes empty ( all students join the first team) . In the second example the first coach chooses the student on position 4 , and the row becomes [ 2, 1] ( students with programming skills [ 3, 4, 5] join the first team) . Then the second coach chooses the student on position 1 , and the row becomes empty ( and students with programming skills [ 1, 2] join the second team) . In the third example the first coach chooses the student on position 1 , and the row becomes [ 1, 3, 5, 4, 6] ( students with programming skills [ 2, 7] join the first team) . Then the second coach chooses the student on position 5 , and the row becomes [ 1, 3, 5] ( students with programming skills [ 4, 6] join the second team) . Then the first coach chooses the student on position 3 , and the row becomes [ 1] ( students with programming skills [ 3, 5] join the first team) . And then the second coach chooses the remaining student ( and the student with programming skill 1 joins the second team) . In the fourth example the first coach chooses the student on position 3 , and the row becomes [ 2, 1] ( students with programming skills [ 3, 4, 5] join the first team) . Then the second coach chooses the student on position 1 , and the row becomes empty ( and students with programming skills [ 1, 2] join the second team) .",
    "topics": [
      "data structures",
      "implementation",
      "sortings"
    ],
    "id": "1154E"
  },
  {
    "title": "Number of Components",
    "url": "https://codeforces.com/problemset/problem/1151/E",
    "history": "The Kingdom of Kremland is a tree ( a connected undirected graph without cycles) consisting of n vertices. Each vertex i has its own value a_ i . All vertices are connected in series by edges. Formally, for every 1 \u2264 i < n there is an edge between the vertices of i and i+ 1 . Denote the function f( l, r) , which takes two integers l and r ( l \u2264 r ) : We leave in the tree only vertices whose values \u200b\u200brange from l to r . The value of the function will be the number of connected components in the new graph. Your task is to calculate the following sum: \u2211_ l= 1^ n\u2211_ r= l^ n f( l, r)",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of vertices in the tree. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 the values of the vertices.",
    "output": "Print one number \u2014 the answer to the problem.",
    "note": "In the first example, the function values \u200b\u200bwill be as follows: f( 1, 1) = 1 ( there is only a vertex with the number 2 , which forms one component) f( 1, 2) = 1 ( there are vertices 1 and 2 that form one component) f( 1, 3) = 1 ( all vertices remain, one component is obtained) f( 2, 2) = 1 ( only vertex number 1 ) f( 2, 3) = 2 ( there are vertices 1 and 3 that form two components) f( 3, 3) = 1 ( only vertex 3 ) Totally out 7 . In the second example, the function values \u200b\u200bwill be as follows: f( 1, 1) = 1 f( 1, 2) = 1 f( 1, 3) = 1 f( 1, 4) = 1 f( 2, 2) = 1 f( 2, 3) = 2 f( 2, 4) = 2 f( 3, 3) = 1 f( 3, 4) = 1 f( 4, 4) = 0 ( there is no vertex left, so the number of components is 0 ) Totally out 11 .",
    "topics": [
      "combinatorics",
      "data structures",
      "dp",
      "math"
    ],
    "id": "1151E"
  },
  {
    "title": "Tree Generator\u2122",
    "url": "https://codeforces.com/problemset/problem/1149/C",
    "history": "Owl Pacino has always been into trees \u2014 unweighted rooted trees in particular. He loves determining the diameter of every tree he sees \u2014 that is, the maximum length of any simple path in the tree. Owl Pacino' s owl friends decided to present him the Tree GeneratorTM \u2014 a powerful machine creating rooted trees from their descriptions. An n - vertex rooted tree can be described by a bracket sequence of length 2( n - 1) in the following way: find any walk starting and finishing in the root that traverses each edge exactly twice \u2014 once down the tree, and later up the tree. Then follow the path and write down \" ( \" ( an opening parenthesis) if an edge is followed down the tree, and \" ) \" ( a closing parenthesis) otherwise. The following figure shows sample rooted trees and their descriptions: Owl wrote down the description of an n - vertex rooted tree. Then, he rewrote the description q times. However, each time he wrote a new description, he picked two different characters in the description he wrote the last time, swapped them and wrote down the resulting string. He always made sure that each written string was the description of a rooted tree. Pacino then used Tree GeneratorTM for each description he wrote down. What is the diameter of each constructed tree?",
    "input": "The first line of the input contains two integers n, q ( 3 \u2264 n \u2264 100 000 , 1 \u2264 q \u2264 100 000 ) \u2014 the number of vertices in the tree and the number of changes to the tree description. The following line contains a description of the initial tree \u2014 a string of length 2( n- 1) consisting of opening and closing parentheses. Each of the following q lines describes a single change to the description and contains two space- separated integers a_ i, b_ i ( 2 \u2264 a_ i, b_ i \u2264 2n- 3 ) which identify the indices of two brackets to be swapped. You can assume that the description will change after each query, and that after each change a tree can be constructed from the description.",
    "output": "Output q + 1 integers \u2014 the diameter of each constructed tree, in the order their descriptions have been written down.",
    "note": "The following figure shows each constructed tree and its description in the first example test:",
    "topics": [
      "data structures",
      "implementation",
      "trees"
    ],
    "id": "1149C"
  },
  {
    "title": "Holy Diver ",
    "url": "https://codeforces.com/problemset/problem/1148/H",
    "history": "You are given an array which is initially empty. You need to perform n operations of the given format: \" a l r k \" : append a to the end of the array. After that count the number of integer pairs x, y such that l \u2264 x \u2264 y \u2264 r and mex( a_ x, a_ x+ 1, . . . , a_ y) = k . The elements of the array are numerated from 1 in the order they are added to the array. To make this problem more tricky we don' t say your real parameters of the queries. Instead your are given a' , l' , r' , k' . To get a , l , r , k on the i - th operation you need to perform the following: a : = ( a' + lans) ( n + 1) , l : = ( l' + lans) i + 1 , r : = ( r' + lans) i + 1 , if l > r swap l and r , k : = ( k' + lans) ( n + 1) , where lans is the answer to the previous operation, initially lans is equal to zero. i is the id of the operation, operations are numbered from 1 . The mex( S) , where S is a multiset of non- negative integers, is the smallest non- negative integer which does not appear in the set. For example, mex( { 2, 2, 3} ) = 0 and mex ( { 0, 1, 4, 1, 6} ) = 2 .",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the array. The next n lines contain the description of queries. Each of them n lines contains four non- negative integers a' , l' , r' , k' ( 0, \u2264 a' , l' , r' , k' \u2264 10^ 9 ) , describing one operation.",
    "output": "For each query print a single integer \u2014 the answer to this query.",
    "note": "For the first example the decoded values of a , l , r , k are the following: a_ 1= 0, l_ 1= 1, r_ 1= 1, k_ 1= 1 a_ 2= 1, l_ 2= 1, r_ 2= 2, k_ 2= 0 a_ 3= 0, l_ 3= 1, r_ 3= 3, k_ 3= 1 a_ 4= 1, l_ 4= 1, r_ 4= 4, k_ 4= 2 a_ 5= 2, l_ 5= 1, r_ 5= 5, k_ 5= 3 For the second example the decoded values of a , l , r , k are the following: a_ 1= 2, l_ 1= 1, r_ 1= 1, k_ 1= 2 a_ 2= 2, l_ 2= 1, r_ 2= 2, k_ 2= 1 a_ 3= 0, l_ 3= 1, r_ 3= 3, k_ 3= 0 a_ 4= 0, l_ 4= 2, r_ 4= 2, k_ 4= 3 a_ 5= 0, l_ 5= 3, r_ 5= 4, k_ 5= 0",
    "topics": [
      "data structures"
    ],
    "id": "1148H"
  },
  {
    "title": "Hot is Cold",
    "url": "https://codeforces.com/problemset/problem/1146/E",
    "history": "You are given an array of n integers a_ 1, a_ 2, . . . , a_ n . You will perform q operations. In the i - th operation, you have a symbol s_ i which is either \" < \" or \" > \" and a number x_ i . You make a new array b such that b_ j = - a_ j if a_ j s_ i x_ i and b_ j = a_ j otherwise ( i. e. if s_ i is ' > ' , then all a_ j > x_ i will be flipped) . After doing all these replacements, a is set to be b . You want to know what your final array looks like after all operations.",
    "input": "The first line contains two integers n, q ( 1 \u2264 n, q \u2264 10^ 5 ) \u2014 the number of integers and the number of queries. The next line contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 5 \u2264 a_ i \u2264 10^ 5 ) \u2014 the numbers. Each of the next q lines contains a character and an integer s_ i, x_ i . ( s_ i \u2208{ < , > } , - 10^ 5 \u2264 x_ i \u2264 10^ 5 ) \u2013 the queries.",
    "output": "Print n integers c_ 1, c_ 2, . . . , c_ n representing the array after all operations.",
    "note": "In the first example, the array goes through the following changes: Initial: [ - 5, - 4, - 3, - 2, - 1, 0, 1, 2, 3, 4, 5] > 2 : [ - 5, - 4, - 3, - 2, - 1, 0, 1, 2, - 3, - 4, - 5] > - 4 : [ - 5, - 4, 3, 2, 1, 0, - 1, - 2, 3, - 4, - 5] < 5 : [ 5, 4, - 3, - 2, - 1, 0, 1, 2, - 3, 4, 5]",
    "topics": [
      "bitmasks",
      "data structures",
      "divide and conquer",
      "implementation"
    ],
    "id": "1146E"
  },
  {
    "title": "Lynyrd Skynyrd",
    "url": "https://codeforces.com/problemset/problem/1142/B",
    "history": "Recently Lynyrd and Skynyrd went to a shop where Lynyrd bought a permutation p of length n , and Skynyrd bought an array a of length m , consisting of integers from 1 to n . Lynyrd and Skynyrd became bored, so they asked you q queries, each of which has the following form: \" does the subsegment of a from the l - th to the r - th positions, inclusive, have a subsequence that is a cyclic shift of p ? \" Please answer the queries. A permutation of length n is a sequence of n integers such that each integer from 1 to n appears exactly once in it. A cyclic shift of a permutation ( p_ 1, p_ 2, . . . , p_ n) is a permutation ( p_ i, p_ i + 1, . . . , p_ n, p_ 1, p_ 2, . . . , p_ i - 1) for some i from 1 to n . For example, a permutation ( 2, 1, 3) has three distinct cyclic shifts: ( 2, 1, 3) , ( 1, 3, 2) , ( 3, 2, 1) . A subsequence of a subsegment of array a from the l - th to the r - th positions, inclusive, is a sequence a_ i_ 1, a_ i_ 2, . . . , a_ i_ k for some i_ 1, i_ 2, . . . , i_ k such that l \u2264 i_ 1 < i_ 2 < . . . < i_ k \u2264 r .",
    "input": "The first line contains three integers n , m , q ( 1 \u2264 n, m, q \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the permutation p , the length of the array a and the number of queries. The next line contains n integers from 1 to n , where the i - th of them is the i - th element of the permutation. Each integer from 1 to n appears exactly once. The next line contains m integers from 1 to n , the i - th of them is the i - th element of the array a . The next q lines describe queries. The i - th of these lines contains two integers l_ i and r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 m ) , meaning that the i - th query is about the subsegment of the array from the l_ i - th to the r_ i - th positions, inclusive.",
    "output": "Print a single string of length q , consisting of 0 and 1 , the digit on the i - th positions should be 1 , if the subsegment of array a from the l_ i - th to the r_ i - th positions, inclusive, contains a subsequence that is a cyclic shift of p , and 0 otherwise.",
    "note": "In the first example the segment from the 1 - st to the 5 - th positions is 1, 2, 3, 1, 2 . There is a subsequence 1, 3, 2 that is a cyclic shift of the permutation. The subsegment from the 2 - nd to the 6 - th positions also contains a subsequence 2, 1, 3 that is equal to the permutation. The subsegment from the 3 - rd to the 5 - th positions is 3, 1, 2 , there is only one subsequence of length 3 ( 3, 1, 2 ) , but it is not a cyclic shift of the permutation. In the second example the possible cyclic shifts are 1, 2 and 2, 1 . The subsegment from the 1 - st to the 2 - nd positions is 1, 1 , its subsequences are not cyclic shifts of the permutation. The subsegment from the 2 - nd to the 3 - rd positions is 1, 2 , it coincides with the permutation. The subsegment from the 3 to the 4 positions is 2, 2 , its subsequences are not cyclic shifts of the permutation.",
    "topics": [
      "data structures",
      "dfs and similar",
      "dp",
      "math",
      "trees"
    ],
    "id": "1142B"
  },
  {
    "title": "Same Sum Blocks (Hard)",
    "url": "https://codeforces.com/problemset/problem/1141/F2",
    "history": "This problem is given in two editions, which differ exclusively in the constraints on the number n . You are given an array of integers a[ 1] , a[ 2] , . . . , a[ n] . A block is a sequence of contiguous ( consecutive) elements a[ l] , a[ l+ 1] , . . . , a[ r] ( 1 \u2264 l \u2264 r \u2264 n ) . Thus, a block is defined by a pair of indices ( l, r) . Find a set of blocks ( l_ 1, r_ 1) , ( l_ 2, r_ 2) , . . . , ( l_ k, r_ k) such that: They do not intersect ( i. e. they are disjoint) . Formally, for each pair of blocks ( l_ i, r_ i) and ( l_ j, r_ j ) where i = \u0338 j either r_ i < l_ j or r_ j < l_ i . For each block the sum of its elements is the same. Formally, a[ l_ 1] + a[ l_ 1+ 1] + . . . + a[ r_ 1] = a[ l_ 2] + a[ l_ 2+ 1] + . . . + a[ r_ 2] = . . . = a[ l_ k] + a[ l_ k+ 1] + . . . + a[ r_ k] . The number of the blocks in the set is maximum. Formally, there does not exist a set of blocks ( l_ 1' , r_ 1' ) , ( l_ 2' , r_ 2' ) , . . . , ( l_ k' ' , r_ k' ' ) satisfying the above two requirements with k' > k . The picture corresponds to the first example. Blue boxes illustrate blocks. Write a program to find such a set of blocks.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 1500 ) \u2014 the length of the given array. The second line contains the sequence of elements a[ 1] , a[ 2] , . . . , a[ n] ( - 10^ 5 \u2264 a_ i \u2264 10^ 5 ) .",
    "output": "In the first line print the integer k ( 1 \u2264 k \u2264 n ) . The following k lines should contain blocks, one per line. In each line print a pair of indices l_ i, r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 n ) \u2014 the bounds of the i - th block. You can print blocks in any order. If there are multiple answers, print any of them.",
    "note": "",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "1141F2"
  },
  {
    "title": "Double Tree",
    "url": "https://codeforces.com/problemset/problem/1140/G",
    "history": "You are given a special undirected graph. It consists of 2n vertices numbered from 1 to 2n . The following properties hold for the graph: there are exactly 3n- 2 edges in the graph: n edges connect vertices having odd numbers with vertices having even numbers, n - 1 edges connect vertices having odd numbers with each other, and n - 1 edges connect vertices having even numbers with each other; for each edge ( u, v) between a pair of vertices with odd numbers, there exists an edge ( u + 1, v + 1) , and vice versa; for each odd number u \u2208 [ 1, 2n - 1] , there exists an edge ( u, u + 1) ; the graph is connected; moreover, if we delete all vertices with even numbers from it, and all edges incident to them, the graph will become a tree ( the same applies to deleting odd vertices) . So, the graph can be represented as two trees having the same structure, and n edges connecting each vertex of the first tree to the corresponding vertex of the second tree. Edges of the graph are weighted. The length of some simple path in the graph is the sum of weights of traversed edges. You are given q queries to this graph; in each query, you are asked to compute the length of the shortest path between some pair of vertices in this graph. Can you answer all of the queries?",
    "input": "The first line of the input contains one integer n ( 2 \u2264 n \u2264 3 \u00b7 10^ 5 ) . The second line contains n integers w_ 1, 2 , w_ 3, 4 , . . . , w_ 2n - 1, 2n ( 1 \u2264 w_ i, i + 1\u2264 10^ 12 ) . These integers describe the weights of the edges connecting odd vertices with even ones. Then n- 1 lines follow. i - th line contains four integers x_ i , y_ i , w_ i, 1 and w_ i, 2 ( 1 \u2264 x_ i, y_ i \u2264 n , x_ i y_ i , 1 \u2264 w_ i, j\u2264 10^ 12 ) ; it describes two edges: one connecting 2x_ i - 1 with 2y_ i - 1 and having weight w_ i, 1 ; another connecting 2x_ i with 2y_ i and having weight w_ i, 2 . The next line contains one integer q ( 1 \u2264 q \u2264 6 \u00b7 10^ 5 ) \u2014 the number of queries. Then q lines follow, i - th line contains two integers u_ i and v_ i ( 1 \u2264 u_ i, v_ i \u2264 2n , u_ i v_ i ) , describing a query \" compute the length of the shortest path between vertices u_ i and v_ i \" .",
    "output": "Print q integers, i - th integer should be equal to the answer to the i - th query.",
    "note": "The graph in the first test looks like that:",
    "topics": [
      "data structures",
      "divide and conquer",
      "shortest paths",
      "trees"
    ],
    "id": "1140G"
  },
  {
    "title": "Extending Set of Points",
    "url": "https://codeforces.com/problemset/problem/1140/F",
    "history": "For a given set of two- dimensional points S , let' s denote its extension E( S) as the result of the following algorithm: Create another set of two- dimensional points R , which is initially equal to S . Then, while there exist four numbers x_ 1 , y_ 1 , x_ 2 and y_ 2 such that ( x_ 1, y_ 1) \u2208 R , ( x_ 1, y_ 2) \u2208 R , ( x_ 2, y_ 1) \u2208 R and ( x_ 2, y_ 2) \u2208\u0338 R , add ( x_ 2, y_ 2) to R . When it is impossible to find such four integers, let R be the result of the algorithm. Now for the problem itself. You are given a set of two- dimensional points S , which is initially empty. You have to process two types of queries: add some point to S , or remove some point from it. After each query you have to compute the size of E( S) .",
    "input": "The first line contains one integer q ( 1 \u2264 q \u2264 3 \u00b7 10^ 5 ) \u2014 the number of queries. Then q lines follow, each containing two integers x_ i , y_ i ( 1 \u2264 x_ i, y_ i \u2264 3 \u00b7 10^ 5 ) , denoting i - th query as follows: if ( x_ i, y_ i) \u2208 S , erase it from S , otherwise insert ( x_ i, y_ i) into S .",
    "output": "Print q integers. i - th integer should be equal to the size of E( S) after processing first i queries.",
    "note": "",
    "topics": [
      "data structures",
      "divide and conquer",
      "dsu"
    ],
    "id": "1140F"
  },
  {
    "title": "Playlist",
    "url": "https://codeforces.com/problemset/problem/1140/C",
    "history": "You have a playlist consisting of n songs. The i - th song is characterized by two numbers t_ i and b_ i \u2014 its length and beauty respectively. The pleasure of listening to set of songs is equal to the total length of the songs in the set multiplied by the minimum beauty among them. For example, the pleasure of listening to a set of 3 songs having lengths [ 5, 7, 4] and beauty values [ 11, 14, 6] is equal to ( 5 + 7 + 4) \u00b7 6 = 96 . You need to choose at most k songs from your playlist, so the pleasure of listening to the set of these songs them is maximum possible.",
    "input": "The first line contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 3 \u00b7 10^ 5 ) \u2013 the number of songs in the playlist and the maximum number of songs you can choose, respectively. Each of the next n lines contains two integers t_ i and b_ i ( 1 \u2264 t_ i, b_ i \u2264 10^ 6 ) \u2014 the length and beauty of i - th song.",
    "output": "Print one integer \u2014 the maximum pleasure you can get.",
    "note": "In the first test case we can choose songs 1, 3, 4 , so the total pleasure is ( 4 + 3 + 6) \u00b7 6 = 78 . In the second test case we can choose song 3 . The total pleasure will be equal to 100 \u00b7 100 = 10000 .",
    "topics": [
      "brute force",
      "data structures",
      "sortings"
    ],
    "id": "1140C"
  },
  {
    "title": "Dish Shopping",
    "url": "https://codeforces.com/problemset/problem/1139/F",
    "history": "There are m people living in a city. There are n dishes sold in the city. Each dish i has a price p_ i , a standard s_ i and a beauty b_ i . Each person j has an income of inc_ j and a preferred beauty pref_ j . A person would never buy a dish whose standard is less than the person' s income. Also, a person can' t afford a dish with a price greater than the income of the person. In other words, a person j can buy a dish i only if p_ i \u2264 inc_ j \u2264 s_ i . Also, a person j can buy a dish i , only if | b_ i- pref_ j| \u2264 ( inc_ j- p_ i) . In other words, if the price of the dish is less than the person' s income by k , the person will only allow the absolute difference of at most k between the beauty of the dish and his/ her preferred beauty. Print the number of dishes that can be bought by each person in the city.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 10^ 5 , 1 \u2264 m \u2264 10^ 5 ) , the number of dishes available in the city and the number of people living in the city. The second line contains n integers p_ i ( 1 \u2264 p_ i \u2264 10^ 9 ) , the price of each dish. The third line contains n integers s_ i ( 1 \u2264 s_ i \u2264 10^ 9 ) , the standard of each dish. The fourth line contains n integers b_ i ( 1 \u2264 b_ i \u2264 10^ 9 ) , the beauty of each dish. The fifth line contains m integers inc_ j ( 1 \u2264 inc_ j \u2264 10^ 9 ) , the income of every person. The sixth line contains m integers pref_ j ( 1 \u2264 pref_ j \u2264 10^ 9 ) , the preferred beauty of every person. It is guaranteed that for all integers i from 1 to n , the following condition holds: p_ i \u2264 s_ i .",
    "output": "Print m integers, the number of dishes that can be bought by every person living in the city.",
    "note": "In the first example, the first person can buy dish 2 , the second person can buy dishes 1 and 2 and the third person can buy no dishes. In the second example, the first person can buy no dishes, the second person can buy dishes 1 and 4 , and the third person can buy dishes 1 , 2 and 4 .",
    "topics": [
      "data structures",
      "divide and conquer"
    ],
    "id": "1139F"
  },
  {
    "title": "Matches Are Not a Child's Play ",
    "url": "https://codeforces.com/problemset/problem/1137/F",
    "history": "Lena is playing with matches. The natural question arising in the head of any child playing with matches is whether it' s possible to set a tree on fire with a matches, or not. Let' s say, that the tree is a connected graph without cycles and the vertices are labeled with integers 1, 2, . . . , n . Also every vertex v has some integer priority p_ v associated with it. All priorities are distinct. It turns out, that if you set a tree on fire, it will burn to nothing. However, this process doesn' t happen instantly. At the beginning, burns out the leaf ( a vertex is called to be a leaf if it has only one adjacent vertex) of the tree of the minimum priority. Then burns out the leaf of the minimal priority of the remaining tree, and so on. This way, the vertices turn into the leaves and burn out until only one vertex remains. Then this vertex burns out as well. Lena has prepared a tree of n vertices and every vertex in it has a priority p_ v = v . Lena is very curious about burning out this tree. However, she understands, that if she will burn the tree now, then it will disappear completely. Lena is a kind girl and she will feel bad for the burned tree, so she wants to study the process of burning the tree only in her mind. Lena wants to process q queries, each of them is one of three following types: \" up v \" , assign the vertex v priority 1 + max{ p_ 1, p_ 2, . . . , p_ n} ; \" when v \" , find the step at which the vertex v will burn out, if the tree would be set on fire now; \" compare v u \" , find out which of the vertices v and u will burn out first, if the tree would be set on fire now. Notice, that if all priorities would be distinct, then after the \" up\" query they will stay distinct as well. Initially all priorities are distinct, hence during any ( purely hypothetical of course) burning of the tree, all leafs would have distinct priorities.",
    "input": "The first line contains two integers n and q ( 2 \u2264 n \u2264 200 000 , 1 \u2264 q \u2264 200 000 ) \u2014 the number of vertices in the tree and the number of queries. The i - th of the following n - 1 lines contains two integers v_ i , u_ i ( 1 \u2264 v_ i, u_ i \u2264 n ) , denoting the endpoints of the i - th edge. Each of the remaining q lines contains a query of one of the following three types: \" up v \" ( 1 \u2264 v \u2264 n ) \u2014 change the priority of vertex v ; \" when v \" ( 1 \u2264 v \u2264 n ) \u2014 determine the step at which the vertex v will burn out; \" compare v u \" ( 1 \u2264 v, u \u2264 n , v u ) \u2014 determine which of vertices v and u will burn out earlier in the current tree. It' s guaranteed, that there is at least one query of type \" when\" or \" compare\" .",
    "output": "For every query of type \" when\" print one integer in range from 1 to n \u2014 the step at which the vertex v will burn out. For every query of type \" compare\" print either v or u , depending on which one will burn out earlier.",
    "note": "In the first example, the process of burning of the tree is illustrated on the following picture: In particular, the vertices of the tree will burn out in the following order: [ 2, 4, 3, 1, 5] . In the second example, after applying the \" up\" operation, the order of vertices will change to: [ 2, 4, 3, 5, 1] .",
    "topics": [
      "data structures",
      "trees"
    ],
    "id": "1137F"
  },
  {
    "title": "Train Car Selection",
    "url": "https://codeforces.com/problemset/problem/1137/E",
    "history": "Vasya likes to travel by train, but doesn' t like when the car he travels in is located in the tail of the train. Vasya gets on the train at the station. The train consists of n cars indexed from 1 to n counting from the locomotive ( head of the train) . Three types of events occur while the train is moving: Some number of cars are added to the head of the train; Some number of cars are added to the tail of the train; Vasya recalculates the values of the convenience of the cars ( read more about it below) . At each moment of time we will index the cars from the head of the train, starting from 1 . Note that when adding new cars to the head of the train, the indexing of the old ones may shift. To choose which car to go in, Vasya will use the value A_ i for each car ( where i is a car index) , which is calculated as follows: At the beginning of the trip A_ i= 0 , as well as for the new cars at the time of their addition. During the next recalculation Vasya chooses some positive integers b and s and adds to all A_ i value b + ( i - 1) \u00b7 s . Vasya hasn' t decided yet where he will get on the train and where will get off the train, so after each event of one of the three types he wants to know the least index of the car, such that its value A_ i is minimal. Since there is a lot of cars, Vasya asked you to write a program that answers his question.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 10^ 9 , 1 \u2264 m \u2264 300 000 ) , the number of cars in the train at the time of departure from the station and the number of stations, respectively. Next m lines contain the descriptions of events. Each event is one of the following three types: \" 1 k \" ( 1 \u2264 k \u2264 10^ 9 ) , add k cars to the head of the train \" 2 k \" ( 1 \u2264 k \u2264 10^ 9 ) , add k cars to the tail of the train \" 3 b s \" ( 1 \u2264 b, s \u2264 10^ 9 ) , recalculate the convenience of all train cars. It is guaranteed that at any time the train length does not exceed 10^ 9 . Also it' s guaranteed that the integers A_ i will not grow too high. Formally, it' s guaranteed that if we sum the largest addition over all events of the 3 - rd type ( that is, b + ( n - 1) \u00b7 s , where n is the number of cars at that moment) then the acquired sum would be at most 10^ 18 .",
    "output": "After each of the m queries print two integers: j and A_ j \u2014 the number of the car closest to the head of the train, such that its value A_ j is minimal, and the value A_ j itself.",
    "note": "Initially the train consists of one car with A_ 1 = 0 , let' s denote train as [ 0] for simplicity. After adding one car to the head, train is [ 0, 0] . After recalculation of values with parameters b= 1, s= 1 , train is [ 1, 2] . After another recalculation of values with the parameters b= 1, s= 1 , train is [ 2, 4] . After adding one car to the end, train is [ 2, 4, 0] . After another adding one car to the end, train is [ 2, 4, 0, 0] . After recalculation of values with parameters b= 1 , s= 1 , train is [ 3, 6, 3, 4] . After adding one car to the end, train is [ 3, 6, 3, 4, 0] . After recalculation of values with parameters b= 1 , s= 5 , train is [ 4, 12, 14, 20, 21] .",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "1137E"
  },
  {
    "title": "Nastya Hasn't Written a Legend",
    "url": "https://codeforces.com/problemset/problem/1136/E",
    "history": "In this task, Nastya asked us to write a formal statement. An array a of length n and an array k of length n- 1 are given. Two types of queries should be processed: increase a_ i by x . Then if a_ i+ 1 < a_ i + k_ i , a_ i+ 1 becomes exactly a_ i + k_ i ; again, if a_ i+ 2 < a_ i+ 1 + k_ i+ 1 , a_ i+ 2 becomes exactly a_ i+ 1 + k_ i+ 1 , and so far for a_ i+ 3 , . . . , a_ n ; print the sum of the contiguous subarray from the l - th element to the r - th element of the array a . It' s guaranteed that initially a_ i + k_ i \u2264 a_ i+ 1 for all 1 \u2264 i \u2264 n- 1 .",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 10^ 5 ) \u2014 the number of elements in the array a . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9\u2264 a_ i \u2264 10^ 9 ) \u2014 the elements of the array a . The third line contains n- 1 integers k_ 1, k_ 2, . . . , k_ n- 1 ( - 10^ 6\u2264 k_ i \u2264 10^ 6 ) \u2014 the elements of the array k . The fourth line contains a single integer q ( 1 \u2264 q \u2264 10^ 5 ) \u2014 the number of queries. Each of the following q lines contains a query of one of two types: if the query has the first type, the corresponding line contains the character ' + ' ( without quotes) , and then there are two integers i and x ( 1 \u2264 i \u2264 n , 0 \u2264 x \u2264 10^ 6 ) , it means that integer x is added to the i - th element of the array a as described in the statement. if the query has the second type, the corresponding line contains the character ' s' ( without quotes) and then there are two integers l and r ( 1 \u2264 l \u2264 r \u2264 n ) .",
    "output": "For each query of the second type print a single integer in a new line \u2014 the sum of the corresponding subarray.",
    "note": "In the first example: after the first change a = [ 3, 4, 3] ; after the second change a = [ 3, 4, 4] . In the second example: after the first change a = [ 6, 9, 10] ; after the second change a = [ 6, 13, 14] .",
    "topics": [
      "binary search",
      "data structures"
    ],
    "id": "1136E"
  },
  {
    "title": "Greedy Subsequences",
    "url": "https://codeforces.com/problemset/problem/1132/G",
    "history": "For some array c , let' s denote a greedy subsequence as a sequence of indices p_ 1 , p_ 2 , . . . , p_ l such that 1 \u2264 p_ 1 < p_ 2 < . . . < p_ l \u2264 | c| , and for each i \u2208 [ 1, l - 1] , p_ i + 1 is the minimum number such that p_ i + 1 > p_ i and c[ p_ i + 1] > c[ p_ i] . You are given an array a_ 1, a_ 2, . . . , a_ n . For each its subsegment of length k , calculate the length of its longest greedy subsequence.",
    "input": "The first line contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 10^ 6 ) \u2014 the length of array a and the length of subsegments. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 array a .",
    "output": "Print n - k + 1 integers \u2014 the maximum lengths of greedy subsequences of each subsegment having length k . The first number should correspond to subsegment a[ 1. . k] , the second \u2014 to subsegment a[ 2. . k + 1] , and so on.",
    "note": "In the first example: [ 1, 5, 2, 5] \u2014 the longest greedy subsequences are 1, 2 ( [ c_ 1, c_ 2] = [ 1, 5] ) or 3, 4 ( [ c_ 3, c_ 4] = [ 2, 5] ) . [ 5, 2, 5, 3] \u2014 the sequence is 2, 3 ( [ c_ 2, c_ 3] = [ 2, 5] ) . [ 2, 5, 3, 6] \u2014 the sequence is 1, 2, 4 ( [ c_ 1, c_ 2, c_ 4] = [ 2, 5, 6] ) . In the second example: [ 4, 5, 2, 5, 3, 6] \u2014 the longest greedy subsequences are 1, 2, 6 ( [ c_ 1, c_ 2, c_ 6] = [ 4, 5, 6] ) or 3, 4, 6 ( [ c_ 3, c_ 4, c_ 6] = [ 2, 5, 6] ) . [ 5, 2, 5, 3, 6, 6] \u2014 the subsequence is 2, 3, 5 ( [ c_ 2, c_ 3, c_ 5] = [ 2, 5, 6] ) .",
    "topics": [
      "data structures",
      "dp",
      "trees"
    ],
    "id": "1132G"
  },
  {
    "title": "Most Dangerous Shark",
    "url": "https://codeforces.com/problemset/problem/1131/G",
    "history": "Semyon participates in the most prestigious competition of the world ocean for the title of the most dangerous shark. During this competition sharks compete in different subjects: speed swimming, masking, map navigation and many others. Now Semyon is taking part in \u00abdestruction\u00bb contest. During it, m dominoes are placed in front of the shark. All dominoes are on the same line, but the height of the dominoes may vary. The distance between adjacent dominoes is 1 . Moreover, each Domino has its own cost value, expressed as an integer. The goal is to drop all the dominoes. To do this, the shark can push any domino to the left or to the right, and it will begin falling in this direction. If during the fall the domino touches other dominoes, they will also start falling in the same direction in which the original domino is falling, thus beginning a chain reaction, as a result of which many dominoes can fall. A falling domino touches another one, if and only if the distance between them was strictly less than the height of the falling domino, the dominoes do not necessarily have to be adjacent. Of course, any shark can easily drop all the dominoes in this way, so the goal is not to drop all the dominoes, but do it with a minimum cost. The cost of the destruction is the sum of the costs of dominoes that the shark needs to push to make all the dominoes fall. Simon has already won in the previous subjects, but is not smart enough to win in this one. Help Semyon and determine the minimum total cost of the dominoes he will have to push to make all the dominoes fall.",
    "input": "In order to reduce input size, the heights and costs of the dominoes are described with blocks. The first line contains two integers n and m ( 1 \u2264 n \u2264 250 000, 1 \u2264 m \u2264 10^ 7 ) \u2014 the number of the blocks and the total number of the dominoes Semyon must drop. Then descriptions of n blocks follow. Description of every block consists of three lines. The first line of block' s description contains a single integer k_ i ( 1 \u2264 k_ i \u2264 250 000, \u2211_ i = 1^ nk_ i\u2264 250 000 ) \u2014 the number of dominoes in the block. The second line of block' s description contains k_ i integers a_ j ( 1 \u2264 a_ j \u2264 m ) \u2014 the heights of the dominoes in the blocks. The third line contains k_ i integers c_ j ( 1 \u2264 c_ j \u2264 100 000 ) \u2014 the costs of the dominoes in the block. Then the domino sequence is described ( from left to right) . The first line of this description contains a single integer q ( n \u2264 q \u2264 250 000 ) \u2014 the number of blocks in the sequence of domino sequence. Each of the following q lines contains integers id_ i, mul_ i ( 1 \u2264 id_ i \u2264 n , 1 \u2264 mul_ i \u2264 100 000 ) , denoting that the next k_ id_ i dominoes are dominoes of the block id_ i , with their cost multiplied by mul_ i . It' s guaranteed, that \u2211_ i = 1^ qk_ id_ i = m , and that' s every block is used in the sequence at least once.",
    "output": "Print exactly one integer \u2014 the minimum cost to make all the dominoes fall.",
    "note": "In the first example, there are 7 dominoes in front of the Semyon. Their heights are equal to [ 3, 1, 2, 2, 1, 2, 2] , and their costs are equal to [ 4, 3, 6, 3, 1, 2, 1] . Semyon should drop the domino with index 7 to the left, it will fall and drop the domino 6 as well. The domino 6 during the fall will drop the domino 5 , however the latter will not drop any more dominoes. Then Semyon should drop domino with number 1 to the right and it will drop dominoes 2 and 3 after falling. And the domino 3 will drop the domino 4 after falling. Hence all dominoes are fallen this way. In the second example, there is a single domino of cost 10000000000 .",
    "topics": [
      "data structures",
      "dp",
      "two pointers"
    ],
    "id": "1131G"
  },
  {
    "title": "Isolation",
    "url": "https://codeforces.com/problemset/problem/1129/D",
    "history": "Find the number of ways to divide an array a of n integers into any number of disjoint non- empty segments so that, in each segment, there exist at most k distinct integers that appear exactly once. Since the answer can be large, find it modulo 998 244 353 .",
    "input": "The first line contains two space- separated integers n and k ( 1 \u2264 k \u2264 n \u2264 10^ 5 ) \u2014 the number of elements in the array a and the restriction from the statement. The following line contains n space- separated integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 elements of the array a .",
    "output": "The first and only line contains the number of ways to divide an array a modulo 998 244 353 .",
    "note": "In the first sample, the three possible divisions are as follows. [ [ 1] , [ 1] , [ 2] ] [ [ 1, 1] , [ 2] ] [ [ 1, 1, 2] ] Division [ [ 1] , [ 1, 2] ] is not possible because two distinct integers appear exactly once in the second segment [ 1, 2] .",
    "topics": [
      "data structures",
      "dp"
    ],
    "id": "1129D"
  },
  {
    "title": "Morse Code",
    "url": "https://codeforces.com/problemset/problem/1129/C",
    "history": "In Morse code, an letter of English alphabet is represented as a string of some length from 1 to 4 . Moreover, each Morse code representation of an English letter contains only dots and dashes. In this task, we will represent a dot with a \" 0\" and a dash with a \" 1\" . Because there are 2^ 1+ 2^ 2+ 2^ 3+ 2^ 4 = 30 strings with length 1 to 4 containing only \" 0\" and/ or \" 1\" , not all of them correspond to one of the 26 English letters. In particular, each string of \" 0\" and/ or \" 1\" of length at most 4 translates into a distinct English letter, except the following four strings that do not correspond to any English alphabet: \" 0011\" , \" 0101\" , \" 1110\" , and \" 1111\" . You will work with a string S , which is initially empty. For m times, either a dot or a dash will be appended to S , one at a time. Your task is to find and report, after each of these modifications to string S , the number of non- empty sequences of English letters that are represented with some substring of S in Morse code. Since the answers can be incredibly tremendous, print them modulo 10^ 9 + 7 .",
    "input": "The first line contains an integer m ( 1 \u2264 m \u2264 3 000 ) \u2014 the number of modifications to S . Each of the next m lines contains either a \" 0\" ( representing a dot) or a \" 1\" ( representing a dash) , specifying which character should be appended to S .",
    "output": "Print m lines, the i - th of which being the answer after the i - th modification to S .",
    "note": "Let us consider the first sample after all characters have been appended to S , so S is \" 111\" . As you can see, \" 1\" , \" 11\" , and \" 111\" all correspond to some distinct English letter. In fact, they are translated into a ' T' , an ' M' , and an ' O' , respectively. All non- empty sequences of English letters that are represented with some substring of S in Morse code, therefore, are as follows. \" T\" ( translates into \" 1\" ) \" M\" ( translates into \" 11\" ) \" O\" ( translates into \" 111\" ) \" TT\" ( translates into \" 11\" ) \" TM\" ( translates into \" 111\" ) \" MT\" ( translates into \" 111\" ) \" TTT\" ( translates into \" 111\" ) Although unnecessary for this task, a conversion table from English alphabets into Morse code can be found here.",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "hashing",
      "sortings",
      "string suffix structures",
      "strings"
    ],
    "id": "1129C"
  },
  {
    "title": "Secret Letters",
    "url": "https://codeforces.com/problemset/problem/1120/F",
    "history": "Little W and Little P decided to send letters to each other regarding the most important events during a day. There are n events during a day: at time moment t_ i something happens to the person p_ i ( p_ i is either W or P, denoting Little W and Little P, respectively) , so he needs to immediately send a letter to the other person. They can send a letter using one of the two ways: Ask Friendly O to deliver the letter directly. Friendly O takes d acorns for each letter. Leave the letter at Wise R' s den. Wise R values free space, so he takes c \u00b7 T acorns for storing a letter for a time segment of length T . The recipient can take a letter from Wise R either when he leaves his own letter at Wise R' s den, or at time moment t_ n + 1 , when everybody comes to Wise R for a tea. It is not possible to take a letter from Wise R' s den at other time moments. The friends can store as many letters at Wise R' s den as they want, paying for each one separately. Help the friends determine the minimum possible total cost of sending all letters.",
    "input": "The first line contains three integers n, c, d ( 1 \u2264 n \u2264 10^ 5 , 1 \u2264 c \u2264 10^ 2 , 1 \u2264 d \u2264 10^ 8 ) \u2014 the number of letters, the cost of storing a letter for one time unit at Wise R' s den and the cost of delivering a letter via Friendly O. The next n describe the events. The i - th of them contains an integer t_ i and a character p_ i ( 0 \u2264 t_ i \u2264 10^ 6 , p_ i is either W or P) \u2014 the time the i - th event happens and the person the event happens to. The last line contains a single integer t_ n + 1 ( 0 \u2264 t_ n+ 1\u2264 10^ 6 ) \u2014 the time when everybody comes to Wise R for a tea and takes all remaining letters. It is guaranteed that t_ i < t_ i + 1 for all i from 1 to n .",
    "output": "Print a single integer \u2014 the minimum possible cost of delivery of all letters.",
    "note": "One of optimal solutions in the first example: At time moment 0 Little P leaves the letter at Wise R' s den. At time moment 1 Little W leaves his letter at Wise R' s den and takes Little P' s letter. This letter is at the den from time moment 0 to time moment 1, it costs 1 acorn. At time moment 3 Little P sends his letter via Friendly O, it costs 4 acorns. At time moment 5 Little P leaves his letter at the den, receiving Little W' s letter which storage costs 4 acorns. At time moment 8 Little P leaves one more letter at the den. At time moment 10 Little W comes to the den for a tea and receives the two letters, paying 5 and 2 acorns. The total cost of delivery is thus 1 + 4 + 4 + 5 + 2 = 16 acorns.",
    "topics": [
      "data structures",
      "dp",
      "greedy"
    ],
    "id": "1120F"
  },
  {
    "title": "Niyaz and Small Degrees",
    "url": "https://codeforces.com/problemset/problem/1119/F",
    "history": "Niyaz has a tree with n vertices numerated from 1 to n . A tree is a connected graph without cycles. Each edge in this tree has strictly positive integer weight. A degree of a vertex is the number of edges adjacent to this vertex. Niyaz does not like when vertices in the tree have too large degrees. For each x from 0 to ( n- 1) , he wants to find the smallest total weight of a set of edges to be deleted so that degrees of all vertices become at most x .",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 250 000 ) \u2014 the number of vertices in Niyaz' s tree. Each of the next ( n - 1) lines contains three integers a , b , c ( 1 \u2264 a, b \u2264 n , 1 \u2264 c \u2264 10^ 6 ) \u2014 the indices of the vertices connected by this edge and its weight, respectively. It is guaranteed that the given edges form a tree.",
    "output": "Print n integers: for each x = 0, 1, . . . , ( n- 1) print the smallest total weight of such a set of edges that after one deletes the edges from the set, the degrees of all vertices become less than or equal to x .",
    "note": "In the first example, the vertex 1 is connected with all other vertices. So for each x you should delete the ( 4- x) lightest edges outgoing from vertex 1 , so the answers are 1+ 2+ 3+ 4 , 1+ 2+ 3 , 1+ 2 , 1 and 0 . In the second example, for x= 0 you need to delete all the edges, for x= 1 you can delete two edges with weights 1 and 5 , and for x \u2265 2 it is not necessary to delete edges, so the answers are 1+ 2+ 5+ 14 , 1+ 5 , 0 , 0 and 0 .",
    "topics": [
      "data structures",
      "dp",
      "trees"
    ],
    "id": "1119F"
  },
  {
    "title": "Recursive Queries",
    "url": "https://codeforces.com/problemset/problem/1117/G",
    "history": "You are given a permutation p_ 1, p_ 2, . . . , p_ n . You should answer q queries. Each query is a pair ( l_ i, r_ i) , and you should calculate f( l_ i, r_ i) . Let' s denote m_ l, r as the position of the maximum in subsegment p_ l, p_ l+ 1, . . . , p_ r . Then f( l, r) = ( r - l + 1) + f( l, m_ l, r - 1) + f( m_ l, r + 1, r) if l \u2264 r or 0 otherwise.",
    "input": "The first line contains two integers n and q ( 1 \u2264 n \u2264 10^ 6 , 1 \u2264 q \u2264 10^ 6 ) \u2014 the size of the permutation p and the number of queries. The second line contains n pairwise distinct integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n , p_ i = \u0338 p_ j for i = \u0338 j ) \u2014 permutation p . The third line contains q integers l_ 1, l_ 2, . . . , l_ q \u2014 the first parts of the queries. The fourth line contains q integers r_ 1, r_ 2, . . . , r_ q \u2014 the second parts of the queries. It' s guaranteed that 1 \u2264 l_ i \u2264 r_ i \u2264 n for all queries.",
    "output": "Print q integers \u2014 the values f( l_ i, r_ i) for the corresponding queries.",
    "note": "Description of the queries: f( 2, 2) = ( 2 - 2 + 1) + f( 2, 1) + f( 3, 2) = 1 + 0 + 0 = 1 ; f( 1, 3) = ( 3 - 1 + 1) + f( 1, 2) + f( 4, 3) = 3 + ( 2 - 1 + 1) + f( 1, 0) + f( 2, 2) = 3 + 2 + ( 2 - 2 + 1) = 6 ; f( 1, 4) = ( 4 - 1 + 1) + f( 1, 2) + f( 4, 4) = 4 + 3 + 1 = 8 ; f( 2, 4) = ( 4 - 2 + 1) + f( 2, 2) + f( 4, 4) = 3 + 1 + 1 = 5 ; f( 1, 1) = ( 1 - 1 + 1) + 0 + 0 = 1 .",
    "topics": [
      "data structures"
    ],
    "id": "1117G"
  },
  {
    "title": "Please, another Queries on Array?",
    "url": "https://codeforces.com/problemset/problem/1114/F",
    "history": "You are given an array a_ 1, a_ 2, . . . , a_ n . You need to perform q queries of the following two types: \" MULTIPLY l r x\" \u2014 for every i ( l \u2264 i \u2264 r ) multiply a_ i by x . \" TOTIENT l r\" \u2014 print \u03c6( \u220f_ i= l^ r a_ i) taken modulo 10^ 9+ 7 , where \u03c6 denotes Euler' s totient function. The Euler' s totient function of a positive integer n ( denoted as \u03c6( n) ) is the number of integers x ( 1 \u2264 x \u2264 n ) such that ( n, x) = 1 .",
    "input": "The first line contains two integers n and q ( 1 \u2264 n \u2264 4 \u00b7 10^ 5 , 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of elements in array a and the number of queries. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 300 ) \u2014 the elements of array a . Then q lines follow, describing queries in the format given in the statement. \" MULTIPLY l r x\" ( 1 \u2264 l \u2264 r \u2264 n , 1 \u2264 x \u2264 300 ) \u2014 denotes a multiplication query. \" TOTIENT l r\" ( 1 \u2264 l \u2264 r \u2264 n ) \u2014 denotes a query on the value of Euler' s totient function. It is guaranteed that there is at least one \" TOTIENT\" query.",
    "output": "For each \" TOTIENT\" query, print the answer to it.",
    "note": "In the first example, \u03c6( 1) = 1 for the first query, \u03c6( 2) = 1 for the second query and \u03c6( 6) = 2 for the third one.",
    "topics": [
      "bitmasks",
      "data structures",
      "divide and conquer",
      "math",
      "number theory"
    ],
    "id": "1114F"
  },
  {
    "title": "Tree",
    "url": "https://codeforces.com/problemset/problem/1111/E",
    "history": "You are given a tree with n nodes and q queries. Every query starts with three integers k , m and r , followed by k nodes of the tree a_ 1, a_ 2, . . . , a_ k . To answer a query, assume that the tree is rooted at r . We want to divide the k given nodes into at most m groups such that the following conditions are met: Each node should be in exactly one group and each group should have at least one node. In any group, there should be no two distinct nodes such that one node is an ancestor ( direct or indirect) of the other. You need to output the number of ways modulo 10^ 9+ 7 for every query.",
    "input": "The first line contains two integers n and q ( 1 \u2264 n, q \u2264 10^ 5 ) \u2014 the number of vertices in the tree and the number of queries, respectively. Each of the next n- 1 lines contains two integers u and v ( 1 \u2264 u, v \u2264 n, u v ) , denoting an edge connecting vertex u and vertex v . It is guaranteed that the given graph is a tree. Each of the next q lines starts with three integers k , m and r ( 1 \u2264 k, r \u2264 n , 1 \u2264 m \u2264 min( 300, k) ) \u2014 the number of nodes, the maximum number of groups and the root of the tree for the current query, respectively. They are followed by k distinct integers a_ 1, a_ 2, . . . , a_ k ( 1 \u2264 a_ i \u2264 n ) , denoting the nodes of the current query. It is guaranteed that the sum of k over all queries does not exceed 10^ 5 .",
    "output": "Print q lines, where the i - th line contains the answer to the i - th query.",
    "note": "Consider the first example. In the first query, we have to divide the three given nodes ( 7 , 4 and 3 ) , into the maximum of three groups assuming that the tree is rooted at 2 . When the tree is rooted at 2 , 4 is an ancestor of both 3 and 7 . So we can' t put all the nodes into one group. There is only 1 way to divide the given nodes into two groups, which are [ 4] and [ 3, 7] . Also, there is only one way to divide the given nodes into three groups, which are [ 7] , [ 4] and [ 3] . So, there are total 2 ways to divide the given nodes into a maximum of three groups. In the second query, when the tree is rooted at 4 , 6 is an ancestor of 2 and 2 is an ancestor of 1 . So, we can' t put all the given nodes into one group.",
    "topics": [
      "data structures",
      "dfs and similar",
      "dp",
      "graphs",
      "trees"
    ],
    "id": "1111E"
  },
  {
    "title": "Nearest Leaf",
    "url": "https://codeforces.com/problemset/problem/1110/F",
    "history": "Let' s define the Eulerian traversal of a tree ( a connected undirected graph without cycles) as follows: consider a depth- first search algorithm which traverses vertices of the tree and enumerates them in the order of visiting ( only the first visit of each vertex counts) . This function starts from the vertex number 1 and then recursively runs from all vertices which are connected with an edge with the current vertex and are not yet visited in increasing numbers order. Formally, you can describe this function using the following pseudocode: next_ id = 1id = array of length n filled with - 1visited = array of length n filled with falsefunction dfs( v) : visited[ v] = true id[ v] = next_ id next_ id + = 1 for to in neighbors of v in increasing order: if not visited[ to] : dfs( to) You are given a weighted tree, the vertices of which were enumerated with integers from 1 to n using the algorithm described above. A leaf is a vertex of the tree which is connected with only one other vertex. In the tree given to you, the vertex 1 is not a leaf. The distance between two vertices in the tree is the sum of weights of the edges on the simple path between them. You have to answer q queries of the following type: given integers v , l and r , find the shortest distance from vertex v to one of the leaves with indices from l to r inclusive.",
    "input": "The first line contains two integers n and q ( 3 \u2264 n \u2264 500 000, 1 \u2264 q \u2264 500 000 ) \u2014 the number of vertices in the tree and the number of queries, respectively. The ( i - 1) - th of the following n - 1 lines contains two integers p_ i and w_ i ( 1 \u2264 p_ i < i, 1 \u2264 w_ i \u2264 10^ 9 ) , denoting an edge between vertices p_ i and i with the weight w_ i . It' s guaranteed that the given edges form a tree and the vertices are enumerated in the Eulerian traversal order and that the vertex with index 1 is not a leaf. The next q lines describe the queries. Each of them contains three integers v_ i , l_ i , r_ i ( 1 \u2264 v_ i \u2264 n, 1 \u2264 l_ i \u2264 r_ i \u2264 n ) , describing the parameters of the query. It is guaranteed that there is at least one leaf with index x such that l_ i \u2264 x \u2264 r_ i .",
    "output": "Output q integers \u2014 the answers for the queries in the order they are given in the input.",
    "note": "In the first example, the tree looks like this: In the first query, the nearest leaf for the vertex 1 is vertex 4 with distance 3 . In the second query, the nearest leaf for vertex 5 is vertex 5 with distance 0 . In the third query the nearest leaf for vertex 4 is vertex 4 ; however, it is not inside interval [ 1, 2] of the query. The only leaf in interval [ 1, 2] is vertex 2 with distance 13 from vertex 4 .",
    "topics": [
      "data structures",
      "trees"
    ],
    "id": "1110F"
  },
  {
    "title": "Sasha and Algorithm of Silence's Sounds",
    "url": "https://codeforces.com/problemset/problem/1109/F",
    "history": "One fine day Sasha went to the park for a walk. In the park, he saw that his favorite bench is occupied, and he had to sit down on the neighboring one. He sat down and began to listen to the silence. Suddenly, he got a question: what if in different parts of the park, the silence sounds in different ways? So it was. Let' s divide the park into 1 \u00d7 1 meter squares and call them cells, and numerate rows from 1 to n from up to down, and columns from 1 to m from left to right. And now, every cell can be described with a pair of two integers ( x, y) , where x \u2014 the number of the row, and y \u2014 the number of the column. Sasha knows that the level of silence in the cell ( i, j) equals to f_ i, j , and all f_ i, j form a permutation of numbers from 1 to n \u00b7 m . Sasha decided to count, how many are there pleasant segments of silence? Let' s take some segment [ l . . . r] . Denote S as the set of cells ( i, j) that l \u2264 f_ i, j\u2264 r . Then, the segment of silence [ l . . . r] is pleasant if there is only one simple path between every pair of cells from S ( path can' t contain cells, which are not in S ) . In other words, set S should look like a tree on a plain. Sasha has done this task pretty quickly, and called the algorithm \u2014 \" algorithm of silence' s sounds\" . Time passed, and the only thing left from the algorithm is a legend. To prove the truthfulness of this story, you have to help Sasha and to find the number of different pleasant segments of silence. Two segments [ l_ 1 . . . r_ 1] , [ l_ 2 . . . r_ 2] are different, if l_ 1 = \u0338 l_ 2 or r_ 1 = \u0338 r_ 2 or both at the same time.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 1000 , 1 \u2264 n \u00b7 m \u2264 2 \u00b7 10^ 5 ) \u2014 the size of the park. Each from next n lines contains m integers f_ i, j ( 1 \u2264 f_ i, j\u2264 n \u00b7 m ) \u2014 the level of silence in the cell with number ( i, j) . It is guaranteed, that all f_ i, j are different.",
    "output": "Print one integer \u2014 the number of pleasant segments of silence.",
    "note": "In the first example, all segments of silence are pleasant. In the second example, pleasant segments of silence are the following:",
    "topics": [
      "data structures",
      "trees"
    ],
    "id": "1109F"
  },
  {
    "title": "Sasha and a Very Easy Test",
    "url": "https://codeforces.com/problemset/problem/1109/E",
    "history": "Egor likes math, and not so long ago he got the highest degree of recognition in the math community \u2014 Egor became a red mathematician. In this regard, Sasha decided to congratulate Egor and give him a math test as a present. This test contains an array a of integers of length n and exactly q queries. Queries were of three types: \" 1 l r x\" \u2014 multiply each number on the range from l to r by x . \" 2 p x\" \u2014 divide the number at the position p by x ( divisibility guaranteed) . \" 3 l r\" \u2014 find the sum of all elements on the range from l to r . The sum can be big, so Sasha asked Egor to calculate the sum modulo some integer mod . But since Egor is a red mathematician, he doesn' t have enough time to solve such easy tasks, at the same time he doesn' t want to anger Sasha, that' s why he asked you to help and to find answers for all queries of the 3 - rd type.",
    "input": "The first line contains two integers n and mod ( 1 \u2264 n \u2264 10^ 5 , 2 \u2264 mod \u2264 10^ 9 + 9 ) \u2014 the size of the array and the number mod . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 5 ) \u2014 the array itself. The third line contains one integer q ( 1 \u2264 q \u2264 10^ 5 ) \u2014 the number of queries. Next q lines satisfy one of the following formats: 1 l r x ( 1 \u2264 l \u2264 r \u2264 n , 1 \u2264 x \u2264 10^ 5 ) , means that you must multiply each number on the range from l to r by x . 2 p x ( 1 \u2264 p \u2264 n , 1 \u2264 x \u2264 10^ 5 ) , means that you must divide number at the position p by x ( divisibility guaranteed) . 3 l r ( 1 \u2264 l \u2264 r \u2264 n ) , means that you must find the sum of elements on the range from l to r . It is guaranteed that there is at least one query of the 3 - rd type.",
    "output": "For each query of the 3 - rd type print the answer on a new line modulo mod .",
    "note": "The first example: Inital array is [ 4, 1, 2, 3, 5] In the first query, you must calculate the sum of the whole array, it' s equal to ( 4 + 1 + 2 + 3 + 5) 100 = 15 100 = 15 In the second query, you must multiply each number on the range from 2 to 3 by 6 . The resulting array will be [ 4, 6, 12, 3, 5] In the third query, you must calculate the sum on the range from 1 to 2 , it' s equal to ( 4 + 6) 100 = 10 100 = 10 In the fourth query, you must multiply each number on the range from 1 to 5 by 1 . Multiplication by 1 doesn' t affect the array. In the fifth query, you must calculate the sum on the range from 2 to 4 , it' s equal to ( 6 + 12 + 3) 100 = 21 100 = 21 The second example: Inital array is [ 4, 1, 2, 3, 5] In the first query, you must calculate the sum of the whole array, it' s equal to ( 4 + 1 + 2 + 3 + 5) 2 = 15 2 = 1 In the second query, you must multiply each number on the range from 2 to 3 by 6 . The resulting array will be [ 4, 6, 12, 3, 5] In the third query, you must calculate the sum on the range from 1 to 2 , it' s equal to ( 4 + 6) 2 = 10 2 = 0 In the fourth query, you must multiply each number on the range from 1 to 5 by 1 . Multiplication by 1 doesn' t affect the array. In the fifth query, you must calculate the sum on the range from 2 to 4 , it' s equal to ( 6 + 12 + 3) 2 = 21 2 = 1 In the sixth query, you must divide number at the position 3 by 4 . 12/ 4= 3 , so the array will be [ 4, 6, 3, 3, 5] . In the seventh, query you must calculate the sum on the range form 3 to 4 , it' s equal to ( 3 + 3) 2 = 6 2 = 0",
    "topics": [
      "data structures",
      "number theory"
    ],
    "id": "1109E"
  },
  {
    "title": "Sasha and a Patient Friend",
    "url": "https://codeforces.com/problemset/problem/1109/C",
    "history": "Fedya and Sasha are friends, that' s why Sasha knows everything about Fedya. Fedya keeps his patience in an infinitely large bowl. But, unlike the bowl, Fedya' s patience isn' t infinite, that is why let v be the number of liters of Fedya' s patience, and, as soon as v becomes equal to 0 , the bowl will burst immediately. There is one tap in the bowl which pumps s liters of patience per second. Notice that s can be negative, in that case, the tap pumps out the patience. Sasha can do different things, so he is able to change the tap' s speed. All actions that Sasha does can be represented as q queries. There are three types of queries: \" 1 t s\" \u2014 add a new event, means that starting from the t - th second the tap' s speed will be equal to s . \" 2 t\" \u2014 delete the event which happens at the t - th second. It is guaranteed that such event exists. \" 3 l r v\" \u2014 Sasha wonders: if you take all the events for which l \u2264 t \u2264 r and simulate changes of Fedya' s patience from the very beginning of the l - th second till the very beginning of the r - th second inclusive ( the initial volume of patience, at the beginning of the l - th second, equals to v liters) then when will be the moment when the bowl will burst. If that does not happen, then the answer will be - 1 . Since Sasha does not want to check what will happen when Fedya' s patience ends, and he has already come up with the queries, he is asking you to help him and find the answer for each query of the 3 - rd type. It is guaranteed that at any moment of time, there won' t be two events which happen at the same second.",
    "input": "The first line contans one integer q ( 1 \u2264 q \u2264 10^ 5 ) \u2014 the number of queries. Each of the next q lines have one of the following formats: 1 t s ( 1 \u2264 t \u2264 10^ 9 , - 10^ 9 \u2264 s \u2264 10^ 9 ) , means that a new event is added, which means that starting from the t - th second the tap' s speed will be equal to s . 2 t ( 1 \u2264 t \u2264 10^ 9 ) , means that the event which happens at the t - th second must be deleted. Guaranteed that such exists. 3 l r v ( 1 \u2264 l \u2264 r \u2264 10^ 9 , 0 \u2264 v \u2264 10^ 9 ) , means that you should simulate the process from the very beginning of the l - th second till the very beginning of the r - th second inclusive, and to say when will the bowl burst. It is guaranteed that t , s , l , r , v in all the queries are integers. Also, it is guaranteed that there is at least one query of the 3 - rd type, and there won' t be a query of the 1 - st type with such t , that there already exists an event which happens at that second t .",
    "output": "For each query of the 3 - rd type, print in a new line the moment when the bowl will burst or print - 1 if it won' t happen. Your answer will be considered correct if it' s absolute or relative error does not exceed 10^ - 6 . Formally, let your answer be a , and the jury' s answer be b . Your answer is accepted if and only if | a - b| / max( 1, | b| ) \u2264 10^ - 6 .",
    "note": "In the first example all the queries of the 3 - rd type cover all the events, it' s simulation is following:",
    "topics": [
      "binary search",
      "data structures",
      "implementation"
    ],
    "id": "1109C"
  },
  {
    "title": "Array and Segments (Hard version)",
    "url": "https://codeforces.com/problemset/problem/1108/E2",
    "history": "The only difference between easy and hard versions is a number of elements in the array. You are given an array a consisting of n integers. The value of the i - th element of the array is a_ i . You are also given a set of m segments. The j - th segment is [ l_ j; r_ j] , where 1 \u2264 l_ j \u2264 r_ j \u2264 n . You can choose some subset of the given set of segments and decrease values on each of the chosen segments by one ( independently) . For example, if the initial array a = [ 0, 0, 0, 0, 0] and the given segments are [ 1; 3] and [ 2; 4] then you can choose both of them and the array will become b = [ - 1, - 2, - 2, - 1, 0] . You have to choose some subset of the given segments ( each segment can be chosen at most once) in such a way that if you apply this subset of segments to the array a and obtain the array b then the value max_ i= 1^ nb_ i - min_ i= 1^ nb_ i will be maximum possible. Note that you can choose the empty set. If there are multiple answers, you can print any. If you are Python programmer, consider using PyPy instead of Python when you submit your code.",
    "input": "The first line of the input contains two integers n and m ( 1 \u2264 n \u2264 10^ 5, 0 \u2264 m \u2264 300 ) \u2014 the length of the array a and the number of segments, respectively. The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 6 \u2264 a_ i \u2264 10^ 6 ) , where a_ i is the value of the i - th element of the array a . The next m lines are contain two integers each. The j - th of them contains two integers l_ j and r_ j ( 1 \u2264 l_ j \u2264 r_ j \u2264 n ) , where l_ j and r_ j are the ends of the j - th segment.",
    "output": "In the first line of the output print one integer d \u2014 the maximum possible value max_ i= 1^ nb_ i - min_ i= 1^ nb_ i if b is the array obtained by applying some subset of the given segments to the array a . In the second line of the output print one integer q ( 0 \u2264 q \u2264 m ) \u2014 the number of segments you apply. In the third line print q distinct integers c_ 1, c_ 2, . . . , c_ q in any order ( 1 \u2264 c_ k \u2264 m ) \u2014 indices of segments you apply to the array a in such a way that the value max_ i= 1^ nb_ i - min_ i= 1^ nb_ i of the obtained array b is maximum possible. If there are multiple answers, you can print any.",
    "note": "In the first example the obtained array b will be [ 0, - 4, 1, 1, 2] so the answer is 6 . In the second example the obtained array b will be [ 2, - 3, 1, - 1, 4] so the answer is 7 . In the third example you cannot do anything so the answer is 0 .",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "1108E2"
  },
  {
    "title": "Vasya and Maximum Profit",
    "url": "https://codeforces.com/problemset/problem/1107/G",
    "history": "Vasya got really tired of these credits ( from problem F) and now wants to earn the money himself! He decided to make a contest to gain a profit. Vasya has n problems to choose from. They are numbered from 1 to n . The difficulty of the i - th problem is d_ i . Moreover, the problems are given in the increasing order by their difficulties. The difficulties of all tasks are pairwise distinct. In order to add the i - th problem to the contest you need to pay c_ i burles to its author. For each problem in the contest Vasya gets a burles. In order to create a contest he needs to choose a consecutive subsegment of tasks. So the total earnings for the contest are calculated as follows: if Vasya takes problem i to the contest, he needs to pay c_ i to its author; for each problem in the contest Vasya gets a burles; let gap( l, r) = max_ l \u2264 i < r ( d_ i + 1 - d_ i) ^ 2 . If Vasya takes all the tasks with indices from l to r to the contest, he also needs to pay gap( l, r) . If l = r then gap( l, r) = 0 . Calculate the maximum profit that Vasya can earn by taking a consecutive segment of tasks.",
    "input": "The first line contains two integers n and a ( 1 \u2264 n \u2264 3 \u00b7 10^ 5 , 1 \u2264 a \u2264 10^ 9 ) \u2014 the number of proposed tasks and the profit for a single problem, respectively. Each of the next n lines contains two integers d_ i and c_ i ( 1 \u2264 d_ i, c_ i \u2264 10^ 9, d_ i < d_ i+ 1 ) .",
    "output": "Print one integer \u2014 maximum amount of burles Vasya can earn.",
    "note": "",
    "topics": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "dp",
      "dsu"
    ],
    "id": "1107G"
  },
  {
    "title": "Lunar New Year and Red Envelopes",
    "url": "https://codeforces.com/problemset/problem/1106/E",
    "history": "Lunar New Year is approaching, and Bob is going to receive some red envelopes with countless money! But collecting money from red envelopes is a time- consuming process itself. Let' s describe this problem in a mathematical way. Consider a timeline from time 1 to n . The i - th red envelope will be available from time s_ i to t_ i , inclusive, and contain w_ i coins. If Bob chooses to collect the coins in the i - th red envelope, he can do it only in an integer point of time between s_ i and t_ i , inclusive, and he can' t collect any more envelopes until time d_ i ( inclusive) after that. Here s_ i \u2264 t_ i \u2264 d_ i holds. Bob is a greedy man, he collects coins greedily \u2014 whenever he can collect coins at some integer time x , he collects the available red envelope with the maximum number of coins. If there are multiple envelopes with the same maximum number of coins, Bob would choose the one whose parameter d is the largest. If there are still multiple choices, Bob will choose one from them randomly. However, Alice \u2014 his daughter \u2014 doesn' t want her father to get too many coins. She could disturb Bob at no more than m integer time moments. If Alice decides to disturb Bob at time x , he could not do anything at time x and resumes his usual strategy at the time x + 1 ( inclusive) , which may lead to missing some red envelopes. Calculate the minimum number of coins Bob would get if Alice disturbs him optimally.",
    "input": "The first line contains three non- negative integers n , m and k ( 1 \u2264 n \u2264 10^ 5 , 0 \u2264 m \u2264 200 , 1 \u2264 k \u2264 10^ 5 ) , denoting the length of the timeline, the number of times Alice can disturb Bob and the total number of red envelopes, respectively. The following k lines describe those k red envelopes. The i - th line contains four positive integers s_ i , t_ i , d_ i and w_ i ( 1 \u2264 s_ i \u2264 t_ i \u2264 d_ i \u2264 n , 1 \u2264 w_ i \u2264 10^ 9 ) \u2014 the time segment when the i - th envelope is available, the time moment Bob can continue collecting after collecting the i - th envelope, and the number of coins in this envelope, respectively.",
    "output": "Output one integer \u2014 the minimum number of coins Bob would get if Alice disturbs him optimally.",
    "note": "In the first sample, Alice has no chance to disturb Bob. Therefore Bob will collect the coins in the red envelopes at time 1 and 5 , collecting 13 coins in total. In the second sample, Alice should disturb Bob at time 1 . Therefore Bob skips the first envelope, collects the second one and can not do anything after that. So the answer is 2 .",
    "topics": [
      "data structures",
      "dp"
    ],
    "id": "1106E"
  },
  {
    "title": "Lunar New Year and a Wander",
    "url": "https://codeforces.com/problemset/problem/1106/D",
    "history": "Lunar New Year is approaching, and Bob decides to take a wander in a nearby park. The park can be represented as a connected graph with n nodes and m bidirectional edges. Initially Bob is at the node 1 and he records 1 on his notebook. He can wander from one node to another through those bidirectional edges. Whenever he visits a node not recorded on his notebook, he records it. After he visits all nodes at least once, he stops wandering, thus finally a permutation of nodes a_ 1, a_ 2, . . . , a_ n is recorded. Wandering is a boring thing, but solving problems is fascinating. Bob wants to know the lexicographically smallest sequence of nodes he can record while wandering. Bob thinks this problem is trivial, and he wants you to solve it. A sequence x is lexicographically smaller than a sequence y if and only if one of the following holds: x is a prefix of y , but x y ( this is impossible in this problem as all considered sequences have the same length) ; in the first position where x and y differ, the sequence x has a smaller element than the corresponding element in y .",
    "input": "The first line contains two positive integers n and m ( 1 \u2264 n, m \u2264 10^ 5 ) , denoting the number of nodes and edges, respectively. The following m lines describe the bidirectional edges in the graph. The i - th of these lines contains two integers u_ i and v_ i ( 1 \u2264 u_ i, v_ i \u2264 n ) , representing the nodes the i - th edge connects. Note that the graph can have multiple edges connecting the same two nodes and self- loops. It is guaranteed that the graph is connected.",
    "output": "Output a line containing the lexicographically smallest sequence a_ 1, a_ 2, . . . , a_ n Bob can record.",
    "note": "In the first sample, Bob' s optimal wandering path could be 1 \u2192 2 \u2192 1 \u2192 3 . Therefore, Bob will obtain the sequence { 1, 2, 3} , which is the lexicographically smallest one. In the second sample, Bob' s optimal wandering path could be 1 \u2192 4 \u2192 3 \u2192 2 \u2192 3 \u2192 4 \u2192 1 \u2192 5 . Therefore, Bob will obtain the sequence { 1, 4, 3, 2, 5} , which is the lexicographically smallest one.",
    "topics": [
      "data structures",
      "dfs and similar",
      "graphs",
      "greedy",
      "shortest paths"
    ],
    "id": "1106D"
  },
  {
    "title": "Lunar New Year and Food Ordering",
    "url": "https://codeforces.com/problemset/problem/1106/B",
    "history": "Lunar New Year is approaching, and Bob is planning to go for a famous restaurant \u2014 \" Alice' s\" . The restaurant \" Alice' s\" serves n kinds of food. The cost for the i - th kind is always c_ i . Initially, the restaurant has enough ingredients for serving exactly a_ i dishes of the i - th kind. In the New Year' s Eve, m customers will visit Alice' s one after another and the j - th customer will order d_ j dishes of the t_ j - th kind of food. The ( i + 1) - st customer will only come after the i - th customer is completely served. Suppose there are r_ i dishes of the i - th kind remaining ( initially r_ i = a_ i ) . When a customer orders 1 dish of the i - th kind, the following principles will be processed. If r_ i > 0 , the customer will be served exactly 1 dish of the i - th kind. The cost for the dish is c_ i . Meanwhile, r_ i will be reduced by 1 . Otherwise, the customer will be served 1 dish of the cheapest available kind of food if there are any. If there are multiple cheapest kinds of food, the one with the smallest index among the cheapest will be served. The cost will be the cost for the dish served and the remain for the corresponding dish will be reduced by 1 . If there are no more dishes at all, the customer will leave angrily. Therefore, no matter how many dishes are served previously, the cost for the customer is 0 . If the customer doesn' t leave after the d_ j dishes are served, the cost for the customer will be the sum of the cost for these d_ j dishes. Please determine the total cost for each of the m customers.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 10^ 5 ) , representing the number of different kinds of food and the number of customers, respectively. The second line contains n positive integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 7 ) , where a_ i denotes the initial remain of the i - th kind of dishes. The third line contains n positive integers c_ 1, c_ 2, . . . , c_ n ( 1 \u2264 c_ i \u2264 10^ 6 ) , where c_ i denotes the cost of one dish of the i - th kind. The following m lines describe the orders of the m customers respectively. The j - th line contains two positive integers t_ j and d_ j ( 1 \u2264 t_ j \u2264 n , 1 \u2264 d_ j \u2264 10^ 7 ) , representing the kind of food and the number of dishes the j - th customer orders, respectively.",
    "output": "Print m lines. In the j - th line print the cost for the j - th customer.",
    "note": "In the first sample, 5 customers will be served as follows. Customer 1 will be served 6 dishes of the 2 - nd kind, 1 dish of the 4 - th kind, and 1 dish of the 6 - th kind. The cost is 6 \u00b7 3 + 1 \u00b7 2 + 1 \u00b7 2 = 22 . The remain of the 8 kinds of food will be { 8, 0, 2, 0, 4, 4, 7, 5} . Customer 2 will be served 4 dishes of the 1 - st kind. The cost is 4 \u00b7 6 = 24 . The remain will be { 4, 0, 2, 0, 4, 4, 7, 5} . Customer 3 will be served 4 dishes of the 6 - th kind, 3 dishes of the 8 - th kind. The cost is 4 \u00b7 2 + 3 \u00b7 2 = 14 . The remain will be { 4, 0, 2, 0, 4, 0, 7, 2} . Customer 4 will be served 2 dishes of the 3 - rd kind, 2 dishes of the 8 - th kind. The cost is 2 \u00b7 3 + 2 \u00b7 2 = 10 . The remain will be { 4, 0, 0, 0, 4, 0, 7, 0} . Customer 5 will be served 7 dishes of the 7 - th kind, 3 dishes of the 1 - st kind. The cost is 7 \u00b7 3 + 3 \u00b7 6 = 39 . The remain will be { 1, 0, 0, 0, 4, 0, 0, 0} . In the second sample, each customer is served what they order except the last one, who leaves angrily without paying. For example, the second customer is served 6 dishes of the second kind, so the cost is 66 \u00b7 6 = 396 . In the third sample, some customers may not be served what they order. For example, the second customer is served 6 dishes of the second kind, 6 of the third and 1 of the fourth, so the cost is 66 \u00b7 6 + 666 \u00b7 6 + 6666 \u00b7 1 = 11058 .",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "1106B"
  },
  {
    "title": "Game with string",
    "url": "https://codeforces.com/problemset/problem/1104/B",
    "history": "Two people are playing a game with a string s , consisting of lowercase latin letters. On a player' s turn, he should choose two consecutive equal letters in the string and delete them. For example, if the string is equal to \" xaax\" than there is only one possible turn: delete \" aa\" , so the string will become \" xx\" . A player not able to make a turn loses. Your task is to determine which player will win if both play optimally.",
    "input": "The only line contains the string s , consisting of lowercase latin letters ( 1 \u2264 | s| \u2264 100 000 ) , where | s| means the length of a string s .",
    "output": "If the first player wins, print \" Yes\" . If the second player wins, print \" No\" .",
    "note": "In the first example the first player is unable to make a turn, so he loses. In the second example first player turns the string into \" q\" , then second player is unable to move, so he loses.",
    "topics": [
      "data structures",
      "implementation",
      "math"
    ],
    "id": "1104B"
  },
  {
    "title": "GCD Counting",
    "url": "https://codeforces.com/problemset/problem/1101/D",
    "history": "You are given a tree consisting of n vertices. A number is written on each vertex; the number on vertex i is equal to a_ i . Let' s denote the function g( x, y) as the greatest common divisor of the numbers written on the vertices belonging to the simple path from vertex x to vertex y ( including these two vertices) . Also let' s denote dist( x, y) as the number of vertices on the simple path between vertices x and y , including the endpoints. dist( x, x) = 1 for every vertex x . Your task is calculate the maximum value of dist( x, y) among such pairs of vertices that g( x, y) > 1 .",
    "input": "The first line contains one integer n \u2014 the number of vertices ( 1 \u2264 n \u2264 2 \u00b7 10^ 5) . The second line contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 1 \u2264 a_ i \u2264 2 \u00b7 10^ 5) \u2014 the numbers written on vertices. Then n - 1 lines follow, each containing two integers x and y ( 1 \u2264 x, y \u2264 n, x y) denoting an edge connecting vertex x with vertex y . It is guaranteed that these edges form a tree.",
    "output": "If there is no pair of vertices x, y such that g( x, y) > 1 , print 0 . Otherwise print the maximum value of dist( x, y) among such pairs.",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "dp",
      "number theory",
      "trees"
    ],
    "id": "1101D"
  },
  {
    "title": "Ivan and Burgers",
    "url": "https://codeforces.com/problemset/problem/1100/F",
    "history": "Ivan loves burgers and spending money. There are n burger joints on the street where Ivan lives. Ivan has q friends, and the i - th friend suggested to meet at the joint l_ i and walk to the joint r_ i ( l_ i \u2264 r_ i) . While strolling with the i - th friend Ivan can visit all joints x which satisfy l_ i \u2264 x \u2264 r_ i . For each joint Ivan knows the cost of the most expensive burger in it, it costs c_ i burles. Ivan wants to visit some subset of joints on his way, in each of them he will buy the most expensive burger and spend the most money. But there is a small issue: his card broke and instead of charging him for purchases, the amount of money on it changes as follows. If Ivan had d burles before the purchase and he spent c burles at the joint, then after the purchase he would have d \u2295 c burles, where \u2295 denotes the bitwise XOR operation. Currently Ivan has 2^ 2^ 100 - 1 burles and he wants to go out for a walk. Help him to determine the maximal amount of burles he can spend if he goes for a walk with the friend i . The amount of burles he spends is defined as the difference between the initial amount on his account and the final account.",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 500 000 ) \u2014 the number of burger shops. The next line contains n integers c_ 1, c_ 2, . . . , c_ n ( 0 \u2264 c_ i \u2264 10^ 6 ) , where c_ i \u2014 the cost of the most expensive burger in the burger joint i . The third line contains one integer q ( 1 \u2264 q \u2264 500 000 ) \u2014 the number of Ivan' s friends. Each of the next q lines contain two integers l_ i and r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 n ) \u2014 pairs of numbers of burger shops between which Ivan will walk.",
    "output": "Output q lines, i - th of which containing the maximum amount of money Ivan can spend with the friend i .",
    "note": "In the first test, in order to spend the maximum amount of money with the first and third friends, Ivan just needs to go into the first burger. With a second friend, Ivan just go to the third burger. In the second test for a third friend ( who is going to walk from the first to the third burger) , there are only 8 options to spend money \u2014 0 , 12 , 14 , 23 , 12 \u2295 14 = 2 , 14 \u2295 23 = 25 , 12 \u2295 23 = 27 , 12 \u2295 14 \u2295 23 = 20 . The maximum amount of money it turns out to spend, if you go to the first and third burger \u2014 12 \u2295 23 = 27 .",
    "topics": [
      "data structures",
      "divide and conquer",
      "greedy",
      "math"
    ],
    "id": "1100F"
  },
  {
    "title": "Build a Contest",
    "url": "https://codeforces.com/problemset/problem/1100/B",
    "history": "Arkady coordinates rounds on some not really famous competitive programming platform. Each round features n problems of distinct difficulty, the difficulties are numbered from 1 to n . To hold a round Arkady needs n new ( not used previously) problems, one for each difficulty. As for now, Arkady creates all the problems himself, but unfortunately, he can' t just create a problem of a desired difficulty. Instead, when he creates a problem, he evaluates its difficulty from 1 to n and puts it into the problems pool. At each moment when Arkady can choose a set of n new problems of distinct difficulties from the pool, he holds a round with these problems and removes them from the pool. Arkady always creates one problem at a time, so if he can hold a round after creating a problem, he immediately does it. You are given a sequence of problems' difficulties in the order Arkady created them. For each problem, determine whether Arkady held the round right after creating this problem, or not. Initially the problems pool is empty.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 10^ 5 ) \u2014 the number of difficulty levels and the number of problems Arkady created. The second line contains m integers a_ 1, a_ 2, . . . , a_ m ( 1 \u2264 a_ i \u2264 n ) \u2014 the problems' difficulties in the order Arkady created them.",
    "output": "Print a line containing m digits. The i - th digit should be 1 if Arkady held the round after creation of the i - th problem, and 0 otherwise.",
    "note": "In the first example Arkady held the round after the first three problems, because they are of distinct difficulties, and then only after the last problem.",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "1100B"
  },
  {
    "title": "Cookies",
    "url": "https://codeforces.com/problemset/problem/1099/F",
    "history": "Mitya and Vasya are playing an interesting game. They have a rooted tree with n vertices, and the vertices are indexed from 1 to n . The root has index 1 . Every other vertex i \u2265 2 has its parent p_ i , and vertex i is called a child of vertex p_ i . There are some cookies in every vertex of the tree: there are x_ i cookies in vertex i . It takes exactly t_ i time for Mitya to eat one cookie in vertex i . There is also a chip, which is initially located in the root of the tree, and it takes l_ i time to move the chip along the edge connecting vertex i with its parent. Mitya and Vasya take turns playing, Mitya goes first. Mitya moves the chip from the vertex, where the chip is located, to one of its children. Vasya can remove an edge from the vertex, where the chip is located, to one of its children. Vasya can also decide to skip his turn. Mitya can stop the game at any his turn. Once he stops the game, he moves the chip up to the root, eating some cookies along his way. Mitya can decide how many cookies he would like to eat in every vertex on his way. The total time spent on descend, ascend and eating cookies should not exceed T . Please note that in the end of the game the chip is always located in the root of the tree: Mitya can not leave the chip in any other vertex, even if he has already eaten enough cookies \u2014 he must move the chip back to the root ( and every move from vertex v to its parent takes l_ v time) . Find out what is the maximum number of cookies Mitya can eat, regardless of Vasya' s actions.",
    "input": "The first line contains two integers n and T \u2014 the number of vertices in the tree and the time he has to accomplish his task ( 2\u2264 n \u2264 10^ 5 ; 1\u2264 T\u226410^ 18 ) . The second line contains n integers x_ 1 , x_ 2 , . . . , x_ n \u2014 number of cookies located in the corresponding vertex ( 1\u2264 x_ i\u226410^ 6 ) . The third line contains n integers t_ 1 , t_ 2 , . . . , t_ n \u2014 how much time it takes Mitya to eat one cookie in vertex i ( 1\u2264 t_ i\u226410^ 6 ) . Each of the following n - 1 lines describe the tree. For every i from 2 to n , the corresponding line contains two integers p_ i and l_ i , where p_ i denotes the parent of vertex i and l_ i denotes the time it takes Mitya to move the chip along the edge from vertex i to its parent ( 1\u2264 p_ i < i , 0\u2264 l_ i \u2264 10^ 9 ) .",
    "output": "Output a single integer \u2014 maximum number of cookies Mitya can eat.",
    "note": "In the first example test case, Mitya can start by moving the chip to vertex 2 . In this case no matter how Vasya plays, Mitya is able to eat at least 11 cookies. Below you can find the detailed description of the moves: Mitya moves chip to vertex 2 . Vasya removes edge to vertex 4 . Mitya moves chip to vertex 5 . Since vertex 5 has no children, Vasya does not remove any edges. Mitya stops the game and moves the chip towards the root, eating cookies along the way ( 7 in vertex 5 , 3 in vertex 2 , 1 in vertex 1 ) . Mitya spend 1+ 0 time to go down, 0+ 1 to go up, 7\u00b7 2 to eat 7 cookies in vertex 5, 3\u00b7 3 to eat 3 cookies in vertex 2, 1\u00b7 1 to eat 1 cookie in vertex 1. Total time is 1+ 0+ 0+ 1+ 7\u00b7 2+ 3\u00b7 3+ 1\u00b7 1= 26 .",
    "topics": [
      "binary search",
      "data structures",
      "dfs and similar",
      "dp",
      "games",
      "trees"
    ],
    "id": "1099F"
  },
  {
    "title": "Eels",
    "url": "https://codeforces.com/problemset/problem/1098/D",
    "history": "Vasya is a big fish lover, and his parents gave him an aquarium for the New Year. Vasya does not have a degree in ichthyology, so he thinks that filling a new aquarium with eels is a good idea. Unfortunately, eels are predators, so Vasya decided to find out how dangerous this idea was. Getting into one aquarium, eels fight each other until exactly one fish remains. When two eels fight, the big one eats the smaller one ( if their weights are equal, then one of them will still eat the other) . Namely, let n eels be initially in an aquarium, and the i - th of them have a weight of x_ i . Then n- 1 battles will occur between them, as a result of which, only one eel will survive. In a battle of two eels with weights a and b , where a \u2264 b , eel of weight a will be eaten and disappear from the aquarium, and eel of weight b will increase its weight to a+ b . A battle between two eels with weights a and b , where a \u2264 b , is considered dangerous if b \u2264 2 a . For a given set of eels, danger is defined as the maximum number of dangerous battles that can occur among these eels if they are placed in one aquarium. Now Vasya is planning, which eels he wants to put into an aquarium. He has some set of eels ( initially empty) . He makes a series of operations with this set. With each operation, he either adds one eel in the set, or removes one eel from the set. Vasya asks you to calculate the danger of the current set of eels after each operation.",
    "input": "The first line of input contains a single integer q ( 1 \u2264 q \u2264 500 000 ) , the number of operations that Vasya makes. The next q lines describe operations. Each operation has one of two types : + x describes the addition of one eel of weight x to the set ( 1 \u2264 x \u2264 10^ 9 ) . Note that in the set there can be several eels of the same weight. - x describes the removal of one eel of weight x from a set, and it is guaranteed that there is a eel of such weight in the set.",
    "output": "For each operation, output single integer, the danger of the set of eels after this operation.",
    "note": "In the third example, after performing all the operations, the set of eels looks like { 1, 1, 4} . For this set of eels, there are several possible scenarios, if all of them are placed in one aquarium: The eel of weight 4 eats the eel of weight 1, and then the second eel of weight 1. In this case, none of the battles are dangerous. The eel of weight 1 eats the eel of weight 1, and this battle is dangerous. Now there are two eels in the aquarium, their weights are 4 and 2. The big one eats the small one, and this battle is also dangerous. In this case, the total number of dangerous battles will be 2. Thus, the danger of this set of eels is 2.",
    "topics": [
      "data structures"
    ],
    "id": "1098D"
  },
  {
    "title": "Multidimensional Queries",
    "url": "https://codeforces.com/problemset/problem/1093/G",
    "history": "You are given an array a of n points in k - dimensional space. Let the distance between two points a_ x and a_ y be \u2211_ i = 1^ k | a_ x, i - a_ y, i| ( it is also known as Manhattan distance) . You have to process q queries of the following two types: 1 i b_ 1 b_ 2 . . . b_ k \u2014 set i - th element of a to the point ( b_ 1, b_ 2, . . . , b_ k) ; 2 l r \u2014 find the maximum distance between two points a_ i and a_ j , where l \u2264 i, j \u2264 r .",
    "input": "The first line contains two numbers n and k ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 k \u2264 5 ) \u2014 the number of elements in a and the number of dimensions of the space, respectively. Then n lines follow, each containing k integers a_ i, 1 , a_ i, 2 , . . . , a_ i, k ( - 10^ 6 \u2264 a_ i, j\u2264 10^ 6 ) \u2014 the coordinates of i - th point. The next line contains one integer q ( 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of queries. Then q lines follow, each denoting a query. There are two types of queries: 1 i b_ 1 b_ 2 . . . b_ k ( 1 \u2264 i \u2264 n , - 10^ 6 \u2264 b_ j \u2264 10^ 6 ) \u2014 set i - th element of a to the point ( b_ 1, b_ 2, . . . , b_ k) ; 2 l r ( 1 \u2264 l \u2264 r \u2264 n ) \u2014 find the maximum distance between two points a_ i and a_ j , where l \u2264 i, j \u2264 r . There is at least one query of the second type.",
    "output": "Print the answer for each query of the second type.",
    "note": "",
    "topics": [
      "bitmasks",
      "data structures"
    ],
    "id": "1093G"
  },
  {
    "title": "Intersection of Permutations",
    "url": "https://codeforces.com/problemset/problem/1093/E",
    "history": "You are given two permutations a and b , both consisting of n elements. Permutation of n elements is such a integer sequence that each value from 1 to n appears exactly once in it. You are asked to perform two types of queries with them: 1 l_ a r_ a l_ b r_ b \u2014 calculate the number of values which appear in both segment [ l_ a; r_ a] of positions in permutation a and segment [ l_ b; r_ b] of positions in permutation b ; 2 x y \u2014 swap values on positions x and y in permutation b . Print the answer for each query of the first type. It is guaranteed that there will be at least one query of the first type in the input.",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of elements in both permutations and the number of queries. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 permutation a . It is guaranteed that each value from 1 to n appears in a exactly once. The third line contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 n ) \u2014 permutation b . It is guaranteed that each value from 1 to n appears in b exactly once. Each of the next m lines contains the description of a certain query. These are either: 1 l_ a r_ a l_ b r_ b ( 1 \u2264 l_ a \u2264 r_ a \u2264 n , 1 \u2264 l_ b \u2264 r_ b \u2264 n ) ; 2 x y ( 1 \u2264 x, y \u2264 n , x y ) .",
    "output": "Print the answers for the queries of the first type, each answer in the new line \u2014 the number of values which appear in both segment [ l_ a; r_ a] of positions in permutation a and segment [ l_ b; r_ b] of positions in permutation b .",
    "note": "Consider the first query of the first example. Values on positions [ 1; 2] of a are [ 5, 1] and values on positions [ 4; 5] of b are [ 1, 4] . Only value 1 appears in both segments. After the first swap ( the second query) permutation b becomes [ 2, 1, 3, 5, 4, 6] . After the second swap ( the sixth query) permutation b becomes [ 5, 1, 3, 2, 4, 6] .",
    "topics": [
      "data structures"
    ],
    "id": "1093E"
  },
  {
    "title": "Great Vova Wall (Version 2)",
    "url": "https://codeforces.com/problemset/problem/1092/D2",
    "history": "Vova' s family is building the Great Vova Wall ( named by Vova himself) . Vova' s parents, grandparents, grand- grandparents contributed to it. Now it' s totally up to Vova to put the finishing touches. The current state of the wall can be respresented by a sequence a of n integers, with a_ i being the height of the i - th part of the wall. Vova can only use 2 \u00d7 1 bricks to put in the wall ( he has infinite supply of them, however) . Vova can put bricks only horizontally on the neighbouring parts of the wall of equal height. It means that if for some i the current height of part i is the same as for part i + 1 , then Vova can put a brick there and thus increase both heights by 1. Obviously, Vova can' t put bricks in such a way that its parts turn out to be off the borders ( to the left of part 1 of the wall or to the right of part n of it) . Note that Vova can' t put bricks vertically. Vova is a perfectionist, so he considers the wall completed when: all parts of the wall has the same height; the wall has no empty spaces inside it. Can Vova complete the wall using any amount of bricks ( possibly zero) ?",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of parts in the wall. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the initial heights of the parts of the wall.",
    "output": "Print \" YES\" if Vova can complete the wall using any amount of bricks ( possibly zero) . Print \" NO\" otherwise.",
    "note": "In the first example Vova can put a brick on parts 2 and 3 to make the wall [ 2, 2, 2, 2, 5] and then put 3 bricks on parts 1 and 2 and 3 bricks on parts 3 and 4 to make it [ 5, 5, 5, 5, 5] . In the second example Vova can put no bricks in the wall. In the third example the wall is already complete.",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "1092D2"
  },
  {
    "title": "New Year and the Acquaintance Estimation",
    "url": "https://codeforces.com/problemset/problem/1091/E",
    "history": "Bob is an active user of the social network Faithbug. On this network, people are able to engage in a mutual friendship. That is, if a is a friend of b , then b is also a friend of a . Each user thus has a non- negative amount of friends. This morning, somebody anonymously sent Bob the following link: graph realization problem and Bob wants to know who that was. In order to do that, he first needs to know how the social network looks like. He investigated the profile of every other person on the network and noted down the number of his friends. However, he neglected to note down the number of his friends. Help him find out how many friends he has. Since there may be many possible answers, print all of them.",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 5 \u00b7 10^ 5 ) , the number of people on the network excluding Bob. The second line contains n numbers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 n ) , with a_ i being the number of people that person i is a friend of.",
    "output": "Print all possible values of a_ n+ 1 \u2014 the amount of people that Bob can be friend of, in increasing order. If no solution exists, output - 1 .",
    "note": "In the first test case, the only solution is that everyone is friends with everyone. That is why Bob should have 3 friends. In the second test case, there are three possible solutions ( apart from symmetries) : a is friend of b , c is friend of d , and Bob has no friends, or a is a friend of b and both c and d are friends with Bob, or Bob is friends of everyone. The third case is impossible to solve, as the second person needs to be a friend with everybody, but the first one is a complete stranger.",
    "topics": [
      "binary search",
      "data structures",
      "graphs",
      "greedy",
      "implementation",
      "math",
      "sortings"
    ],
    "id": "1091E"
  },
  {
    "title": "New Year Presents",
    "url": "https://codeforces.com/problemset/problem/1090/C",
    "history": "Santa has prepared boxes with presents for n kids, one box for each kid. There are m kinds of presents: balloons, sweets, chocolate bars, toy cars. . . A child would be disappointed to receive two presents of the same kind, so all kinds of presents in one box are distinct. Having packed all the presents, Santa realized that different boxes can contain different number of presents. It would be unfair to the children, so he decided to move some presents between boxes, and make their sizes similar. After all movements, the difference between the maximal and the minimal number of presents in a box must be as small as possible. All presents in each box should still be distinct. Santa wants to finish the job as fast as possible, so he wants to minimize the number of movements required to complete the task. Given the sets of presents in each box, find the shortest sequence of movements of presents between boxes that minimizes the difference of sizes of the smallest and the largest box, and keeps all presents in each box distinct.",
    "input": "The first line of input contains two integers n , m ( 1 \u2264 n, m \u2264 100 000 ) , the number of boxes and the number of kinds of the presents. Denote presents with integers from 1 to m . Each of the following n lines contains the description of one box. It begins with an integer s_ i ( s_ i \u2265 0 ) , the number of presents in the box, s_ i distinct integers between 1 and m follow, denoting the kinds of presents in that box. The total number of presents in all boxes does not exceed 500 000 .",
    "output": "Print one integer k at the first line of output, the number of movements in the shortest sequence that makes the sizes of the boxes differ by at most one. Then print k lines that describe movements in the same order in which they should be performed. Each movement is described by three integers from_ i , to_ i , kind_ i . It means that the present of kind kind_ i is moved from the box with number from_ i to the box with number to_ i . Boxes are numbered from one in the order they are given in the input. At the moment when the movement is performed the present with kind kind_ i must be present in the box with number from_ i . After performing all moves each box must not contain two presents of the same kind. If there are several optimal solutions, output any of them.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "data structures"
    ],
    "id": "1090C"
  },
  {
    "title": "King Kog's Reception",
    "url": "https://codeforces.com/problemset/problem/1089/K",
    "history": "King Kog got annoyed of the usual laxity of his knights \u2014 they can break into his hall without prior notice! Thus, the King decided to build a reception with a queue where each knight chooses in advance the time when he will come and how long the visit will take. The knights are served in the order of the recorded time, but each knight has to wait until the visits of all the knights before him are finished. Princess Keabeanie wants to see her father. However, she does not want to interrupt the knights so she joins the queue. Unfortunately, the knights change their minds very often \u2014 they can join the queue or cancel their visits. Please help the princess to understand how long she will have to wait until she sees her father if she enters the queue at the specified moments of time given the records at the reception.",
    "input": "The first line of the input contains a single integer q ( 1 \u2264 q \u2264 3 \u00b7 10^ 5 ) \u2014 the number of events. An event can be of three types: join, cancel, or query. Join \" + t d \" ( 1 \u2264 t, d \u2264 10^ 6 ) \u2014 a new knight joins the queue, where t is the time when the knight will come and d is the duration of the visit. Cancel \" - i \" ( 1 \u2264 i \u2264 q ) \u2014 the knight cancels the visit, where i is the number ( counted starting from one) of the corresponding join event in the list of all events. Query \" ? t \" ( 1 \u2264 t \u2264 10^ 6 ) \u2014 Keabeanie asks how long she will wait if she comes at the time t . It is guaranteed that after each event there are no two knights with the same entrance time in the queue. Cancel events refer to the previous joins that were not cancelled yet. Keabeanie can come at the same time as some knight, but Keabeanie is very polite and she will wait for the knight to pass.",
    "output": "For each query write a separate line with the amount of time Keabeanie will have to wait.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": "1089K"
  },
  {
    "title": "Ehab and a weird weight formula",
    "url": "https://codeforces.com/problemset/problem/1088/F",
    "history": "You' re given a tree consisting of n nodes. Every node u has a weight a_ u . It is guaranteed that there is only one node with minimum weight in the tree. For every node u ( except for the node with the minimum weight) , it must have a neighbor v such that a_ v< a_ u . You should construct a tree to minimize the weight w calculated as follows: For every node u , deg_ u \u00b7 a_ u is added to w ( deg_ u is the number of edges containing node u ) . For every edge { u, v } , \u2308 log_ 2( dist( u, v) ) \u2309\u00b7 min( a_ u, a_ v) is added to w , where dist( u, v) is the number of edges in the path from u to v in the given tree.",
    "input": "The first line contains the integer n ( 2 \u2264 n \u2264 5 \u00b7 10^ 5) , the number of nodes in the tree. The second line contains n space- separated integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9) , the weights of the nodes. The next n- 1 lines, each contains 2 space- separated integers u and v ( 1 \u2264 u, v \u2264 n) which means there' s an edge between u and v .",
    "output": "Output one integer, the minimum possible value for w .",
    "note": "In the first sample, the tree itself minimizes the value of w . In the second sample, the optimal tree is:",
    "topics": [
      "data structures",
      "trees"
    ],
    "id": "1088F"
  },
  {
    "title": "Beautiful Matrix",
    "url": "https://codeforces.com/problemset/problem/1085/G",
    "history": "Petya collects beautiful matrix. A matrix of size n \u00d7 n is beautiful if: All elements of the matrix are integers between 1 and n ; For every row of the matrix, all elements of this row are different; For every pair of vertically adjacent elements, these elements are different. Today Petya bought a beautiful matrix a of size n \u00d7 n , and now he wants to determine its rarity. The rarity of the matrix is its index in the list of beautiful matrices of size n \u00d7 n , sorted in lexicographical order. Matrix comparison is done row by row. ( The index of lexicographically smallest matrix is zero) . Since the number of beautiful matrices may be huge, Petya wants you to calculate the rarity of the matrix a modulo 998 244 353 .",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 2000 ) \u2014 the number of rows and columns in a . Each of the next n lines contains n integers a_ i, j ( 1 \u2264 a_ i, j\u2264 n ) \u2014 the elements of a . It is guaranteed that a is a beautiful matrix.",
    "output": "Print one integer \u2014 the rarity of matrix a , taken modulo 998 244 353 .",
    "note": "There are only 2 beautiful matrices of size 2 \u00d7 2 : There are the first 5 beautiful matrices of size 3 \u00d7 3 in lexicographical order:",
    "topics": [
      "combinatorics",
      "data structures",
      "dp"
    ],
    "id": "1085G"
  },
  {
    "title": "The Fair Nut and Amusing Xor",
    "url": "https://codeforces.com/problemset/problem/1083/F",
    "history": "The Fair Nut has two arrays a and b , consisting of n numbers. He found them so long ago that no one knows when they came to him. The Fair Nut often changes numbers in his arrays. He also is interested in how similar a and b are after every modification. Let' s denote similarity of two arrays as the minimum number of operations to apply to make arrays equal ( every operation can be applied for both arrays) . If it is impossible, similarity will be equal - 1 . Per one operation you can choose a subarray with length k ( k is fixed) , and change every element a_ i , which belongs to the chosen subarray, to a_ i \u2295 x ( x can be chosen) , where \u2295 denotes the bitwise XOR operation. Nut has already calculated the similarity of the arrays after every modification. Can you do it? Note that you just need to calculate those values, that is you do not need to apply any operations.",
    "input": "The first line contains three numbers n , k and q ( 1 \u2264 k \u2264 n \u2264 2 \u00b7 10^ 5 , 0 \u2264 q \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the arrays, the length of the subarrays, to which the operations are applied, and the number of queries. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i < 2^ 14 ) \u2014 elements of array a . The third line contains n integers b_ 1, b_ 2, . . . , b_ n ( 0 \u2264 b_ i < 2^ 14 ) \u2014 elements of array b . Each of the next q lines describes query and contains string s and two integers p and v ( 1 \u2264 p \u2264 n , 0 \u2264 v < 2^ 14 ) \u2014 array, which this query changes ( \u00aba\u00bb or \u00abb\u00bb without quotes) , index of changing element and its new value.",
    "output": "On the first line print initial similarity of arrays a and b . On the i - th of following q lines print similarity of a and b after applying first i modifications.",
    "note": "In the first sample making arrays [ 0, 4, 2] and [ 1, 2, 3] is impossible with k= 3 . After the modification, you can apply the operation with x= 1 to the whole first array ( its length is equal to k ) , and it will be equal to the second array. In order to make arrays equal in the second sample before changes, you can apply operations with x= 1 on subarray [ 1, 2] of a and with x= 2 on subarray [ 2, 3] of b . After all queries arrays will be equal [ 0, 3, 2] and [ 1, 0, 0] . The same operations make them equal [ 1, 2, 2] .",
    "topics": [
      "data structures"
    ],
    "id": "1083F"
  },
  {
    "title": "The Fair Nut and Rectangles",
    "url": "https://codeforces.com/problemset/problem/1083/E",
    "history": "The Fair Nut got stacked in planar world. He should solve this task to get out. You are given n rectangles with vertexes in ( 0, 0) , ( x_ i, 0) , ( x_ i, y_ i) , ( 0, y_ i) . For each rectangle, you are also given a number a_ i . Choose some of them that the area of union minus sum of a_ i of the chosen ones is maximum. It is guaranteed that there are no nested rectangles. Nut has no idea how to find the answer, so he asked for your help.",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 10^ 6 ) \u2014 the number of rectangles. Each of the next n lines contains three integers x_ i , y_ i and a_ i ( 1 \u2264 x_ i, y_ i \u2264 10^ 9 , 0 \u2264 a_ i \u2264 x_ i \u00b7 y_ i ) . It is guaranteed that there are no nested rectangles.",
    "output": "In a single line print the answer to the problem \u2014 the maximum value which you can achieve.",
    "note": "In the first example, the right answer can be achieved by choosing the first and the second rectangles. In the second example, the right answer can also be achieved by choosing the first and the second rectangles.",
    "topics": [
      "data structures",
      "dp",
      "geometry"
    ],
    "id": "1083E"
  },
  {
    "title": "The Fair Nut's getting crazy",
    "url": "https://codeforces.com/problemset/problem/1083/D",
    "history": "The Fair Nut has found an array a of n integers. We call subarray l . . . r a sequence of consecutive elements of an array with indexes from l to r , i. e. a_ l, a_ l+ 1, a_ l+ 2, . . . , a_ r- 1, a_ r . No one knows the reason, but he calls a pair of subsegments good if and only if the following conditions are satisfied: These subsegments should not be nested. That is, each of the subsegments should contain an element ( as an index) that does not belong to another subsegment. Subsegments intersect and each element that belongs to the intersection belongs each of segments only once. For example a= [ 1, 2, 3, 5, 5] . Pairs ( 1 . . . 3; 2 . . . 5) and ( 1 . . . 2; 2 . . . 3) ) \u2014 are good, but ( 1 . . . 3; 2 . . . 3) and ( 3 . . . 4; 4 . . . 5) \u2014 are not ( subsegment 1 . . . 3 contains subsegment 2 . . . 3 , integer 5 belongs both segments, but occurs twice in subsegment 4 . . . 5 ) . Help the Fair Nut to find out the number of pairs of good subsegments! The answer can be rather big so print it modulo 10^ 9+ 7 .",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of array a . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) \u2014 the array elements.",
    "output": "Print single integer \u2014 the number of pairs of good subsegments modulo 10^ 9+ 7 .",
    "note": "In the first example, there is only one pair of good subsegments: ( 1 . . . 2, 2 . . . 3) . In the second example, there are four pairs of good subsegments: ( 1 . . . 2, 2 . . . 3) ( 2 . . . 3, 3 . . . 4) ( 2 . . . 3, 3 . . . 5) ( 3 . . . 4, 4 . . . 5)",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "1083D"
  },
  {
    "title": "Max Mex",
    "url": "https://codeforces.com/problemset/problem/1083/C",
    "history": "Once Grisha found a tree ( connected graph without cycles) with a root in node 1 . But this tree was not just a tree. A permutation p of integers from 0 to n - 1 is written in nodes, a number p_ i is written in node i . As Grisha likes to invent some strange and interesting problems for himself, but not always can solve them, you need to help him deal with two types of queries on this tree. Let' s define a function MEX( S) , where S is a set of non- negative integers, as a smallest non- negative integer that is not included in this set. Let l be a simple path in this tree. So let' s define indices of nodes which lie on l as u_ 1 , u_ 2 , . . . , u_ k . Define V( l) as a set p_ u_ 1 , p_ u_ 2 , . . . , p_ u_ k . Then queries are: For two nodes i and j , swap p_ i and p_ j . Find the maximum value of MEX( V( l) ) in all possible l .",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of nodes of a tree. The second line contains n integers \u2014 p_ 1 , p_ 2 , . . . , p_ n ( 0\u2264 p_ i < n ) \u2014 the permutation p , it' s guaranteed that all numbers are different . The third line contains n - 1 integers \u2014 d_ 2 , d_ 3 , . . . , d_ n ( 1 \u2264 d_ i < i ) , where d_ i is a direct ancestor of node i in a tree. The fourth line contains a single integer q ( 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of queries. The following q lines contain the description of queries: At the beginning of each of next q lines, there is a single integer t ( 1 or 2 ) \u2014 the type of a query: If t = 1 , the line also contains two integers i and j ( 1 \u2264 i, j \u2264 n ) \u2014 the indices of nodes, where values of the permutation should be swapped. If t = 2 , you need to find the maximum value of MEX( V( l) ) in all possible l .",
    "output": "For each type 2 query print a single integer \u2014 the answer for this query.",
    "note": "Number written in brackets is a permutation value of a node. In the first example, for the first query, optimal path is a path from node 1 to node 5 . For it, set of values is { 0, 1, 2} and MEX is 3 . For the third query, optimal path is a path from node 5 to node 6 . For it, set of values is { 0, 1, 4} and MEX is 2 . In the second example, for the first query, optimal path is a path from node 2 to node 6 . For it, set of values is { 0, 1, 2, 5} and MEX is 3 . For the third query, optimal path is a path from node 5 to node 6 . For it, set of values is { 0, 1, 3} and MEX is 2 . For the fifth query, optimal path is a path from node 5 to node 2 . For it, set of values is { 0, 1, 2, 3} and MEX is 4 . For the seventh query, optimal path is a path from node 5 to node 4 . For it, set of values is { 0, 1, 2, 3} and MEX is 4 . For the ninth query, optimal path is a path from node 6 to node 5 . For it, set of values is { 0, 1, 3} and MEX is 2 .",
    "topics": [
      "data structures",
      "trees"
    ],
    "id": "1083C"
  },
  {
    "title": "The Fair Nut and the Best Path",
    "url": "https://codeforces.com/problemset/problem/1083/A",
    "history": "The Fair Nut is going to travel to the Tree Country, in which there are n cities. Most of the land of this country is covered by forest. Furthermore, the local road system forms a tree ( connected graph without cycles) . Nut wants to rent a car in the city u and go by a simple path to city v . He hasn' t determined the path, so it' s time to do it. Note that chosen path can consist of only one vertex. A filling station is located in every city. Because of strange law, Nut can buy only w_ i liters of gasoline in the i - th city. We can assume, that he has infinite money. Each road has a length, and as soon as Nut drives through this road, the amount of gasoline decreases by length. Of course, Nut can' t choose a path, which consists of roads, where he runs out of gasoline. He can buy gasoline in every visited city, even in the first and the last. He also wants to find the maximum amount of gasoline that he can have at the end of the path. Help him: count it.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 3 \u00b7 10^ 5 ) \u2014 the number of cities. The second line contains n integers w_ 1, w_ 2, . . . , w_ n ( 0 \u2264 w_ i\u2264 10^ 9 ) \u2014 the maximum amounts of liters of gasoline that Nut can buy in cities. Each of the next n - 1 lines describes road and contains three integers u , v , c ( 1 \u2264 u, v \u2264 n , 1 \u2264 c \u2264 10^ 9 , u v ) , where u and v \u2014 cities that are connected by this road and c \u2014 its length. It is guaranteed that graph of road connectivity is a tree.",
    "output": "Print one number \u2014 the maximum amount of gasoline that he can have at the end of the path.",
    "note": "The optimal way in the first example is 2 \u2192 1 \u2192 3 . The optimal way in the second example is 2 \u2192 4 .",
    "topics": [
      "data structures",
      "dp",
      "trees"
    ],
    "id": "1083A"
  },
  {
    "title": "Palindromic Magic",
    "url": "https://codeforces.com/problemset/problem/1081/H",
    "history": "After learning some fancy algorithms about palindromes, Chouti found palindromes very interesting, so he wants to challenge you with this problem. Chouti has got two strings A and B . Since he likes palindromes, he would like to pick a as some non- empty palindromic substring of A and b as some non- empty palindromic substring of B . Concatenating them, he will get string ab . Chouti thinks strings he could get this way are interesting, so he wants to know how many different strings he can get.",
    "input": "The first line contains a single string A ( 1 \u2264 | A| \u2264 2 \u00b7 10^ 5 ) . The second line contains a single string B ( 1 \u2264 | B| \u2264 2 \u00b7 10^ 5 ) . Strings A and B contain only lowercase English letters.",
    "output": "The first and only line should contain a single integer \u2014 the number of possible strings.",
    "note": "In the first example, attainable strings are \" a\" + \" a\" = \" aa\" , \" aa\" + \" a\" = \" aaa\" , \" aa\" + \" aba\" = \" aaaba\" , \" aa\" + \" b\" = \" aab\" , \" a\" + \" aba\" = \" aaba\" , \" a\" + \" b\" = \" ab\" . In the second example, attainable strings are \" aa\" , \" aaa\" , \" aaaa\" , \" aaaba\" , \" aab\" , \" aaba\" , \" ab\" , \" abaa\" , \" abaaa\" , \" abaaba\" , \" abab\" , \" ba\" , \" baa\" , \" baba\" , \" bb\" . Notice that though \" a\" + \" aa\" = \" aa\" + \" a\" = \" aaa\" , \" aaa\" will only be counted once.",
    "topics": [
      "data structures",
      "hashing",
      "strings"
    ],
    "id": "1081H"
  },
  {
    "title": "Katya and Segments Sets",
    "url": "https://codeforces.com/problemset/problem/1080/F",
    "history": "It is a very important day for Katya. She has a test in a programming class. As always, she was given an interesting problem that she solved very fast. Can you solve that problem? You are given n ordered segments sets. Each segment can be represented as a pair of two integers [ l, r] where l\u2264 r . Each set can contain an arbitrary number of segments ( even 0 ) . It is possible that some segments are equal. You are also given m queries, each of them can be represented as four numbers: a, b, x, y . For each segment, find out whether it is true that each set p ( a\u2264 p\u2264 b ) contains at least one segment [ l, r] that lies entirely on the segment [ x, y] , that is x\u2264 l\u2264 r\u2264 y . Find out the answer to each query. Note that you need to solve this problem online. That is, you will get a new query only after you print the answer for the previous query. InteractionAfter printing a query, do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use: fflush( stdout) or cout. flush( ) in C+ + ; System. out. flush( ) in Java; flush( output) in Pascal; stdout. flush( ) in Python; see documentation for other languages.",
    "input": "The first line contains three integers n , m , and k ( 1\u2264 n, m\u2264 10^ 5, 1\u2264 k\u2264 3\u00b710^ 5) \u2014 the number of sets, queries, and segments respectively. Each of the next k lines contains three integers l , r , and p ( 1\u2264 l\u2264 r\u2264 10^ 9, 1\u2264 p\u2264 n) \u2014 the limits of the segment and the index of a set, to which this segment belongs. Each of the next m lines contains four integers a, b, x, y ( 1\u2264 a\u2264 b\u2264 n, 1\u2264 x\u2264 y\u2264 10^ 9) \u2014 the description of the query.",
    "output": "For each query, print \" yes\" or \" no\" in a new line.",
    "note": "For the first query, the answer is negative since the second set does not contain a segment that lies on the segment [ 2, 3] . In the second query, the first set contains [ 2, 3] , and the second set contains [ 2, 4] . In the third query, the first set contains [ 2, 3] , the second set contains [ 2, 4] , and the third set contains [ 2, 5] . In the fourth query, the second set does not contain a segment that lies on the segment [ 3, 6] . In the fifth query, the second set contains [ 2, 4] , the third set contains [ 2, 5] , and the fourth contains [ 7, 9] .",
    "topics": [
      "data structures",
      "interactive",
      "sortings"
    ],
    "id": "1080F"
  },
  {
    "title": "Pictures with Kittens (hard version)",
    "url": "https://codeforces.com/problemset/problem/1077/F2",
    "history": "The only difference between easy and hard versions is the constraints. Vova likes pictures with kittens. The news feed in the social network he uses can be represented as an array of n consecutive pictures ( with kittens, of course) . Vova likes all these pictures, but some are more beautiful than the others: the i - th picture has beauty a_ i . Vova wants to repost exactly x pictures in such a way that: each segment of the news feed of at least k consecutive pictures has at least one picture reposted by Vova; the sum of beauty values of reposted pictures is maximum possible. For example, if k= 1 then Vova has to repost all the pictures in the news feed. If k= 2 then Vova can skip some pictures, but between every pair of consecutive pictures Vova has to repost at least one of them. Your task is to calculate the maximum possible sum of values of reposted pictures if Vova follows conditions described above, or say that there is no way to satisfy all conditions.",
    "input": "The first line of the input contains three integers n, k and x ( 1 \u2264 k, x \u2264 n \u2264 5000 ) \u2014 the number of pictures in the news feed, the minimum length of segment with at least one repost in it and the number of pictures Vova is ready to repost. The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is the beauty of the i - th picture.",
    "output": "Print - 1 if there is no way to repost some pictures to satisfy all the conditions in the problem statement. Otherwise print one integer \u2014 the maximum sum of values of reposted pictures if Vova follows conditions described in the problem statement.",
    "note": "",
    "topics": [
      "data structures",
      "dp"
    ],
    "id": "1077F2"
  },
  {
    "title": "Array Game",
    "url": "https://codeforces.com/problemset/problem/1076/G",
    "history": "Consider a following game between two players: There is an array b_ 1 , b_ 2 , . . . , b_ k , consisting of positive integers. Initially a chip is placed into the first cell of the array, and b_ 1 is decreased by 1 . Players move in turns. Each turn the current player has to do the following: if the index of the cell where the chip is currently placed is x , then he or she has to choose an index y \u2208 [ x, min( k, x + m) ] such that b_ y > 0 , move the chip to the cell y and decrease b_ y by 1 . If it' s impossible to make a valid move, the current player loses the game. Your task is the following: you are given an array a consisting of n positive integers, and q queries to it. There are two types of queries: 1 l r d \u2014 for every i \u2208 [ l, r] increase a_ i by d ; 2 l r \u2014 tell who is the winner of the game that is played on the subarray of a from index l to index r inclusive. Assume both players choose an optimal strategy.",
    "input": "The first line contains three integers n , m and q ( 1 \u2264 n, q \u2264 2 \u00b7 10^ 5 , 1 \u2264 m \u2264 5 ) \u2014 the number of elements in a , the parameter described in the game and the number of queries, respectively. The second line contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 12 ) \u2014 the elements of array a . Then q lines follow, each containing a query. There are two types of queries. The query of the first type is denoted by a line 1 l r d ( 1 \u2264 l \u2264 r \u2264 n , 1 \u2264 d \u2264 10^ 12 ) and means that for every i \u2208 [ l, r] you should increase a_ i by d . The query of the second type is denoted by a line 2 l r ( 1 \u2264 l \u2264 r \u2264 n ) and means that you have to determine who will win the game if it is played on the subarray of a from index l to index r ( inclusive) . There is at least one query of type 2 .",
    "output": "For each query of type 2 print 1 if the first player wins in the corresponding game, or 2 if the second player wins.",
    "note": "",
    "topics": [
      "data structures",
      "games"
    ],
    "id": "1076G"
  },
  {
    "title": "Vasya and a Tree",
    "url": "https://codeforces.com/problemset/problem/1076/E",
    "history": "Vasya has a tree consisting of n vertices with root in vertex 1 . At first all vertices has 0 written on it. Let d( i, j) be the distance between vertices i and j , i. e. number of edges in the shortest path from i to j . Also, let' s denote k - subtree of vertex x \u2014 set of vertices y such that next two conditions are met: x is the ancestor of y ( each vertex is the ancestor of itself) ; d( x, y) \u2264 k . Vasya needs you to process m queries. The i - th query is a triple v_ i , d_ i and x_ i . For each query Vasya adds value x_ i to each vertex from d_ i - subtree of v_ i . Report to Vasya all values, written on vertices of the tree after processing all queries.",
    "input": "The first line contains single integer n ( 1 \u2264 n \u2264 3 \u00b7 10^ 5 ) \u2014 number of vertices in the tree. Each of next n - 1 lines contains two integers x and y ( 1 \u2264 x, y \u2264 n ) \u2014 edge between vertices x and y . It is guarantied that given graph is a tree. Next line contains single integer m ( 1 \u2264 m \u2264 3 \u00b7 10^ 5 ) \u2014 number of queries. Each of next m lines contains three integers v_ i , d_ i , x_ i ( 1 \u2264 v_ i \u2264 n , 0 \u2264 d_ i \u2264 10^ 9 , 1 \u2264 x_ i \u2264 10^ 9 ) \u2014 description of the i - th query.",
    "output": "Print n integers. The i - th integers is the value, written in the i - th vertex after processing all queries.",
    "note": "In the first exapmle initial values in vertices are 0, 0, 0, 0, 0 . After the first query values will be equal to 1, 1, 1, 0, 0 . After the second query values will be equal to 1, 11, 1, 0, 0 . After the third query values will be equal to 1, 11, 1, 100, 0 .",
    "topics": [
      "data structures",
      "trees"
    ],
    "id": "1076E"
  },
  {
    "title": "Yet Another LCP Problem",
    "url": "https://codeforces.com/problemset/problem/1073/G",
    "history": "Let LCP( s, t) be the length of the longest common prefix of strings s and t . Also let s[ x . . . y] be the substring of s from index x to index y ( inclusive) . For example, if s = \" abcde\" , then s[ 1 . . . 3] = \" abc\" , s[ 2 . . . 5] = \" bcde\" . You are given a string s of length n and q queries. Each query is a pair of integer sets a_ 1, a_ 2, . . . , a_ k and b_ 1, b_ 2, . . . , b_ l . Calculate \u2211_ i = 1^ i = k\u2211_ j = 1^ j = lLCP( s[ a_ i . . . n] , s[ b_ j . . . n] ) for each query.",
    "input": "The first line contains two integers n and q ( 1 \u2264 n, q \u2264 2 \u00b7 10^ 5 ) \u2014 the length of string s and the number of queries, respectively. The second line contains a string s consisting of lowercase Latin letters ( | s| = n ) . Next 3q lines contains descriptions of queries \u2014 three lines per query. The first line of each query contains two integers k_ i and l_ i ( 1 \u2264 k_ i, l_ i \u2264 n ) \u2014 sizes of sets a and b respectively. The second line of each query contains k_ i integers a_ 1, a_ 2, . . . a_ k_ i ( 1 \u2264 a_ 1 < a_ 2 < . . . < a_ k_ i\u2264 n ) \u2014 set a . The third line of each query contains l_ i integers b_ 1, b_ 2, . . . b_ l_ i ( 1 \u2264 b_ 1 < b_ 2 < . . . < b_ l_ i\u2264 n ) \u2014 set b . It is guaranteed that \u2211_ i = 1^ i = qk_ i\u2264 2 \u00b7 10^ 5 and \u2211_ i = 1^ i = ql_ i\u2264 2 \u00b7 10^ 5 .",
    "output": "Print q integers \u2014 answers for the queries in the same order queries are given in the input.",
    "note": "Description of queries: In the first query s[ 1 . . . 7] = abacaba and s[ 2 . . . 7] = bacaba are considered. The answer for the query is LCP( abacaba, abacaba) + LCP( abacaba, bacaba) + LCP( bacaba, abacaba) + LCP( bacaba, bacaba) = 7 + 0 + 0 + 6 = 13 . In the second query s[ 1 . . . 7] = abacaba , s[ 2 . . . 7] = bacaba , s[ 3 . . . 7] = acaba and s[ 7 . . . 7] = a are considered. The answer for the query is LCP( abacaba, a) + LCP( bacaba, a) + LCP( acaba, a) = 1 + 0 + 1 = 2 . In the third query s[ 1 . . . 7] = abacaba are compared with all suffixes. The answer is the sum of non- zero values: LCP( abacaba, abacaba) + LCP( abacaba, acaba) + LCP( abacaba, aba) + LCP( abacaba, a) = 7 + 1 + 3 + 1 = 12 . In the fourth query s[ 1 . . . 7] = abacaba and s[ 5 . . . 7] = aba are considered. The answer for the query is LCP( abacaba, abacaba) + LCP( abacaba, aba) + LCP( aba, abacaba) + LCP( aba, aba) = 7 + 3 + 3 + 3 = 16 .",
    "topics": [
      "data structures",
      "string suffix structures"
    ],
    "id": "1073G"
  },
  {
    "title": "Berland Fair",
    "url": "https://codeforces.com/problemset/problem/1073/D",
    "history": "XXI Berland Annual Fair is coming really soon! Traditionally fair consists of n booths, arranged in a circle. The booths are numbered 1 through n clockwise with n being adjacent to 1 . The i - th booths sells some candies for the price of a_ i burles per item. Each booth has an unlimited supply of candies. Polycarp has decided to spend at most T burles at the fair. However, he has some plan in mind for his path across the booths: at first, he visits booth number 1 ; if he has enough burles to buy exactly one candy from the current booth, then he buys it immediately; then he proceeds to the next booth in the clockwise order ( regardless of if he bought a candy or not) . Polycarp' s money is finite, thus the process will end once he can no longer buy candy at any booth. Calculate the number of candies Polycarp will buy.",
    "input": "The first line contains two integers n and T ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 T \u2264 10^ 18 ) \u2014 the number of booths at the fair and the initial amount of burles Polycarp has. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the price of the single candy at booth number i .",
    "output": "Print a single integer \u2014 the total number of candies Polycarp will buy.",
    "note": "Let' s consider the first example. Here are Polycarp' s moves until he runs out of money: Booth 1 , buys candy for 5 , T = 33 ; Booth 2 , buys candy for 2 , T = 31 ; Booth 3 , buys candy for 5 , T = 26 ; Booth 1 , buys candy for 5 , T = 21 ; Booth 2 , buys candy for 2 , T = 19 ; Booth 3 , buys candy for 5 , T = 14 ; Booth 1 , buys candy for 5 , T = 9 ; Booth 2 , buys candy for 2 , T = 7 ; Booth 3 , buys candy for 5 , T = 2 ; Booth 1 , buys no candy, not enough money; Booth 2 , buys candy for 2 , T = 0 . No candy can be bought later. The total number of candies bought is 10 . In the second example he has 1 burle left at the end of his path, no candy can be bought with this amount.",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "greedy"
    ],
    "id": "1073D"
  },
  {
    "title": "Getting Deals Done",
    "url": "https://codeforces.com/problemset/problem/1070/E",
    "history": "Polycarp has a lot of work to do. Recently he has learned a new time management rule: \" if a task takes five minutes or less, do it immediately\" . Polycarp likes the new rule, however he is not sure that five minutes is the optimal value. He supposes that this value d should be chosen based on existing task list. Polycarp has a list of n tasks to complete. The i - th task has difficulty p_ i , i. e. it requires exactly p_ i minutes to be done. Polycarp reads the tasks one by one from the first to the n - th. If a task difficulty is d or less, Polycarp starts the work on the task immediately. If a task difficulty is strictly greater than d , he will not do the task at all. It is not allowed to rearrange tasks in the list. Polycarp doesn' t spend any time for reading a task or skipping it. Polycarp has t minutes in total to complete maximum number of tasks. But he does not want to work all the time. He decides to make a break after each group of m consecutive tasks he was working on. The break should take the same amount of time as it was spent in total on completion of these m tasks. For example, if n= 7 , p= [ 3, 1, 4, 1, 5, 9, 2] , d= 3 and m= 2 Polycarp works by the following schedule: Polycarp reads the first task, its difficulty is not greater than d ( p_ 1= 3 \u2264 d= 3 ) and works for 3 minutes ( i. e. the minutes 1 , 2 , 3 ) ; Polycarp reads the second task, its difficulty is not greater than d ( p_ 2= 1 \u2264 d= 3 ) and works for 1 minute ( i. e. the minute 4 ) ; Polycarp notices that he has finished m= 2 tasks and takes a break for 3+ 1= 4 minutes ( i. e. on the minutes 5, 6, 7, 8 ) ; Polycarp reads the third task, its difficulty is greater than d ( p_ 3= 4 > d= 3 ) and skips it without spending any time; Polycarp reads the fourth task, its difficulty is not greater than d ( p_ 4= 1 \u2264 d= 3 ) and works for 1 minute ( i. e. the minute 9 ) ; Polycarp reads the tasks 5 and 6 , skips both of them ( p_ 5> d and p_ 6> d ) ; Polycarp reads the 7 - th task, its difficulty is not greater than d ( p_ 7= 2 \u2264 d= 3 ) and works for 2 minutes ( i. e. the minutes 10 , 11 ) ; Polycarp notices that he has finished m= 2 tasks and takes a break for 1+ 2= 3 minutes ( i. e. on the minutes 12, 13, 14 ) . Polycarp stops exactly after t minutes. If Polycarp started a task but has not finished it by that time, the task is not considered as completed. It is allowed to complete less than m tasks in the last group. Also Polycarp considers acceptable to have shorter break than needed after the last group of tasks or even not to have this break at all \u2014 his working day is over and he will have enough time to rest anyway. Please help Polycarp to find such value d , which would allow him to complete maximum possible number of tasks in t minutes.",
    "input": "The first line of the input contains single integer c ( 1 \u2264 c \u2264 5 \u00b7 10^ 4 ) \u2014 number of test cases. Then description of c test cases follows. Solve test cases separately, test cases are completely independent and do not affect each other. Each test case is described by two lines. The first of these lines contains three space- separated integers n , m and t ( 1 \u2264 n \u2264 2 \u00b7 10^ 5, 1 \u2264 m \u2264 2 \u00b7 10^ 5, 1 \u2264 t \u2264 4 \u00b7 10^ 10 ) \u2014 the number of tasks in Polycarp' s list, the number of tasks he can do without a break and the total amount of time Polycarp can work on tasks. The second line of the test case contains n space separated integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 2 \u00b7 10^ 5 ) \u2014 difficulties of the tasks. The sum of values n for all test cases in the input does not exceed 2 \u00b7 10^ 5 .",
    "output": "Print c lines, each line should contain answer for the corresponding test case \u2014 the maximum possible number of tasks Polycarp can complete and the integer value d ( 1 \u2264 d \u2264 t ) Polycarp should use in time management rule, separated by space. If there are several possible values d for a test case, output any of them.",
    "note": "In the first test case of the first example n= 5 , m= 2 and t= 16 . The sequence of difficulties is [ 5, 6, 1, 4, 7] . If Polycarp chooses d= 5 then he will complete 3 tasks. Polycarp will work by the following schedule: Polycarp reads the first task, its difficulty is not greater than d ( p_ 1= 5 \u2264 d= 5 ) and works for 5 minutes ( i. e. the minutes 1, 2, . . . , 5 ) ; Polycarp reads the second task, its difficulty is greater than d ( p_ 2= 6 > d= 5 ) and skips it without spending any time; Polycarp reads the third task, its difficulty is not greater than d ( p_ 3= 1 \u2264 d= 5 ) and works for 1 minute ( i. e. the minute 6 ) ; Polycarp notices that he has finished m= 2 tasks and takes a break for 5+ 1= 6 minutes ( i. e. on the minutes 7, 8, . . . , 12 ) ; Polycarp reads the fourth task, its difficulty is not greater than d ( p_ 4= 4 \u2264 d= 5 ) and works for 4 minutes ( i. e. the minutes 13, 14, 15, 16 ) ; Polycarp stops work because of t= 16 . In total in the first test case Polycarp will complete 3 tasks for d= 5 . He can' t choose other value for d to increase the number of completed tasks.",
    "topics": [
      "binary search",
      "data structures"
    ],
    "id": "1070E"
  },
  {
    "title": "Cloud Computing",
    "url": "https://codeforces.com/problemset/problem/1070/C",
    "history": "Buber is a Berland technology company that specializes in waste of investor' s money. Recently Buber decided to transfer its infrastructure to a cloud. The company decided to rent CPU cores in the cloud for n consecutive days, which are numbered from 1 to n . Buber requires k CPU cores each day. The cloud provider offers m tariff plans, the i - th tariff plan is characterized by the following parameters: l_ i and r_ i \u2014 the i - th tariff plan is available only on days from l_ i to r_ i , inclusive, c_ i \u2014 the number of cores per day available for rent on the i - th tariff plan, p_ i \u2014 the price of renting one core per day on the i - th tariff plan. Buber can arbitrarily share its computing core needs between the tariff plans. Every day Buber can rent an arbitrary number of cores ( from 0 to c_ i ) on each of the available plans. The number of rented cores on a tariff plan can vary arbitrarily from day to day. Find the minimum amount of money that Buber will pay for its work for n days from 1 to n . If on a day the total number of cores for all available tariff plans is strictly less than k , then this day Buber will have to work on fewer cores ( and it rents all the available cores) , otherwise Buber rents exactly k cores this day.",
    "input": "The first line of the input contains three integers n , k and m ( 1 \u2264 n, k \u2264 10^ 6, 1 \u2264 m \u2264 2\u00b710^ 5 ) \u2014 the number of days to analyze, the desired daily number of cores, the number of tariff plans. The following m lines contain descriptions of tariff plans, one description per line. Each line contains four integers l_ i , r_ i , c_ i , p_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 n , 1 \u2264 c_ i, p_ i \u2264 10^ 6 ) , where l_ i and r_ i are starting and finishing days of the i - th tariff plan, c_ i \u2014 number of cores, p_ i \u2014 price of a single core for daily rent on the i - th tariff plan.",
    "output": "Print a single integer number \u2014 the minimal amount of money that Buber will pay.",
    "note": "",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "1070C"
  },
  {
    "title": "Berkomnadzor",
    "url": "https://codeforces.com/problemset/problem/1070/B",
    "history": "Berkomnadzor \u2014 Federal Service for Supervision of Communications, Information Technology and Mass Media \u2014 is a Berland federal executive body that protects ordinary residents of Berland from the threats of modern internet. Berkomnadzor maintains a list of prohibited IPv4 subnets ( blacklist) and a list of allowed IPv4 subnets ( whitelist) . All Internet Service Providers ( ISPs) in Berland must configure the network equipment to block access to all IPv4 addresses matching the blacklist. Also ISPs must provide access ( that is, do not block) to all IPv4 addresses matching the whitelist. If an IPv4 address does not match either of those lists, it' s up to the ISP to decide whether to block it or not. An IPv4 address matches the blacklist ( whitelist) if and only if it matches some subnet from the blacklist ( whitelist) . An IPv4 address can belong to a whitelist and to a blacklist at the same time, this situation leads to a contradiction ( see no solution case in the output description) . An IPv4 address is a 32- bit unsigned integer written in the form a. b. c. d , where each of the values a, b, c, d is called an octet and is an integer from 0 to 255 written in decimal notation. For example, IPv4 address 192. 168. 0. 1 can be converted to a 32- bit number using the following expression 192 \u00b7 2^ 24 + 168 \u00b7 2^ 16 + 0 \u00b7 2^ 8 + 1 \u00b7 2^ 0 . First octet a encodes the most significant ( leftmost) 8 bits, the octets b and c \u2014 the following blocks of 8 bits ( in this order) , and the octet d encodes the least significant ( rightmost) 8 bits. The IPv4 network in Berland is slightly different from the rest of the world. There are no reserved or internal addresses in Berland and use all 2^ 32 possible values. An IPv4 subnet is represented either as a. b. c. d or as a. b. c. d/ x ( where 0 \u2264 x \u2264 32 ) . A subnet a. b. c. d contains a single address a. b. c. d . A subnet a. b. c. d/ x contains all IPv4 addresses with x leftmost ( most significant) bits equal to x leftmost bits of the address a. b. c. d . It is required that 32 - x rightmost ( least significant) bits of subnet a. b. c. d/ x are zeroes. Naturally it happens that all addresses matching subnet a. b. c. d/ x form a continuous range. The range starts with address a. b. c. d ( its rightmost 32 - x bits are zeroes) . The range ends with address which x leftmost bits equal to x leftmost bits of address a. b. c. d , and its 32 - x rightmost bits are all ones. Subnet contains exactly 2^ 32- x addresses. Subnet a. b. c. d/ 32 contains exactly one address and can also be represented by just a. b. c. d . For example subnet 192. 168. 0. 0/ 24 contains range of 256 addresses. 192. 168. 0. 0 is the first address of the range, and 192. 168. 0. 255 is the last one. Berkomnadzor' s engineers have devised a plan to improve performance of Berland' s global network. Instead of maintaining both whitelist and blacklist they want to build only a single optimised blacklist containing minimal number of subnets. The idea is to block all IPv4 addresses matching the optimised blacklist and allow all the rest addresses. Of course, IPv4 addresses from the old blacklist must remain blocked and all IPv4 addresses from the old whitelist must still be allowed. Those IPv4 addresses which matched neither the old blacklist nor the old whitelist may be either blocked or allowed regardless of their accessibility before. Please write a program which takes blacklist and whitelist as input and produces optimised blacklist. The optimised blacklist must contain the minimal possible number of subnets and satisfy all IPv4 addresses accessibility requirements mentioned above. IPv4 subnets in the source lists may intersect arbitrarily. Please output a single number - 1 if some IPv4 address matches both source whitelist and blacklist.",
    "input": "The first line of the input contains single integer n ( 1 \u2264 n \u2264 2\u00b710^ 5 ) \u2014 total number of IPv4 subnets in the input. The following n lines contain IPv4 subnets. Each line starts with either ' - ' or ' + ' sign, which indicates if the subnet belongs to the blacklist or to the whitelist correspondingly. It is followed, without any spaces, by the IPv4 subnet in a. b. c. d or a. b. c. d/ x format ( 0 \u2264 x \u2264 32 ) . The blacklist always contains at least one subnet. All of the IPv4 subnets given in the input are valid. Integer numbers do not start with extra leading zeroes. The provided IPv4 subnets can intersect arbitrarily.",
    "output": "Output - 1, if there is an IPv4 address that matches both the whitelist and the blacklist. Otherwise output t \u2014 the length of the optimised blacklist, followed by t subnets, with each subnet on a new line. Subnets may be printed in arbitrary order. All addresses matching the source blacklist must match the optimised blacklist. All addresses matching the source whitelist must not match the optimised blacklist. You can print a subnet a. b. c. d/ 32 in any of two ways: as a. b. c. d/ 32 or as a. b. c. d . If there is more than one solution, output any.",
    "note": "",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "1070B"
  },
  {
    "title": "Binary Numbers AND Sum",
    "url": "https://codeforces.com/problemset/problem/1066/E",
    "history": "You are given two huge binary integer numbers a and b of lengths n and m respectively. You will repeat the following process: if b > 0 , then add to the answer the value a & b and divide b by 2 rounding down ( i. e. remove the last digit of b ) , and repeat the process again, otherwise stop the process. The value a & b means bitwise AND of a and b . Your task is to calculate the answer modulo 998244353 . Note that you should add the value a & b to the answer in decimal notation, not in binary. So your task is to calculate the answer in decimal notation. For example, if a = 1010_ 2 ( 10_ 10) and b = 1000_ 2 ( 8_ 10) , then the value a & b will be equal to 8 , not to 1000 .",
    "input": "The first line of the input contains two integers n and m ( 1 \u2264 n, m \u2264 2 \u00b7 10^ 5 ) \u2014 the length of a and the length of b correspondingly. The second line of the input contains one huge integer a . It is guaranteed that this number consists of exactly n zeroes and ones and the first digit is always 1 . The third line of the input contains one huge integer b . It is guaranteed that this number consists of exactly m zeroes and ones and the first digit is always 1 .",
    "output": "Print the answer to this problem in decimal notation modulo 998244353 .",
    "note": "The algorithm for the first example: add to the answer 1010_ 2 & 1101_ 2 = 1000_ 2 = 8_ 10 and set b : = 110 ; add to the answer 1010_ 2 & 110_ 2 = 10_ 2 = 2_ 10 and set b : = 11 ; add to the answer 1010_ 2 & 11_ 2 = 10_ 2 = 2_ 10 and set b : = 1 ; add to the answer 1010_ 2 & 1_ 2 = 0_ 2 = 0_ 10 and set b : = 0 . So the answer is 8 + 2 + 2 + 0 = 12 . The algorithm for the second example: add to the answer 1001_ 2 & 10101_ 2 = 1_ 2 = 1_ 10 and set b : = 1010 ; add to the answer 1001_ 2 & 1010_ 2 = 1000_ 2 = 8_ 10 and set b : = 101 ; add to the answer 1001_ 2 & 101_ 2 = 1_ 2 = 1_ 10 and set b : = 10 ; add to the answer 1001_ 2 & 10_ 2 = 0_ 2 = 0_ 10 and set b : = 1 ; add to the answer 1001_ 2 & 1_ 2 = 1_ 2 = 1_ 10 and set b : = 0 . So the answer is 1 + 8 + 1 + 0 + 1 = 11 .",
    "topics": [
      "data structures",
      "implementation",
      "math"
    ],
    "id": "1066E"
  },
  {
    "title": "String Journey",
    "url": "https://codeforces.com/problemset/problem/1063/F",
    "history": "We call a sequence of strings t1, . . . , tk a journey of length k, if for each i > 1 ti is a substring of ti - 1 and length of ti is strictly less than length of ti - 1. For example, ab, b is a journey, but ab, c and a, a are not. Define a journey on string s as journey t1, . . . , tk, such that all its parts can be nested inside s in such a way that there exists a sequence of strings u1, . . . , uk + 1 ( each of these strings can be empty) and s = u1 t1 u2 t2. . . uk tk uk + 1. As an example, ab, b is a journey on string abb, but not on bab because the journey strings ti should appear from the left to the right. The length of a journey on a string is the number of strings in it. Determine the maximum possible length of a journey on the given string s.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 500 000) \u2014 the length of string s. The second line contains the string s itself, consisting of n lowercase Latin letters.",
    "output": "Print one number \u2014 the maximum possible length of string journey on s.",
    "note": "In the first sample, the string journey of maximum length is abcd, bc, c. In the second sample, one of the suitable journeys is bb, b.",
    "topics": [
      "data structures",
      "dp",
      "string suffix structures"
    ],
    "id": "1063F"
  },
  {
    "title": "Company",
    "url": "https://codeforces.com/problemset/problem/1062/E",
    "history": "The company X has n employees numbered from 1 through n . Each employee u has a direct boss p_ u ( 1 \u2264 p_ u \u2264 n ) , except for the employee 1 who has no boss. It is guaranteed, that values p_ i form a tree. Employee u is said to be in charge of employee v if u is the direct boss of v or there is an employee w such that w is in charge of v and u is the direct boss of w . Also, any employee is considered to be in charge of himself. In addition, for each employee u we define it' s level lv( u) as follow: lv( 1) = 0 lv( u) = lv( p_ u) + 1 for u = \u0338 1 In the near future, there are q possible plans for the company to operate. The i - th plan consists of two integers l_ i and r_ i , meaning that all the employees in the range [ l_ i, r_ i] , and only they, are involved in this plan. To operate the plan smoothly, there must be a project manager who is an employee in charge of all the involved employees. To be precise, if an employee u is chosen as the project manager for the i - th plan then for every employee v \u2208 [ l_ i, r_ i] , u must be in charge of v . Note, that u is not necessary in the range [ l_ i, r_ i] . Also, u is always chosen in such a way that lv( u) is as large as possible ( the higher the level is, the lower the salary that the company has to pay the employee) . Before any plan is operated, the company has JATC take a look at their plans. After a glance, he tells the company that for every plan, it' s possible to reduce the number of the involved employees exactly by one without affecting the plan. Being greedy, the company asks JATC which employee they should kick out of the plan so that the level of the project manager required is as large as possible. JATC has already figured out the answer and challenges you to do the same.",
    "input": "The first line contains two integers n and q ( 2 \u2264 n \u2264 100 000 , 1 \u2264 q \u2264 100 000 ) \u2014 the number of employees and the number of plans, respectively. The second line contains n- 1 integers p_ 2, p_ 3, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) meaning p_ i is the direct boss of employee i . It is guaranteed, that values p_ i form a directed tree with the root of 1 . Each of the following q lines contains two integers l_ i and r_ i ( 1 \u2264 l_ i< r_ i \u2264 n ) \u2014 the range of the employees, involved in the corresponding plan.",
    "output": "Print q lines, each containing two integers \u2014 the number of the employee which should be kicked from the corresponding plan and the maximum possible level of the project manager in that case. If there are more than one way to choose that employee, print any of them.",
    "note": "In the example: In the first query, we can choose whether 4 or 5 or 6 and the project manager will be 3 . In the second query, if we choose any employee other than the employee 8 , the project manager will be 1 . If we choose 8 , the project manager will be 3 . Since lv( 3) = 1 > lv( 1) = 0 , choosing 8 is the best strategy. In the third query, no matter how we choose the employee, the project manager will always be 1 . In the fourth query, if we choose 9 or 10 then the project manager will be 3 . If we choose 11 then the project manager will be 7 . Since lv( 7) = 3> lv( 3) = 1 , we choose 11 as the answer.",
    "topics": [
      "binary search",
      "data structures",
      "dfs and similar",
      "greedy",
      "trees"
    ],
    "id": "1062E"
  },
  {
    "title": "TV Shows",
    "url": "https://codeforces.com/problemset/problem/1061/D",
    "history": "There are n TV shows you want to watch. Suppose the whole time is split into equal parts called \" minutes\" . The i - th of the shows is going from l_ i - th to r_ i - th minute, both ends inclusive. You need a TV to watch a TV show and you can' t watch two TV shows which air at the same time on the same TV, so it is possible you will need multiple TVs in some minutes. For example, if segments [ l_ i, r_ i] and [ l_ j, r_ j] intersect, then shows i and j can' t be watched simultaneously on one TV. Once you start watching a show on some TV it is not possible to \" move\" it to another TV ( since it would be too distracting) , or to watch another show on the same TV until this show ends. There is a TV Rental shop near you. It rents a TV for x rupees, and charges y ( y < x ) rupees for every extra minute you keep the TV. So in order to rent a TV for minutes [ a; b] you will need to pay x + y \u00b7 ( b - a) . You can assume, that taking and returning of the TV doesn' t take any time and doesn' t distract from watching other TV shows. Find the minimum possible cost to view all shows. Since this value could be too large, print it modulo 10^ 9 + 7 .",
    "input": "The first line contains integers n , x and y ( 1 \u2264 n \u2264 10^ 5 , 1 \u2264 y < x \u2264 10^ 9 ) \u2014 the number of TV shows, the cost to rent a TV for the first minute and the cost to rent a TV for every subsequent minute. Each of the next n lines contains two integers l_ i and r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 10^ 9 ) denoting the start and the end minute of the i - th TV show.",
    "output": "Print exactly one integer \u2014 the minimum cost to view all the shows taken modulo 10^ 9 + 7 .",
    "note": "In the first example, the optimal strategy would be to rent 3 TVs to watch: Show [ 1, 2] on the first TV, Show [ 4, 10] on the second TV, Shows [ 2, 4] , [ 5, 9] , [ 10, 11] on the third TV. This way the cost for the first TV is 4 + 3 \u00b7 ( 2 - 1) = 7 , for the second is 4 + 3 \u00b7 ( 10 - 4) = 22 and for the third is 4 + 3 \u00b7 ( 11 - 2) = 31 , which gives 60 int total. In the second example, it is optimal watch each show on a new TV. In third example, it is optimal to watch both shows on a new TV. Note that the answer is to be printed modulo 10^ 9 + 7 .",
    "topics": [
      "data structures",
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "1061D"
  },
  {
    "title": "Multiplicity",
    "url": "https://codeforces.com/problemset/problem/1061/C",
    "history": "You are given an integer array a_ 1, a_ 2, . . . , a_ n . The array b is called to be a subsequence of a if it is possible to remove some elements from a to get b . Array b_ 1, b_ 2, . . . , b_ k is called to be good if it is not empty and for every i ( 1 \u2264 i \u2264 k ) b_ i is divisible by i . Find the number of good subsequences in a modulo 10^ 9 + 7 . Two subsequences are considered different if index sets of numbers included in them are different. That is, the values \u200bof the elements \u200bdo not matter in the comparison of subsequences. In particular, the array a has exactly 2^ n - 1 different subsequences ( excluding an empty subsequence) .",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 100 000 ) \u2014 the length of the array a . The next line contains integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 6 ) .",
    "output": "Print exactly one integer \u2014 the number of good subsequences taken modulo 10^ 9 + 7 .",
    "note": "In the first example, all three non- empty possible subsequences are good: { 1} , { 1, 2} , { 2} In the second example, the possible good subsequences are: { 2} , { 2, 2} , { 2, 22} , { 2, 14} , { 2} , { 2, 22} , { 2, 14} , { 1} , { 1, 22} , { 1, 14} , { 22} , { 22, 14} , { 14} . Note, that some subsequences are listed more than once, since they occur in the original array multiple times.",
    "topics": [
      "data structures",
      "dp",
      "implementation",
      "math",
      "number theory"
    ],
    "id": "1061C"
  },
  {
    "title": "Balls and Pockets",
    "url": "https://codeforces.com/problemset/problem/1060/G",
    "history": "There is a strip with an infinite number of cells. Cells are numbered starting with 0 . Initially the cell i contains a ball with the number i . There are n pockets located at cells a_ 1, . . . , a_ n . Each cell contains at most one pocket. Filtering is the following sequence of operations: All pockets at cells a_ 1, . . . , a_ n open simultaneously, which makes balls currently located at those cells disappear. After the balls disappear, the pockets close again. For each cell i from 0 to \u221e , if the cell i contains a ball, we move that ball to the free cell j with the lowest number. If there is no free cell j < i , the ball stays at the cell i . Note that after each filtering operation each cell will still contain exactly one ball. For example, let the cells 1 , 3 and 4 contain pockets. The initial configuration of balls is shown below ( underscores display the cells with pockets) : 0 1 2 3 4 5 6 7 8 9 . . . After opening and closing the pockets, balls 1, 3 and 4 disappear: 0 2 5 6 7 8 9 . . . After moving all the balls to the left, the configuration looks like this: 0 2 5 6 7 8 9 10 11 12 . . . Another filtering repetition results in the following: 0 5 8 9 10 11 12 13 14 15 . . . You have to answer m questions. The i - th of these questions is \" what is the number of the ball located at the cell x_ i after k_ i repetitions of the filtering operation? \"",
    "input": "The first line contains two integers n and m \u2014 the number of pockets and questions respectively ( 1 \u2264 n, m \u2264 10^ 5 ) . The following line contains n integers a_ 1, . . . , a_ n \u2014 the numbers of cells containing pockets ( 0 \u2264 a_ 1 < . . . < a_ n \u2264 10^ 9 ) . The following m lines describe questions. The i - th of these lines contains two integers x_ i and k_ i ( 0 \u2264 x_ i, k_ i \u2264 10^ 9 ) .",
    "output": "Print m numbers \u2014 answers to the questions, in the same order as given in the input.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": "1060G"
  },
  {
    "title": "Split the Tree",
    "url": "https://codeforces.com/problemset/problem/1059/E",
    "history": "You are given a rooted tree on n vertices, its root is the vertex number 1 . The i - th vertex contains a number w_ i . Split it into the minimum possible number of vertical paths in such a way that each path contains no more than L vertices and the sum of integers w_ i on each path does not exceed S . Each vertex should belong to exactly one path. A vertical path is a sequence of vertices v_ 1, v_ 2, . . . , v_ k where v_ i ( i \u2265 2 ) is the parent of v_ i - 1 .",
    "input": "The first line contains three integers n , L , S ( 1 \u2264 n \u2264 10^ 5 , 1 \u2264 L \u2264 10^ 5 , 1 \u2264 S \u2264 10^ 18 ) \u2014 the number of vertices, the maximum number of vertices in one path and the maximum sum in one path. The second line contains n integers w_ 1, w_ 2, . . . , w_ n ( 1 \u2264 w_ i \u2264 10^ 9 ) \u2014 the numbers in the vertices of the tree. The third line contains n - 1 integers p_ 2, . . . , p_ n ( 1 \u2264 p_ i < i ) , where p_ i is the parent of the i - th vertex in the tree.",
    "output": "Output one number \u2014 the minimum number of vertical paths. If it is impossible to split the tree, output - 1 .",
    "note": "In the first sample the tree is split into { 1} , { 2} , { 3} . In the second sample the tree is split into { 1, 2} , { 3} or { 1, 3} , { 2} . In the third sample it is impossible to split the tree.",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "greedy",
      "trees"
    ],
    "id": "1059E"
  },
  {
    "title": "Detect Robots",
    "url": "https://codeforces.com/problemset/problem/1056/H",
    "history": "You successfully found poor Arkady near the exit of the station you' ve perfectly predicted. You sent him home on a taxi and suddenly came up with a question. There are n crossroads in your city and several bidirectional roads connecting some of them. A taxi ride is a path from some crossroads to another one without passing the same crossroads twice. You have a collection of rides made by one driver and now you wonder if this driver can be a robot or they are definitely a human. You think that the driver can be a robot if for every two crossroads a and b the driver always chooses the same path whenever he drives from a to b . Note that a and b here do not have to be the endpoints of a ride and that the path from b to a can be different. On the contrary, if the driver ever has driven two different paths from a to b , they are definitely a human. Given the system of roads and the description of all rides available to you, determine if the driver can be a robot or not.",
    "input": "Each test contains one or more test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 3 \u00b7 10^ 5 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 3 \u00b7 10^ 5 ) \u2014 the number of crossroads in the city. The next line contains a single integer q ( 1 \u2264 q \u2264 3 \u00b7 10^ 5 ) \u2014 the number of rides available to you. Each of the following q lines starts with a single integer k ( 2 \u2264 k \u2264 n ) \u2014 the number of crossroads visited by the driver on this ride. It is followed by k integers c_ 1 , c_ 2 , . . . , c_ k ( 1 \u2264 c_ i \u2264 n ) \u2014 the crossroads in the order the driver visited them. It is guaranteed that all crossroads in one ride are distinct. It is guaranteed that the sum of values k among all rides of all test cases does not exceed 3 \u00b7 10^ 5 . It is guaranteed that the sum of values n and the sum of values q doesn' t exceed 3 \u00b7 10^ 5 among all test cases.",
    "output": "Output a single line for each test case. If the driver can be a robot, output \" Robot\" in a single line. Otherwise, output \" Human\" . You can print each letter in any case ( upper or lower) .",
    "note": "In the first example it is clear that the driver used two different ways to get from crossroads 1 to crossroads 3 . It must be a human. In the second example the driver always drives the cycle 1 \u2192 2 \u2192 3 \u2192 4 \u2192 1 until he reaches destination.",
    "topics": [
      "data structures",
      "strings"
    ],
    "id": "1056H"
  },
  {
    "title": "Take Metro",
    "url": "https://codeforces.com/problemset/problem/1056/G",
    "history": "Having problems with tram routes in the morning, Arkady decided to return home by metro. Fortunately for Arkady, there is only one metro line in the city. Unfortunately for Arkady, the line is circular. It means that the stations are enumerated from 1 to n and there is a tunnel between any pair of consecutive stations as well as between the station 1 and the station n . Trains that go in clockwise direction visit the stations in order 1 \u2192 2 \u2192 3 \u2192. . . \u2192 n \u2192 1 while the trains that go in the counter- clockwise direction visit the stations in the reverse order. The stations that have numbers from 1 to m have interior mostly in red colors while the stations that have numbers from m + 1 to n have blue interior. Arkady entered the metro at station s and decided to use the following algorithm to choose his way home. Initially he has a positive integer t in his mind. If the current station has red interior, he takes a clockwise- directed train, otherwise he takes a counter- clockwise- directed train. He rides exactly t stations on the train and leaves the train. He decreases t by one. If t is still positive, he returns to step 2 . Otherwise he exits the metro. You have already realized that this algorithm most probably won' t bring Arkady home. Find the station he will exit the metro at so that you can continue helping him.",
    "input": "The first line contains two integers n and m ( 3 \u2264 n \u2264 10^ 5 , 1 \u2264 m < n ) \u2014 the total number of stations and the number of stations that have red interior. The second line contains two integers s and t ( 1 \u2264 s \u2264 n , 1 \u2264 t \u2264 10^ 12 ) \u2014 the starting station and the initial value of t .",
    "output": "Output the only integer \u2014 the station where Arkady will exit the metro.",
    "note": "Consider the first example. There are 10 stations and the first 4 of them are red. Arkady starts at station 3 with value t = 1 , so just rides 1 station in clockwise direction and ends up on the station 4 . In the second example the metro is same as in the first example, but Arkady starts at station 3 with value t = 5 . It is a red station so he rides 5 stations in clockwise direction and leaves the train at station 8 . It is a blue station, so he rides 4 stations in counter- clockwise direction and leaves at station 4 . It is a red station, so he rides 3 stations in clockwise direction and leaves at station 7 . It is a blue station, so he rides 2 stations in counter- clockwise direction and leaves at station 5 . It is a blue station, so he rides 1 station in counter- clockwise direction and leaves at station 4 . Now t = 0 , so Arkady exits metro at the station 4 .",
    "topics": [
      "brute force",
      "data structures",
      "graphs"
    ],
    "id": "1056G"
  },
  {
    "title": "Check Transcription",
    "url": "https://codeforces.com/problemset/problem/1056/E",
    "history": "One of Arkady' s friends works at a huge radio telescope. A few decades ago the telescope has sent a signal s towards a faraway galaxy. Recently they' ve received a response t which they believe to be a response from aliens! The scientists now want to check if the signal t is similar to s . The original signal s was a sequence of zeros and ones ( everyone knows that binary code is the universe- wide language) . The returned signal t , however, does not look as easy as s , but the scientists don' t give up! They represented t as a sequence of English letters and say that t is similar to s if you can replace all zeros in s with some string r_ 0 and all ones in s with some other string r_ 1 and obtain t . The strings r_ 0 and r_ 1 must be different and non- empty. Please help Arkady' s friend and find the number of possible replacements for zeros and ones ( the number of pairs of strings r_ 0 and r_ 1 ) that transform s to t .",
    "input": "The first line contains a string s ( 2 \u2264 | s| \u2264 10^ 5 ) consisting of zeros and ones \u2014 the original signal. The second line contains a string t ( 1 \u2264 | t| \u2264 10^ 6 ) consisting of lowercase English letters only \u2014 the received signal. It is guaranteed, that the string s contains at least one ' 0' and at least one ' 1' .",
    "output": "Print a single integer \u2014 the number of pairs of strings r_ 0 and r_ 1 that transform s to t . In case there are no such pairs, print 0 .",
    "note": "In the first example, the possible pairs ( r_ 0, r_ 1) are as follows: \" a\" , \" aaaaa\" \" aa\" , \" aaaa\" \" aaaa\" , \" aa\" \" aaaaa\" , \" a\" The pair \" aaa\" , \" aaa\" is not allowed, since r_ 0 and r_ 1 must be different. In the second example, the following pairs are possible: \" ko\" , \" kokotlin\" \" koko\" , \" tlin\"",
    "topics": [
      "brute force",
      "data structures",
      "hashing",
      "strings"
    ],
    "id": "1056E"
  },
  {
    "title": "Distinctification",
    "url": "https://codeforces.com/problemset/problem/1051/G",
    "history": "Suppose you are given a sequence S of k pairs of integers ( a_ 1, b_ 1) , ( a_ 2, b_ 2) , . . . , ( a_ k, b_ k) . You can perform the following operations on it: Choose some position i and increase a_ i by 1 . That can be performed only if there exists at least one such position j that i j and a_ i = a_ j . The cost of this operation is b_ i ; Choose some position i and decrease a_ i by 1 . That can be performed only if there exists at least one such position j that a_ i = a_ j + 1 . The cost of this operation is - b_ i . Each operation can be performed arbitrary number of times ( possibly zero) . Let f( S) be minimum possible x such that there exists a sequence of operations with total cost x , after which all a_ i from S are pairwise distinct. Now for the task itself . . . You are given a sequence P consisting of n pairs of integers ( a_ 1, b_ 1) , ( a_ 2, b_ 2) , . . . , ( a_ n, b_ n) . All b_ i are pairwise distinct. Let P_ i be the sequence consisting of the first i pairs of P . Your task is to calculate the values of f( P_ 1) , f( P_ 2) , . . . , f( P_ n) .",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of pairs in sequence P . Next n lines contain the elements of P : i - th of the next n lines contains two integers a_ i and b_ i ( 1 \u2264 a_ i \u2264 2 \u00b7 10^ 5 , 1 \u2264 b_ i \u2264 n ) . It is guaranteed that all values of b_ i are pairwise distinct.",
    "output": "Print n integers \u2014 the i - th number should be equal to f( P_ i) .",
    "note": "",
    "topics": [
      "data structures",
      "dsu",
      "greedy"
    ],
    "id": "1051G"
  },
  {
    "title": "Vasya and Big Integers",
    "url": "https://codeforces.com/problemset/problem/1051/E",
    "history": "Vasya owns three big integers \u2014 a, l, r . Let' s define a partition of x such a sequence of strings s_ 1, s_ 2, . . . , s_ k that s_ 1 + s_ 2 + . . . + s_ k = x , where + is a concatanation of strings. s_ i is the i - th element of the partition. For example, number 12345 has the following partitions: [ \" 1\" , \" 2\" , \" 3\" , \" 4\" , \" 5\" ] , [ \" 123\" , \" 4\" , \" 5\" ] , [ \" 1\" , \" 2345\" ] , [ \" 12345\" ] and lots of others. Let' s call some partition of a beautiful if each of its elements contains no leading zeros. Vasya want to know the number of beautiful partitions of number a , which has each of s_ i satisfy the condition l \u2264 s_ i \u2264 r . Note that the comparison is the integer comparison, not the string one. Help Vasya to count the amount of partitions of number a such that they match all the given requirements. The result can be rather big, so print it modulo 998244353 .",
    "input": "The first line contains a single integer a ( 1 \u2264 a \u2264 10^ 1000000) . The second line contains a single integer l ( 0 \u2264 l \u2264 10^ 1000000) . The third line contains a single integer r ( 0 \u2264 r \u2264 10^ 1000000) . It is guaranteed that l \u2264 r . It is also guaranteed that numbers a, l, r contain no leading zeros.",
    "output": "Print a single integer \u2014 the amount of partitions of number a such that they match all the given requirements modulo 998244353 .",
    "note": "In the first test case, there are two good partitions 13+ 5 and 1+ 3+ 5 . In the second test case, there is one good partition 1+ 0+ 0+ 0+ 0 .",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "hashing",
      "strings"
    ],
    "id": "1051E"
  },
  {
    "title": "Moonwalk challenge",
    "url": "https://codeforces.com/problemset/problem/1045/J",
    "history": "Since astronauts from BubbleCup XI mission finished their mission on the Moon and are big fans of famous singer, they decided to spend some fun time before returning to the Earth and hence created a so called \" Moonwalk challenge\" game. Teams of astronauts are given the map of craters on the Moon and direct bidirectional paths from some craters to others that are safe for \" Moonwalking\" . Each of those direct paths is colored in one color and there is unique path between each two craters. Goal of the game is to find two craters such that given array of colors appears most times as continuous subarray on the path between those two craters ( overlapping appearances should be counted) . To help your favorite team win, you should make a program that, given the map, answers the queries of the following type: For two craters and array of colors answer how many times given array appears as continuous subarray on the path from the first crater to the second. Colors are represented as lowercase English alphabet letters.",
    "input": "In the first line, integer N ( 2 \u2264 N \u2264 10^ 5) \u2014 number of craters on the Moon. Craters are numerated with numbers 1 to N . In next N- 1 lines, three values u, v, L ( 1 \u2264 u, v \u2264 N, L \u2208{ a, . . . , z} ) \u2014 denoting that there is a direct path with color L between craters u and v . Next line contains integer Q ( 1 \u2264 Q \u2264 10^ 5) \u2014 number of queries. Next Q lines contain three values u, v ( 1 \u2264 u, v \u2264 N) and S ( | S| \u2264 100) , where u and v are the two cratersfor which you should find how many times array of colors S ( represented as string) appears on the path from u to v .",
    "output": "For each query output one number that represents number of occurrences of array S on the path from u to v .",
    "note": "",
    "topics": [
      "data structures",
      "strings",
      "trees"
    ],
    "id": "1045J"
  },
  {
    "title": "AI robots",
    "url": "https://codeforces.com/problemset/problem/1045/G",
    "history": "In the last mission, MDCS has successfully shipped N AI robots to Mars. Before they start exploring, system initialization is required so they are arranged in a line. Every robot can be described with three numbers: position ( x_ i ) , radius of sight ( r_ i ) and IQ ( q_ i ) . Since they are intelligent robots, some of them will talk if they see each other. Radius of sight is inclusive, so robot can see other all robots in range [ x_ i - r_ i, x_ i + r_ i] . But they don' t walk to talk with anybody, but only with robots who have similar IQ. By similar IQ we mean that their absolute difference isn' t more than K . Help us and calculate how many pairs of robots are going to talk with each other, so we can timely update their software and avoid any potential quarrel.",
    "input": "The first line contains two integers, numbers N ( 1 \u2264 N \u2264 10^ 5) and K ( 0 \u2264 K \u2264 20) . Next N lines contain three numbers each x_ i, r_ i, q_ i ( 0 \u2264 x_ i, r_ i, q_ i \u2264 10^ 9) \u2014 position, radius of sight and IQ of every robot respectively.",
    "output": "Output contains only one number \u2014 solution to the problem.",
    "note": "The first robot can see the second, but not vice versa. The first robot can' t even see the third. The second and the third robot can see each other and their IQs don' t differ more than 2 so only one conversation will happen.",
    "topics": [
      "data structures"
    ],
    "id": "1045G"
  },
  {
    "title": "Last chance",
    "url": "https://codeforces.com/problemset/problem/1045/A",
    "history": "It is the year 2969. 1000 years have passed from the moon landing. Meanwhile, the humanity colonized the HyperspaceTM and lived in harmony. Until we realized that we were not alone. Not too far away from the Earth, the massive fleet of aliens' spaceships is preparing to attack the Earth. For the first time in a while, the humanity is in real danger. Crisis and panic are everywhere. The scientists from all around the solar system have met and discussed the possible solutions. However, no progress has been made. The Earth' s last hope is YOU! Fortunately, the Earth is equipped with very powerful defense systems made by MDCS. There are N aliens' spaceships which form the line. The defense system consists of three types of weapons: SQL rockets \u2013 every SQL rocket can destroy at most one spaceship in the given set. Cognition beams \u2013 every Cognition beam has an interval [ l, r] and can destroy at most one spaceship in that interval. OMG bazooka \u2013 every OMG bazooka has three possible targets, however, each bazooka can destroy either zero or exactly two spaceships. In addition, due to the smart targeting system, the sets of the three possible targets of any two different OMG bazookas are disjoint ( that means that every ship is targeted with at most one OMG bazooka) . Your task is to make a plan of the attack which will destroy the largest possible number of spaceships. Every destroyed spaceship should be destroyed with exactly one weapon.",
    "input": "The first line contains two integers: the number of your weapons N ( 1\u2264 N\u2264 5000) and the number of spaceships M ( 1\u2264 M\u2264 5000) . In the next N lines, each line starts with one integer that represents type ( either 0, 1 or 2) . If the type is 0, then the weapon is SQL rocket, the rest of the line contains strictly positive number K ( \u2211K\u2264 100 000) and array k_ i ( 1\u2264 k_ i\u2264 M) of K integers. If the type is 1, then the weapon is Cognition beam, the rest of the line contains integers l and r ( 1\u2264 l\u2264 r\u2264 M) . If the type is 2 then the weapon is OMG bazooka, the rest of the line contains distinct numbers a , b and c ( 1 \u2264 a, b, c \u2264 M) .",
    "output": "The first line should contain the maximum number of destroyed spaceships \u2014 X . In the next X lines, every line should contain two numbers A and B , where A is an index of the weapon and B is an index of the spaceship which was destroyed by the weapon A .",
    "note": "SQL rocket can destroy only 4th spaceship. OMG Bazooka can destroy two of 1st, 4th or 5th spaceship, and Cognition beam can destroy any spaceship from the interval [ 1, 4] . The maximum number of destroyed spaceship is 4, and one possible plan is that SQL rocket should destroy 4th spaceship, OMG bazooka should destroy 1st and 5th spaceship and Cognition beam should destroy 2nd spaceship.",
    "topics": [
      "data structures",
      "flows",
      "graph matchings",
      "graphs",
      "trees"
    ],
    "id": "1045A"
  },
  {
    "title": "DFS",
    "url": "https://codeforces.com/problemset/problem/1044/F",
    "history": "Let T be a tree on n vertices. Consider a graph G_ 0 , initially equal to T . You are given a sequence of q updates, where the i - th update is given as a pair of two distinct integers u_ i and v_ i . For every i from 1 to q , we define the graph G_ i as follows: If G_ i- 1 contains an edge { u_ i, v_ i} , then remove this edge to form G_ i . Otherwise, add this edge to G_ i- 1 to form G_ i . Formally, G_ i : = G_ i- 1{ { u_ i, v_ i} } where denotes the set symmetric difference. Furthermore, it is guaranteed that T is always a subgraph of G_ i . In other words, an update never removes an edge of T . Consider a connected graph H and run a depth- first search on it. One can see that the tree edges ( i. e. the edges leading to a not yet visited vertex at the time of traversal) form a spanning tree of the graph H . This spanning tree is not generally fixed for a particular graph \u2014 it depends on the starting vertex, and on the order in which the neighbors of each vertex are traversed. We call vertex w good if one can order the neighbors of each vertex in such a way that the depth- first search started from w produces T as the spanning tree. For every i from 1 to q , find and report the number of good vertices.",
    "input": "The first line contains two integers n and q ( 3 \u2264 n \u2264 2\u00b7 10^ 5 , 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of nodes and the number of updates, respectively. Each of the next n- 1 lines contains two integers u and v ( 1 \u2264 u, v \u2264 n , u v ) \u2014 vertices connected by an edge in T . It is guaranteed that this graph is a tree. Each of the next q lines contains two integers u and v ( 1 \u2264 u, v \u2264 n , u v ) \u2014 the endpoints of the edge that is added or removed. It is guaranteed that this edge does not belong to T .",
    "output": "For each update, print one integer k \u2014 the number of good vertices w after the corresponding update.",
    "note": "The first sample is depicted in the following figure. After the first update, G contains all three possible edges. The result of a DFS is as follows: Let the starting vertex be 1 . We have two choices of ordering the neighbors of 1 , either [ 2, 3] or [ 3, 2] . If we choose the former, then we reach vertex 2 . Regardless of the ordering of its neighbors, the next visited vertex will be 3 . Thus, the spanning tree generated by this DFS will contain edges { 1, 2} and { 2, 3} , which does not equal to T . If we choose the latter, we obtain a spanning tree with edges { 1, 3} and { 2, 3} . Hence, there is no way of ordering the neighbors of vertices such that the DFS produces T , and subsequently 1 is not a good vertex. Let the starting vertex be 2 . We have two choices of traversing its neighbors. If we visit 3 first, then the spanning tree will consist of edges { 2, 3} and { 1, 3} , which is not equal to T . If we, however, visit 1 first, then we can only continue to 3 from here, and the spanning tree will consist of edges { 1, 2} and { 1, 3} , which equals to T . Hence, 2 is a good vertex. The case when we start in the vertex 3 is symmetrical to starting in 2 , and hence 3 is a good vertex. Therefore, the answer is 2 . After the second update, the edge between 2 and 3 is removed, and G = T . It follows that the spanning tree generated by DFS will be always equal to T independent of the choice of the starting vertex. Thus, the answer is 3 . In the second sample, the set of good vertices after the corresponding query is: { 2, 3, 5} { 3, 5} { 3, 4, 5} { 4, 5} { 4, 5, 6} { 5, 6}",
    "topics": [
      "data structures"
    ],
    "id": "1044F"
  },
  {
    "title": "Deduction Queries",
    "url": "https://codeforces.com/problemset/problem/1044/D",
    "history": "There is an array a of 2^ 30 integers, indexed from 0 to 2^ 30- 1 . Initially, you know that 0 \u2264 a_ i < 2^ 30 ( 0 \u2264 i < 2^ 30 ) , but you do not know any of the values. Your task is to process queries of two types: 1 l r x: You are informed that the bitwise xor of the subarray [ l, r] ( ends inclusive) is equal to x . That is, a_ l \u2295 a_ l+ 1\u2295. . . \u2295 a_ r- 1\u2295 a_ r = x , where \u2295 is the bitwise xor operator. In some cases, the received update contradicts past updates. In this case, you should ignore the contradicting update ( the current update) . 2 l r: You are asked to output the bitwise xor of the subarray [ l, r] ( ends inclusive) . If it is still impossible to know this value, considering all past updates, then output - 1 . Note that the queries are encoded. That is, you need to write an online solution.",
    "input": "The first line contains a single integer q ( 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of queries. Each of the next q lines describes a query. It contains one integer t ( 1 \u2264 t \u2264 2 ) \u2014 the type of query. The given queries will be encoded in the following way: let last be the answer to the last query of the second type that you have answered ( initially, last = 0 ) . If the last answer was - 1 , set last = 1 . If t = 1 , three integers follow, l' , r' , and x' ( 0 \u2264 l' , r' , x' < 2^ 30 ) , meaning that you got an update. First, do the following: l = l' \u2295 last , r = r' \u2295 last , x = x' \u2295 last and, if l > r , swap l and r . This means you got an update that the bitwise xor of the subarray [ l, r] is equal to x ( notice that you need to ignore updates that contradict previous updates) . If t = 2 , two integers follow, l' and r' ( 0 \u2264 l' , r' < 2^ 30 ) , meaning that you got a query. First, do the following: l = l' \u2295 last , r = r' \u2295 last and, if l > r , swap l and r . For the given query, you need to print the bitwise xor of the subarray [ l, r] . If it is impossible to know, print - 1 . Don' t forget to change the value of last . It is guaranteed there will be at least one query of the second type.",
    "output": "After every query of the second type, output the bitwise xor of the given subarray or - 1 if it is still impossible to know.",
    "note": "In the first example, the real queries ( without being encoded) are: 12 2 1 2 2 0 1073741823 1 1 2 5 2 1 1 2 2 2 2 1 2 1 2 3 6 2 1 1 1 1 3 0 2 1 1 2 2 2 2 3 3 The answers for the first two queries are - 1 because we don' t have any such information on the array initially. The first update tells us a_ 1 \u2295 a_ 2 = 5 . Note that we still can' t be certain about the values a_ 1 or a_ 2 independently ( for example, it could be that a_ 1 = 1, a_ 2 = 4 , and also a_ 1 = 3, a_ 2 = 6 ) . After we receive all three updates, we have enough information to deduce a_ 1, a_ 2, a_ 3 independently. In the second example, notice that after the first two updates we already know that a_ 5 \u2295 a_ 6 = 12 , so the third update is contradicting, and we ignore it.",
    "topics": [
      "data structures",
      "dsu"
    ],
    "id": "1044D"
  },
  {
    "title": "Speckled Band",
    "url": "https://codeforces.com/problemset/problem/1043/G",
    "history": "Ildar took a band ( a thin strip of cloth) and colored it. Formally, the band has n cells, each of them is colored into one of 26 colors, so we can denote each color with one of the lowercase letters of English alphabet. Ildar decided to take some segment of the band [ l, r] ( 1 \u2264 l \u2264 r \u2264 n ) he likes and cut it from the band. So he will create a new band that can be represented as a string t = s_ l s_ l+ 1. . . s_ r . After that Ildar will play the following game: he cuts the band t into some new bands and counts the number of different bands among them. Formally, Ildar chooses 1 \u2264 k \u2264 | t| indexes 1 \u2264 i_ 1 < i_ 2 < . . . < i_ k = | t| and cuts t to k bands- strings t_ 1 t_ 2 . . . t_ i_ 1, t_ i_ 1 + 1. . . t_ i_ 2, . . . , t_ i_ k- 1 + 1. . . t_ i_ k and counts the number of different bands among them. He wants to know the minimal possible number of different bands he can get under the constraint that at least one band repeats at least two times. The result of the game is this number. If it is impossible to cut t in such a way, the result of the game is - 1. Unfortunately Ildar hasn' t yet decided which segment he likes, but he has q segments- candidates [ l_ 1, r_ 1] , [ l_ 2, r_ 2] , . . . , [ l_ q, r_ q] . Your task is to calculate the result of the game for each of them.",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 200 000 ) \u2014 the length of the band Ildar has. The second line contains a string s consisting of n lowercase English letters \u2014 the band Ildar has. The third line contains a single integer q ( 1 \u2264 q \u2264 200 000 ) \u2014 the number of segments Ildar has chosen as candidates. Each of the next q lines contains two integer integers l_ i and r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 n ) denoting the ends of the i - th segment.",
    "output": "Output q lines, where the i - th of them should contain the result of the game on the segment [ l_ i, r_ i] .",
    "note": "Consider the first example. If Ildar chooses the segment [ 1, 6] , he cuts a string t = abcabc . If he cuts t into two bands abc and abc , the band abc repeats two times and the number of different tapes is 1 . So, the result of this game is 1 . If Ildar chooses the segment [ 4, 7] , he cuts a string t = abcd . It is impossible to cut this band in such a way that there is at least one band repeating at least two times. So, the result of this game is - 1 . If Ildar chooses the segment [ 3, 6] , he cuts a string t = cabc . If he cuts t into three bands c , ab and c , the band c repeats two times and the number of different bands is 2 . So, the result of this game is 2 .",
    "topics": [
      "data structures",
      "divide and conquer",
      "hashing",
      "string suffix structures",
      "strings"
    ],
    "id": "1043G"
  },
  {
    "title": "Leaf Sets",
    "url": "https://codeforces.com/problemset/problem/1042/F",
    "history": "You are given an undirected tree, consisting of n vertices. The vertex is called a leaf if it has exactly one vertex adjacent to it. The distance between some pair of vertices is the number of edges in the shortest path between them. Let' s call some set of leaves beautiful if the maximum distance between any pair of leaves in it is less or equal to k . You want to split all leaves into non- intersecting beautiful sets. What is the minimal number of sets in such a split?",
    "input": "The first line contains two integers n and k ( 3 \u2264 n \u2264 10^ 6 , 1 \u2264 k \u2264 10^ 6 ) \u2014 the number of vertices in the tree and the maximum distance between any pair of leaves in each beautiful set. Each of the next n - 1 lines contains two integers v_ i and u_ i ( 1 \u2264 v_ i, u_ i \u2264 n ) \u2014 the description of the i - th edge. It is guaranteed that the given edges form a tree.",
    "output": "Print a single integer \u2014 the minimal number of beautiful sets the split can have.",
    "note": "Here is the graph for the first example:",
    "topics": [
      "data structures",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "sortings",
      "trees"
    ],
    "id": "1042F"
  },
  {
    "title": "Petya and Array",
    "url": "https://codeforces.com/problemset/problem/1042/D",
    "history": "Petya has an array a consisting of n integers. He has learned partial sums recently, and now he can calculate the sum of elements on any segment of the array really fast. The segment is a non- empty sequence of elements standing one next to another in the array. Now he wonders what is the number of segments in his array with the sum less than t . Help Petya to calculate this number. More formally, you are required to calculate the number of pairs l, r ( l \u2264 r ) such that a_ l + a_ l+ 1 + . . . + a_ r- 1 + a_ r < t .",
    "input": "The first line contains two integers n and t ( 1 \u2264 n \u2264 200 000, | t| \u2264 2\u00b710^ 14 ) . The second line contains a sequence of integers a_ 1, a_ 2, . . . , a_ n ( | a_ i| \u2264 10^ 9 ) \u2014 the description of Petya' s array. Note that there might be negative, zero and positive elements.",
    "output": "Print the number of segments in Petya' s array with the sum of elements less than t .",
    "note": "In the first example the following segments have sum less than 4 : [ 2, 2] , sum of elements is - 1 [ 2, 3] , sum of elements is 2 [ 3, 3] , sum of elements is 3 [ 4, 5] , sum of elements is 3 [ 5, 5] , sum of elements is - 1",
    "topics": [
      "data structures",
      "divide and conquer",
      "two pointers"
    ],
    "id": "1042D"
  },
  {
    "title": "Ray in the tube",
    "url": "https://codeforces.com/problemset/problem/1041/F",
    "history": "You are given a tube which is reflective inside represented as two non- coinciding, but parallel to Ox lines. Each line has some special integer points \u2014 positions of sensors on sides of the tube. You are going to emit a laser ray in the tube. To do so, you have to choose two integer points A and B on the first and the second line respectively ( coordinates can be negative) : the point A is responsible for the position of the laser, and the point B \u2014 for the direction of the laser ray. The laser ray is a ray starting at A and directed at B which will reflect from the sides of the tube ( it doesn' t matter if there are any sensors at a reflection point or not) . A sensor will only register the ray if the ray hits exactly at the position of the sensor. Examples of laser rays. Note that image contains two examples. The 3 sensors ( denoted by black bold points on the tube sides) will register the blue ray but only 2 will register the red. Calculate the maximum number of sensors which can register your ray if you choose points A and B on the first and the second lines respectively.",
    "input": "The first line contains two integers n and y_ 1 ( 1 \u2264 n \u2264 10^ 5 , 0 \u2264 y_ 1 \u2264 10^ 9 ) \u2014 number of sensors on the first line and its y coordinate. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) \u2014 x coordinates of the sensors on the first line in the ascending order. The third line contains two integers m and y_ 2 ( 1 \u2264 m \u2264 10^ 5 , y_ 1 < y_ 2 \u2264 10^ 9 ) \u2014 number of sensors on the second line and its y coordinate. The fourth line contains m integers b_ 1, b_ 2, . . . , b_ m ( 0 \u2264 b_ i \u2264 10^ 9 ) \u2014 x coordinates of the sensors on the second line in the ascending order.",
    "output": "Print the only integer \u2014 the maximum number of sensors which can register the ray.",
    "note": "One of the solutions illustrated on the image by pair A_ 2 and B_ 2 .",
    "topics": [
      "data structures",
      "divide and conquer",
      "dp",
      "math"
    ],
    "id": "1041F"
  },
  {
    "title": "Tree Reconstruction",
    "url": "https://codeforces.com/problemset/problem/1041/E",
    "history": "Monocarp has drawn a tree ( an undirected connected acyclic graph) and then has given each vertex an index. All indices are distinct numbers from 1 to n . For every edge e of this tree, Monocarp has written two numbers: the maximum indices of the vertices of the two components formed if the edge e ( and only this edge) is erased from the tree. Monocarp has given you a list of n - 1 pairs of numbers. He wants you to provide an example of a tree that will produce the said list if this tree exists. If such tree does not exist, say so.",
    "input": "The first line contains one integer n ( 2 \u2264 n \u2264 1 000 ) \u2014 the number of vertices in the tree. Each of the next n- 1 lines contains two integers a_ i and b_ i each ( 1 \u2264 a_ i < b_ i \u2264 n ) \u2014 the maximal indices of vertices in the components formed if the i - th edge is removed.",
    "output": "If there is no such tree that can produce the given list of pairs, print \" NO\" ( without quotes) . Otherwise print \" YES\" ( without quotes) in the first line and the edges of the tree in the next n - 1 lines. Each of the last n - 1 lines should contain two integers x_ i and y_ i ( 1 \u2264 x_ i, y_ i \u2264 n ) \u2014 vertices connected by an edge. Note: The numeration of edges doesn' t matter for this task. Your solution will be considered correct if your tree produces the same pairs as given in the input file ( possibly reordered) . That means that you can print the edges of the tree you reconstructed in any order.",
    "note": "Possible tree from the first example. Dotted lines show edges you need to remove to get appropriate pairs.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "graphs",
      "greedy"
    ],
    "id": "1041E"
  },
  {
    "title": "Glider",
    "url": "https://codeforces.com/problemset/problem/1041/D",
    "history": "A plane is flying at a constant height of h meters above the ground surface. Let' s consider that it is flying from the point ( - 10^ 9, h) to the point ( 10^ 9, h) parallel with Ox axis. A glider is inside the plane, ready to start his flight at any moment ( for the sake of simplicity let' s consider that he may start only when the plane' s coordinates are integers) . After jumping from the plane, he will fly in the same direction as the plane, parallel to Ox axis, covering a unit of distance every second. Naturally, he will also descend; thus his second coordinate will decrease by one unit every second. There are ascending air flows on certain segments, each such segment is characterized by two numbers x_ 1 and x_ 2 ( x_ 1 < x_ 2 ) representing its endpoints. No two segments share any common points. When the glider is inside one of such segments, he doesn' t descend, so his second coordinate stays the same each second. The glider still flies along Ox axis, covering one unit of distance every second. If the glider jumps out at 1 , he will stop at 10 . Otherwise, if he jumps out at 2 , he will stop at 12 . Determine the maximum distance along Ox axis from the point where the glider' s flight starts to the point where his flight ends if the glider can choose any integer coordinate to jump from the plane and start his flight. After touching the ground the glider stops altogether, so he cannot glide through an ascending airflow segment if his second coordinate is 0 .",
    "input": "The first line contains two integers n and h ( 1 \u2264 n \u2264 2\u00b710^ 5, 1 \u2264 h \u2264 10^ 9) \u2014 the number of ascending air flow segments and the altitude at which the plane is flying, respectively. Each of the next n lines contains two integers x_ i1 and x_ i2 ( 1 \u2264 x_ i1 < x_ i2\u2264 10^ 9) \u2014 the endpoints of the i - th ascending air flow segment. No two segments intersect, and they are given in ascending order.",
    "output": "Print one integer \u2014 the maximum distance along Ox axis that the glider can fly from the point where he jumps off the plane to the point where he lands if he can start his flight at any integer coordinate.",
    "note": "In the first example if the glider can jump out at ( 2, 4) , then the landing point is ( 12, 0) , so the distance is 12- 2 = 10 . In the second example the glider can fly from ( 16, 10) to ( 34, 0) , and the distance is 34- 16= 18 . In the third example the glider can fly from ( - 100, 1000000000) to ( 1999999899, 0) , so the distance is 1999999899- ( - 100) = 1999999999 .",
    "topics": [
      "binary search",
      "data structures",
      "two pointers"
    ],
    "id": "1041D"
  },
  {
    "title": "Coffee Break",
    "url": "https://codeforces.com/problemset/problem/1041/C",
    "history": "Recently Monocarp got a job. His working day lasts exactly m minutes. During work, Monocarp wants to drink coffee at certain moments: there are n minutes a_ 1, a_ 2, . . . , a_ n , when he is able and willing to take a coffee break ( for the sake of simplicity let' s consider that each coffee break lasts exactly one minute) . However, Monocarp' s boss doesn' t like when Monocarp takes his coffee breaks too often. So for the given coffee break that is going to be on minute a_ i , Monocarp must choose the day in which he will drink coffee during the said minute, so that every day at least d minutes pass between any two coffee breaks. Monocarp also wants to take these n coffee breaks in a minimum possible number of working days ( he doesn' t count days when he is not at work, and he doesn' t take coffee breaks on such days) . Take into account that more than d minutes pass between the end of any working day and the start of the following working day. For each of the n given minutes determine the day, during which Monocarp should take a coffee break in this minute. You have to minimize the number of days spent.",
    "input": "The first line contains three integers n , m , d ( 1 \u2264 n \u2264 2\u00b710^ 5, n \u2264 m \u2264 10^ 9, 1 \u2264 d \u2264 m) \u2014 the number of coffee breaks Monocarp wants to have, the length of each working day, and the minimum number of minutes between any two consecutive coffee breaks. The second line contains n distinct integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 m) , where a_ i is some minute when Monocarp wants to have a coffee break.",
    "output": "In the first line, write the minimum number of days required to make a coffee break in each of the n given minutes. In the second line, print n space separated integers. The i - th of integers should be the index of the day during which Monocarp should have a coffee break at minute a_ i . Days are numbered from 1 . If there are multiple optimal solutions, you may print any of them.",
    "note": "In the first example, Monocarp can take two coffee breaks during the first day ( during minutes 1 and 5 , 3 minutes will pass between these breaks) . One break during the second day ( at minute 2 ) , and one break during the third day ( at minute 3 ) . In the second example, Monocarp can determine the day of the break as follows: if the minute when he wants to take a break is odd, then this break is on the first day, if it is even, then this break is on the second day.",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "two pointers"
    ],
    "id": "1041C"
  },
  {
    "title": "Summer Oenothera Exhibition",
    "url": "https://codeforces.com/problemset/problem/1039/E",
    "history": "While some people enjoy spending their time solving programming contests, Dina prefers taking beautiful pictures. As soon as Byteland Botanical Garden announced Summer Oenothera Exhibition she decided to test her new camera there. The exhibition consists of l = 10^ 100 Oenothera species arranged in a row and consecutively numbered with integers from 0 to l - 1 . Camera lens allows to take a photo of w species on it, i. e. Dina can take a photo containing flowers with indices from x to x + w - 1 for some integer x between 0 and l - w . We will denote such photo with [ x, x + w - 1] . She has taken n photos, the i - th of which ( in chronological order) is [ x_ i, x_ i + w - 1] in our notation. She decided to build a time- lapse video from these photos once she discovered that Oenothera blossoms open in the evening. Dina takes each photo and truncates it, leaving its segment containing exactly k flowers, then she composes a video of these photos keeping their original order and voila\u0300, a beautiful artwork has been created! A scene is a contiguous sequence of photos such that the set of flowers on them is the same. The change between two scenes is called a cut. For example, consider the first photo contains flowers [ 1, 5] , the second photo contains flowers [ 3, 7] and the third photo contains flowers [ 8, 12] . If k = 3 , then Dina can truncate the first and the second photo into [ 3, 5] , and the third photo into [ 9, 11] . First two photos form a scene, third photo also forms a scene and the transition between these two scenes which happens between the second and the third photos is a cut. If k = 4 , then each of the transitions between photos has to be a cut. Dina wants the number of cuts to be as small as possible. Please help her! Calculate the minimum possible number of cuts for different values of k .",
    "input": "The first line contains three positive integer n , w , q ( 1 \u2264 n, q \u2264 100 000 , 1 \u2264 w \u2264 10^ 9 ) \u2014 the number of taken photos, the number of flowers on a single photo and the number of queries. Next line contains n non- negative integers x_ i ( 0 \u2264 x_ i \u2264 10^ 9 ) \u2014 the indices of the leftmost flowers on each of the photos. Next line contains q positive integers k_ i ( 1 \u2264 k_ i \u2264 w ) \u2014 the values of k for which you have to solve the problem. It' s guaranteed that all k_ i are distinct.",
    "output": "Print q integers \u2014 for each width of the truncated photo k_ i , the minimum number of cuts that is possible.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": "1039E"
  },
  {
    "title": "You Are Given a Tree",
    "url": "https://codeforces.com/problemset/problem/1039/D",
    "history": "A tree is an undirected graph with exactly one simple path between each pair of vertices. We call a set of simple paths k - valid if each vertex of the tree belongs to no more than one of these paths ( including endpoints) and each path consists of exactly k vertices. You are given a tree with n vertices. For each k from 1 to n inclusive find what is the maximum possible size of a k - valid set of simple paths.",
    "input": "The first line of the input contains a single integer n ( 2 \u2264 n \u2264 100 000 ) \u2014 the number of vertices in the tree. Then following n - 1 lines describe the tree, each of them contains two integers v , u ( 1 \u2264 v, u \u2264 n ) \u2014 endpoints of the corresponding edge. It is guaranteed, that the given graph is a tree.",
    "output": "Output n numbers, the i - th of which is the maximum possible number of paths in an i - valid set of paths.",
    "note": "One way to achieve the optimal number of paths for the second sample is illustrated in the following picture:",
    "topics": [
      "data structures",
      "dp",
      "trees"
    ],
    "id": "1039D"
  },
  {
    "title": "Timetable",
    "url": "https://codeforces.com/problemset/problem/1039/A",
    "history": "There are two bus stops denoted A and B, and there n buses that go from A to B every day. The shortest path from A to B takes t units of time but some buses might take longer paths. Moreover, buses are allowed to overtake each other during the route. At each station one can find a sorted list of moments of time when a bus is at this station. We denote this list as a_ 1 < a_ 2 < . . . < a_ n for stop A and as b_ 1 < b_ 2 < . . . < b_ n for stop B. The buses always depart from A and arrive to B according to the timetable, but the order in which the buses arrive may differ. Let' s call an order of arrivals valid if each bus arrives at least t units of time later than departs. It is known that for an order to be valid the latest possible arrival for the bus that departs at a_ i is b_ x_ i , i. e. x_ i - th in the timetable. In other words, for each i there exists such a valid order of arrivals that the bus departed i - th arrives x_ i - th ( and all other buses can arrive arbitrary) , but there is no valid order of arrivals in which the i - th departed bus arrives ( x_ i + 1) - th. Formally, let' s call a permutation p_ 1, p_ 2, . . . , p_ n valid, if b_ p_ i\u2265 a_ i + t for all i . Then x_ i is the maximum value of p_ i among all valid permutations. You are given the sequences a_ 1, a_ 2, . . . , a_ n and x_ 1, x_ 2, . . . , x_ n , but not the arrival timetable. Find out any suitable timetable for stop B b_ 1, b_ 2, . . . , b_ n or determine that there is no such timetable.",
    "input": "The first line of the input contains two integers n and t ( 1 \u2264 n \u2264 200 000 , 1 \u2264 t \u2264 10^ 18 ) \u2014 the number of buses in timetable for and the minimum possible travel time from stop A to stop B. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ 1 < a_ 2 < . . . < a_ n \u2264 10^ 18 ) , defining the moments of time when the buses leave stop A. The third line contains n integers x_ 1, x_ 2, . . . , x_ n ( 1 \u2264 x_ i \u2264 n ) , the i - th of them stands for the maximum possible timetable position, at which the i - th bus leaving stop A can arrive at stop B.",
    "output": "If a solution exists, print \" Yes\" ( without quotes) in the first line of the output. In the second line print n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ 1 < b_ 2 < . . . < b_ n \u2264 3 \u00b7 10^ 18 ) . We can show that if there exists any solution, there exists a solution that satisfies such constraints on b_ i . If there are multiple valid answers you can print any of them. If there is no valid timetable, print \" No\" ( without quotes) in the only line of the output.",
    "note": "Consider the first example and the timetable b_ 1, b_ 2, . . . , b_ n from the output. To get x_ 1 = 2 the buses can arrive in the order ( 2, 1, 3) . To get x_ 2 = 2 and x_ 3 = 3 the buses can arrive in the order ( 1, 2, 3) . x_ 1 is not 3 , because the permutations ( 3, 1, 2) and ( 3, 2, 1) ( all in which the 1 - st bus arrives 3 - rd) are not valid ( sube buses arrive too early) , x_ 2 is not 3 because of similar reasons.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "math"
    ],
    "id": "1039A"
  },
  {
    "title": "Security",
    "url": "https://codeforces.com/problemset/problem/1037/H",
    "history": "Some programming website is establishing a secure communication protocol. For security reasons, they want to choose several more or less random strings. Initially, they have a string s consisting of lowercase English letters. Now they want to choose q strings using the following steps, and you are to help them. A string x consisting of lowercase English letters and integers l and r ( 1 \u2264 l \u2264 r \u2264 | s| ) are chosen. Consider all non- empty distinct substrings of the s_ l s_ l + 1. . . s_ r , that is all distinct strings s_ i s_ i+ 1. . . s_ j where l \u2264 i \u2264 j \u2264 r . Among all of them choose all strings that are lexicographically greater than x . If there are no such strings, you should print - 1 . Otherwise print the lexicographically smallest among them. String a is lexicographically less than string b , if either a is a prefix of b and a b , or there exists such a position i ( 1 \u2264 i \u2264 min( | a| , | b| ) ) , such that a_ i < b_ i and for all j ( 1 \u2264 j < i ) a_ j = b_ j . Here | a| denotes the length of the string a .",
    "input": "The first line of input contains a non- empty string s ( 1 \u2264 | s| \u2264 10^ 5 ) consisting of lowercase English letters. The second line contains an integer q ( 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of strings to select. Each of the next q lines contains two integers l , r ( 1 \u2264 l \u2264 r \u2264 | s| ) and a non- empty string x consisting of lowercase English letters. The total length of strings x for all queries does not exceed 2 \u00b7 10^ 5 .",
    "output": "Output q lines, each of them should contain the desired string or - 1 , if there is no such string.",
    "note": "Consider the first example. The string s is \" baa\" . The queries are as follows. We consider the substring s_ 1 s_ 2 that is \" ba\" . It has substrings \" b\" , \" a\" and \" ba\" , since none of them is greater than the query string \" ba\" , the answer is - 1 . We consider substring \" aa\" . Among its substrings only \" aa\" is greater than the query string \" a\" . So the answer is \" aa\" . We consider substring \" ba\" . Out of \" b\" , \" a\" and \" ba\" only \" ba\" is greater than the query string \" b\" , so the answer is \" ba\" . We consider substring \" aa\" . No substring of \" aa\" is greater than the query string \" aa\" so the answer is - 1 . We consider substring \" baa\" and it has ( among others) substrings \" ba\" , \" baa\" which are greater than the query string \" b\" . Since \" ba\" is lexicographically smaller than \" baa\" , the answer is \" ba\" .",
    "topics": [
      "data structures",
      "string suffix structures"
    ],
    "id": "1037H"
  },
  {
    "title": "Maximum Reduction",
    "url": "https://codeforces.com/problemset/problem/1037/F",
    "history": "Given an array a of n integers and an integer k ( 2 \u2264 k \u2264 n ) , where each element of the array is denoted by a_ i ( 0 \u2264 i < n ) . Perform the operation z given below on a and print the value of z( a, k) modulo 10^ 9+ 7 . function z( array a, integer k) : if length( a) < k: return 0 else: b = empty array ans = 0 for i = 0 . . ( length( a) - k) : temp = a[ i] for j = i . . ( i + k - 1) : temp = max( temp, a[ j] ) append temp to the end of b ans = ans + temp return ans + z( b, k)",
    "input": "The first line of input contains two integers n and k ( 2 \u2264 k \u2264 n \u2264 10^ 6 ) \u2014 the length of the initial array a and the parameter k . The second line of input contains n integers a_ 0, a_ 1, . . . , a_ n - 1 ( 1 \u2264 a_ i\u2264 10^ 9 ) \u2014 the elements of the array a .",
    "output": "Output the only integer, the value of z( a, k) modulo 10^ 9+ 7 .",
    "note": "In the first example: for a= ( 9, 1, 10) , ans= 19 and b= ( 9, 10) , for a= ( 9, 10) , ans= 10 and b= ( 10) , for a= ( 10) , ans= 0 . So the returned value is 19+ 10+ 0= 29 . In the second example: for a= ( 5, 8, 7, 1, 9) , ans= 25 and b= ( 8, 8, 9) , for a= ( 8, 8, 9) , ans= 9 and b= ( 9) , for a= ( 9) , ans= 0 . So the returned value is 25+ 9+ 0= 34 .",
    "topics": [
      "combinatorics",
      "data structures",
      "math"
    ],
    "id": "1037F"
  },
  {
    "title": "Intervals of Intervals",
    "url": "https://codeforces.com/problemset/problem/1034/D",
    "history": "Little D is a friend of Little C who loves intervals very much instead of number \" 3 \" . Now he has n intervals on the number axis, the i - th of which is [ a_ i, b_ i] . Only the n intervals can not satisfy him. He defines the value of an interval of intervals [ l, r] ( 1 \u2264 l \u2264 r \u2264 n , l and r are both integers) as the total length of the union of intervals from the l - th to the r - th. He wants to select exactly k different intervals of intervals such that the sum of their values is maximal. Please help him calculate the maximal sum.",
    "input": "First line contains two integers n and k ( 1 \u2264 n \u2264 3 \u00b7 10^ 5 , 1 \u2264 k \u2264min{ n( n+ 1) / 2, 10^ 9} ) \u2014 the number of intervals Little D has and the number of intervals of intervals he will select. Each of the next n lines contains two integers a_ i and b_ i , the i - th line of the n lines describing the i - th interval ( 1 \u2264 a_ i < b_ i \u2264 10^ 9 ) .",
    "output": "Print one integer \u2014 the maximal sum of values Little D can get.",
    "note": "For the first example, Little D will select [ 1, 2] , the union of the first interval and the second interval is [ 1, 4] , whose length is 3 . For the second example, Little D will select [ 1, 2] , [ 2, 3] and [ 1, 3] , the answer is 5+ 6+ 4= 15 .",
    "topics": [
      "binary search",
      "data structures",
      "two pointers"
    ],
    "id": "1034D"
  },
  {
    "title": "Putting Boxes Together",
    "url": "https://codeforces.com/problemset/problem/1030/F",
    "history": "There is an infinite line consisting of cells. There are n boxes in some cells of this line. The i - th box stands in the cell a_ i and has weight w_ i . All a_ i are distinct, moreover, a_ i - 1 < a_ i holds for all valid i . You would like to put together some boxes. Putting together boxes with indices in the segment [ l, r] means that you will move some of them in such a way that their positions will form some segment [ x, x + ( r - l) ] . In one step you can move any box to a neighboring cell if it isn' t occupied by another box ( i. e. you can choose i and change a_ i by 1 , all positions should remain distinct) . You spend w_ i units of energy moving the box i by one cell. You can move any box any number of times, in arbitrary order. Sometimes weights of some boxes change, so you have queries of two types: id nw \u2014 weight w_ id of the box id becomes nw . l r \u2014 you should compute the minimum total energy needed to put together boxes with indices in [ l, r] . Since the answer can be rather big, print the remainder it gives when divided by 1000 000 007 = 10^ 9 + 7 . Note that the boxes are not moved during the query, you only should compute the answer. Note that you should minimize the answer, not its remainder modulo 10^ 9 + 7 . So if you have two possible answers 2 \u00b7 10^ 9 + 13 and 2 \u00b7 10^ 9 + 14 , you should choose the first one and print 10^ 9 + 6 , even though the remainder of the second answer is 0 .",
    "input": "The first line contains two integers n and q ( 1 \u2264 n, q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of boxes and the number of queries. The second line contains n integers a_ 1, a_ 2, . . . a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the positions of the boxes. All a_ i are distinct, a_ i - 1 < a_ i holds for all valid i . The third line contains n integers w_ 1, w_ 2, . . . w_ n ( 1 \u2264 w_ i \u2264 10^ 9 ) \u2014 the initial weights of the boxes. Next q lines describe queries, one query per line. Each query is described in a single line, containing two integers x and y . If x < 0 , then this query is of the first type, where id = - x , nw = y ( 1 \u2264 id \u2264 n , 1 \u2264 nw \u2264 10^ 9 ) . If x > 0 , then the query is of the second type, where l = x and r = y ( 1 \u2264 l_ j \u2264 r_ j \u2264 n ) . x can not be equal to 0 .",
    "output": "For each query of the second type print the answer on a separate line. Since answer can be large, print the remainder it gives when divided by 1000 000 007 = 10^ 9 + 7 .",
    "note": "Let' s go through queries of the example: 1 1 \u2014 there is only one box so we don' t need to move anything. 1 5 \u2014 we can move boxes to segment [ 4, 8] : 1 \u00b7 | 1 - 4| + 1 \u00b7 | 2 - 5| + 1 \u00b7 | 6 - 6| + 1 \u00b7 | 7 - 7| + 2 \u00b7 | 10 - 8| = 10 . 1 3 \u2014 we can move boxes to segment [ 1, 3] . 3 5 \u2014 we can move boxes to segment [ 7, 9] . - 3 5 \u2014 w_ 3 is changed from 1 to 5 . - 1 10 \u2014 w_ 1 is changed from 1 to 10 . The weights are now equal to w = [ 10, 1, 5, 1, 2] . 1 4 \u2014 we can move boxes to segment [ 1, 4] . 2 5 \u2014 we can move boxes to segment [ 5, 8] .",
    "topics": [
      "data structures"
    ],
    "id": "1030F"
  },
  {
    "title": "Order book",
    "url": "https://codeforces.com/problemset/problem/1028/D",
    "history": "Let' s consider a simplified version of order book of some stock. The order book is a list of orders ( offers) from people that want to buy or sell one unit of the stock, each order is described by direction ( BUY or SELL) and price. At every moment of time, every SELL offer has higher price than every BUY offer. In this problem no two ever existed orders will have the same price. The lowest- price SELL order and the highest- price BUY order are called the best offers, marked with black frames on the picture below. The presented order book says that someone wants to sell the product at price 12 and it' s the best SELL offer because the other two have higher prices. The best BUY offer has price 10 . There are two possible actions in this orderbook: Somebody adds a new order of some direction with some price. Somebody accepts the best possible SELL or BUY offer ( makes a deal) . It' s impossible to accept not the best SELL or BUY offer ( to make a deal at worse price) . After someone accepts the offer, it is removed from the orderbook forever. It is allowed to add new BUY order only with prices less than the best SELL offer ( if you want to buy stock for higher price, then instead of adding an order you should accept the best SELL offer) . Similarly, one couldn' t add a new SELL order with price less or equal to the best BUY offer. For example, you can' t add a new offer \" SELL 20 \" if there is already an offer \" BUY 20 \" or \" BUY 25 \" \u2014 in this case you just accept the best BUY offer. You have a damaged order book log ( in the beginning the are no orders in book) . Every action has one of the two types: \" ADD p \" denotes adding a new order with price p and unknown direction. The order must not contradict with orders still not removed from the order book. \" ACCEPT p \" denotes accepting an existing best offer with price p and unknown direction. The directions of all actions are lost. Information from the log isn' t always enough to determine these directions. Count the number of ways to correctly restore all ADD action directions so that all the described conditions are satisfied at any moment. Since the answer could be large, output it modulo 10^ 9 + 7 . If it is impossible to correctly restore directions, then output 0 .",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 363 304 ) \u2014 the number of actions in the log. Each of the next n lines contains a string \" ACCEPT\" or \" ADD\" and an integer p ( 1 \u2264 p \u2264 308 983 066 ) , describing an action type and price. All ADD actions have different prices. For ACCEPT action it is guaranteed that the order with the same price has already been added but has not been accepted yet.",
    "output": "Output the number of ways to restore directions of ADD actions modulo 10^ 9 + 7 .",
    "note": "In the first example each of orders may be BUY or SELL. In the second example the order with price 1 has to be BUY order, the order with the price 3 has to be SELL order.",
    "topics": [
      "combinatorics",
      "data structures",
      "greedy"
    ],
    "id": "1028D"
  },
  {
    "title": "Pisces",
    "url": "https://codeforces.com/problemset/problem/1023/G",
    "history": "A group of researchers are studying fish population in a natural system of lakes and rivers. The system contains n lakes connected by n - 1 rivers. Each river has integer length ( in kilometers) and can be traversed in both directions. It is possible to travel between any pair of lakes by traversing the rivers ( that is, the network of lakes and rivers form a tree) . There is an unknown number of indistinguishable fish living in the lakes. On day 1 , fish can be at arbitrary lakes. Fish can travel between lakes by swimming the rivers. Each fish can swim a river l kilometers long in any direction in l days. Further, each fish can stay any number of days in any particular lake it visits. No fish ever appear or disappear from the lake system. Each lake can accomodate any number of fish at any time. The researchers made several observations. The j - th of these observations is \" on day d_ j there were at least f_ j distinct fish in the lake p_ j \" . Help the researchers in determining the smallest possible total number of fish living in the lake system that doesn' t contradict the observations.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of lakes in the system. The next n - 1 lines describe the rivers. The i - th of these lines contains three integers u_ i , v_ i , l_ i ( 1 \u2264 u_ i, v_ i \u2264 n , u_ i = \u0338 v_ i , 1 \u2264 l_ i \u2264 10^ 3 ) \u2014 1 - based indices of lakes connected by the i - th river, and the length of this river. The next line contains a single integer k ( 1 \u2264 k \u2264 10^ 5 ) \u2014 the number of observations. The next k lines describe the observations. The j - th of these lines contains three integers d_ j , f_ j , p_ j ( 1 \u2264 d_ j \u2264 10^ 8 , 1 \u2264 f_ j \u2264 10^ 4 , 1 \u2264 p_ j \u2264 n ) \u2014 the day, the number of fish, and the lake index of the j - th observation. No two observations happen on the same day at the same lake simultaneously.",
    "output": "Print one integer \u2014 the smallest total number of fish not contradicting the observations.",
    "note": "In the first example, there could be one fish swimming through lakes 2 , 1 , and 4 , and the second fish swimming through lakes 3 , 1 , and 2 . In the second example a single fish can not possibly be part of all observations simultaneously, but two fish swimming 2 \u2192 1 \u2192 4 and 3 \u2192 1 \u2192 5 can. In the third example one fish can move from lake 1 to lake 5 , others staying in their lakes during all time: two fish in lake 4 , six fish in lake 5 , one fish in lake 3 . The system of lakes is shown on the picture.",
    "topics": [
      "data structures",
      "flows",
      "trees"
    ],
    "id": "1023G"
  },
  {
    "title": "Array Restoration",
    "url": "https://codeforces.com/problemset/problem/1023/D",
    "history": "Initially there was an array a consisting of n integers. Positions in it are numbered from 1 to n . Exactly q queries were performed on the array. During the i - th query some segment ( l_ i, r_ i) ( 1 \u2264 l_ i \u2264 r_ i \u2264 n) was selected and values of elements on positions from l_ i to r_ i inclusive got changed to i . The order of the queries couldn' t be changed and all q queries were applied. It is also known that every position from 1 to n got covered by at least one segment. We could have offered you the problem about checking if some given array ( consisting of n integers with values from 1 to q ) can be obtained by the aforementioned queries. However, we decided that it will come too easy for you. So the enhancement we introduced to it is the following. Some set of positions ( possibly empty) in this array is selected and values of elements on these positions are set to 0 . Your task is to check if this array can be obtained by the aforementioned queries. Also if it can be obtained then restore this array. If there are multiple possible arrays then print any of them.",
    "input": "The first line contains two integers n and q ( 1 \u2264 n, q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of elements of the array and the number of queries perfomed on it. The second line contains n integer numbers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 q ) \u2014 the resulting array. If element at some position j is equal to 0 then the value of element at this position can be any integer from 1 to q .",
    "output": "Print \" YES\" if the array a can be obtained by performing q queries. Segments ( l_ i, r_ i) ( 1 \u2264 l_ i \u2264 r_ i \u2264 n) are chosen separately for each query. Every position from 1 to n should be covered by at least one segment. Otherwise print \" NO\" . If some array can be obtained then print n integers on the second line \u2014 the i - th number should be equal to the i - th element of the resulting array and should have value from 1 to q . This array should be obtainable by performing exactly q queries. If there are multiple possible arrays then print any of them.",
    "note": "In the first example you can also replace 0 with 1 but not with 3 . In the second example it doesn' t really matter what segments to choose until query 10 when the segment is ( 1, 3) . The third example showcases the fact that the order of queries can' t be changed, you can' t firstly set ( 1, 3) to 6 and after that change ( 2, 2) to 5 . The segment of 5 should be applied before segment of 6 . There is a lot of correct resulting arrays for the fourth example.",
    "topics": [
      "constructive algorithms",
      "data structures"
    ],
    "id": "1023D"
  },
  {
    "title": "Raining season",
    "url": "https://codeforces.com/problemset/problem/1019/E",
    "history": "By the year 3018, Summer Informatics School has greatly grown. Hotel \u00abBerendeetronik\u00bb has been chosen as a location of the school. The camp consists of n houses with n- 1 pathways between them. It is possible to reach every house from each other using the pathways. Everything had been perfect until the rains started. The weather forecast promises that rains will continue for m days. A special squad of teachers was able to measure that the i - th pathway, connecting houses u_ i and v_ i , before the rain could be passed in b_ i seconds. Unfortunately, the rain erodes the roads, so with every day the time to pass the road will increase by a_ i seconds. In other words, on the t - th ( from zero) day after the start of the rain, it will take a_ i \u00b7 t + b_ i seconds to pass through this road. Unfortunately, despite all the efforts of teachers, even in the year 3018 not all the students are in their houses by midnight. As by midnight all students have to go to bed, it is important to find the maximal time between all the pairs of houses for each day, so every student would know the time when he has to run to his house. Find all the maximal times of paths between every pairs of houses after t= 0 , t= 1 , . . . , t= m- 1 days.",
    "input": "In the first line you are given two integers n and m \u2014 the number of houses in the camp and the number of raining days ( 1 \u2264 n \u2264 100 000 ; 1 \u2264 m \u2264 1 000 000 ) . In the next n- 1 lines you are given the integers u_ i , v_ i , a_ i , b_ i \u2014 description of pathways ( 1 \u2264 u_ i, v_ i \u2264 n ; 0 \u2264 a_ i \u2264 10^ 5 ; 0 \u2264 b_ i \u2264 10^ 9 ) . i - th pathway connects houses u_ i and v_ i , and in day t requires a_ i \u00b7 t + b_ i seconds to pass through. It is guaranteed that every two houses are connected by a sequence of pathways.",
    "output": "Print m integers \u2014 the lengths of the longest path in the camp after a t= 0, t= 1, . . . , t= m- 1 days after the start of the rain.",
    "note": "Let' s consider the first example. In the first three days ( 0 \u2264 t \u2264 2 ) the longest path is between 2nd and 3rd houses, and its length is equal to 100+ 100= 200 seconds. In the third day ( t= 2 ) the road between houses 1 and 4 has length 100 and keeps increasing. So, in days t= 2, 3, 4, 5 the longest path is between vertices 4 and ( 1 or 2) , and has length 180+ 10t . Notice, that in the day t= 2 there are three pathways with length 100, so there are three maximal paths of equal length. In the sixth day ( t= 5 ) pathway between first and fifth houses get length 100. So in every day with t= 5 and further the longest path is between houses 4 and 5 and has length 80+ 30t .",
    "topics": [
      "data structures",
      "divide and conquer",
      "trees"
    ],
    "id": "1019E"
  },
  {
    "title": "The Tree",
    "url": "https://codeforces.com/problemset/problem/1017/G",
    "history": "Abendsen assigned a mission to Juliana. In this mission, Juliana has a rooted tree with n vertices. Vertex number 1 is the root of this tree. Each vertex can be either black or white. At first, all vertices are white. Juliana is asked to process q queries. Each query is one of three types: If vertex v is white, mark it as black; otherwise, perform this operation on all direct sons of v instead. Mark all vertices in the subtree of v ( including v ) as white. Find the color of the i - th vertex. An example of operation \" 1 1\" ( corresponds to the first example test) . The vertices 1 and 2 are already black, so the operation goes to their sons instead. Can you help Juliana to process all these queries?",
    "input": "The first line contains two integers n and q ( 2\u2264 n\u2264 10^ 5 , 1\u2264 q\u2264 10^ 5 ) \u2014 the number of vertices and the number of queries. The second line contains n- 1 integers p_ 2, p_ 3, . . . , p_ n ( 1\u2264 p_ i< i ) , where p_ i means that there is an edge between vertices i and p_ i . Each of the next q lines contains two integers t_ i and v_ i ( 1\u2264 t_ i\u2264 3 , 1\u2264 v_ i\u2264 n ) \u2014 the type of the i - th query and the vertex of the i - th query. It is guaranteed that the given graph is a tree.",
    "output": "For each query of type 3 , print \" black\" if the vertex is black; otherwise, print \" white\" .",
    "note": "The first example is shown on the picture below. The second example is shown on the picture below.",
    "topics": [
      "data structures"
    ],
    "id": "1017G"
  },
  {
    "title": "The Wu",
    "url": "https://codeforces.com/problemset/problem/1017/D",
    "history": "Childan is making up a legendary story and trying to sell his forgery \u2014 a necklace with a strong sense of \" Wu\" to the Kasouras. But Mr. Kasoura is challenging the truth of Childan' s story. So he is going to ask a few questions about Childan' s so- called \" personal treasure\" necklace. This \" personal treasure\" is a multiset S of m \" 01- strings\" . A \" 01- string\" is a string that contains n characters \" 0\" and \" 1\" . For example, if n= 4 , strings \" 0110\" , \" 0000\" , and \" 1110\" are \" 01- strings\" , but \" 00110\" ( there are 5 characters, not 4 ) and \" zero\" ( unallowed characters) are not. Note that the multiset S can contain equal elements. Frequently, Mr. Kasoura will provide a \" 01- string\" t and ask Childan how many strings s are in the multiset S such that the \" Wu\" value of the pair ( s, t) is not greater than k . Mrs. Kasoura and Mr. Kasoura think that if s_ i = t_ i ( 1\u2264 i\u2264 n ) then the \" Wu\" value of the character pair equals to w_ i , otherwise 0 . The \" Wu\" value of the \" 01- string\" pair is the sum of the \" Wu\" values of every character pair. Note that the length of every \" 01- string\" is equal to n . For example, if w= [ 4, 5, 3, 6] , \" Wu\" of ( \" 1001\" , \" 1100\" ) is 7 because these strings have equal characters only on the first and third positions, so w_ 1+ w_ 3= 4+ 3= 7 . You need to help Childan to answer Mr. Kasoura' s queries. That is to find the number of strings in the multiset S such that the \" Wu\" value of the pair is not greater than k .",
    "input": "The first line contains three integers n , m , and q ( 1\u2264 n\u2264 12 , 1\u2264 q, m\u2264 5\u00b7 10^ 5 ) \u2014 the length of the \" 01- strings\" , the size of the multiset S , and the number of queries. The second line contains n integers w_ 1, w_ 2, . . . , w_ n ( 0 \u2264 w_ i \u2264 100 ) \u2014 the value of the i - th caracter. Each of the next m lines contains the \" 01- string\" s of length n \u2014 the string in the multiset S . Each of the next q lines contains the \" 01- string\" t of length n and integer k ( 0\u2264 k\u2264 100 ) \u2014 the query.",
    "output": "For each query, print the answer for this query.",
    "note": "In the first example, we can get: \" Wu\" of ( \" 01\" , \" 00\" ) is 40 . \" Wu\" of ( \" 10\" , \" 00\" ) is 20 . \" Wu\" of ( \" 11\" , \" 00\" ) is 0 . \" Wu\" of ( \" 01\" , \" 11\" ) is 20 . \" Wu\" of ( \" 10\" , \" 11\" ) is 40 . \" Wu\" of ( \" 11\" , \" 11\" ) is 60 . In the first query, pairs ( \" 11\" , \" 00\" ) and ( \" 10\" , \" 00\" ) satisfy the condition since their \" Wu\" is not greater than 20 . In the second query, all strings satisfy the condition. In the third query, pairs ( \" 01\" , \" 11\" ) and ( \" 01\" , \" 11\" ) satisfy the condition. Note that since there are two \" 01\" strings in the multiset, the answer is 2 , not 1 . In the fourth query, since k was increased, pair ( \" 10\" , \" 11\" ) satisfies the condition too. In the fifth query, since k was increased, pair ( \" 11\" , \" 11\" ) satisfies the condition too.",
    "topics": [
      "bitmasks",
      "brute force",
      "data structures"
    ],
    "id": "1017D"
  },
  {
    "title": "Store",
    "url": "https://codeforces.com/problemset/problem/1010/E",
    "history": "Natasha was already going to fly back to Earth when she remembered that she needs to go to the Martian store to buy Martian souvenirs for her friends. It is known, that the Martian year lasts x_ max months, month lasts y_ max days, day lasts z_ max seconds. Natasha also knows that this store works according to the following schedule: 2 months in a year were selected: x_ l and x_ r ( 1\u2264 x_ l\u2264 x_ r\u2264 x_ max ) , 2 days in a month: y_ l and y_ r ( 1\u2264 y_ l\u2264 y_ r\u2264 y_ max ) and 2 seconds in a day: z_ l and z_ r ( 1\u2264 z_ l\u2264 z_ r\u2264 z_ max ) . The store works at all such moments ( month x , day y , second z ) , when simultaneously x_ l\u2264 x\u2264 x_ r , y_ l\u2264 y\u2264 y_ r and z_ l\u2264 z\u2264 z_ r . Unfortunately, Natasha does not know the numbers x_ l, x_ r, y_ l, y_ r, z_ l, z_ r . One Martian told Natasha: \" I went to this store ( n+ m) times. n times of them it was opened, and m times \u2014 closed. \" He also described his every trip to the store: the month, day, second of the trip and whether the store was open or closed at that moment. Natasha can go to the store k times. For each of them, determine whether the store at the time of the trip is open, closed, or this information is unknown.",
    "input": "The first line contains 6 integers x_ max , y_ max , z_ max , n , m , k ( 1\u2264 x_ max, y_ max, z_ max\u2264 10^ 5 , 1\u2264 n\u2264 10^ 5 , 0\u2264 m\u2264 10^ 5 , 1\u2264 k\u2264 10^ 5 ) \u2014 number of months in a year, days in a month, seconds in a day, times when the store ( according to a Martian) was opened, when it was closed and Natasha' s queries. The i - th of the next n lines contains 3 integers x_ i , y_ i , z_ i ( 1\u2264 x_ i\u2264 x_ max , 1\u2264 y_ i\u2264 y_ max , 1\u2264 z_ i\u2264 z_ max ) \u2014 month, day and second of i - th time, when the store, according to the Martian, was opened. The i - th of the next m lines contains 3 integers x_ i , y_ i , z_ i ( 1\u2264 x_ i\u2264 x_ max , 1\u2264 y_ i\u2264 y_ max , 1\u2264 z_ i\u2264 z_ max ) \u2014 month, day and second of i - th time, when the store, according to the Martian, was closed. The i - th of the next k lines contains 3 integers x_ i , y_ i , z_ i ( 1\u2264 x_ i\u2264 x_ max , 1\u2264 y_ i\u2264 y_ max , 1\u2264 z_ i\u2264 z_ max ) \u2014 month, day and second of i - th Natasha' s query.",
    "output": "If the Martian was mistaken and his information about when the store is open and when it is closed is inconsistent, print a single line \" INCORRECT\" ( without quotes) . Otherwise, print the first line \" CORRECT\" ( without quotes) . Next output k lines: in i - th of them, output an answer to i - th Natasha' s query: \" OPEN\" ( without quotes) , if the store was opened at the moment of this query, \" CLOSED\" ( without quotes) , if it was closed, or \" UNKNOWN\" ( without quotes) , if this information can not be determined on the basis of available data.",
    "note": "Consider the first test case. There are 10 months in a year, 10 days in a month, and 10 seconds in a day. The store was opened in 3 moments: month 2 , day 6 , second 2 ; month 4 , day 2 , second 4 ; month 6 , day 4 , second 6 . The store was closed at the time: month 9 , day 9 , second 9 . Queries: month 3 , day 3 , second 3 \u2014 open ( \" OPEN\" ) ( since the store opens no later than month 2 , day 2 , second 2 and closes no earlier than in month 6 , day 6 , second 6 ) ; month 10 , day 10 , second 10 \u2014 closed ( \" CLOSED\" ) ( since it is closed even in the month 9 , day 9 , second 9 ) ; month 8 , day 8 , second 8 \u2014 unknown ( \" UNKNOWN\" ) ( because the schedule in which the store is open at this moment exists, and the schedule in which the store is closed at this moment exists as well) . In the second test case, the store was closed and opened at the same time \u2014 contradiction ( \" INCORRECT\" ) .",
    "topics": [
      "data structures"
    ],
    "id": "1010E"
  },
  {
    "title": "Dominant Indices",
    "url": "https://codeforces.com/problemset/problem/1009/F",
    "history": "You are given a rooted undirected tree consisting of n vertices. Vertex 1 is the root. Let' s denote a depth array of vertex x as an infinite sequence [ d_ x, 0, d_ x, 1, d_ x, 2, . . . ] , where d_ x, i is the number of vertices y such that both conditions hold: x is an ancestor of y ; the simple path from x to y traverses exactly i edges. The dominant index of a depth array of vertex x ( or, shortly, the dominant index of vertex x ) is an index j such that: for every k < j , d_ x, k < d_ x, j ; for every k > j , d_ x, k\u2264 d_ x, j . For every vertex in the tree calculate its dominant index.",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 10^ 6 ) \u2014 the number of vertices in a tree. Then n - 1 lines follow, each containing two integers x and y ( 1 \u2264 x, y \u2264 n , x y ) . This line denotes an edge of the tree. It is guaranteed that these edges form a tree.",
    "output": "Output n numbers. i - th number should be equal to the dominant index of vertex i .",
    "note": "",
    "topics": [
      "data structures",
      "dsu",
      "trees"
    ],
    "id": "1009F"
  },
  {
    "title": "Ants",
    "url": "https://codeforces.com/problemset/problem/1007/D",
    "history": "There is a tree with n vertices. There are also m ants living on it. Each ant has its own color. The i - th ant has two favorite pairs of vertices: ( a_ i, b_ i ) and ( c_ i, d_ i ) . You need to tell if it is possible to paint the edges of the tree in m colors so that every ant will be able to walk between vertices from one of its favorite pairs using only edges of his color; if it is possible, you need to print which pair every ant should use.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 10^ 5 ) \u2014 the number of vertices. Each of the next n- 1 lines contains two integers u_ i and v_ i ( 1 \u2264 u_ i, v_ i \u2264 n ) , meaning that there is an edge between vertices u_ i and v_ i . The next line contains a single integer m ( 1 \u2264 m \u2264 10^ 4 ) \u2014 the number of ants. Each of the next m lines contains four integers a_ i , b_ i , c_ i , and d_ i ( 1 \u2264 a_ i, b_ i, c_ i, d_ i \u2264 n , a_ i = \u0338 b_ i, c_ i = \u0338 d_ i ) , meaning that pairs ( a_ i , b_ i ) and ( c_ i , d_ i ) are favorite for the i - th ant.",
    "output": "Print \" NO\" ( without quotes) if the wanted painting is impossible. Otherwise, print \" YES\" ( without quotes) . Print m lines. On the i - th line, print 1 if the i - th ant will use the first pair and 2 otherwise. If there are multiple answers, print any.",
    "note": "In the sample, the second and the third edge should be painted in the first color, the first and the fifth should be painted in the second color, and the fourth should be painted in the third color.",
    "topics": [
      "2-sat",
      "data structures",
      "trees"
    ],
    "id": "1007D"
  },
  {
    "title": "Reorder the Array",
    "url": "https://codeforces.com/problemset/problem/1007/A",
    "history": "You are given an array of integers. Vasya can permute ( change order) its integers. He wants to do it so that as many as possible integers will become on a place where a smaller integer used to stand. Help Vasya find the maximal number of such integers. For instance, if we are given an array [ 10, 20, 30, 40] , we can permute it so that it becomes [ 20, 40, 10, 30] . Then on the first and the second positions the integers became larger ( 20> 10 , 40> 20 ) and did not on the third and the fourth, so for this permutation, the number that Vasya wants to maximize equals 2 . Read the note for the first example, there is one more demonstrative test case. Help Vasya to permute integers in such way that the number of positions in a new array, where integers are greater than in the original one, is maximal.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of the array. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the elements of the array.",
    "output": "Print a single integer \u2014 the maximal number of the array' s elements which after a permutation will stand on the position where a smaller element stood in the initial array.",
    "note": "In the first sample, one of the best permutations is [ 1, 5, 5, 3, 10, 1, 1] . On the positions from second to fifth the elements became larger, so the answer for this permutation is 4. In the second sample, there is no way to increase any element with a permutation, so the answer is 0.",
    "topics": [
      "combinatorics",
      "data structures",
      "math",
      "sortings",
      "two pointers"
    ],
    "id": "1007A"
  },
  {
    "title": "Three Parts of the Array",
    "url": "https://codeforces.com/problemset/problem/1006/C",
    "history": "You are given an array d_ 1, d_ 2, . . . , d_ n consisting of n integer numbers. Your task is to split this array into three parts ( some of which may be empty) in such a way that each element of the array belongs to exactly one of the three parts, and each of the parts forms a consecutive contiguous subsegment ( possibly, empty) of the original array. Let the sum of elements of the first part be sum_ 1 , the sum of elements of the second part be sum_ 2 and the sum of elements of the third part be sum_ 3 . Among all possible ways to split the array you have to choose a way such that sum_ 1 = sum_ 3 and sum_ 1 is maximum possible. More formally, if the first part of the array contains a elements, the second part of the array contains b elements and the third part contains c elements, then: sum_ 1 = \u2211_ 1 \u2264 i \u2264 ad_ i, sum_ 2 = \u2211_ a + 1 \u2264 i \u2264 a + bd_ i, sum_ 3 = \u2211_ a + b + 1 \u2264 i \u2264 a + b + cd_ i. The sum of an empty array is 0 . Your task is to find a way to split the array such that sum_ 1 = sum_ 3 and sum_ 1 is maximum possible.",
    "input": "The first line of the input contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of elements in the array d . The second line of the input contains n integers d_ 1, d_ 2, . . . , d_ n ( 1 \u2264 d_ i \u2264 10^ 9 ) \u2014 the elements of the array d .",
    "output": "Print a single integer \u2014 the maximum possible value of sum_ 1 , considering that the condition sum_ 1 = sum_ 3 must be met. Obviously, at least one valid way to split the array exists ( use a= c= 0 and b= n ) .",
    "note": "In the first example there is only one possible splitting which maximizes sum_ 1 : [ 1, 3, 1] , [ ] , [ 1, 4] . In the second example the only way to have sum_ 1= 4 is: [ 1, 3] , [ 2, 1] , [ 4] . In the third example there is only one way to split the array: [ ] , [ 4, 1, 2] , [ ] .",
    "topics": [
      "binary search",
      "data structures",
      "two pointers"
    ],
    "id": "1006C"
  },
  {
    "title": "Sonya and Bitwise OR",
    "url": "https://codeforces.com/problemset/problem/1004/F",
    "history": "Sonya has an array a_ 1, a_ 2, . . . , a_ n consisting of n integers and also one non- negative integer x . She has to perform m queries of two types: 1 i y : replace i - th element by value y , i. e. to perform an operation a_ i : = y ; 2 l r : find the number of pairs ( L , R ) that l\u2264 L\u2264 R\u2264 r and bitwise OR of all integers in the range [ L, R] is at least x ( note that x is a constant for all queries) . Can you help Sonya perform all her queries? Bitwise OR is a binary operation on a pair of non- negative integers. To calculate the bitwise OR of two numbers, you need to write both numbers in binary notation. The result is a number, in binary, which contains a one in each digit if there is a one in the binary notation of at least one of the two numbers. For example, 10 OR 19 = 1010_ 2 OR 10011_ 2 = 11011_ 2 = 27 .",
    "input": "The first line contains three integers n , m , and x ( 1\u2264 n, m\u2264 10^ 5 , 0\u2264 x< 2^ 20 ) \u2014 the number of numbers, the number of queries, and the constant for all queries. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0\u2264 a_ i< 2^ 20 ) \u2014 numbers of the array. The following m lines each describe an query. A line has one of the following formats: 1 i y ( 1\u2264 i\u2264 n , 0\u2264 y< 2^ 20 ) , meaning that you have to replace a_ i by y ; 2 l r ( 1\u2264 l\u2264 r\u2264 n ) , meaning that you have to find the number of subarrays on the segment from l to r that the bitwise OR of all numbers there is at least x .",
    "output": "For each query of type 2, print the number of subarrays such that the bitwise OR of all the numbers in the range is at least x .",
    "note": "In the first example, there are an array [ 0 , 3 , 6 , 1 ] and queries: on the segment [ 1. . . 4 ] , you can choose pairs ( 1 , 3 ) , ( 1 , 4 ) , ( 2 , 3 ) , ( 2 , 4 ) , and ( 3 , 4 ) ; on the segment [ 3. . . 4 ] , you can choose pair ( 3 , 4 ) ; the first number is being replacing by 7 , after this operation, the array will consist of [ 7 , 3 , 6 , 1 ] ; on the segment [ 1. . . 4 ] , you can choose pairs ( 1 , 1 ) , ( 1 , 2 ) , ( 1 , 3 ) , ( 1 , 4 ) , ( 2 , 3 ) , ( 2 , 4 ) , and ( 3 , 4 ) ; on the segment [ 1. . . 3 ] , you can choose pairs ( 1 , 1 ) , ( 1 , 2 ) , ( 1 , 3 ) , and ( 2 , 3 ) ; on the segment [ 1. . . 1 ] , you can choose pair ( 1 , 1 ) ; the third number is being replacing by 0 , after this operation, the array will consist of [ 7 , 3 , 0 , 1 ] ; on the segment [ 1. . . 4 ] , you can choose pairs ( 1 , 1 ) , ( 1 , 2 ) , ( 1 , 3 ) , and ( 1 , 4 ) . In the second example, there are an array [ 6 , 0 , 3 , 15 , 2 ] are queries: on the segment [ 1. . . 5 ] , you can choose pairs ( 1 , 3 ) , ( 1 , 4 ) , ( 1 , 5 ) , ( 2 , 4 ) , ( 2 , 5 ) , ( 3 , 4 ) , ( 3 , 5 ) , ( 4 , 4 ) , and ( 4 , 5 ) ; the fourth number is being replacing by 4 , after this operation, the array will consist of [ 6 , 0 , 3 , 4 , 2 ] ; on the segment [ 1. . . 5 ] , you can choose pairs ( 1 , 3 ) , ( 1 , 4 ) , ( 1 , 5 ) , ( 2 , 4 ) , ( 2 , 5 ) , ( 3 , 4 ) , and ( 3 , 5 ) ; on the segment [ 3. . . 5 ] , you can choose pairs ( 3 , 4 ) and ( 3 , 5 ) ; on the segment [ 1. . . 4 ] , you can choose pairs ( 1 , 3 ) , ( 1 , 4 ) , ( 2 , 4 ) , and ( 3 , 4 ) .",
    "topics": [
      "bitmasks",
      "data structures",
      "divide and conquer"
    ],
    "id": "1004F"
  },
  {
    "title": "Sonya and Ice Cream",
    "url": "https://codeforces.com/problemset/problem/1004/E",
    "history": "Sonya likes ice cream very much. She eats it even during programming competitions. That is why the girl decided that she wants to open her own ice cream shops. Sonya lives in a city with n junctions and n- 1 streets between them. All streets are two- way and connect two junctions. It is possible to travel from any junction to any other using one or more streets. City Hall allows opening shops only on junctions. The girl cannot open shops in the middle of streets. Sonya has exactly k friends whom she can trust. If she opens a shop, one of her friends has to work there and not to allow anybody to eat an ice cream not paying for it. Since Sonya does not want to skip an important competition, she will not work in shops personally. Sonya wants all her ice cream shops to form a simple path of the length r ( 1 \u2264 r \u2264 k ) , i. e. to be located in different junctions f_ 1, f_ 2, . . . , f_ r and there is street between f_ i and f_ i+ 1 for each i from 1 to r- 1 . The girl takes care of potential buyers, so she also wants to minimize the maximum distance between the junctions to the nearest ice cream shop. The distance between two junctions a and b is equal to the sum of all the street lengths that you need to pass to get from the junction a to the junction b . So Sonya wants to minimize max_ amin_ 1 \u2264 i \u2264 r d_ a, f_ i where a takes a value of all possible n junctions, f_ i \u2014 the junction where the i - th Sonya' s shop is located, and d_ x, y \u2014 the distance between the junctions x and y . Sonya is not sure that she can find the optimal shops locations, that is why she is asking you to help her to open not more than k shops that will form a simple path and the maximum distance between any junction and the nearest shop would be minimal.",
    "input": "The first line contains two integers n and k ( 1\u2264 k\u2264 n\u2264 10^ 5 ) \u2014 the number of junctions and friends respectively. Each of the next n- 1 lines contains three integers u_ i , v_ i , and d_ i ( 1\u2264 u_ i, v_ i\u2264 n , v_ i= \u0338 u_ i , 1\u2264 d\u2264 10^ 4 ) \u2014 junctions that are connected by a street and the length of this street. It is guaranteed that each pair of junctions is connected by at most one street. It is guaranteed that you can get from any junctions to any other.",
    "output": "Print one number \u2014 the minimal possible maximum distance that you need to pass to get from any junction to the nearest ice cream shop. Sonya' s shops must form a simple path and the number of shops must be at most k .",
    "note": "In the first example, you can choose the path 2- 4, so the answer will be 4. The first example. In the second example, you can choose the path 4- 1- 2, so the answer will be 7. The second example.",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "greedy",
      "shortest paths",
      "trees"
    ],
    "id": "1004E"
  },
  {
    "title": "Two-Paths",
    "url": "https://codeforces.com/problemset/problem/1000/G",
    "history": "You are given a weighted tree ( undirected connected graph with no cycles, loops or multiple edges) with n vertices. The edge { u_ j, v_ j} has weight w_ j . Also each vertex i has its own value a_ i assigned to it. Let' s call a path starting in vertex u and ending in vertex v , where each edge can appear no more than twice ( regardless of direction) , a 2- path. Vertices can appear in the 2- path multiple times ( even start and end vertices) . For some 2- path p profit Pr( p) = \u2211_ v \u2208distinct vertices in pa_ v - \u2211_ e \u2208distinct edges in pk_ e \u00b7 w_ e , where k_ e is the number of times edge e appears in p . That is, vertices are counted once, but edges are counted the number of times they appear in p . You are about to answer m queries. Each query is a pair of vertices ( qu, qv) . For each query find 2- path p from qu to qv with maximal profit Pr( p) .",
    "input": "The first line contains two integers n and q ( 2 \u2264 n \u2264 3 \u00b7 10^ 5 , 1 \u2264 q \u2264 4 \u00b7 10^ 5 ) \u2014 the number of vertices in the tree and the number of queries. The second line contains n space- separated integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9) \u2014 the values of the vertices. Next n - 1 lines contain descriptions of edges: each line contains three space separated integers u_ i , v_ i and w_ i ( 1 \u2264 u_ i, v_ i \u2264 n , u_ i = \u0338 v_ i , 1 \u2264 w_ i \u2264 10^ 9 ) \u2014 there is edge { u_ i, v_ i} with weight w_ i in the tree. Next q lines contain queries ( one per line) . Each query contains two integers qu_ i and qv_ i ( 1 \u2264 qu_ i, qv_ i \u2264 n) \u2014 endpoints of the 2- path you need to find.",
    "output": "For each query print one integer per line \u2014 maximal profit Pr( p) of the some 2- path p with the corresponding endpoints.",
    "note": "Explanation of queries: ( 1, 1) \u2014 one of the optimal 2- paths is the following: 1 \u2192 2 \u2192 4 \u2192 5 \u2192 4 \u2192 2 \u2192 3 \u2192 2 \u2192 1 . Pr( p) = ( a_ 1 + a_ 2 + a_ 3 + a_ 4 + a_ 5) - ( 2 \u00b7 w( 1, 2) + 2 \u00b7 w( 2, 3) + 2 \u00b7 w( 2, 4) + 2 \u00b7 w( 4, 5) ) = 21 - 2 \u00b7 12 = 9 . ( 4, 4) : 4 \u2192 2 \u2192 1 \u2192 2 \u2192 3 \u2192 2 \u2192 4 . Pr( p) = ( a_ 1 + a_ 2 + a_ 3 + a_ 4) - 2 \u00b7 ( w( 1, 2) + w( 2, 3) + w( 2, 4) ) = 19 - 2 \u00b7 10 = 9 . ( 5, 6) : 5 \u2192 4 \u2192 2 \u2192 3 \u2192 2 \u2192 1 \u2192 2 \u2192 4 \u2192 6 . ( 6, 4) : 6 \u2192 4 \u2192 2 \u2192 1 \u2192 2 \u2192 3 \u2192 2 \u2192 4 . ( 3, 4) : 3 \u2192 2 \u2192 1 \u2192 2 \u2192 4 . ( 3, 7) : 3 \u2192 2 \u2192 1 \u2192 2 \u2192 4 \u2192 5 \u2192 4 \u2192 2 \u2192 3 \u2192 7 .",
    "topics": [
      "data structures",
      "dp",
      "trees"
    ],
    "id": "1000G"
  },
  {
    "title": "One Occurrence",
    "url": "https://codeforces.com/problemset/problem/1000/F",
    "history": "You are given an array a consisting of n integers, and q queries to it. i - th query is denoted by two integers l_ i and r_ i . For each query, you have to find any integer that occurs exactly once in the subarray of a from index l_ i to index r_ i ( a subarray is a contiguous subsegment of an array) . For example, if a = [ 1, 1, 2, 3, 2, 4] , then for query ( l_ i = 2, r_ i = 6) the subarray we are interested in is [ 1, 2, 3, 2, 4] , and possible answers are 1 , 3 and 4 ; for query ( l_ i = 1, r_ i = 2) the subarray we are interested in is [ 1, 1] , and there is no such element that occurs exactly once. Can you answer all of the queries?",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 5 \u00b7 10^ 5 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 5 \u00b7 10^ 5 ) . The third line contains one integer q ( 1 \u2264 q \u2264 5 \u00b7 10^ 5 ) . Then q lines follow, i - th line containing two integers l_ i and r_ i representing i - th query ( 1 \u2264 l_ i \u2264 r_ i \u2264 n ) .",
    "output": "Answer the queries as follows: If there is no integer such that it occurs in the subarray from index l_ i to index r_ i exactly once, print 0 . Otherwise print any such integer.",
    "note": "",
    "topics": [
      "data structures",
      "divide and conquer"
    ],
    "id": "1000F"
  },
  {
    "title": "Covered Points Count",
    "url": "https://codeforces.com/problemset/problem/1000/C",
    "history": "You are given n segments on a coordinate line; each endpoint of every segment has integer coordinates. Some segments can degenerate to points. Segments can intersect with each other, be nested in each other or even coincide. Your task is the following: for every k \u2208 [ 1. . n] , calculate the number of points with integer coordinates such that the number of segments that cover these points equals k . A segment with endpoints l_ i and r_ i covers point x if and only if l_ i \u2264 x \u2264 r_ i .",
    "input": "The first line of the input contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of segments. The next n lines contain segments. The i - th line contains a pair of integers l_ i, r_ i ( 0 \u2264 l_ i \u2264 r_ i \u2264 10^ 18 ) \u2014 the endpoints of the i - th segment.",
    "output": "Print n space separated integers cnt_ 1, cnt_ 2, . . . , cnt_ n , where cnt_ i is equal to the number of points such that the number of segments that cover these points equals to i .",
    "note": "The picture describing the first example: Points with coordinates [ 0, 4, 5, 6, 7, 8] are covered by one segment, points [ 1, 2] are covered by two segments and point [ 3] is covered by three segments. The picture describing the second example: Points [ 1, 4, 5, 6, 7] are covered by one segment, points [ 2, 3] are covered by two segments and there are no points covered by three segments.",
    "topics": [
      "data structures",
      "implementation",
      "sortings"
    ],
    "id": "1000C"
  },
  {
    "title": "Equalize the Remainders",
    "url": "https://codeforces.com/problemset/problem/999/D",
    "history": "You are given an array consisting of n integers a_ 1, a_ 2, . . . , a_ n , and a positive integer m . It is guaranteed that m is a divisor of n . In a single move, you can choose any position i between 1 and n and increase a_ i by 1 . Let' s calculate c_ r ( 0 \u2264 r \u2264 m- 1) \u2014 the number of elements having remainder r when divided by m . In other words, for each remainder, let' s find the number of corresponding elements in a with that remainder. Your task is to change the array in such a way that c_ 0 = c_ 1 = . . . = c_ m- 1 = n/ m . Find the minimum number of moves to satisfy the above requirement.",
    "input": "The first line of input contains two integers n and m ( 1 \u2264 n \u2264 2 \u00b7 10^ 5, 1 \u2264 m \u2264 n ) . It is guaranteed that m is a divisor of n . The second line of input contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) , the elements of the array.",
    "output": "In the first line, print a single integer \u2014 the minimum number of moves required to satisfy the following condition: for each remainder from 0 to m - 1 , the number of elements of the array having this remainder equals n/ m . In the second line, print any array satisfying the condition and can be obtained from the given array with the minimum number of moves. The values of the elements of the resulting array must not exceed 10^ 18 .",
    "note": "",
    "topics": [
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "999D"
  },
  {
    "title": "Good Subsegments",
    "url": "https://codeforces.com/problemset/problem/997/E",
    "history": "A permutation p of length n is a sequence p_ 1, p_ 2, . . . , p_ n consisting of n distinct integers, each of which from 1 to n ( 1 \u2264 p_ i \u2264 n ) . Let' s call the subsegment [ l, r] of the permutation good if all numbers from the minimum on it to the maximum on this subsegment occur among the numbers p_ l, p_ l+ 1, . . . , p_ r . For example, good segments of permutation [ 1, 3, 2, 5, 4] are: [ 1, 1] , [ 1, 3] , [ 1, 5] , [ 2, 2] , [ 2, 3] , [ 2, 5] , [ 3, 3] , [ 4, 4] , [ 4, 5] , [ 5, 5] . You are given a permutation p_ 1, p_ 2, . . . , p_ n . You need to answer q queries of the form: find the number of good subsegments of the given segment of permutation. In other words, to answer one query, you need to calculate the number of good subsegments [ x . . . y] for some given segment [ l . . . r] , such that l \u2264 x \u2264 y \u2264 r .",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 120000 ) \u2014 the number of elements in the permutation. The second line contains n distinct integers p_ 1, p_ 2, . . . , p_ n separated by spaces ( 1 \u2264 p_ i \u2264 n ) . The third line contains an integer q ( 1 \u2264 q \u2264 120000 ) \u2014 number of queries. The following q lines describe queries, each line contains a pair of integers l , r separated by space ( 1 \u2264 l \u2264 r \u2264 n ) .",
    "output": "Print a q lines, i - th of them should contain a number of good subsegments of a segment, given in the i - th query.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": "997E"
  },
  {
    "title": "Leaving the Bar",
    "url": "https://codeforces.com/problemset/problem/995/C",
    "history": "For a vector v\u20d7 = ( x, y) , define | v| = \u221a( x^ 2 + y^ 2) . Allen had a bit too much to drink at the bar, which is at the origin. There are n vectors v\u20d7_ \u20d71\u20d7, v\u20d7_ \u20d72\u20d7, \u22ef, v\u20d7_ \u20d7n\u20d7 . Allen will make n moves. As Allen' s sense of direction is impaired, during the i - th move he will either move in the direction v\u20d7_ \u20d7i\u20d7 or - v\u20d7_ \u20d7i\u20d7 . In other words, if his position is currently p = ( x, y) , he will either move to p + v\u20d7_ \u20d7i\u20d7 or p - v\u20d7_ \u20d7i\u20d7 . Allen doesn' t want to wander too far from home ( which happens to also be the bar) . You need to help him figure out a sequence of moves ( a sequence of signs for the vectors) such that his final position p satisfies | p| \u2264 1. 5 \u00b7 10^ 6 so that he can stay safe.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of moves. Each of the following lines contains two space- separated integers x_ i and y_ i , meaning that v\u20d7_ \u20d7i\u20d7 = ( x_ i, y_ i) . We have that | v_ i| \u2264 10^ 6 for all i .",
    "output": "Output a single line containing n integers c_ 1, c_ 2, \u22ef, c_ n , each of which is either 1 or - 1 . Your solution is correct if the value of p = \u2211_ i = 1^ n c_ i v\u20d7_ \u20d7i\u20d7 , satisfies | p| \u2264 1. 5 \u00b7 10^ 6 . It can be shown that a solution always exists under the given constraints.",
    "note": "",
    "topics": [
      "brute force",
      "data structures",
      "geometry",
      "greedy",
      "math",
      "sortings"
    ],
    "id": "995C"
  },
  {
    "title": "Nastya and King-Shamans",
    "url": "https://codeforces.com/problemset/problem/992/E",
    "history": "Nastya likes reading and even spends whole days in a library sometimes. Today she found a chronicle of Byteland in the library, and it stated that there lived shamans long time ago. It is known that at every moment there was exactly one shaman in Byteland, and there were n shamans in total enumerated with integers from 1 to n in the order they lived. Also, each shaman had a magic power which can now be expressed as an integer. The chronicle includes a list of powers of the n shamans. Also, some shamans can be king- shamans, if they gathered all the power of their predecessors, i. e. their power is exactly the sum of powers of all previous shamans. Nastya is interested in whether there was at least one king- shaman in Byteland. Unfortunately many of the powers are unreadable in the list, so Nastya is doing the following: Initially she supposes some power for each shaman. After that she changes the power of some shaman q times ( the shamans can differ) and after that wants to check if there is at least one king- shaman in the list. If yes, she wants to know the index of any king- shaman. Unfortunately the list is too large and Nastya wants you to help her.",
    "input": "The first line contains two integers n and q ( 1 \u2264 n, q \u2264 2\u00b7105) . The second line contains n integers a1, . . . , an ( 0 \u2264 ai \u2264 109) , where ai is the magic power of the i- th shaman. After that q lines follow, the i- th of them contains two integers pi and xi ( 1 \u2264 pi \u2264 n, 0 \u2264 xi \u2264 109) that mean that the new power of the pi- th shaman is xi.",
    "output": "Print q lines, the i- th of them should contain - 1, if after the i- th change there are no shaman- kings, and otherwise a single integer j, where j is an index of some king- shaman after the i- th change. If there are multiple king- shamans after each change, print the index of any of them.",
    "note": "In the first example powers of shamans after the first change are equal to ( 2, 3) . The answer equals - 1, because the sum of powers of shamans before the first shaman is equal to 0, and before the second is equal to 2. In the second example after the first change the powers are equal to ( 1, 2, 3) . The answer is equal to 3, because the power of the third shaman is equal to 3, and the sum of powers of the first and the second shaman is also 1 + 2 = 3. After the second change the powers become equal to ( 2, 2, 3) , where the answer equals 2. After the third change the powers become equal to ( 2, 4, 3) , where the answer equals - 1. After the fourth change the powers become equal to ( 2, 4, 6) , where the answer equals 3.",
    "topics": [
      "binary search",
      "data structures"
    ],
    "id": "992E"
  },
  {
    "title": "Prince's Problem",
    "url": "https://codeforces.com/problemset/problem/986/E",
    "history": "Let the main characters of this problem be personages from some recent movie. New Avengers seem to make a lot of buzz. I didn' t watch any part of the franchise and don' t know its heroes well, but it won' t stop me from using them in this problem statement. So, Thanos and Dr. Strange are doing their superhero and supervillain stuff, but then suddenly they stumble across a regular competitive programming problem. You are given a tree with n vertices. In each vertex v there is positive integer a_ v . You have to answer q queries. Each query has a from u v x . You have to calculate \u220f_ w \u2208 P gcd( x, a_ w) ( 10^ 9 + 7) , where P is a set of vertices on path from u to v . In other words, you are to calculate the product of gcd( x, a_ w) for all vertices w on the path from u to v . As it might be large, compute it modulo 10^ 9+ 7 . Here gcd( s, t) denotes the greatest common divisor of s and t . Note that the numbers in vertices do not change after queries. I suppose that you are more interested in superhero business of Thanos and Dr. Strange than in them solving the problem. So you are invited to solve this problem instead of them.",
    "input": "In the first line of input there is one integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the size of the tree. In the next n- 1 lines the edges of the tree are described. The i - th edge is described with two integers u_ i and v_ i ( 1 \u2264 u_ i, v_ i\u2264 n ) and it connects the vertices u_ i and v_ i . It is guaranteed that graph with these edges is a tree. In the next line there are n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ v\u2264 10^ 7 ) . In the next line there is one integer q ( 1 \u2264 q \u2264 10^ 5 ) \u2014 the number of queries. And in the next q lines the queries are described. Each query is described with three integers u_ i , v_ i and x_ i ( 1 \u2264 u_ i, v_ i\u2264 n , 1 \u2264 x_ i\u2264 10^ 7 ) .",
    "output": "Print q numbers \u2014 the answers to the queries in the order they are given in the input. Print each answer modulo 10^ 9+ 7 = 1000000007 . Print each number on a separate line.",
    "note": "",
    "topics": [
      "brute force",
      "data structures",
      "math",
      "number theory",
      "trees"
    ],
    "id": "986E"
  },
  {
    "title": "Pencils and Boxes",
    "url": "https://codeforces.com/problemset/problem/985/E",
    "history": "Mishka received a gift of multicolored pencils for his birthday! Unfortunately he lives in a monochrome world, where everything is of the same color and only saturation differs. This pack can be represented as a sequence a1, a2, . . . , an of n integer numbers \u2014 saturation of the color of each pencil. Now Mishka wants to put all the mess in the pack in order. He has an infinite number of empty boxes to do this. He would like to fill some boxes in such a way that: Each pencil belongs to exactly one box; Each non- empty box has at least k pencils in it; If pencils i and j belong to the same box, then | ai - aj| \u2264 d, where | x| means absolute value of x. Note that the opposite is optional, there can be pencils i and j such that | ai - aj| \u2264 d and they belong to different boxes. Help Mishka to determine if it' s possible to distribute all the pencils into boxes. Print \" YES\" if there exists such a distribution. Otherwise print \" NO\" .",
    "input": "The first line contains three integer numbers n, k and d ( 1 \u2264 k \u2264 n \u2264 5\u00b7105, 0 \u2264 d \u2264 109) \u2014 the number of pencils, minimal size of any non- empty box and maximal difference in saturation between any pair of pencils in the same box, respectively. The second line contains n integer numbers a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) \u2014 saturation of color of each pencil.",
    "output": "Print \" YES\" if it' s possible to distribute all the pencils into boxes and satisfy all the conditions. Otherwise print \" NO\" .",
    "note": "In the first example it is possible to distribute pencils into 2 boxes with 3 pencils in each with any distribution. And you also can put all the pencils into the same box, difference of any pair in it won' t exceed 10. In the second example you can split pencils of saturations [ 4, 5, 3, 4] into 2 boxes of size 2 and put the remaining ones into another box.",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "greedy",
      "two pointers"
    ],
    "id": "985E"
  },
  {
    "title": "NN country",
    "url": "https://codeforces.com/problemset/problem/983/E",
    "history": "In the NN country, there are n cities, numbered from 1 to n , and n - 1 roads, connecting them. There is a roads path between any two cities. There are m bidirectional bus routes between cities. Buses drive between two cities taking the shortest path with stops in every city they drive through. Travelling by bus, you can travel from any stop on the route to any other. You can travel between cities only by bus. You are interested in q questions: is it possible to get from one city to another and what is the minimum number of buses you need to use for it?",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of cities. The second line contains n - 1 integers p_ 2, p_ 3, . . . , p_ n ( 1 \u2264 p_ i < i ) , where p_ i means that cities p_ i and i are connected by road. The third line contains a single integer m ( 1 \u2264 m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of bus routes. Each of the next m lines contains 2 integers a and b ( 1 \u2264 a, b \u2264 n , a = \u0338 b ) , meaning that there is a bus route between cities a and b . It is possible that there is more than one route between two cities. The next line contains a single integer q ( 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of questions you are interested in. Each of the next q lines contains 2 integers v and u ( 1 \u2264 v, u \u2264 n , v = \u0338 u ) , meaning that you are interested if it is possible to get from city v to city u and what is the minimum number of buses you need to use for it.",
    "output": "Print the answer for each question on a separate line. If there is no way to get from one city to another, print - 1 . Otherwise print the minimum number of buses you have to use.",
    "note": "Routes for first sample are marked on the picture.",
    "topics": [
      "binary search",
      "data structures",
      "trees"
    ],
    "id": "983E"
  },
  {
    "title": "Arkady and Rectangles",
    "url": "https://codeforces.com/problemset/problem/983/D",
    "history": "Arkady has got an infinite plane painted in color 0 . Then he draws n rectangles filled with paint with sides parallel to the Cartesian coordinate axes, one after another. The color of the i - th rectangle is i ( rectangles are enumerated from 1 to n in the order he draws them) . It is possible that new rectangles cover some of the previous ones completely or partially. Count the number of different colors on the plane after Arkady draws all the rectangles.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 100 000 ) \u2014 the number of rectangles. The i - th of the next n lines contains 4 integers x_ 1 , y_ 1 , x_ 2 and y_ 2 ( - 10^ 9 \u2264 x_ 1 < x_ 2 \u2264 10^ 9 , - 10^ 9 \u2264 y_ 1 < y_ 2 \u2264 10^ 9 ) \u2014 the coordinates of corners of the i - th rectangle.",
    "output": "In the single line print the number of different colors in the plane, including color 0 .",
    "note": "That' s how the plane looks in the first sample That' s how the plane looks in the second sample 0 = white, 1 = cyan, 2 = blue, 3 = purple, 4 = yellow, 5 = red.",
    "topics": [
      "data structures"
    ],
    "id": "983D"
  },
  {
    "title": "Shark",
    "url": "https://codeforces.com/problemset/problem/982/D",
    "history": "For long time scientists study the behavior of sharks. Sharks, as many other species, alternate short movements in a certain location and long movements between locations. Max is a young biologist. For n days he watched a specific shark, and now he knows the distance the shark traveled in each of the days. All the distances are distinct. Max wants to know now how many locations the shark visited. He assumed there is such an integer k that if the shark in some day traveled the distance strictly less than k , then it didn' t change the location; otherwise, if in one day the shark traveled the distance greater than or equal to k ; then it was changing a location in that day. Note that it is possible that the shark changed a location for several consecutive days, in each of them the shark traveled the distance at least k . The shark never returned to the same location after it has moved from it. Thus, in the sequence of n days we can find consecutive nonempty segments when the shark traveled the distance less than k in each of the days: each such segment corresponds to one location. Max wants to choose such k that the lengths of all such segments are equal. Find such integer k , that the number of locations is as large as possible. If there are several such k , print the smallest one.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of days. The second line contains n distinct positive integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the distance traveled in each of the day.",
    "output": "Print a single integer k , such that the shark was in each location the same number of days, the number of locations is maximum possible satisfying the first condition, k is smallest possible satisfying the first and second conditions.",
    "note": "In the first example the shark travels inside a location on days 1 and 2 ( first location) , then on 4 - th and 5 - th days ( second location) , then on 7 - th and 8 - th days ( third location) . There are three locations in total. In the second example the shark only moves inside a location on the 2 - nd day, so there is only one location.",
    "topics": [
      "brute force",
      "data structures",
      "dsu",
      "trees"
    ],
    "id": "982D"
  },
  {
    "title": "Bus of Characters",
    "url": "https://codeforces.com/problemset/problem/982/B",
    "history": "In the Bus of Characters there are n rows of seat, each having 2 seats. The width of both seats in the i - th row is w_ i centimeters. All integers w_ i are distinct. Initially the bus is empty. On each of 2n stops one passenger enters the bus. There are two types of passengers: an introvert always chooses a row where both seats are empty. Among these rows he chooses the one with the smallest seats width and takes one of the seats in it; an extrovert always chooses a row where exactly one seat is occupied ( by an introvert) . Among these rows he chooses the one with the largest seats width and takes the vacant place in it. You are given the seats width in each row and the order the passengers enter the bus. Determine which row each passenger will take.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 200 000 ) \u2014 the number of rows in the bus. The second line contains the sequence of integers w_ 1, w_ 2, . . . , w_ n ( 1 \u2264 w_ i \u2264 10^ 9 ) , where w_ i is the width of each of the seats in the i - th row. It is guaranteed that all w_ i are distinct. The third line contains a string of length 2n , consisting of digits ' 0' and ' 1' \u2014 the description of the order the passengers enter the bus. If the j - th character is ' 0' , then the passenger that enters the bus on the j - th stop is an introvert. If the j - th character is ' 1' , the the passenger that enters the bus on the j - th stop is an extrovert. It is guaranteed that the number of extroverts equals the number of introverts ( i. e. both numbers equal n ) , and for each extrovert there always is a suitable row.",
    "output": "Print 2n integers \u2014 the rows the passengers will take. The order of passengers should be the same as in input.",
    "note": "In the first example the first passenger ( introvert) chooses the row 2 , because it has the seats with smallest width. The second passenger ( introvert) chooses the row 1 , because it is the only empty row now. The third passenger ( extrovert) chooses the row 1 , because it has exactly one occupied seat and the seat width is the largest among such rows. The fourth passenger ( extrovert) chooses the row 2 , because it is the only row with an empty place.",
    "topics": [
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "982B"
  },
  {
    "title": "K Paths",
    "url": "https://codeforces.com/problemset/problem/981/H",
    "history": "You are given a tree of n vertices. You are to select k ( not necessarily distinct) simple paths in such a way that it is possible to split all edges of the tree into three sets: edges not contained in any path, edges that are a part of exactly one of these paths, and edges that are parts of all selected paths, and the latter set should be non- empty. Compute the number of ways to select k paths modulo 998244353 . The paths are enumerated, in other words, two ways are considered distinct if there are such i ( 1 \u2264 i \u2264 k ) and an edge that the i - th path contains the edge in one way and does not contain it in the other.",
    "input": "The first line contains two integers n and k ( 1 \u2264 n, k \u2264 10^ 5 ) \u2014 the number of vertices in the tree and the desired number of paths. The next n - 1 lines describe edges of the tree. Each line contains two integers a and b ( 1 \u2264 a, b \u2264 n , a b ) \u2014 the endpoints of an edge. It is guaranteed that the given edges form a tree.",
    "output": "Print the number of ways to select k enumerated not necessarily distinct simple paths in such a way that for each edge either it is not contained in any path, or it is contained in exactly one path, or it is contained in all k paths, and the intersection of all paths is non- empty. As the answer can be large, print it modulo 998244353 .",
    "note": "In the first example the following ways are valid: ( ( 1, 2) , ( 1, 2) ) , ( ( 1, 2) , ( 1, 3) ) , ( ( 1, 3) , ( 1, 2) ) , ( ( 1, 3) , ( 1, 3) ) , ( ( 1, 3) , ( 2, 3) ) , ( ( 2, 3) , ( 1, 3) ) , ( ( 2, 3) , ( 2, 3) ) . In the second example k= 1 , so all n \u00b7 ( n - 1) / 2 = 5 \u00b7 4 / 2 = 10 paths are valid. In the third example, the answer is \u2265 998244353 , so it was taken modulo 998244353 , don' t forget it!",
    "topics": [
      "combinatorics",
      "data structures",
      "dp",
      "fft",
      "math"
    ],
    "id": "981H"
  },
  {
    "title": "Magic multisets",
    "url": "https://codeforces.com/problemset/problem/981/G",
    "history": "In the School of Magic in Dirtpolis a lot of interesting objects are studied on Computer Science lessons. Consider, for example, the magic multiset. If you try to add an integer to it that is already presented in the multiset, each element in the multiset duplicates. For example, if you try to add the integer 2 to the multiset { 1, 2, 3, 3} , you will get { 1, 1, 2, 2, 3, 3, 3, 3} . If you try to add an integer that is not presented in the multiset, it is simply added to it. For example, if you try to add the integer 4 to the multiset { 1, 2, 3, 3} , you will get { 1, 2, 3, 3, 4} . Also consider an array of n initially empty magic multisets, enumerated from 1 to n . You are to answer q queries of the form \" add an integer x to all multisets with indices l, l + 1, . . . , r \" and \" compute the sum of sizes of multisets with indices l, l + 1, . . . , r \" . The answers for the second type queries can be large, so print the answers modulo 998244353 .",
    "input": "The first line contains two integers n and q ( 1 \u2264 n, q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of magic multisets in the array and the number of queries, respectively. The next q lines describe queries, one per line. Each line starts with an integer t ( 1 \u2264 t \u2264 2 ) \u2014 the type of the query. If t equals 1 , it is followed by three integers l , r , x ( 1 \u2264 l \u2264 r \u2264 n , 1 \u2264 x \u2264 n ) meaning that you should add x to all multisets with indices from l to r inclusive. If t equals 2 , it is followed by two integers l , r ( 1 \u2264 l \u2264 r \u2264 n ) meaning that you should compute the sum of sizes of all multisets with indices from l to r inclusive.",
    "output": "For each query of the second type print the sum of sizes of multisets on the given segment. The answers can be large, so print them modulo 998244353 .",
    "note": "In the first example after the first two queries the multisets are equal to [ { 1, 2} , { 1, 2} , { } , { } ] , after the third query they are equal to [ { 1, 1, 2, 2} , { 1, 1, 2, 2} , { 1} , { 1} ] . In the second example the first multiset evolves as follows: { } \u2192{ 3} \u2192{ 3, 3} \u2192{ 2, 3, 3} \u2192{ 1, 2, 3, 3} \u2192{ 1, 1, 2, 2, 3, 3, 3, 3} .",
    "topics": [
      "data structures"
    ],
    "id": "981G"
  },
  {
    "title": "Addition on Segments",
    "url": "https://codeforces.com/problemset/problem/981/E",
    "history": "Grisha come to a contest and faced the following problem. You are given an array of size n , initially consisting of zeros. The elements of the array are enumerated from 1 to n . You perform q operations on the array. The i - th operation is described with three integers l_ i , r_ i and x_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 n , 1 \u2264 x_ i \u2264 n ) and means that you should add x_ i to each of the elements with indices l_ i, l_ i + 1, . . . , r_ i . After all operations you should find the maximum in the array. Grisha is clever, so he solved the problem quickly. However something went wrong inside his head and now he thinks of the following question: \" consider we applied some subset of the operations to the array. What are the possible values of the maximum in the array? \" Help Grisha, find all integers y between 1 and n such that if you apply some subset ( possibly empty) of the operations, then the maximum in the array becomes equal to y .",
    "input": "The first line contains two integers n and q ( 1 \u2264 n, q \u2264 10^ 4 ) \u2014 the length of the array and the number of queries in the initial problem. The following q lines contain queries, one per line. The i - th of these lines contains three integers l_ i , r_ i and x_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 n , 1 \u2264 x_ i \u2264 n ) , denoting a query of adding x_ i to the segment from l_ i - th to r_ i - th elements of the array, inclusive.",
    "output": "In the first line print the only integer k , denoting the number of integers from 1 to n , inclusive, that can be equal to the maximum in the array after applying some subset ( possibly empty) of the given operations. In the next line print these k integers from 1 to n \u2014 the possible values of the maximum. Print these integers in increasing order.",
    "note": "Consider the first example. If you consider the subset only of the first query, the maximum is equal to 1 . If you take only the second query, the maximum equals to 2 . If you take the first two queries, the maximum becomes 3 . If you take only the fourth query, the maximum becomes 4 . If you take the fourth query and something more, the maximum becomes greater that n , so you shouldn' t print it. In the second example you can take the first query to obtain 1 . You can take only the second query to obtain 2 . You can take all queries to obtain 3 . In the third example you can obtain the following maximums: You can achieve the maximim of 2 by using queries: ( 1) . You can achieve the maximim of 3 by using queries: ( 2) . You can achieve the maximim of 5 by using queries: ( 1, 2) . You can achieve the maximim of 6 by using queries: ( 3) . You can achieve the maximim of 8 by using queries: ( 1, 3) . You can achieve the maximim of 9 by using queries: ( 2, 3) .",
    "topics": [
      "bitmasks",
      "data structures",
      "divide and conquer",
      "dp"
    ],
    "id": "981E"
  },
  {
    "title": "The Number Games",
    "url": "https://codeforces.com/problemset/problem/980/E",
    "history": "The nation of Panel holds an annual show called The Number Games, where each district in the nation will be represented by one contestant. The nation has n districts numbered from 1 to n , each district has exactly one path connecting it to every other district. The number of fans of a contestant from district i is equal to 2^ i . This year, the president decided to reduce the costs. He wants to remove k contestants from the games. However, the districts of the removed contestants will be furious and will not allow anyone to cross through their districts. The president wants to ensure that all remaining contestants are from districts that can be reached from one another. He also wishes to maximize the total number of fans of the participating contestants. Which contestants should the president remove?",
    "input": "The first line of input contains two integers n and k ( 1 \u2264 k < n \u2264 10^ 6 ) \u2014 the number of districts in Panel, and the number of contestants the president wishes to remove, respectively. The next n- 1 lines each contains two integers a and b ( 1 \u2264 a, b \u2264 n , a b ) , that describe a road that connects two different districts a and b in the nation. It is guaranteed that there is exactly one path between every two districts.",
    "output": "Print k space- separated integers: the numbers of the districts of which the contestants should be removed, in increasing order of district number.",
    "note": "In the first sample, the maximum possible total number of fans is 2^ 2 + 2^ 5 + 2^ 6 = 100 . We can achieve it by removing the contestants of the districts 1, 3, and 4.",
    "topics": [
      "data structures",
      "greedy",
      "trees"
    ],
    "id": "980E"
  },
  {
    "title": "Kuro and GCD and XOR and SUM",
    "url": "https://codeforces.com/problemset/problem/979/D",
    "history": "Kuro is currently playing an educational game about numbers. The game focuses on the greatest common divisor ( GCD) , the XOR value, and the sum of two numbers. Kuro loves the game so much that he solves levels by levels day by day. Sadly, he' s going on a vacation for a day, and he isn' t able to continue his solving streak on his own. As Katie is a reliable person, Kuro kindly asked her to come to his house on this day to play the game for him. Initally, there is an empty array a . The game consists of q tasks of two types. The first type asks Katie to add a number u_ i to a . The second type asks Katie to find a number v existing in a such that k_ i | GCD( x_ i, v) , x_ i + v \u2264 s_ i , and x_ i \u2295 v is maximized, where \u2295 denotes the bitwise XOR operation, GCD( c, d) denotes the greatest common divisor of integers c and d , and y | x means x is divisible by y , or report - 1 if no such numbers are found. Since you are a programmer, Katie needs you to automatically and accurately perform the tasks in the game to satisfy her dear friend Kuro. Let' s help her!",
    "input": "The first line contains one integer q ( 2 \u2264 q \u2264 10^ 5 ) \u2014 the number of tasks the game wants you to perform. q lines follow, each line begins with an integer t_ i \u2014 the type of the task: If t_ i = 1 , an integer u_ i follow ( 1 \u2264 u_ i \u2264 10^ 5 ) \u2014 you have to add u_ i to the array a . If t_ i = 2 , three integers x_ i , k_ i , and s_ i follow ( 1 \u2264 x_ i, k_ i, s_ i \u2264 10^ 5 ) \u2014 you must find a number v existing in the array a such that k_ i | GCD( x_ i, v) , x_ i + v \u2264 s_ i , and x_ i \u2295 v is maximized, where \u2295 denotes the XOR operation, or report - 1 if no such numbers are found. It is guaranteed that the type of the first task is type 1 , and there exists at least one task of type 2 .",
    "output": "For each task of type 2 , output on one line the desired number v , or - 1 if no such numbers are found.",
    "note": "In the first example, there are 5 tasks: The first task requires you to add 1 into a . a is now { 1} . The second task requires you to add 2 into a . a is now { 1, 2} . The third task asks you a question with x = 1 , k = 1 and s = 3 . Taking both 1 and 2 as v satisfies 1 | GCD( 1, v) and 1 + v \u2264 3 . Because 2 \u2295 1 = 3 > 1 \u2295 1 = 0 , 2 is the answer to this task. The fourth task asks you a question with x = 1 , k = 1 and s = 2 . Only v = 1 satisfies 1 | GCD( 1, v) and 1 + v \u2264 2 , so 1 is the answer to this task. The fifth task asks you a question with x = 1 , k = 1 and s = 1 . There are no elements in a that satisfy the conditions, so we report - 1 as the answer to this task.",
    "topics": [
      "binary search",
      "bitmasks",
      "brute force",
      "data structures",
      "dp",
      "dsu",
      "greedy",
      "math",
      "number theory",
      "strings",
      "trees"
    ],
    "id": "979D"
  },
  {
    "title": "Mentors",
    "url": "https://codeforces.com/problemset/problem/978/F",
    "history": "In BerSoft n programmers work, the programmer i is characterized by a skill r_ i . A programmer a can be a mentor of a programmer b if and only if the skill of the programmer a is strictly greater than the skill of the programmer b ( r_ a > r_ b) and programmers a and b are not in a quarrel. You are given the skills of each programmers and a list of k pairs of the programmers, which are in a quarrel ( pairs are unordered) . For each programmer i , find the number of programmers, for which the programmer i can be a mentor.",
    "input": "The first line contains two integers n and k ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 , 0 \u2264 k \u2264min( 2 \u00b7 10^ 5, n \u00b7 ( n - 1) / 2) ) \u2014 total number of programmers and number of pairs of programmers which are in a quarrel. The second line contains a sequence of integers r_ 1, r_ 2, . . . , r_ n ( 1 \u2264 r_ i \u2264 10^ 9) , where r_ i equals to the skill of the i - th programmer. Each of the following k lines contains two distinct integers x , y ( 1 \u2264 x, y \u2264 n , x y) \u2014 pair of programmers in a quarrel. The pairs are unordered, it means that if x is in a quarrel with y then y is in a quarrel with x . Guaranteed, that for each pair ( x, y) there are no other pairs ( x, y) and ( y, x) in the input.",
    "output": "Print n integers, the i - th number should be equal to the number of programmers, for which the i - th programmer can be a mentor. Programmers are numbered in the same order that their skills are given in the input.",
    "note": "In the first example, the first programmer can not be mentor of any other ( because only the second programmer has a skill, lower than first programmer skill, but they are in a quarrel) . The second programmer can not be mentor of any other programmer, because his skill is minimal among others. The third programmer can be a mentor of the second programmer. The fourth programmer can be a mentor of the first and of the second programmers. He can not be a mentor of the third programmer, because they are in a quarrel.",
    "topics": [
      "binary search",
      "data structures",
      "implementation"
    ],
    "id": "978F"
  },
  {
    "title": "Short Code",
    "url": "https://codeforces.com/problemset/problem/965/E",
    "history": "Arkady' s code contains n variables. Each variable has a unique name consisting of lowercase English letters only. One day Arkady decided to shorten his code. He wants to replace each variable name with its non- empty prefix so that these new names are still unique ( however, a new name of some variable can coincide with some old name of another or same variable) . Among such possibilities he wants to find the way with the smallest possible total length of the new names. A string a is a prefix of a string b if you can delete some ( possibly none) characters from the end of b and obtain a . Please find this minimum possible total length of new names.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of variables. The next n lines contain variable names, one per line. Each name is non- empty and contains only lowercase English letters. The total length of these strings is not greater than 10^ 5 . The variable names are distinct.",
    "output": "Print a single integer \u2014 the minimum possible total length of new variable names.",
    "note": "In the first example one of the best options is to shorten the names in the given order as \" cod\" , \" co\" , \" c\" . In the second example we can shorten the last name to \" aac\" and the first name to \" a\" without changing the other names.",
    "topics": [
      "data structures",
      "dp",
      "greedy",
      "strings",
      "trees"
    ],
    "id": "965E"
  },
  {
    "title": "Visible Black Areas",
    "url": "https://codeforces.com/problemset/problem/962/G",
    "history": "Petya has a polygon consisting of n vertices. All sides of the Petya' s polygon are parallel to the coordinate axes, and each two adjacent sides of the Petya' s polygon are perpendicular. It is guaranteed that the polygon is simple, that is, it doesn' t have self- intersections and self- touches. All internal area of the polygon ( borders are not included) was painted in black color by Petya. Also, Petya has a rectangular window, defined by its coordinates, through which he looks at the polygon. A rectangular window can not be moved. The sides of the rectangular window are parallel to the coordinate axes. Blue color represents the border of a polygon, red color is the Petya' s window. The answer in this case is 2. Determine the number of black connected areas of Petya' s polygon, which can be seen through the rectangular window.",
    "input": "The first line contain four integers x_ 1, y_ 1, x_ 2, y_ 2 ( x_ 1 < x_ 2 , y_ 2 < y_ 1 ) \u2014 the coordinates of top- left and bottom- right corners of the rectangular window. The second line contains a single integer n ( 4 \u2264 n \u2264 15 000 ) \u2014 the number of vertices in Petya' s polygon. Each of the following n lines contains two integers \u2014 the coordinates of vertices of the Petya' s polygon in counterclockwise order. Guaranteed, that the given polygon satisfies the conditions described in the statement. All coordinates of the rectangular window and all coordinates of the vertices of the polygon are non- negative and do not exceed 15 000 .",
    "output": "Print the number of black connected areas of Petya' s polygon, which can be seen through the rectangular window.",
    "note": "The example corresponds to the picture above.",
    "topics": [
      "data structures",
      "dsu",
      "geometry",
      "trees"
    ],
    "id": "962G"
  },
  {
    "title": "Merge Equals",
    "url": "https://codeforces.com/problemset/problem/962/D",
    "history": "You are given an array of positive integers. While there are at least two equal elements, we will perform the following operation. We choose the smallest value x that occurs in the array 2 or more times. Take the first two occurrences of x in this array ( the two leftmost occurrences) . Remove the left of these two occurrences, and the right one is replaced by the sum of this two values ( that is, 2 \u00b7 x ) . Determine how the array will look after described operations are performed. For example, consider the given array looks like [ 3, 4, 1, 2, 2, 1, 1] . It will be changed in the following way: [ 3, 4, 1, 2, 2, 1, 1] \u2192 [ 3, 4, 2, 2, 2, 1] \u2192 [ 3, 4, 4, 2, 1] \u2192 [ 3, 8, 2, 1] . If the given array is look like [ 1, 1, 3, 1, 1] it will be changed in the following way: [ 1, 1, 3, 1, 1] \u2192 [ 2, 3, 1, 1] \u2192 [ 2, 3, 2] \u2192 [ 3, 4] .",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 150 000 ) \u2014 the number of elements in the array. The second line contains a sequence from n elements a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the elements of the array.",
    "output": "In the first line print an integer k \u2014 the number of elements in the array after all the performed operations. In the second line print k integers \u2014 the elements of the array after all the performed operations.",
    "note": "The first two examples were considered in the statement. In the third example all integers in the given array are distinct, so it will not change.",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "962D"
  },
  {
    "title": "Tufurama",
    "url": "https://codeforces.com/problemset/problem/961/E",
    "history": "One day Polycarp decided to rewatch his absolute favourite episode of well- known TV series \" Tufurama\" . He was pretty surprised when he got results only for season 7 episode 3 with his search query of \" Watch Tufurama season 3 episode 7 online full hd free\" . This got Polycarp confused \u2014 what if he decides to rewatch the entire series someday and won' t be able to find the right episodes to watch? Polycarp now wants to count the number of times he will be forced to search for an episode using some different method. TV series have n seasons ( numbered 1 through n) , the i- th season has ai episodes ( numbered 1 through ai) . Polycarp thinks that if for some pair of integers x and y ( x < y) exist both season x episode y and season y episode x then one of these search queries will include the wrong results. Help Polycarp to calculate the number of such pairs!",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 2\u00b7105) \u2014 the number of seasons. The second line contains n integers separated by space a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) \u2014 number of episodes in each season.",
    "output": "Print one integer \u2014 the number of pairs x and y ( x < y) such that there exist both season x episode y and season y episode x.",
    "note": "Possible pairs in the second example: x = 1, y = 2 ( season 1 episode 2 season 2 episode 1) ; x = 2, y = 3 ( season 2 episode 3 season 3 episode 2) ; x = 1, y = 3 ( season 1 episode 3 season 3 episode 1) . In the third example: x = 1, y = 2 ( season 1 episode 2 season 2 episode 1) ; x = 1, y = 3 ( season 1 episode 3 season 3 episode 1) .",
    "topics": [
      "data structures"
    ],
    "id": "961E"
  },
  {
    "title": "Lecture Sleep",
    "url": "https://codeforces.com/problemset/problem/961/B",
    "history": "Your friend Mishka and you attend a calculus lecture. Lecture lasts n minutes. Lecturer tells ai theorems during the i- th minute. Mishka is really interested in calculus, though it is so hard to stay awake for all the time of lecture. You are given an array t of Mishka' s behavior. If Mishka is asleep during the i- th minute of the lecture then ti will be equal to 0, otherwise it will be equal to 1. When Mishka is awake he writes down all the theorems he is being told \u2014 ai during the i- th minute. Otherwise he writes nothing. You know some secret technique to keep Mishka awake for k minutes straight. However you can use it only once. You can start using it at the beginning of any minute between 1 and n - k + 1. If you use it on some minute i then Mishka will be awake during minutes j such that and will write down all the theorems lecturer tells. You task is to calculate the maximum number of theorems Mishka will be able to write down if you use your technique only once to wake him up.",
    "input": "The first line of the input contains two integer numbers n and k ( 1 \u2264 k \u2264 n \u2264 105) \u2014 the duration of the lecture in minutes and the number of minutes you can keep Mishka awake. The second line of the input contains n integer numbers a1, a2, . . . an ( 1 \u2264 ai \u2264 104) \u2014 the number of theorems lecturer tells during the i- th minute. The third line of the input contains n integer numbers t1, t2, . . . tn ( 0 \u2264 ti \u2264 1) \u2014 type of Mishka' s behavior at the i- th minute of the lecture.",
    "output": "Print only one integer \u2014 the maximum number of theorems Mishka will be able to write down if you use your technique only once to wake him up.",
    "note": "In the sample case the better way is to use the secret technique at the beginning of the third minute. Then the number of theorems Mishka will be able to write down will be equal to 16.",
    "topics": [
      "data structures",
      "dp",
      "implementation",
      "two pointers"
    ],
    "id": "961B"
  },
  {
    "title": "Santa's Gift",
    "url": "https://codeforces.com/problemset/problem/960/H",
    "history": "Santa has an infinite number of candies for each of m flavours. You are given a rooted tree with n vertices. The root of the tree is the vertex 1 . Each vertex contains exactly one candy. The i - th vertex has a candy of flavour f_ i . Sometimes Santa fears that candies of flavour k have melted. He chooses any vertex x randomly and sends the subtree of x to the Bakers for a replacement. In a replacement, all the candies with flavour k are replaced with a new candy of the same flavour. The candies which are not of flavour k are left unchanged. After the replacement, the tree is restored. The actual cost of replacing one candy of flavour k is c_ k ( given for each k ) . The Baker keeps the price fixed in order to make calculation simple. Every time when a subtree comes for a replacement, the Baker charges C , no matter which subtree it is and which flavour it is. Suppose that for a given flavour k the probability that Santa chooses a vertex for replacement is same for all the vertices. You need to find out the expected value of error in calculating the cost of replacement of flavour k . The error in calculating the cost is defined as follows. Error E( k) = ( Actual Cost \u2013 Price charged by the Bakers) ^ 2. Note that the actual cost is the cost of replacement of one candy of the flavour k multiplied by the number of candies in the subtree. Also, sometimes Santa may wish to replace a candy at vertex x with a candy of some flavour from his pocket. You need to handle two types of operations: Change the flavour of the candy at vertex x to w . Calculate the expected value of error in calculating the cost of replacement for a given flavour k .",
    "input": "The first line of the input contains four integers n ( 2 \u2a7d n \u2a7d 5 \u00b7 10^ 4 ) , m , q , C ( 1 \u2a7d m, q \u2a7d 5 \u00b7 10^ 4 , 0 \u2a7d C \u2a7d 10^ 6 ) \u2014 the number of nodes, total number of different flavours of candies, the number of queries and the price charged by the Bakers for replacement, respectively. The second line contains n integers f_ 1, f_ 2, . . . , f_ n ( 1 \u2a7d f_ i \u2a7d m ) , where f_ i is the initial flavour of the candy in the i - th node. The third line contains n - 1 integers p_ 2, p_ 3, . . . , p_ n ( 1 \u2a7d p_ i \u2a7d n ) , where p_ i is the parent of the i - th node. The next line contains m integers c_ 1, c_ 2, . . . c_ m ( 1 \u2a7d c_ i \u2a7d 10^ 2 ) , where c_ i is the cost of replacing one candy of flavour i . The next q lines describe the queries. Each line starts with an integer t ( 1 \u2a7d t \u2a7d 2 ) \u2014 the type of the query. If t = 1 , then the line describes a query of the first type. Two integers x and w follow ( 1 \u2a7d x \u2a7d n , 1 \u2a7d w \u2a7d m ) , it means that Santa replaces the candy at vertex x with flavour w . Otherwise, if t = 2 , the line describes a query of the second type and an integer k ( 1 \u2a7d k \u2a7d m ) follows, it means that you should print the expected value of the error in calculating the cost of replacement for a given flavour k . The vertices are indexed from 1 to n . Vertex 1 is the root.",
    "output": "Output the answer to each query of the second type in a separate line. Your answer is considered correct if its absolute or relative error does not exceed 10^ - 6 . Formally, let your answer be a , and the jury' s answer be b . The checker program considers your answer correct if and only if | a- b| / max( 1, b) \u2a7d 10^ - 6 .",
    "note": "For 1 - st query, the error in calculating the cost of replacement for flavour 1 if vertex 1 , 2 or 3 is chosen are 66^ 2 , 66^ 2 and ( - 7) ^ 2 respectively. Since the probability of choosing any vertex is same, therefore the expected value of error is 66^ 2+ 66^ 2+ ( - 7) ^ 2/ 3 . Similarly, for 2 - nd query the expected value of error is 41^ 2+ ( - 7) ^ 2+ ( - 7) ^ 2/ 3 . After 3 - rd query, the flavour at vertex 2 changes from 1 to 3 . For 4 - th query, the expected value of error is ( - 7) ^ 2+ ( - 7) ^ 2+ ( - 7) ^ 2/ 3 . Similarly, for 5 - th query, the expected value of error is 89^ 2+ 41^ 2+ ( - 7) ^ 2/ 3 .",
    "topics": [
      "data structures",
      "trees"
    ],
    "id": "960H"
  },
  {
    "title": "Pathwalks",
    "url": "https://codeforces.com/problemset/problem/960/F",
    "history": "You are given a directed graph with n nodes and m edges, with all edges having a certain weight. There might be multiple edges and self loops, and the graph can also be disconnected. You need to choose a path ( possibly passing through same vertices multiple times) in the graph such that the weights of the edges are in strictly increasing order, and these edges come in the order of input. Among all such paths, you need to find the the path that has the maximum possible number of edges, and report this value. Please note that the edges picked don' t have to be consecutive in the input.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 100000, 1 \u2264 m \u2264 100000) \u2014 the number of vertices and edges in the graph, respectively. m lines follows. The i- th of these lines contains three space separated integers ai, bi and wi ( 1 \u2264 ai, bi \u2264 n, 0 \u2264 wi \u2264 100000) , denoting an edge from vertex ai to vertex bi having weight wi",
    "output": "Print one integer in a single line \u2014 the maximum number of edges in the path.",
    "note": "The answer for the first sample input is 2: . Note that you cannot traverse because edge appears earlier in the input than the other two edges and hence cannot be picked/ traversed after either of the other two edges. In the second sample, it' s optimal to pick 1- st, 3- rd and 5- th edges to get the optimal answer: .",
    "topics": [
      "data structures",
      "dp",
      "graphs"
    ],
    "id": "960F"
  },
  {
    "title": "Minimize the error",
    "url": "https://codeforces.com/problemset/problem/960/B",
    "history": "You are given two arrays A and B, each of size n. The error, E, between these two arrays is defined . You have to perform exactly k1 operations on array A and exactly k2 operations on array B. In one operation, you have to choose one element of the array and increase or decrease it by 1. Output the minimum possible value of error after k1 operations on array A and k2 operations on array B have been performed.",
    "input": "The first line contains three space- separated integers n ( 1 \u2264 n \u2264 103) , k1 and k2 ( 0 \u2264 k1 + k2 \u2264 103, k1 and k2 are non- negative) \u2014 size of arrays and number of operations to perform on A and B respectively. Second line contains n space separated integers a1, a2, . . . , an ( - 106 \u2264 ai \u2264 106) \u2014 array A. Third line contains n space separated integers b1, b2, . . . , bn ( - 106 \u2264 bi \u2264 106) \u2014 array B.",
    "output": "Output a single integer \u2014 the minimum possible value of after doing exactly k1 operations on array A and exactly k2 operations on array B.",
    "note": "In the first sample case, we cannot perform any operations on A or B. Therefore the minimum possible error E = ( 1 - 2) 2 + ( 2 - 3) 2 = 2. In the second sample case, we are required to perform exactly one operation on A. In order to minimize error, we increment the first element of A by 1. Now, A = [ 2, 2] . The error is now E = ( 2 - 2) 2 + ( 2 - 2) 2 = 0. This is the minimum possible error obtainable. In the third sample case, we can increase the first element of A to 8, using the all of the 5 moves available to us. Also, the first element of B can be reduced to 8 using the 6 of the 7 available moves. Now A = [ 8, 4] and B = [ 8, 4] . The error is now E = ( 8 - 8) 2 + ( 4 - 4) 2 = 0, but we are still left with 1 move for array B. Increasing the second element of B to 5 using the left move, we get B = [ 8, 5] and E = ( 8 - 8) 2 + ( 4 - 5) 2 = 1.",
    "topics": [
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "960B"
  },
  {
    "title": "Encryption (hard)",
    "url": "https://codeforces.com/problemset/problem/958/C3",
    "history": "Heidi is now just one code away from breaking the encryption of the Death Star plans. The screen that should be presenting her with the description of the next code looks almost like the previous one, though who would have thought that the evil Empire engineers would fill this small screen with several million digits! It is just ridiculous to think that anyone would read them all. . . Heidi is once again given a sequence A and two integers k and p. She needs to find out what the encryption key S is. Let X be a sequence of integers, and p a positive integer. We define the score of X to be the sum of the elements of X modulo p. Heidi is given a sequence A that consists of N integers, and also given integers k and p. Her goal is to split A into k parts such that: Each part contains at least 1 element of A, and each part consists of contiguous elements of A. No two parts overlap. The total sum S of the scores of those parts is minimized ( not maximized! ) . Output the sum S, which is the encryption code.",
    "input": "The first line of the input contains three space- separated integers N, k and p ( k \u2264 N \u2264 500 000, 2 \u2264 k \u2264 100, 2 \u2264 p \u2264 100) \u2013 the number of elements in A, the number of parts A should be split into, and the modulo for computing scores, respectively. The second line contains N space- separated integers that are the elements of A. Each integer is from the interval [ 1, 1 000 000] .",
    "output": "Output the number S as described in the problem statement.",
    "note": "In the first example, if the input sequence is split as ( 3) , ( 4, 7) , ( 2) , the total score would be . It is easy to see that this score is the smallest possible. In the second example, one possible way to obtain score 13 is to make the following split: ( 16, 3) , ( 24) , ( 13) , ( 9, 8) , ( 7, 5, 12, 12) .",
    "topics": [
      "data structures",
      "dp"
    ],
    "id": "958C3"
  },
  {
    "title": "Maximum Control (medium)",
    "url": "https://codeforces.com/problemset/problem/958/B2",
    "history": "The Resistance is trying to take control over as many planets of a particular solar system as possible. Princess Heidi is in charge of the fleet, and she must send ships to some planets in order to maximize the number of controlled planets. The Galaxy contains N planets, connected by bidirectional hyperspace tunnels in such a way that there is a unique path between every pair of the planets. A planet is controlled by the Resistance if there is a Resistance ship in its orbit, or if the planet lies on the shortest path between some two planets that have Resistance ships in their orbits. Heidi has not yet made up her mind as to how many ships to use. Therefore, she is asking you to compute, for every K = 1, 2, 3, . . . , N, the maximum number of planets that can be controlled with a fleet consisting of K ships.",
    "input": "The first line of the input contains an integer N ( 1 \u2264 N \u2264 105) \u2013 the number of planets in the galaxy. The next N - 1 lines describe the hyperspace tunnels between the planets. Each of the N - 1 lines contains two space- separated integers u and v ( 1 \u2264 u, v \u2264 N) indicating that there is a bidirectional hyperspace tunnel between the planets u and v. It is guaranteed that every two planets are connected by a path of tunnels, and that each tunnel connects a different pair of planets.",
    "output": "On a single line, print N space- separated integers. The K- th number should correspond to the maximum number of planets that can be controlled by the Resistance using a fleet of K ships.",
    "note": "Consider the first example. If K = 1, then Heidi can only send one ship to some planet and control it. However, for K \u2265 2, sending ships to planets 1 and 3 will allow the Resistance to control all planets.",
    "topics": [
      "data structures",
      "dfs and similar",
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "958B2"
  },
  {
    "title": "Castle Defense",
    "url": "https://codeforces.com/problemset/problem/954/G",
    "history": "Today you are going to lead a group of elven archers to defend the castle that is attacked by an army of angry orcs. Three sides of the castle are protected by impassable mountains and the remaining side is occupied by a long wall that is split into n sections. At this moment there are exactly ai archers located at the i- th section of this wall. You know that archer who stands at section i can shoot orcs that attack section located at distance not exceeding r, that is all such sections j that | i - j| \u2264 r. In particular, r = 0 means that archers are only capable of shooting at orcs who attack section i. Denote as defense level of section i the total number of archers who can shoot at the orcs attacking this section. Reliability of the defense plan is the minimum value of defense level of individual wall section. There is a little time left till the attack so you can' t redistribute archers that are already located at the wall. However, there is a reserve of k archers that you can distribute among wall sections in arbitrary way. You would like to achieve maximum possible reliability of the defence plan.",
    "input": "The first line of the input contains three integers n, r and k ( 1 \u2264 n \u2264 500 000, 0 \u2264 r \u2264 n, 0 \u2264 k \u2264 1018) \u2014 the number of sections of the wall, the maximum distance to other section archers can still shoot and the number of archers yet to be distributed along the wall. The second line contains n integers a1, a2, . . . , an ( 0 \u2264 ai \u2264 109) \u2014 the current number of archers at each section.",
    "output": "Print one integer \u2014 the maximum possible value of defense plan reliability, i. e. the maximum possible value of minimum defense level if we distribute k additional archers optimally.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "two pointers"
    ],
    "id": "954G"
  },
  {
    "title": "Almost Increasing Array",
    "url": "https://codeforces.com/problemset/problem/946/G",
    "history": "We call an array almost increasing if we can erase not more than one element from it so that the array becomes strictly increasing ( that is, every element is striclty greater than every element before it) . You are given an array a consisting of n elements. You are allowed to replace any element with any integer number ( and you may do so any number of times you need) . What is the minimum number of replacements you have to perform in order to make the array almost increasing?",
    "input": "The first line contains one integer n ( 2 \u2264 n \u2264 200000) \u2014 the number of elements in a. The second line contains n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) \u2014 the array a.",
    "output": "Print the minimum number of replaces you have to perform so that a is almost increasing.",
    "note": "",
    "topics": [
      "data structures",
      "dp"
    ],
    "id": "946G"
  },
  {
    "title": "Machine Learning",
    "url": "https://codeforces.com/problemset/problem/940/F",
    "history": "You come home and fell some unpleasant smell. Where is it coming from? You are given an array a. You have to answer the following queries: You are given two integers l and r. Let ci be the number of occurrences of i in al: r, where al: r is the subarray of a from l- th element to r- th inclusive. Find the Mex of c0, c1, . . . , c109 You are given two integers p to x. Change ap to x. The Mex of a multiset of numbers is the smallest non- negative integer not in the set. Note that in this problem all elements of a are positive, which means that c0 = 0 and 0 is never the answer for the query of the second type.",
    "input": "The first line of input contains two integers n and q ( 1 \u2264 n, q \u2264 100 000) \u2014 the length of the array and the number of queries respectively. The second line of input contains n integers \u2014 a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) . Each of the next q lines describes a single query. The first type of query is described by three integers ti = 1, li, ri, where 1 \u2264 li \u2264 ri \u2264 n \u2014 the bounds of the subarray. The second type of query is described by three integers ti = 2, pi, xi, where 1 \u2264 pi \u2264 n is the index of the element, which must be changed and 1 \u2264 xi \u2264 109 is the new value.",
    "output": "For each query of the first type output a single integer \u2014 the Mex of c0, c1, . . . , c109.",
    "note": "The subarray of the first query consists of the single element \u2014 1. The subarray of the second query consists of four 2s, one 3 and two 1s. The subarray of the fourth query consists of three 1s, three 2s and one 3.",
    "topics": [
      "brute force",
      "data structures"
    ],
    "id": "940F"
  },
  {
    "title": "Cashback",
    "url": "https://codeforces.com/problemset/problem/940/E",
    "history": "Since you are the best Wraith King, Nizhniy Magazin \u00abMir\u00bb at the centre of Vinnytsia is offering you a discount. You are given an array a of length n and an integer c. The value of some array b of length k is the sum of its elements except for the smallest. For example, the value of the array [ 3, 1, 6, 5, 2] with c = 2 is 3 + 6 + 5 = 14. Among all possible partitions of a into contiguous subarrays output the smallest possible sum of the values of these subarrays.",
    "input": "The first line contains integers n and c ( 1 \u2264 n, c \u2264 100 000) . The second line contains n integers ai ( 1 \u2264 ai \u2264 109) \u2014 elements of a.",
    "output": "Output a single integer \u2014 the smallest possible sum of values of these subarrays of some partition of a.",
    "note": "In the first example any partition yields 6 as the sum. In the second example one of the optimal partitions is [ 1, 1] , [ 10, 10, 10, 10, 10, 10, 9, 10, 10, 10] with the values 2 and 90 respectively. In the third example one of the optimal partitions is [ 2, 3] , [ 6, 4, 5, 7] , [ 1] with the values 3, 13 and 1 respectively. In the fourth example one of the optimal partitions is [ 1] , [ 3, 4, 5, 5, 3, 4] , [ 1] with the values 1, 21 and 1 respectively.",
    "topics": [
      "data structures",
      "dp",
      "greedy",
      "math"
    ],
    "id": "940E"
  },
  {
    "title": "Cutlet",
    "url": "https://codeforces.com/problemset/problem/939/F",
    "history": "Arkady wants to have a dinner. He has just returned from a shop where he has bought a semifinished cutlet. He only needs to fry it. The cutlet should be fried for 2n seconds, in particular, it should be fried for n seconds on one side and n seconds on the other side. Arkady has already got a frying pan and turn on fire, but understood that maybe he won' t be able to flip the cutlet exactly after n seconds after the beginning of cooking. Arkady is too busy with sorting sticker packs in his favorite messenger and can flip the cutlet only in some periods of time. Namely, there are k periods of time in which he can do it, the i- th of them is an interval of time from li seconds after he starts cooking till ri seconds, inclusive. Arkady decided that it' s not required to flip the cutlet exactly in the middle of cooking, instead, he will flip it several times in such a way that the cutlet will be fried exactly n seconds on one side and n seconds on the other side in total. Help Arkady and find out if it' s possible for him to cook the cutlet, if he is able to flip the cutlet only in given periods of time; and if yes, find the minimum number of flips he needs to cook the cutlet.",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 100 000, 1 \u2264 k \u2264 100) \u2014 the number of seconds the cutlet should be cooked on each side and number of periods of time in which Arkady can flip it. The next k lines contain descriptions of these intervals. Each line contains two integers li and ri ( 0 \u2264 li \u2264 ri \u2264 2\u00b7n) , meaning that Arkady can flip the cutlet in any moment starting from li seconds after the beginning of cooking and finishing at ri seconds after beginning of cooking. In particular, if li = ri then Arkady can flip the cutlet only in the moment li = ri. It' s guaranteed that li > ri - 1 for all 2 \u2264 i \u2264 k.",
    "output": "Output \" Hungry\" if Arkady won' t be able to fry the cutlet for exactly n seconds on one side and exactly n seconds on the other side. Otherwise, output \" Full\" in the first line, and the minimum number of times he should flip the cutlet in the second line.",
    "note": "In the first example Arkady should flip the cutlet in time moment 3 seconds after he starts cooking and in time moment 13 seconds after he starts cooking. In the second example, Arkady can flip the cutlet at 10 seconds after he starts cooking.",
    "topics": [
      "data structures",
      "dp"
    ],
    "id": "939F"
  },
  {
    "title": "Shortest Path Queries",
    "url": "https://codeforces.com/problemset/problem/938/G",
    "history": "You are given an undirected connected graph with weighted edges. The length of some path between two vertices is the bitwise xor of weights of all edges belonging to this path ( if some edge is traversed more than once, then it is included in bitwise xor the same number of times) . There are three types of queries you have to process: 1 x y d \u2014 add an edge connecting vertex x to vertex y with weight d. It is guaranteed that there is no edge connecting x to y before this query; 2 x y \u2014 remove an edge connecting vertex x to vertex y. It is guaranteed that there was such edge in the graph, and the graph stays connected after this query; 3 x y \u2014 calculate the length of the shortest path ( possibly non- simple) from vertex x to vertex y. Print the answers for all queries of type 3.",
    "input": "The first line contains two numbers n and m ( 1 \u2264 n, m \u2264 200000) \u2014 the number of vertices and the number of edges in the graph, respectively. Then m lines follow denoting the edges of the graph. Each line contains three integers x, y and d ( 1 \u2264 x < y \u2264 n, 0 \u2264 d \u2264 230 - 1) . Each pair ( x, y) is listed at most once. The initial graph is connected. Then one line follows, containing an integer q ( 1 \u2264 q \u2264 200000) \u2014 the number of queries you have to process. Then q lines follow, denoting queries in the following form: 1 x y d ( 1 \u2264 x < y \u2264 n, 0 \u2264 d \u2264 230 - 1) \u2014 add an edge connecting vertex x to vertex y with weight d. It is guaranteed that there is no edge connecting x to y before this query; 2 x y ( 1 \u2264 x < y \u2264 n) \u2014 remove an edge connecting vertex x to vertex y. It is guaranteed that there was such edge in the graph, and the graph stays connected after this query; 3 x y ( 1 \u2264 x < y \u2264 n) \u2014 calculate the length of the shortest path ( possibly non- simple) from vertex x to vertex y. It is guaranteed that at least one query has type 3.",
    "output": "Print the answers for all queries of type 3 in the order they appear in input.",
    "note": "",
    "topics": [
      "bitmasks",
      "data structures",
      "dsu",
      "graphs"
    ],
    "id": "938G"
  },
  {
    "title": "Buy a Ticket",
    "url": "https://codeforces.com/problemset/problem/938/D",
    "history": "Musicians of a popular band \" Flayer\" have announced that they are going to \" make their exit\" with a world tour. Of course, they will visit Berland as well. There are n cities in Berland. People can travel between cities using two- directional train routes; there are exactly m routes, i- th route can be used to go from city vi to city ui ( and from ui to vi) , and it costs wi coins to use this route. Each city will be visited by \" Flayer\" , and the cost of the concert ticket in i- th city is ai coins. You have friends in every city of Berland, and they, knowing about your programming skills, asked you to calculate the minimum possible number of coins they have to pay to visit the concert. For every city i you have to compute the minimum number of coins a person from city i has to spend to travel to some city j ( or possibly stay in city i) , attend a concert there, and return to city i ( if j = \u0338 i) . Formally, for every you have to calculate , where d( i, j) is the minimum number of coins you have to spend to travel from city i to city j. If there is no way to reach city j from city i, then we consider d( i, j) to be infinitely large.",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 2\u00b7105, 1 \u2264 m \u2264 2\u00b7105) . Then m lines follow, i- th contains three integers vi, ui and wi ( 1 \u2264 vi, ui \u2264 n, vi = \u0338 ui, 1 \u2264 wi \u2264 1012) denoting i- th train route. There are no multiple train routes connecting the same pair of cities, that is, for each ( v, u) neither extra ( v, u) nor ( u, v) present in input. The next line contains n integers a1, a2, . . . ak ( 1 \u2264 ai \u2264 1012) \u2014 price to attend the concert in i- th city.",
    "output": "Print n integers. i- th of them must be equal to the minimum number of coins a person from city i has to spend to travel to some city j ( or possibly stay in city i) , attend a concert there, and return to city i ( if j = \u0338 i) .",
    "note": "",
    "topics": [
      "data structures",
      "graphs",
      "shortest paths"
    ],
    "id": "938D"
  },
  {
    "title": "Fafa and Array",
    "url": "https://codeforces.com/problemset/problem/935/F",
    "history": "Fafa has an array A of n positive integers, the function f( A) is defined as . He wants to do q queries of two types: 1 l r x \u2014 find the maximum possible value of f( A) , if x is to be added to one element in the range [ l, r] . You can choose to which element to add x. 2 l r x \u2014 increase all the elements in the range [ l, r] by value x. Note that queries of type 1 don' t affect the array elements.",
    "input": "The first line contains one integer n ( 3 \u2264 n \u2264 105) \u2014 the length of the array. The second line contains n positive integers a1, a2, . . . , an ( 0 < ai \u2264 109) \u2014 the array elements. The third line contains an integer q ( 1 \u2264 q \u2264 105) \u2014 the number of queries. Then q lines follow, line i describes the i- th query and contains four integers ti li ri xi . It is guaranteed that at least one of the queries is of type 1.",
    "output": "For each query of type 1, print the answer to the query.",
    "note": "",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "935F"
  },
  {
    "title": "Escape Through Leaf",
    "url": "https://codeforces.com/problemset/problem/932/F",
    "history": "You are given a tree with n nodes ( numbered from 1 to n) rooted at node 1. Also, each node has two values associated with it. The values for i- th node are ai and bi. You can jump from a node to any node in its subtree. The cost of one jump from node x to node y is the product of ax and by. The total cost of a path formed by one or more jumps is sum of costs of individual jumps. For every node, calculate the minimum total cost to reach any leaf from that node. Pay attention, that root can never be leaf, even if it has degree 1. Note that you cannot jump from a node to itself.",
    "input": "The first line of input contains an integer n ( 2 \u2264 n \u2264 105) \u2014 the number of nodes in the tree. The second line contains n space- separated integers a1, a2, . . . , an( - 105 \u2264 ai \u2264 105) . The third line contains n space- separated integers b1, b2, . . . , bn( - 105 \u2264 bi \u2264 105) . Next n - 1 lines contains two space- separated integers ui and vi ( 1 \u2264 ui, vi \u2264 n) describing edge between nodes ui and vi in the tree.",
    "output": "Output n space- separated integers, i- th of which denotes the minimum cost of a path from node i to reach any leaf.",
    "note": "In the first example, node 3 is already a leaf, so the cost is 0. For node 2, jump to node 3 with cost a2 \u00d7 b3 = 50. For node 1, jump directly to node 3 with cost a1 \u00d7 b3 = 10. In the second example, node 3 and node 4 are leaves, so the cost is 0. For node 2, jump to node 4 with cost a2 \u00d7 b4 = 100. For node 1, jump to node 2 with cost a1 \u00d7 b2 = - 400 followed by a jump from 2 to 4 with cost a2 \u00d7 b4 = 100.",
    "topics": [
      "data structures",
      "dp",
      "geometry"
    ],
    "id": "932F"
  },
  {
    "title": "Recursive Queries",
    "url": "https://codeforces.com/problemset/problem/932/B",
    "history": "Let us define two functions f and g on positive integer numbers. You need to process Q queries. In each query, you will be given three integers l, r and k. You need to print the number of integers x between l and r inclusive, such that g( x) = k.",
    "input": "The first line of the input contains an integer Q ( 1 \u2264 Q \u2264 2 \u00d7 105) representing the number of queries. Q lines follow, each of which contains 3 integers l, r and k ( 1 \u2264 l \u2264 r \u2264 106, 1 \u2264 k \u2264 9) .",
    "output": "For each query, print a single line containing the answer for that query.",
    "note": "In the first example: g( 33) = 9 as g( 33) = g( 3 \u00d7 3) = g( 9) = 9 g( 47) = g( 48) = g( 60) = g( 61) = 6 There are no such integers between 47 and 55. g( 4) = g( 14) = g( 22) = g( 27) = g( 39) = g( 40) = g( 41) = g( 58) = 4",
    "topics": [
      "binary search",
      "data structures",
      "dfs and similar"
    ],
    "id": "932B"
  },
  {
    "title": "Coins Exhibition",
    "url": "https://codeforces.com/problemset/problem/930/E",
    "history": "Arkady and Kirill visited an exhibition of rare coins. The coins were located in a row and enumerated from left to right from 1 to k, each coin either was laid with its obverse ( front) side up, or with its reverse ( back) side up. Arkady and Kirill made some photos of the coins, each photo contained a segment of neighboring coins. Akrady is interested in obverses, so on each photo made by him there is at least one coin with obverse side up. On the contrary, Kirill is interested in reverses, so on each photo made by him there is at least one coin with its reverse side up. The photos are lost now, but Arkady and Kirill still remember the bounds of the segments of coins each photo contained. Given this information, compute the remainder of division by 109 + 7 of the number of ways to choose the upper side of each coin in such a way, that on each Arkady' s photo there is at least one coin with obverse side up, and on each Kirill' s photo there is at least one coin with reverse side up.",
    "input": "The first line contains three integers k, n and m ( 1 \u2264 k \u2264 109, 0 \u2264 n, m \u2264 105) \u2014 the total number of coins, the number of photos made by Arkady, and the number of photos made by Kirill, respectively. The next n lines contain the descriptions of Arkady' s photos, one per line. Each of these lines contains two integers l and r ( 1 \u2264 l \u2264 r \u2264 k) , meaning that among coins from the l- th to the r- th there should be at least one with obverse side up. The next m lines contain the descriptions of Kirill' s photos, one per line. Each of these lines contains two integers l and r ( 1 \u2264 l \u2264 r \u2264 k) , meaning that among coins from the l- th to the r- th there should be at least one with reverse side up.",
    "output": "Print the only line \u2014 the number of ways to choose the side for each coin modulo 109 + 7 = 1000000007.",
    "note": "In the first example the following ways are possible ( ' O' \u2014 obverse, ' R' \u2014 reverse side) : OROOR, ORORO, ORORR, RROOR, RRORO, RRORR, ORROR, ORRRO. In the second example the information is contradictory: the second coin should have obverse and reverse sides up at the same time, that is impossible. So, the answer is 0.",
    "topics": [
      "data structures",
      "dp",
      "math"
    ],
    "id": "930E"
  },
  {
    "title": "Game with Tokens",
    "url": "https://codeforces.com/problemset/problem/930/D",
    "history": "Consider the following game for two players. There is one white token and some number of black tokens. Each token is placed on a plane in a point with integer coordinates x and y. The players take turn making moves, white starts. On each turn, a player moves all tokens of their color by 1 to up, down, left or right. Black player can choose directions for each token independently. After a turn of the white player the white token can not be in a point where a black token is located. There are no other constraints on locations of the tokens: positions of black tokens can coincide, after a turn of the black player and initially the white token can be in the same point with some black point. If at some moment the white player can' t make a move, he loses. If the white player makes 10100500 moves, he wins. You are to solve the following problem. You are given initial positions of all black tokens. It is guaranteed that initially all these positions are distinct. In how many places can the white token be located initially so that if both players play optimally, the black player wins?",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 105) \u2014 the number of black points. The ( i + 1) - th line contains two integers xi, yi ( - 105 \u2264 xi, yi, \u2264 105) \u2014 the coordinates of the point where the i- th black token is initially located. It is guaranteed that initial positions of black tokens are distinct.",
    "output": "Print the number of points where the white token can be located initially, such that if both players play optimally, the black player wins.",
    "note": "In the first and second examples initial positions of black tokens are shown with black points, possible positions of the white token ( such that the black player wins) are shown with white points. The first example: The second example: In the third example the white tokens should be located in the inner square 2 \u00d7 2, to make the black player win.",
    "topics": [
      "data structures",
      "games",
      "implementation"
    ],
    "id": "930D"
  },
  {
    "title": "Teodor is not a liar!",
    "url": "https://codeforces.com/problemset/problem/930/C",
    "history": "Young Teodor enjoys drawing. His favourite hobby is drawing segments with integer borders inside his huge [ 1; m] segment. One day Teodor noticed that picture he just drawn has one interesting feature: there doesn' t exist an integer point, that belongs each of segments in the picture. Having discovered this fact, Teodor decided to share it with Sasha. Sasha knows that Teodor likes to show off so he never trusts him. Teodor wants to prove that he can be trusted sometimes, so he decided to convince Sasha that there is no such integer point in his picture, which belongs to each segment. However Teodor is lazy person and neither wills to tell Sasha all coordinates of segments' ends nor wills to tell him their amount, so he suggested Sasha to ask him series of questions ' Given the integer point xi, how many segments in Fedya' s picture contain that point? ' , promising to tell correct answers for this questions. Both boys are very busy studying and don' t have much time, so they ask you to find out how many questions can Sasha ask Teodor, that having only answers on his questions, Sasha can' t be sure that Teodor isn' t lying to him. Note that Sasha doesn' t know amount of segments in Teodor' s picture. Sure, Sasha is smart person and never asks about same point twice.",
    "input": "First line of input contains two integer numbers: n and m ( 1 \u2264 n, m \u2264 100 000) \u2014 amount of segments of Teodor' s picture and maximal coordinate of point that Sasha can ask about. ith of next n lines contains two integer numbers li and ri ( 1 \u2264 li \u2264 ri \u2264 m) \u2014 left and right ends of ith segment in the picture. Note that that left and right ends of segment can be the same point. It is guaranteed that there is no integer point, that belongs to all segments.",
    "output": "Single line of output should contain one integer number k \u2013 size of largest set ( xi, cnt( xi) ) where all xi are different, 1 \u2264 xi \u2264 m, and cnt( xi) is amount of segments, containing point with coordinate xi, such that one can' t be sure that there doesn' t exist point, belonging to all of segments in initial picture, if he knows only this set( and doesn' t know n) .",
    "note": "First example shows situation where Sasha can never be sure that Teodor isn' t lying to him, because even if one knows cnt( xi) for each point in segment [ 1; 4] , he can' t distinguish this case from situation Teodor has drawn whole [ 1; 4] segment. In second example Sasha can ask about 5 points e. g. 1, 2, 3, 5, 6, still not being sure if Teodor haven' t lied to him. But once he knows information about all points in [ 1; 6] segment, Sasha can be sure that Teodor haven' t lied to him.",
    "topics": [
      "data structures",
      "dp"
    ],
    "id": "930C"
  },
  {
    "title": "Segments",
    "url": "https://codeforces.com/problemset/problem/926/J",
    "history": "There is a straight line colored in white. n black segments are added on it one by one. After each segment is added, determine the number of connected components of black segments ( i. e. the number of black segments in the union of the black segments) . In particular, if one segment ends in a point x, and another segment starts in the point x, these two segments belong to the same connected component.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 200 000) \u2014 the number of segments. The i- th of the next n lines contains two integers li and ri ( 1 \u2264 li < ri \u2264 109) \u2014 the coordinates of the left and the right ends of the i- th segment. The segments are listed in the order they are added on the white line.",
    "output": "Print n integers \u2014 the number of connected components of black segments after each segment is added.",
    "note": "In the first example there are two components after the addition of the first two segments, because these segments do not intersect. The third added segment intersects the left segment and touches the right segment at the point 4 ( these segments belong to the same component, according to the statements) . Thus the number of connected components of black segments is equal to 1 after that.",
    "topics": [
      "data structures"
    ],
    "id": "926J"
  },
  {
    "title": "Merge Equal Elements",
    "url": "https://codeforces.com/problemset/problem/926/E",
    "history": "You are given a sequence of positive integers a1, a2, . . . , an. While possible, you perform the following operation: find a pair of equal consecutive elements. If there are more than one such pair, find the leftmost ( with the smallest indices of elements) . If the two integers are equal to x, delete both and insert a single integer x + 1 on their place. This way the number of elements in the sequence is decreased by 1 on each step. You stop performing the operation when there is no pair of equal consecutive elements. For example, if the initial sequence is [ 5, 2, 1, 1, 2, 2] , then after the first operation you get [ 5, 2, 2, 2, 2] , after the second \u2014 [ 5, 3, 2, 2] , after the third \u2014 [ 5, 3, 3] , and finally after the fourth you get [ 5, 4] . After that there are no equal consecutive elements left in the sequence, so you stop the process. Determine the final sequence after you stop performing the operation.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 2\u00b7105) \u2014 the number of elements in the sequence. The second line contains the sequence of integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) .",
    "output": "In the first line print a single integer k \u2014 the number of elements in the sequence after you stop performing the operation. In the second line print k integers \u2014 the sequence after you stop performing the operation.",
    "note": "The first example is described in the statements. In the second example the initial sequence is [ 1000000000, 1000000000, 1000000000, 1000000000] . After the first operation the sequence is equal to [ 1000000001, 1000000000, 1000000000] . After the second operation the sequence is [ 1000000001, 1000000001] . After the third operation the sequence is [ 1000000002] . In the third example there are no two equal consecutive elements initially, so the sequence does not change.",
    "topics": [
      "constructive algorithms",
      "data structures"
    ],
    "id": "926E"
  },
  {
    "title": "May Holidays",
    "url": "https://codeforces.com/problemset/problem/925/E",
    "history": "It' s May in Flatland, and there are m days in this month. Despite the fact that May Holidays are canceled long time ago, employees of some software company still have a habit of taking short or long vacations in May. Of course, not all managers of the company like this. There are n employees in the company that form a tree- like structure of subordination: each employee has a unique integer id i between 1 and n , and each employee with id i ( except the head manager whose id is 1) has exactly one direct manager with id p_ i . The structure of subordination is not cyclic, i. e. if we start moving from any employee to his direct manager, then we will eventually reach the head manager. We define that an employee u is a subordinate of an employee v , if v is a direct manager of u , or the direct manager of u is a subordinate of v . Let s_ i be the number of subordinates the i - th employee has ( for example, s_ 1 = n - 1 , because all employees except himself are subordinates of the head manager) . Each employee i has a bearing limit of t_ i , which is an integer between 0 and s_ i . It denotes the maximum number of the subordinates of the i - th employee being on vacation at the same moment that he can bear. If at some moment strictly more than t_ i subordinates of the i - th employee are on vacation, and the i - th employee himself is not on a vacation, he becomes displeased. In each of the m days of May exactly one event of the following two types happens: either one employee leaves on a vacation at the beginning of the day, or one employee returns from a vacation in the beginning of the day. You know the sequence of events in the following m days. Your task is to compute for each of the m days the number of displeased employees on that day.",
    "input": "The first line contains two integers n and m ( 2 \u2264 n, m \u2264 10^ 5 ) \u2014 the number of employees in the company and the number of days in May. The second line contains n - 1 integers p_ 2, p_ 3, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) , denoting the direct managers of employees. The third line contains n integers t_ 1, t_ 2, . . . , t_ n ( 0 \u2264 t_ i \u2264 s_ i ) , denoting the bearing limits of empoyees. The fourth line contains m integers q_ 1, q_ 2, . . . , q_ m ( 1 \u2264 | q_ i| \u2264 n , q_ i 0 ) , denoting the events. If q_ i is positive, then the employee with id q_ i leaves for a vacation starting from this day, if q_ i is negative, then the employee - q_ i returns from a vacation starting from this day. In the beginning of May no employee is on vacation. It is guaranteed that if some employee leaves for a vacation, he is not on a vacation at the moment and vice versa.",
    "output": "Print a sequence of m integers a_ 1, a_ 2, . . . , a_ m , where a_ i is the number of displeased employees on the i - th day.",
    "note": "In the first sample test after employee with id 2 leaves for a vacation at the first day, the head manager with id 1 becomes displeased as he does not want any of his subordinates to go for a vacation. At the fourth day employee with id 5 becomes displeased as his last remaining employee with id 7 leaves for a vacation. At the fifth day employee with id 2 returns from the vacation, but it does not affect the number of displeased employees as the employees 5 and 1 are still displeased. At the sixth day employee with id 3 returns back from the vacation, preventing the employee with id 5 from being displeased and at the last day the head manager with id 1 leaves for a vacation, leaving the company without the displeased people at all.",
    "topics": [
      "data structures",
      "trees"
    ],
    "id": "925E"
  },
  {
    "title": "Riverside Curio",
    "url": "https://codeforces.com/problemset/problem/924/C",
    "history": "Arkady decides to observe a river for n consecutive days. The river' s water level on each day is equal to some real value. Arkady goes to the riverside each day and makes a mark on the side of the channel at the height of the water level, but if it coincides with a mark made before, no new mark is created. The water does not wash the marks away. Arkady writes down the number of marks strictly above the water level each day, on the i- th day this value is equal to mi. Define di as the number of marks strictly under the water level on the i- th day. You are to find out the minimum possible sum of di over all days. There are no marks on the channel before the first day.",
    "input": "The first line contains a single positive integer n ( 1 \u2264 n \u2264 105) \u2014 the number of days. The second line contains n space- separated integers m1, m2, . . . , mn ( 0 \u2264 mi < i) \u2014 the number of marks strictly above the water on each day.",
    "output": "Output one single integer \u2014 the minimum possible sum of the number of marks strictly below the water level among all days.",
    "note": "In the first example, the following figure shows an optimal case. Note that on day 3, a new mark should be created because if not, there cannot be 3 marks above water on day 4. The total number of marks underwater is 0 + 0 + 2 + 0 + 3 + 1 = 6. In the second example, the following figure shows an optimal case.",
    "topics": [
      "data structures",
      "dp",
      "greedy"
    ],
    "id": "924C"
  },
  {
    "title": "Perfect Security",
    "url": "https://codeforces.com/problemset/problem/923/C",
    "history": "Alice has a very important message M consisting of some non- negative integers that she wants to keep secret from Eve. Alice knows that the only theoretically secure cipher is one- time pad. Alice generates a random key K of the length equal to the message' s length. Alice computes the bitwise xor of each element of the message and the key ( , where denotes the bitwise XOR operation) and stores this encrypted message A. Alice is smart. Be like Alice. For example, Alice may have wanted to store a message M = ( 0, 15, 9, 18) . She generated a key K = ( 16, 7, 6, 3) . The encrypted message is thus A = ( 16, 8, 15, 17) . Alice realised that she cannot store the key with the encrypted message. Alice sent her key K to Bob and deleted her own copy. Alice is smart. Really, be like Alice. Bob realised that the encrypted message is only secure as long as the key is secret. Bob thus randomly permuted the key before storing it. Bob thinks that this way, even if Eve gets both the encrypted message and the key, she will not be able to read the message. Bob is not smart. Don' t be like Bob. In the above example, Bob may have, for instance, selected a permutation ( 3, 4, 1, 2) and stored the permuted key P = ( 6, 3, 16, 7) . One year has passed and Alice wants to decrypt her message. Only now Bob has realised that this is impossible. As he has permuted the key randomly, the message is lost forever. Did we mention that Bob isn' t smart? Bob wants to salvage at least some information from the message. Since he is not so smart, he asks for your help. You know the encrypted message A and the permuted key P. What is the lexicographically smallest message that could have resulted in the given encrypted text? More precisely, for given A and P, find the lexicographically smallest message O, for which there exists a permutation \u03c0 such that for every i. Note that the sequence S is lexicographically smaller than the sequence T, if there is an index i such that Si < Ti and for all j < i the condition Sj = Tj holds.",
    "input": "The first line contains a single integer N ( 1 \u2264 N \u2264 300000) , the length of the message. The second line contains N integers A1, A2, . . . , AN ( 0 \u2264 Ai < 230) representing the encrypted message. The third line contains N integers P1, P2, . . . , PN ( 0 \u2264 Pi < 230) representing the permuted encryption key.",
    "output": "Output a single line with N integers, the lexicographically smallest possible message O. Note that all its elements should be non- negative.",
    "note": "In the first case, the solution is ( 10, 3, 28) , since , and . Other possible permutations of key yield messages ( 25, 6, 10) , ( 25, 3, 15) , ( 10, 21, 10) , ( 15, 21, 15) and ( 15, 6, 28) , which are all lexicographically larger than the solution.",
    "topics": [
      "data structures",
      "greedy",
      "strings",
      "trees"
    ],
    "id": "923C"
  },
  {
    "title": "Producing Snow",
    "url": "https://codeforces.com/problemset/problem/923/B",
    "history": "Alice likes snow a lot! Unfortunately, this year' s winter is already over, and she can' t expect to have any more of it. Bob has thus bought her a gift \u2014 a large snow maker. He plans to make some amount of snow every day. On day i he will make a pile of snow of volume Vi and put it in her garden. Each day, every pile will shrink a little due to melting. More precisely, when the temperature on a given day is Ti, each pile will reduce its volume by Ti. If this would reduce the volume of a pile to or below zero, it disappears forever. All snow piles are independent of each other. Note that the pile made on day i already loses part of its volume on the same day. In an extreme case, this may mean that there are no piles left at the end of a particular day. You are given the initial pile sizes and the temperature on each day. Determine the total volume of snow melted on each day.",
    "input": "The first line contains a single integer N ( 1 \u2264 N \u2264 105) \u2014 the number of days. The second line contains N integers V1, V2, . . . , VN ( 0 \u2264 Vi \u2264 109) , where Vi is the initial size of a snow pile made on the day i. The third line contains N integers T1, T2, . . . , TN ( 0 \u2264 Ti \u2264 109) , where Ti is the temperature on the day i.",
    "output": "Output a single line with N integers, where the i- th integer represents the total volume of snow melted on day i.",
    "note": "In the first sample, Bob first makes a snow pile of volume 10, which melts to the size of 5 on the same day. On the second day, he makes another pile of size 10. Since it is a bit warmer than the day before, the first pile disappears completely while the second pile shrinks to 3. At the end of the second day, he has only a single pile of size 3. On the third day he makes a smaller pile than usual, but as the temperature dropped too, both piles survive till the end of the day.",
    "topics": [
      "binary search",
      "data structures"
    ],
    "id": "923B"
  },
  {
    "title": "SUM and REPLACE",
    "url": "https://codeforces.com/problemset/problem/920/F",
    "history": "Let D( x) be the number of positive divisors of a positive integer x. For example, D( 2) = 2 ( 2 is divisible by 1 and 2) , D( 6) = 4 ( 6 is divisible by 1, 2, 3 and 6) . You are given an array a of n integers. You have to process two types of queries: REPLACE l r \u2014 for every replace ai with D( ai) ; SUM l r \u2014 calculate . Print the answer for each SUM query.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 3\u00b7105) \u2014 the number of elements in the array and the number of queries to process, respectively. The second line contains n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 106) \u2014 the elements of the array. Then m lines follow, each containing 3 integers ti, li, ri denoting i- th query. If ti = 1, then i- th query is REPLACE li ri, otherwise it' s SUM li ri ( 1 \u2264 ti \u2264 2, 1 \u2264 li \u2264 ri \u2264 n) . There is at least one SUM query.",
    "output": "For each SUM query print the answer to it.",
    "note": "",
    "topics": [
      "brute force",
      "data structures",
      "dsu",
      "number theory"
    ],
    "id": "920F"
  },
  {
    "title": "Connected Components?",
    "url": "https://codeforces.com/problemset/problem/920/E",
    "history": "You are given an undirected graph consisting of n vertices and edges. Instead of giving you the edges that exist in the graph, we give you m unordered pairs ( x, y) such that there is no edge between x and y, and if some pair of vertices is not listed in the input, then there is an edge between these vertices. You have to find the number of connected components in the graph and the size of each component. A connected component is a set of vertices X such that for every two vertices from this set there exists at least one path in the graph connecting these vertices, but adding any other vertex to X violates this rule.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 200000, ) . Then m lines follow, each containing a pair of integers x and y ( 1 \u2264 x, y \u2264 n, x = \u0338 y) denoting that there is no edge between x and y. Each pair is listed at most once; ( x, y) and ( y, x) are considered the same ( so they are never listed in the same test) . If some pair of vertices is not listed in the input, then there exists an edge between those vertices.",
    "output": "Firstly print k \u2014 the number of connected components in this graph. Then print k integers \u2014 the sizes of components. You should output these integers in non- descending order.",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "dsu",
      "graphs"
    ],
    "id": "920E"
  },
  {
    "title": "Upside Down",
    "url": "https://codeforces.com/problemset/problem/917/E",
    "history": "As we all know, Eleven has special abilities. Thus, Hopper convinced her to close the gate to the Upside Down World with her mind. Upside down monsters like to move between the worlds, so they are going to attack Hopper and Eleven in order to make them stop. The monsters live in the vines. The vines form a tree with n vertices, numbered from 1 through n. There' s a lowercase English letter written in each tunnel ( edge) . Upside down is a magical world. There are m types of monsters in upside down, numbered from 1 through m. Each type of monster has a special word that gives them powers. The special word of type i is si. There are q monsters in upside down. Each one is at a junction ( vertex) and is going to some other junction. If monster of type k goes from junction i to junction j, the power it gains is the number of times it sees its special world ( sk) consecutively in the tunnels. More formally: If f( i, j) is the string we get when we concatenate the letters written in the tunnels on the shortest path from i to j, then the power the monster gains is the number of occurrences of sk in f( i, j) . Hopper and Eleven want to get prepared, so for each monster, they want to know the power the monster gains after moving.",
    "input": "The first line of input contains three integers, n, m and q ( 2 \u2264 n \u2264 105, 1 \u2264 m, q \u2264 105) . The next n - 1 lines contain the tunnels ( edges) . Each line contains two integers v and u ( 1 \u2264 v, u \u2264 n, v = \u0338 u) and a lowercase English letter c, meaning there' s a tunnel connecting junctions v and u written c in it. It is guaranteed that the given graph is a tree. The next m lines contain the special words. i- th line of them contains a single string si ( 1 \u2264 | si| \u2264 105) , consisting of lowercase English letters. It is guaranteed that | s1| + | s2| + . . . + | sm| \u2264 105) . The next q lines contain the monsters. Each line contains three integers i, j and k ( 1 \u2264 i, j \u2264 n, i = \u0338 j, 1 \u2264 k \u2264 m) , meaning a monster of type k is going from junction number i to junction number j.",
    "output": "Print q lines. i- th line should contain a single integer, the power the i- th monster gains after moving.",
    "note": "",
    "topics": [
      "data structures",
      "string suffix structures",
      "strings",
      "trees"
    ],
    "id": "917E"
  },
  {
    "title": "Jamie and Tree",
    "url": "https://codeforces.com/problemset/problem/916/E",
    "history": "To your surprise, Jamie is the final boss! Ehehehe. Jamie has given you a tree with n vertices, numbered from 1 to n. Initially, the root of the tree is the vertex with number 1. Also, each vertex has a value on it. Jamie also gives you three types of queries on the tree: 1 v \u2014 Change the tree' s root to vertex with number v. 2 u v x \u2014 For each vertex in the subtree of smallest size that contains u and v, add x to its value. 3 v \u2014 Find sum of values of vertices in the subtree of vertex with number v. A subtree of vertex v is a set of vertices such that v lies on shortest path from this vertex to root of the tree. Pay attention that subtree of a vertex can change after changing the tree' s root. Show your strength in programming to Jamie by performing the queries accurately!",
    "input": "The first line of input contains two space- separated integers n and q ( 1 \u2264 n \u2264 105, 1 \u2264 q \u2264 105) \u2014 the number of vertices in the tree and the number of queries to process respectively. The second line contains n space- separated integers a1, a2, . . . , an ( - 108 \u2264 ai \u2264 108) \u2014 initial values of the vertices. Next n - 1 lines contains two space- separated integers ui, vi ( 1 \u2264 ui, vi \u2264 n) describing edge between vertices ui and vi in the tree. The following q lines describe the queries. Each query has one of following formats depending on its type: 1 v ( 1 \u2264 v \u2264 n) for queries of the first type. 2 u v x ( 1 \u2264 u, v \u2264 n, - 108 \u2264 x \u2264 108) for queries of the second type. 3 v ( 1 \u2264 v \u2264 n) for queries of the third type. All numbers in queries' descriptions are integers. The queries must be carried out in the given order. It is guaranteed that the tree is valid.",
    "output": "For each query of the third type, output the required answer. It is guaranteed that at least one query of the third type is given by Jamie.",
    "note": "The following picture shows how the tree varies after the queries in the first sample.",
    "topics": [
      "data structures",
      "trees"
    ],
    "id": "916E"
  },
  {
    "title": "Jamie and To-do List",
    "url": "https://codeforces.com/problemset/problem/916/D",
    "history": "Why I have to finish so many assignments? ? ? Jamie is getting very busy with his school life. He starts to forget the assignments that he has to do. He decided to write the things down on a to- do list. He assigns a value priority for each of his assignment ( lower value means more important) so he can decide which he needs to spend more time on. After a few days, Jamie finds out the list is too large that he can' t even manage the list by himself! As you are a good friend of Jamie, help him write a program to support the following operations on the to- do list: set ai xi \u2014 Add assignment ai to the to- do list if it is not present, and set its priority to xi. If assignment ai is already in the to- do list, its priority is changed to xi. remove ai \u2014 Remove assignment ai from the to- do list if it is present in it. query ai \u2014 Output the number of assignments that are more important ( have a smaller priority value) than assignment ai, so Jamie can decide a better schedule. Output - 1 if ai is not in the to- do list. undo di \u2014 Undo all changes that have been made in the previous di days ( not including the day of this operation) At day 0, the to- do list is empty. In each of the following q days, Jamie will do exactly one out of the four operations. If the operation is a query, you should output the result of the query before proceeding to the next day, or poor Jamie cannot make appropriate decisions. InteractionIf the operation is a query, you should output the result of the query and flush the output stream before proceeding to the next operation. Otherwise, you may get the verdict Idleness Limit Exceed. For flushing the output stream, please refer to the documentation of your chosen programming language. The flush functions of some common programming languages are listed below: C: fflush( stdout) ; C+ + : cout \u00ab flush; Java: System. out. flush( ) ;",
    "input": "The first line consists of a single integer q ( 1 \u2264 q \u2264 105) \u2014 the number of operations. The following q lines consists of the description of the operations. The i- th line consists of the operation that Jamie has done in the i- th day. The query has the following format: The first word in the line indicates the type of operation. It must be one of the following four: set, remove, query, undo. If it is a set operation, a string ai and an integer xi follows ( 1 \u2264 xi \u2264 109) . ai is the assignment that need to be set to priority xi. If it is a remove operation, a string ai follows. ai is the assignment that need to be removed. If it is a query operation, a string ai follows. ai is the assignment that needs to be queried. If it is a undo operation, an integer di follows ( 0 \u2264 di < i) . di is the number of days that changes needed to be undone. All assignment names ai only consists of lowercase English letters and have a length 1 \u2264 | ai| \u2264 15. It is guaranteed that the last operation is a query operation.",
    "output": "For each query operation, output a single integer \u2014 the number of assignments that have a priority lower than assignment ai, or - 1 if ai is not in the to- do list.",
    "note": "",
    "topics": [
      "data structures",
      "interactive",
      "trees"
    ],
    "id": "916D"
  },
  {
    "title": "Imbalance Value of a Tree",
    "url": "https://codeforces.com/problemset/problem/915/F",
    "history": "You are given a tree T consisting of n vertices. A number is written on each vertex; the number written on vertex i is ai. Let' s denote the function I( x, y) as the difference between maximum and minimum value of ai on a simple path connecting vertices x and y. Your task is to calculate .",
    "input": "The first line contains one integer number n ( 1 \u2264 n \u2264 106) \u2014 the number of vertices in the tree. The second line contains n integer numbers a1, a2, . . . , an ( 1 \u2264 ai \u2264 106) \u2014 the numbers written on the vertices. Then n - 1 lines follow. Each line contains two integers x and y denoting an edge connecting vertex x and vertex y ( 1 \u2264 x, y \u2264 n, x = \u0338 y) . It is guaranteed that these edges denote a tree.",
    "output": "Print one number equal to .",
    "note": "",
    "topics": [
      "data structures",
      "dsu",
      "graphs",
      "trees"
    ],
    "id": "915F"
  },
  {
    "title": "Physical Education Lessons",
    "url": "https://codeforces.com/problemset/problem/915/E",
    "history": "This year Alex has finished school, and now he is a first- year student of Berland State University. For him it was a total surprise that even though he studies programming, he still has to attend physical education lessons. The end of the term is very soon, but, unfortunately, Alex still hasn' t attended a single lesson! Since Alex doesn' t want to get expelled, he wants to know the number of working days left until the end of the term, so he can attend physical education lessons during these days. But in BSU calculating the number of working days is a complicated matter: There are n days left before the end of the term ( numbered from 1 to n) , and initially all of them are working days. Then the university staff sequentially publishes q orders, one after another. Each order is characterised by three numbers l, r and k: If k = 1, then all days from l to r ( inclusive) become non- working days. If some of these days are made working days by some previous order, then these days still become non- working days; If k = 2, then all days from l to r ( inclusive) become working days. If some of these days are made non- working days by some previous order, then these days still become working days. Help Alex to determine the number of working days left after each order!",
    "input": "The first line contains one integer n, and the second line \u2014 one integer q ( 1 \u2264 n \u2264 109, 1 \u2264 q \u2264 3\u00b7105) \u2014 the number of days left before the end of the term, and the number of orders, respectively. Then q lines follow, i- th line containing three integers li, ri and ki representing i- th order ( 1 \u2264 li \u2264 ri \u2264 n, 1 \u2264 ki \u2264 2) .",
    "output": "Print q integers. i- th of them must be equal to the number of working days left until the end of the term after the first i orders are published.",
    "note": "",
    "topics": [
      "data structures",
      "implementation",
      "sortings"
    ],
    "id": "915E"
  },
  {
    "title": "Substrings in a String",
    "url": "https://codeforces.com/problemset/problem/914/F",
    "history": "Given a string s, process q queries, each having one of the following forms: 1 i c \u2014 Change the i- th character in the string to c. 2 l r y \u2014 Consider the substring of s starting at position l and ending at position r. Output the number of times y occurs as a substring in it.",
    "input": "The first line of the input contains the string s ( 1 \u2264 | s| \u2264 105) of lowercase English letters. The second line contains an integer q ( 1 \u2264 q \u2264 105) \u2014 the number of queries to process. The next q lines describe the queries and may have one of the following forms: 1 i c ( 1 \u2264 i \u2264 | s| ) 2 l r y ( 1 \u2264 l \u2264 r \u2264 | s| ) c is a lowercase English letter and y is a non- empty string consisting of only lowercase English letters. The sum of | y| over all queries of second type is at most 105. It is guaranteed that there is at least one query of second type. All strings are 1- indexed. | s| is the length of the string s.",
    "output": "For each query of type 2, output the required answer in a separate line.",
    "note": "Consider the first sample case. Initially, the string aba occurs 3 times in the range [ 1, 7] . Note that two occurrences may overlap. After the update, the string becomes ababcbaba and now aba occurs only once in the range [ 1, 7] .",
    "topics": [
      "bitmasks",
      "brute force",
      "data structures",
      "string suffix structures",
      "strings"
    ],
    "id": "914F"
  },
  {
    "title": "Palindromes in a Tree",
    "url": "https://codeforces.com/problemset/problem/914/E",
    "history": "You are given a tree ( a connected acyclic undirected graph) of n vertices. Vertices are numbered from 1 to n and each vertex is assigned a character from a to t. A path in the tree is said to be palindromic if at least one permutation of the labels in the path is a palindrome. For each vertex, output the number of palindromic paths passing through it. Note: The path from vertex u to vertex v is considered to be the same as the path from vertex v to vertex u, and this path will be counted only once for each of the vertices it passes through.",
    "input": "The first line contains an integer n ( 2 \u2264 n \u2264 2\u00b7105) \u2014 the number of vertices in the tree. The next n - 1 lines each contain two integers u and v ( 1 \u2264 u, v \u2264 n, u = \u0338 v) denoting an edge connecting vertex u and vertex v. It is guaranteed that the given graph is a tree. The next line contains a string consisting of n lowercase characters from a to t where the i- th ( 1 \u2264 i \u2264 n) character is the label of vertex i in the tree.",
    "output": "Print n integers in a single line, the i- th of which is the number of palindromic paths passing through vertex i in the tree.",
    "note": "In the first sample case, the following paths are palindromic: 2 - 3 - 42 - 3 - 54 - 3 - 5Additionally, all paths containing only one vertex are palindromic. Listed below are a few paths in the first sample that are not palindromic: 1 - 2 - 31 - 2 - 3 - 41 - 2 - 3 - 5",
    "topics": [
      "bitmasks",
      "data structures",
      "divide and conquer",
      "trees"
    ],
    "id": "914E"
  },
  {
    "title": "Bash and a Tough Math Puzzle",
    "url": "https://codeforces.com/problemset/problem/914/D",
    "history": "Bash likes playing with arrays. He has an array a1, a2, . . . an of n integers. He likes to guess the greatest common divisor ( gcd) of different segments of the array. Of course, sometimes the guess is not correct. However, Bash will be satisfied if his guess is almost correct. Suppose he guesses that the gcd of the elements in the range [ l, r] of a is x. He considers the guess to be almost correct if he can change at most one element in the segment such that the gcd of the segment is x after making the change. Note that when he guesses, he doesn' t actually change the array \u2014 he just wonders if the gcd of the segment can be made x. Apart from this, he also sometimes makes changes to the array itself. Since he can' t figure it out himself, Bash wants you to tell him which of his guesses are almost correct. Formally, you have to process q queries of one of the following forms: 1 l r x \u2014 Bash guesses that the gcd of the range [ l, r] is x. Report if this guess is almost correct. 2 i y \u2014 Bash sets ai to y. Note: The array is 1- indexed.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 5\u00b7105) \u2014 the size of the array. The second line contains n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) \u2014 the elements of the array. The third line contains an integer q ( 1 \u2264 q \u2264 4\u00b7105) \u2014 the number of queries. The next q lines describe the queries and may have one of the following forms: 1 l r x ( 1 \u2264 l \u2264 r \u2264 n, 1 \u2264 x \u2264 109) . 2 i y ( 1 \u2264 i \u2264 n, 1 \u2264 y \u2264 109) . Guaranteed, that there is at least one query of first type.",
    "output": "For each query of first type, output \" YES\" ( without quotes) if Bash' s guess is almost correct and \" NO\" ( without quotes) otherwise.",
    "note": "In the first sample, the array initially is 2, 6, 3. For query 1, the first two numbers already have their gcd as 2. For query 2, we can achieve a gcd of 3 by changing the first element of the array to 3. Note that the changes made during queries of type 1 are temporary and do not get reflected in the array. After query 3, the array is now 9, 6, 3. For query 4, no matter which element you change, you cannot get the gcd of the range to be 2.",
    "topics": [
      "data structures",
      "number theory"
    ],
    "id": "914D"
  },
  {
    "title": "Too Easy Problems",
    "url": "https://codeforces.com/problemset/problem/913/D",
    "history": "You are preparing for an exam on scheduling theory. The exam will last for exactly T milliseconds and will consist of n problems. You can either solve problem i in exactly ti milliseconds or ignore it and spend no time. You don' t need time to rest after solving a problem, either. Unfortunately, your teacher considers some of the problems too easy for you. Thus, he assigned an integer ai to every problem i meaning that the problem i can bring you a point to the final score only in case you have solved no more than ai problems overall ( including problem i) . Formally, suppose you solve problems p1, p2, . . . , pk during the exam. Then, your final score s will be equal to the number of values of j between 1 and k such that k \u2264 apj. You have guessed that the real first problem of the exam is already in front of you. Therefore, you want to choose a set of problems to solve during the exam maximizing your final score in advance. Don' t forget that the exam is limited in time, and you must have enough time to solve all chosen problems. If there exist different sets of problems leading to the maximum final score, any of them will do.",
    "input": "The first line contains two integers n and T ( 1 \u2264 n \u2264 2\u00b7105; 1 \u2264 T \u2264 109) \u2014 the number of problems in the exam and the length of the exam in milliseconds, respectively. Each of the next n lines contains two integers ai and ti ( 1 \u2264 ai \u2264 n; 1 \u2264 ti \u2264 104) . The problems are numbered from 1 to n.",
    "output": "In the first line, output a single integer s \u2014 your maximum possible final score. In the second line, output a single integer k ( 0 \u2264 k \u2264 n) \u2014 the number of problems you should solve. In the third line, output k distinct integers p1, p2, . . . , pk ( 1 \u2264 pi \u2264 n) \u2014 the indexes of problems you should solve, in any order. If there are several optimal sets of problems, you may output any of them.",
    "note": "In the first example, you should solve problems 3, 1, and 4. In this case you' ll spend 80 + 100 + 90 = 270 milliseconds, falling within the length of the exam, 300 milliseconds ( and even leaving yourself 30 milliseconds to have a rest) . Problems 3 and 1 will bring you a point each, while problem 4 won' t. You' ll score two points. In the second example, the length of the exam is catastrophically not enough to solve even a single problem. In the third example, you have just enough time to solve both problems in 42 + 58 = 100 milliseconds and hand your solutions to the teacher with a smile.",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "913D"
  },
  {
    "title": "Fishes",
    "url": "https://codeforces.com/problemset/problem/912/D",
    "history": "While Grisha was celebrating New Year with Ded Moroz, Misha gifted Sasha a small rectangular pond of size n \u00d7 m, divided into cells of size 1 \u00d7 1, inhabited by tiny evil fishes ( no more than one fish per cell, otherwise they' ll strife! ) . The gift bundle also includes a square scoop of size r \u00d7 r, designed for fishing. If the lower- left corner of the scoop- net is located at cell ( x, y) , all fishes inside the square ( x, y) . . . ( x + r - 1, y + r - 1) get caught. Note that the scoop- net should lie completely inside the pond when used. Unfortunately, Sasha is not that skilled in fishing and hence throws the scoop randomly. In order to not frustrate Sasha, Misha decided to release k fishes into the empty pond in such a way that the expected value of the number of caught fishes is as high as possible. Help Misha! In other words, put k fishes in the pond into distinct cells in such a way that when the scoop- net is placed into a random position among ( n - r + 1) \u00b7( m - r + 1) possible positions, the average number of caught fishes is as high as possible.",
    "input": "The only line contains four integers n, m, r, k ( 1 \u2264 n, m \u2264 105, 1 \u2264 r \u2264 min( n, m) , 1 \u2264 k \u2264 min( n\u00b7m, 105) ) .",
    "output": "Print a single number \u2014 the maximum possible expected number of caught fishes. You answer is considered correct, is its absolute or relative error does not exceed 10 - 9. Namely, let your answer be a, and the jury' s answer be b. Your answer is considered correct, if .",
    "note": "In the first example you can put the fishes in cells ( 2, 1) , ( 2, 2) , ( 2, 3) . In this case, for any of four possible positions of the scoop- net ( highlighted with light green) , the number of fishes inside is equal to two, and so is the expected value.",
    "topics": [
      "data structures",
      "graphs",
      "greedy",
      "probabilities",
      "shortest paths"
    ],
    "id": "912D"
  },
  {
    "title": "Mass Change Queries",
    "url": "https://codeforces.com/problemset/problem/911/G",
    "history": "You are given an array a consisting of n integers. You have to process q queries to this array; each query is given as four numbers l, r, x and y, denoting that for every i such that l \u2264 i \u2264 r and ai = x you have to set ai equal to y. Print the array after all queries are processed.",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 200000) \u2014 the size of array a. The second line contains n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 100) \u2014 the elements of array a. The third line contains one integer q ( 1 \u2264 q \u2264 200000) \u2014 the number of queries you have to process. Then q lines follow. i- th line contains four integers l, r, x and y denoting i- th query ( 1 \u2264 l \u2264 r \u2264 n, 1 \u2264 x, y \u2264 100) .",
    "output": "Print n integers \u2014 elements of array a after all changes are made.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": "911G"
  },
  {
    "title": "Stack Sorting",
    "url": "https://codeforces.com/problemset/problem/911/E",
    "history": "Let' s suppose you have an array a, a stack s ( initially empty) and an array b ( also initially empty) . You may perform the following operations until both a and s are empty: Take the first element of a, push it into s and remove it from a ( if a is not empty) ; Take the top element from s, append it to the end of array b and remove it from s ( if s is not empty) . You can perform these operations in arbitrary order. If there exists a way to perform the operations such that array b is sorted in non- descending order in the end, then array a is called stack- sortable. For example, [ 3, 1, 2] is stack- sortable, because b will be sorted if we perform the following operations: Remove 3 from a and push it into s; Remove 1 from a and push it into s; Remove 1 from s and append it to the end of b; Remove 2 from a and push it into s; Remove 2 from s and append it to the end of b; Remove 3 from s and append it to the end of b. After all these operations b = [ 1, 2, 3] , so [ 3, 1, 2] is stack- sortable. [ 2, 3, 1] is not stack- sortable. You are given k first elements of some permutation p of size n ( recall that a permutation of size n is an array of size n where each integer from 1 to n occurs exactly once) . You have to restore the remaining n - k elements of this permutation so it is stack- sortable. If there are multiple answers, choose the answer such that p is lexicographically maximal ( an array q is lexicographically greater than an array p iff there exists some integer k such that for every i < k qi = pi, and qk > pk) . You may not swap or change any of first k elements of the permutation. Print the lexicographically maximal permutation p you can obtain. If there exists no answer then output - 1.",
    "input": "The first line contains two integers n and k ( 2 \u2264 n \u2264 200000, 1 \u2264 k < n) \u2014 the size of a desired permutation, and the number of elements you are given, respectively. The second line contains k integers p1, p2, . . . , pk ( 1 \u2264 pi \u2264 n) \u2014 the first k elements of p. These integers are pairwise distinct.",
    "output": "If it is possible to restore a stack- sortable permutation p of size n such that the first k elements of p are equal to elements given in the input, print lexicographically maximal such permutation. Otherwise print - 1.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "911E"
  },
  {
    "title": "Colorful Points",
    "url": "https://codeforces.com/problemset/problem/909/D",
    "history": "You are given a set of points on a straight line. Each point has a color assigned to it. For point a, its neighbors are the points which don' t have any other points between them and a. Each point has at most two neighbors - one from the left and one from the right. You perform a sequence of operations on this set of points. In one operation, you delete all points which have a neighbor point of a different color than the point itself. Points are deleted simultaneously, i. e. first you decide which points have to be deleted and then delete them. After that you can perform the next operation etc. If an operation would not delete any points, you can' t perform it. How many operations will you need to perform until the next operation does not have any points to delete?",
    "input": "Input contains a single string of lowercase English letters ' a' - ' z' . The letters give the points' colors in the order in which they are arranged on the line: the first letter gives the color of the leftmost point, the second gives the color of the second point from the left etc. The number of the points is between 1 and 106.",
    "output": "Output one line containing an integer - the number of operations which can be performed on the given set of points until there are no more points to delete.",
    "note": "In the first test case, the first operation will delete two middle points and leave points \" ab\" , which will be deleted with the second operation. There will be no points left to apply the third operation to. In the second test case, the first operation will delete the four points in the middle, leaving points \" aa\" . None of them have neighbors of other colors, so the second operation can' t be applied.",
    "topics": [
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "909D"
  },
  {
    "title": "Yet Another Maxflow Problem",
    "url": "https://codeforces.com/problemset/problem/903/G",
    "history": "In this problem you will have to deal with a very special network. The network consists of two parts: part A and part B. Each part consists of n vertices; i- th vertex of part A is denoted as Ai, and i- th vertex of part B is denoted as Bi. For each index i ( 1 \u2264 i < n) there is a directed edge from vertex Ai to vertex Ai + 1, and from Bi to Bi + 1, respectively. Capacities of these edges are given in the input. Also there might be several directed edges going from part A to part B ( but never from B to A) . You have to calculate the maximum flow value from A1 to Bn in this network. Capacities of edges connecting Ai to Ai + 1 might sometimes change, and you also have to maintain the maximum flow value after these changes. Apart from that, the network is fixed ( there are no changes in part B, no changes of edges going from A to B, and no edge insertions or deletions) . Take a look at the example and the notes to understand the structure of the network better.",
    "input": "The first line contains three integer numbers n, m and q ( 2 \u2264 n, m \u2264 2\u00b7105, 0 \u2264 q \u2264 2\u00b7105) \u2014 the number of vertices in each part, the number of edges going from A to B and the number of changes, respectively. Then n - 1 lines follow, i- th line contains two integers xi and yi denoting that the edge from Ai to Ai + 1 has capacity xi and the edge from Bi to Bi + 1 has capacity yi ( 1 \u2264 xi, yi \u2264 109) . Then m lines follow, describing the edges from A to B. Each line contains three integers x, y and z denoting an edge from Ax to By with capacity z ( 1 \u2264 x, y \u2264 n, 1 \u2264 z \u2264 109) . There might be multiple edges from Ax to By. And then q lines follow, describing a sequence of changes to the network. i- th line contains two integers vi and wi, denoting that the capacity of the edge from Avi to Avi + 1 is set to wi ( 1 \u2264 vi < n, 1 \u2264 wi \u2264 109) .",
    "output": "Firstly, print the maximum flow value in the original network. Then print q integers, i- th of them must be equal to the maximum flow value after i- th change.",
    "note": "This is the original network in the example:",
    "topics": [
      "data structures",
      "flows",
      "graphs"
    ],
    "id": "903G"
  },
  {
    "title": "Almost Difference",
    "url": "https://codeforces.com/problemset/problem/903/D",
    "history": "Let' s denote a function You are given an array a consisting of n integers. You have to calculate the sum of d( ai, aj) over all pairs ( i, j) such that 1 \u2264 i \u2264 j \u2264 n.",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 200000) \u2014 the number of elements in a. The second line contains n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) \u2014 elements of the array.",
    "output": "Print one integer \u2014 the sum of d( ai, aj) over all pairs ( i, j) such that 1 \u2264 i \u2264 j \u2264 n.",
    "note": "In the first example: d( a1, a2) = 0; d( a1, a3) = 2; d( a1, a4) = 0; d( a1, a5) = 2; d( a2, a3) = 0; d( a2, a4) = 0; d( a2, a5) = 0; d( a3, a4) = - 2; d( a3, a5) = 0; d( a4, a5) = 2.",
    "topics": [
      "data structures",
      "math"
    ],
    "id": "903D"
  },
  {
    "title": "Bipartite Segments",
    "url": "https://codeforces.com/problemset/problem/901/C",
    "history": "You are given an undirected graph with n vertices. There are no edge- simple cycles with the even length in it. In other words, there are no cycles of even length that pass each edge at most once. Let' s enumerate vertices from 1 to n. You have to answer q queries. Each query is described by a segment of vertices [ l; r] , and you have to count the number of its subsegments [ x; y] ( l \u2264 x \u2264 y \u2264 r) , such that if we delete all vertices except the segment of vertices [ x; y] ( including x and y) and edges between them, the resulting graph is bipartite.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 3\u00b7105, 1 \u2264 m \u2264 3\u00b7105) \u2014 the number of vertices and the number of edges in the graph. The next m lines describe edges in the graph. The i- th of these lines contains two integers ai and bi ( 1 \u2264 ai, bi \u2264 n; ai = \u0338 bi) , denoting an edge between vertices ai and bi. It is guaranteed that this graph does not contain edge- simple cycles of even length. The next line contains a single integer q ( 1 \u2264 q \u2264 3\u00b7105) \u2014 the number of queries. The next q lines contain queries. The i- th of these lines contains two integers li and ri ( 1 \u2264 li \u2264 ri \u2264 n) \u2014 the query parameters.",
    "output": "Print q numbers, each in new line: the i- th of them should be the number of subsegments [ x; y] ( li \u2264 x \u2264 y \u2264 ri) , such that the graph that only includes vertices from segment [ x; y] and edges between them is bipartite.",
    "note": "The first example is shown on the picture below: For the first query, all subsegments of [ 1; 3] , except this segment itself, are suitable. For the first query, all subsegments of [ 4; 6] , except this segment itself, are suitable. For the third query, all subsegments of [ 1; 6] are suitable, except [ 1; 3] , [ 1; 4] , [ 1; 5] , [ 1; 6] , [ 2; 6] , [ 3; 6] , [ 4; 6] . The second example is shown on the picture below:",
    "topics": [
      "binary search",
      "data structures",
      "dfs and similar",
      "dsu",
      "graphs",
      "two pointers"
    ],
    "id": "901C"
  },
  {
    "title": "Maximum Questions",
    "url": "https://codeforces.com/problemset/problem/900/E",
    "history": "Vasya wrote down two strings s of length n and t of length m consisting of small English letters ' a' and ' b' . What is more, he knows that string t has a form \" abab. . . \" , namely there are letters ' a' on odd positions and letters ' b' on even positions. Suddenly in the morning, Vasya found that somebody spoiled his string. Some letters of the string s were replaced by character ' ? ' . Let' s call a sequence of positions i, i + 1, . . . , i + m - 1 as occurrence of string t in s, if 1 \u2264 i \u2264 n - m + 1 and t1 = si, t2 = si + 1, . . . , tm = si + m - 1. The boy defines the beauty of the string s as maximum number of disjoint occurrences of string t in s. Vasya can replace some letters ' ? ' with ' a' or ' b' ( letters on different positions can be replaced with different letter) . Vasya wants to make some replacements in such a way that beauty of string s is maximum possible. From all such options, he wants to choose one with the minimum number of replacements. Find the number of replacements he should make.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 105) \u2014 the length of s. The second line contains the string s of length n. It contains small English letters ' a' , ' b' and characters ' ? ' only. The third line contains a single integer m ( 1 \u2264 m \u2264 105) \u2014 the length of t. The string t contains letters ' a' on odd positions and ' b' on even positions.",
    "output": "Print the only integer \u2014 the minimum number of replacements Vasya has to perform to make the beauty of string s the maximum possible.",
    "note": "In the first sample string t has a form ' a' . The only optimal option is to replace all characters ' ? ' by ' a' . In the second sample using two replacements we can make string equal to \" aba? aba? ? \" . It is impossible to get more than two occurrences.",
    "topics": [
      "data structures",
      "dp",
      "strings"
    ],
    "id": "900E"
  },
  {
    "title": "Remove Extra One",
    "url": "https://codeforces.com/problemset/problem/900/C",
    "history": "You are given a permutation p of length n. Remove one element from permutation to make the number of records the maximum possible. We remind that in a sequence of numbers a1, a2, . . . , ak the element ai is a record if for every integer j ( 1 \u2264 j < i) the following holds: aj < ai.",
    "input": "The first line contains the only integer n ( 1 \u2264 n \u2264 105) \u2014 the length of the permutation. The second line contains n integers p1, p2, . . . , pn ( 1 \u2264 pi \u2264 n) \u2014 the permutation. All the integers are distinct.",
    "output": "Print the only integer \u2014 the element that should be removed to make the number of records the maximum possible. If there are multiple such elements, print the smallest one.",
    "note": "In the first example the only element can be removed.",
    "topics": [
      "brute force",
      "data structures",
      "math"
    ],
    "id": "900C"
  },
  {
    "title": "Letters Removing",
    "url": "https://codeforces.com/problemset/problem/899/F",
    "history": "Petya has a string of length n consisting of small and large English letters and digits. He performs m operations. Each operation is described with two integers l and r and a character c: Petya removes from the string all characters c on positions between l and r, inclusive. It' s obvious that the length of the string remains the same or decreases after each operation. Find how the string will look like after Petya performs all m operations.",
    "input": "The first string contains two integers n and m ( 1 \u2264 n, m \u2264 2\u00b7105) \u2014 the length of the string and the number of operations. The second line contains the string of length n, consisting of small and large English letters and digits. Positions in the string are enumerated from 1. Each of the next m lines contains two integers l and r ( 1 \u2264 l \u2264 r) , followed by a character c, which is a small or large English letter or a digit. This line describes one operation. It is guaranteed that r doesn' t exceed the length of the string s before current operation.",
    "output": "Print the string Petya will obtain after performing all m operations. If the strings becomes empty after all operations, print an empty line.",
    "note": "In the first example during the first operation both letters ' a' are removed, so the string becomes \" bc\" . During the second operation the letter ' c' ( on the second position) is removed, and the string becomes \" b\" . In the second example during the first operation Petya removes ' 0' from the second position. After that the string becomes \" Az\" . During the second operations the string doesn' t change.",
    "topics": [
      "data structures",
      "strings"
    ],
    "id": "899F"
  },
  {
    "title": "Segments Removal",
    "url": "https://codeforces.com/problemset/problem/899/E",
    "history": "Vasya has an array of integers of length n. Vasya performs the following operations on the array: on each step he finds the longest segment of consecutive equal integers ( the leftmost, if there are several such segments) and removes it. For example, if Vasya' s array is [ 13, 13, 7, 7, 7, 2, 2, 2] , then after one operation it becomes [ 13, 13, 2, 2, 2] . Compute the number of operations Vasya should make until the array becomes empty, i. e. Vasya removes all elements from it.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 200 000) \u2014 the length of the array. The second line contains a sequence a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) \u2014 Vasya' s array.",
    "output": "Print the number of operations Vasya should make to remove all elements from the array.",
    "note": "In the first example, at first Vasya removes two fives at the second and third positions. The array becomes [ 2, 2] . In the second operation Vasya removes two twos at the first and second positions. After that the array becomes empty. In the second example Vasya has to perform five operations to make the array empty. In each of them he removes the first element from the array. In the third example Vasya needs three operations. In the first operation he removes all integers 4, in the second \u2014 all integers 100, in the third \u2014 all integers 2. In the fourth example in the first operation Vasya removes the first two integers 10. After that the array becomes [ 50, 10, 50, 50] . Then in the second operation Vasya removes the two rightmost integers 50, so that the array becomes [ 50, 10] . In the third operation he removes the remaining 50, and the array becomes [ 10] after that. In the last, fourth operation he removes the only remaining 10. The array is empty after that.",
    "topics": [
      "data structures",
      "dsu",
      "flows",
      "implementation",
      "two pointers"
    ],
    "id": "899E"
  },
  {
    "title": "Welcome home, Chtholly",
    "url": "https://codeforces.com/problemset/problem/896/E",
    "history": "\u2014 I. . . I survived. \u2014 Welcome home, Chtholly. \u2014 I kept my promise. . . \u2014 I made it. . . I really made it! After several days of fighting, Chtholly Nota Seniorious miraculously returned from the fierce battle. As promised, Willem is now baking butter cake for her. However, although Willem is skilled in making dessert, he rarely bakes butter cake. This time, Willem made a big mistake \u2014 he accidentally broke the oven! Fortunately, Chtholly decided to help him. Willem puts n cakes on a roll, cakes are numbered from 1 to n, the i- th cake needs ai seconds of baking. Willem needs Chtholly to do m operations to bake the cakes. Operation 1: 1 l r xWillem asks Chtholly to check each cake in the range [ l, r] , if the cake needs to be baked for more than x seconds, he would bake it for x seconds and put it back in its place. More precisely, for every i in range [ l, r] , if ai is strictly more than x, ai becomes equal ai - x. Operation 2: 2 l r xWillem asks Chtholly to count the number of cakes in the range [ l, r] that needs to be cooked for exactly x seconds. More formally you should find number of such i in range [ l, r] , that ai = x.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 105) . The second line contains n integers, i- th of them is ai ( 1 \u2264 ai \u2264 105) . The next m lines are the m operations described above. It is guaranteed that 1 \u2264 l \u2264 r \u2264 n and 1 \u2264 x \u2264 105.",
    "output": "For each operation of the second type, print the answer.",
    "note": "",
    "topics": [
      "data structures",
      "dsu"
    ],
    "id": "896E"
  },
  {
    "title": "Willem, Chtholly and Seniorious",
    "url": "https://codeforces.com/problemset/problem/896/C",
    "history": "\u2014 Willem. . . \u2014 What' s the matter? \u2014 It seems that there' s something wrong with Seniorious. . . \u2014 I' ll have a look. . . Seniorious is made by linking special talismans in particular order. After over 500 years, the carillon is now in bad condition, so Willem decides to examine it thoroughly. Seniorious has n pieces of talisman. Willem puts them in a line, the i- th of which is an integer ai. In order to maintain it, Willem needs to perform m operations. There are four types of operations: 1 l r x: For each i such that l \u2264 i \u2264 r, assign ai + x to ai. 2 l r x: For each i such that l \u2264 i \u2264 r, assign x to ai. 3 l r x: Print the x- th smallest number in the index range [ l, r] , i. e. the element at the x- th position if all the elements ai such that l \u2264 i \u2264 r are taken and sorted into an array of non- decreasing integers. It' s guaranteed that 1 \u2264 x \u2264 r - l + 1. 4 l r x y: Print the sum of the x- th power of ai such that l \u2264 i \u2264 r, modulo y, i. e. .",
    "input": "The only line contains four integers n, m, seed, vmax ( 1 \u2264 n, m \u2264 105, 0 \u2264 seed < 109 + 7, 1 \u2264 vmax \u2264 109) . The initial values and operations are generated using following pseudo code: def rnd( ) : ret = seed seed = ( seed * 7 + 13) mod 1000000007 return retfor i = 1 to n: a[ i] = ( rnd( ) mod vmax) + 1for i = 1 to m: op = ( rnd( ) mod 4) + 1 l = ( rnd( ) mod n) + 1 r = ( rnd( ) mod n) + 1 if ( l > r) : swap( l, r) if ( op = = 3) : x = ( rnd( ) mod ( r - l + 1) ) + 1 else: x = ( rnd( ) mod vmax) + 1 if ( op = = 4) : y = ( rnd( ) mod vmax) + 1Here op is the type of the operation mentioned in the legend.",
    "output": "For each operation of types 3 or 4, output a line containing the answer.",
    "note": "In the first example, the initial array is 8, 9, 7, 2, 3, 1, 5, 6, 4, 8. The operations are: 2 6 7 9 1 3 10 8 4 4 6 2 4 1 4 5 8 2 1 7 1 4 7 9 4 4 1 2 7 9 4 5 8 1 1 2 5 7 5 4 3 10 8 5",
    "topics": [
      "data structures",
      "probabilities"
    ],
    "id": "896C"
  },
  {
    "title": "Eyes Closed",
    "url": "https://codeforces.com/problemset/problem/895/E",
    "history": "Vasya and Petya were tired of studying so they decided to play a game. Before the game begins Vasya looks at array a consisting of n integers. As soon as he remembers all elements of a the game begins. Vasya closes his eyes and Petya does q actions of one of two types: 1) Petya says 4 integers l1, r1, l2, r2 \u2014 boundaries of two non- intersecting segments. After that he swaps one random element from the [ l1, r1] segment with another random element from the [ l2, r2] segment. 2) Petya asks Vasya the sum of the elements of a in the [ l, r] segment. Vasya is a mathematician so he answers Petya the mathematical expectation of the sum of the elements in the segment. Your task is to write a program which will answer the second type questions as Vasya would do it. In other words your program should print the mathematical expectation of the sum of the elements of a in the [ l, r] segment for every second type query.",
    "input": "The first line contains two integers n, q ( 2 \u2264 n \u2264 105, 1 \u2264 q \u2264 105) \u2014 the number of elements in the array and the number of queries you need to handle. The second line contains n integers ai ( 1 \u2264 ai \u2264 109) \u2014 elements of the array. The next q lines contain Petya' s actions of type 1 or 2. If it is a type 1 action then the line contains 5 integers 1, l1, r1, l2, r2 ( 1 \u2264 l1 \u2264 r1 \u2264 n, 1 \u2264 l2 \u2264 r2 \u2264 n) . If it is a type 2 query then the line contains 3 integers 2, l, r ( 1 \u2264 l \u2264 r \u2264 n) . It is guaranteed that there is at least one type 2 query and segments [ l1, r1] , [ l2, r2] don' t have common elements.",
    "output": "For each type 2 query print one real number \u2014 the mathematical expectation of the sum of elements in the segment. Your answer will be considered correct if its absolute or relative error doesn' t exceed 10 - 4 \u2014 formally, the answer is correct if where x is jury' s answer and y is yours.",
    "note": "",
    "topics": [
      "data structures",
      "probabilities"
    ],
    "id": "895E"
  },
  {
    "title": "Ralph And His Tour in Binary Country",
    "url": "https://codeforces.com/problemset/problem/894/D",
    "history": "Ralph is in the Binary Country. The Binary Country consists of n cities and ( n - 1) bidirectional roads connecting the cities. The roads are numbered from 1 to ( n - 1) , the i- th road connects the city labeled ( here \u230a x\u230b denotes the x rounded down to the nearest integer) and the city labeled ( i + 1) , and the length of the i- th road is Li. Now Ralph gives you m queries. In each query he tells you some city Ai and an integer Hi. He wants to make some tours starting from this city. He can choose any city in the Binary Country ( including Ai) as the terminal city for a tour. He gains happiness ( Hi - L) during a tour, where L is the distance between the city Ai and the terminal city. Ralph is interested in tours from Ai in which he can gain positive happiness. For each query, compute the sum of happiness gains for all such tours. Ralph will never take the same tour twice or more ( in one query) , he will never pass the same city twice or more in one tour.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 106, 1 \u2264 m \u2264 105) . ( n - 1) lines follow, each line contains one integer Li ( 1 \u2264 Li \u2264 105) , which denotes the length of the i- th road. m lines follow, each line contains two integers Ai and Hi ( 1 \u2264 Ai \u2264 n, 0 \u2264 Hi \u2264 107) .",
    "output": "Print m lines, on the i- th line print one integer \u2014 the answer for the i- th query.",
    "note": "Here is the explanation for the second sample. Ralph' s first query is to start tours from city 2 and Hi equals to 4. Here are the options: He can choose city 5 as his terminal city. Since the distance between city 5 and city 2 is 3, he can gain happiness 4 - 3 = 1. He can choose city 4 as his terminal city and gain happiness 3. He can choose city 1 as his terminal city and gain happiness 2. He can choose city 3 as his terminal city and gain happiness 1. Note that Ralph can choose city 2 as his terminal city and gain happiness 4. Ralph won' t choose city 6 as his terminal city because the distance between city 6 and city 2 is 5, which leads to negative happiness for Ralph. So the answer for the first query is 1 + 3 + 2 + 1 + 4 = 11.",
    "topics": [
      "brute force",
      "data structures",
      "trees"
    ],
    "id": "894D"
  },
  {
    "title": "Subtree Minimum Query",
    "url": "https://codeforces.com/problemset/problem/893/F",
    "history": "You are given a rooted tree consisting of n vertices. Each vertex has a number written on it; number ai is written on vertex i. Let' s denote d( i, j) as the distance between vertices i and j in the tree ( that is, the number of edges in the shortest path from i to j) . Also let' s denote the k- blocked subtree of vertex x as the set of vertices y such that both these conditions are met: x is an ancestor of y ( every vertex is an ancestor of itself) ; d( x, y) \u2264 k. You are given m queries to the tree. i- th query is represented by two numbers xi and ki, and the answer to this query is the minimum value of aj among such vertices j such that j belongs to ki- blocked subtree of xi. Write a program that would process these queries quickly! Note that the queries are given in a modified way.",
    "input": "The first line contains two integers n and r ( 1 \u2264 r \u2264 n \u2264 100000) \u2014 the number of vertices in the tree and the index of the root, respectively. The second line contains n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) \u2014 the numbers written on the vertices. Then n - 1 lines follow, each containing two integers x and y ( 1 \u2264 x, y \u2264 n) and representing an edge between vertices x and y. It is guaranteed that these edges form a tree. Next line contains one integer m ( 1 \u2264 m \u2264 106) \u2014 the number of queries to process. Then m lines follow, i- th line containing two numbers pi and qi, which can be used to restore i- th query ( 1 \u2264 pi, qi \u2264 n) . i- th query can be restored as follows: Let last be the answer for previous query ( or 0 if i = 1) . Then xi = ( ( pi + last) mod n) + 1, and ki = ( qi + last) mod n.",
    "output": "Print m integers. i- th of them has to be equal to the answer to i- th query.",
    "note": "",
    "topics": [
      "data structures",
      "trees"
    ],
    "id": "893F"
  },
  {
    "title": "Credit Card",
    "url": "https://codeforces.com/problemset/problem/893/D",
    "history": "Recenlty Luba got a credit card and started to use it. Let' s consider n consecutive days Luba uses the card. She starts with 0 money on her account. In the evening of i- th day a transaction ai occurs. If ai > 0, then ai bourles are deposited to Luba' s account. If ai < 0, then ai bourles are withdrawn. And if ai = 0, then the amount of money on Luba' s account is checked. In the morning of any of n days Luba can go to the bank and deposit any positive integer amount of burles to her account. But there is a limitation: the amount of money on the account can never exceed d. It can happen that the amount of money goes greater than d by some transaction in the evening. In this case answer will be \u00ab- 1\u00bb. Luba must not exceed this limit, and also she wants that every day her account is checked ( the days when ai = 0) the amount of money on her account is non- negative. It takes a lot of time to go to the bank, so Luba wants to know the minimum number of days she needs to deposit some money to her account ( if it is possible to meet all the requirements) . Help her!",
    "input": "The first line contains two integers n, d ( 1 \u2264 n \u2264 105, 1 \u2264 d \u2264 109) \u2014the number of days and the money limitation. The second line contains n integer numbers a1, a2, . . . an ( - 104 \u2264 ai \u2264 104) , where ai represents the transaction in i- th day.",
    "output": "Print - 1 if Luba cannot deposit the money to her account in such a way that the requirements are met. Otherwise print the minimum number of days Luba has to deposit money.",
    "note": "",
    "topics": [
      "data structures",
      "dp",
      "greedy",
      "implementation"
    ],
    "id": "893D"
  },
  {
    "title": "Envy",
    "url": "https://codeforces.com/problemset/problem/891/C",
    "history": "For a connected undirected weighted graph G, MST ( minimum spanning tree) is a subgraph of G that contains all of G' s vertices, is a tree, and sum of its edges is minimum possible. You are given a graph G. If you run a MST algorithm on graph it would give you only one MST and it causes other edges to become jealous. You are given some queries, each query contains a set of edges of graph G, and you should determine whether there is a MST containing all these edges or not.",
    "input": "The first line contains two integers n, m ( 2 \u2264 n, m \u2264 5\u00b7105, n - 1 \u2264 m) \u2014 the number of vertices and edges in the graph and the number of queries. The i- th of the next m lines contains three integers ui, vi, wi ( ui = \u0338 vi, 1 \u2264 wi \u2264 5\u00b7105) \u2014 the endpoints and weight of the i- th edge. There can be more than one edges between two vertices. It' s guaranteed that the given graph is connected. The next line contains a single integer q ( 1 \u2264 q \u2264 5\u00b7105) \u2014 the number of queries. q lines follow, the i- th of them contains the i- th query. It starts with an integer ki ( 1 \u2264 ki \u2264 n - 1) \u2014 the size of edges subset and continues with ki distinct space- separated integers from 1 to m \u2014 the indices of the edges. It is guaranteed that the sum of ki for 1 \u2264 i \u2264 q does not exceed 5\u00b7105.",
    "output": "For each query you should print \" YES\" ( without quotes) if there' s a MST containing these edges and \" NO\" ( of course without quotes again) otherwise.",
    "note": "This is the graph of sample: Weight of minimum spanning tree on this graph is 6. MST with edges ( 1, 3, 4, 6) , contains all of edges from the first query, so answer on the first query is \" YES\" . Edges from the second query form a cycle of length 3, so there is no spanning tree including these three edges. Thus, answer is \" NO\" .",
    "topics": [
      "data structures",
      "dsu",
      "graphs"
    ],
    "id": "891C"
  },
  {
    "title": "Xor-MST",
    "url": "https://codeforces.com/problemset/problem/888/G",
    "history": "You are given a complete undirected graph with n vertices. A number ai is assigned to each vertex, and the weight of an edge between vertices i and j is equal to ai xor aj. Calculate the weight of the minimum spanning tree in this graph.",
    "input": "The first line contains n ( 1 \u2264 n \u2264 200000) \u2014 the number of vertices in the graph. The second line contains n integers a1, a2, . . . , an ( 0 \u2264 ai < 230) \u2014 the numbers assigned to the vertices.",
    "output": "Print one number \u2014 the weight of the minimum spanning tree in the graph.",
    "note": "",
    "topics": [
      "bitmasks",
      "constructive algorithms",
      "data structures"
    ],
    "id": "888G"
  },
  {
    "title": "Ratings and Reality Shows",
    "url": "https://codeforces.com/problemset/problem/887/D",
    "history": "There are two main kinds of events in the life of top- model: fashion shows and photo shoots. Participating in any of these events affects the rating of appropriate top- model. After each photo shoot model' s rating increases by a and after each fashion show decreases by b ( designers do too many experiments nowadays) . Moreover, sometimes top- models participates in talk shows. After participating in talk show model becomes more popular and increasing of her rating after photo shoots become c and decreasing of her rating after fashion show becomes d. Izabella wants to participate in a talk show, but she wants to do it in such a way that her rating will never become negative. Help her to find a suitable moment for participating in the talk show. Let' s assume that model' s career begins in moment 0. At that moment Izabella' s rating was equal to start. If talk show happens in moment t if will affect all events in model' s life in interval of time [ t. . t + len) ( including t and not including t + len) , where len is duration of influence. Izabella wants to participate in a talk show, but she wants to do it in such a way that her rating will not become become negative before talk show or during period of influence of talk show. Help her to find a suitable moment for participating in the talk show.",
    "input": "In first line there are 7 positive integers n, a, b, c, d, start, len ( 1 \u2264 n \u2264 3\u00b7105, 0 \u2264 start \u2264 109, 1 \u2264 a, b, c, d, len \u2264 109) , where n is a number of fashion shows and photo shoots, a, b, c and d are rating changes described above, start is an initial rating of model and len is a duration of influence of talk show. In next n lines descriptions of events are given. Each of those lines contains two integers ti and qi ( 1 \u2264 ti \u2264 109, 0 \u2264 q \u2264 1) \u2014 moment, in which event happens and type of this event. Type 0 corresponds to the fashion show and type 1 \u2014 to photo shoot. Events are given in order of increasing ti, all ti are different.",
    "output": "Print one non- negative integer t \u2014 the moment of time in which talk show should happen to make Izabella' s rating non- negative before talk show and during period of influence of talk show. If there are multiple answers print smallest of them. If there are no such moments, print - 1.",
    "note": "",
    "topics": [
      "data structures",
      "two pointers"
    ],
    "id": "887D"
  },
  {
    "title": "Boxes And Balls",
    "url": "https://codeforces.com/problemset/problem/884/D",
    "history": "Ivan has n different boxes. The first of them contains some balls of n different colors. Ivan wants to play a strange game. He wants to distribute the balls into boxes in such a way that for every i ( 1 \u2264 i \u2264 n) i- th box will contain all balls with color i. In order to do this, Ivan will make some turns. Each turn he does the following: Ivan chooses any non- empty box and takes all balls from this box; Then Ivan chooses any k empty boxes ( the box from the first step becomes empty, and Ivan is allowed to choose it) , separates the balls he took on the previous step into k non- empty groups and puts each group into one of the boxes. He should put each group into a separate box. He can choose either k = 2 or k = 3. The penalty of the turn is the number of balls Ivan takes from the box during the first step of the turn. And penalty of the game is the total penalty of turns made by Ivan until he distributes all balls to corresponding boxes. Help Ivan to determine the minimum possible penalty of the game!",
    "input": "The first line contains one integer number n ( 1 \u2264 n \u2264 200000) \u2014 the number of boxes and colors. The second line contains n integer numbers a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) , where ai is the number of balls with color i.",
    "output": "Print one number \u2014 the minimum possible penalty of the game.",
    "note": "In the first example you take all the balls from the first box, choose k = 3 and sort all colors to corresponding boxes. Penalty is 6. In the second example you make two turns: Take all the balls from the first box, choose k = 3, put balls of color 3 to the third box, of color 4 \u2014 to the fourth box and the rest put back into the first box. Penalty is 14; Take all the balls from the first box, choose k = 2, put balls of color 1 to the first box, of color 2 \u2014 to the second box. Penalty is 5. Total penalty is 19.",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "884D"
  },
  {
    "title": "Berland.Taxi",
    "url": "https://codeforces.com/problemset/problem/883/L",
    "history": "Berland. Taxi is a new taxi company with k cars which started operating in the capital of Berland just recently. The capital has n houses on a straight line numbered from 1 ( leftmost) to n ( rightmost) , and the distance between any two neighboring houses is the same. You have to help the company schedule all the taxi rides which come throughout the day according to the following rules: All cars are available for picking up passengers. Initially the j- th car is located next to the house with the number xj at time 0. All cars have the same speed. It takes exactly 1 minute for any car to travel between neighboring houses i and i + 1. The i- th request for taxi ride comes at the time ti, asking for a passenger to be picked up at the house ai and dropped off at the house bi. All requests for taxi rides are given in the increasing order of ti. All ti are distinct. When a request for taxi ride is received at time ti, Berland. Taxi operator assigns a car to it as follows: Out of cars which are currently available, operator assigns the car which is the closest to the pick up spot ai. Needless to say, if a car is already on a ride with a passenger, it won' t be available for any rides until that passenger is dropped off at the corresponding destination. If there are several such cars, operator will pick one of them which has been waiting the most since it became available. If there are several such cars, operator will pick one of them which has the lowest number. After a car gets assigned to the taxi ride request: The driver immediately starts driving from current position to the house ai. Once the car reaches house ai, the passenger is immediately picked up and the driver starts driving to house bi. Once house bi is reached, the passenger gets dropped off and the car becomes available for new rides staying next to the house bi. It is allowed for multiple cars to be located next to the same house at the same point in time, while waiting for ride requests or just passing by. If there are no available cars at time ti when a request for taxi ride comes, then: The i- th passenger will have to wait for a car to become available. When a car becomes available, operator will immediately assign it to this taxi ride request. If multiple cars become available at once while the passenger is waiting, operator will pick a car out of them according to the rules described above. Operator processes taxi ride requests one by one. So if multiple passengers are waiting for the cars to become available, operator will not move on to processing the ( i + 1) - th ride request until the car gets assigned to the i- th ride request. Your task is to write a program that will process the given list of m taxi ride requests. For each request you have to find out which car will get assigned to it, and how long the passenger will have to wait for a car to arrive. Note, if there is already car located at the house ai, then the corresponding wait time will be 0.",
    "input": "The first line of input contains integers n, k and m ( 2 \u2264 n \u2264 2\u00b7105, 1 \u2264 k, m \u2264 2\u00b7105) \u2014 number of houses, number of cars, and number of taxi ride requests. The second line contains integers x1, x2, . . . , xk ( 1 \u2264 xi \u2264 n) \u2014 initial positions of cars. xi is a house number at which the i- th car is located initially. It' s allowed for more than one car to be located next to the same house. The following m lines contain information about ride requests. Each ride request is represented by integers tj, aj and bj ( 1 \u2264 tj \u2264 1012, 1 \u2264 aj, bj \u2264 n, aj = \u0338 bj) , where tj is time in minutes when a request is made, aj is a house where passenger needs to be picked up, and bj is a house where passenger needs to be dropped off. All taxi ride requests are given in the increasing order of tj. All tj are distinct.",
    "output": "Print m lines: the j- th line should contain two integer numbers, the answer for the j- th ride request \u2014 car number assigned by the operator and passenger wait time.",
    "note": "In the first sample test, a request comes in at time 5 and the car needs to get from house 3 to house 2 to pick up the passenger. Therefore wait time will be 1 and the ride will be completed at time 5 + 1 + 6 = 12. The second request comes in at time 9, so the passenger will have to wait for the car to become available at time 12, and then the car needs another 2 minutes to get from house 8 to house 10. So the total wait time is 3 + 2 = 5. In the second sample test, cars 1 and 2 are located at the same distance from the first passenger and have the same \" wait time since it became available\" . Car 1 wins a tiebreaker according to the rules because it has the lowest number. It will come to house 3 at time 3, so the wait time will be 2.",
    "topics": [
      "data structures"
    ],
    "id": "883L"
  },
  {
    "title": "Table Tennis",
    "url": "https://codeforces.com/problemset/problem/879/B",
    "history": "n people are standing in a line to play table tennis. At first, the first two players in the line play a game. Then the loser goes to the end of the line, and the winner plays with the next person from the line, and so on. They play until someone wins k games in a row. This player becomes the winner. For each of the participants, you know the power to play table tennis, and for all players these values are different. In a game the player with greater power always wins. Determine who will be the winner.",
    "input": "The first line contains two integers: n and k ( 2 \u2264 n \u2264 500, 2 \u2264 k \u2264 1012) \u2014 the number of people and the number of wins. The second line contains n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 n) \u2014 powers of the player. It' s guaranteed that this line contains a valid permutation, i. e. all ai are distinct.",
    "output": "Output a single integer \u2014 power of the winner.",
    "note": "Games in the second sample: 3 plays with 1. 3 wins. 1 goes to the end of the line. 3 plays with 2. 3 wins. He wins twice in a row. He becomes the winner.",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "879B"
  },
  {
    "title": "Tournament",
    "url": "https://codeforces.com/problemset/problem/878/C",
    "history": "Recently a tournament in k kinds of sports has begun in Berland. Vasya wants to make money on the bets. The scheme of the tournament is very mysterious and not fully disclosed. Competitions are held back to back, each of them involves two sportsmen who have not left the tournament yet. Each match can be held in any of the k kinds of sport. Loser leaves the tournament. The last remaining sportsman becomes the winner. Apart of this, the scheme can be arbitrary, it is not disclosed in advance. Vasya knows powers of sportsmen in each kind of sport. He believes that the sportsmen with higher power always wins. The tournament is held every year, and each year one new participant joins it. In the first tournament, only one sportsman has participated, in the second there were two sportsmen, and so on. Vasya has been watching the tournament for the last n years. Help him to find the number of possible winners for each of the n tournaments.",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 5\u00b7104, 1 \u2264 k \u2264 10) \u2014 the number of tournaments and the number of kinds of sport, respectively. Each of the next n lines contains k integers si1, si2, . . . , sik ( 1 \u2264 sij \u2264 109) , where sij is the power of the i- th sportsman in the j- th kind of sport. The sportsman with higher powers always wins. It' s guaranteed that for any kind of sport all of these powers are distinct.",
    "output": "For each of the n tournaments output the number of contenders who can win.",
    "note": "In the first sample: In the first tournament there is only one sportsman, and he is the winner. In the second tournament, there are two sportsmen, and everyone can defeat another, depending on kind of sports. In the third tournament, the third sportsman in the strongest in both kinds of sports, so he is the winner regardless of the scheme.",
    "topics": [
      "data structures",
      "graphs"
    ],
    "id": "878C"
  },
  {
    "title": "Teams Formation",
    "url": "https://codeforces.com/problemset/problem/878/B",
    "history": "This time the Berland Team Olympiad in Informatics is held in a remote city that can only be reached by one small bus. Bus has n passenger seats, seat i can be occupied only by a participant from the city ai. Today the bus has completed m trips, each time bringing n participants. The participants were then aligned in one line in the order they arrived, with people from the same bus standing in the order of their seats ( i. e. if we write down the cities where the participants came from, we get the sequence a1, a2, . . . , an repeated m times) . After that some teams were formed, each consisting of k participants form the same city standing next to each other in the line. Once formed, teams left the line. The teams were formed until there were no k neighboring participants from the same city. Help the organizers determine how many participants have left in the line after that process ended. We can prove that answer doesn' t depend on the order in which teams were selected.",
    "input": "The first line contains three integers n, k and m ( 1 \u2264 n \u2264 105, 2 \u2264 k \u2264 109, 1 \u2264 m \u2264 109) . The second line contains n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 105) , where ai is the number of city, person from which must take seat i in the bus.",
    "output": "Output the number of remaining participants in the line.",
    "note": "In the second example, the line consists of ten participants from the same city. Nine of them will form a team. At the end, only one participant will stay in the line.",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "878B"
  },
  {
    "title": "Ann and Books",
    "url": "https://codeforces.com/problemset/problem/877/F",
    "history": "In Ann' s favorite book shop are as many as n books on math and economics. Books are numbered from 1 to n. Each of them contains non- negative number of problems. Today there is a sale: any subsegment of a segment from l to r can be bought at a fixed price. Ann decided that she wants to buy such non- empty subsegment that the sale operates on it and the number of math problems is greater than the number of economics problems exactly by k. Note that k may be positive, negative or zero. Unfortunately, Ann is not sure on which segment the sale operates, but she has q assumptions. For each of them she wants to know the number of options to buy a subsegment satisfying the condition ( because the time she spends on choosing depends on that) . Currently Ann is too busy solving other problems, she asks you for help. For each her assumption determine the number of subsegments of the given segment such that the number of math problems is greaten than the number of economics problems on that subsegment exactly by k.",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 100 000, - 109 \u2264 k \u2264 109) \u2014 the number of books and the needed difference between the number of math problems and the number of economics problems. The second line contains n integers t1, t2, . . . , tn ( 1 \u2264 ti \u2264 2) , where ti is 1 if the i- th book is on math or 2 if the i- th is on economics. The third line contains n integers a1, a2, . . . , an ( 0 \u2264 ai \u2264 109) , where ai is the number of problems in the i- th book. The fourth line contains a single integer q ( 1 \u2264 q \u2264 100 000) \u2014 the number of assumptions. Each of the next q lines contains two integers li and ri ( 1 \u2264 li \u2264 ri \u2264 n) describing the i- th Ann' s assumption.",
    "output": "Print q lines, in the i- th of them print the number of subsegments for the i- th Ann' s assumption.",
    "note": "In the first sample Ann can buy subsegments [ 1; 1] , [ 2; 2] , [ 3; 3] , [ 2; 4] if they fall into the sales segment, because the number of math problems is greater by 1 on them that the number of economics problems. So we should count for each assumption the number of these subsegments that are subsegments of the given segment. Segments [ 1; 1] and [ 2; 2] are subsegments of [ 1; 2] . Segments [ 1; 1] , [ 2; 2] and [ 3; 3] are subsegments of [ 1; 3] . Segments [ 1; 1] , [ 2; 2] , [ 3; 3] , [ 2; 4] are subsegments of [ 1; 4] . Segment [ 3; 3] is subsegment of [ 3; 4] .",
    "topics": [
      "data structures",
      "flows",
      "hashing"
    ],
    "id": "877F"
  },
  {
    "title": "Danil and a Part-time Job",
    "url": "https://codeforces.com/problemset/problem/877/E",
    "history": "Danil decided to earn some money, so he had found a part- time job. The interview have went well, so now he is a light switcher. Danil works in a rooted tree ( undirected connected acyclic graph) with n vertices, vertex 1 is the root of the tree. There is a room in each vertex, light can be switched on or off in each room. Danil' s duties include switching light in all rooms of the subtree of the vertex. It means that if light is switched on in some room of the subtree, he should switch it off. Otherwise, he should switch it on. Unfortunately ( or fortunately) , Danil is very lazy. He knows that his boss is not going to personally check the work. Instead, he will send Danil tasks using Workforces personal messages. There are two types of tasks: pow v describes a task to switch lights in the subtree of vertex v. get v describes a task to count the number of rooms in the subtree of v, in which the light is turned on. Danil should send the answer to his boss using Workforces messages. A subtree of vertex v is a set of vertices for which the shortest path from them to the root passes through v. In particular, the vertex v is in the subtree of v. Danil is not going to perform his duties. He asks you to write a program, which answers the boss instead of him.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 200 000) \u2014 the number of vertices in the tree. The second line contains n - 1 space- separated integers p2, p3, . . . , pn ( 1 \u2264 pi < i) , where pi is the ancestor of vertex i. The third line contains n space- separated integers t1, t2, . . . , tn ( 0 \u2264 ti \u2264 1) , where ti is 1, if the light is turned on in vertex i and 0 otherwise. The fourth line contains a single integer q ( 1 \u2264 q \u2264 200 000) \u2014 the number of tasks. The next q lines are get v or pow v ( 1 \u2264 v \u2264 n) \u2014 the tasks described above.",
    "output": "For each task get v print the number of rooms in the subtree of v, in which the light is turned on.",
    "note": "The tree before the task pow 1. The tree after the task pow 1.",
    "topics": [
      "bitmasks",
      "data structures",
      "trees"
    ],
    "id": "877E"
  },
  {
    "title": "Olya and Energy Drinks",
    "url": "https://codeforces.com/problemset/problem/877/D",
    "history": "Olya loves energy drinks. She loves them so much that her room is full of empty cans from energy drinks. Formally, her room can be represented as a field of n \u00d7 m cells, each cell of which is empty or littered with cans. Olya drank a lot of energy drink, so now she can run k meters per second. Each second she chooses one of the four directions ( up, down, left or right) and runs from 1 to k meters in this direction. Of course, she can only run through empty cells. Now Olya needs to get from cell ( x1, y1) to cell ( x2, y2) . How many seconds will it take her if she moves optimally? It' s guaranteed that cells ( x1, y1) and ( x2, y2) are empty. These cells can coincide.",
    "input": "The first line contains three integers n, m and k ( 1 \u2264 n, m, k \u2264 1000) \u2014 the sizes of the room and Olya' s speed. Then n lines follow containing m characters each, the i- th of them contains on j- th position \" # \" , if the cell ( i, j) is littered with cans, and \" . \" otherwise. The last line contains four integers x1, y1, x2, y2 ( 1 \u2264 x1, x2 \u2264 n, 1 \u2264 y1, y2 \u2264 m) \u2014 the coordinates of the first and the last cells.",
    "output": "Print a single integer \u2014 the minimum time it will take Olya to get from ( x1, y1) to ( x2, y2) . If it' s impossible to get from ( x1, y1) to ( x2, y2) , print - 1.",
    "note": "In the first sample Olya should run 3 meters to the right in the first second, 2 meters down in the second second and 3 meters to the left in the third second. In second sample Olya should run to the right for 3 seconds, then down for 2 seconds and then to the left for 3 seconds. Olya does not recommend drinking energy drinks and generally believes that this is bad.",
    "topics": [
      "data structures",
      "dfs and similar",
      "graphs",
      "shortest paths"
    ],
    "id": "877D"
  },
  {
    "title": "Delivery Club",
    "url": "https://codeforces.com/problemset/problem/875/E",
    "history": "Petya and Vasya got employed as couriers. During the working day they are to deliver packages to n different points on the line. According to the company' s internal rules, the delivery of packages must be carried out strictly in a certain order. Initially, Petya is at the point with the coordinate s1, Vasya is at the point with the coordinate s2, and the clients are at the points x1, x2, . . . , xn in the order of the required visit. The guys agree in advance who of them will deliver the package to which of the customers, and then they act as follows. When the package for the i- th client is delivered, the one who delivers the package to the ( i + 1) - st client is sent to the path ( it can be the same person who went to the point xi, or the other) . The friend who is not busy in delivering the current package, is standing still. To communicate with each other, the guys have got walkie- talkies. The walkie- talkies work rather poorly at great distances, so Petya and Vasya want to distribute the orders so that the maximum distance between them during the day is as low as possible. Help Petya and Vasya to minimize the maximum distance between them, observing all delivery rules.",
    "input": "The first line contains three integers n, s1, s2 ( 1 \u2264 n \u2264 100 000, 0 \u2264 s1, s2 \u2264 109) \u2014 number of points of delivery and starting positions of Petya and Vasya. The second line contains n integers x1, x2, . . . , xn \u2014 customers coordinates ( 0 \u2264 xi \u2264 109) , in the order to make a delivery. It is guaranteed, that among the numbers s1, s2, x1, . . . , xn there are no two equal.",
    "output": "Output the only integer, minimum possible maximal distance between couriers during delivery.",
    "note": "In the first test case the initial distance between the couriers is 10. This value will be the answer, for example, Petya can perform both deliveries, and Vasya will remain at the starting point. In the second test case you can optimally act, for example, like this: Vasya delivers the package to the first customer, Petya to the second and, finally, Vasya delivers the package to the third client. With this order of delivery, the distance between the couriers will never exceed 1. In the third test case only two variants are possible: if the delivery of a single package is carried out by Petya, the maximum distance between them will be 5 - 2 = 3. If Vasya will deliver the package, the maximum distance is 4 - 2 = 2. The latter method is optimal.",
    "topics": [
      "binary search",
      "data structures",
      "dp"
    ],
    "id": "875E"
  },
  {
    "title": "High Cry",
    "url": "https://codeforces.com/problemset/problem/875/D",
    "history": "Disclaimer: there are lots of untranslateable puns in the Russian version of the statement, so there is one more reason for you to learn Russian : ) Rick and Morty like to go to the ridge High Cry for crying loudly \u2014 there is an extraordinary echo. Recently they discovered an interesting acoustic characteristic of this ridge: if Rick and Morty begin crying simultaneously from different mountains, their cry would be heard between these mountains up to the height equal the bitwise OR of mountains they' ve climbed and all the mountains between them. Bitwise OR is a binary operation which is determined the following way. Consider representation of numbers x and y in binary numeric system ( probably with leading zeroes) x = xk. . . x1x0 and y = yk. . . y1y0. Then z = x | y is defined following way: z = zk. . . z1z0, where zi = 1, if xi = 1 or yi = 1, and zi = 0 otherwise. In the other words, digit of bitwise OR of two numbers equals zero if and only if digits at corresponding positions is both numbers equals zero. For example bitwise OR of numbers 10 = 10102 and 9 = 10012 equals 11 = 10112. In programming languages C/ C+ + / Java/ Python this operation is defined as \u00ab| \u00bb, and in Pascal as \u00abor\u00bb. Help Rick and Morty calculate the number of ways they can select two mountains in such a way that if they start crying from these mountains their cry will be heard above these mountains and all mountains between them. More formally you should find number of pairs l and r ( 1 \u2264 l < r \u2264 n) such that bitwise OR of heights of all mountains between l and r ( inclusive) is larger than the height of any mountain at this interval.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 200 000) , the number of mountains in the ridge. Second line contains n integers ai ( 0 \u2264 ai \u2264 109) , the heights of mountains in order they are located in the ridge.",
    "output": "Print the only integer, the number of ways to choose two different mountains.",
    "note": "In the first test case all the ways are pairs of mountains with the numbers ( numbering from one) : ( 1, 4) , ( 1, 5) , ( 2, 3) , ( 2, 4) , ( 2, 5) , ( 3, 4) , ( 3, 5) , ( 4, 5) In the second test case there are no such pairs because for any pair of mountains the height of cry from them is 3, and this height is equal to the height of any mountain.",
    "topics": [
      "binary search",
      "bitmasks",
      "combinatorics",
      "data structures",
      "divide and conquer"
    ],
    "id": "875D"
  },
  {
    "title": "Awards For Contestants",
    "url": "https://codeforces.com/problemset/problem/873/E",
    "history": "Alexey recently held a programming contest for students from Berland. n students participated in a contest, i- th of them solved ai problems. Now he wants to award some contestants. Alexey can award the students with diplomas of three different degrees. Each student either will receive one diploma of some degree, or won' t receive any diplomas at all. Let cntx be the number of students that are awarded with diplomas of degree x ( 1 \u2264 x \u2264 3) . The following conditions must hold: For each x ( 1 \u2264 x \u2264 3) cntx > 0; For any two degrees x and y cntx \u2264 2\u00b7cnty. Of course, there are a lot of ways to distribute the diplomas. Let bi be the degree of diploma i- th student will receive ( or - 1 if i- th student won' t receive any diplomas) . Also for any x such that 1 \u2264 x \u2264 3 let cx be the maximum number of problems solved by a student that receives a diploma of degree x, and dx be the minimum number of problems solved by a student that receives a diploma of degree x. Alexey wants to distribute the diplomas in such a way that: If student i solved more problems than student j, then he has to be awarded not worse than student j ( it' s impossible that student j receives a diploma and i doesn' t receive any, and also it' s impossible that both of them receive a diploma, but bj < bi) ; d1 - c2 is maximum possible; Among all ways that maximize the previous expression, d2 - c3 is maximum possible; Among all ways that correspond to the two previous conditions, d3 - c - 1 is maximum possible, where c - 1 is the maximum number of problems solved by a student that doesn' t receive any diploma ( or 0 if each student is awarded with some diploma) . Help Alexey to find a way to award the contestants!",
    "input": "The first line contains one integer number n ( 3 \u2264 n \u2264 3000) . The second line contains n integer numbers a1, a2, . . . , an ( 1 \u2264 ai \u2264 5000) .",
    "output": "Output n numbers. i- th number must be equal to the degree of diploma i- th contestant will receive ( or - 1 if he doesn' t receive any diploma) . If there are multiple optimal solutions, print any of them. It is guaranteed that the answer always exists.",
    "note": "",
    "topics": [
      "brute force",
      "data structures",
      "dp"
    ],
    "id": "873E"
  },
  {
    "title": "Paths",
    "url": "https://codeforces.com/problemset/problem/870/F",
    "history": "You are given a positive integer n. Let' s build a graph on vertices 1, 2, . . . , n in such a way that there is an edge between vertices u and v if and only if . Let d( u, v) be the shortest distance between u and v, or 0 if there is no path between them. Compute the sum of values d( u, v) over all 1 \u2264 u < v \u2264 n. The gcd ( greatest common divisor) of two positive integers is the maximum positive integer that divides both of the integers.",
    "input": "Single integer n ( 1 \u2264 n \u2264 107) .",
    "output": "Print the sum of d( u, v) over all 1 \u2264 u < v \u2264 n.",
    "note": "All shortest paths in the first example: There are no paths between other pairs of vertices. The total distance is 2 + 1 + 1 + 2 + 1 + 1 = 8.",
    "topics": [
      "data structures",
      "number theory"
    ],
    "id": "870F"
  },
  {
    "title": "The Untended Antiquity",
    "url": "https://codeforces.com/problemset/problem/869/E",
    "history": "Adieu l' ami. Koyomi is helping Oshino, an acquaintance of his, to take care of an open space around the abandoned Eikou Cram School building, Oshino' s makeshift residence. The space is represented by a rectangular grid of n \u00d7 m cells, arranged into n rows and m columns. The c- th cell in the r- th row is denoted by ( r, c) . Oshino places and removes barriers around rectangular areas of cells. Specifically, an action denoted by \" 1 r1 c1 r2 c2\" means Oshino' s placing barriers around a rectangle with two corners being ( r1, c1) and ( r2, c2) and sides parallel to squares sides. Similarly, \" 2 r1 c1 r2 c2\" means Oshino' s removing barriers around the rectangle. Oshino ensures that no barriers staying on the ground share any common points, nor do they intersect with boundaries of the n \u00d7 m area. Sometimes Koyomi tries to walk from one cell to another carefully without striding over barriers, in order to avoid damaging various items on the ground. \" 3 r1 c1 r2 c2\" means that Koyomi tries to walk from ( r1, c1) to ( r2, c2) without crossing barriers. And you' re here to tell Koyomi the feasibility of each of his attempts.",
    "input": "The first line of input contains three space- separated integers n, m and q ( 1 \u2264 n, m \u2264 2 500, 1 \u2264 q \u2264 100 000) \u2014 the number of rows and columns in the grid, and the total number of Oshino and Koyomi' s actions, respectively. The following q lines each describes an action, containing five space- separated integers t, r1, c1, r2, c2 ( 1 \u2264 t \u2264 3, 1 \u2264 r1, r2 \u2264 n, 1 \u2264 c1, c2 \u2264 m) \u2014 the type and two coordinates of an action. Additionally, the following holds depending on the value of t: If t = 1: 2 \u2264 r1 \u2264 r2 \u2264 n - 1, 2 \u2264 c1 \u2264 c2 \u2264 m - 1; If t = 2: 2 \u2264 r1 \u2264 r2 \u2264 n - 1, 2 \u2264 c1 \u2264 c2 \u2264 m - 1, the specified group of barriers exist on the ground before the removal. If t = 3: no extra restrictions.",
    "output": "For each of Koyomi' s attempts ( actions with t = 3) , output one line \u2014 containing \" Yes\" ( without quotes) if it' s feasible, and \" No\" ( without quotes) otherwise.",
    "note": "For the first example, the situations of Koyomi' s actions are illustrated below.",
    "topics": [
      "data structures",
      "hashing"
    ],
    "id": "869E"
  },
  {
    "title": "Buy Low Sell High",
    "url": "https://codeforces.com/problemset/problem/865/D",
    "history": "You can perfectly predict the price of a certain stock for the next N days. You would like to profit on this knowledge, but only want to transact one share of stock per day. That is, each day you will either buy one share, sell one share, or do nothing. Initially you own zero shares, and you cannot sell shares when you don' t own any. At the end of the N days you would like to again own zero shares, but want to have as much money as possible.",
    "input": "Input begins with an integer N ( 2 \u2264 N \u2264 3\u00b7105) , the number of days. Following this is a line with exactly N integers p1, p2, . . . , pN ( 1 \u2264 pi \u2264 106) . The price of one share of stock on the i- th day is given by pi.",
    "output": "Print the maximum amount of money you can end up with at the end of N days.",
    "note": "In the first example, buy a share at 5, buy another at 4, sell one at 9 and another at 12. Then buy at 2 and sell at 10. The total profit is - 5 - 4 + 9 + 12 - 2 + 10 = 20.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy"
    ],
    "id": "865D"
  },
  {
    "title": "Turn Off The TV",
    "url": "https://codeforces.com/problemset/problem/863/E",
    "history": "Luba needs your help again! Luba has n TV sets. She knows that i- th TV set will be working from moment of time li till moment ri, inclusive. Luba wants to switch off one of TV sets in order to free the socket. Let' s call some TV set redundant if after switching it off the number of integer moments of time when at least one of TV sets is working won' t decrease. Luba will be very upset if she has to switch off a non- redundant TV set. Help Luba by telling her the index of some redundant TV set. If there is no any, print - 1.",
    "input": "The first line contains one integer number n ( 1 \u2264 n \u2264 2\u00b7105) \u2014 the number of TV sets. Then n lines follow, each of them containing two integer numbers li, ri ( 0 \u2264 li \u2264 ri \u2264 109) denoting the working time of i- th TV set.",
    "output": "If there is no any redundant TV set, print - 1. Otherwise print the index of any redundant TV set ( TV sets are indexed from 1 to n) . If there are multiple answers, print any of them.",
    "note": "Consider the first sample. Initially all integer moments of time such that at least one TV set is working are from the segment [ 1; 7] . It' s easy to see that this segment won' t change if we switch off the first TV set ( or the second one) . Note that in the fourth sample you can switch off the second TV set, since even without it all integer moments such that any of the TV sets is working denote the segment [ 1; 4] .",
    "topics": [
      "data structures",
      "sortings"
    ],
    "id": "863E"
  },
  {
    "title": "Yet Another Array Queries Problem",
    "url": "https://codeforces.com/problemset/problem/863/D",
    "history": "You are given an array a of size n, and q queries to it. There are queries of two types: 1 li ri \u2014 perform a cyclic shift of the segment [ li, ri] to the right. That is, for every x such that li \u2264 x < ri new value of ax + 1 becomes equal to old value of ax, and new value of ali becomes equal to old value of ari; 2 li ri \u2014 reverse the segment [ li, ri] . There are m important indices in the array b1, b2, . . . , bm. For each i such that 1 \u2264 i \u2264 m you have to output the number that will have index bi in the array after all queries are performed.",
    "input": "The first line contains three integer numbers n, q and m ( 1 \u2264 n, q \u2264 2\u00b7105, 1 \u2264 m \u2264 100) . The second line contains n integer numbers a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) . Then q lines follow. i- th of them contains three integer numbers ti, li, ri, where ti is the type of i- th query, and [ li, ri] is the segment where this query is performed ( 1 \u2264 ti \u2264 2, 1 \u2264 li \u2264 ri \u2264 n) . The last line contains m integer numbers b1, b2, . . . , bm ( 1 \u2264 bi \u2264 n) \u2014 important indices of the array.",
    "output": "Print m numbers, i- th of which is equal to the number at index bi after all queries are done.",
    "note": "",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "863D"
  },
  {
    "title": "Mahmoud and Ehab and the final stage",
    "url": "https://codeforces.com/problemset/problem/862/F",
    "history": "Mahmoud and Ehab solved Dr. Evil' s questions so he gave them the password of the door of the evil land. When they tried to open the door using it, the door gave them a final question to solve before they leave ( yes, the door is digital, Dr. Evil is modern) . If they don' t solve it, all the work will be useless and they won' t leave the evil land forever. Will you help them? Mahmoud and Ehab are given n strings s1, s2, . . . , sn numbered from 1 to n and q queries, Each query has one of the following forms: 1 a b ( 1 \u2264 a \u2264 b \u2264 n) , For all the intervals [ l; r] where ( a \u2264 l \u2264 r \u2264 b) find the maximum value of this expression: ( r - l + 1) * LCP( sl, sl + 1, . . . , sr - 1, sr) where LCP( str1, str2, str3, . . . ) is the length of the longest common prefix of the strings str1, str2, str3, . . . . 2 x y ( 1 \u2264 x \u2264 n) where y is a string, consisting of lowercase English letters. Change the string at position x to y.",
    "input": "The first line of input contains 2 integers n and q ( 1 \u2264 n \u2264 105, 1 \u2264 q \u2264 105) \u2013 The number of strings and the number of queries, respectively. The second line contains n strings stri consisting of lowercase English letters. The next q lines describe the queries and may have one of the 2 forms: 1 a b ( 1 \u2264 a \u2264 b \u2264 n) . 2 x y ( 1 \u2264 x \u2264 n) , where y is a string consisting of lowercase English letters. the total length of all strings in input won' t exceed 105",
    "output": "For each query of first type output its answer in a new line.",
    "note": "",
    "topics": [
      "data structures",
      "strings"
    ],
    "id": "862F"
  },
  {
    "title": "Mahmoud and Ehab and the function",
    "url": "https://codeforces.com/problemset/problem/862/E",
    "history": "Dr. Evil is interested in math and functions, so he gave Mahmoud and Ehab array a of length n and array b of length m. He introduced a function f( j) which is defined for integers j, which satisfy 0 \u2264 j \u2264 m - n. Suppose, ci = ai - bi + j. Then f( j) = | c1 - c2 + c3 - c4. . . cn| . More formally, . Dr. Evil wants Mahmoud and Ehab to calculate the minimum value of this function over all valid j. They found it a bit easy, so Dr. Evil made their task harder. He will give them q update queries. During each update they should add an integer xi to all elements in a in range [ li; ri] i. e. they should add xi to ali, ali + 1, . . . , ari and then they should calculate the minimum value of f( j) for all valid j. Please help Mahmoud and Ehab.",
    "input": "The first line contains three integers n, m and q ( 1 \u2264 n \u2264 m \u2264 105, 1 \u2264 q \u2264 105) \u2014 number of elements in a, number of elements in b and number of queries, respectively. The second line contains n integers a1, a2, . . . , an. ( - 109 \u2264 ai \u2264 109) \u2014 elements of a. The third line contains m integers b1, b2, . . . , bm. ( - 109 \u2264 bi \u2264 109) \u2014 elements of b. Then q lines follow describing the queries. Each of them contains three integers li ri xi ( 1 \u2264 li \u2264 ri \u2264 n, - 109 \u2264 x \u2264 109) \u2014 range to be updated and added value.",
    "output": "The first line should contain the minimum value of the function f before any update. Then output q lines, the i- th of them should contain the minimum value of the function f after performing the i- th update .",
    "note": "For the first example before any updates it' s optimal to choose j = 0, f( 0) = | ( 1 - 1) - ( 2 - 2) + ( 3 - 3) - ( 4 - 4) + ( 5 - 5) | = | 0| = 0. After the first update a becomes 11, 2, 3, 4, 5 and it' s optimal to choose j = 1, f( 1) = | ( 11 - 2) - ( 2 - 3) + ( 3 - 4) - ( 4 - 5) + ( 5 - 6) = | 9| = 9. After the second update a becomes 2, 2, 3, 4, 5 and it' s optimal to choose j = 1, f( 1) = | ( 2 - 2) - ( 2 - 3) + ( 3 - 4) - ( 4 - 5) + ( 5 - 6) | = | 0| = 0. After the third update a becomes 1, 1, 2, 3, 4 and it' s optimal to choose j = 0, f( 0) = | ( 1 - 1) - ( 1 - 2) + ( 2 - 3) - ( 3 - 4) + ( 4 - 5) | = | 0| = 0.",
    "topics": [
      "binary search",
      "data structures",
      "sortings"
    ],
    "id": "862E"
  },
  {
    "title": "Arkady and a Nobody-men",
    "url": "https://codeforces.com/problemset/problem/860/E",
    "history": "Arkady words in a large company. There are n employees working in a system of a strict hierarchy. Namely, each employee, with an exception of the CEO, has exactly one immediate manager. The CEO is a manager ( through a chain of immediate managers) of all employees. Each employee has an integer rank. The CEO has rank equal to 1, each other employee has rank equal to the rank of his immediate manager plus 1. Arkady has a good post in the company, however, he feels that he is nobody in the company' s structure, and there are a lot of people who can replace him. He introduced the value of replaceability. Consider an employee a and an employee b, the latter being manager of a ( not necessarily immediate) . Then the replaceability r( a, b) of a with respect to b is the number of subordinates ( not necessarily immediate) of the manager b, whose rank is not greater than the rank of a. Apart from replaceability, Arkady introduced the value of negligibility. The negligibility za of employee a equals the sum of his replaceabilities with respect to all his managers, i. e. , where the sum is taken over all his managers b. Arkady is interested not only in negligibility of himself, but also in negligibility of all employees in the company. Find the negligibility of each employee for Arkady.",
    "input": "The first line contains single integer n ( 1 \u2264 n \u2264 5\u00b7105) \u2014 the number of employees in the company. The second line contains n integers p1, p2, . . . , pn ( 0 \u2264 pi \u2264 n) , where pi = 0 if the i- th employee is the CEO, otherwise pi equals the id of the immediate manager of the employee with id i. The employees are numbered from 1 to n. It is guaranteed that there is exactly one 0 among these values, and also that the CEO is a manager ( not necessarily immediate) for all the other employees.",
    "output": "Print n integers \u2014 the negligibilities of all employees in the order of their ids: z1, z2, . . . , zn.",
    "note": "Consider the first example: The CEO has no managers, thus z1 = 0. r( 2, 1) = 2 ( employees 2 and 4 suit the conditions, employee 3 has too large rank) . Thus z2 = r( 2, 1) = 2. Similarly, z4 = r( 4, 1) = 2. r( 3, 2) = 1 ( employee 3 is a subordinate of 2 and has suitable rank) . r( 3, 1) = 3 ( employees 2, 3, 4 suit the conditions) . Thus z3 = r( 3, 2) + r( 3, 1) = 4.",
    "topics": [
      "data structures",
      "dfs and similar",
      "trees"
    ],
    "id": "860E"
  },
  {
    "title": "Polycarp's phone book",
    "url": "https://codeforces.com/problemset/problem/858/D",
    "history": "There are n phone numbers in Polycarp' s contacts on his phone. Each number is a 9- digit integer, starting with a digit different from 0. All the numbers are distinct. There is the latest version of Berdroid OS installed on Polycarp' s phone. If some number is entered, is shows up all the numbers in the contacts for which there is a substring equal to the entered sequence of digits. For example, is there are three phone numbers in Polycarp' s contacts: 123456789, 100000000 and 100123456, then: if he enters 00 two numbers will show up: 100000000 and 100123456, if he enters 123 two numbers will show up 123456789 and 100123456, if he enters 01 there will be only one number 100123456. For each of the phone numbers in Polycarp' s contacts, find the minimum in length sequence of digits such that if Polycarp enters this sequence, Berdroid shows this only phone number.",
    "input": "The first line contains single integer n ( 1 \u2264 n \u2264 70000) \u2014 the total number of phone contacts in Polycarp' s contacts. The phone numbers follow, one in each line. Each number is a positive 9- digit integer starting with a digit from 1 to 9. All the numbers are distinct.",
    "output": "Print exactly n lines: the i- th of them should contain the shortest non- empty sequence of digits, such that if Polycarp enters it, the Berdroid OS shows up only the i- th number from the contacts. If there are several such sequences, print any of them.",
    "note": "",
    "topics": [
      "data structures",
      "implementation",
      "sortings"
    ],
    "id": "858D"
  },
  {
    "title": "Nagini",
    "url": "https://codeforces.com/problemset/problem/855/F",
    "history": "Nagini, being a horcrux You- know- who created with the murder of Bertha Jorkins, has accumulated its army of snakes and is launching an attack on Hogwarts school. Hogwarts' entrance can be imagined as a straight line ( x- axis) from 1 to 105. Nagini is launching various snakes at the Hogwarts entrance. Each snake lands parallel to the entrance, covering a segment at a distance k from x = l to x = r. Formally, each snake can be imagined as being a line segment between points ( l, k) and ( r, k) . Note that k can be both positive and negative, but not 0. Let, at some x- coordinate x = i, there be snakes at point ( i, y1) and point ( i, y2) , such that y1 > 0 and y2 < 0. Then, if for any point ( i, y3) containing a snake such that y3 > 0, y1 \u2264 y3 holds and for any point ( i, y4) containing a snake such that y4 < 0, | y2| \u2264 | y4| holds, then the danger value at coordinate x = i is y1 + | y2| . If no such y1 and y2 exist, danger value is 0. Harry wants to calculate the danger value of various segments of the Hogwarts entrance. Danger value for a segment [ l, r) of the entrance can be calculated by taking the sum of danger values for each integer x- coordinate present in the segment. Formally, you have to implement two types of queries: 1 l r k: a snake is added parallel to entrance from x = l to x = r at y- coordinate y = k ( l inclusive, r exclusive) . 2 l r: you have to calculate the danger value of segment l to r ( l inclusive, r exclusive) .",
    "input": "First line of input contains a single integer q ( 1 \u2264 q \u2264 5\u00b7104) denoting the number of queries. Next q lines each describe a query. Each query description first contains the query type typei ( 1 \u2264 typei \u2264 2) . This is followed by further description of the query. In case of the type being 1, it is followed by integers li, ri and ki ( , - 109 \u2264 ki \u2264 109, k = \u0338 0) . Otherwise, it just contains two integers, li and ri ( 1 \u2264 li < ri \u2264 105) .",
    "output": "Output the answer for each query of type 2 in a separate line.",
    "note": "In the first sample case, the danger value for x- coordinates 1 is 0 as there is no y2 satisfying the above condition for x = 1. Danger values for x- coordinates 2 and 3 is 10 + | - 7| = 17. Danger values for x- coordinates 4 to 9 is again 0 as there is no y2 satisfying the above condition for these coordinates. Thus, total danger value is 17 + 17 = 34.",
    "topics": [
      "binary search",
      "data structures"
    ],
    "id": "855F"
  },
  {
    "title": "Marvolo Gaunt's Ring",
    "url": "https://codeforces.com/problemset/problem/855/B",
    "history": "Professor Dumbledore is helping Harry destroy the Horcruxes. He went to Gaunt Shack as he suspected a Horcrux to be present there. He saw Marvolo Gaunt' s Ring and identified it as a Horcrux. Although he destroyed it, he is still affected by its curse. Professor Snape is helping Dumbledore remove the curse. For this, he wants to give Dumbledore exactly x drops of the potion he made. Value of x is calculated as maximum of p\u00b7ai + q\u00b7aj + r\u00b7ak for given p, q, r and array a1, a2, . . . an such that 1 \u2264 i \u2264 j \u2264 k \u2264 n. Help Snape find the value of x. Do note that the value of x may be negative.",
    "input": "First line of input contains 4 integers n, p, q, r ( - 109 \u2264 p, q, r \u2264 109, 1 \u2264 n \u2264 105) . Next line of input contains n space separated integers a1, a2, . . . an ( - 109 \u2264 ai \u2264 109) .",
    "output": "Output a single integer the maximum value of p\u00b7ai + q\u00b7aj + r\u00b7ak that can be obtained provided 1 \u2264 i \u2264 j \u2264 k \u2264 n.",
    "note": "In the first sample case, we can take i = j = k = 5, thus making the answer as 1\u00b75 + 2\u00b75 + 3\u00b75 = 30. In second sample case, selecting i = j = 1 and k = 5 gives the answer 12.",
    "topics": [
      "brute force",
      "data structures",
      "dp"
    ],
    "id": "855B"
  },
  {
    "title": "Lada Malina",
    "url": "https://codeforces.com/problemset/problem/853/E",
    "history": "After long- term research and lots of experiments leading Megapolian automobile manufacturer \u00abAutoVoz\u00bb released a brand new car model named \u00abLada Malina\u00bb. One of the most impressive features of \u00abLada Malina\u00bb is its highly efficient environment- friendly engines. Consider car as a point in Oxy plane. Car is equipped with k engines numbered from 1 to k. Each engine is defined by its velocity vector whose coordinates are ( vxi, vyi) measured in distance units per day. An engine may be turned on at any level wi, that is a real number between - 1 and + 1 ( inclusive) that result in a term of ( wi\u00b7vxi, wi\u00b7vyi) in the final car velocity. Namely, the final car velocity is equal to ( w1\u00b7vx1 + w2\u00b7vx2 + . . . + wk\u00b7vxk, w1\u00b7vy1 + w2\u00b7vy2 + . . . + wk\u00b7vyk) Formally, if car moves with constant values of wi during the whole day then its x- coordinate will change by the first component of an expression above, and its y- coordinate will change by the second component of an expression above. For example, if all wi are equal to zero, the car won' t move, and if all wi are equal to zero except w1 = 1, then car will move with the velocity of the first engine. There are n factories in Megapolia, i- th of them is located in ( fxi, fyi) . On the i- th factory there are ai cars \u00abLada Malina\u00bb that are ready for operation. As an attempt to increase sales of a new car, \u00abAutoVoz\u00bb is going to hold an international exposition of cars. There are q options of exposition location and time, in the i- th of them exposition will happen in a point with coordinates ( pxi, pyi) in ti days. Of course, at the \u00abAutoVoz\u00bb is going to bring as much new cars from factories as possible to the place of exposition. Cars are going to be moved by enabling their engines on some certain levels, such that at the beginning of an exposition car gets exactly to the exposition location. However, for some of the options it may be impossible to bring cars from some of the factories to the exposition location by the moment of an exposition. Your task is to determine for each of the options of exposition location and time how many cars will be able to get there by the beginning of an exposition.",
    "input": "The first line of input contains three integers k, n, q ( 2 \u2264 k \u2264 10, 1 \u2264 n \u2264 105, 1 \u2264 q \u2264 105) , the number of engines of \u00abLada Malina\u00bb, number of factories producing \u00abLada Malina\u00bb and number of options of an exposition time and location respectively. The following k lines contain the descriptions of \u00abLada Malina\u00bb engines. The i- th of them contains two integers vxi, vyi ( - 1000 \u2264 vxi, vyi \u2264 1000) defining the velocity vector of the i- th engine. Velocity vector can' t be zero, i. e. at least one of vxi and vyi is not equal to zero. It is guaranteed that no two velosity vectors are collinear ( parallel) . Next n lines contain the descriptions of factories. The i- th of them contains two integers fxi, fyi, ai ( - 109 \u2264 fxi, fyi \u2264 109, 1 \u2264 ai \u2264 109) defining the coordinates of the i- th factory location and the number of cars that are located there. The following q lines contain the descriptions of the car exposition. The i- th of them contains three integers pxi, pyi, ti ( - 109 \u2264 pxi, pyi \u2264 109, 1 \u2264 ti \u2264 105) defining the coordinates of the exposition location and the number of days till the exposition start in the i- th option.",
    "output": "For each possible option of the exposition output the number of cars that will be able to get to the exposition location by the moment of its beginning.",
    "note": "Images describing sample tests are given below. Exposition options are denoted with crosses, factories are denoted with points. Each factory is labeled with a number of cars that it has. First sample test explanation: Car from the first factory is not able to get to the exposition location in time. Car from the second factory can get to the exposition in time if we set w1 = 0, w2 = 1. Car from the third factory can get to the exposition in time if we set , . Car from the fourth factory can get to the exposition in time if we set w1 = 1, w2 = 0.",
    "topics": [
      "data structures",
      "geometry"
    ],
    "id": "853E"
  },
  {
    "title": "Boredom",
    "url": "https://codeforces.com/problemset/problem/853/C",
    "history": "Ilya is sitting in a waiting area of Metropolis airport and is bored of looking at time table that shows again and again that his plane is delayed. So he took out a sheet of paper and decided to solve some problems. First Ilya has drawn a grid of size n \u00d7 n and marked n squares on it, such that no two marked squares share the same row or the same column. He calls a rectangle on a grid with sides parallel to grid sides beautiful if exactly two of its corner squares are marked. There are exactly n\u00b7( n - 1) / 2 beautiful rectangles. Ilya has chosen q query rectangles on a grid with sides parallel to grid sides ( not necessarily beautiful ones) , and for each of those rectangles he wants to find its beauty degree. Beauty degree of a rectangle is the number of beautiful rectangles that share at least one square with the given one. Now Ilya thinks that he might not have enough time to solve the problem till the departure of his flight. You are given the description of marked cells and the query rectangles, help Ilya find the beauty degree of each of the query rectangles.",
    "input": "The first line of input contains two integers n and q ( 2 \u2264 n \u2264 200 000, 1 \u2264 q \u2264 200 000) \u2014 the size of the grid and the number of query rectangles. The second line contains n integers p1, p2, . . . , pn, separated by spaces ( 1 \u2264 pi \u2264 n, all pi are different) , they specify grid squares marked by Ilya: in column i he has marked a square at row pi, rows are numbered from 1 to n, bottom to top, columns are numbered from 1 to n, left to right. The following q lines describe query rectangles. Each rectangle is described by four integers: l, d, r, u ( 1 \u2264 l \u2264 r \u2264 n, 1 \u2264 d \u2264 u \u2264 n) , here l and r are the leftmost and the rightmost columns of the rectangle, d and u the bottommost and the topmost rows of the rectangle.",
    "output": "For each query rectangle output its beauty degree on a separate line.",
    "note": "The first sample test has one beautiful rectangle that occupies the whole grid, therefore the answer to any query is 1. In the second sample test the first query rectangle intersects 3 beautiful rectangles, as shown on the picture below: There are 5 beautiful rectangles that intersect the second query rectangle, as shown on the following picture:",
    "topics": [
      "data structures"
    ],
    "id": "853C"
  },
  {
    "title": "Goodbye Souvenir",
    "url": "https://codeforces.com/problemset/problem/848/C",
    "history": "I won' t feel lonely, nor will I be sorrowful. . . not before everything is buried. A string of n beads is left as the message of leaving. The beads are numbered from 1 to n from left to right, each having a shape numbered by integers between 1 and n inclusive. Some beads may have the same shapes. The memory of a shape x in a certain subsegment of beads, is defined to be the difference between the last position and the first position that shape x appears in the segment. The memory of a subsegment is the sum of memories over all shapes that occur in it. From time to time, shapes of beads change as well as the memories. Sometimes, the past secreted in subsegments are being recalled, and you are to find the memory for each of them.",
    "input": "The first line of input contains two space- separated integers n and m ( 1 \u2264 n, m \u2264 100 000) \u2014 the number of beads in the string, and the total number of changes and queries, respectively. The second line contains n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 n) \u2014 the initial shapes of beads 1, 2, . . . , n, respectively. The following m lines each describes either a change in the beads or a query of subsegment. A line has one of the following formats: 1 p x ( 1 \u2264 p \u2264 n, 1 \u2264 x \u2264 n) , meaning that the shape of the p- th bead is changed into x; 2 l r ( 1 \u2264 l \u2264 r \u2264 n) , denoting a query of memory of the subsegment from l to r, inclusive.",
    "output": "For each query, print one line with an integer \u2014 the memory of the recalled subsegment.",
    "note": "The initial string of beads has shapes ( 1, 2, 3, 1, 3, 2, 1) . Consider the changes and queries in their order: 2 3 7: the memory of the subsegment [ 3, 7] is ( 7 - 4) + ( 6 - 6) + ( 5 - 3) = 5; 2 1 3: the memory of the subsegment [ 1, 3] is ( 1 - 1) + ( 2 - 2) + ( 3 - 3) = 0; 1 7 2: the shape of the 7- th bead changes into 2. Beads now have shapes ( 1, 2, 3, 1, 3, 2, 2) respectively; 1 3 2: the shape of the 3- rd bead changes into 2. Beads now have shapes ( 1, 2, 2, 1, 3, 2, 2) respectively; 2 1 6: the memory of the subsegment [ 1, 6] is ( 4 - 1) + ( 6 - 2) + ( 5 - 5) = 7; 2 5 7: the memory of the subsegment [ 5, 7] is ( 7 - 6) + ( 5 - 5) = 1.",
    "topics": [
      "data structures",
      "divide and conquer"
    ],
    "id": "848C"
  },
  {
    "title": "Rooter's Song",
    "url": "https://codeforces.com/problemset/problem/848/B",
    "history": "Wherever the destination is, whoever we meet, let' s render this song together. On a Cartesian coordinate plane lies a rectangular stage of size w \u00d7 h, represented by a rectangle with corners ( 0, 0) , ( w, 0) , ( w, h) and ( 0, h) . It can be seen that no collisions will happen before one enters the stage. On the sides of the stage stand n dancers. The i- th of them falls into one of the following groups: Vertical: stands at ( xi, 0) , moves in positive y direction ( upwards) ; Horizontal: stands at ( 0, yi) , moves in positive x direction ( rightwards) . According to choreography, the i- th dancer should stand still for the first ti milliseconds, and then start moving in the specified direction at 1 unit per millisecond, until another border is reached. It is guaranteed that no two dancers have the same group, position and waiting time at the same time. When two dancers collide ( i. e. are on the same point at some time when both of them are moving) , they immediately exchange their moving directions and go on. Dancers stop when a border of the stage is reached. Find out every dancer' s stopping position.",
    "input": "The first line of input contains three space- separated positive integers n, w and h ( 1 \u2264 n \u2264 100 000, 2 \u2264 w, h \u2264 100 000) \u2014 the number of dancers and the width and height of the stage, respectively. The following n lines each describes a dancer: the i- th among them contains three space- separated integers gi, pi, and ti ( 1 \u2264 gi \u2264 2, 1 \u2264 pi \u2264 99 999, 0 \u2264 ti \u2264 100 000) , describing a dancer' s group gi ( gi = 1 \u2014 vertical, gi = 2 \u2014 horizontal) , position, and waiting time. If gi = 1 then pi = xi; otherwise pi = yi. It' s guaranteed that 1 \u2264 xi \u2264 w - 1 and 1 \u2264 yi \u2264 h - 1. It is guaranteed that no two dancers have the same group, position and waiting time at the same time.",
    "output": "Output n lines, the i- th of which contains two space- separated integers ( xi, yi) \u2014 the stopping position of the i- th dancer in the input.",
    "note": "The first example corresponds to the initial setup in the legend, and the tracks of dancers are marked with different colours in the following figure. In the second example, no dancers collide.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "geometry",
      "implementation",
      "sortings",
      "two pointers"
    ],
    "id": "848B"
  },
  {
    "title": "Dog Show",
    "url": "https://codeforces.com/problemset/problem/847/D",
    "history": "A new dog show on TV is starting next week. On the show dogs are required to demonstrate bottomless stomach, strategic thinking and self- preservation instinct. You and your dog are invited to compete with other participants and naturally you want to win! On the show a dog needs to eat as many bowls of dog food as possible ( bottomless stomach helps here) . Dogs compete separately of each other and the rules are as follows: At the start of the show the dog and the bowls are located on a line. The dog starts at position x = 0 and n bowls are located at positions x = 1, x = 2, . . . , x = n. The bowls are numbered from 1 to n from left to right. After the show starts the dog immediately begins to run to the right to the first bowl. The food inside bowls is not ready for eating at the start because it is too hot ( dog' s self- preservation instinct prevents eating) . More formally, the dog can eat from the i- th bowl after ti seconds from the start of the show or later. It takes dog 1 second to move from the position x to the position x + 1. The dog is not allowed to move to the left, the dog runs only to the right with the constant speed 1 distance unit per second. When the dog reaches a bowl ( say, the bowl i) , the following cases are possible: the food had cooled down ( i. e. it passed at least ti seconds from the show start) : the dog immediately eats the food and runs to the right without any stop, the food is hot ( i. e. it passed less than ti seconds from the show start) : the dog has two options: to wait for the i- th bowl, eat the food and continue to run at the moment ti or to skip the i- th bowl and continue to run to the right without any stop. After T seconds from the start the show ends. If the dog reaches a bowl of food at moment T the dog can not eat it. The show stops before T seconds if the dog had run to the right of the last bowl. You need to help your dog create a strategy with which the maximum possible number of bowls of food will be eaten in T seconds.",
    "input": "Two integer numbers are given in the first line - n and T ( 1 \u2264 n \u2264 200 000, 1 \u2264 T \u2264 2\u00b7109) \u2014 the number of bowls of food and the time when the dog is stopped. On the next line numbers t1, t2, . . . , tn ( 1 \u2264 ti \u2264 109) are given, where ti is the moment of time when the i- th bowl of food is ready for eating.",
    "output": "Output a single integer \u2014 the maximum number of bowls of food the dog will be able to eat in T seconds.",
    "note": "In the first example the dog should skip the second bowl to eat from the two bowls ( the first and the third) .",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy"
    ],
    "id": "847D"
  },
  {
    "title": "Preparing for Merge Sort",
    "url": "https://codeforces.com/problemset/problem/847/B",
    "history": "Ivan has an array consisting of n different integers. He decided to reorder all elements in increasing order. Ivan loves merge sort so he decided to represent his array with one or several increasing sequences which he then plans to merge into one sorted array. Ivan represent his array with increasing sequences with help of the following algorithm. While there is at least one unused number in array Ivan repeats the following procedure: iterate through array from the left to the right; Ivan only looks at unused numbers on current iteration; if current number is the first unused number on this iteration or this number is greater than previous unused number on current iteration, then Ivan marks the number as used and writes it down. For example, if Ivan' s array looks like [ 1, 3, 2, 5, 4] then he will perform two iterations. On first iteration Ivan will use and write numbers [ 1, 3, 5] , and on second one \u2014 [ 2, 4] . Write a program which helps Ivan and finds representation of the given array with one or several increasing sequences in accordance with algorithm described above.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2\u00b7105) \u2014 the number of elements in Ivan' s array. The second line contains a sequence consisting of distinct integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) \u2014 Ivan' s array.",
    "output": "Print representation of the given array in the form of one or more increasing sequences in accordance with the algorithm described above. Each sequence must be printed on a new line.",
    "note": "",
    "topics": [
      "binary search",
      "data structures"
    ],
    "id": "847B"
  },
  {
    "title": "Random Query",
    "url": "https://codeforces.com/problemset/problem/846/F",
    "history": "You are given an array a consisting of n positive integers. You pick two integer numbers l and r from 1 to n, inclusive ( numbers are picked randomly, equiprobably and independently) . If l > r, then you swap values of l and r. You have to calculate the expected value of the number of unique elements in segment of the array from index l to index r, inclusive ( 1- indexed) .",
    "input": "The first line contains one integer number n ( 1 \u2264 n \u2264 106) . The second line contains n integer numbers a1, a2, . . . an ( 1 \u2264 ai \u2264 106) \u2014 elements of the array.",
    "output": "Print one number \u2014 the expected number of unique elements in chosen segment. Your answer will be considered correct if its absolute or relative error doesn' t exceed 10 - 4 \u2014 formally, the answer is correct if , where x is jury' s answer, and y is your answer.",
    "note": "",
    "topics": [
      "data structures",
      "math",
      "probabilities",
      "two pointers"
    ],
    "id": "846F"
  },
  {
    "title": "Monitor",
    "url": "https://codeforces.com/problemset/problem/846/D",
    "history": "Recently Luba bought a monitor. Monitor is a rectangular matrix of size n \u00d7 m. But then she started to notice that some pixels cease to work properly. Luba thinks that the monitor will become broken the first moment when it contains a square k \u00d7 k consisting entirely of broken pixels. She knows that q pixels are already broken, and for each of them she knows the moment when it stopped working. Help Luba to determine when the monitor became broken ( or tell that it' s still not broken even after all q pixels stopped working) .",
    "input": "The first line contains four integer numbers n, m, k, q ( 1 \u2264 n, m \u2264 500, 1 \u2264 k \u2264 min( n, m) , 0 \u2264 q \u2264 n\u00b7m) \u2014 the length and width of the monitor, the size of a rectangle such that the monitor is broken if there is a broken rectangle with this size, and the number of broken pixels. Each of next q lines contain three integer numbers xi, yi, ti ( 1 \u2264 xi \u2264 n, 1 \u2264 yi \u2264 m, 0 \u2264 t \u2264 109) \u2014 coordinates of i- th broken pixel ( its row and column in matrix) and the moment it stopped working. Each pixel is listed at most once. We consider that pixel is already broken at moment ti.",
    "output": "Print one number \u2014 the minimum moment the monitor became broken, or \" - 1\" if it' s still not broken after these q pixels stopped working.",
    "note": "",
    "topics": [
      "binary search",
      "data structures"
    ],
    "id": "846D"
  },
  {
    "title": "Four Segments",
    "url": "https://codeforces.com/problemset/problem/846/C",
    "history": "You are given an array of n integer numbers. Let sum( l, r) be the sum of all numbers on positions from l to r non- inclusive ( l- th element is counted, r- th element is not counted) . For indices l and r holds 0 \u2264 l \u2264 r \u2264 n. Indices in array are numbered from 0. For example, if a = [ - 5, 3, 9, 4] , then sum( 0, 1) = - 5, sum( 0, 2) = - 2, sum( 1, 4) = 16 and sum( i, i) = 0 for each i from 0 to 4. Choose the indices of three delimiters delim0, delim1, delim2 ( 0 \u2264 delim0 \u2264 delim1 \u2264 delim2 \u2264 n) and divide the array in such a way that the value of res = sum( 0, delim0) - sum( delim0, delim1) + sum( delim1, delim2) - sum( delim2, n) is maximal. Note that some of the expressions sum( l, r) can correspond to empty segments ( if l = r for some segment) .",
    "input": "The first line contains one integer number n ( 1 \u2264 n \u2264 5000) . The second line contains n numbers a0, a1, . . . , an - 1 ( - 109 \u2264 ai \u2264 109) .",
    "output": "Choose three indices so that the value of res is maximal. If there are multiple answers, print any of them.",
    "note": "",
    "topics": [
      "brute force",
      "data structures",
      "dp"
    ],
    "id": "846C"
  },
  {
    "title": "Fire in the City",
    "url": "https://codeforces.com/problemset/problem/845/E",
    "history": "The capital of Berland looks like a rectangle of size n \u00d7 m of the square blocks of same size. Fire! It is known that k + 1 blocks got caught on fire ( k + 1 \u2264 n\u00b7m) . Those blocks are centers of ignition. Moreover positions of k of these centers are known and one of these stays unknown. All k + 1 positions are distinct. The fire goes the following way: during the zero minute of fire only these k + 1 centers of ignition are burning. Every next minute the fire goes to all neighbouring blocks to the one which is burning. You can consider blocks to burn for so long that this time exceeds the time taken in the problem. The neighbouring blocks are those that touch the current block by a side or by a corner. Berland Fire Deparment wants to estimate the minimal time it takes the fire to lighten up the whole city. Remember that the positions of k blocks ( centers of ignition) are known and ( k + 1) - th can be positioned in any other block. Help Berland Fire Department to estimate the minimal time it takes the fire to lighten up the whole city.",
    "input": "The first line contains three integers n, m and k ( 1 \u2264 n, m \u2264 109, 1 \u2264 k \u2264 500) . Each of the next k lines contain two integers xi and yi ( 1 \u2264 xi \u2264 n, 1 \u2264 yi \u2264 m) \u2014 coordinates of the i- th center of ignition. It is guaranteed that the locations of all centers of ignition are distinct.",
    "output": "Print the minimal time it takes the fire to lighten up the whole city ( in minutes) .",
    "note": "In the first example the last block can have coordinates ( 4, 4) . In the second example the last block can have coordinates ( 8, 3) .",
    "topics": [
      "binary search",
      "data structures"
    ],
    "id": "845E"
  },
  {
    "title": "Driving Test",
    "url": "https://codeforces.com/problemset/problem/845/D",
    "history": "Polycarp has just attempted to pass the driving test. He ran over the straight road with the signs of four types. speed limit: this sign comes with a positive integer number \u2014 maximal speed of the car after the sign ( cancel the action of the previous sign of this type) ; overtake is allowed: this sign means that after some car meets it, it can overtake any other car; no speed limit: this sign cancels speed limit if any ( car can move with arbitrary speed after this sign) ; no overtake allowed: some car can' t overtake any other car after this sign. Polycarp goes past the signs consequentially, each new sign cancels the action of all the previous signs of it' s kind ( speed limit/ overtake) . It is possible that two or more \" no overtake allowed\" signs go one after another with zero \" overtake is allowed\" signs between them. It works with \" no speed limit\" and \" overtake is allowed\" signs as well. In the beginning of the ride overtake is allowed and there is no speed limit. You are given the sequence of events in chronological order \u2014 events which happened to Polycarp during the ride. There are events of following types: Polycarp changes the speed of his car to specified ( this event comes with a positive integer number) ; Polycarp' s car overtakes the other car; Polycarp' s car goes past the \" speed limit\" sign ( this sign comes with a positive integer) ; Polycarp' s car goes past the \" overtake is allowed\" sign; Polycarp' s car goes past the \" no speed limit\" ; Polycarp' s car goes past the \" no overtake allowed\" ; It is guaranteed that the first event in chronological order is the event of type 1 ( Polycarp changed the speed of his car to specified) . After the exam Polycarp can justify his rule violations by telling the driving instructor that he just didn' t notice some of the signs. What is the minimal number of signs Polycarp should say he didn' t notice, so that he would make no rule violations from his point of view?",
    "input": "The first line contains one integer number n ( 1 \u2264 n \u2264 2\u00b7105) \u2014 number of events. Each of the next n lines starts with integer t ( 1 \u2264 t \u2264 6) \u2014 the type of the event. An integer s ( 1 \u2264 s \u2264 300) follows in the query of the first and the third type ( if it is the query of first type, then it' s new speed of Polycarp' s car, if it is the query of third type, then it' s new speed limit) . It is guaranteed that the first event in chronological order is the event of type 1 ( Polycarp changed the speed of his car to specified) .",
    "output": "Print the minimal number of road signs Polycarp should say he didn' t notice, so that he would make no rule violations from his point of view.",
    "note": "In the first example Polycarp should say he didn' t notice the \" speed limit\" sign with the limit of 70 and the second \" speed limit\" sign with the limit of 120. In the second example Polycarp didn' t make any rule violation. In the third example Polycarp should say he didn' t notice both \" no overtake allowed\" that came after \" overtake is allowed\" sign.",
    "topics": [
      "data structures",
      "dp",
      "greedy"
    ],
    "id": "845D"
  },
  {
    "title": "Two TVs",
    "url": "https://codeforces.com/problemset/problem/845/C",
    "history": "Polycarp is a great fan of television. He wrote down all the TV programs he is interested in for today. His list contains n shows, i- th of them starts at moment li and ends at moment ri. Polycarp owns two TVs. He can watch two different shows simultaneously with two TVs but he can only watch one show at any given moment on a single TV. If one show ends at the same moment some other show starts then you can' t watch them on a single TV. Polycarp wants to check out all n shows. Are two TVs enough to do so?",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 2\u00b7105) \u2014 the number of shows. Each of the next n lines contains two integers li and ri ( 0 \u2264 li < ri \u2264 109) \u2014 starting and ending time of i- th show.",
    "output": "If Polycarp is able to check out all the shows using only two TVs then print \" YES\" ( without quotes) . Otherwise, print \" NO\" ( without quotes) .",
    "note": "",
    "topics": [
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "845C"
  },
  {
    "title": "Vitya and Strange Lesson",
    "url": "https://codeforces.com/problemset/problem/842/D",
    "history": "Today at the lesson Vitya learned a very interesting function \u2014 mex. Mex of a sequence of numbers is the minimum non- negative number that is not present in the sequence as element. For example, mex( [ 4, 33, 0, 1, 1, 5] ) = 2 and mex( [ 1, 2, 3] ) = 0. Vitya quickly understood all tasks of the teacher, but can you do the same? You are given an array consisting of n non- negative integers, and m queries. Each query is characterized by one number x and consists of the following consecutive steps: Perform the bitwise addition operation modulo 2 ( xor) of each array element with the number x. Find mex of the resulting array. Note that after each query the array changes.",
    "input": "First line contains two integer numbers n and m ( 1 \u2264 n, m \u2264 3\u00b7105) \u2014 number of elements in array and number of queries. Next line contains n integer numbers ai ( 0 \u2264 ai \u2264 3\u00b7105) \u2014 elements of then array. Each of next m lines contains query \u2014 one integer number x ( 0 \u2264 x \u2264 3\u00b7105) .",
    "output": "For each query print the answer on a separate line.",
    "note": "",
    "topics": [
      "binary search",
      "data structures"
    ],
    "id": "842D"
  },
  {
    "title": "Destiny",
    "url": "https://codeforces.com/problemset/problem/840/D",
    "history": "Once, Leha found in the left pocket an array consisting of n integers, and in the right pocket q queries of the form l r k. If there are queries, then they must be answered. Answer for the query is minimal x such that x occurs in the interval l r strictly more than times or - 1 if there is no such number. Help Leha with such a difficult task.",
    "input": "First line of input data contains two integers n and q ( 1 \u2264 n, q \u2264 3\u00b7105) \u2014 number of elements in the array and number of queries respectively. Next line contains n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 n) \u2014 Leha' s array. Each of next q lines contains three integers l, r and k ( 1 \u2264 l \u2264 r \u2264 n, 2 \u2264 k \u2264 5) \u2014 description of the queries.",
    "output": "Output answer for each query in new line.",
    "note": "",
    "topics": [
      "data structures",
      "probabilities"
    ],
    "id": "840D"
  },
  {
    "title": "Leha and another game about graph",
    "url": "https://codeforces.com/problemset/problem/840/B",
    "history": "Leha plays a computer game, where is on each level is given a connected graph with n vertices and m edges. Graph can contain multiple edges, but can not contain self loops. Each vertex has an integer di, which can be equal to 0, 1 or - 1. To pass the level, he needs to find a \u00abgood\u00bb subset of edges of the graph or say, that it doesn' t exist. Subset is called \u00abgood\u00bb, if by by leaving only edges from this subset in the original graph, we obtain the following: for every vertex i, di = - 1 or it' s degree modulo 2 is equal to di. Leha wants to pass the game as soon as possible and ask you to help him. In case of multiple correct answers, print any of them.",
    "input": "The first line contains two integers n, m ( 1 \u2264 n \u2264 3\u00b7105, n - 1 \u2264 m \u2264 3\u00b7105) \u2014 number of vertices and edges. The second line contains n integers d1, d2, . . . , dn ( - 1 \u2264 di \u2264 1) \u2014 numbers on the vertices. Each of the next m lines contains two integers u and v ( 1 \u2264 u, v \u2264 n) \u2014 edges. It' s guaranteed, that graph in the input is connected.",
    "output": "Print - 1 in a single line, if solution doesn' t exist. Otherwise in the first line k \u2014 number of edges in a subset. In the next k lines indexes of edges. Edges are numerated in order as they are given in the input, starting from 1.",
    "note": "In the first sample we have single vertex without edges. It' s degree is 0 and we can not get 1.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "dfs and similar",
      "dp",
      "graphs"
    ],
    "id": "840B"
  },
  {
    "title": "Diverging Directions",
    "url": "https://codeforces.com/problemset/problem/838/B",
    "history": "You are given a directed weighted graph with n nodes and 2n - 2 edges. The nodes are labeled from 1 to n, while the edges are labeled from 1 to 2n - 2. The graph' s edges can be split into two parts. The first n - 1 edges will form a rooted spanning tree, with node 1 as the root. All these edges will point away from the root. The last n - 1 edges will be from node i to node 1, for all 2 \u2264 i \u2264 n. You are given q queries. There are two types of queries 1 i w: Change the weight of the i- th edge to w 2 u v: Print the length of the shortest path between nodes u to v Given these queries, print the shortest path lengths.",
    "input": "The first line of input will contain two integers n, q ( 2 \u2264 n, q \u2264 200 000) , the number of nodes, and the number of queries, respectively. The next 2n - 2 integers will contain 3 integers ai, bi, ci, denoting a directed edge from node ai to node bi with weight ci. The first n - 1 of these lines will describe a rooted spanning tree pointing away from node 1, while the last n - 1 of these lines will have bi = 1. More specifically, The edges ( a1, b1) , ( a2, b2) , . . . ( an - 1, bn - 1) will describe a rooted spanning tree pointing away from node 1. bj = 1 for n \u2264 j \u2264 2n - 2. an, an + 1, . . . , a2n - 2 will be distinct and between 2 and n. The next q lines will contain 3 integers, describing a query in the format described in the statement. All edge weights will be between 1 and 106.",
    "output": "For each type 2 query, print the length of the shortest path in its own line.",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "trees"
    ],
    "id": "838B"
  },
  {
    "title": "Functions On The Segments",
    "url": "https://codeforces.com/problemset/problem/837/G",
    "history": "You have an array f of n functions. The function fi( x) ( 1 \u2264 i \u2264 n) is characterized by parameters: x1, x2, y1, a, b, y2 and take values: y1, if x \u2264 x1. a\u00b7x + b, if x1 < x \u2264 x2. y2, if x > x2. There are m queries. Each query is determined by numbers l, r and x. For a query with number i ( 1 \u2264 i \u2264 m) , you need to calculate the sum of all fj( xi) where l \u2264 j \u2264 r. The value of xi is calculated as follows: xi = ( x + last) mod 109, where last is the answer to the query with number i - 1. The value of last equals 0 if i = 1.",
    "input": "First line contains one integer number n ( 1 \u2264 n \u2264 75000) . Each of the next n lines contains six integer numbers: x1, x2, y1, a, b, y2 ( 0 \u2264 x1 < x2 \u2264 2\u00b7105, 0 \u2264 y1, y2 \u2264 109, 0 \u2264 a, b \u2264 104) . Next line contains one integer number m ( 1 \u2264 m \u2264 500000) . Each of the next m lines contains three integer numbers: l, r and x ( 1 \u2264 l \u2264 r \u2264 n, 0 \u2264 x \u2264 109) .",
    "output": "",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": "837G"
  },
  {
    "title": "The Festive Evening",
    "url": "https://codeforces.com/problemset/problem/834/B",
    "history": "It' s the end of July \u2013 the time when a festive evening is held at Jelly Castle! Guests from all over the kingdom gather here to discuss new trends in the world of confectionery. Yet some of the things discussed here are not supposed to be disclosed to the general public: the information can cause discord in the kingdom of Sweetland in case it turns out to reach the wrong hands. So it' s a necessity to not let any uninvited guests in. There are 26 entrances in Jelly Castle, enumerated with uppercase English letters from A to Z. Because of security measures, each guest is known to be assigned an entrance he should enter the castle through. The door of each entrance is opened right before the first guest' s arrival and closed right after the arrival of the last guest that should enter the castle through this entrance. No two guests can enter the castle simultaneously. For an entrance to be protected from possible intrusion, a candy guard should be assigned to it. There are k such guards in the castle, so if there are more than k opened doors, one of them is going to be left unguarded! Notice that a guard can' t leave his post until the door he is assigned to is closed. Slastyona had a suspicion that there could be uninvited guests at the evening. She knows the order in which the invited guests entered the castle, and wants you to help her check whether there was a moment when more than k doors were opened.",
    "input": "Two integers are given in the first string: the number of guests n and the number of guards k ( 1 \u2264 n \u2264 106, 1 \u2264 k \u2264 26) . In the second string, n uppercase English letters s1s2. . . sn are given, where si is the entrance used by the i- th guest.",
    "output": "Output \u00abYES\u00bb if at least one door was unguarded during some time, and \u00abNO\u00bb otherwise. You can output each letter in arbitrary case ( upper or lower) .",
    "note": "In the first sample case, the door A is opened right before the first guest' s arrival and closed when the second guest enters the castle. The door B is opened right before the arrival of the third guest, and closed after the fifth one arrives. One guard can handle both doors, as the first one is closed before the second one is opened. In the second sample case, the door B is opened before the second guest' s arrival, but the only guard can' t leave the door A unattended, as there is still one more guest that should enter the castle through this door.",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "834B"
  },
  {
    "title": "Caramel Clouds",
    "url": "https://codeforces.com/problemset/problem/833/E",
    "history": "It is well- known that the best decoration for a flower bed in Sweetland are vanilla muffins. Seedlings of this plant need sun to grow up. Slastyona has m seedlings, and the j- th seedling needs at least kj minutes of sunlight to grow up. Most of the time it' s sunny in Sweetland, but sometimes some caramel clouds come, the i- th of which will appear at time moment ( minute) li and disappear at time moment ri. Of course, the clouds make shadows, and the seedlings can' t grow when there is at least one cloud veiling the sun. Slastyona wants to grow up her muffins as fast as possible. She has exactly C candies, which is the main currency in Sweetland. One can dispel any cloud by paying ci candies. However, in order to comply with Sweetland' s Department of Meteorology regulations, one can' t dispel more than two clouds. Slastyona hasn' t decided yet which of the m seedlings will be planted at the princess' garden, so she needs your help. For each seedling determine the earliest moment it can grow up if Slastyona won' t break the law and won' t spend more candies than she has. Note that each of the seedlings is considered independently. The seedlings start to grow at time moment 0.",
    "input": "The first line contains two integers n and C ( 0 \u2264 n \u2264 3\u00b7105, 0 \u2264 C \u2264 109) \u2013 the number of caramel clouds and the number of candies Slastyona has. The next n lines contain three integers each: li, ri, ci ( 0 \u2264 li < ri \u2264 109, 0 \u2264 ci \u2264 109) , describing one caramel cloud. The next line contains single integer m ( 1 \u2264 m \u2264 3\u00b7105) \u2013 the number of seedlings. Each of the seedlings is described with one integer kj ( 1 \u2264 kj \u2264 109) \u2013 the required number of sunny minutes.",
    "output": "For each seedling print one integer \u2013 the minimum minute Slastyona can grow it up.",
    "note": "Consider the first example. For each k it is optimal to dispel clouds 1 and 3. Then the remaining cloud will give shadow on time segment [ 1. . 6] . So, intervals [ 0. . 1] and [ 6. . inf) are sunny. In the second example for k = 1 it is not necessary to dispel anything, and for k = 5 the best strategy is to dispel clouds 2 and 3. This adds an additional sunny segment [ 4. . 8] , which together with [ 0. . 1] allows to grow up the muffin at the eight minute. If the third example the two seedlings are completely different. For the first one it is necessary to dispel cloud 1 and obtain a sunny segment [ 0. . 10] . However, the same strategy gives answer 180 for the second seedling. Instead, we can dispel cloud 2, to make segments [ 0. . 3] and [ 7. . inf) sunny, and this allows up to shorten the time to 104.",
    "topics": [
      "data structures",
      "dp",
      "sortings"
    ],
    "id": "833E"
  },
  {
    "title": "Red-Black Cobweb",
    "url": "https://codeforces.com/problemset/problem/833/D",
    "history": "Slastyona likes to watch life of nearby grove' s dwellers. This time she watches a strange red- black spider sitting at the center of a huge cobweb. The cobweb is a set of n nodes connected by threads, each of the treads is either red of black. Using these threads, the spider can move between nodes. No thread connects a node to itself, and between any two nodes there is a unique sequence of threads connecting them. Slastyona decided to study some special qualities of the cobweb. She noticed that each of the threads has a value of clamminess x. However, Slastyona is mostly interested in jelliness of the cobweb. Consider those of the shortest paths between each pair of nodes on which the numbers of red and black threads differ at most twice. For each such path compute the product of the clamminess of threads on the path. The jelliness of the cobweb is the product of all obtained values among all paths. Those paths that differ by direction only are counted only once. Of course, this number can be huge, so Slastyona asks you to compute the jelliness of the given cobweb and print the answer modulo 109 + 7.",
    "input": "The first line contains the number of nodes n ( 2 \u2264 n \u2264 105) . The next n - 1 lines contain four integers each, denoting the i- th thread of the cobweb: the nodes it connects ui, vi ( 1 \u2264 ui \u2264 n, 1 \u2264 vi \u2264 n) , the clamminess of the thread xi ( 1 \u2264 x \u2264 109 + 6) , and the color of the thread ci ( ) . The red color is denoted by 0, and the black color is denoted by 1.",
    "output": "Print single integer the jelliness of the cobweb modulo 109 + 7. If there are no paths such that the numbers of red and black threads differ at most twice, print 1.",
    "note": "In the first example there are 4 pairs of nodes such that the numbers of threads of both colors on them differ at most twice. There pairs are ( 1, 3) with product of clamminess equal to 45, ( 1, 5) with product of clamminess equal to 45, ( 3, 4) with product of clamminess equal to 25 and ( 4, 5) with product of clamminess equal to 25. The jelliness of the cobweb is equal to 1265625.",
    "topics": [
      "data structures",
      "divide and conquer",
      "implementation",
      "trees"
    ],
    "id": "833D"
  },
  {
    "title": "The Bakery",
    "url": "https://codeforces.com/problemset/problem/833/B",
    "history": "Some time ago Slastyona the Sweetmaid decided to open her own bakery! She bought required ingredients and a wonder- oven which can bake several types of cakes, and opened the bakery. Soon the expenses started to overcome the income, so Slastyona decided to study the sweets market. She learned it' s profitable to pack cakes in boxes, and that the more distinct cake types a box contains ( let' s denote this number as the value of the box) , the higher price it has. She needs to change the production technology! The problem is that the oven chooses the cake types on its own and Slastyona can' t affect it. However, she knows the types and order of n cakes the oven is going to bake today. Slastyona has to pack exactly k boxes with cakes today, and she has to put in each box several ( at least one) cakes the oven produced one right after another ( in other words, she has to put in a box a continuous segment of cakes) . Slastyona wants to maximize the total value of all boxes with cakes. Help her determine this maximum possible total value.",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 35000, 1 \u2264 k \u2264 min( n, 50) ) \u2013 the number of cakes and the number of boxes, respectively. The second line contains n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 n) \u2013 the types of cakes in the order the oven bakes them.",
    "output": "Print the only integer \u2013 the maximum total value of all boxes with cakes.",
    "note": "In the first example Slastyona has only one box. She has to put all cakes in it, so that there are two types of cakes in the box, so the value is equal to 2. In the second example it is profitable to put the first two cakes in the first box, and all the rest in the second. There are two distinct types in the first box, and three in the second box then, so the total value is 5.",
    "topics": [
      "binary search",
      "data structures",
      "divide and conquer",
      "dp",
      "two pointers"
    ],
    "id": "833B"
  },
  {
    "title": "Bamboo Partition",
    "url": "https://codeforces.com/problemset/problem/830/C",
    "history": "Vladimir wants to modernize partitions in his office. To make the office more comfortable he decided to remove a partition and plant several bamboos in a row. He thinks it would be nice if there are n bamboos in a row, and the i- th from the left is ai meters high. Vladimir has just planted n bamboos in a row, each of which has height 0 meters right now, but they grow 1 meter each day. In order to make the partition nice Vladimir can cut each bamboo once at any height ( no greater that the height of the bamboo) , and then the bamboo will stop growing. Vladimir wants to check the bamboos each d days ( i. e. d days after he planted, then after 2d days and so on) , and cut the bamboos that reached the required height. Vladimir wants the total length of bamboo parts he will cut off to be no greater than k meters. What is the maximum value d he can choose so that he can achieve what he wants without cutting off more than k meters of bamboo?",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 100, 1 \u2264 k \u2264 1011) \u2014 the number of bamboos and the maximum total length of cut parts, in meters. The second line contains n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) \u2014 the required heights of bamboos, in meters.",
    "output": "Print a single integer \u2014 the maximum value of d such that Vladimir can reach his goal.",
    "note": "In the first example Vladimir can check bamboos each 3 days. Then he will cut the first and the second bamboos after 3 days, and the third bamboo after 6 days. The total length of cut parts is 2 + 0 + 1 = 3 meters.",
    "topics": [
      "brute force",
      "data structures",
      "implementation",
      "math",
      "number theory",
      "sortings",
      "two pointers"
    ],
    "id": "830C"
  },
  {
    "title": "Cards Sorting",
    "url": "https://codeforces.com/problemset/problem/830/B",
    "history": "Vasily has a deck of cards consisting of n cards. There is an integer on each of the cards, this integer is between 1 and 100 000, inclusive. It is possible that some cards have the same integers on them. Vasily decided to sort the cards. To do this, he repeatedly takes the top card from the deck, and if the number on it equals the minimum number written on the cards in the deck, then he places the card away. Otherwise, he puts it under the deck and takes the next card from the top, and so on. The process ends as soon as there are no cards in the deck. You can assume that Vasily always knows the minimum number written on some card in the remaining deck, but doesn' t know where this card ( or these cards) is. You are to determine the total number of times Vasily takes the top card from the deck.",
    "input": "The first line contains single integer n ( 1 \u2264 n \u2264 100 000) \u2014 the number of cards in the deck. The second line contains a sequence of n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 100 000) , where ai is the number written on the i- th from top card in the deck.",
    "output": "Print the total number of times Vasily takes the top card from the deck.",
    "note": "In the first example Vasily at first looks at the card with number 6 on it, puts it under the deck, then on the card with number 3, puts it under the deck, and then on the card with number 1. He places away the card with 1, because the number written on it is the minimum among the remaining cards. After that the cards from top to bottom are [ 2, 6, 3] . Then Vasily looks at the top card with number 2 and puts it away. After that the cards from top to bottom are [ 6, 3] . Then Vasily looks at card 6, puts it under the deck, then at card 3 and puts it away. Then there is only one card with number 6 on it, and Vasily looks at it and puts it away. Thus, in total Vasily looks at 7 cards.",
    "topics": [
      "data structures",
      "implementation",
      "sortings"
    ],
    "id": "830B"
  },
  {
    "title": "Dirty Arkady's Kitchen",
    "url": "https://codeforces.com/problemset/problem/827/F",
    "history": "Arkady likes to walk around his kitchen. His labyrinthine kitchen consists of several important places connected with passages. Unfortunately it happens that these passages are flooded with milk so that it' s impossible to pass through them. Namely, it' s possible to pass through each passage in any direction only during some time interval. The lengths of all passages are equal and Arkady makes through them in one second. For security reasons, Arkady can never stop, also, he can' t change direction while going through a passage. In other words, if he starts walking in some passage, he should reach its end and immediately leave the end. Today Arkady needs to quickly reach important place n from place 1. He plans to exit the place 1 at time moment 0 and reach the place n as early as he can. Please find the minimum time he should spend on his way.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 5\u00b7105, 0 \u2264 m \u2264 5\u00b7105) \u2014 the number of important places and the number of passages, respectively. After that, m lines follow, each of them describe one passage. Each line contains four integers a, b, l and r ( 1 \u2264 a, b \u2264 n, a = \u0338 b, 0 \u2264 l < r \u2264 109) \u2014 the places the passage connects and the time segment during which it' s possible to use this passage.",
    "output": "Print one integer \u2014 minimum time Arkady should spend to reach the destination. If he can' t reach the place n, print - 1.",
    "note": "In the first example Arkady should go through important places 1 \u2192 3 \u2192 4 \u2192 5. In the second example Arkady can' t start his walk because at time moment 0 it' s impossible to use the only passage.",
    "topics": [
      "data structures",
      "dp",
      "graphs",
      "shortest paths"
    ],
    "id": "827F"
  },
  {
    "title": "Best Edge Weight",
    "url": "https://codeforces.com/problemset/problem/827/D",
    "history": "You are given a connected weighted graph with n vertices and m edges. The graph doesn' t contain loops nor multiple edges. Consider some edge with id i. Let' s determine for this edge the maximum integer weight we can give to it so that it is contained in all minimum spanning trees of the graph if we don' t change the other weights. You are to determine this maximum weight described above for each edge. You should calculate the answer for each edge independently, it means there can' t be two edges with changed weights at the same time.",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 2\u00b7105, n - 1 \u2264 m \u2264 2\u00b7105) , where n and m are the number of vertices and the number of edges in the graph, respectively. Each of the next m lines contains three integers u, v and c ( 1 \u2264 v, u \u2264 n, v = \u0338 u, 1 \u2264 c \u2264 109) meaning that there is an edge between vertices u and v with weight c.",
    "output": "Print the answer for each edge in the order the edges are given in the input. If an edge is contained in every minimum spanning tree with any weight, print - 1 as the answer.",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "graphs",
      "trees"
    ],
    "id": "827D"
  },
  {
    "title": "DNA Evolution",
    "url": "https://codeforces.com/problemset/problem/827/C",
    "history": "Everyone knows that DNA strands consist of nucleotides. There are four types of nucleotides: \" A\" , \" T\" , \" G\" , \" C\" . A DNA strand is a sequence of nucleotides. Scientists decided to track evolution of a rare species, which DNA strand was string s initially. Evolution of the species is described as a sequence of changes in the DNA. Every change is a change of some nucleotide, for example, the following change can happen in DNA strand \" AAGC\" : the second nucleotide can change to \" T\" so that the resulting DNA strand is \" ATGC\" . Scientists know that some segments of the DNA strand can be affected by some unknown infections. They can represent an infection as a sequence of nucleotides. Scientists are interested if there are any changes caused by some infections. Thus they sometimes want to know the value of impact of some infection to some segment of the DNA. This value is computed as follows: Let the infection be represented as a string e, and let scientists be interested in DNA strand segment starting from position l to position r, inclusive. Prefix of the string eee. . . ( i. e. the string that consists of infinitely many repeats of string e) is written under the string s from position l to position r, inclusive. The value of impact is the number of positions where letter of string s coincided with the letter written under it. Being a developer, Innokenty is interested in bioinformatics also, so the scientists asked him for help. Innokenty is busy preparing VK Cup, so he decided to delegate the problem to the competitors. Help the scientists!",
    "input": "The first line contains the string s ( 1 \u2264 | s| \u2264 105) that describes the initial DNA strand. It consists only of capital English letters \" A\" , \" T\" , \" G\" and \" C\" . The next line contains single integer q ( 1 \u2264 q \u2264 105) \u2014 the number of events. After that, q lines follow, each describes one event. Each of the lines has one of two formats: 1 x c, where x is an integer ( 1 \u2264 x \u2264 | s| ) , and c is a letter \" A\" , \" T\" , \" G\" or \" C\" , which means that there is a change in the DNA: the nucleotide at position x is now c. 2 l r e, where l, r are integers ( 1 \u2264 l \u2264 r \u2264 | s| ) , and e is a string of letters \" A\" , \" T\" , \" G\" and \" C\" ( 1 \u2264 | e| \u2264 10) , which means that scientists are interested in the value of impact of infection e to the segment of DNA strand from position l to position r, inclusive.",
    "output": "For each scientists' query ( second type query) print a single integer in a new line \u2014 the value of impact of the infection on the DNA.",
    "note": "Consider the first example. In the first query of second type all characters coincide, so the answer is 8. In the second query we compare string \" TTTTT. . . \" and the substring \" TGCAT\" . There are two matches. In the third query, after the DNA change, we compare string \" TATAT. . . \" ' with substring \" TGTAT\" . There are 4 matches.",
    "topics": [
      "data structures",
      "strings"
    ],
    "id": "827C"
  },
  {
    "title": "String Reconstruction",
    "url": "https://codeforces.com/problemset/problem/827/A",
    "history": "Ivan had string s consisting of small English letters. However, his friend Julia decided to make fun of him and hid the string s. Ivan preferred making a new string to finding the old one. Ivan knows some information about the string s. Namely, he remembers, that string ti occurs in string s at least ki times or more, he also remembers exactly ki positions where the string ti occurs in string s: these positions are xi, 1, xi, 2, . . . , xi, ki. He remembers n such strings ti. You are to reconstruct lexicographically minimal string s such that it fits all the information Ivan remembers. Strings ti and string s consist of small English letters only.",
    "input": "The first line contains single integer n ( 1 \u2264 n \u2264 105) \u2014 the number of strings Ivan remembers. The next n lines contain information about the strings. The i- th of these lines contains non- empty string ti, then positive integer ki, which equal to the number of times the string ti occurs in string s, and then ki distinct positive integers xi, 1, xi, 2, . . . , xi, ki in increasing order \u2014 positions, in which occurrences of the string ti in the string s start. It is guaranteed that the sum of lengths of strings ti doesn' t exceed 106, 1 \u2264 xi, j \u2264 106, 1 \u2264 ki \u2264 106, and the sum of all ki doesn' t exceed 106. The strings ti can coincide. It is guaranteed that the input data is not self- contradictory, and thus at least one answer always exists.",
    "output": "Print lexicographically minimal string that fits all the information Ivan remembers.",
    "note": "",
    "topics": [
      "data structures",
      "greedy",
      "sortings",
      "strings"
    ],
    "id": "827A"
  },
  {
    "title": "Minimal Labels",
    "url": "https://codeforces.com/problemset/problem/825/E",
    "history": "You are given a directed acyclic graph with n vertices and m edges. There are no self- loops or multiple edges between any pair of vertices. Graph can be disconnected. You should assign labels to all vertices in such a way that: Labels form a valid permutation of length n \u2014 an integer sequence such that each integer from 1 to n appears exactly once in it. If there exists an edge from vertex v to vertex u then labelv should be smaller than labelu. Permutation should be lexicographically smallest among all suitable. Find such sequence of labels to satisfy all the conditions.",
    "input": "The first line contains two integer numbers n, m ( 2 \u2264 n \u2264 105, 1 \u2264 m \u2264 105) . Next m lines contain two integer numbers v and u ( 1 \u2264 v, u \u2264 n, v = \u0338 u) \u2014 edges of the graph. Edges are directed, graph doesn' t contain loops or multiple edges.",
    "output": "Print n numbers \u2014 lexicographically smallest correct permutation of labels of vertices.",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "graphs",
      "greedy"
    ],
    "id": "825E"
  },
  {
    "title": "Okabe and Boxes",
    "url": "https://codeforces.com/problemset/problem/821/C",
    "history": "Okabe and Super Hacker Daru are stacking and removing boxes. There are n boxes numbered from 1 to n. Initially there are no boxes on the stack. Okabe, being a control freak, gives Daru 2n commands: n of which are to add a box to the top of the stack, and n of which are to remove a box from the top of the stack and throw it in the trash. Okabe wants Daru to throw away the boxes in the order from 1 to n. Of course, this means that it might be impossible for Daru to perform some of Okabe' s remove commands, because the required box is not on the top of the stack. That' s why Daru can decide to wait until Okabe looks away and then reorder the boxes in the stack in any way he wants. He can do it at any point of time between Okabe' s commands, but he can' t add or remove boxes while he does it. Tell Daru the minimum number of times he needs to reorder the boxes so that he can successfully complete all of Okabe' s commands. It is guaranteed that every box is added before it is required to be removed.",
    "input": "The first line of input contains the integer n ( 1 \u2264 n \u2264 3\u00b7105) \u2014 the number of boxes. Each of the next 2n lines of input starts with a string \" add\" or \" remove\" . If the line starts with the \" add\" , an integer x ( 1 \u2264 x \u2264 n) follows, indicating that Daru should add the box with number x to the top of the stack. It is guaranteed that exactly n lines contain \" add\" operations, all the boxes added are distinct, and n lines contain \" remove\" operations. It is also guaranteed that a box is always added before it is required to be removed.",
    "output": "Print the minimum number of times Daru needs to reorder the boxes to successfully complete all of Okabe' s commands.",
    "note": "In the first sample, Daru should reorder the boxes after adding box 3 to the stack. In the second sample, Daru should reorder the boxes after adding box 4 and box 7 to the stack.",
    "topics": [
      "data structures",
      "greedy",
      "trees"
    ],
    "id": "821C"
  },
  {
    "title": "Mister B and PR Shifts",
    "url": "https://codeforces.com/problemset/problem/819/B",
    "history": "Some time ago Mister B detected a strange signal from the space, which he started to study. After some transformation the signal turned out to be a permutation p of length n or its cyclic shift. For the further investigation Mister B need some basis, that' s why he decided to choose cyclic shift of this permutation which has the minimum possible deviation. Let' s define the deviation of a permutation p as . Find a cyclic shift of permutation p with minimum possible deviation. If there are multiple solutions, print any of them. Let' s denote id k ( 0 \u2264 k < n) of a cyclic shift of permutation p as the number of right shifts needed to reach this shift, for example: k = 0: shift p1, p2, . . . pn, k = 1: shift pn, p1, . . . pn - 1, . . . , k = n - 1: shift p2, p3, . . . pn, p1.",
    "input": "First line contains single integer n ( 2 \u2264 n \u2264 106) \u2014 the length of the permutation. The second line contains n space- separated integers p1, p2, . . . , pn ( 1 \u2264 pi \u2264 n) \u2014 the elements of the permutation. It is guaranteed that all elements are distinct.",
    "output": "Print two integers: the minimum deviation of cyclic shifts of permutation p and the id of such shift. If there are multiple solutions, print any of them.",
    "note": "In the first sample test the given permutation p is the identity permutation, that' s why its deviation equals to 0, the shift id equals to 0 as well. In the second sample test the deviation of p equals to 4, the deviation of the 1- st cyclic shift ( 1, 2, 3) equals to 0, the deviation of the 2- nd cyclic shift ( 3, 1, 2) equals to 4, the optimal is the 1- st cyclic shift. In the third sample test the deviation of p equals to 4, the deviation of the 1- st cyclic shift ( 1, 3, 2) equals to 2, the deviation of the 2- nd cyclic shift ( 2, 1, 3) also equals to 2, so the optimal are both 1- st and 2- nd cyclic shifts.",
    "topics": [
      "data structures",
      "implementation",
      "math"
    ],
    "id": "819B"
  },
  {
    "title": "Card Game Again",
    "url": "https://codeforces.com/problemset/problem/818/E",
    "history": "Vova again tries to play some computer card game. The rules of deck creation in this game are simple. Vova is given an existing deck of n cards and a magic number k. The order of the cards in the deck is fixed. Each card has a number written on it; number ai is written on the i- th card in the deck. After receiving the deck and the magic number, Vova removes x ( possibly x = 0) cards from the top of the deck, y ( possibly y = 0) cards from the bottom of the deck, and the rest of the deck is his new deck ( Vova has to leave at least one card in the deck after removing cards) . So Vova' s new deck actually contains cards x + 1, x + 2, . . . n - y - 1, n - y from the original deck. Vova' s new deck is considered valid iff the product of all numbers written on the cards in his new deck is divisible by k. So Vova received a deck ( possibly not a valid one) and a number k, and now he wonders, how many ways are there to choose x and y so the deck he will get after removing x cards from the top and y cards from the bottom is valid?",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 100 000, 1 \u2264 k \u2264 109) . The second line contains n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) \u2014 the numbers written on the cards.",
    "output": "Print the number of ways to choose x and y so the resulting deck is valid.",
    "note": "In the first example the possible values of x and y are: x = 0, y = 0; x = 1, y = 0; x = 2, y = 0; x = 0, y = 1.",
    "topics": [
      "binary search",
      "data structures",
      "number theory",
      "two pointers"
    ],
    "id": "818E"
  },
  {
    "title": "Multicolored Cars",
    "url": "https://codeforces.com/problemset/problem/818/D",
    "history": "Alice and Bob got very bored during a long car trip so they decided to play a game. From the window they can see cars of different colors running past them. Cars are going one after another. The game rules are like this. Firstly Alice chooses some color A, then Bob chooses some color B ( A = \u0338 B) . After each car they update the number of cars of their chosen color that have run past them. Let' s define this numbers after i- th car cntA( i) and cntB( i) . If cntA( i) > cntB( i) for every i then the winner is Alice. If cntB( i) \u2265 cntA( i) for every i then the winner is Bob. Otherwise it' s a draw. Bob knows all the colors of cars that they will encounter and order of their appearance. Alice have already chosen her color A and Bob now wants to choose such color B that he will win the game ( draw is not a win) . Help him find this color. If there are multiple solutions, print any of them. If there is no such color then print - 1.",
    "input": "The first line contains two integer numbers n and A ( 1 \u2264 n \u2264 105, 1 \u2264 A \u2264 106) \u2013 number of cars and the color chosen by Alice. The second line contains n integer numbers c1, c2, . . . , cn ( 1 \u2264 ci \u2264 106) \u2014 colors of the cars that Alice and Bob will encounter in the order of their appearance.",
    "output": "Output such color B ( 1 \u2264 B \u2264 106) that if Bob chooses it then he will win the game. If there are multiple solutions, print any of them. If there is no such color then print - 1. It is guaranteed that if there exists any solution then there exists solution with ( 1 \u2264 B \u2264 106) .",
    "note": "Let' s consider availability of colors in the first example: cnt2( i) \u2265 cnt1( i) for every i, and color 2 can be the answer. cnt4( 2) < cnt1( 2) , so color 4 isn' t the winning one for Bob. All the other colors also have cntj( 2) < cnt1( 2) , thus they are not available. In the third example every color is acceptable except for 10.",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "818D"
  },
  {
    "title": "MEX Queries",
    "url": "https://codeforces.com/problemset/problem/817/F",
    "history": "You are given a set of integer numbers, initially it is empty. You should perform n queries. There are three different types of queries: 1 l r \u2014 Add all missing numbers from the interval [ l, r] 2 l r \u2014 Remove all present numbers from the interval [ l, r] 3 l r \u2014 Invert the interval [ l, r] \u2014 add all missing and remove all present numbers from the interval [ l, r] After each query you should output MEX of the set \u2014 the smallest positive ( MEX \u2265 1) integer number which is not presented in the set.",
    "input": "The first line contains one integer number n ( 1 \u2264 n \u2264 105) . Next n lines contain three integer numbers t, l, r ( 1 \u2264 t \u2264 3, 1 \u2264 l \u2264 r \u2264 1018) \u2014 type of the query, left and right bounds.",
    "output": "Print MEX of the set after each query.",
    "note": "Here are contents of the set after each query in the first example: 3, 4 \u2014 the interval [ 3, 4] is added 1, 2, 5, 6 \u2014 numbers 3, 4 from the interval [ 1, 6] got deleted and all the others are added 5, 6 \u2014 numbers 1, 2 got deleted",
    "topics": [
      "binary search",
      "data structures",
      "trees"
    ],
    "id": "817F"
  },
  {
    "title": "Choosing The Commander",
    "url": "https://codeforces.com/problemset/problem/817/E",
    "history": "As you might remember from the previous round, Vova is currently playing a strategic game known as Rage of Empires. Vova managed to build a large army, but forgot about the main person in the army - the commander. So he tries to hire a commander, and he wants to choose the person who will be respected by warriors. Each warrior is represented by his personality \u2014 an integer number pi. Each commander has two characteristics \u2014 his personality pj and leadership lj ( both are integer numbers) . Warrior i respects commander j only if ( is the bitwise excluding OR of x and y) . Initially Vova' s army is empty. There are three different types of events that can happen with the army: 1 pi \u2014 one warrior with personality pi joins Vova' s army; 2 pi \u2014 one warrior with personality pi leaves Vova' s army; 3 pi li \u2014 Vova tries to hire a commander with personality pi and leadership li. For each event of the third type Vova wants to know how many warriors ( counting only those who joined the army and haven' t left yet) respect the commander he tries to hire.",
    "input": "The first line contains one integer q ( 1 \u2264 q \u2264 100000) \u2014 the number of events. Then q lines follow. Each line describes the event: 1 pi ( 1 \u2264 pi \u2264 108) \u2014 one warrior with personality pi joins Vova' s army; 2 pi ( 1 \u2264 pi \u2264 108) \u2014 one warrior with personality pi leaves Vova' s army ( it is guaranteed that there is at least one such warrior in Vova' s army by this moment) ; 3 pi li ( 1 \u2264 pi, li \u2264 108) \u2014 Vova tries to hire a commander with personality pi and leadership li. There is at least one event of this type.",
    "output": "For each event of the third type print one integer \u2014 the number of warriors who respect the commander Vova tries to hire in the event.",
    "note": "In the example the army consists of two warriors with personalities 3 and 4 after first two events. Then Vova tries to hire a commander with personality 6 and leadership 3, and only one warrior respects him ( , and 2 < 3, but , and 5 \u2265 3) . Then warrior with personality 4 leaves, and when Vova tries to hire that commander again, there are no warriors who respect him.",
    "topics": [
      "bitmasks",
      "data structures",
      "trees"
    ],
    "id": "817E"
  },
  {
    "title": "Imbalanced Array",
    "url": "https://codeforces.com/problemset/problem/817/D",
    "history": "You are given an array a consisting of n elements. The imbalance value of some subsegment of this array is the difference between the maximum and minimum element from this segment. The imbalance value of the array is the sum of imbalance values of all subsegments of this array. For example, the imbalance value of array [ 1, 4, 1] is 9, because there are 6 different subsegments of this array: [ 1] ( from index 1 to index 1) , imbalance value is 0; [ 1, 4] ( from index 1 to index 2) , imbalance value is 3; [ 1, 4, 1] ( from index 1 to index 3) , imbalance value is 3; [ 4] ( from index 2 to index 2) , imbalance value is 0; [ 4, 1] ( from index 2 to index 3) , imbalance value is 3; [ 1] ( from index 3 to index 3) , imbalance value is 0; You have to determine the imbalance value of the array a.",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 106) \u2014 size of the array a. The second line contains n integers a1, a2. . . an ( 1 \u2264 ai \u2264 106) \u2014 elements of the array.",
    "output": "Print one integer \u2014 the imbalance value of a.",
    "note": "",
    "topics": [
      "data structures",
      "divide and conquer",
      "dsu",
      "sortings"
    ],
    "id": "817D"
  },
  {
    "title": "Karen and Coffee",
    "url": "https://codeforces.com/problemset/problem/816/B",
    "history": "To stay woke and attentive during classes, Karen needs some coffee! Karen, a coffee aficionado, wants to know the optimal temperature for brewing the perfect cup of coffee. Indeed, she has spent some time reading several recipe books, including the universally acclaimed \" The Art of the Covfefe\" . She knows n coffee recipes. The i- th recipe suggests that coffee should be brewed between li and ri degrees, inclusive, to achieve the optimal taste. Karen thinks that a temperature is admissible if at least k recipes recommend it. Karen has a rather fickle mind, and so she asks q questions. In each question, given that she only wants to prepare coffee with a temperature between a and b, inclusive, can you tell her how many admissible integer temperatures fall within the range?",
    "input": "The first line of input contains three integers, n, k ( 1 \u2264 k \u2264 n \u2264 200000) , and q ( 1 \u2264 q \u2264 200000) , the number of recipes, the minimum number of recipes a certain temperature must be recommended by to be admissible, and the number of questions Karen has, respectively. The next n lines describe the recipes. Specifically, the i- th line among these contains two integers li and ri ( 1 \u2264 li \u2264 ri \u2264 200000) , describing that the i- th recipe suggests that the coffee be brewed between li and ri degrees, inclusive. The next q lines describe the questions. Each of these lines contains a and b, ( 1 \u2264 a \u2264 b \u2264 200000) , describing that she wants to know the number of admissible integer temperatures between a and b degrees, inclusive.",
    "output": "For each question, output a single integer on a line by itself, the number of admissible integer temperatures between a and b degrees, inclusive.",
    "note": "In the first test case, Karen knows 3 recipes. The first one recommends brewing the coffee between 91 and 94 degrees, inclusive. The second one recommends brewing the coffee between 92 and 97 degrees, inclusive. The third one recommends brewing the coffee between 97 and 99 degrees, inclusive. A temperature is admissible if at least 2 recipes recommend it. She asks 4 questions. In her first question, she wants to know the number of admissible integer temperatures between 92 and 94 degrees, inclusive. There are 3: 92, 93 and 94 degrees are all admissible. In her second question, she wants to know the number of admissible integer temperatures between 93 and 97 degrees, inclusive. There are 3: 93, 94 and 97 degrees are all admissible. In her third question, she wants to know the number of admissible integer temperatures between 95 and 96 degrees, inclusive. There are none. In her final question, she wants to know the number of admissible integer temperatures between 90 and 100 degrees, inclusive. There are 4: 92, 93, 94 and 97 degrees are all admissible. In the second test case, Karen knows 2 recipes. The first one, \" wikiHow to make Cold Brew Coffee\" , recommends brewing the coffee at exactly 1 degree. The second one, \" What good is coffee that isn' t brewed at at least 36. 3306 times the temperature of the surface of the sun? \" , recommends brewing the coffee at exactly 200000 degrees. A temperature is admissible if at least 1 recipe recommends it. In her first and only question, she wants to know the number of admissible integer temperatures that are actually reasonable. There are none.",
    "topics": [
      "binary search",
      "data structures",
      "implementation"
    ],
    "id": "816B"
  },
  {
    "title": "Karen and Cards",
    "url": "https://codeforces.com/problemset/problem/815/D",
    "history": "Karen just got home from the supermarket, and is getting ready to go to sleep. After taking a shower and changing into her pajamas, she looked at her shelf and saw an album. Curious, she opened it and saw a trading card collection. She recalled that she used to play with those cards as a child, and, although she is now grown- up, she still wonders a few things about it. Each card has three characteristics: strength, defense and speed. The values of all characteristics of all cards are positive integers. The maximum possible strength any card can have is p, the maximum possible defense is q and the maximum possible speed is r. There are n cards in her collection. The i- th card has a strength ai, defense bi and speed ci, respectively. A card beats another card if at least two of its characteristics are strictly greater than the corresponding characteristics of the other card. She now wonders how many different cards can beat all the cards in her collection. Two cards are considered different if at least one of their characteristics have different values.",
    "input": "The first line of input contains four integers, n, p, q and r ( 1 \u2264 n, p, q, r \u2264 500000) , the number of cards in the collection, the maximum possible strength, the maximum possible defense, and the maximum possible speed, respectively. The next n lines each contain three integers. In particular, the i- th line contains ai, bi and ci ( 1 \u2264 ai \u2264 p, 1 \u2264 bi \u2264 q, 1 \u2264 ci \u2264 r) , the strength, defense and speed of the i- th collection card, respectively.",
    "output": "Output a single integer on a line by itself, the number of different cards that can beat all the cards in her collection.",
    "note": "In the first test case, the maximum possible strength is 4, the maximum possible defense is 4 and the maximum possible speed is 5. Karen has three cards: The first card has strength 2, defense 2 and speed 5. The second card has strength 1, defense 3 and speed 4. The third card has strength 4, defense 1 and speed 1. There are 10 cards that beat all the cards here: The card with strength 3, defense 3 and speed 5. The card with strength 3, defense 4 and speed 2. The card with strength 3, defense 4 and speed 3. The card with strength 3, defense 4 and speed 4. The card with strength 3, defense 4 and speed 5. The card with strength 4, defense 3 and speed 5. The card with strength 4, defense 4 and speed 2. The card with strength 4, defense 4 and speed 3. The card with strength 4, defense 4 and speed 4. The card with strength 4, defense 4 and speed 5. In the second test case, the maximum possible strength is 10, the maximum possible defense is 10 and the maximum possible speed is 10. Karen has five cards, all with strength 1, defense 1 and speed 1. Any of the 972 cards which have at least two characteristics greater than 1 can beat all of the cards in her collection.",
    "topics": [
      "binary search",
      "combinatorics",
      "data structures",
      "geometry"
    ],
    "id": "815D"
  },
  {
    "title": "Bipartite Checking",
    "url": "https://codeforces.com/problemset/problem/813/F",
    "history": "You are given an undirected graph consisting of n vertices. Initially there are no edges in the graph. Also you are given q queries, each query either adds one undirected edge to the graph or removes it. After each query you have to check if the resulting graph is bipartite ( that is, you can paint all vertices of the graph into two colors so that there is no edge connecting two vertices of the same color) .",
    "input": "The first line contains two integers n and q ( 2 \u2264 n, q \u2264 100000) . Then q lines follow. ith line contains two numbers xi and yi ( 1 \u2264 xi < yi \u2264 n) . These numbers describe ith query: if there is an edge between vertices xi and yi, then remove it, otherwise add it.",
    "output": "Print q lines. ith line must contain YES if the graph is bipartite after ith query, and NO otherwise.",
    "note": "",
    "topics": [
      "data structures",
      "dsu",
      "graphs"
    ],
    "id": "813F"
  },
  {
    "title": "Army Creation",
    "url": "https://codeforces.com/problemset/problem/813/E",
    "history": "As you might remember from our previous rounds, Vova really likes computer games. Now he is playing a strategy game known as Rage of Empires. In the game Vova can hire n different warriors; ith warrior has the type ai. Vova wants to create a balanced army hiring some subset of warriors. An army is called balanced if for each type of warrior present in the game there are not more than k warriors of this type in the army. Of course, Vova wants his army to be as large as possible. To make things more complicated, Vova has to consider q different plans of creating his army. ith plan allows him to hire only warriors whose numbers are not less than li and not greater than ri. Help Vova to determine the largest size of a balanced army for each plan. Be aware that the plans are given in a modified way. See input section for details.",
    "input": "The first line contains two integers n and k ( 1 \u2264 n, k \u2264 100000) . The second line contains n integers a1, a2, . . . an ( 1 \u2264 ai \u2264 100000) . The third line contains one integer q ( 1 \u2264 q \u2264 100000) . Then q lines follow. ith line contains two numbers xi and yi which represent ith plan ( 1 \u2264 xi, yi \u2264 n) . You have to keep track of the answer to the last plan ( let' s call it last) . In the beginning last = 0. Then to restore values of li and ri for the ith plan, you have to do the following: li = ( ( xi + last) mod n) + 1; ri = ( ( yi + last) mod n) + 1; If li > ri, swap li and ri.",
    "output": "Print q numbers. ith number must be equal to the maximum size of a balanced army when considering ith plan.",
    "note": "In the first example the real plans are: 1 2 1 6 6 6 2 4 4 6",
    "topics": [
      "binary search",
      "data structures"
    ],
    "id": "813E"
  },
  {
    "title": "Vladik and Entertaining Flags",
    "url": "https://codeforces.com/problemset/problem/811/E",
    "history": "In his spare time Vladik estimates beauty of the flags. Every flag could be represented as the matrix n \u00d7 m which consists of positive integers. Let' s define the beauty of the flag as number of components in its matrix. We call component a set of cells with same numbers and between any pair of cells from that set there exists a path through adjacent cells from same component. Here is the example of the partitioning some flag matrix into components: But this time he decided to change something in the process. Now he wants to estimate not the entire flag, but some segment. Segment of flag can be described as a submatrix of the flag matrix with opposite corners at ( 1, l) and ( n, r) , where conditions 1 \u2264 l \u2264 r \u2264 m are satisfied. Help Vladik to calculate the beauty for some segments of the given flag.",
    "input": "First line contains three space- separated integers n, m, q ( 1 \u2264 n \u2264 10, 1 \u2264 m, q \u2264 105) \u2014 dimensions of flag matrix and number of segments respectively. Each of next n lines contains m space- separated integers \u2014 description of flag matrix. All elements of flag matrix is positive integers not exceeding 106. Each of next q lines contains two space- separated integers l, r ( 1 \u2264 l \u2264 r \u2264 m) \u2014 borders of segment which beauty Vladik wants to know.",
    "output": "For each segment print the result on the corresponding line.",
    "note": "Partitioning on components for every segment from first test case:",
    "topics": [
      "data structures",
      "dsu",
      "graphs"
    ],
    "id": "811E"
  },
  {
    "title": "Hitchhiking in the Baltic States",
    "url": "https://codeforces.com/problemset/problem/809/D",
    "history": "Leha and Noora decided to go on a trip in the Baltic States. As you know from the previous problem, Leha has lost his car on the parking of the restaurant. Unfortunately, requests to the watchman didn' t helped hacker find the car, so friends decided to go hitchhiking. In total, they intended to visit n towns. However it turned out that sights in i- th town are open for visitors only on days from li to ri. What to do? Leha proposed to choose for each town i a day, when they will visit this town, i. e any integer xi in interval [ li, ri] . After that Noora choses some subsequence of towns id1, id2, . . . , idk, which friends are going to visit, that at first they are strictly increasing, i. e idi < idi + 1 is for all integers i from 1 to k - 1, but also the dates of the friends visits are strictly increasing, i. e xidi < xidi + 1 is true for all integers i from 1 to k - 1. Please help Leha and Noora in choosing such xi for each town i, and such subsequence of towns id1, id2, . . . , idk, so that friends can visit maximal number of towns. You may assume, that Leha and Noora can start the trip any day.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 3\u00b7105) denoting the number of towns Leha and Noora intended to visit. Each line i of the n subsequent lines contains two integers li, ri ( 1 \u2264 li \u2264 ri \u2264 109) , denoting that sights in i- th town are open for visitors on any day .",
    "output": "Print a single integer denoting the maximal number of towns, that Leha and Noora can visit.",
    "note": "Consider the first example. Let' s take this plan: let' s visit the sight in the second town on the first day, in the third town on the third day and in the fifth town on the fourth. That' s would be the optimal answer.",
    "topics": [
      "data structures",
      "dp"
    ],
    "id": "809D"
  },
  {
    "title": "Array Division",
    "url": "https://codeforces.com/problemset/problem/808/D",
    "history": "Vasya has an array a consisting of positive integer numbers. Vasya wants to divide this array into two non- empty consecutive parts ( the prefix and the suffix) so that the sum of all elements in the first part equals to the sum of elements in the second part. It is not always possible, so Vasya will move some element before dividing the array ( Vasya will erase some element and insert it into an arbitrary position) . Inserting an element in the same position he was erased from is also considered moving. Can Vasya divide the array after choosing the right element to move and its new position?",
    "input": "The first line contains single integer n ( 1 \u2264 n \u2264 100000) \u2014 the size of the array. The second line contains n integers a1, a2. . . an ( 1 \u2264 ai \u2264 109) \u2014 the elements of the array.",
    "output": "Print YES if Vasya can divide the array after moving one element. Otherwise print NO.",
    "note": "In the first example Vasya can move the second element to the end of the array. In the second example no move can make the division possible. In the third example Vasya can move the fourth element by one position to the left.",
    "topics": [
      "binary search",
      "data structures",
      "implementation"
    ],
    "id": "808D"
  },
  {
    "title": "Average Sleep Time",
    "url": "https://codeforces.com/problemset/problem/808/B",
    "history": "It' s been almost a week since Polycarp couldn' t get rid of insomnia. And as you may already know, one week in Berland lasts k days! When Polycarp went to a doctor with his problem, the doctor asked him about his sleeping schedule ( more specifically, the average amount of hours of sleep per week) . Luckily, Polycarp kept records of sleep times for the last n days. So now he has a sequence a1, a2, . . . , an, where ai is the sleep time on the i- th day. The number of records is so large that Polycarp is unable to calculate the average value by himself. Thus he is asking you to help him with the calculations. To get the average Polycarp is going to consider k consecutive days as a week. So there will be n - k + 1 weeks to take into consideration. For example, if k = 2, n = 3 and a = [ 3, 4, 7] , then the result is . You should write a program which will calculate average sleep times of Polycarp over all weeks.",
    "input": "The first line contains two integer numbers n and k ( 1 \u2264 k \u2264 n \u2264 2\u00b7105) . The second line contains n integer numbers a1, a2, . . . , an ( 1 \u2264 ai \u2264 105) .",
    "output": "Output average sleeping time over all weeks. The answer is considered to be correct if its absolute or relative error does not exceed 10 - 6. In particular, it is enough to output real number with at least 6 digits after the decimal point.",
    "note": "In the third example there are n - k + 1 = 7 weeks, so the answer is sums of all weeks divided by 7.",
    "topics": [
      "data structures",
      "implementation",
      "math"
    ],
    "id": "808B"
  },
  {
    "title": "Periodic RMQ Problem",
    "url": "https://codeforces.com/problemset/problem/803/G",
    "history": "You are given an array a consisting of positive integers and q queries to this array. There are two types of queries: 1 l r x \u2014 for each index i such that l \u2264 i \u2264 r set ai = x. 2 l r \u2014 find the minimum among such ai that l \u2264 i \u2264 r. We decided that this problem is too easy. So the array a is given in a compressed form: there is an array b consisting of n elements and a number k in the input, and before all queries a is equal to the concatenation of k arrays b ( so the size of a is n\u00b7k) .",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 105, 1 \u2264 k \u2264 104) . The second line contains n integers \u2014 elements of the array b ( 1 \u2264 bi \u2264 109) . The third line contains one integer q ( 1 \u2264 q \u2264 105) . Then q lines follow, each representing a query. Each query is given either as 1 l r x \u2014 set all elements in the segment from l till r ( including borders) to x ( 1 \u2264 l \u2264 r \u2264 n\u00b7k, 1 \u2264 x \u2264 109) or as 2 l r \u2014 find the minimum among all elements in the segment from l till r ( 1 \u2264 l \u2264 r \u2264 n\u00b7k) .",
    "output": "For each query of type 2 print the answer to this query \u2014 the minimum on the corresponding segment.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": "803G"
  },
  {
    "title": "April Fools' Problem (hard)",
    "url": "https://codeforces.com/problemset/problem/802/O",
    "history": "The plans for HC2 are rather far- fetched: we are just over 500 000 days away from HC2 3387, for example, and accordingly we are planning to have a couple hundred thousand problems in that edition ( we hope that programming contests will become wildly more popular) . The marmots need to get to work, and they could use a good plan. . .",
    "input": "Same as the medium version, but the limits have changed: 1 \u2264 k \u2264 n \u2264 500 000.",
    "output": "Same as the medium version.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "flows"
    ],
    "id": "802O"
  },
  {
    "title": "Heidi and Library (medium)",
    "url": "https://codeforces.com/problemset/problem/802/B",
    "history": "Whereas humans nowadays read fewer and fewer books on paper, book readership among marmots has surged. Heidi has expanded the library and is now serving longer request sequences.",
    "input": "Same as the easy version, but the limits have changed: 1 \u2264 n, k \u2264 400 000.",
    "output": "Same as the easy version.",
    "note": "",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "802B"
  },
  {
    "title": "Cut the pie",
    "url": "https://codeforces.com/problemset/problem/799/G",
    "history": "Arkady reached the n- th level in Township game, so Masha decided to bake a pie for him! Of course, the pie has a shape of convex n- gon, i. e. a polygon with n vertices. Arkady decided to cut the pie in two equal in area parts by cutting it by a straight line, so that he can eat one of them and give the other to Masha. There is a difficulty because Arkady has already put a knife at some point of the pie, so he now has to cut the pie by a straight line passing trough this point. Help Arkady: find a line that passes through the point Arkady has put a knife into and cuts the pie into two parts of equal area, or determine that it' s impossible. Your program has to quickly answer many queries with the same pie, but different points in which Arkady puts a knife.",
    "input": "The first line contains two integers n and q ( 3 \u2264 n \u2264 104, 1 \u2264 q \u2264 105) \u2014 the number of vertices in the pie and the number of queries. n line follow describing the polygon vertices in clockwise order. The i- th of these line contains two integers xi and yi ( - 106 \u2264 xi, yi \u2264 106) \u2014 the coordinates of the i- th vertex. It is guaranteed that the polygon is strictly convex, in particular, no three vertices line on the same line. An empty line follows. q lines follow describing the query points. The i- th of these lines contain two integers xi and yi ( - 106 \u2264 xi, yi \u2264 106) \u2014 the coordinates of the point in which Arkady puts the knife in the i- th query. In is guaranteed that in each query the given point is strictly inside the polygon, in particular, is not on its edges.",
    "output": "For each query print single integer \u2014 the polar angle of the line that is the answer for the corresponding query, in radians. The angle should be in the segment [ 0; \u03c0] , the angles are measured from the direction of OX axis in counter- clockwise order. For example, the polar angle of the OY axis is . If there is no answer in that query, print - 1. If there are several answers, print any of them. Your answer is considered correct if the difference between the areas of the parts divided by the total area of the polygon doesn' t exceed 10 - 4 by absolute value. In other words, if a and b are the areas of the parts after the cut, then your answer is correct if and only of .",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "geometry"
    ],
    "id": "799G"
  },
  {
    "title": "Beautiful fountains rows",
    "url": "https://codeforces.com/problemset/problem/799/F",
    "history": "Butler Ostin wants to show Arkady that rows of odd number of fountains are beautiful, while rows of even number of fountains are not. The butler wants to show Arkady n gardens. Each garden is a row of m cells, the i- th garden has one fountain in each of the cells between li and ri inclusive, and there are no more fountains in that garden. The issue is that some of the gardens contain even number of fountains, it is wrong to show them to Arkady. Ostin wants to choose two integers a \u2264 b and show only part of each of the gardens that starts at cell a and ends at cell b. Of course, only such segments suit Ostin that each garden has either zero or odd number of fountains on this segment. Also, it is necessary that at least one garden has at least one fountain on the segment from a to b. Help Ostin to find the total length of all such segments, i. e. sum up the value ( b - a + 1) for each suitable pair ( a, b) .",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 2\u00b7105) \u2014 the number of gardens and the length of each garden. n lines follow. The i- th of these lines contains two integers li and ri ( 1 \u2264 li \u2264 ri \u2264 m) \u2014 the bounds of the segment that contains fountains in the i- th garden.",
    "output": "Print one integer: the total length of all suitable segments.",
    "note": "In the first example the following pairs suit Ostin: ( a, b) : ( 1, 2) , ( 1, 4) , ( 1, 5) , ( 2, 2) , ( 2, 4) , ( 2, 5) , ( 3, 3) , ( 4, 4) , ( 4, 5) . In the second example the following pairs suit Ostin: ( a, b) : ( 1, 2) , ( 1, 5) , ( 2, 2) , ( 2, 5) , ( 3, 3) , ( 4, 4) , ( 4, 6) , ( 5, 5) , ( 6, 6) .",
    "topics": [
      "data structures"
    ],
    "id": "799F"
  },
  {
    "title": "Aquarium decoration",
    "url": "https://codeforces.com/problemset/problem/799/E",
    "history": "Arkady and Masha want to choose decorations for thier aquarium in Fishdom game. They have n decorations to choose from, each of them has some cost. To complete a task Arkady and Masha need to choose exactly m decorations from given, and they want to spend as little money as possible. There is one difficulty: Masha likes some a of the given decorations, Arkady likes some b of the given decorations. Some decorations may be liked by both Arkady and Masha, or not be liked by both. The friends want to choose such decorations so that each of them likes at least k decorations among the chosen. Help Masha and Arkady find the minimum sum of money they need to spend.",
    "input": "The first line contains three integers n, m and k ( 1 \u2264 n \u2264 200000, 1 \u2264 m \u2264 n, 1 \u2264 k \u2264 n) \u2014 the number of decorations, how many decorations the friends should choose, how many decorations each of them should like among the chosen. The second line contains n integers c1, c2, . . . , cn ( 1 \u2264 ci \u2264 109) \u2014 decorations costs. The third line contains single integer a ( 1 \u2264 a \u2264 n) \u2014 the number of decorations liked by Masha. The fourth line contains a distinct integers x1, x2, . . . , xa ( 1 \u2264 xi \u2264 n) \u2014 the ids of decorations liked by Masha. The next two lines describe decorations liked by Arkady in the same format.",
    "output": "Print single integer: the minimum sum of money the friends should spend to fulfill all constraints. If it is not possible, print - 1.",
    "note": "In the first example the only possible variant to choose 3 decorations having all conditions satisfied is to choose decorations 1, 2, 3. In the second example friends can choose decoration 4 instead of decoration 3, because this one is one coin cheaper. In the third example it' s not possible to choose 2 decorations in a way that both are liked by both Masha and Arkady.",
    "topics": [
      "data structures",
      "greedy",
      "two pointers"
    ],
    "id": "799E"
  },
  {
    "title": "Fountains",
    "url": "https://codeforces.com/problemset/problem/799/C",
    "history": "Arkady plays Gardenscapes a lot. Arkady wants to build two new fountains. There are n available fountains, for each fountain its beauty and cost are known. There are two types of money in the game: coins and diamonds, so each fountain cost can be either in coins or diamonds. No money changes between the types are allowed. Help Arkady to find two fountains with maximum total beauty so that he can buy both at the same time.",
    "input": "The first line contains three integers n, c and d ( 2 \u2264 n \u2264 100 000, 0 \u2264 c, d \u2264 100 000) \u2014 the number of fountains, the number of coins and diamonds Arkady has. The next n lines describe fountains. Each of these lines contain two integers bi and pi ( 1 \u2264 bi, pi \u2264 100 000) \u2014 the beauty and the cost of the i- th fountain, and then a letter \" C\" or \" D\" , describing in which type of money is the cost of fountain i: in coins or in diamonds, respectively.",
    "output": "Print the maximum total beauty of exactly two fountains Arkady can build. If he can' t build two fountains, print 0.",
    "note": "In the first example Arkady should build the second fountain with beauty 4, which costs 3 coins. The first fountain he can' t build because he don' t have enough coins. Also Arkady should build the third fountain with beauty 5 which costs 6 diamonds. Thus the total beauty of built fountains is 9. In the second example there are two fountains, but Arkady can' t build both of them, because he needs 5 coins for the first fountain, and Arkady has only 4 coins.",
    "topics": [
      "binary search",
      "data structures",
      "implementation"
    ],
    "id": "799C"
  },
  {
    "title": "T-shirt buying",
    "url": "https://codeforces.com/problemset/problem/799/B",
    "history": "A new pack of n t- shirts came to a shop. Each of the t- shirts is characterized by three integers pi, ai and bi, where pi is the price of the i- th t- shirt, ai is front color of the i- th t- shirt and bi is back color of the i- th t- shirt. All values pi are distinct, and values ai and bi are integers from 1 to 3. m buyers will come to the shop. Each of them wants to buy exactly one t- shirt. For the j- th buyer we know his favorite color cj. A buyer agrees to buy a t- shirt, if at least one side ( front or back) is painted in his favorite color. Among all t- shirts that have colors acceptable to this buyer he will choose the cheapest one. If there are no such t- shirts, the buyer won' t buy anything. Assume that the buyers come one by one, and each buyer is served only after the previous one is served. You are to compute the prices each buyer will pay for t- shirts.",
    "input": "The first line contains single integer n ( 1 \u2264 n \u2264 200 000) \u2014 the number of t- shirts. The following line contains sequence of integers p1, p2, . . . , pn ( 1 \u2264 pi \u2264 1 000 000 000) , where pi equals to the price of the i- th t- shirt. The following line contains sequence of integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 3) , where ai equals to the front color of the i- th t- shirt. The following line contains sequence of integers b1, b2, . . . , bn ( 1 \u2264 bi \u2264 3) , where bi equals to the back color of the i- th t- shirt. The next line contains single integer m ( 1 \u2264 m \u2264 200 000) \u2014 the number of buyers. The following line contains sequence c1, c2, . . . , cm ( 1 \u2264 cj \u2264 3) , where cj equals to the favorite color of the j- th buyer. The buyers will come to the shop in the order they are given in the input. Each buyer is served only after the previous one is served.",
    "output": "Print to the first line m integers \u2014 the j- th integer should be equal to the price of the t- shirt which the j- th buyer will buy. If the j- th buyer won' t buy anything, print - 1.",
    "note": "",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "799B"
  },
  {
    "title": "Mike and code of a permutation",
    "url": "https://codeforces.com/problemset/problem/798/E",
    "history": "Mike has discovered a new way to encode permutations. If he has a permutation P = [ p1, p2, . . . , pn] , he will encode it in the following way: Denote by A = [ a1, a2, . . . , an] a sequence of length n which will represent the code of the permutation. For each i from 1 to n sequentially, he will choose the smallest unmarked j ( 1 \u2264 j \u2264 n) such that pi < pj and will assign to ai the number j ( in other words he performs ai = j) and will mark j. If there is no such j, he' ll assign to ai the number - 1 ( he performs ai = - 1) . Mike forgot his original permutation but he remembers its code. Your task is simple: find any permutation such that its code is the same as the code of Mike' s original permutation. You may assume that there will always be at least one valid permutation.",
    "input": "The first line contains single integer n ( 1 \u2264 n \u2264 500 000) \u2014 length of permutation. The second line contains n space- separated integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 n or ai = - 1) \u2014 the code of Mike' s permutation. You may assume that all positive values from A are different.",
    "output": "In first and only line print n numbers p1, p2, . . . , pn ( 1 \u2264 pi \u2264 n) \u2014 a permutation P which has the same code as the given one. Note that numbers in permutation are distinct.",
    "note": "For the permutation from the first example: i = 1, the smallest j is 2 because p2 = 6 > p1 = 2. i = 2, there is no j because p2 = 6 is the greatest element in the permutation. i = 3, the smallest j is 1 because p1 = 2 > p3 = 1. i = 4, the smallest j is 5 ( 2 was already marked) because p5 = 5 > p4 = 4. i = 5, there is no j because 2 is already marked. i = 6, the smallest j is 4 because p4 = 4 > p6 = 3.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "graphs",
      "sortings"
    ],
    "id": "798E"
  },
  {
    "title": "Mice and Holes",
    "url": "https://codeforces.com/problemset/problem/797/F",
    "history": "One day Masha came home and noticed n mice in the corridor of her flat. Of course, she shouted loudly, so scared mice started to run to the holes in the corridor. The corridor can be represeted as a numeric axis with n mice and m holes on it. ith mouse is at the coordinate xi, and jth hole \u2014 at coordinate pj. jth hole has enough room for cj mice, so not more than cj mice can enter this hole. What is the minimum sum of distances that mice have to go through so that they all can hide in the holes? If ith mouse goes to the hole j, then its distance is | xi - pj| . Print the minimum sum of distances.",
    "input": "The first line contains two integer numbers n, m ( 1 \u2264 n, m \u2264 5000) \u2014 the number of mice and the number of holes, respectively. The second line contains n integers x1, x2, . . . , xn ( - 109 \u2264 xi \u2264 109) , where xi is the coordinate of ith mouse. Next m lines contain pairs of integer numbers pj, cj ( - 109 \u2264 pj \u2264 109, 1 \u2264 cj \u2264 5000) , where pj is the coordinate of jth hole, and cj is the maximum number of mice that can hide in the hole j.",
    "output": "Print one integer number \u2014 the minimum sum of distances. If there is no solution, print - 1 instead.",
    "note": "",
    "topics": [
      "data structures",
      "dp",
      "greedy",
      "sortings"
    ],
    "id": "797F"
  },
  {
    "title": "Array Queries",
    "url": "https://codeforces.com/problemset/problem/797/E",
    "history": "a is an array of n positive integers, all of which are not greater than n. You have to process q queries to this array. Each query is represented by two numbers p and k. Several operations are performed in each query; each operation changes p to p + ap + k. There operations are applied until p becomes greater than n. The answer to the query is the number of performed operations.",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 100000) . The second line contains n integers \u2014 elements of a ( 1 \u2264 ai \u2264 n for each i from 1 to n) . The third line containts one integer q ( 1 \u2264 q \u2264 100000) . Then q lines follow. Each line contains the values of p and k for corresponding query ( 1 \u2264 p, k \u2264 n) .",
    "output": "Print q integers, ith integer must be equal to the answer to ith query.",
    "note": "Consider first example: In first query after first operation p = 3, after second operation p = 5. In next two queries p is greater than n after the first operation.",
    "topics": [
      "brute force",
      "data structures",
      "dp"
    ],
    "id": "797E"
  },
  {
    "title": "Broken BST",
    "url": "https://codeforces.com/problemset/problem/797/D",
    "history": "Let T be arbitrary binary tree \u2014 tree, every vertex of which has no more than two children. Given tree is rooted, so there exists only one vertex which doesn' t have a parent \u2014 it' s the root of a tree. Every vertex has an integer number written on it. Following algorithm is run on every value from the tree T: Set pointer to the root of a tree. Return success if the value in the current vertex is equal to the number you are looking for Go to the left child of the vertex if the value in the current vertex is greater than the number you are looking for Go to the right child of the vertex if the value in the current vertex is less than the number you are looking for Return fail if you try to go to the vertex that doesn' t exist Here is the pseudo- code of the described algorithm: bool find( TreeNode t, int x) if ( t = = null) return false; if ( t. value = = x) return true; if ( x < t. value) return find( t. left, x) ; else return find( t. right, x) ; find( root, x) ; The described algorithm works correctly if the tree is binary search tree ( i. e. for each node the values of left subtree are less than the value in the node, the values of right subtree are greater than the value in the node) . But it can return invalid result if tree is not a binary search tree. Since the given tree is not necessarily a binary search tree, not all numbers can be found this way. Your task is to calculate, how many times the search will fail being running on every value from the tree. If the tree has multiple vertices with the same values on them then you should run algorithm on every one of them separately.",
    "input": "First line contains integer number n ( 1 \u2264 n \u2264 105) \u2014 number of vertices in the tree. Each of the next n lines contains 3 numbers v, l, r ( 0 \u2264 v \u2264 109) \u2014 value on current vertex, index of the left child of the vertex and index of the right child of the vertex, respectively. If some child doesn' t exist then number - 1 is set instead. Note that different vertices of the tree may contain the same values.",
    "output": "Print number of times when search algorithm will fail.",
    "note": "In the example the root of the tree in vertex 2. Search of numbers 5 and 15 will return fail because on the first step algorithm will choose the subtree which doesn' t contain numbers you are looking for.",
    "topics": [
      "data structures",
      "dfs and similar"
    ],
    "id": "797D"
  },
  {
    "title": "Minimal string",
    "url": "https://codeforces.com/problemset/problem/797/C",
    "history": "Petya recieved a gift of a string s with length up to 105 characters for his birthday. He took two more empty strings t and u and decided to play a game. This game has two possible moves: Extract the first character of s and append t with this character. Extract the last character of t and append u with this character. Petya wants to get strings s and t empty and string u lexicographically minimal. You should write a program that will help Petya win the game.",
    "input": "First line contains non- empty string s ( 1 \u2264 | s| \u2264 105) , consisting of lowercase English letters.",
    "output": "Print resulting string u.",
    "note": "",
    "topics": [
      "data structures",
      "greedy",
      "strings"
    ],
    "id": "797C"
  },
  {
    "title": "Sequence Recovery",
    "url": "https://codeforces.com/problemset/problem/796/F",
    "history": "Zane once had a good sequence a consisting of n integers a1, a2, . . . , an \u2014 but he has lost it. A sequence is said to be good if and only if all of its integers are non- negative and do not exceed 109 in value. However, Zane remembers having played around with his sequence by applying m operations to it. There are two types of operations: 1. Find the maximum value of integers with indices i such that l \u2264 i \u2264 r, given l and r. 2. Assign d as the value of the integer with index k, given k and d. After he finished playing, he restored his sequence to the state it was before any operations were applied. That is, sequence a was no longer affected by the applied type 2 operations. Then, he lost his sequence at some time between now and then. Fortunately, Zane remembers all the operations and the order he applied them to his sequence, along with the distinct results of all type 1 operations. Moreover, among all good sequences that would produce the same results when the same operations are applied in the same order, he knows that his sequence a has the greatest cuteness. We define cuteness of a sequence as the bitwise OR result of all integers in such sequence. For example, the cuteness of Zane' s sequence a is a1 OR a2 OR . . . OR an. Zane understands that it might not be possible to recover exactly the lost sequence given his information, so he would be happy to get any good sequence b consisting of n integers b1, b2, . . . , bn that: 1. would give the same results when the same operations are applied in the same order, and2. has the same cuteness as that of Zane' s original sequence a. If there is such a sequence, find it. Otherwise, it means that Zane must have remembered something incorrectly, which is possible.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 3\u00b7105) \u2014 the number of integers in Zane' s original sequence and the number of operations that have been applied to the sequence, respectively. The i- th of the following m lines starts with one integer ti ( ) \u2014 the type of the i- th operation. If the operation is type 1 ( ti = 1) , then three integers li, ri, and xi follow ( 1 \u2264 li \u2264 ri \u2264 n, 0 \u2264 xi \u2264 109) \u2014 the leftmost index to be considered, the rightmost index to be considered, and the maximum value of all integers with indices between li and ri, inclusive, respectively. If the operation is type 2 ( ti = 2) , then two integers ki and di follow ( 1 \u2264 ki \u2264 n, 0 \u2264 di \u2264 109) \u2014 meaning that the integer with index ki should become di after this operation. It is guaranteed that xi = \u0338 xj for all pairs ( i, j) where 1 \u2264 i < j \u2264 m and ti = tj = 1. The operations are given in the same order they were applied. That is, the operation that is given first was applied first, the operation that is given second was applied second, and so on.",
    "output": "If there does not exist a valid good sequence, print \" NO\" ( without quotation marks) in the first line. Otherwise, print \" YES\" ( without quotation marks) in the first line, and print n space- separated integers b1, b2, . . . , bn ( 0 \u2264 bi \u2264 109) in the second line. If there are multiple answers, print any of them.",
    "note": "In the first sample, it is easy to verify that this good sequence is valid. In particular, its cuteness is 19 OR 0 OR 0 OR 0 OR 1 = 19. In the second sample, the two operations clearly contradict, so there is no such good sequence.",
    "topics": [
      "bitmasks",
      "data structures",
      "greedy"
    ],
    "id": "796F"
  },
  {
    "title": "Bank Hacking",
    "url": "https://codeforces.com/problemset/problem/796/C",
    "history": "Although Inzane successfully found his beloved bone, Zane, his owner, has yet to return. To search for Zane, he would need a lot of money, of which he sadly has none. To deal with the problem, he has decided to hack the banks. There are n banks, numbered from 1 to n. There are also n - 1 wires connecting the banks. All banks are initially online. Each bank also has its initial strength: bank i has initial strength ai. Let us define some keywords before we proceed. Bank i and bank j are neighboring if and only if there exists a wire directly connecting them. Bank i and bank j are semi- neighboring if and only if there exists an online bank k such that bank i and bank k are neighboring and bank k and bank j are neighboring. When a bank is hacked, it becomes offline ( and no longer online) , and other banks that are neighboring or semi- neighboring to it have their strengths increased by 1. To start his plan, Inzane will choose a bank to hack first. Indeed, the strength of such bank must not exceed the strength of his computer. After this, he will repeatedly choose some bank to hack next until all the banks are hacked, but he can continue to hack bank x if and only if all these conditions are met: Bank x is online. That is, bank x is not hacked yet. Bank x is neighboring to some offline bank. The strength of bank x is less than or equal to the strength of Inzane' s computer. Determine the minimum strength of the computer Inzane needs to hack all the banks.",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 3\u00b7105) \u2014 the total number of banks. The second line contains n integers a1, a2, . . . , an ( - 109 \u2264 ai \u2264 109) \u2014 the strengths of the banks. Each of the next n - 1 lines contains two integers ui and vi ( 1 \u2264 ui, vi \u2264 n, ui = \u0338 vi) \u2014 meaning that there is a wire directly connecting banks ui and vi. It is guaranteed that the wires connect the banks in such a way that Inzane can somehow hack all the banks using a computer with appropriate strength.",
    "output": "Print one integer \u2014 the minimum strength of the computer Inzane needs to accomplish the goal.",
    "note": "In the first sample, Inzane can hack all banks using a computer with strength 5. Here is how: Initially, strengths of the banks are [ 1, 2, 3, 4, 5] . He hacks bank 5, then strengths of the banks become [ 1, 2, 4, 5, - ] . He hacks bank 4, then strengths of the banks become [ 1, 3, 5, - , - ] . He hacks bank 3, then strengths of the banks become [ 2, 4, - , - , - ] . He hacks bank 2, then strengths of the banks become [ 3, - , - , - , - ] . He completes his goal by hacking bank 1. In the second sample, Inzane can hack banks 4, 2, 3, 1, 5, 7, and 6, in this order. This way, he can hack all banks using a computer with strength 93.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "dp",
      "trees"
    ],
    "id": "796C"
  },
  {
    "title": "Leha and security system",
    "url": "https://codeforces.com/problemset/problem/794/F",
    "history": "Bankopolis, the city you already know, finally got a new bank opened! Unfortunately, its security system is not yet working fine. . . Meanwhile hacker Leha arrived in Bankopolis and decided to test the system! Bank has n cells for clients' money. A sequence from n numbers a1, a2, . . . , an describes the amount of money each client has. Leha wants to make requests to the database of the bank, finding out the total amount of money on some subsegments of the sequence and changing values of the sequence on some subsegments. Using a bug in the system, Leha can requests two types of queries to the database: 1 l r x y denoting that Leha changes each digit x to digit y in each element of sequence ai, for which l \u2264 i \u2264 r is holds. For example, if we change in number 11984381 digit 8 to 4, we get 11944341. It' s worth noting that Leha, in order to stay in the shadow, never changes digits in the database to 0, i. e. y = \u0338 0. 2 l r denoting that Leha asks to calculate and print the sum of such elements of sequence ai, for which l \u2264 i \u2264 r holds. As Leha is a white- hat hacker, he don' t want to test this vulnerability on a real database. You are to write a similar database for Leha to test.",
    "input": "The first line of input contains two integers n and q ( 1 \u2264 n \u2264 105, 1 \u2264 q \u2264 105) denoting amount of cells in the bank and total amount of queries respectively. The following line contains n integers a1, a2, . . . , an ( 1 \u2264 ai < 109) denoting the amount of money in each cell initially. These integers do not contain leading zeros. Each of the following q lines has one of the formats: 1 l r x y ( 1 \u2264 l \u2264 r \u2264 n, 0 \u2264 x \u2264 9, 1 \u2264 y \u2264 9) , denoting Leha asks to change each digit x on digit y for each element ai of the sequence for which l \u2264 i \u2264 r holds; 2 l r ( 1 \u2264 l \u2264 r \u2264 n) , denoting you have to calculate and print the sum of elements ai for which l \u2264 i \u2264 r holds.",
    "output": "For each second type query print a single number denoting the required sum.",
    "note": "Let' s look at the example testcase. Initially the sequence is [ 38, 43, 4, 12, 70] . After the first change each digit equal to 4 becomes 8 for each element with index in interval [ 1; 3] . Thus, the new sequence is [ 38, 83, 8, 12, 70] . The answer for the first sum' s query is the sum in the interval [ 2; 4] , which equal 83 + 8 + 12 = 103, so the answer to this query is 103. The sequence becomes [ 38, 83, 8, 12, 78] after the second change and [ 38, 73, 7, 12, 77] after the third. The answer for the second sum' s query is 38 + 73 + 7 + 12 + 77 = 207.",
    "topics": [
      "data structures"
    ],
    "id": "794F"
  },
  {
    "title": "Oleg and chess",
    "url": "https://codeforces.com/problemset/problem/793/G",
    "history": "Oleg the bank client solves an interesting chess problem: place on n \u00d7 n chessboard the maximum number of rooks so that they don' t beat each other. Of course, no two rooks can share the same cell. Remind that a rook standing in the cell ( a, b) beats a rook standing in the cell ( x, y) if and only if a = x or b = y. Unfortunately ( of fortunately? ) for Oleg the answer in this problem was always n, so the task bored Oleg soon. He decided to make it more difficult by removing some cells from the board. If a cell is deleted, Oleg can' t put a rook there, but rooks do beat each other \" through\" deleted cells. Oleg deletes the cells in groups, namely, he repeatedly choose a rectangle with sides parallel to the board sides and deletes all the cells inside the rectangle. Formally, if he chooses a rectangle, lower left cell of which has coordinates ( x1, y1) , and upper right cell of which has coordinates ( x2, y2) , then he deletes all such cells with coordinates ( x, y) that x1 \u2264 x \u2264 x2 and y1 \u2264 y \u2264 y2. It is guaranteed that no cell is deleted twice, i. e. the chosen rectangles do not intersect. This version of the problem Oleg can' t solve, and his friend Igor is busy at a conference, so he can' t help Oleg. You are the last hope for Oleg! Help him: given the size of the board and the deleted rectangles find the maximum possible number of rooks that could be placed on the board so that no two rooks beat each other.",
    "input": "The first line contains single integer n ( 1 \u2264 n \u2264 10000) \u2014 the size of the board. The second line contains single integer q ( 0 \u2264 q \u2264 10000) \u2014 the number of deleted rectangles. The next q lines contain the information about the deleted rectangles. Each of these lines contains four integers x1, y1, x2 and y2 ( 1 \u2264 x1 \u2264 x2 \u2264 n, 1 \u2264 y1 \u2264 y2 \u2264 n) \u2014 the coordinates of the lower left and the upper right cells of a deleted rectangle. If is guaranteed that the rectangles do not intersect.",
    "output": "In the only line print the maximum number of rooks Oleg can place on the board so that no two rooks beat each other.",
    "note": "Here is the board and the example of rooks placement in the first example:",
    "topics": [
      "data structures",
      "divide and conquer",
      "flows",
      "graph matchings"
    ],
    "id": "793G"
  },
  {
    "title": "Julia the snail",
    "url": "https://codeforces.com/problemset/problem/793/F",
    "history": "After hard work Igor decided to have some rest. He decided to have a snail. He bought an aquarium with a slippery tree trunk in the center, and put a snail named Julia into the aquarium. Igor noticed that sometimes Julia wants to climb onto the trunk, but can' t do it because the trunk is too slippery. To help the snail Igor put some ropes on the tree, fixing the lower end of the i- th rope on the trunk on the height li above the ground, and the higher end on the height ri above the ground. For some reason no two ropes share the same position of the higher end, i. e. all ri are distinct. Now Julia can move down at any place of the trunk, and also move up from the lower end of some rope to its higher end. Igor is proud of his work, and sometimes think about possible movements of the snail. Namely, he is interested in the following questions: \u00abSuppose the snail is on the trunk at height x now. What is the highest position on the trunk the snail can get on if it would never be lower than x or higher than y? \u00bb Please note that Julia can' t move from a rope to the trunk before it reaches the higher end of the rope, and Igor is interested in the highest position on the tree trunk. Igor is interested in many questions, and not always can answer them. Help him, write a program that answers these questions.",
    "input": "The first line contains single integer n ( 1 \u2264 n \u2264 100000) \u2014 the height of the trunk. The second line contains single integer m ( 1 \u2264 m \u2264 100000) \u2014 the number of ropes. The next m lines contain information about the ropes. The i- th of these lines contains two integers li and ri ( 1 \u2264 li \u2264 ri \u2264 n) \u2014 the heights on which the lower and the higher ends of the i- th rope are fixed, respectively. It is guaranteed that all ri are distinct. The next line contains single integer q ( 1 \u2264 q \u2264 100000) \u2014 the number of questions. The next q lines contain information about the questions. Each of these lines contain two integers x and y ( 1 \u2264 x \u2264 y \u2264 n) , where x is the height where Julia starts ( and the height Julia can' t get lower than) , and y is the height Julia can' t get higher than.",
    "output": "For each question print the maximum reachable for Julia height.",
    "note": "The picture of the first sample is on the left, the picture of the second sample is on the right. Ropes' colors are just for clarity, they don' t mean anything.",
    "topics": [
      "data structures",
      "divide and conquer",
      "dp"
    ],
    "id": "793F"
  },
  {
    "title": "Mages and Monsters",
    "url": "https://codeforces.com/problemset/problem/792/F",
    "history": "Vova plays a computer game known as Mages and Monsters. Vova' s character is a mage. Though as he has just started, his character knows no spells. Vova' s character can learn new spells during the game. Every spell is characterized by two values xi and yi \u2014 damage per second and mana cost per second, respectively. Vova doesn' t have to use a spell for an integer amount of seconds. More formally, if he uses a spell with damage x and mana cost y for z seconds, then he will deal x\u00b7z damage and spend y\u00b7z mana ( no rounding) . If there is no mana left ( mana amount is set in the start of the game and it remains the same at the beginning of every fight) , then character won' t be able to use any spells. It is prohibited to use multiple spells simultaneously. Also Vova can fight monsters. Every monster is characterized by two values tj and hj \u2014 monster kills Vova' s character in tj seconds and has hj health points. Mana refills after every fight ( or Vova' s character revives with full mana reserve) , so previous fights have no influence on further ones. Vova' s character kills a monster, if he deals hj damage to it in no more than tj seconds using his spells ( it is allowed to use more than one spell in a fight) and spending no more mana than he had at the beginning of the fight. If monster' s health becomes zero exactly in tj seconds ( it means that the monster and Vova' s character kill each other at the same time) , then Vova wins the fight. You have to write a program which can answer two types of queries: 1 x y \u2014 Vova' s character learns new spell which deals x damage per second and costs y mana per second. 2 t h \u2014 Vova fights the monster which kills his character in t seconds and has h health points. Note that queries are given in a different form. Also remember that Vova' s character knows no spells at the beginning of the game. For every query of second type you have to determine if Vova is able to win the fight with corresponding monster.",
    "input": "The first line contains two integer numbers q and m ( 2 \u2264 q \u2264 105, 1 \u2264 m \u2264 1012) \u2014 the number of queries and the amount of mana at the beginning of every fight. i- th of each next q lines contains three numbers ki, ai and bi ( 1 \u2264 ki \u2264 2, 1 \u2264 ai, bi \u2264 106) . Using them you can restore queries this way: let j be the index of the last query of second type with positive answer ( j = 0 if there were none of these) . If ki = 1, then character learns spell with x = ( ai + j) mod 106 + 1, y = ( bi + j) mod 106 + 1. If ki = 2, then you have to determine if Vova is able to win the fight against monster with t = ( ai + j) mod 106 + 1, h = ( bi + j) mod 106 + 1.",
    "output": "For every query of second type print YES if Vova is able to win the fight with corresponding monster and NO otherwise.",
    "note": "In first example Vova' s character at first learns the spell with 5 damage and 10 mana cost per second. Next query is a fight with monster which can kill character in 20 seconds and has 50 health points. Vova kills it in 10 seconds ( spending 100 mana) . Next monster has 52 health, so Vova can' t deal that much damage with only 100 mana.",
    "topics": [
      "data structures",
      "geometry"
    ],
    "id": "792F"
  },
  {
    "title": "New task",
    "url": "https://codeforces.com/problemset/problem/788/E",
    "history": "On the 228- th international Uzhlyandian Wars strategic game tournament teams from each country are called. The teams should consist of 5 participants. The team of Uzhlyandia will consist of soldiers, because there are no gamers. Masha is a new minister of defense and gaming. The prime duty of the minister is to calculate the efficiency of the Uzhlandian army. The army consists of n soldiers standing in a row, enumerated from 1 to n. For each soldier we know his skill in Uzhlyandian Wars: the i- th soldier' s skill is ai. It was decided that the team will consist of three players and two assistants. The skills of players should be same, and the assistants' skills should not be greater than the players' skill. Moreover, it is important for Masha that one of the assistants should stand in the row to the left of the players, and the other one should stand in the row to the right of the players. Formally, a team is five soldiers with indexes i, j, k, l, p, such that 1 \u2264 i < j < k < l < p \u2264 n and ai \u2264 aj = ak = al \u2265 ap. The efficiency of the army is the number of different teams Masha can choose. Two teams are considered different if there is such i such that the i- th soldier is a member of one team, but not a member of the other team. Initially, all players are able to be players. For some reasons, sometimes some soldiers become unable to be players. Sometimes some soldiers, that were unable to be players, become able to be players. At any time any soldier is able to be an assistant. Masha wants to control the efficiency of the army, so she asked you to tell her the number of different possible teams modulo 1000000007 ( 109 + 7) after each change.",
    "input": "The first line contains single integer n ( 1 \u2264 n \u2264 105) \u2014 the number of soldiers in Uzhlyandia. The second line contains n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) \u2014 the soldiers' skills. The third line contains single integer m ( 1 \u2264 m \u2264 105) \u2014 the number of changes. The next m lines contain the changes, each change is described with two integers t and x ( 1 \u2264 t \u2264 2, 1 \u2264 x \u2264 n) on a separate line. If t = 1, then the x- th soldier is unable to be a player after this change. If t = 2, then the x- th soldier is able to be a player after this change. It is guaranteed that before each query of the first type the soldier is able to be a player, and before each query of the second type the soldier is unable to be a player.",
    "output": "Print m integers \u2014 the number of distinct teams after each change. Print the answers modulo 1000000007 ( 109 + 7) .",
    "note": "In the first example, after the first change the only team consists of soldiers [ 1, 2, 4, 5, 6] . After the second change any five soldiers can form a team. In the first example after the first change the only team is soldiers [ 1, 2, 3, 7, 8] . After the second change the possible teams are: [ 1, 2, 3, 5, 7] , [ 1, 2, 3, 5, 8] , [ 1, 2, 3, 7, 8] , [ 1, 2, 5, 7, 8] , [ 1, 3, 5, 7, 8] , [ 2, 3, 5, 7, 8] . After the third change the possible teams are: [ 1, 3, 5, 7, 8] , [ 2, 3, 5, 7, 8] .",
    "topics": [
      "data structures"
    ],
    "id": "788E"
  },
  {
    "title": "ALT",
    "url": "https://codeforces.com/problemset/problem/786/E",
    "history": "ALT is a planet in a galaxy called \" Encore\" . Humans rule this planet but for some reason there' s no dog in their planet, so the people there are sad and depressed. Rick and Morty are universal philanthropists and they want to make people in ALT happy. ALT has n cities numbered from 1 to n and n - 1 bidirectional roads numbered from 1 to n - 1. One can go from any city to any other city using these roads. There are two types of people in ALT: Guardians. A guardian lives in a house alongside a road and guards the road. Citizens. A citizen lives in a house inside a city and works in an office in another city. Every person on ALT is either a guardian or a citizen and there' s exactly one guardian alongside each road. Rick and Morty talked to all the people in ALT, and here' s what they got: There are m citizens living in ALT. Citizen number i lives in city number xi and works in city number yi. Every day each citizen will go through all roads along the shortest path from his home to his work. A citizen will be happy if and only if either he himself has a puppy himself or all of guardians along his path to his work has a puppy ( he sees the guardian' s puppy in each road and will be happy) . A guardian is always happy. You need to tell Rick and Morty the minimum number of puppies they need in order to make all people in ALT happy, and also provide an optimal way to distribute these puppies.",
    "input": "The first line of input contains two integers n and m ( 2 \u2264 n \u2264 2 \u00d7 104, 1 \u2264 m \u2264 104) \u2014 number of cities and number of citizens respectively. The next n - 1 lines contain the roads, i- th line contains endpoint of i- th edge, v and u ( 1 \u2264 v, u \u2264 n, v = \u0338 u) . The next m lines contain the information about citizens. i- th line contains two integers xi and yi ( 1 \u2264 xi, yi \u2264 n, xi = \u0338 yi) .",
    "output": "In the first line of input print a single integer k, the total number of puppies they need ( 1 \u2264 k \u2264 n) . In the second line print an integer q, the number of puppies to give to citizens, followed by q distinct integers a1, a2, . . . , aq, index of citizens to give puppy to ( 0 \u2264 q \u2264 min( m, k) , 1 \u2264 ai \u2264 m) . In the third line print an integer e, the number of puppies to give to guardians, followed by e distinct integers b1, b2, . . . , be, index of road of guardians to give puppy to ( 0 \u2264 e \u2264 min( n - 1, k) , 1 \u2264 bi \u2264 n - 1) . Sum of q and e should be equal to k.",
    "note": "Map of ALT in the first sample testcase ( numbers written on a road is its index) : Map of ALT in the second sample testcase ( numbers written on a road is its index) :",
    "topics": [
      "data structures",
      "flows",
      "graphs",
      "trees"
    ],
    "id": "786E"
  },
  {
    "title": "Rap God",
    "url": "https://codeforces.com/problemset/problem/786/D",
    "history": "Rick is in love with Unity. But Mr. Meeseeks also love Unity, so Rick and Mr. Meeseeks are \" love rivals\" . Unity loves rap, so it decided that they have to compete in a rap game ( battle) in order to choose the best. Rick is too nerds, so instead he' s gonna make his verse with running his original algorithm on lyrics \" Rap God\" song. His algorithm is a little bit complicated. He' s made a tree with n vertices numbered from 1 to n and there' s a lowercase english letter written on each edge. He denotes str( a, b) to be the string made by writing characters on edges on the shortest path from a to b one by one ( a string of length equal to distance of a to b) . Note that str( a, b) is reverse of str( b, a) and str( a, a) is empty. In order to make the best verse he can, he needs to answer some queries, but he' s not a computer scientist and is not able to answer those queries, so he asked you to help him. Each query is characterized by two vertices x and y ( x = \u0338 y) . Answer to this query is the number of vertices like z such that z = \u0338 x, z = \u0338 y and str( x, y) is lexicographically larger than str( x, z) . String x = x1x2. . . x| x| is lexicographically larger than string y = y1y2. . . y| y| , if either | x| > | y| and x1 = y1, x2 = y2, . . . , x| y| = y| y| , or exists such number r ( r < | x| , r < | y| ) , that x1 = y1, x2 = y2, . . . , xr = yr and xr + 1 > yr + 1. Characters are compared like their ASCII codes ( or alphabetic order) . Help Rick get the girl ( or whatever gender Unity has) .",
    "input": "The first line of input contain two integers n and q ( 2 \u2264 n \u2264 20000, 1 \u2264 q \u2264 20000) \u2014 number of vertices in tree and number of queries respectively. The next n - 1 lines contain the edges. Each line contains two integers v and u ( endpoints of the edge) followed by an English lowercase letter c ( 1 \u2264 v, u \u2264 n, v = \u0338 u) . The next q line contain the queries. Each line contains two integers x and y ( 1 \u2264 x, y \u2264 n, x = \u0338 y) .",
    "output": "Print the answer for each query in one line.",
    "note": "Here' s the tree of first sample testcase: Here' s the tree of second sample testcase: In this test: str( 8, 1) = poo str( 8, 2) = poe str( 8, 3) = po str( 8, 4) = pop str( 8, 5) = popd str( 8, 6) = popp str( 8, 7) = p So, for the first query, and for the third query is the answer.",
    "topics": [
      "data structures",
      "dfs and similar",
      "hashing",
      "strings",
      "trees"
    ],
    "id": "786D"
  },
  {
    "title": "Till I Collapse",
    "url": "https://codeforces.com/problemset/problem/786/C",
    "history": "Rick and Morty want to find MR. PBH and they can' t do it alone. So they need of Mr. Meeseeks. They Have generated n Mr. Meeseeks, standing in a line numbered from 1 to n. Each of them has his own color. i- th Mr. Meeseeks' color is ai. Rick and Morty are gathering their army and they want to divide Mr. Meeseeks into some squads. They don' t want their squads to be too colorful, so each squad should have Mr. Meeseeks of at most k different colors. Also each squad should be a continuous subarray of Mr. Meeseeks in the line. Meaning that for each 1 \u2264 i \u2264 e \u2264 j \u2264 n, if Mr. Meeseeks number i and Mr. Meeseeks number j are in the same squad then Mr. Meeseeks number e should be in that same squad. Also, each squad needs its own presidio, and building a presidio needs money, so they want the total number of squads to be minimized. Rick and Morty haven' t finalized the exact value of k, so in order to choose it, for each k between 1 and n ( inclusive) need to know the minimum number of presidios needed.",
    "input": "The first line of input contains a single integer n ( 1 \u2264 n \u2264 105) \u2014 number of Mr. Meeseeks. The second line contains n integers a1, a2, . . . , an separated by spaces ( 1 \u2264 ai \u2264 n) \u2014 colors of Mr. Meeseeks in order they standing in a line.",
    "output": "In the first and only line of input print n integers separated by spaces. i- th integer should be the minimum number of presidios needed if the value of k is i.",
    "note": "For the first sample testcase, some optimal ways of dividing army into squads for each k are: [ 1] , [ 3] , [ 4] , [ 3, 3] [ 1] , [ 3, 4, 3, 3] [ 1, 3, 4, 3, 3] [ 1, 3, 4, 3, 3] [ 1, 3, 4, 3, 3] For the second testcase, some optimal ways of dividing army into squads for each k are: [ 1] , [ 5] , [ 7] , [ 8] , [ 1] , [ 7] , [ 6] , [ 1] [ 1, 5] , [ 7, 8] , [ 1, 7] , [ 6, 1] [ 1, 5, 7] , [ 8] , [ 1, 7, 6, 1] [ 1, 5, 7, 8] , [ 1, 7, 6, 1] [ 1, 5, 7, 8, 1, 7, 6, 1] [ 1, 5, 7, 8, 1, 7, 6, 1] [ 1, 5, 7, 8, 1, 7, 6, 1] [ 1, 5, 7, 8, 1, 7, 6, 1]",
    "topics": [
      "data structures",
      "divide and conquer"
    ],
    "id": "786C"
  },
  {
    "title": "Legacy",
    "url": "https://codeforces.com/problemset/problem/786/B",
    "history": "Rick and his co- workers have made a new radioactive formula and a lot of bad guys are after them. So Rick wants to give his legacy to Morty before bad guys catch them. There are n planets in their universe numbered from 1 to n. Rick is in planet number s ( the earth) and he doesn' t know where Morty is. As we all know, Rick owns a portal gun. With this gun he can open one- way portal from a planet he is in to any other planet ( including that planet) . But there are limits on this gun because he' s still using its free trial. By default he can not open any portal by this gun. There are q plans in the website that sells these guns. Every time you purchase a plan you can only use it once but you can purchase it again if you want to use it more. Plans on the website have three types: With a plan of this type you can open a portal from planet v to planet u. With a plan of this type you can open a portal from planet v to any planet with index in range [ l, r] . With a plan of this type you can open a portal from any planet with index in range [ l, r] to planet v. Rick doesn' t known where Morty is, but Unity is going to inform him and he wants to be prepared for when he finds and start his journey immediately. So for each planet ( including earth itself) he wants to know the minimum amount of money he needs to get from earth to that planet.",
    "input": "The first line of input contains three integers n, q and s ( 1 \u2264 n, q \u2264 105, 1 \u2264 s \u2264 n) \u2014 number of planets, number of plans and index of earth respectively. The next q lines contain the plans. Each line starts with a number t, type of that plan ( 1 \u2264 t \u2264 3) . If t = 1 then it is followed by three integers v, u and w where w is the cost of that plan ( 1 \u2264 v, u \u2264 n, 1 \u2264 w \u2264 109) . Otherwise it is followed by four integers v, l, r and w where w is the cost of that plan ( 1 \u2264 v \u2264 n, 1 \u2264 l \u2264 r \u2264 n, 1 \u2264 w \u2264 109) .",
    "output": "In the first and only line of output print n integers separated by spaces. i- th of them should be minimum money to get from earth to i- th planet, or - 1 if it' s impossible to get to that planet.",
    "note": "In the first sample testcase, Rick can purchase 4th plan once and then 2nd plan in order to get to get to planet number 2.",
    "topics": [
      "data structures",
      "graphs",
      "shortest paths"
    ],
    "id": "786B"
  },
  {
    "title": "Anton and Permutation",
    "url": "https://codeforces.com/problemset/problem/785/E",
    "history": "Anton likes permutations, especially he likes to permute their elements. Note that a permutation of n elements is a sequence of numbers a1, a2, . . . , an, in which every number from 1 to n appears exactly once. One day Anton got a new permutation and started to play with it. He does the following operation q times: he takes two elements of the permutation and swaps these elements. After each operation he asks his friend Vanya, how many inversions there are in the new permutation. The number of inversions in a permutation is the number of distinct pairs ( i, j) such that 1 \u2264 i < j \u2264 n and ai > aj. Vanya is tired of answering Anton' s silly questions. So he asked you to write a program that would answer these questions instead of him. Initially Anton' s permutation was 1, 2, . . . , n, that is ai = i for all i such that 1 \u2264 i \u2264 n.",
    "input": "The first line of the input contains two integers n and q ( 1 \u2264 n \u2264 200 000, 1 \u2264 q \u2264 50 000) \u2014 the length of the permutation and the number of operations that Anton does. Each of the following q lines of the input contains two integers li and ri ( 1 \u2264 li, ri \u2264 n) \u2014 the indices of elements that Anton swaps during the i- th operation. Note that indices of elements that Anton swaps during the i- th operation can coincide. Elements in the permutation are numbered starting with one.",
    "output": "Output q lines. The i- th line of the output is the number of inversions in the Anton' s permutation after the i- th operation.",
    "note": "Consider the first sample. After the first Anton' s operation the permutation will be 1, 2, 3, 5, 4. There is only one inversion in it: ( 4, 5) . After the second Anton' s operation the permutation will be 1, 5, 3, 2, 4. There are four inversions: ( 2, 3) , ( 2, 4) , ( 2, 5) and ( 3, 4) . After the third Anton' s operation the permutation will be 1, 4, 3, 2, 5. There are three inversions: ( 2, 3) , ( 2, 4) and ( 3, 4) . After the fourth Anton' s operation the permutation doesn' t change, so there are still three inversions.",
    "topics": [
      "brute force",
      "data structures"
    ],
    "id": "785E"
  },
  {
    "title": "Andryusha and Nervous Barriers",
    "url": "https://codeforces.com/problemset/problem/780/G",
    "history": "Andryusha has found a perplexing arcade machine. The machine is a vertically adjusted board divided into square cells. The board has w columns numbered from 1 to w from left to right, and h rows numbered from 1 to h from the bottom to the top. Further, there are barriers in some of board rows. There are n barriers in total, and i- th of them occupied the cells li through ri of the row ui. Andryusha recollects well that no two barriers share the same row. Furthermore, no row is completely occupied with a barrier, that is, at least one cell in each row is free. The player can throw a marble to any column of the machine from above. A marble falls downwards until it encounters a barrier, or falls through the bottom of the board. A marble disappears once it encounters a barrier but is replaced by two more marbles immediately to the left and to the right of the same barrier. In a situation when the barrier is at an edge of the board, both marbles appear next to the barrier at the side opposite to the edge. More than one marble can occupy the same place of the board, without obstructing each other' s movement. Ultimately, all marbles are bound to fall from the bottom of the machine. Examples of marble- barrier interaction. Peculiarly, sometimes marbles can go through barriers as if they were free cells. That is so because the barriers are in fact alive, and frightened when a marble was coming at them from a very high altitude. More specifically, if a marble falls towards the barrier i from relative height more than si ( that is, it started its fall strictly higher than ui + si) , then the barrier evades the marble. If a marble is thrown from the top of the board, it is considered to appear at height ( h + 1) . Andryusha remembers to have thrown a marble once in each of the columns. Help him find the total number of marbles that came down at the bottom of the machine. Since the answer may be large, print it modulo 109 + 7.",
    "input": "The first line contains three integers h, w, and n ( 1 \u2264 h \u2264 109, 2 \u2264 w \u2264 105, 0 \u2264 n \u2264 105) \u2014 the number of rows, columns, and barriers in the machine respectively. Next n lines describe barriers. i- th of these lines containts four integers ui, li, ri, and si ( 1 \u2264 ui \u2264 h, 1 \u2264 li \u2264 ri \u2264 w, 1 \u2264 si \u2264 109) \u2014 row index, leftmost and rightmost column index of i- th barrier, and largest relative fall height such that the barrier does not evade a falling marble. It is guaranteed that each row has at least one free cell, and that all ui are distinct.",
    "output": "Print one integer \u2014 the answer to the problem modulo 109 + 7.",
    "note": "In the first sample case, there is a single barrier: if one throws a marble in the second or the third column, two marbles come out, otherwise there is only one. The total answer is 7. In the second sample case, the numbers of resulting marbles are 2, 2, 4, 4, 4 in order of indexing columns with the initial marble. In the third sample case, the numbers of resulting marbles are 1, 1, 4, 4, 4. Note that the first barrier evades the marbles falling from the top of the board, but does not evade the marbles falling from the second barrier. In the fourth sample case, the numbers of resulting marbles are 2, 2, 6, 6, 6, 6, 6, 6, 6, 1, 2, 1, 1, 1, 1. The picture below shows the case when a marble is thrown into the seventh column. The result of throwing a marble into the seventh column.",
    "topics": [
      "data structures",
      "dp"
    ],
    "id": "780G"
  },
  {
    "title": "Hanoi Factory",
    "url": "https://codeforces.com/problemset/problem/777/E",
    "history": "Of course you have heard the famous task about Hanoi Towers, but did you know that there is a special factory producing the rings for this wonderful game? Once upon a time, the ruler of the ancient Egypt ordered the workers of Hanoi Factory to create as high tower as possible. They were not ready to serve such a strange order so they had to create this new tower using already produced rings. There are n rings in factory' s stock. The i- th ring has inner radius ai, outer radius bi and height hi. The goal is to select some subset of rings and arrange them such that the following conditions are satisfied: Outer radiuses form a non- increasing sequence, i. e. one can put the j- th ring on the i- th ring only if bj \u2264 bi. Rings should not fall one into the the other. That means one can place ring j on the ring i only if bj > ai. The total height of all rings used should be maximum possible.",
    "input": "The first line of the input contains a single integer n ( 1 \u2264 n \u2264 100 000) \u2014 the number of rings in factory' s stock. The i- th of the next n lines contains three integers ai, bi and hi ( 1 \u2264 ai, bi, hi \u2264 109, bi > ai) \u2014 inner radius, outer radius and the height of the i- th ring respectively.",
    "output": "Print one integer \u2014 the maximum height of the tower that can be obtained.",
    "note": "In the first sample, the optimal solution is to take all the rings and put them on each other in order 3, 2, 1. In the second sample, one can put the ring 3 on the ring 4 and get the tower of height 3, or put the ring 1 on the ring 2 and get the tower of height 4.",
    "topics": [
      "brute force",
      "data structures",
      "dp",
      "greedy",
      "sortings"
    ],
    "id": "777E"
  },
  {
    "title": "Alyona and Spreadsheet",
    "url": "https://codeforces.com/problemset/problem/777/C",
    "history": "During the lesson small girl Alyona works with one famous spreadsheet computer program and learns how to edit tables. Now she has a table filled with integers. The table consists of n rows and m columns. By ai, j we will denote the integer located at the i- th row and the j- th column. We say that the table is sorted in non- decreasing order in the column j if ai, j \u2264 ai + 1, j for all i from 1 to n - 1. Teacher gave Alyona k tasks. For each of the tasks two integers l and r are given and Alyona has to answer the following question: if one keeps the rows from l to r inclusive and deletes all others, will the table be sorted in non- decreasing order in at least one column? Formally, does there exist such j that ai, j \u2264 ai + 1, j for all i from l to r - 1 inclusive. Alyona is too small to deal with this task and asks you to help!",
    "input": "The first line of the input contains two positive integers n and m ( 1 \u2264 n\u00b7m \u2264 100 000) \u2014 the number of rows and the number of columns in the table respectively. Note that your are given a constraint that bound the product of these two integers, i. e. the number of elements in the table. Each of the following n lines contains m integers. The j- th integers in the i of these lines stands for ai, j ( 1 \u2264 ai, j \u2264 109) . The next line of the input contains an integer k ( 1 \u2264 k \u2264 100 000) \u2014 the number of task that teacher gave to Alyona. The i- th of the next k lines contains two integers li and ri ( 1 \u2264 li \u2264 ri \u2264 n) .",
    "output": "Print \" Yes\" to the i- th line of the output if the table consisting of rows from li to ri inclusive is sorted in non- decreasing order in at least one column. Otherwise, print \" No\" .",
    "note": "In the sample, the whole table is not sorted in any column. However, rows 1\u20133 are sorted in column 1, while rows 4\u20135 are sorted in column 3.",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "greedy",
      "implementation",
      "two pointers"
    ],
    "id": "777C"
  },
  {
    "title": "Game of Credit Cards",
    "url": "https://codeforces.com/problemset/problem/777/B",
    "history": "After the fourth season Sherlock and Moriary have realized the whole foolishness of the battle between them and decided to continue their competitions in peaceful game of Credit Cards. Rules of this game are simple: each player bring his favourite n- digit credit card. Then both players name the digits written on their cards one by one. If two digits are not equal, then the player, whose digit is smaller gets a flick ( knock in the forehead usually made with a forefinger) from the other player. For example, if n = 3, Sherlock' s card is 123 and Moriarty' s card has number 321, first Sherlock names 1 and Moriarty names 3 so Sherlock gets a flick. Then they both digit 2 so no one gets a flick. Finally, Sherlock names 3, while Moriarty names 1 and gets a flick. Of course, Sherlock will play honestly naming digits one by one in the order they are given, while Moriary, as a true villain, plans to cheat. He is going to name his digits in some other order ( however, he is not going to change the overall number of occurences of each digit) . For example, in case above Moriarty could name 1, 2, 3 and get no flicks at all, or he can name 2, 3 and 1 to give Sherlock two flicks. Your goal is to find out the minimum possible number of flicks Moriarty will get ( no one likes flicks) and the maximum possible number of flicks Sherlock can get from Moriarty. Note, that these two goals are different and the optimal result may be obtained by using different strategies.",
    "input": "The first line of the input contains a single integer n ( 1 \u2264 n \u2264 1000) \u2014 the number of digits in the cards Sherlock and Moriarty are going to use. The second line contains n digits \u2014 Sherlock' s credit card number. The third line contains n digits \u2014 Moriarty' s credit card number.",
    "output": "First print the minimum possible number of flicks Moriarty will get. Then print the maximum possible number of flicks that Sherlock can get from Moriarty.",
    "note": "First sample is elaborated in the problem statement. In the second sample, there is no way Moriarty can avoid getting two flicks.",
    "topics": [
      "data structures",
      "dp",
      "greedy",
      "sortings"
    ],
    "id": "777B"
  },
  {
    "title": "Sherlock's bet to Moriarty",
    "url": "https://codeforces.com/problemset/problem/776/F",
    "history": "Sherlock met Moriarty for a final battle of wits. He gave him a regular n sided convex polygon. In addition to it, he gave him certain diagonals to form regions on the polygon. It was guaranteed that the diagonals did not intersect in interior points. He took each of the region and calculated its importance value. Importance value for a region formed by vertices a1, a2, . . . , ax of the polygon will be given by 2a1 + 2a2 + . . . + 2ax. Then, he sorted these regions on the basis of their importance value in ascending order. After that he assigned each region an index from 1 to k, where k is the number of regions, and index of region is its position in the sorted array calculated above. He wants Moriarty to color the regions using not more than 20 colors, such that two regions have same color only if all the simple paths between these two regions have at least one region with color value less than the color value assigned to these regions. Simple path between two regions f and h is a sequence of regions r1, r2, . . . rt such that r1 = f, rt = h, for each 1 \u2264 i < t regions ri and ri + 1 share an edge, and ri = rj if and only if i = j. Moriarty couldn' t answer and asks Sherlock to solve it himself. Help Sherlock in doing so.",
    "input": "First line contains two integers n and m ( 3 \u2264 n \u2264 100000, 0 \u2264 m \u2264 n - 3) , the number of vertices in the polygon and the number of diagonals added. Each of the next m lines contains two integers a and b ( 1 \u2264 a, b \u2264 n) , describing a diagonal between vertices a and b. It is guaranteed that the diagonals are correct, i. e. a and b don' t coincide and are not neighboring. It is guaranteed that the diagonals do not intersect.",
    "output": "Let the number of regions be k. Output k space- separated integers, each between 1 and 20, representing the colors of the regions in the order of increasing importance. If there are multiple answers, print any of them. It can be shown that at least one answer exists.",
    "note": "In 2nd input, regions formed in order after sorting will be ( 1, 2, 3) , ( 1, 3, 4) , ( 1, 4, 5) , ( 1, 5, 6) , i. e, region ( 1, 2, 3) is first region followed by region ( 1, 3, 4) and so on. So, we can color regions 1 and 3 with same color, as region number 2 is on the path from 1 to 3 and it has color 1 which is less than color of 1 and 3, i. e. , color number 2.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "divide and conquer",
      "geometry",
      "graphs",
      "implementation",
      "trees"
    ],
    "id": "776F"
  },
  {
    "title": "Molly's Chemicals",
    "url": "https://codeforces.com/problemset/problem/776/C",
    "history": "Molly Hooper has n different kinds of chemicals arranged in a line. Each of the chemicals has an affection value, The i- th of them has affection value ai. Molly wants Sherlock to fall in love with her. She intends to do this by mixing a contiguous segment of chemicals together to make a love potion with total affection value as a non- negative integer power of k. Total affection value of a continuous segment of chemicals is the sum of affection values of each chemical in that segment. Help her to do so in finding the total number of such segments.",
    "input": "The first line of input contains two integers, n and k, the number of chemicals and the number, such that the total affection value is a non- negative power of this number k. ( 1 \u2264 n \u2264 105, 1 \u2264 | k| \u2264 10) . Next line contains n integers a1, a2, . . . , an ( - 109 \u2264 ai \u2264 109) \u2014 affection values of chemicals.",
    "output": "Output a single integer \u2014 the number of valid segments.",
    "note": "Do keep in mind that k0 = 1. In the first sample, Molly can get following different affection values: 2: segments [ 1, 1] , [ 2, 2] , [ 3, 3] , [ 4, 4] ; 4: segments [ 1, 2] , [ 2, 3] , [ 3, 4] ; 6: segments [ 1, 3] , [ 2, 4] ; 8: segments [ 1, 4] . Out of these, 2, 4 and 8 are powers of k = 2. Therefore, the answer is 8. In the second sample, Molly can choose segments [ 1, 2] , [ 3, 3] , [ 3, 4] .",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "implementation",
      "math"
    ],
    "id": "776C"
  },
  {
    "title": "Significant Cups",
    "url": "https://codeforces.com/problemset/problem/774/B",
    "history": "Stepan is a very experienced olympiad participant. He has n cups for Physics olympiads and m cups for Informatics olympiads. Each cup is characterized by two parameters \u2014 its significance ci and width wi. Stepan decided to expose some of his cups on a shelf with width d in such a way, that: there is at least one Physics cup and at least one Informatics cup on the shelf, the total width of the exposed cups does not exceed d, from each subjects ( Physics and Informatics) some of the most significant cups are exposed ( i. e. if a cup for some subject with significance x is exposed, then all the cups for this subject with significance greater than x must be exposed too) . Your task is to determine the maximum possible total significance, which Stepan can get when he exposes cups on the shelf with width d, considering all the rules described above. The total significance is the sum of significances of all the exposed cups.",
    "input": "The first line contains three integers n, m and d ( 1 \u2264 n, m \u2264 100 000, 1 \u2264 d \u2264 109) \u2014 the number of cups for Physics olympiads, the number of cups for Informatics olympiads and the width of the shelf. Each of the following n lines contains two integers ci and wi ( 1 \u2264 ci, wi \u2264 109) \u2014 significance and width of the i- th cup for Physics olympiads. Each of the following m lines contains two integers cj and wj ( 1 \u2264 cj, wj \u2264 109) \u2014 significance and width of the j- th cup for Informatics olympiads.",
    "output": "Print the maximum possible total significance, which Stepan can get exposing cups on the shelf with width d, considering all the rules described in the statement. If there is no way to expose cups on the shelf, then print 0.",
    "note": "In the first example Stepan has only one Informatics cup which must be exposed on the shelf. Its significance equals 3 and width equals 2, so after Stepan exposes it, the width of free space on the shelf becomes equal to 6. Also, Stepan must expose the second Physics cup ( which has width 5) , because it is the most significant cup for Physics ( its significance equals 5) . After that Stepan can not expose more cups on the shelf, because there is no enough free space. Thus, the maximum total significance of exposed cups equals to 8.",
    "topics": [
      "*special",
      "binary search",
      "data structures",
      "two pointers"
    ],
    "id": "774B"
  },
  {
    "title": "Blog Post Rating",
    "url": "https://codeforces.com/problemset/problem/773/E",
    "history": "It' s well- known that blog posts are an important part of Codeforces platform. Every blog post has a global characteristic changing over time \u2014 its community rating. A newly created blog post' s community rating is 0. Codeforces users may visit the blog post page and rate it, changing its community rating by + 1 or - 1. Consider the following model of Codeforces users' behavior. The i- th user has his own estimated blog post rating denoted by an integer ai. When a user visits a blog post page, he compares his estimated blog post rating to its community rating. If his estimated rating is higher, he rates the blog post with + 1 ( thus, the blog post' s community rating increases by 1) . If his estimated rating is lower, he rates the blog post with - 1 ( decreasing its community rating by 1) . If the estimated rating and the community rating are equal, user doesn' t rate the blog post at all ( in this case we' ll say that user rates the blog post for 0) . In any case, after this procedure user closes the blog post page and never opens it again. Consider a newly created blog post with the initial community rating of 0. For each of n Codeforces users, numbered from 1 to n, his estimated blog post rating ai is known. For each k from 1 to n, inclusive, the following question is asked. Let users with indices from 1 to k, in some order, visit the blog post page, rate the blog post and close the page. Each user opens the blog post only after the previous user closes it. What could be the maximum possible community rating of the blog post after these k visits?",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 5\u00b7105) \u2014 the number of Codeforces users. The second line contains n integers a1, a2, . . . , an ( - 5\u00b7105 \u2264 ai \u2264 5\u00b7105) \u2014 estimated blog post ratings for users in order from 1 to n.",
    "output": "For each k from 1 to n, output a single integer equal to the maximum possible community rating of the blog post after users with indices from 1 to k, in some order, visit the blog post page, rate the blog post, and close the page.",
    "note": "",
    "topics": [
      "data structures",
      "sortings"
    ],
    "id": "773E"
  },
  {
    "title": "The Winds of Winter",
    "url": "https://codeforces.com/problemset/problem/768/G",
    "history": "Given a rooted tree with n nodes. The Night King removes exactly one node from the tree and all the edges associated with it. Doing this splits the tree and forms a forest. The node which is removed is not a part of the forest. The root of a tree in the forest is the node in that tree which does not have a parent. We define the strength of the forest as the size of largest tree in forest. Jon Snow wants to minimize the strength of the forest. To do this he can perform the following operation at most once. He removes the edge between a node and its parent and inserts a new edge between this node and any other node in forest such that the total number of trees in forest remain same. For each node v you need to find the minimum value of strength of the forest formed when node v is removed.",
    "input": "The first line of the input contains an integer n ( 1 \u2264 n \u2264 105) \u2014 the number of vertices in the tree. Each of the next n lines contains a pair of vertex indices ui and vi ( 1 \u2264 ui, vi \u2264 n) where ui is the parent of vi. If ui = 0 then vi is the root.",
    "output": "Print n line each containing a single integer. The i- th of them should be equal to minimum value of strength of forest formed when i- th node is removed and Jon Snow performs the operation described above at most once.",
    "note": "The tree for first test case is depicted below. When you remove the first node, the tree splits to form the following forest. The strength of this forest is 4. Jon Snow now changes the parent of vertex 10 from 5 to 3. The strength of forest now becomes 3.",
    "topics": [
      "binary search",
      "data structures"
    ],
    "id": "768G"
  },
  {
    "title": "Cartons of milk",
    "url": "https://codeforces.com/problemset/problem/767/D",
    "history": "Olya likes milk very much. She drinks k cartons of milk each day if she has at least k and drinks all of them if she doesn' t. But there' s an issue \u2014 expiration dates. Each carton has a date after which you can' t drink it ( you still can drink it exactly at the date written on the carton) . Due to this, if Olya' s fridge contains a carton past its expiry date, she throws it away. Olya hates throwing out cartons, so when she drinks a carton, she chooses the one which expires the fastest. It' s easy to understand that this strategy minimizes the amount of cartons thrown out and lets her avoid it if it' s even possible. Milk. Best before: 20. 02. 2017. The main issue Olya has is the one of buying new cartons. Currently, there are n cartons of milk in Olya' s fridge, for each one an expiration date is known ( how soon does it expire, measured in days) . In the shop that Olya visited there are m cartons, and the expiration date is known for each of those cartons as well. Find the maximum number of cartons Olya can buy so that she wouldn' t have to throw away any cartons. Assume that Olya drank no cartons today.",
    "input": "In the first line there are three integers n, m, k ( 1 \u2264 n, m \u2264 106, 1 \u2264 k \u2264 n + m) \u2014 the amount of cartons in Olya' s fridge, the amount of cartons in the shop and the number of cartons Olya drinks each day. In the second line there are n integers f1, f2, . . . , fn ( 0 \u2264 fi \u2264 107) \u2014 expiration dates of the cartons in Olya' s fridge. The expiration date is expressed by the number of days the drinking of this carton can be delayed. For example, a 0 expiration date means it must be drunk today, 1 \u2014 no later than tomorrow, etc. In the third line there are m integers s1, s2, . . . , sm ( 0 \u2264 si \u2264 107) \u2014 expiration dates of the cartons in the shop in a similar format.",
    "output": "If there' s no way for Olya to drink the cartons she already has in her fridge, print - 1. Otherwise, in the first line print the maximum number x of cartons which Olya can buy so that she wouldn' t have to throw a carton away. The next line should contain exactly x integers \u2014 the numbers of the cartons that should be bought ( cartons are numbered in an order in which they are written in the input, starting with 1) . Numbers should not repeat, but can be in arbitrary order. If there are multiple correct answers, print any of them.",
    "note": "In the first example k = 2 and Olya has three cartons with expiry dates 0, 1 and 1 ( they expire today, tomorrow and tomorrow) , and the shop has 3 cartons with expiry date 0 and 3 cartons with expiry date 2. Olya can buy three cartons, for example, one with the expiry date 0 and two with expiry date 2. In the second example all three cartons Olya owns expire today and it means she would have to throw packets away regardless of whether she buys an extra one or not. In the third example Olya would drink k = 2 cartons today ( one she alreay has in her fridge and one from the shop) and the remaining one tomorrow.",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "sortings",
      "two pointers"
    ],
    "id": "767D"
  },
  {
    "title": "Snacktower",
    "url": "https://codeforces.com/problemset/problem/767/A",
    "history": "According to an old legeng, a long time ago Ankh- Morpork residents did something wrong to miss Fortune, and she cursed them. She said that at some time n snacks of distinct sizes will fall on the city, and the residents should build a Snacktower of them by placing snacks one on another. Of course, big snacks should be at the bottom of the tower, while small snacks should be at the top. Years passed, and once different snacks started to fall onto the city, and the residents began to build the Snacktower. However, they faced some troubles. Each day exactly one snack fell onto the city, but their order was strange. So, at some days the residents weren' t able to put the new stack on the top of the Snacktower: they had to wait until all the bigger snacks fell. Of course, in order to not to anger miss Fortune again, the residents placed each snack on the top of the tower immediately as they could do it. Write a program that models the behavior of Ankh- Morpork residents.",
    "input": "The first line contains single integer n ( 1 \u2264 n \u2264 100 000) \u2014 the total number of snacks. The second line contains n integers, the i- th of them equals the size of the snack which fell on the i- th day. Sizes are distinct integers from 1 to n.",
    "output": "Print n lines. On the i- th of them print the sizes of the snacks which the residents placed on the top of the Snacktower on the i- th day in the order they will do that. If no snack is placed on some day, leave the corresponding line empty.",
    "note": "In the example a snack of size 3 fell on the first day, and the residents immediately placed it. On the second day a snack of size 1 fell, and the residents weren' t able to place it because they were missing the snack of size 2. On the third day a snack of size 2 fell, and the residents immediately placed it. Right after that they placed the snack of size 1 which had fallen before.",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "767A"
  },
  {
    "title": "Mahmoud and a xor trip",
    "url": "https://codeforces.com/problemset/problem/766/E",
    "history": "Mahmoud and Ehab live in a country with n cities numbered from 1 to n and connected by n - 1 undirected roads. It' s guaranteed that you can reach any city from any other using these roads. Each city has a number ai attached to it. We define the distance from city x to city y as the xor of numbers attached to the cities on the path from x to y ( including both x and y) . In other words if values attached to the cities on the path from x to y form an array p of length l then the distance between them is , where is bitwise xor operation. Mahmoud and Ehab want to choose two cities and make a journey from one to another. The index of the start city is always less than or equal to the index of the finish city ( they may start and finish in the same city and in this case the distance equals the number attached to that city) . They can' t determine the two cities so they try every city as a start and every city with greater index as a finish. They want to know the total distance between all pairs of cities.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 105) \u2014 the number of cities in Mahmoud and Ehab' s country. Then the second line contains n integers a1, a2, . . . , an ( 0 \u2264 ai \u2264 106) which represent the numbers attached to the cities. Integer ai is attached to the city i. Each of the next n - 1 lines contains two integers u and v ( 1 \u2264 u, v \u2264 n, u = \u0338 v) , denoting that there is an undirected road between cities u and v. It' s guaranteed that you can reach any city from any other using these roads.",
    "output": "Output one number denoting the total distance between all pairs of cities.",
    "note": "A bitwise xor takes two bit integers of equal length and performs the logical xor operation on each pair of corresponding bits. The result in each position is 1 if only the first bit is 1 or only the second bit is 1, but will be 0 if both are 0 or both are 1. You can read more about bitwise xor operation here: https: / / en. wikipedia. org/ wiki/ Bitwise_ operation# XOR. In the first sample the available paths are: city 1 to itself with a distance of 1, city 2 to itself with a distance of 2, city 3 to itself with a distance of 3, city 1 to city 2 with a distance of , city 1 to city 3 with a distance of , city 2 to city 3 with a distance of . The total distance between all pairs of cities equals 1 + 2 + 3 + 3 + 0 + 1 = 10.",
    "topics": [
      "bitmasks",
      "constructive algorithms",
      "data structures",
      "dfs and similar",
      "dp",
      "math",
      "trees"
    ],
    "id": "766E"
  },
  {
    "title": "Mahmoud and a Dictionary",
    "url": "https://codeforces.com/problemset/problem/766/D",
    "history": "Mahmoud wants to write a new dictionary that contains n words and relations between them. There are two types of relations: synonymy ( i. e. the two words mean the same) and antonymy ( i. e. the two words mean the opposite) . From time to time he discovers a new relation between two words. He know that if two words have a relation between them, then each of them has relations with the words that has relations with the other. For example, if like means love and love is the opposite of hate, then like is also the opposite of hate. One more example: if love is the opposite of hate and hate is the opposite of like, then love means like, and so on. Sometimes Mahmoud discovers a wrong relation. A wrong relation is a relation that makes two words equal and opposite at the same time. For example if he knows that love means like and like is the opposite of hate, and then he figures out that hate means like, the last relation is absolutely wrong because it makes hate and like opposite and have the same meaning at the same time. After Mahmoud figured out many relations, he was worried that some of them were wrong so that they will make other relations also wrong, so he decided to tell every relation he figured out to his coder friend Ehab and for every relation he wanted to know is it correct or wrong, basing on the previously discovered relations. If it is wrong he ignores it, and doesn' t check with following relations. After adding all relations, Mahmoud asked Ehab about relations between some words based on the information he had given to him. Ehab is busy making a Codeforces round so he asked you for help.",
    "input": "The first line of input contains three integers n, m and q ( 2 \u2264 n \u2264 105, 1 \u2264 m, q \u2264 105) where n is the number of words in the dictionary, m is the number of relations Mahmoud figured out and q is the number of questions Mahmoud asked after telling all relations. The second line contains n distinct words a1, a2, . . . , an consisting of small English letters with length not exceeding 20, which are the words in the dictionary. Then m lines follow, each of them contains an integer t ( 1 \u2264 t \u2264 2) followed by two different words xi and yi which has appeared in the dictionary words. If t = 1, that means xi has a synonymy relation with yi, otherwise xi has an antonymy relation with yi. Then q lines follow, each of them contains two different words which has appeared in the dictionary. That are the pairs of words Mahmoud wants to know the relation between basing on the relations he had discovered. All words in input contain only lowercase English letters and their lengths don' t exceed 20 characters. In all relations and in all questions the two words are different.",
    "output": "First, print m lines, one per each relation. If some relation is wrong ( makes two words opposite and have the same meaning at the same time) you should print \" NO\" ( without quotes) and ignore it, otherwise print \" YES\" ( without quotes) . After that print q lines, one per each question. If the two words have the same meaning, output 1. If they are opposites, output 2. If there is no relation between them, output 3. See the samples for better understanding.",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "dp",
      "dsu",
      "graphs"
    ],
    "id": "766D"
  },
  {
    "title": "Souvenirs",
    "url": "https://codeforces.com/problemset/problem/765/F",
    "history": "Artsem is on vacation and wants to buy souvenirs for his two teammates. There are n souvenir shops along the street. In i- th shop Artsem can buy one souvenir for ai dollars, and he cannot buy more than one souvenir in one shop. He doesn' t want to introduce envy in his team, so he wants to buy two souvenirs with least possible difference in price. Artsem has visited the shopping street m times. For some strange reason on the i- th day only shops with numbers from li to ri were operating ( weird? yes it is, but have you ever tried to come up with a reasonable legend for a range query problem? ) . For each visit, Artsem wants to know the minimum possible difference in prices of two different souvenirs he can buy in the opened shops. In other words, for each Artsem' s visit you should find the minimum possible value of | as - at| where li \u2264 s, t \u2264 ri, s = \u0338 t.",
    "input": "The first line contains an integer n ( 2 \u2264 n \u2264 105) . The second line contains n space- separated integers a1, . . . , an ( 0 \u2264 ai \u2264 109) . The third line contains the number of queries m ( 1 \u2264 m \u2264 3\u00b7105) . Next m lines describe the queries. i- th of these lines contains two space- separated integers li and ri denoting the range of shops working on i- th day ( 1 \u2264 li < ri \u2264 n) .",
    "output": "Print the answer to each query in a separate line.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": "765F"
  },
  {
    "title": "Timofey and our friends animals",
    "url": "https://codeforces.com/problemset/problem/763/E",
    "history": "After his birthday party, Timofey went to his favorite tree alley in a park. He wants to feed there his favorite birds \u2014 crows. It' s widely known that each tree is occupied by a single crow family. The trees in the alley form a row and are numbered from 1 to n. Some families are friends to each other. For some reasons, two families can be friends only if they live not too far from each other, more precisely, there is no more than k - 1 trees between any pair of friend families. Formally, the family on the u- th tree and the family on the v- th tree can be friends only if | u - v| \u2264 k holds. One of the friendship features is that if some family learns that Timofey is feeding crows somewhere, it notifies about this all friend families. Thus, after Timofey starts to feed crows under some tree, all the families that are friends to the family living on this tree, as well as their friends and so on, fly to the feeding place. Of course, the family living on the tree also comes to the feeding place. Today Timofey came to the alley and noticed that all the families that live on trees with numbers strictly less than l or strictly greater than r have flown away. Thus, it is not possible to pass the information about feeding through them. Moreover, there is no need to feed them. Help Timofey to learn what is the minimum number of trees under which he has to feed crows so that all the families that have remained will get the information about feeding. You are given several situations, described by integers l and r, you need to calculate the answer for all of them.",
    "input": "The first line contains integers n and k ( 1 \u2264 n \u2264 105, 1 \u2264 k \u2264 5) , where n is the number of trees, and k is the maximum possible distance between friend families. The next line contains single integer m ( 0 \u2264 m \u2264 n\u00b7k) \u2014 the number of pair of friend families. Each of the next m lines contains two integers u and v ( 1 \u2264 u, v \u2264 105) , that means that the families on trees u and v are friends. It is guaranteed that u = \u0338 v and | u - v| \u2264 k. All the given pairs are distinct. The next line contains single integer q ( 1 \u2264 q \u2264 105) \u2014 the number of situations you need to calculate the answer in. Each of the next q lines contains two integers l and r ( 1 \u2264 l \u2264 r \u2264 105) , that means that in this situation families that have flown away lived on such trees x, so that either x < l or x > r.",
    "output": "Print q lines. Line i should contain single integer \u2014 the answer in the i- th situation.",
    "note": "In the first example the following family pairs are friends: ( 1, 3) , ( 2, 3) and ( 4, 5) . In the first situation only the first family has remained, so the answer is 1. In the second situation the first two families have remained, and they aren' t friends, so the answer is 2. In the third situation the families 2 and 3 are friends, so it is enough to feed any of them, the answer is 1. In the fourth situation we can feed the first family, then the third family will get the information from the first family, and the second family will get the information from the third. The answer is 1. In the fifth situation we can feed the first and the fifth families, so the answer is 2.",
    "topics": [
      "data structures",
      "divide and conquer",
      "dsu"
    ],
    "id": "763E"
  },
  {
    "title": "Timofey and a flat tree",
    "url": "https://codeforces.com/problemset/problem/763/D",
    "history": "Little Timofey has a big tree \u2014 an undirected connected graph with n vertices and no simple cycles. He likes to walk along it. His tree is flat so when he walks along it he sees it entirely. Quite naturally, when he stands on a vertex, he sees the tree as a rooted tree with the root in this vertex. Timofey assumes that the more non- isomorphic subtrees are there in the tree, the more beautiful the tree is. A subtree of a vertex is a subgraph containing this vertex and all its descendants. You should tell Timofey the vertex in which he should stand to see the most beautiful rooted tree. Subtrees of vertices u and v are isomorphic if the number of children of u equals the number of children of v, and their children can be arranged in such a way that the subtree of the first son of u is isomorphic to the subtree of the first son of v, the subtree of the second son of u is isomorphic to the subtree of the second son of v, and so on. In particular, subtrees consisting of single vertex are isomorphic to each other.",
    "input": "First line contains single integer n ( 1 \u2264 n \u2264 105) \u2014 number of vertices in the tree. Each of the next n - 1 lines contains two integers ui and vi ( 1 \u2264 ui, vi \u2264 105, ui = \u0338 vi) , denoting the vertices the i- th edge connects. It is guaranteed that the given graph is a tree.",
    "output": "Print single integer \u2014 the index of the vertex in which Timofey should stand. If there are many answers, you can print any of them.",
    "note": "In the first example we can stand in the vertex 1 or in the vertex 3 so that every subtree is non- isomorphic. If we stand in the vertex 2, then subtrees of vertices 1 and 3 are isomorphic. In the second example, if we stand in the vertex 1, then only subtrees of vertices 4 and 5 are isomorphic. In the third example, if we stand in the vertex 1, then subtrees of vertices 2, 3, 4, 6, 7 and 8 are isomorphic. If we stand in the vertex 2, than only subtrees of vertices 3, 4, 6, 7 and 8 are isomorphic. If we stand in the vertex 5, then subtrees of vertices 2, 3, 4, 6, 7 and 8 are isomorphic, and subtrees of vertices 1 and 9 are isomorphic as well: 1 9 / / 8 4 2",
    "topics": [
      "data structures",
      "graphs",
      "hashing",
      "shortest paths",
      "trees"
    ],
    "id": "763D"
  },
  {
    "title": "Radio stations",
    "url": "https://codeforces.com/problemset/problem/762/E",
    "history": "In the lattice points of the coordinate line there are n radio stations, the i- th of which is described by three integers: xi \u2014 the coordinate of the i- th station on the line, ri \u2014 the broadcasting range of the i- th station, fi \u2014 the broadcasting frequency of the i- th station. We will say that two radio stations with numbers i and j reach each other, if the broadcasting range of each of them is more or equal to the distance between them. In other words min( ri, rj) \u2265 | xi - xj| . Let' s call a pair of radio stations ( i, j) bad if i < j, stations i and j reach each other and they are close in frequency, that is, | fi - fj| \u2264 k. Find the number of bad pairs of radio stations.",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 105, 0 \u2264 k \u2264 10) \u2014 the number of radio stations and the maximum difference in the frequencies for the pair of stations that reach each other to be considered bad. In the next n lines follow the descriptions of radio stations. Each line contains three integers xi, ri and fi ( 1 \u2264 xi, ri \u2264 109, 1 \u2264 fi \u2264 104) \u2014 the coordinate of the i- th radio station, it' s broadcasting range and it' s broadcasting frequency. No two radio stations will share a coordinate.",
    "output": "Output the number of bad pairs of radio stations.",
    "note": "",
    "topics": [
      "binary search",
      "data structures"
    ],
    "id": "762E"
  },
  {
    "title": "Dasha and Photos",
    "url": "https://codeforces.com/problemset/problem/761/F",
    "history": "Dasha decided to have a rest after solving the problem D and began to look photos from previous competitions. Let' s call photos as the matrix with the size n \u00d7 m, which consists of lowercase English letters. Some k photos especially interested her, because they can be received from photo- template by painting a rectangular area in a certain color. Let' s call such photos special. More formally the i- th special photo is received from the photo- template by replacing all characters on some rectangle with upper left corner of the cell with coordinates ( ai, bi) and lower right corner in the cell with coordinates ( ci, di) to the symbol ei. Dasha asks you to find the special photo so that the total distance from it to all other special photos is minimum. And calculate this distance. Determine the distance between two photos as the sum of distances between all corresponding letters. The distance between two letters is the difference module of their positions in the alphabet. For example, the distance between letters ' h' and ' m' equals | 8 - 13| = 5, because the letter ' h' is the 8- th in the alphabet, the letter ' m' is the 13- th.",
    "input": "The first line contains three integers n, m, k ( 1 \u2264 n, m \u2264 103, 1 \u2264 k \u2264 3\u00b7105) \u2014 the number of strings in the photo- template, the number of columns and the number of special photos which are interesting for Dasha. The next n lines contains the string with m length which consists of little Latin characters \u2014 the description of the photo- template. Each of the next k lines contains the description of the special photo in the following format, \" ai bi ci di ei\" ( 1 \u2264 ai \u2264 ci \u2264 n, 1 \u2264 bi \u2264 di \u2264 m) , where ( ai, bi) \u2014 is the coordinate of the upper left corner of the rectangle, ( ci, di) \u2014 is the description of the lower right corner, and ei \u2014 is the little Latin letter which replaces the photo- template in the described rectangle.",
    "output": "In the only line print the minimum total distance from the found special photo to all other special photos.",
    "note": "In the first example the photos are following: bba aaabba accaaa accThe distance between them is 10.",
    "topics": [
      "brute force",
      "data structures",
      "dp",
      "implementation"
    ],
    "id": "761F"
  },
  {
    "title": "Can Bash Save the Day?",
    "url": "https://codeforces.com/problemset/problem/757/G",
    "history": "Whoa! You did a great job helping Team Rocket who managed to capture all the Pokemons sent by Bash. Meowth, part of Team Rocket, having already mastered the human language, now wants to become a master in programming as well. He agrees to free the Pokemons if Bash can answer his questions. Initially, Meowth gives Bash a weighted tree containing n nodes and a sequence a1, a2. . . , an which is a permutation of 1, 2, . . . , n. Now, Mewoth makes q queries of one of the following forms: 1 l r v: meaning Bash should report , where dist( a, b) is the length of the shortest path from node a to node b in the given tree. 2 x: meaning Bash should swap ax and ax + 1 in the given sequence. This new sequence is used for later queries. Help Bash to answer the questions!",
    "input": "The first line contains two integers n and q ( 1 \u2264 n \u2264 2\u00b7105, 1 \u2264 q \u2264 2\u00b7105) \u2014 the number of nodes in the tree and the number of queries, respectively. The next line contains n space- separated integers \u2014 the sequence a1, a2, . . . , an which is a permutation of 1, 2, . . . , n. Each of the next n - 1 lines contain three space- separated integers u, v, and w denoting that there exists an undirected edge between node u and node v of weight w, ( 1 \u2264 u, v \u2264 n, u = \u0338 v, 1 \u2264 w \u2264 106) . It is guaranteed that the given graph is a tree. Each query consists of two lines. First line contains single integer t, indicating the type of the query. Next line contains the description of the query: t = 1: Second line contains three integers a, b and c ( 1 \u2264 a, b, c < 230) using which l, r and v can be generated using the formula given below: , , . t = 2: Second line contains single integer a ( 1 \u2264 a < 230) using which x can be generated using the formula given below: . The ansi is the answer for the i- th query, assume that ans0 = 0. If the i- th query is of type 2 then ansi = ansi - 1. It is guaranteed that: for each query of type 1: 1 \u2264 l \u2264 r \u2264 n, 1 \u2264 v \u2264 n, for each query of type 2: 1 \u2264 x \u2264 n - 1. The operation means bitwise exclusive OR.",
    "output": "For each query of type 1, output a single integer in a separate line, denoting the answer to the query.",
    "note": "In the sample, the actual queries are the following: 1 1 5 4 1 1 3 3 2 3 2 2 1 1 3 3",
    "topics": [
      "data structures",
      "divide and conquer",
      "graphs",
      "trees"
    ],
    "id": "757G"
  },
  {
    "title": "Team Rocket Rises Again",
    "url": "https://codeforces.com/problemset/problem/757/F",
    "history": "It' s the turn of the year, so Bash wants to send presents to his friends. There are n cities in the Himalayan region and they are connected by m bidirectional roads. Bash is living in city s. Bash has exactly one friend in each of the other cities. Since Bash wants to surprise his friends, he decides to send a Pikachu to each of them. Since there may be some cities which are not reachable from Bash' s city, he only sends a Pikachu to those friends who live in a city reachable from his own city. He also wants to send it to them as soon as possible. He finds out the minimum time for each of his Pikachus to reach its destination city. Since he is a perfectionist, he informs all his friends with the time their gift will reach them. A Pikachu travels at a speed of 1 meters per second. His friends were excited to hear this and would be unhappy if their presents got delayed. Unfortunately Team Rocket is on the loose and they came to know of Bash' s plan. They want to maximize the number of friends who are unhappy with Bash. They do this by destroying exactly one of the other n - 1 cities. This implies that the friend residing in that city dies, so he is unhappy as well. Note that if a city is destroyed, all the roads directly connected to the city are also destroyed and the Pikachu may be forced to take a longer alternate route. Please also note that only friends that are waiting for a gift count as unhappy, even if they die. Since Bash is already a legend, can you help Team Rocket this time and find out the maximum number of Bash' s friends who can be made unhappy by destroying exactly one city.",
    "input": "The first line contains three space separated integers n, m and s ( 2 \u2264 n \u2264 2\u00b7105, , 1 \u2264 s \u2264 n) \u2014 the number of cities and the number of roads in the Himalayan region and the city Bash lives in. Each of the next m lines contain three space- separated integers u, v and w ( 1 \u2264 u, v \u2264 n, u = \u0338 v, 1 \u2264 w \u2264 109) denoting that there exists a road between city u and city v of length w meters. It is guaranteed that no road connects a city to itself and there are no two roads that connect the same pair of cities.",
    "output": "Print a single integer, the answer to the problem.",
    "note": "In the first sample, on destroying the city 2, the length of shortest distance between pairs of cities ( 3, 2) and ( 3, 4) will change. Hence the answer is 2.",
    "topics": [
      "data structures",
      "graphs",
      "shortest paths"
    ],
    "id": "757F"
  },
  {
    "title": "Felicity is Coming!",
    "url": "https://codeforces.com/problemset/problem/757/C",
    "history": "It' s that time of the year, Felicity is around the corner and you can see people celebrating all around the Himalayan region. The Himalayan region has n gyms. The i- th gym has gi Pokemon in it. There are m distinct Pokemon types in the Himalayan region numbered from 1 to m. There is a special evolution camp set up in the fest which claims to evolve any Pokemon. The type of a Pokemon could change after evolving, subject to the constraint that if two Pokemon have the same type before evolving, they will have the same type after evolving. Also, if two Pokemon have different types before evolving, they will have different types after evolving. It is also possible that a Pokemon has the same type before and after evolving. Formally, an evolution plan is a permutation f of 1, 2, . . . , m, such that f( x) = y means that a Pokemon of type x evolves into a Pokemon of type y. The gym leaders are intrigued by the special evolution camp and all of them plan to evolve their Pokemons. The protocol of the mountain states that in each gym, for every type of Pokemon, the number of Pokemon of that type before evolving any Pokemon should be equal the number of Pokemon of that type after evolving all the Pokemons according to the evolution plan. They now want to find out how many distinct evolution plans exist which satisfy the protocol. Two evolution plans f1 and f2 are distinct, if they have at least one Pokemon type evolving into a different Pokemon type in the two plans, i. e. there exists an i such that f1( i) = \u0338 f2( i) . Your task is to find how many distinct evolution plans are possible such that if all Pokemon in all the gyms are evolved, the number of Pokemon of each type in each of the gyms remains the same. As the answer can be large, output it modulo 109 + 7.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 105, 1 \u2264 m \u2264 106) \u2014 the number of gyms and the number of Pokemon types. The next n lines contain the description of Pokemons in the gyms. The i- th of these lines begins with the integer gi ( 1 \u2264 gi \u2264 105) \u2014 the number of Pokemon in the i- th gym. After that gi integers follow, denoting types of the Pokemons in the i- th gym. Each of these integers is between 1 and m. The total number of Pokemons ( the sum of all gi) does not exceed 5\u00b7105.",
    "output": "Output the number of valid evolution plans modulo 109 + 7.",
    "note": "In the first case, the only possible evolution plan is: In the second case, any permutation of ( 1, 2, 3) is valid. In the third case, there are two possible plans: In the fourth case, the only possible evolution plan is:",
    "topics": [
      "data structures",
      "hashing",
      "sortings",
      "strings"
    ],
    "id": "757C"
  },
  {
    "title": "Nikita and stack",
    "url": "https://codeforces.com/problemset/problem/756/C",
    "history": "Nikita has a stack. A stack in this problem is a data structure that supports two operations. Operation push( x) puts an integer x on the top of the stack, and operation pop( ) deletes the top integer from the stack, i. e. the last added. If the stack is empty, then the operation pop( ) does nothing. Nikita made m operations with the stack but forgot them. Now Nikita wants to remember them. He remembers them one by one, on the i- th step he remembers an operation he made pi- th. In other words, he remembers the operations in order of some permutation p1, p2, . . . , pm. After each step Nikita wants to know what is the integer on the top of the stack after performing the operations he have already remembered, in the corresponding order. Help him!",
    "input": "The first line contains the integer m ( 1 \u2264 m \u2264 105) \u2014 the number of operations Nikita made. The next m lines contain the operations Nikita remembers. The i- th line starts with two integers pi and ti ( 1 \u2264 pi \u2264 m, ti = 0 or ti = 1) \u2014 the index of operation he remembers on the step i, and the type of the operation. ti equals 0, if the operation is pop( ) , and 1, is the operation is push( x) . If the operation is push( x) , the line also contains the integer xi ( 1 \u2264 xi \u2264 106) \u2014 the integer added to the stack. It is guaranteed that each integer from 1 to m is present exactly once among integers pi.",
    "output": "Print m integers. The integer i should equal the number on the top of the stack after performing all the operations Nikita remembered on the steps from 1 to i. If the stack is empty after performing all these operations, print - 1.",
    "note": "In the first example, after Nikita remembers the operation on the first step, the operation push( 2) is the only operation, so the answer is 2. After he remembers the operation pop( ) which was done before push( 2) , answer stays the same. In the second example, the operations are push( 2) , push( 3) and pop( ) . Nikita remembers them in the order they were performed. In the third example Nikita remembers the operations in the reversed order.",
    "topics": [
      "data structures"
    ],
    "id": "756C"
  },
  {
    "title": "PolandBall and Polygon",
    "url": "https://codeforces.com/problemset/problem/755/D",
    "history": "PolandBall has such a convex polygon with n veritces that no three of its diagonals intersect at the same point. PolandBall decided to improve it and draw some red segments. He chose a number k such that gcd( n, k) = 1. Vertices of the polygon are numbered from 1 to n in a clockwise way. PolandBall repeats the following process n times, starting from the vertex 1: Assume you' ve ended last operation in vertex x ( consider x = 1 if it is the first operation) . Draw a new segment from vertex x to k- th next vertex in clockwise direction. This is a vertex x + k or x + k - n depending on which of these is a valid index of polygon' s vertex. Your task is to calculate number of polygon' s sections after each drawing. A section is a clear area inside the polygon bounded with drawn diagonals or the polygon' s sides.",
    "input": "There are only two numbers in the input: n and k ( 5 \u2264 n \u2264 106, 2 \u2264 k \u2264 n - 2, gcd( n, k) = 1) .",
    "output": "You should print n values separated by spaces. The i- th value should represent number of polygon' s sections after drawing first i lines.",
    "note": "The greatest common divisor ( gcd) of two integers a and b is the largest positive integer that divides both a and b without a remainder. For the first sample testcase, you should output \" 2 3 5 8 11\" . Pictures below correspond to situations after drawing lines.",
    "topics": [
      "data structures"
    ],
    "id": "755D"
  },
  {
    "title": "PolandBall and Game",
    "url": "https://codeforces.com/problemset/problem/755/B",
    "history": "PolandBall is playing a game with EnemyBall. The rules are simple. Players have to say words in turns. You cannot say a word which was already said. PolandBall starts. The Ball which can' t say a new word loses. You' re given two lists of words familiar to PolandBall and EnemyBall. Can you determine who wins the game, if both play optimally?",
    "input": "The first input line contains two integers n and m ( 1 \u2264 n, m \u2264 103) \u2014 number of words PolandBall and EnemyBall know, respectively. Then n strings follow, one per line \u2014 words familiar to PolandBall. Then m strings follow, one per line \u2014 words familiar to EnemyBall. Note that one Ball cannot know a word more than once ( strings are unique) , but some words can be known by both players. Each word is non- empty and consists of no more than 500 lowercase English alphabet letters.",
    "output": "In a single line of print the answer \u2014 \" YES\" if PolandBall wins and \" NO\" otherwise. Both Balls play optimally.",
    "note": "In the first example PolandBall knows much more words and wins effortlessly. In the second example if PolandBall says kremowka first, then EnemyBall cannot use that word anymore. EnemyBall can only say wiedenska. PolandBall says wadowicka and wins.",
    "topics": [
      "binary search",
      "data structures",
      "games",
      "greedy",
      "sortings",
      "strings"
    ],
    "id": "755B"
  },
  {
    "title": "Fedor and coupons",
    "url": "https://codeforces.com/problemset/problem/754/D",
    "history": "All our characters have hobbies. The same is true for Fedor. He enjoys shopping in the neighboring supermarket. The goods in the supermarket have unique integer ids. Also, for every integer there is a product with id equal to this integer. Fedor has n discount coupons, the i- th of them can be used with products with ids ranging from li to ri, inclusive. Today Fedor wants to take exactly k coupons with him. Fedor wants to choose the k coupons in such a way that the number of such products x that all coupons can be used with this product x is as large as possible ( for better understanding, see examples) . Fedor wants to save his time as well, so he asks you to choose coupons for him. Help Fedor!",
    "input": "The first line contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 3\u00b7105) \u2014 the number of coupons Fedor has, and the number of coupons he wants to choose. Each of the next n lines contains two integers li and ri ( - 109 \u2264 li \u2264 ri \u2264 109) \u2014 the description of the i- th coupon. The coupons can be equal.",
    "output": "In the first line print single integer \u2014 the maximum number of products with which all the chosen coupons can be used. The products with which at least one coupon cannot be used shouldn' t be counted. In the second line print k distinct integers p1, p2, . . . , pk ( 1 \u2264 pi \u2264 n) \u2014 the ids of the coupons which Fedor should choose. If there are multiple answers, print any of them.",
    "note": "In the first example if we take the first two coupons then all the products with ids in range [ 40, 70] can be bought with both coupons. There are 31 products in total. In the second example, no product can be bought with two coupons, that is why the answer is 0. Fedor can choose any two coupons in this example.",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "754D"
  },
  {
    "title": "New Year and Old Subsequence",
    "url": "https://codeforces.com/problemset/problem/750/E",
    "history": "A string t is called nice if a string \" 2017\" occurs in t as a subsequence but a string \" 2016\" doesn' t occur in t as a subsequence. For example, strings \" 203434107\" and \" 9220617\" are nice, while strings \" 20016\" , \" 1234\" and \" 20167\" aren' t nice. The ugliness of a string is the minimum possible number of characters to remove, in order to obtain a nice string. If it' s impossible to make a string nice by removing characters, its ugliness is - 1. Limak has a string s of length n, with characters indexed 1 through n. He asks you q queries. In the i- th query you should compute and print the ugliness of a substring ( continuous subsequence) of s starting at the index ai and ending at the index bi ( inclusive) .",
    "input": "The first line of the input contains two integers n and q ( 4 \u2264 n \u2264 200 000, 1 \u2264 q \u2264 200 000) \u2014 the length of the string s and the number of queries respectively. The second line contains a string s of length n. Every character is one of digits ' 0' \u2013' 9' . The i- th of next q lines contains two integers ai and bi ( 1 \u2264 ai \u2264 bi \u2264 n) , describing a substring in the i- th query.",
    "output": "For each query print the ugliness of the given substring.",
    "note": "In the first sample: In the first query, ugliness( \" 20166766\" ) = 4 because all four sixes must be removed. In the second query, ugliness( \" 2016676\" ) = 3 because all three sixes must be removed. In the third query, ugliness( \" 0166766\" ) = - 1 because it' s impossible to remove some digits to get a nice string. In the second sample: In the second query, ugliness( \" 01201666209167\" ) = 2. It' s optimal to remove the first digit ' 2' and the last digit ' 6' , what gives a string \" 010166620917\" , which is nice. In the third query, ugliness( \" 016662091670\" ) = 1. It' s optimal to remove the last digit ' 6' , what gives a nice string \" 01666209170\" .",
    "topics": [
      "data structures",
      "divide and conquer",
      "dp",
      "matrices"
    ],
    "id": "750E"
  },
  {
    "title": "New Year and Fireworks",
    "url": "https://codeforces.com/problemset/problem/750/D",
    "history": "One tradition of welcoming the New Year is launching fireworks into the sky. Usually a launched firework flies vertically upward for some period of time, then explodes, splitting into several parts flying in different directions. Sometimes those parts also explode after some period of time, splitting into even more parts, and so on. Limak, who lives in an infinite grid, has a single firework. The behaviour of the firework is described with a recursion depth n and a duration for each level of recursion t1, t2, . . . , tn. Once Limak launches the firework in some cell, the firework starts moving upward. After covering t1 cells ( including the starting cell) , it explodes and splits into two parts, each moving in the direction changed by 45 degrees ( see the pictures below for clarification) . So, one part moves in the top- left direction, while the other one moves in the top- right direction. Each part explodes again after covering t2 cells, splitting into two parts moving in directions again changed by 45 degrees. The process continues till the n- th level of recursion, when all 2n - 1 existing parts explode and disappear without creating new parts. After a few levels of recursion, it' s possible that some parts will be at the same place and at the same time \u2014 it is allowed and such parts do not crash. Before launching the firework, Limak must make sure that nobody stands in cells which will be visited at least once by the firework. Can you count the number of those cells?",
    "input": "The first line of the input contains a single integer n ( 1 \u2264 n \u2264 30) \u2014 the total depth of the recursion. The second line contains n integers t1, t2, . . . , tn ( 1 \u2264 ti \u2264 5) . On the i- th level each of 2i - 1 parts will cover ti cells before exploding.",
    "output": "Print one integer, denoting the number of cells which will be visited at least once by any part of the firework.",
    "note": "For the first sample, the drawings below show the situation after each level of recursion. Limak launched the firework from the bottom- most red cell. It covered t1 = 4 cells ( marked red) , exploded and divided into two parts ( their further movement is marked green) . All explosions are marked with an ' X' character. On the last drawing, there are 4 red, 4 green, 8 orange and 23 pink cells. So, the total number of visited cells is 4 + 4 + 8 + 23 = 39. For the second sample, the drawings below show the situation after levels 4, 5 and 6. The middle drawing shows directions of all parts that will move in the next level.",
    "topics": [
      "brute force",
      "data structures",
      "dfs and similar",
      "dp",
      "implementation"
    ],
    "id": "750D"
  },
  {
    "title": "Inversions After Shuffle",
    "url": "https://codeforces.com/problemset/problem/749/E",
    "history": "You are given a permutation of integers from 1 to n. Exactly once you apply the following operation to this permutation: pick a random segment and shuffle its elements. Formally: Pick a random segment ( continuous subsequence) from l to r. All segments are equiprobable. Let k = r - l + 1, i. e. the length of the chosen segment. Pick a random permutation of integers from 1 to k, p1, p2, . . . , pk. All k! permutation are equiprobable. This permutation is applied to elements of the chosen segment, i. e. permutation a1, a2, . . . , al - 1, al, al + 1, . . . , ar - 1, ar, ar + 1, . . . , an is transformed to a1, a2, . . . , al - 1, al - 1 + p1, al - 1 + p2, . . . , al - 1 + pk - 1, al - 1 + pk, ar + 1, . . . , an. Inversion if a pair of elements ( not necessary neighbouring) with the wrong relative order. In other words, the number of inversion is equal to the number of pairs ( i, j) such that i < j and ai > aj. Find the expected number of inversions after we apply exactly one operation mentioned above.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 100 000) \u2014 the length of the permutation. The second line contains n distinct integers from 1 to n \u2014 elements of the permutation.",
    "output": "Print one real value \u2014 the expected number of inversions. Your answer will be considered correct if its absolute or relative error does not exceed 10 - 9. Namely: let' s assume that your answer is a, and the answer of the jury is b. The checker program will consider your answer correct, if .",
    "note": "",
    "topics": [
      "data structures",
      "probabilities"
    ],
    "id": "749E"
  },
  {
    "title": "Leaving Auction",
    "url": "https://codeforces.com/problemset/problem/749/D",
    "history": "There are n people taking part in auction today. The rules of auction are classical. There were n bids made, though it' s not guaranteed they were from different people. It might happen that some people made no bids at all. Each bid is define by two integers ( ai, bi) , where ai is the index of the person, who made this bid and bi is its size. Bids are given in chronological order, meaning bi < bi + 1 for all i < n. Moreover, participant never makes two bids in a row ( no one updates his own bid) , i. e. ai = \u0338 ai + 1 for all i < n. Now you are curious with the following question: who ( and which bid) will win the auction if some participants were absent? Consider that if someone was absent, all his bids are just removed and no new bids are added. Note, that if during this imaginary exclusion of some participants it happens that some of the remaining participants makes a bid twice ( or more times) in a row, only first of these bids is counted. For better understanding take a look at the samples. You have several questions in your mind, compute the answer for each of them.",
    "input": "The first line of the input contains an integer n ( 1 \u2264 n \u2264 200 000) \u2014 the number of participants and bids. Each of the following n lines contains two integers ai and bi ( 1 \u2264 ai \u2264 n, 1 \u2264 bi \u2264 109, bi < bi + 1) \u2014 the number of participant who made the i- th bid and the size of this bid. Next line contains an integer q ( 1 \u2264 q \u2264 200 000) \u2014 the number of question you have in mind. Each of next q lines contains an integer k ( 1 \u2264 k \u2264 n) , followed by k integers lj ( 1 \u2264 lj \u2264 n) \u2014 the number of people who are not coming in this question and their indices. It is guarenteed that lj values are different for a single question. It' s guaranteed that the sum of k over all question won' t exceed 200 000.",
    "output": "For each question print two integer \u2014 the index of the winner and the size of the winning bid. If there is no winner ( there are no remaining bids at all) , print two zeroes.",
    "note": "Consider the first sample: In the first question participant number 3 is absent so the sequence of bids looks as follows: 1 10 2 100 1 10 000 2 100 000 Participant number 2 wins with the bid 100 000. In the second question participants 2 and 3 are absent, so the sequence of bids looks: 1 10 1 10 000 The winner is, of course, participant number 1 but the winning bid is 10 instead of 10 000 as no one will ever increase his own bid ( in this problem) . In the third question participants 1 and 2 are absent and the sequence is: 3 1 000 3 1 000 000 The winner is participant 3 with the bid 1 000.",
    "topics": [
      "binary search",
      "data structures"
    ],
    "id": "749D"
  },
  {
    "title": "Santa Claus and Tangerines",
    "url": "https://codeforces.com/problemset/problem/748/E",
    "history": "Santa Claus has n tangerines, and the i- th of them consists of exactly ai slices. Santa Claus came to a school which has k pupils. Santa decided to treat them with tangerines. However, there can be too few tangerines to present at least one tangerine to each pupil. So Santa decided to divide tangerines into parts so that no one will be offended. In order to do this, he can divide a tangerine or any existing part into two smaller equal parts. If the number of slices in the part he wants to split is odd, then one of the resulting parts will have one slice more than the other. It' s forbidden to divide a part consisting of only one slice. Santa Claus wants to present to everyone either a whole tangerine or exactly one part of it ( that also means that everyone must get a positive number of slices) . One or several tangerines or their parts may stay with Santa. Let bi be the number of slices the i- th pupil has in the end. Let Santa' s joy be the minimum among all bi' s. Your task is to find the maximum possible joy Santa can have after he treats everyone with tangerines ( or their parts) .",
    "input": "The first line contains two positive integers n and k ( 1 \u2264 n \u2264 106, 1 \u2264 k \u2264 2\u00b7109) denoting the number of tangerines and the number of pupils, respectively. The second line consists of n positive integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 107) , where ai stands for the number of slices the i- th tangerine consists of.",
    "output": "If there' s no way to present a tangerine or a part of tangerine to everyone, print - 1. Otherwise, print the maximum possible joy that Santa can have.",
    "note": "In the first example Santa should divide the second tangerine into two parts with 5 and 4 slices. After that he can present the part with 5 slices to the first pupil and the whole first tangerine ( with 5 slices, too) to the second pupil. In the second example Santa should divide both tangerines, so that he' ll be able to present two parts with 6 slices and two parts with 7 slices. In the third example Santa Claus can' t present 2 slices to 3 pupils in such a way that everyone will have anything.",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "two pointers"
    ],
    "id": "748E"
  },
  {
    "title": "Santa Claus and a Palindrome",
    "url": "https://codeforces.com/problemset/problem/748/D",
    "history": "Santa Claus likes palindromes very much. There was his birthday recently. k of his friends came to him to congratulate him, and each of them presented to him a string si having the same length n. We denote the beauty of the i- th string by ai. It can happen that ai is negative \u2014 that means that Santa doesn' t find this string beautiful at all. Santa Claus is crazy about palindromes. He is thinking about the following question: what is the maximum possible total beauty of a palindrome which can be obtained by concatenating some ( possibly all) of the strings he has? Each present can be used at most once. Note that all strings have the same length n. Recall that a palindrome is a string that doesn' t change after one reverses it. Since the empty string is a palindrome too, the answer can' t be negative. Even if all ai' s are negative, Santa can obtain the empty string.",
    "input": "The first line contains two positive integers k and n divided by space and denoting the number of Santa friends and the length of every string they' ve presented, respectively ( 1 \u2264 k, n \u2264 100 000; n\u00b7k \u2264 100 000) . k lines follow. The i- th of them contains the string si and its beauty ai ( - 10 000 \u2264 ai \u2264 10 000) . The string consists of n lowercase English letters, and its beauty is integer. Some of strings may coincide. Also, equal strings can have different beauties.",
    "output": "In the only line print the required maximum possible beauty.",
    "note": "In the first example Santa can obtain abbaaaxyxaaabba by concatenating strings 5, 2, 7, 6 and 3 ( in this order) .",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy"
    ],
    "id": "748D"
  },
  {
    "title": "Music in Car",
    "url": "https://codeforces.com/problemset/problem/746/F",
    "history": "Sasha reaches the work by car. It takes exactly k minutes. On his way he listens to music. All songs in his playlist go one by one, after listening to the i- th song Sasha gets a pleasure which equals ai. The i- th song lasts for ti minutes. Before the beginning of his way Sasha turns on some song x and then he listens to the songs one by one: at first, the song x, then the song ( x + 1) , then the song number ( x + 2) , and so on. He listens to songs until he reaches the work or until he listens to the last song in his playlist. Sasha can listen to each song to the end or partly. In the second case he listens to the song for integer number of minutes, at least half of the song' s length. Formally, if the length of the song equals d minutes, Sasha listens to it for no less than minutes, then he immediately switches it to the next song ( if there is such) . For example, if the length of the song which Sasha wants to partly listen to, equals 5 minutes, then he should listen to it for at least 3 minutes, if the length of the song equals 8 minutes, then he should listen to it for at least 4 minutes. It takes no time to switch a song. Sasha wants to listen partly no more than w songs. If the last listened song plays for less than half of its length, then Sasha doesn' t get pleasure from it and that song is not included to the list of partly listened songs. It is not allowed to skip songs. A pleasure from a song does not depend on the listening mode, for the i- th song this value equals ai. Help Sasha to choose such x and no more than w songs for partial listening to get the maximum pleasure. Write a program to find the maximum pleasure Sasha can get from the listening to the songs on his way to the work.",
    "input": "The first line contains three integers n, w and k ( 1 \u2264 w \u2264 n \u2264 2\u00b7105, 1 \u2264 k \u2264 2\u00b7109) \u2014 the number of songs in the playlist, the number of songs Sasha can listen to partly and time in minutes which Sasha needs to reach work. The second line contains n positive integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 104) , where ai equals the pleasure Sasha gets after listening to the i- th song. The third line contains n positive integers t1, t2, . . . , tn ( 2 \u2264 ti \u2264 104) , where ti equals the length of the i- th song in minutes.",
    "output": "Print the maximum pleasure Sasha can get after listening to the songs on the way to work.",
    "note": "In the first example Sasha needs to start listening from the song number 2. He should listen to it partly ( for 4 minutes) , then listen to the song number 3 to the end ( for 3 minutes) and then partly listen to the song number 4 ( for 3 minutes) . After listening to these songs Sasha will get pleasure which equals 4 + 3 + 5 = 12. Sasha will not have time to listen to the song number 5 because he will spend 4 + 3 + 3 = 10 minutes listening to songs number 2, 3 and 4 and only 1 minute is left after that.",
    "topics": [
      "data structures",
      "greedy",
      "two pointers"
    ],
    "id": "746F"
  },
  {
    "title": "Arpa\u2019s abnormal DNA and Mehrdad\u2019s deep interest",
    "url": "https://codeforces.com/problemset/problem/741/E",
    "history": "All of us know that girls in Arpa\u2019s land are. . . ok, you\u2019ve got the idea : DAnyone knows that Arpa isn' t a normal man, he is . . . well, sorry, I can' t explain it more. Mehrdad is interested about the reason, so he asked Sipa, one of the best biology scientists in Arpa' s land, for help. Sipa has a DNA editor. Sipa put Arpa under the DNA editor. DNA editor showed Arpa' s DNA as a string S consisting of n lowercase English letters. Also Sipa has another DNA T consisting of lowercase English letters that belongs to a normal man. Now there are ( n + 1) options to change Arpa' s DNA, numbered from 0 to n. i- th of them is to put T between i- th and ( i + 1) - th characters of S ( 0 \u2264 i \u2264 n) . If i = 0, T will be put before S, and if i = n, it will be put after S. Mehrdad wants to choose the most interesting option for Arpa' s DNA among these n + 1 options. DNA A is more interesting than B if A is lexicographically smaller than B. Mehrdad asked Sipa q questions: Given integers l, r, k, x, y, what is the most interesting option if we only consider such options i that l \u2264 i \u2264 r and ? If there are several most interesting options, Mehrdad wants to know one with the smallest number i. Since Sipa is a biology scientist but not a programmer, you should help him.",
    "input": "The first line contains strings S, T and integer q ( 1 \u2264 | S| , | T| , q \u2264 105) \u2014 Arpa' s DNA, the DNA of a normal man, and the number of Mehrdad' s questions. The strings S and T consist only of small English letters. Next q lines describe the Mehrdad' s questions. Each of these lines contain five integers l, r, k, x, y ( 0 \u2264 l \u2264 r \u2264 n, 1 \u2264 k \u2264 n, 0 \u2264 x \u2264 y < k) .",
    "output": "Print q integers. The j- th of them should be the number i of the most interesting option among those that satisfy the conditions of the j- th question. If there is no option i satisfying the conditions in some question, print - 1.",
    "note": "Explanation of first sample case: In the first question Sipa has two options: dabc ( i = 0) and abdc ( i = 2) . The latter ( abcd) is better than abdc, so answer is 2. In the last question there is no i such that 0 \u2264 i \u2264 1 and .",
    "topics": [
      "data structures",
      "string suffix structures"
    ],
    "id": "741E"
  },
  {
    "title": "Arpa\u2019s letter-marked tree and Mehrdad\u2019s Dokhtar-kosh paths",
    "url": "https://codeforces.com/problemset/problem/741/D",
    "history": "Just in case somebody missed it: we have wonderful girls in Arpa\u2019s land. Arpa has a rooted tree ( connected acyclic graph) consisting of n vertices. The vertices are numbered 1 through n, the vertex 1 is the root. There is a letter written on each edge of this tree. Mehrdad is a fan of Dokhtar- kosh things. He call a string Dokhtar- kosh, if we can shuffle the characters in string such that it becomes palindrome. He asks Arpa, for each vertex v, what is the length of the longest simple path in subtree of v that form a Dokhtar- kosh string.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 5\u00b7105) \u2014 the number of vertices in the tree. ( n - 1) lines follow, the i- th of them contain an integer pi + 1 and a letter ci + 1 ( 1 \u2264 pi + 1 \u2264 i, ci + 1 is lowercase English letter, between a and v, inclusively) , that mean that there is an edge between nodes pi + 1 and i + 1 and there is a letter ci + 1 written on this edge.",
    "output": "Print n integers. The i- th of them should be the length of the longest simple path in subtree of the i- th vertex that form a Dokhtar- kosh string.",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "trees"
    ],
    "id": "741D"
  },
  {
    "title": "Gosha is hunting",
    "url": "https://codeforces.com/problemset/problem/739/E",
    "history": "Gosha is hunting. His goal is to catch as many Pokemons as possible. Gosha has a Poke Balls and b Ultra Balls. There are n Pokemons. They are numbered 1 through n. Gosha knows that if he throws a Poke Ball at the i- th Pokemon he catches it with probability pi. If he throws an Ultra Ball at the i- th Pokemon he catches it with probability ui. He can throw at most one Ball of each type at any Pokemon. The hunting proceeds as follows: at first, Gosha chooses no more than a Pokemons at which he will throw Poke Balls and no more than b Pokemons at which he will throw Ultra Balls. After that, he throws the chosen Balls at the chosen Pokemons. If he throws both Ultra Ball and Poke Ball at some Pokemon, he is caught if and only if he is caught by any of these Balls. The outcome of a throw doesn' t depend on the other throws. Gosha would like to know what is the expected number of the Pokemons he catches if he acts in an optimal way. In other words, he would like to know the maximum possible expected number of Pokemons can catch.",
    "input": "The first line contains three integers n, a and b ( 2 \u2264 n \u2264 2000, 0 \u2264 a, b \u2264 n) \u2014 the number of Pokemons, the number of Poke Balls and the number of Ultra Balls. The second line contains n real values p1, p2, . . . , pn ( 0 \u2264 pi \u2264 1) , where pi is the probability of catching the i- th Pokemon if Gosha throws a Poke Ball to it. The third line contains n real values u1, u2, . . . , un ( 0 \u2264 ui \u2264 1) , where ui is the probability of catching the i- th Pokemon if Gosha throws an Ultra Ball to it. All the probabilities are given with exactly three digits after the decimal separator.",
    "output": "Print the maximum possible expected number of Pokemons Gosha can catch. The answer is considered correct if it' s absolute or relative error doesn' t exceed 10 - 4.",
    "note": "",
    "topics": [
      "brute force",
      "data structures",
      "dp",
      "flows",
      "math",
      "probabilities",
      "sortings"
    ],
    "id": "739E"
  },
  {
    "title": "Alyona and towers",
    "url": "https://codeforces.com/problemset/problem/739/C",
    "history": "Alyona has built n towers by putting small cubes some on the top of others. Each cube has size 1 \u00d7 1 \u00d7 1. A tower is a non- zero amount of cubes standing on the top of each other. The towers are next to each other, forming a row. Sometimes Alyona chooses some segment towers, and put on the top of each tower several cubes. Formally, Alyouna chooses some segment of towers from li to ri and adds di cubes on the top of them. Let the sequence a1, a2, . . . , an be the heights of the towers from left to right. Let' s call as a segment of towers al, al + 1, . . . , ar a hill if the following condition holds: there is integer k ( l \u2264 k \u2264 r) such that al < al + 1 < al + 2 < . . . < ak > ak + 1 > ak + 2 > . . . > ar. After each addition of di cubes on the top of the towers from li to ri, Alyona wants to know the maximum width among all hills. The width of a hill is the number of towers in it.",
    "input": "The first line contain single integer n ( 1 \u2264 n \u2264 3\u00b7105) \u2014 the number of towers. The second line contain n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) \u2014 the number of cubes in each tower. The third line contain single integer m ( 1 \u2264 m \u2264 3\u00b7105) \u2014 the number of additions. The next m lines contain 3 integers each. The i- th of these lines contains integers li, ri and di ( 1 \u2264 l \u2264 r \u2264 n, 1 \u2264 di \u2264 109) , that mean that Alyona puts di cubes on the tio of each of the towers from li to ri.",
    "output": "Print m lines. In i- th line print the maximum width of the hills after the i- th addition.",
    "note": "The first sample is as follows: After addition of 2 cubes on the top of each towers from the first to the third, the number of cubes in the towers become equal to [ 7, 7, 7, 5, 5] . The hill with maximum width is [ 7, 5] , thus the maximum width is 2. After addition of 1 cube on the second tower, the number of cubes in the towers become equal to [ 7, 8, 7, 5, 5] . The hill with maximum width is now [ 7, 8, 7, 5] , thus the maximum width is 4. After addition of 1 cube on the fourth tower, the number of cubes in the towers become equal to [ 7, 8, 7, 6, 5] . The hill with maximum width is now [ 7, 8, 7, 6, 5] , thus the maximum width is 5.",
    "topics": [
      "data structures"
    ],
    "id": "739C"
  },
  {
    "title": "Alyona and a tree",
    "url": "https://codeforces.com/problemset/problem/739/B",
    "history": "Alyona has a tree with n vertices. The root of the tree is the vertex 1. In each vertex Alyona wrote an positive integer, in the vertex i she wrote ai. Moreover, the girl wrote a positive integer to every edge of the tree ( possibly, different integers on different edges) . Let' s define dist( v, u) as the sum of the integers written on the edges of the simple path from v to u. The vertex v controls the vertex u ( v = \u0338 u) if and only if u is in the subtree of v and dist( v, u) \u2264 au. Alyona wants to settle in some vertex. In order to do this, she wants to know for each vertex v what is the number of vertices u such that v controls u.",
    "input": "The first line contains single integer n ( 1 \u2264 n \u2264 2\u00b7105) . The second line contains n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) \u2014 the integers written in the vertices. The next ( n - 1) lines contain two integers each. The i- th of these lines contains integers pi and wi ( 1 \u2264 pi \u2264 n, 1 \u2264 wi \u2264 109) \u2014 the parent of the ( i + 1) - th vertex in the tree and the number written on the edge between pi and ( i + 1) . It is guaranteed that the given graph is a tree.",
    "output": "Print n integers \u2014 the i- th of these numbers should be equal to the number of vertices that the i- th vertex controls.",
    "note": "In the example test case the vertex 1 controls the vertex 3, the vertex 3 controls the vertex 5 ( note that is doesn' t mean the vertex 1 controls the vertex 5) .",
    "topics": [
      "binary search",
      "data structures",
      "dfs and similar",
      "graphs",
      "trees"
    ],
    "id": "739B"
  },
  {
    "title": "Drivers Dissatisfaction",
    "url": "https://codeforces.com/problemset/problem/733/F",
    "history": "In one kingdom there are n cities and m two- way roads. Each road connects a pair of cities, and for each road we know the level of drivers dissatisfaction \u2014 the value wi. For each road we know the value ci \u2014 how many lamziks we should spend to reduce the level of dissatisfaction with this road by one. Thus, to reduce the dissatisfaction with the i- th road by k, we should spend k\u00b7ci lamziks. And it is allowed for the dissatisfaction to become zero or even negative. In accordance with the king' s order, we need to choose n - 1 roads and make them the main roads. An important condition must hold: it should be possible to travel from any city to any other by the main roads. The road ministry has a budget of S lamziks for the reform. The ministry is going to spend this budget for repair of some roads ( to reduce the dissatisfaction with them) , and then to choose the n - 1 main roads. Help to spend the budget in such a way and then to choose the main roads so that the total dissatisfaction with the main roads will be as small as possible. The dissatisfaction with some roads can become negative. It is not necessary to spend whole budget S. It is guaranteed that it is possible to travel from any city to any other using existing roads. Each road in the kingdom is a two- way road.",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 2\u00b7105, n - 1 \u2264 m \u2264 2\u00b7105) \u2014 the number of cities and the number of roads in the kingdom, respectively. The second line contains m integers w1, w2, . . . , wm ( 1 \u2264 wi \u2264 109) , where wi is the drivers dissatisfaction with the i- th road. The third line contains m integers c1, c2, . . . , cm ( 1 \u2264 ci \u2264 109) , where ci is the cost ( in lamziks) of reducing the dissatisfaction with the i- th road by one. The next m lines contain the description of the roads. The i- th of this lines contain a pair of integers ai and bi ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi) which mean that the i- th road connects cities ai and bi. All roads are two- way oriented so it is possible to move by the i- th road from ai to bi, and vice versa. It is allowed that a pair of cities is connected by more than one road. The last line contains one integer S ( 0 \u2264 S \u2264 109) \u2014 the number of lamziks which we can spend for reforms.",
    "output": "In the first line print K \u2014 the minimum possible total dissatisfaction with main roads. In each of the next n - 1 lines print two integers x, vx, which mean that the road x is among main roads and the road x, after the reform, has the level of dissatisfaction vx. Consider that roads are numbered from 1 to m in the order as they are given in the input data. The edges can be printed in arbitrary order. If there are several answers, print any of them.",
    "note": "",
    "topics": [
      "data structures",
      "dsu",
      "graphs",
      "trees"
    ],
    "id": "733F"
  },
  {
    "title": "Sleep in Class",
    "url": "https://codeforces.com/problemset/problem/733/E",
    "history": "The academic year has just begun, but lessons and olympiads have already occupied all the free time. It is not a surprise that today Olga fell asleep on the Literature. She had a dream in which she was on a stairs. The stairs consists of n steps. The steps are numbered from bottom to top, it means that the lowest step has number 1, and the highest step has number n. Above each of them there is a pointer with the direction ( up or down) Olga should move from this step. As soon as Olga goes to the next step, the direction of the pointer ( above the step she leaves) changes. It means that the direction \" up\" changes to \" down\" , the direction \" down\" \u2014 to the direction \" up\" . Olga always moves to the next step in the direction which is shown on the pointer above the step. If Olga moves beyond the stairs, she will fall and wake up. Moving beyond the stairs is a moving down from the first step or moving up from the last one ( it means the n- th) step. In one second Olga moves one step up or down according to the direction of the pointer which is located above the step on which Olga had been at the beginning of the second. For each step find the duration of the dream if Olga was at this step at the beginning of the dream. Olga' s fall also takes one second, so if she was on the first step and went down, she would wake up in the next second.",
    "input": "The first line contains single integer n ( 1 \u2264 n \u2264 106) \u2014 the number of steps on the stairs. The second line contains a string s with the length n \u2014 it denotes the initial direction of pointers on the stairs. The i- th character of string s denotes the direction of the pointer above i- th step, and is either ' U' ( it means that this pointer is directed up) , or ' D' ( it means this pointed is directed down) . The pointers are given in order from bottom to top.",
    "output": "Print n numbers, the i- th of which is equal either to the duration of Olga' s dream or to - 1 if Olga never goes beyond the stairs, if in the beginning of sleep she was on the i- th step.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "data structures",
      "math",
      "two pointers"
    ],
    "id": "733E"
  },
  {
    "title": "Kostya the Sculptor",
    "url": "https://codeforces.com/problemset/problem/733/D",
    "history": "Kostya is a genial sculptor, he has an idea: to carve a marble sculpture in the shape of a sphere. Kostya has a friend Zahar who works at a career. Zahar knows about Kostya' s idea and wants to present him a rectangular parallelepiped of marble from which he can carve the sphere. Zahar has n stones which are rectangular parallelepipeds. The edges sizes of the i- th of them are ai, bi and ci. He can take no more than two stones and present them to Kostya. If Zahar takes two stones, he should glue them together on one of the faces in order to get a new piece of rectangular parallelepiped of marble. Thus, it is possible to glue a pair of stones together if and only if two faces on which they are glued together match as rectangles. In such gluing it is allowed to rotate and flip the stones in any way. Help Zahar choose such a present so that Kostya can carve a sphere of the maximum possible volume and present it to Zahar.",
    "input": "The first line contains the integer n ( 1 \u2264 n \u2264 105) . n lines follow, in the i- th of which there are three integers ai, bi and ci ( 1 \u2264 ai, bi, ci \u2264 109) \u2014 the lengths of edges of the i- th stone. Note, that two stones may have exactly the same sizes, but they still will be considered two different stones.",
    "output": "In the first line print k ( 1 \u2264 k \u2264 2) the number of stones which Zahar has chosen. In the second line print k distinct integers from 1 to n \u2014 the numbers of stones which Zahar needs to choose. Consider that stones are numbered from 1 to n in the order as they are given in the input data. You can print the stones in arbitrary order. If there are several answers print any of them.",
    "note": "In the first example we can connect the pairs of stones: 2 and 4, the size of the parallelepiped: 3 \u00d7 2 \u00d7 5, the radius of the inscribed sphere 1 2 and 5, the size of the parallelepiped: 3 \u00d7 2 \u00d7 8 or 6 \u00d7 2 \u00d7 4 or 3 \u00d7 4 \u00d7 4, the radius of the inscribed sphere 1, or 1, or 1. 5 respectively. 2 and 6, the size of the parallelepiped: 3 \u00d7 5 \u00d7 4, the radius of the inscribed sphere 1. 5 4 and 5, the size of the parallelepiped: 3 \u00d7 2 \u00d7 5, the radius of the inscribed sphere 1 5 and 6, the size of the parallelepiped: 3 \u00d7 4 \u00d7 5, the radius of the inscribed sphere 1. 5 Or take only one stone: 1 the size of the parallelepiped: 5 \u00d7 5 \u00d7 5, the radius of the inscribed sphere 2. 5 2 the size of the parallelepiped: 3 \u00d7 2 \u00d7 4, the radius of the inscribed sphere 1 3 the size of the parallelepiped: 1 \u00d7 4 \u00d7 1, the radius of the inscribed sphere 0. 5 4 the size of the parallelepiped: 2 \u00d7 1 \u00d7 3, the radius of the inscribed sphere 0. 5 5 the size of the parallelepiped: 3 \u00d7 2 \u00d7 4, the radius of the inscribed sphere 1 6 the size of the parallelepiped: 3 \u00d7 3 \u00d7 4, the radius of the inscribed sphere 1. 5 It is most profitable to take only the first stone.",
    "topics": [
      "data structures",
      "hashing"
    ],
    "id": "733D"
  },
  {
    "title": "Video Cards",
    "url": "https://codeforces.com/problemset/problem/731/F",
    "history": "Little Vlad is fond of popular computer game Bota- 2. Recently, the developers announced the new add- on named Bota- 3. Of course, Vlad immediately bought only to find out his computer is too old for the new game and needs to be updated. There are n video cards in the shop, the power of the i- th video card is equal to integer value ai. As Vlad wants to be sure the new game will work he wants to buy not one, but several video cards and unite their powers using the cutting- edge technology. To use this technology one of the cards is chosen as the leading one and other video cards are attached to it as secondary. For this new technology to work it' s required that the power of each of the secondary video cards is divisible by the power of the leading video card. In order to achieve that the power of any secondary video card can be reduced to any integer value less or equal than the current power. However, the power of the leading video card should remain unchanged, i. e. it can' t be reduced. Vlad has an infinite amount of money so he can buy any set of video cards. Help him determine which video cards he should buy such that after picking the leading video card and may be reducing some powers of others to make them work together he will get the maximum total value of video power.",
    "input": "The first line of the input contains a single integer n ( 1 \u2264 n \u2264 200 000) \u2014 the number of video cards in the shop. The second line contains n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 200 000) \u2014 powers of video cards.",
    "output": "The only line of the output should contain one integer value \u2014 the maximum possible total power of video cards working together.",
    "note": "In the first sample, it would be optimal to buy video cards with powers 3, 15 and 9. The video card with power 3 should be chosen as the leading one and all other video cards will be compatible with it. Thus, the total power would be 3 + 15 + 9 = 27. If he buys all the video cards and pick the one with the power 2 as the leading, the powers of all other video cards should be reduced by 1, thus the total power would be 2 + 2 + 14 + 8 = 26, that is less than 27. Please note, that it' s not allowed to reduce the power of the leading video card, i. e. one can' t get the total power 3 + 1 + 15 + 9 = 28. In the second sample, the optimal answer is to buy all video cards and pick the one with the power 2 as the leading. The video card with the power 7 needs it power to be reduced down to 6. The total power would be 8 + 2 + 2 + 6 = 18.",
    "topics": [
      "brute force",
      "data structures",
      "implementation",
      "math",
      "number theory"
    ],
    "id": "731F"
  },
  {
    "title": "80-th Level Archeology",
    "url": "https://codeforces.com/problemset/problem/731/D",
    "history": "Archeologists have found a secret pass in the dungeon of one of the pyramids of Cycleland. To enter the treasury they have to open an unusual lock on the door. The lock consists of n words, each consisting of some hieroglyphs. The wall near the lock has a round switch. Each rotation of this switch changes the hieroglyphs according to some rules. The instruction nearby says that the door will open only if words written on the lock would be sorted in lexicographical order ( the definition of lexicographical comparison in given in notes section) . The rule that changes hieroglyphs is the following. One clockwise rotation of the round switch replaces each hieroglyph with the next hieroglyph in alphabet, i. e. hieroglyph x ( 1 \u2264 x \u2264 c - 1) is replaced with hieroglyph ( x + 1) , and hieroglyph c is replaced with hieroglyph 1. Help archeologist determine, how many clockwise rotations they should perform in order to open the door, or determine that this is impossible, i. e. no cyclic shift of the alphabet will make the sequence of words sorted lexicographically.",
    "input": "The first line of the input contains two integers n and c ( 2 \u2264 n \u2264 500 000, 1 \u2264 c \u2264 106) \u2014 the number of words, written on the lock, and the number of different hieroglyphs. Each of the following n lines contains the description of one word. The i- th of these lines starts with integer li ( 1 \u2264 li \u2264 500 000) , that denotes the length of the i- th word, followed by li integers wi, 1, wi, 2, . . . , wi, li ( 1 \u2264 wi, j \u2264 c) \u2014 the indices of hieroglyphs that make up the i- th word. Hieroglyph with index 1 is the smallest in the alphabet and with index c \u2014 the biggest. It' s guaranteed, that the total length of all words doesn' t exceed 106.",
    "output": "If it is possible to open the door by rotating the round switch, print integer x ( 0 \u2264 x \u2264 c - 1) that defines the required number of clockwise rotations. If there are several valid x, print any of them. If it is impossible to open the door by this method, print - 1.",
    "note": "Word a1, a2, . . . , am of length m is lexicographically not greater than word b1, b2, . . . , bk of length k, if one of two conditions hold: at first position i, such that ai = \u0338 bi, the character ai goes earlier in the alphabet than character bi, i. e. a has smaller character in the first position where they differ; if there is no such position i and m \u2264 k, i. e. the first word is a prefix of the second or two words are equal. The sequence of words is said to be sorted in lexicographical order if each word ( except the last one) is lexicographically not greater than the next word. In the first sample, after the round switch is rotated 1 position clockwise the words look as follows: 1 323 1 23 1 2 3In the second sample, words are already sorted in lexicographical order. In the last sample, one can check that no shift of the alphabet will work.",
    "topics": [
      "brute force",
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "731D"
  },
  {
    "title": "Expression Queries",
    "url": "https://codeforces.com/problemset/problem/730/L",
    "history": "A simplified arithmetic expression ( SAE) is an arithmetic expression defined by the following grammar: < SAE> : : = < Number> | < SAE> + < SAE> | < SAE> * < SAE> | ( < SAE> ) < Number> : : = < Digit> | < Digit> < Number> < Digit> : : = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 In other words it' s a correct arithmetic expression that is allowed to contain brackets, numbers ( possibly with leading zeros) , multiplications and additions. For example expressions \" ( 0+ 01) \" , \" 0\" and \" 1* ( 0) \" are simplified arithmetic expressions, but expressions \" 2- 1\" , \" + 1\" and \" 1+ 2) \" are not. Given a string s1s2. . . s| s| that represents a SAE; si denotes the i- th character of the string which can be either a digit ( ' 0' - ' 9' ) , a plus sign ( ' + ' ) , a multiplication sign ( ' * ' ) , an opening round bracket ' ( ' or a closing round bracket ' ) ' . A part slsl + 1. . . sr of this string is called a sub- expression if and only if it is a SAE. You task is to answer m queries, each of which is a pair of integers li, ri ( 1 \u2264 li \u2264 ri \u2264 | s| ) . For each query determine whether the corresponding part of the given string is a sub- expression and in case it' s a sub- expression calculate its value modulo 1000000007 ( 109 + 7) . The values should be calculated using standard operator priorities.",
    "input": "The first line of the input contains non- empty string s ( 1 \u2264 | s| \u2264 4\u00b7105) which represents a correct SAE. Each character of the string can be one of the following characters: ' * ' , ' + ' , ' ( ' , ' ) ' or a digit ( ' 0' - ' 9' ) . The expression might contain extra- huge numbers. The second line contains an integer m ( 1 \u2264 m \u2264 4\u00b7105) which is the number of queries. Each of the next m lines contains two space- separated integers li, ri ( 1 \u2264 li \u2264 ri \u2264 | s| ) \u2014 the i- th query.",
    "output": "The i- th number of output should be the answer for the i- th query. If the i- th query corresponds to a valid sub- expression output the value of the sub- expression modulo 1000000007 ( 109 + 7) . Otherwise output - 1 as an answer for the query. Print numbers on separate lines.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": "730L"
  },
  {
    "title": "Subordinates",
    "url": "https://codeforces.com/problemset/problem/729/E",
    "history": "There are n workers in a company, each of them has a unique id from 1 to n. Exaclty one of them is a chief, his id is s. Each worker except the chief has exactly one immediate superior. There was a request to each of the workers to tell how how many superiors ( not only immediate) . Worker' s superiors are his immediate superior, the immediate superior of the his immediate superior, and so on. For example, if there are three workers in the company, from which the first is the chief, the second worker' s immediate superior is the first, the third worker' s immediate superior is the second, then the third worker has two superiors, one of them is immediate and one not immediate. The chief is a superior to all the workers except himself. Some of the workers were in a hurry and made a mistake. You are to find the minimum number of workers that could make a mistake.",
    "input": "The first line contains two positive integers n and s ( 1 \u2264 n \u2264 2\u00b7105, 1 \u2264 s \u2264 n) \u2014 the number of workers and the id of the chief. The second line contains n integers a1, a2, . . . , an ( 0 \u2264 ai \u2264 n - 1) , where ai is the number of superiors ( not only immediate) the worker with id i reported about.",
    "output": "Print the minimum number of workers that could make a mistake.",
    "note": "In the first example it is possible that only the first worker made a mistake. Then: the immediate superior of the first worker is the second worker, the immediate superior of the third worker is the first worker, the second worker is the chief.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "graphs",
      "greedy",
      "sortings"
    ],
    "id": "729E"
  },
  {
    "title": "Games on a CD",
    "url": "https://codeforces.com/problemset/problem/727/E",
    "history": "Several years ago Tolya had n computer games and at some point of time he decided to burn them to CD. After that he wrote down the names of the games one after another in a circle on the CD in clockwise order. The names were distinct, the length of each name was equal to k. The names didn' t overlap. Thus, there is a cyclic string of length n\u00b7k written on the CD. Several years have passed and now Tolya can' t remember which games he burned to his CD. He knows that there were g popular games that days. All of the games he burned were among these g games, and no game was burned more than once. You have to restore any valid list of games Tolya could burn to the CD several years ago.",
    "input": "The first line of the input contains two positive integers n and k ( 1 \u2264 n \u2264 105, 1 \u2264 k \u2264 105) \u2014 the amount of games Tolya burned to the CD, and the length of each of the names. The second line of the input contains one string consisting of lowercase English letters \u2014 the string Tolya wrote on the CD, split in arbitrary place. The length of the string is n\u00b7k. It is guaranteed that the length is not greater than 106. The third line of the input contains one positive integer g ( n \u2264 g \u2264 105) \u2014 the amount of popular games that could be written on the CD. It is guaranteed that the total length of names of all popular games is not greater than 2\u00b7106. Each of the next g lines contains a single string \u2014 the name of some popular game. Each name consists of lowercase English letters and has length k. It is guaranteed that the names are distinct.",
    "output": "If there is no answer, print \" NO\" ( without quotes) . Otherwise, print two lines. In the first line print \" YES\" ( without quotes) . In the second line, print n integers \u2014 the games which names were written on the CD. You should print games in the order they could have been written on the CD, it means, in clockwise order. You can print games starting from any position. Remember, that no game was burned to the CD more than once. If there are several possible answers, print any of them.",
    "note": "",
    "topics": [
      "data structures",
      "hashing",
      "string suffix structures",
      "strings"
    ],
    "id": "727E"
  },
  {
    "title": "Contest Balloons",
    "url": "https://codeforces.com/problemset/problem/725/D",
    "history": "One tradition of ACM- ICPC contests is that a team gets a balloon for every solved problem. We assume that the submission time doesn' t matter and teams are sorted only by the number of balloons they have. It means that one' s place is equal to the number of teams with more balloons, increased by 1. For example, if there are seven teams with more balloons, you get the eight place. Ties are allowed. You should know that it' s important to eat before a contest. If the number of balloons of a team is greater than the weight of this team, the team starts to float in the air together with their workstation. They eventually touch the ceiling, what is strictly forbidden by the rules. The team is then disqualified and isn' t considered in the standings. A contest has just finished. There are n teams, numbered 1 through n. The i- th team has ti balloons and weight wi. It' s guaranteed that ti doesn' t exceed wi so nobody floats initially. Limak is a member of the first team. He doesn' t like cheating and he would never steal balloons from other teams. Instead, he can give his balloons away to other teams, possibly making them float. Limak can give away zero or more balloons of his team. Obviously, he can' t give away more balloons than his team initially has. What is the best place Limak can get?",
    "input": "The first line of the standard input contains one integer n ( 2 \u2264 n \u2264 300 000) \u2014 the number of teams. The i- th of n following lines contains two integers ti and wi ( 0 \u2264 ti \u2264 wi \u2264 1018) \u2014 respectively the number of balloons and the weight of the i- th team. Limak is a member of the first team.",
    "output": "Print one integer denoting the best place Limak can get.",
    "note": "In the first sample, Limak has 20 balloons initially. There are three teams with more balloons ( 32, 40 and 45 balloons) , so Limak has the fourth place initially. One optimal strategy is: Limak gives 6 balloons away to a team with 32 balloons and weight 37, which is just enough to make them fly. Unfortunately, Limak has only 14 balloons now and he would get the fifth place. Limak gives 6 balloons away to a team with 45 balloons. Now they have 51 balloons and weight 50 so they fly and get disqualified. Limak gives 1 balloon to each of two teams with 16 balloons initially. Limak has 20 - 6 - 6 - 1 - 1 = 6 balloons. There are three other teams left and their numbers of balloons are 40, 14 and 2. Limak gets the third place because there are two teams with more balloons. In the second sample, Limak has the second place and he can' t improve it. In the third sample, Limak has just enough balloons to get rid of teams 2, 3 and 5 ( the teams with 81 000 000 000, 5 000 000 000 and 46 000 000 000 balloons respectively) . With zero balloons left, he will get the second place ( ex- aequo with team 6 and team 7) .",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "725D"
  },
  {
    "title": "Dense Subsequence",
    "url": "https://codeforces.com/problemset/problem/724/D",
    "history": "You are given a string s, consisting of lowercase English letters, and the integer m. One should choose some symbols from the given string so that any contiguous subsegment of length m has at least one selected symbol. Note that here we choose positions of symbols, not the symbols themselves. Then one uses the chosen symbols to form a new string. All symbols from the chosen position should be used, but we are allowed to rearrange them in any order. Formally, we choose a subsequence of indices 1 \u2264 i1 < i2 < . . . < it \u2264 | s| . The selected sequence must meet the following condition: for every j such that 1 \u2264 j \u2264 | s| - m + 1, there must be at least one selected index that belongs to the segment [ j, j + m - 1] , i. e. there should exist a k from 1 to t, such that j \u2264 ik \u2264 j + m - 1. Then we take any permutation p of the selected indices and form a new string sip1sip2. . . sipt. Find the lexicographically smallest string, that can be obtained using this procedure.",
    "input": "The first line of the input contains a single integer m ( 1 \u2264 m \u2264 100 000) . The second line contains the string s consisting of lowercase English letters. It is guaranteed that this string is non- empty and its length doesn' t exceed 100 000. It is also guaranteed that the number m doesn' t exceed the length of the string s.",
    "output": "Print the single line containing the lexicographically smallest string, that can be obtained using the procedure described above.",
    "note": "In the first sample, one can choose the subsequence 3 and form a string \" a\" . In the second sample, one can choose the subsequence 1, 2, 4 ( symbols on this positions are ' a' , ' b' and ' a' ) and rearrange the chosen symbols to form a string \" aab\" .",
    "topics": [
      "data structures",
      "greedy",
      "strings"
    ],
    "id": "724D"
  },
  {
    "title": "Cyclic Cipher",
    "url": "https://codeforces.com/problemset/problem/722/F",
    "history": "You are given n sequences. Each sequence consists of positive integers, not exceeding m. All integers in one sequence are distinct, but the same integer may appear in multiple sequences. The length of the i- th sequence is ki. Each second integers in each of the sequences are shifted by one to the left, i. e. integers at positions i > 1 go to positions i - 1, while the first integers becomes the last. Each second we take the first integer of each sequence and write it down to a new array. Then, for each value x from 1 to m we compute the longest segment of the array consisting of element x only. The above operation is performed for 10100 seconds. For each integer from 1 to m find out the longest segment found at this time.",
    "input": "The first line of the input contains two integers n and m ( 1 \u2264 n, m \u2264 100 000) \u2014 the number of sequences and the maximum integer that can appear in the sequences. Then follow n lines providing the sequences. Each of them starts with an integer ki ( 1 \u2264 ki \u2264 40) \u2014 the number of integers in the sequence, proceeded by ki positive integers \u2014 elements of the sequence. It' s guaranteed that all integers in each sequence are pairwise distinct and do not exceed m. The total length of all sequences doesn' t exceed 200 000.",
    "output": "Print m integers, the i- th of them should be equal to the length of the longest segment of the array with all its values equal to i during the first 10100 seconds.",
    "note": "",
    "topics": [
      "chinese remainder theorem",
      "data structures",
      "implementation",
      "number theory",
      "two pointers"
    ],
    "id": "722F"
  },
  {
    "title": "Generating Sets",
    "url": "https://codeforces.com/problemset/problem/722/D",
    "history": "You are given a set Y of n distinct positive integers y1, y2, . . . , yn. Set X of n distinct positive integers x1, x2, . . . , xn is said to generate set Y if one can transform X to Y by applying some number of the following two operation to integers in X: Take any integer xi and multiply it by two, i. e. replace xi with 2\u00b7xi. Take any integer xi, multiply it by two and add one, i. e. replace xi with 2\u00b7xi + 1. Note that integers in X are not required to be distinct after each operation. Two sets of distinct integers X and Y are equal if they are equal as sets. In other words, if we write elements of the sets in the array in the increasing order, these arrays would be equal. Note, that any set of integers ( or its permutation) generates itself. You are given a set Y and have to find a set X that generates Y and the maximum element of X is mininum possible.",
    "input": "The first line of the input contains a single integer n ( 1 \u2264 n \u2264 50 000) \u2014 the number of elements in Y. The second line contains n integers y1, . . . , yn ( 1 \u2264 yi \u2264 109) , that are guaranteed to be distinct.",
    "output": "Print n integers \u2014 set of distinct integers that generate Y and the maximum element of which is minimum possible. If there are several such sets, print any of them.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "dfs and similar",
      "greedy",
      "strings",
      "trees"
    ],
    "id": "722D"
  },
  {
    "title": "Destroying Array",
    "url": "https://codeforces.com/problemset/problem/722/C",
    "history": "You are given an array consisting of n non- negative integers a1, a2, . . . , an. You are going to destroy integers in the array one by one. Thus, you are given the permutation of integers from 1 to n defining the order elements of the array are destroyed. After each element is destroyed you have to find out the segment of the array, such that it contains no destroyed elements and the sum of its elements is maximum possible. The sum of elements in the empty segment is considered to be 0.",
    "input": "The first line of the input contains a single integer n ( 1 \u2264 n \u2264 100 000) \u2014 the length of the array. The second line contains n integers a1, a2, . . . , an ( 0 \u2264 ai \u2264 109) . The third line contains a permutation of integers from 1 to n \u2014 the order used to destroy elements.",
    "output": "Print n lines. The i- th line should contain a single integer \u2014 the maximum possible sum of elements on the segment containing no destroyed elements, after first i operations are performed.",
    "note": "Consider the first sample: Third element is destroyed. Array is now 1 3 * 5. Segment with maximum sum 5 consists of one integer 5. Fourth element is destroyed. Array is now 1 3 * * . Segment with maximum sum 4 consists of two integers 1 3. First element is destroyed. Array is now * 3 * * . Segment with maximum sum 3 consists of one integer 3. Last element is destroyed. At this moment there are no valid nonempty segments left in this array, so the answer is equal to 0.",
    "topics": [
      "data structures",
      "dsu"
    ],
    "id": "722C"
  },
  {
    "title": "Maxim and Array",
    "url": "https://codeforces.com/problemset/problem/721/D",
    "history": "Recently Maxim has found an array of n integers, needed by no one. He immediately come up with idea of changing it: he invented positive integer x and decided to add or subtract it from arbitrary array elements. Formally, by applying single operation Maxim chooses integer i ( 1 \u2264 i \u2264 n) and replaces the i- th element of array ai either with ai + x or with ai - x. Please note that the operation may be applied more than once to the same position. Maxim is a curious minimalis, thus he wants to know what is the minimum value that the product of all array elements ( i. e. ) can reach, if Maxim would apply no more than k operations to it. Please help him in that.",
    "input": "The first line of the input contains three integers n, k and x ( 1 \u2264 n, k \u2264 200 000, 1 \u2264 x \u2264 109) \u2014 the number of elements in the array, the maximum number of operations and the number invented by Maxim, respectively. The second line contains n integers a1, a2, . . . , an ( ) \u2014 the elements of the array found by Maxim.",
    "output": "Print n integers b1, b2, . . . , bn in the only line \u2014 the array elements after applying no more than k operations to the array. In particular, should stay true for every 1 \u2264 i \u2264 n, but the product of all array elements should be minimum possible. If there are multiple answers, print any of them.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "math"
    ],
    "id": "721D"
  },
  {
    "title": "Array Covering",
    "url": "https://codeforces.com/problemset/problem/720/F",
    "history": "Misha has an array of integers of length n. He wants to choose k different continuous subarrays, so that each element of the array belongs to at least one of the chosen subarrays. Misha wants to choose the subarrays in such a way that if he calculated the sum of elements for each subarray, and then add up all these sums, the resulting value was maximum possible.",
    "input": "The first line of input contains two integers: n, k ( 1 \u2264 n \u2264 100 000, 1 \u2264 k \u2264 n\u00b7( n + 1) / 2) \u2014 the number of elements in the array and the number of different subarrays that must be chosen. The second line contains n integers ai ( - 50 000 \u2264 ai \u2264 50 000) \u2014 the elements of the array.",
    "output": "Output one integer \u2014 the maximum possible value Misha can get by choosing k different subarrays.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": "720F"
  },
  {
    "title": "Slalom",
    "url": "https://codeforces.com/problemset/problem/720/D",
    "history": "Little girl Masha likes winter sports, today she' s planning to take part in slalom skiing. The track is represented as a grid composed of n \u00d7 m squares. There are rectangular obstacles at the track, composed of grid squares. Masha must get from the square ( 1, 1) to the square ( n, m) . She can move from a square to adjacent square: either to the right, or upwards. If the square is occupied by an obstacle, it is not allowed to move to that square. One can see that each obstacle can actually be passed in two ways: either it is to the right of Masha' s path, or to the left. Masha likes to try all ways to do things, so she would like to know how many ways are there to pass the track. Two ways are considered different if there is an obstacle such that it is to the right of the path in one way, and to the left of the path in the other way. Help Masha to find the number of ways to pass the track. The number of ways can be quite big, so Masha would like to know it modulo 109 + 7. The pictures below show different ways to pass the track in sample tests.",
    "input": "The first line of input data contains three positive integers: n, m and k ( 3 \u2264 n, m \u2264 106, 0 \u2264 k \u2264 105) \u2014 the size of the track and the number of obstacles. The following k lines contain four positive integers each: x1, y1, x2, y2 ( 1 \u2264 x1 \u2264 x2 \u2264 n, 1 \u2264 y1 \u2264 y2 \u2264 m) \u2014 coordinates of bottom left, and top right squares of the obstacle. It is guaranteed that there are no obstacles at squares ( 1, 1) and ( n, m) , and no obstacles overlap ( but some of them may touch) .",
    "output": "Output one integer \u2014 the number of ways to pass the track modulo 109 + 7.",
    "note": "",
    "topics": [
      "data structures",
      "dp",
      "sortings"
    ],
    "id": "720D"
  },
  {
    "title": "Sasha and Array",
    "url": "https://codeforces.com/problemset/problem/718/C",
    "history": "Sasha has an array of integers a1, a2, . . . , an. You have to perform m queries. There might be queries of two types: 1 l r x \u2014 increase all integers on the segment from l to r by values x; 2 l r \u2014 find , where f( x) is the x- th Fibonacci number. As this number may be large, you only have to find it modulo 109 + 7. In this problem we define Fibonacci numbers as follows: f( 1) = 1, f( 2) = 1, f( x) = f( x - 1) + f( x - 2) for all x > 2. Sasha is a very talented boy and he managed to perform all queries in five seconds. Will you be able to write the program that performs as well as Sasha?",
    "input": "The first line of the input contains two integers n and m ( 1 \u2264 n \u2264 100 000, 1 \u2264 m \u2264 100 000) \u2014 the number of elements in the array and the number of queries respectively. The next line contains n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) . Then follow m lines with queries descriptions. Each of them contains integers tpi, li, ri and may be xi ( 1 \u2264 tpi \u2264 2, 1 \u2264 li \u2264 ri \u2264 n, 1 \u2264 xi \u2264 109) . Here tpi = 1 corresponds to the queries of the first type and tpi corresponds to the queries of the second type. It' s guaranteed that the input will contains at least one query of the second type.",
    "output": "For each query of the second type print the answer modulo 109 + 7.",
    "note": "Initially, array a is equal to 1, 1, 2, 1, 1. The answer for the first query of the second type is f( 1) + f( 1) + f( 2) + f( 1) + f( 1) = 1 + 1 + 1 + 1 + 1 = 5. After the query 1 2 4 2 array a is equal to 1, 3, 4, 3, 1. The answer for the second query of the second type is f( 3) + f( 4) + f( 3) = 2 + 3 + 2 = 7. The answer for the third query of the second type is f( 1) + f( 3) + f( 4) + f( 3) + f( 1) = 1 + 2 + 3 + 2 + 1 = 9.",
    "topics": [
      "data structures",
      "math",
      "matrices"
    ],
    "id": "718C"
  },
  {
    "title": "Heroes of Making Magic III",
    "url": "https://codeforces.com/problemset/problem/717/F",
    "history": "I\u2019m strolling on sunshine, yeah- ah! And doesn\u2019t it feel good! Well, it certainly feels good for our Heroes of Making Magic, who are casually walking on a one- directional road, fighting imps. Imps are weak and feeble creatures and they are not good at much. However, Heroes enjoy fighting them. For fun, if nothing else. Our Hero, Ignatius, simply adores imps. He is observing a line of imps, represented as a zero- indexed array of integers a of length n, where ai denotes the number of imps at the i- th position. Sometimes, imps can appear out of nowhere. When heroes fight imps, they select a segment of the line, start at one end of the segment, and finish on the other end, without ever exiting the segment. They can move exactly one cell left or right from their current position and when they do so, they defeat one imp on the cell that they moved to, so, the number of imps on that cell decreases by one. This also applies when heroes appear at one end of the segment, at the beginning of their walk. Their goal is to defeat all imps on the segment, without ever moving to an empty cell in it ( without imps) , since they would get bored. Since Ignatius loves imps, he doesn\u2019t really want to fight them, so no imps are harmed during the events of this task. However, he would like you to tell him whether it would be possible for him to clear a certain segment of imps in the above mentioned way if he wanted to. You are given q queries, which have two types: 1 a b k \u2014 denotes that k imps appear at each cell from the interval [ a, b] 2 a b - asks whether Ignatius could defeat all imps on the interval [ a, b] in the way described above",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 200 000) , the length of the array a. The following line contains n integers a1, a2, . . . , an ( 0 \u2264 ai \u2264 5 000) , the initial number of imps in each cell. The third line contains a single integer q ( 1 \u2264 q \u2264 300 000) , the number of queries. The remaining q lines contain one query each. Each query is provided by integers a, b and, possibly, k ( 0 \u2264 a \u2264 b < n, 0 \u2264 k \u2264 5 000) .",
    "output": "For each second type of query output 1 if it is possible to clear the segment, and 0 if it is not.",
    "note": "For the first query, one can easily check that it is indeed impossible to get from the first to the last cell while clearing everything. After we add 1 to the second position, we can clear the segment, for example by moving in the following way: .",
    "topics": [
      "data structures"
    ],
    "id": "717F"
  },
  {
    "title": "Animals and Puzzle",
    "url": "https://codeforces.com/problemset/problem/713/D",
    "history": "Owl Sonya gave a huge lake puzzle of size n \u00d7 m to hedgehog Filya as a birthday present. Friends immediately started to assemble the puzzle, but some parts of it turned out to be empty \u2014 there was no picture on them. Parts with picture on it are denoted by 1, while empty parts are denoted by 0. Rows of the puzzle are numbered from top to bottom with integers from 1 to n, while columns are numbered from left to right with integers from 1 to m. Animals decided to complete the picture and play with it, as it might be even more fun! Owl and hedgehog ask each other some queries. Each query is provided by four integers x1, y1, x2, y2 which define the rectangle, where ( x1, y1) stands for the coordinates of the up left cell of the rectangle, while ( x2, y2) stands for the coordinates of the bottom right cell. The answer to the query is the size of the maximum square consisting of picture parts only ( only parts denoted by 1) and located fully inside the query rectangle. Help Sonya and Filya answer t queries.",
    "input": "The first line of the input contains two integers n and m ( 1 \u2264 n, m \u2264 1000) \u2014 sizes of the puzzle. Each of the following n lines contains m integers aij. Each of them is equal to 1 if the corresponding cell contains a picture and 0 if it' s empty. Next line contains an integer t ( 1 \u2264 t \u2264 1 000 000) \u2014 the number of queries. Then follow t lines with queries' descriptions. Each of them contains four integers x1, y1, x2, y2 ( 1 \u2264 x1 \u2264 x2 \u2264 n, 1 \u2264 y1 \u2264 y2 \u2264 m) \u2014 coordinates of the up left and bottom right cells of the query rectangle.",
    "output": "Print t lines. The i- th of them should contain the maximum size of the square consisting of 1- s and lying fully inside the query rectangle.",
    "note": "",
    "topics": [
      "binary search",
      "data structures"
    ],
    "id": "713D"
  },
  {
    "title": "Sonya and Queries",
    "url": "https://codeforces.com/problemset/problem/713/A",
    "history": "Today Sonya learned about long integers and invited all her friends to share the fun. Sonya has an initially empty multiset with integers. Friends give her t queries, each of one of the following type: + ai \u2014 add non- negative integer ai to the multiset. Note, that she has a multiset, thus there may be many occurrences of the same integer. - ai \u2014 delete a single occurrence of non- negative integer ai from the multiset. It' s guaranteed, that there is at least one ai in the multiset. ? s \u2014 count the number of integers in the multiset ( with repetitions) that match some pattern s consisting of 0 and 1. In the pattern, 0 stands for the even digits, while 1 stands for the odd. Integer x matches the pattern s, if the parity of the i- th from the right digit in decimal notation matches the i- th from the right digit of the pattern. If the pattern is shorter than this integer, it' s supplemented with 0- s from the left. Similarly, if the integer is shorter than the pattern its decimal notation is supplemented with the 0- s from the left. For example, if the pattern is s = 010, than integers 92, 2212, 50 and 414 match the pattern, while integers 3, 110, 25 and 1030 do not.",
    "input": "The first line of the input contains an integer t ( 1 \u2264 t \u2264 100 000) \u2014 the number of operation Sonya has to perform. Next t lines provide the descriptions of the queries in order they appear in the input file. The i- th row starts with a character ci \u2014 the type of the corresponding operation. If ci is equal to ' + ' or ' - ' then it' s followed by a space and an integer ai ( 0 \u2264 ai < 1018) given without leading zeroes ( unless it' s 0) . If ci equals ' ? ' then it' s followed by a space and a sequence of zeroes and onse, giving the pattern of length no more than 18. It' s guaranteed that there will be at least one query of type ' ? ' . It' s guaranteed that any time some integer is removed from the multiset, there will be at least one occurrence of this integer in it.",
    "output": "For each query of the third type print the number of integers matching the given pattern. Each integer is counted as many times, as it appears in the multiset at this moment of time.",
    "note": "Consider the integers matching the patterns from the queries of the third type. Queries are numbered in the order they appear in the input. 1 and 241. 361. 101 and 361. 361. 4000.",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "713A"
  },
  {
    "title": "Memory and Casinos",
    "url": "https://codeforces.com/problemset/problem/712/E",
    "history": "There are n casinos lined in a row. If Memory plays at casino i, he has probability pi to win and move to the casino on the right ( i + 1) or exit the row ( if i = n) , and a probability 1 - pi to lose and move to the casino on the left ( i - 1) or also exit the row ( if i = 1) . We say that Memory dominates on the interval i. . . j if he completes a walk such that, He starts on casino i. He never looses in casino i. He finishes his walk by winning in casino j. Note that Memory can still walk left of the 1- st casino and right of the casino n and that always finishes the process. Now Memory has some requests, in one of the following forms: 1 i a b: Set . 2 l r: Print the probability that Memory will dominate on the interval l. . . r, i. e. compute the probability that Memory will first leave the segment l. . . r after winning at casino r, if she starts in casino l. It is guaranteed that at any moment of time p is a non- decreasing sequence, i. e. pi \u2264 pi + 1 for all i from 1 to n - 1. Please help Memory by answering all his requests!",
    "input": "The first line of the input contains two integers n and q( 1 \u2264 n, q \u2264 100 000) , \u2014 number of casinos and number of requests respectively. The next n lines each contain integers ai and bi ( 1 \u2264 ai < bi \u2264 109) \u2014 is the probability pi of winning in casino i. The next q lines each contain queries of one of the types specified above ( 1 \u2264 a < b \u2264 109, 1 \u2264 i \u2264 n, 1 \u2264 l \u2264 r \u2264 n) . It' s guaranteed that there will be at least one query of type 2, i. e. the output will be non- empty. Additionally, it is guaranteed that p forms a non- decreasing sequence at all times.",
    "output": "Print a real number for every request of type 2 \u2014 the probability that boy will \" dominate\" on that interval. Your answer will be considered correct if its absolute error does not exceed 10 - 4. Namely: let' s assume that one of your answers is a, and the corresponding answer of the jury is b. The checker program will consider your answer correct if | a - b| \u2264 10 - 4.",
    "note": "",
    "topics": [
      "data structures",
      "math",
      "probabilities"
    ],
    "id": "712E"
  },
  {
    "title": "String Set Queries",
    "url": "https://codeforces.com/problemset/problem/710/F",
    "history": "You should process m queries over a set D of strings. Each query is one of three kinds: Add a string s to the set D. It is guaranteed that the string s was not added before. Delete a string s from the set D. It is guaranteed that the string s is in the set D. For the given string s find the number of occurrences of the strings from the set D. If some string p from D has several occurrences in s you should count all of them. Note that you should solve the problem in online mode. It means that you can' t read the whole input at once. You can read each query only after writing the answer for the last query of the third type. Use functions fflush in C+ + and BufferedWriter. flush in Java languages after each writing in your program.",
    "input": "The first line contains integer m ( 1 \u2264 m \u2264 3\u00b7105) \u2014 the number of queries. Each of the next m lines contains integer t ( 1 \u2264 t \u2264 3) and nonempty string s \u2014 the kind of the query and the string to process. All strings consist of only lowercase English letters. The sum of lengths of all strings in the input will not exceed 3\u00b7105.",
    "output": "For each query of the third kind print the only integer c \u2014 the desired number of occurrences in the string s.",
    "note": "",
    "topics": [
      "brute force",
      "data structures",
      "hashing",
      "interactive",
      "string suffix structures",
      "strings"
    ],
    "id": "710F"
  },
  {
    "title": "Centroids",
    "url": "https://codeforces.com/problemset/problem/708/C",
    "history": "Tree is a connected acyclic graph. Suppose you are given a tree consisting of n vertices. The vertex of this tree is called centroid if the size of each connected component that appears if this vertex is removed from the tree doesn' t exceed . You are given a tree of size n and can perform no more than one edge replacement. Edge replacement is the operation of removing one edge from the tree ( without deleting incident vertices) and inserting one new edge ( without adding new vertices) in such a way that the graph remains a tree. For each vertex you have to determine if it' s possible to make it centroid by performing no more than one edge replacement.",
    "input": "The first line of the input contains an integer n ( 2 \u2264 n \u2264 400 000) \u2014 the number of vertices in the tree. Each of the next n - 1 lines contains a pair of vertex indices ui and vi ( 1 \u2264 ui, vi \u2264 n) \u2014 endpoints of the corresponding edge.",
    "output": "Print n integers. The i- th of them should be equal to 1 if the i- th vertex can be made centroid by replacing no more than one edge, and should be equal to 0 otherwise.",
    "note": "In the first sample each vertex can be made a centroid. For example, in order to turn vertex 1 to centroid one have to replace the edge ( 2, 3) with the edge ( 1, 3) .",
    "topics": [
      "data structures",
      "dfs and similar",
      "dp",
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "708C"
  },
  {
    "title": "Garlands",
    "url": "https://codeforces.com/problemset/problem/707/E",
    "history": "Like all children, Alesha loves New Year celebration. During the celebration he and his whole family dress up the fir- tree. Like all children, Alesha likes to play with garlands \u2014 chains consisting of a lightbulbs. Alesha uses a grid field sized n \u00d7 m for playing. The rows of the field are numbered from 1 to n from the top to the bottom and columns are numbered from 1 to m from the left to the right. Alesha has k garlands which he places at the field. He does so in the way such that each lightbulb of each garland lies in the center of some cell in the field, and each cell contains at most one lightbulb. Of course lightbulbs, which are neighbours in some garland, appears in cells neighbouring by a side. The example of garland placing. Each garland is turned off or turned on at any moment. If some garland is turned on then each of its lightbulbs is turned on, the same applies for garland turned off. Each lightbulb in the whole garland set is unique, and thus, being turned on, brings Alesha some pleasure, described by an integer value. Turned off lightbulbs don' t bring Alesha any pleasure. Alesha can turn garlands on and off and wants to know the sum of pleasure value which the lightbulbs, placed in the centers of the cells in some rectangular part of the field, bring him. Initially all the garlands are turned on. Alesha is still very little and can' t add big numbers. He extremely asks you to help him.",
    "input": "The first line of the input contains three integers n, m and k ( 1 \u2264 n, m, k \u2264 2000) \u2014 the number of field rows, the number of field columns and the number of garlands placed at the field respectively. Next lines contains garlands set description in the following format: The first line of a single garland description contains a single integer len ( 1 \u2264 len \u2264 2000) \u2014 the number of lightbulbs in the garland. Each of the next len lines contains three integers i, j and w ( 1 \u2264 i \u2264 n, 1 \u2264 j \u2264 m, 1 \u2264 w \u2264 109) \u2014 the coordinates of the cell containing a lightbullb and pleasure value Alesha gets from it if it is turned on. The lightbulbs are given in the order they are forming a chain in the garland. It is guaranteed that neighbouring lightbulbs are placed in the cells neighbouring by a side. The next line contains single integer q ( 1 \u2264 q \u2264 106) \u2014 the number of events in Alesha' s game. The next q lines describes events in chronological order. The i- th of them describes the i- th event in the one of the following formats: SWITCH i \u2014 Alesha turns off i- th garland if it is turned on, or turns it on if it is turned off. It is guaranteed that 1 \u2264 i \u2264 k. ASK x1 y1 x2 y2 \u2014 Alesha wants to know the sum of pleasure values the lightbulbs, placed in a rectangular part of the field. Top- left cell of a part has coordinates ( x1, y1) and right- bottom cell has coordinates ( x2, y2) . It is guaranteed that 1 \u2264 x1 \u2264 x2 \u2264 n and 1 \u2264 y1 \u2264 y2 \u2264 m. There is no more than 2000 events of this type in the input. All the numbers in the input are integers. Please note that the input is quite large, so be careful while using some input ways. In particular, it' s not recommended to use cin in codes on C+ + and class Scanner in codes on Java.",
    "output": "For each ASK operation print the sum Alesha wants to know in a separate line. Print the answers in chronological order.",
    "note": "This image illustrates the first sample case.",
    "topics": [
      "data structures"
    ],
    "id": "707E"
  },
  {
    "title": "Persistent Bookcase ",
    "url": "https://codeforces.com/problemset/problem/707/D",
    "history": "Recently in school Alina has learned what are the persistent data structures: they are data structures that always preserves the previous version of itself and access to it when it is modified. After reaching home Alina decided to invent her own persistent data structure. Inventing didn' t take long: there is a bookcase right behind her bed. Alina thinks that the bookcase is a good choice for a persistent data structure. Initially the bookcase is empty, thus there is no book at any position at any shelf. The bookcase consists of n shelves, and each shelf has exactly m positions for books at it. Alina enumerates shelves by integers from 1 to n and positions at shelves \u2014 from 1 to m. Initially the bookcase is empty, thus there is no book at any position at any shelf in it. Alina wrote down q operations, which will be consecutively applied to the bookcase. Each of the operations has one of four types: 1 i j \u2014 Place a book at position j at shelf i if there is no book at it. 2 i j \u2014 Remove the book from position j at shelf i if there is a book at it. 3 i \u2014 Invert book placing at shelf i. This means that from every position at shelf i which has a book at it, the book should be removed, and at every position at shelf i which has not book at it, a book should be placed. 4 k \u2014 Return the books in the bookcase in a state they were after applying k- th operation. In particular, k = 0 means that the bookcase should be in initial state, thus every book in the bookcase should be removed from its position. After applying each of operation Alina is interested in the number of books in the bookcase. Alina got ' A' in the school and had no problem finding this values. Will you do so?",
    "input": "The first line of the input contains three integers n, m and q ( 1 \u2264 n, m \u2264 103, 1 \u2264 q \u2264 105) \u2014 the bookcase dimensions and the number of operations respectively. The next q lines describes operations in chronological order \u2014 i- th of them describes i- th operation in one of the four formats described in the statement. It is guaranteed that shelf indices and position indices are correct, and in each of fourth- type operation the number k corresponds to some operation before it or equals to 0.",
    "output": "For each operation, print the number of books in the bookcase after applying it in a separate line. The answers should be printed in chronological order.",
    "note": "This image illustrates the second sample case.",
    "topics": [
      "bitmasks",
      "data structures",
      "dfs and similar",
      "implementation"
    ],
    "id": "707D"
  },
  {
    "title": "Working routine",
    "url": "https://codeforces.com/problemset/problem/706/E",
    "history": "Vasiliy finally got to work, where there is a huge amount of tasks waiting for him. Vasiliy is given a matrix consisting of n rows and m columns and q tasks. Each task is to swap two submatrices of the given matrix. For each task Vasiliy knows six integers ai, bi, ci, di, hi, wi, where ai is the index of the row where the top- left corner of the first rectangle is located, bi is the index of its column, ci is the index of the row of the top- left corner of the second rectangle, di is the index of its column, hi is the height of the rectangle and wi is its width. It' s guaranteed that two rectangles in one query do not overlap and do not touch, that is, no cell belongs to both rectangles, and no two cells belonging to different rectangles share a side. However, rectangles are allowed to share an angle. Vasiliy wants to know how the matrix will look like after all tasks are performed.",
    "input": "The first line of the input contains three integers n, m and q ( 2 \u2264 n, m \u2264 1000, 1 \u2264 q \u2264 10 000) \u2014 the number of rows and columns in matrix, and the number of tasks Vasiliy has to perform. Then follow n lines containing m integers vi, j ( 1 \u2264 vi, j \u2264 109) each \u2014 initial values of the cells of the matrix. Each of the following q lines contains six integers ai, bi, ci, di, hi, wi ( 1 \u2264 ai, ci, hi \u2264 n, 1 \u2264 bi, di, wi \u2264 m) .",
    "output": "Print n lines containing m integers each \u2014 the resulting matrix.",
    "note": "",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "706E"
  },
  {
    "title": "Vasiliy's Multiset",
    "url": "https://codeforces.com/problemset/problem/706/D",
    "history": "Author has gone out of the stories about Vasiliy, so here is just a formal task description. You are given q queries and a multiset A, initially containing only integer 0. There are three types of queries: \" + x\" \u2014 add integer x to multiset A. \" - x\" \u2014 erase one occurrence of integer x from multiset A. It' s guaranteed that at least one x is present in the multiset A before this query. \" ? x\" \u2014 you are given integer x and need to compute the value , i. e. the maximum value of bitwise exclusive OR ( also know as XOR) of integer x and some integer y from the multiset A. Multiset is a set, where equal elements are allowed.",
    "input": "The first line of the input contains a single integer q ( 1 \u2264 q \u2264 200 000) \u2014 the number of queries Vasiliy has to perform. Each of the following q lines of the input contains one of three characters ' + ' , ' - ' or ' ? ' and an integer xi ( 1 \u2264 xi \u2264 109) . It' s guaranteed that there is at least one query of the third type. Note, that the integer 0 will always be present in the set A.",
    "output": "For each query of the type ' ? ' print one integer \u2014 the maximum value of bitwise exclusive OR ( XOR) of integer xi and some integer from the multiset A.",
    "note": "After first five operations multiset A contains integers 0, 8, 9, 11, 6 and 1. The answer for the sixth query is integer \u2014 maximum among integers , , , and .",
    "topics": [
      "binary search",
      "bitmasks",
      "data structures",
      "trees"
    ],
    "id": "706D"
  },
  {
    "title": "Iron Man",
    "url": "https://codeforces.com/problemset/problem/704/E",
    "history": "Tony Stark is playing a game with his suits ( they have auto- pilot now) . He lives in Malibu. Malibu has n junctions numbered from 1 to n, connected with n - 1 roads. One can get from a junction to any other junction using these roads ( graph of Malibu forms a tree) . Tony has m suits. There' s a special plan for each suit. The i- th suit will appear at the moment of time ti in the junction vi, and will move to junction ui using the shortest path between vi and ui with the speed ci roads per second ( passing a junctions takes no time) , and vanishing immediately when arriving at ui ( if it reaches ui in time q, it' s available there at moment q, but not in further moments) . Also, suits move continuously ( for example if vi = \u0338 ui, at time it' s in the middle of a road. Please note that if vi = ui it means the suit will be at junction number vi only at moment ti and then it vanishes. An explosion happens if at any moment of time two suits share the same exact location ( it may be in a junction or somewhere on a road; while appearing, vanishing or moving) . Your task is to tell Tony the moment of the the first explosion ( if there will be any) .",
    "input": "The first line of the input contains two integers n and m ( 1 \u2264 n, m \u2264 100 000) \u2014 the number of junctions and the number of suits respectively. The next n - 1 lines contain the roads descriptions. Each line contains two integers ai and bi \u2014 endpoints of the i- th road ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi) . The next m lines contain the suit descriptions. The i- th of them contains four integers ti, ci, vi and ui ( 0 \u2264 ti \u2264 10 000, 1 \u2264 ci \u2264 10 000, 1 \u2264 vi, ui \u2264 n) , meaning the i- th suit will appear at moment of time ti at the junction vi and will move to the junction ui with a speed ci roads per second.",
    "output": "If there would be no explosions at all, print - 1 in the first and only line of output. Otherwise print the moment of the first explosion. Your answer will be considered correct if its relative or absolute error doesn' t exceed 10 - 6.",
    "note": "",
    "topics": [
      "data structures",
      "geometry",
      "trees"
    ],
    "id": "704E"
  },
  {
    "title": "Thor",
    "url": "https://codeforces.com/problemset/problem/704/A",
    "history": "Thor is getting used to the Earth. As a gift Loki gave him a smartphone. There are n applications on this phone. Thor is fascinated by this phone. He has only one minor issue: he can' t count the number of unread notifications generated by those applications ( maybe Loki put a curse on it so he can' t) . q events are about to happen ( in chronological order) . They are of three types: Application x generates a notification ( this new notification is unread) . Thor reads all notifications generated so far by application x ( he may re- read some notifications) . Thor reads the first t notifications generated by phone applications ( notifications generated in first t events of the first type) . It' s guaranteed that there were at least t events of the first type before this event. Please note that he doesn' t read first t unread notifications, he just reads the very first t notifications generated on his phone and he may re- read some of them in this operation. Please help Thor and tell him the number of unread notifications after each event. You may assume that initially there are no notifications in the phone.",
    "input": "The first line of input contains two integers n and q ( 1 \u2264 n, q \u2264 300 000) \u2014 the number of applications and the number of events to happen. The next q lines contain the events. The i- th of these lines starts with an integer typei \u2014 type of the i- th event. If typei = 1 or typei = 2 then it is followed by an integer xi. Otherwise it is followed by an integer ti ( 1 \u2264 typei \u2264 3, 1 \u2264 xi \u2264 n, 1 \u2264 ti \u2264 q) .",
    "output": "Print the number of unread notifications after each event.",
    "note": "In the first sample: Application 3 generates a notification ( there is 1 unread notification) . Application 1 generates a notification ( there are 2 unread notifications) . Application 2 generates a notification ( there are 3 unread notifications) . Thor reads the notification generated by application 3, there are 2 unread notifications left. In the second sample test: Application 2 generates a notification ( there is 1 unread notification) . Application 4 generates a notification ( there are 2 unread notifications) . Application 2 generates a notification ( there are 3 unread notifications) . Thor reads first three notifications and since there are only three of them so far, there will be no unread notification left. Application 3 generates a notification ( there is 1 unread notification) . Application 3 generates a notification ( there are 2 unread notifications) .",
    "topics": [
      "brute force",
      "data structures",
      "implementation"
    ],
    "id": "704A"
  },
  {
    "title": "Mishka and Interesting sum",
    "url": "https://codeforces.com/problemset/problem/703/D",
    "history": "Little Mishka enjoys programming. Since her birthday has just passed, her friends decided to present her with array of non- negative integers a1, a2, . . . , an of n elements! Mishka loved the array and she instantly decided to determine its beauty value, but she is too little and can' t process large arrays. Right because of that she invited you to visit her and asked you to process m queries. Each query is processed in the following way: Two integers l and r ( 1 \u2264 l \u2264 r \u2264 n) are specified \u2014 bounds of query segment. Integers, presented in array segment [ l, r] ( in sequence of integers al, al + 1, . . . , ar) even number of times, are written down. XOR- sum of written down integers is calculated, and this value is the answer for a query. Formally, if integers written down in point 2 are x1, x2, . . . , xk, then Mishka wants to know the value , where \u2014 operator of exclusive bitwise OR. Since only the little bears know the definition of array beauty, all you are to do is to answer each of queries presented.",
    "input": "The first line of the input contains single integer n ( 1 \u2264 n \u2264 1 000 000) \u2014 the number of elements in the array. The second line of the input contains n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) \u2014 array elements. The third line of the input contains single integer m ( 1 \u2264 m \u2264 1 000 000) \u2014 the number of queries. Each of the next m lines describes corresponding query by a pair of integers l and r ( 1 \u2264 l \u2264 r \u2264 n) \u2014 the bounds of query segment.",
    "output": "Print m non- negative integers \u2014 the answers for the queries in the order they appear in the input.",
    "note": "In the second sample: There is no integers in the segment of the first query, presented even number of times in the segment \u2014 the answer is 0. In the second query there is only integer 3 is presented even number of times \u2014 the answer is 3. In the third query only integer 1 is written down \u2014 the answer is 1. In the fourth query all array elements are considered. Only 1 and 2 are presented there even number of times. The answer is . In the fifth query 1 and 3 are written down. The answer is .",
    "topics": [
      "data structures"
    ],
    "id": "703D"
  },
  {
    "title": "T-Shirts",
    "url": "https://codeforces.com/problemset/problem/702/F",
    "history": "The big consignment of t- shirts goes on sale in the shop before the beginning of the spring. In all n types of t- shirts go on sale. The t- shirt of the i- th type has two integer parameters \u2014 ci and qi, where ci \u2014 is the price of the i- th type t- shirt, qi \u2014 is the quality of the i- th type t- shirt. It should be assumed that the unlimited number of t- shirts of each type goes on sale in the shop, but in general the quality is not concerned with the price. As predicted, k customers will come to the shop within the next month, the j- th customer will get ready to spend up to bj on buying t- shirts. All customers have the same strategy. First of all, the customer wants to buy the maximum possible number of the highest quality t- shirts, then to buy the maximum possible number of the highest quality t- shirts from residuary t- shirts and so on. At the same time among several same quality t- shirts the customer will buy one that is cheaper. The customers don' t like the same t- shirts, so each customer will not buy more than one t- shirt of one type. Determine the number of t- shirts which each customer will buy, if they use the described strategy. All customers act independently from each other, and the purchase of one does not affect the purchase of another.",
    "input": "The first line contains the positive integer n ( 1 \u2264 n \u2264 2\u00b7105) \u2014 the number of t- shirt types. Each of the following n lines contains two integers ci and qi ( 1 \u2264 ci, qi \u2264 109) \u2014 the price and the quality of the i- th type t- shirt. The next line contains the positive integer k ( 1 \u2264 k \u2264 2\u00b7105) \u2014 the number of the customers. The next line contains k positive integers b1, b2, . . . , bk ( 1 \u2264 bj \u2264 109) , where the j- th number is equal to the sum, which the j- th customer gets ready to spend on t- shirts.",
    "output": "The first line of the input data should contain the sequence of k integers, where the i- th number should be equal to the number of t- shirts, which the i- th customer will buy.",
    "note": "In the first example the first customer will buy the t- shirt of the second type, then the t- shirt of the first type. He will spend 10 and will not be able to buy the t- shirt of the third type because it costs 4, and the customer will owe only 3. The second customer will buy all three t- shirts ( at first, the t- shirt of the second type, then the t- shirt of the first type, and then the t- shirt of the third type) . He will spend all money on it.",
    "topics": [
      "data structures"
    ],
    "id": "702F"
  },
  {
    "title": "Analysis of Pathes in Functional Graph",
    "url": "https://codeforces.com/problemset/problem/702/E",
    "history": "You are given a functional graph. It is a directed graph, in which from each vertex goes exactly one arc. The vertices are numerated from 0 to n - 1. Graph is given as the array f0, f1, . . . , fn - 1, where fi \u2014 the number of vertex to which goes the only arc from the vertex i. Besides you are given array with weights of the arcs w0, w1, . . . , wn - 1, where wi \u2014 the arc weight from i to fi. The graph from the first sample test. Also you are given the integer k ( the length of the path) and you need to find for each vertex two numbers si and mi, where: si \u2014 the sum of the weights of all arcs of the path with length equals to k which starts from the vertex i; mi \u2014 the minimal weight from all arcs on the path with length k which starts from the vertex i. The length of the path is the number of arcs on this path.",
    "input": "The first line contains two integers n, k ( 1 \u2264 n \u2264 105, 1 \u2264 k \u2264 1010) . The second line contains the sequence f0, f1, . . . , fn - 1 ( 0 \u2264 fi < n) and the third \u2014 the sequence w0, w1, . . . , wn - 1 ( 0 \u2264 wi \u2264 108) .",
    "output": "Print n lines, the pair of integers si, mi in each line.",
    "note": "",
    "topics": [
      "data structures",
      "graphs"
    ],
    "id": "702E"
  },
  {
    "title": "Powers of Two",
    "url": "https://codeforces.com/problemset/problem/702/B",
    "history": "You are given n integers a1, a2, . . . , an. Find the number of pairs of indexes i, j ( i < j) that ai + aj is a power of 2 ( i. e. some integer x exists so that ai + aj = 2x) .",
    "input": "The first line contains the single positive integer n ( 1 \u2264 n \u2264 105) \u2014 the number of integers. The second line contains n positive integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) .",
    "output": "Print the number of pairs of indexes i, j ( i < j) that ai + aj is a power of 2.",
    "note": "In the first example the following pairs of indexes include in answer: ( 1, 4) and ( 2, 4) . In the second example all pairs of indexes ( i, j) ( where i < j) include in answer.",
    "topics": [
      "brute force",
      "data structures",
      "implementation",
      "math"
    ],
    "id": "702B"
  },
  {
    "title": "Cells Not Under Attack",
    "url": "https://codeforces.com/problemset/problem/701/B",
    "history": "Vasya has the square chessboard of size n \u00d7 n and m rooks. Initially the chessboard is empty. Vasya will consequently put the rooks on the board one after another. The cell of the field is under rook' s attack, if there is at least one rook located in the same row or in the same column with this cell. If there is a rook located in the cell, this cell is also under attack. You are given the positions of the board where Vasya will put rooks. For each rook you have to determine the number of cells which are not under attack after Vasya puts it on the board.",
    "input": "The first line of the input contains two integers n and m ( 1 \u2264 n \u2264 100 000, 1 \u2264 m \u2264 min( 100 000, n2) ) \u2014 the size of the board and the number of rooks. Each of the next m lines contains integers xi and yi ( 1 \u2264 xi, yi \u2264 n) \u2014 the number of the row and the number of the column where Vasya will put the i- th rook. Vasya puts rooks on the board in the order they appear in the input. It is guaranteed that any cell will contain no more than one rook.",
    "output": "Print m integer, the i- th of them should be equal to the number of cells that are not under attack after first i rooks are put.",
    "note": "On the picture below show the state of the board after put each of the three rooks. The cells which painted with grey color is not under the attack.",
    "topics": [
      "data structures",
      "math"
    ],
    "id": "701B"
  },
  {
    "title": "Huffman Coding on Segment",
    "url": "https://codeforces.com/problemset/problem/700/D",
    "history": "Alice wants to send an important message to Bob. Message a = ( a1, . . . , an) is a sequence of positive integers ( characters) . To compress the message Alice wants to use binary Huffman coding. We recall that binary Huffman code, or binary prefix code is a function f, that maps each letter that appears in the string to some binary string ( that is, string consisting of characters ' 0' and ' 1' only) such that for each pair of different characters ai and aj string f( ai) is not a prefix of f( aj) ( and vice versa) . The result of the encoding of the message a1, a2, . . . , an is the concatenation of the encoding of each character, that is the string f( a1) f( a2) . . . f( an) . Huffman codes are very useful, as the compressed message can be easily and uniquely decompressed, if the function f is given. Code is usually chosen in order to minimize the total length of the compressed message, i. e. the length of the string f( a1) f( a2) . . . f( an) . Because of security issues Alice doesn' t want to send the whole message. Instead, she picks some substrings of the message and wants to send them separately. For each of the given substrings ali. . . ari she wants to know the minimum possible length of the Huffman coding. Help her solve this problem.",
    "input": "The first line of the input contains the single integer n ( 1 \u2264 n \u2264 100 000) \u2014 the length of the initial message. The second line contains n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 100 000) \u2014 characters of the message. Next line contains the single integer q ( 1 \u2264 q \u2264 100 000) \u2014 the number of queries. Then follow q lines with queries descriptions. The i- th of these lines contains two integers li and ri ( 1 \u2264 li \u2264 ri \u2264 n) \u2014 the position of the left and right ends of the i- th substring respectively. Positions are numbered from 1. Substrings may overlap in any way. The same substring may appear in the input more than once.",
    "output": "Print q lines. Each line should contain a single integer \u2014 the minimum possible length of the Huffman encoding of the substring ali. . . ari.",
    "note": "In the first query, one of the optimal ways to encode the substring is to map 1 to \" 0\" , 2 to \" 10\" and 3 to \" 11\" . Note that it is correct to map the letter to the empty substring ( as in the fifth query from the sample) .",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "700D"
  },
  {
    "title": "...Wait for it...",
    "url": "https://codeforces.com/problemset/problem/696/E",
    "history": "Barney is searching for his dream girl. He lives in NYC. NYC has n junctions numbered from 1 to n and n - 1 roads connecting them. We will consider the NYC as a rooted tree with root being junction 1. m girls live in NYC, i- th of them lives along junction ci and her weight initially equals i pounds. Barney consider a girl x to be better than a girl y if and only if: girl x has weight strictly less than girl y or girl x and girl y have equal weights and index of girl x living junction index is strictly less than girl y living junction index, i. e. cx < cy. Thus for any two girls one of them is always better than another one. For the next q days, one event happens each day. There are two types of events: Barney goes from junction v to junction u. As a result he picks at most k best girls he still have not invited from junctions on his way and invites them to his house to test if one of them is his dream girl. If there are less than k not invited girls on his path, he invites all of them. Girls living along junctions in subtree of junction v ( including v itself) put on some weight. As result, their weights increase by k pounds. Your task is for each event of first type tell Barney the indices of girls he will invite to his home in this event.",
    "input": "The first line of input contains three integers n, m and q ( 1 \u2264 n, m, q \u2264 105) \u2014 the number of junctions in NYC, the number of girls living in NYC and the number of events respectively. The next n - 1 lines describes the roads. Each line contains two integers v and u ( 1 \u2264 v, u \u2264 n, v = \u0338 u) meaning that there is a road connecting junctions v and u . The next line contains m integers c1, c2, . . . , cm ( 1 \u2264 ci \u2264 n) \u2014 the girl' s living junctions. The next q lines describe the events in chronological order. Each line starts with an integer t ( 1 \u2264 t \u2264 2) \u2014 type of the event . If t = 1 then the line describes event of first type three integers v, u and k ( 1 \u2264 v, u, k \u2264 n) follow \u2014 the endpoints of Barney' s path and the number of girls that he will invite at most. Otherwise the line describes event of second type and two integers v and k ( 1 \u2264 v \u2264 n, 1 \u2264 k \u2264 109) follow \u2014 the root of the subtree and value by which all the girls' weights in the subtree should increase.",
    "output": "For each event of the first type, print number t and then t integers g1, g2, . . . , gt in one line, meaning that in this event Barney will invite t girls whose indices are g1, . . . , gt in the order from the best to the worst according to Barney' s considerations.",
    "note": "For the first sample case: Description of events: Weights of girls in subtree of junction 4 increase by 3. These girls have IDs: 1, 3, 5, 4, 7. Barney goes from junction 2 to 1. Girls on his way have IDs 1, 2, 3, 5, 6, 7 with weights 4, 2, 6, 8, 6, 10 respectively. So, he invites girls 2 and 1. Barney goes from junction 4 to junction 2. Girls on his way has IDs 3, 5, 7 with weights 6, 8, 10 respectively. So he invites girl 3. Weight of girls in subtree of junction 2 increase by 10. There are no not invited girls, so nothing happens. Weight of girls in subtree of junction 1 increase by 10. These girls ( all girls left) have IDs: 4, 5, 6, 7. Barney goes from junction 2 to junction 4. Girls on his way has IDs 5, 7 with weights 18, 20 respectively. So he invites girl 5. Barney goes from junction 2 to junction 3. There is no girl on his way. Weight of girls in subtree of junction 5 increase by 2. The only girl there is girl with ID 4. Weight of girls in subtree of junction 4 increase by 9. These girls have IDs: 4, 6, 7. Barney goes from junction 3 to junction 5. Only girl on his way is girl with ID 4. Barney goes from junction 1 to junction 2. Girls on his way has IDs 6, 7 with weights 16, 29 respectively.",
    "topics": [
      "data structures",
      "dsu",
      "trees"
    ],
    "id": "696E"
  },
  {
    "title": "Legen...",
    "url": "https://codeforces.com/problemset/problem/696/D",
    "history": "Barney was hanging out with Nora for a while and now he thinks he may have feelings for her. Barney wants to send her a cheesy text message and wants to make her as happy as possible. Initially, happiness level of Nora is 0. Nora loves some pickup lines like \" I' m falling for you\" and stuff. Totally, she knows n pickup lines, each consisting only of lowercase English letters, also some of them may be equal ( in writing, but different in pronouncing or meaning though) . Every time Nora sees i- th pickup line as a consecutive subsequence of Barney' s text message her happiness level increases by ai. These substrings may overlap, for example, Nora will see the pickup line aa twice and the pickup line ab once in text message aaab. Due to texting app limits, Barney' s text may have up to l characters. Barney asked you to help him make Nora as much happy as possible, it' s gonna be legen. . .",
    "input": "The first line of input contains two integers n and l ( 1 \u2264 n \u2264 200, 1 \u2264 l \u2264 1014) \u2014 the number of pickup lines and the maximum length of Barney' s text. The second line contains n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 100) , meaning that Nora' s happiness level increases by ai after every time seeing i- th pickup line. The next n lines contain the pickup lines. i- th of them contains a single string si consisting of only English lowercase letter. Summary length of all pickup lines does not exceed 200. All strings are not empty.",
    "output": "Print the only integer \u2014 the maximum possible value of Nora' s happiness level after reading Barney' s text.",
    "note": "An optimal answer for the first sample case is hearth containing each pickup line exactly once. An optimal answer for the second sample case is artart.",
    "topics": [
      "data structures",
      "dp",
      "matrices",
      "strings"
    ],
    "id": "696D"
  },
  {
    "title": "Lorenzo Von Matterhorn",
    "url": "https://codeforces.com/problemset/problem/696/A",
    "history": "Barney lives in NYC. NYC has infinite number of intersections numbered with positive integers starting from 1. There exists a bidirectional road between intersections i and 2i and another road between i and 2i + 1 for every positive integer i. You can clearly see that there exists a unique shortest path between any two intersections. Initially anyone can pass any road for free. But since SlapsGiving is ahead of us, there will q consecutive events happen soon. There are two types of events: 1. Government makes a new rule. A rule can be denoted by integers v, u and w. As the result of this action, the passing fee of all roads on the shortest path from u to v increases by w dollars. 2. Barney starts moving from some intersection v and goes to intersection u where there' s a girl he wants to cuddle ( using his fake name Lorenzo Von Matterhorn) . He always uses the shortest path ( visiting minimum number of intersections or roads) between two intersections. Government needs your calculations. For each time Barney goes to cuddle a girl, you need to tell the government how much money he should pay ( sum of passing fee of all roads he passes) .",
    "input": "The first line of input contains a single integer q ( 1 \u2264 q \u2264 1 000) . The next q lines contain the information about the events in chronological order. Each event is described in form 1 v u w if it' s an event when government makes a new rule about increasing the passing fee of all roads on the shortest path from u to v by w dollars, or in form 2 v u if it' s an event when Barnie goes to cuddle from the intersection v to the intersection u. 1 \u2264 v, u \u2264 1018, v = \u0338 u, 1 \u2264 w \u2264 109 states for every description line.",
    "output": "For each event of second type print the sum of passing fee of all roads Barney passes in this event, in one line. Print the answers in chronological order of corresponding events.",
    "note": "In the example testcase: Here are the intersections used: Intersections on the path are 3, 1, 2 and 4. Intersections on the path are 4, 2 and 1. Intersections on the path are only 3 and 6. Intersections on the path are 4, 2, 1 and 3. Passing fee of roads on the path are 32, 32 and 30 in order. So answer equals to 32 + 32 + 30 = 94. Intersections on the path are 6, 3 and 1. Intersections on the path are 3 and 7. Passing fee of the road between them is 0. Intersections on the path are 2 and 4. Passing fee of the road between them is 32 ( increased by 30 in the first event and by 2 in the second) .",
    "topics": [
      "brute force",
      "data structures",
      "implementation",
      "trees"
    ],
    "id": "696A"
  },
  {
    "title": "Recover Polygon (hard)",
    "url": "https://codeforces.com/problemset/problem/690/B3",
    "history": "Zombies have found out about the Zombie Contamination level checker and managed to damage it! Now detecting the shape of their main compound will be a real challenge for Heidi. As before, a lair can be represented as a strictly convex polygon on a lattice. Each vertex of the polygon occupies a point on the lattice. However, the damaged Zombie Contamination level checker can only tell, for each cell, whether the level of Zombie Contamination for that cell is in the set 1, 2, 3. In other words, Heidi knows all the cells of the lattice for which the Contamination level is not 0 and not 4. Given this information, Heidi still wants to know the exact shape of the lair to rain destruction on the zombies. Help her!",
    "input": "The input contains multiple test cases. The first line of each test case contains two space- separated integers N and M, where N is the size of the lattice grid ( 5 \u2264 N \u2264 100000) and M is the number of lattice points for which the Zombie Contamination level is 1, 2, or 3 ( 8 \u2264 M \u2264 200000) . The second line of each test case contains M pairs of integers x1, y1, . . . , xM, yM \u2013 coordinates of the cells with Zombie Contamination level not equal to 0 nor 4. It is guaranteed that 1 \u2264 xi, yi \u2264 N. All pairs xi, yi are different. Cells are enumerated based on the coordinates of their upper right corner. This means that the bottommost leftmost cell that touches the origin has coordinates ( 1, 1) , and the uppermost leftmost cell is identified as ( 1, N) . The last line of the file contains two zeroes. This line should not be treated as a test case. The sum of the M values for all tests in one file will not exceed 200000.",
    "output": "For each test case, the following output is expected: The first line of the output should contain one integer V, the number of vertices of the polygon that is the secret lair. The next V lines each should contain two integers, denoting the vertices of the polygon in the clockwise order, starting from the lexicographically smallest vertex.",
    "note": "It is guaranteed that the solution always exists and is unique. It is guaranteed that in the correct solution the coordinates of the polygon vertices are between 1 and N - 1. A vertex ( x1, y1) is lexicographically smaller than vertex ( x2, y2) if x1 < x2 or .",
    "topics": [
      "data structures"
    ],
    "id": "690B3"
  },
  {
    "title": "Mike and Geometry Problem",
    "url": "https://codeforces.com/problemset/problem/689/E",
    "history": "Mike wants to prepare for IMO but he doesn' t know geometry, so his teacher gave him an interesting geometry problem. Let' s define f( [ l, r] ) = r - l + 1 to be the number of integer points in the segment [ l, r] with l \u2264 r ( say that ) . You are given two integers n and k and n closed intervals [ li, ri] on OX axis and you have to find: In other words, you should find the sum of the number of integer points in the intersection of any k of the segments. As the answer may be very large, output it modulo 1000000007 ( 109 + 7) . Mike can' t solve this problem so he needs your help. You will help him, won' t you?",
    "input": "The first line contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 200 000) \u2014 the number of segments and the number of segments in intersection groups respectively. Then n lines follow, the i- th line contains two integers li, ri ( - 109 \u2264 li \u2264 ri \u2264 109) , describing i- th segment bounds.",
    "output": "Print one integer number \u2014 the answer to Mike' s problem modulo 1000000007 ( 109 + 7) in the only line.",
    "note": "In the first example: ; ; . So the answer is 2 + 1 + 2 = 5.",
    "topics": [
      "combinatorics",
      "data structures",
      "dp",
      "geometry",
      "implementation"
    ],
    "id": "689E"
  },
  {
    "title": "Friends and Subsequences",
    "url": "https://codeforces.com/problemset/problem/689/D",
    "history": "Mike and ! Mike are old childhood rivals, they are opposite in everything they do, except programming. Today they have a problem they cannot solve on their own, but together ( with you) \u2014 who knows? Every one of them has an integer sequences a and b of length n. Being given a query of the form of pair of integers ( l, r) , Mike can instantly tell the value of while ! Mike can instantly tell the value of . Now suppose a robot ( you! ) asks them all possible different queries of pairs of integers ( l, r) ( 1 \u2264 l \u2264 r \u2264 n) ( so he will make exactly n( n + 1) / 2 queries) and counts how many times their answers coincide, thus for how many pairs is satisfied. How many occasions will the robot count?",
    "input": "The first line contains only integer n ( 1 \u2264 n \u2264 200 000) . The second line contains n integer numbers a1, a2, . . . , an ( - 109 \u2264 ai \u2264 109) \u2014 the sequence a. The third line contains n integer numbers b1, b2, . . . , bn ( - 109 \u2264 bi \u2264 109) \u2014 the sequence b.",
    "output": "Print the only integer number \u2014 the number of occasions the robot will count, thus for how many pairs is satisfied.",
    "note": "The occasions in the first sample case are: 1. l = 4, r = 4 since max2 = min2. 2. l = 4, r = 5 since max2, 1 = min2, 3. There are no occasions in the second sample case since Mike will answer 3 to any query pair, but ! Mike will always answer 1.",
    "topics": [
      "binary search",
      "data structures"
    ],
    "id": "689D"
  },
  {
    "title": "Dividing Kingdom II",
    "url": "https://codeforces.com/problemset/problem/687/D",
    "history": "Long time ago, there was a great kingdom and it was being ruled by The Great Arya and Pari The Great. These two had some problems about the numbers they like, so they decided to divide the great kingdom between themselves. The great kingdom consisted of n cities numbered from 1 to n and m bidirectional roads between these cities, numbered from 1 to m. The i- th road had length equal to wi. The Great Arya and Pari The Great were discussing about destructing some prefix ( all road with numbers less than some x) and suffix ( all roads with numbers greater than some x) of the roads so there will remain only the roads with numbers l, l + 1, . . . , r - 1 and r. After that they will divide the great kingdom into two pieces ( with each city belonging to exactly one piece) such that the hardness of the division is minimized. The hardness of a division is the maximum length of a road such that its both endpoints are in the same piece of the kingdom. In case there is no such road, the hardness of the division is considered to be equal to - 1. Historians found the map of the great kingdom, and they have q guesses about the l and r chosen by those great rulers. Given these data, for each guess li and ri print the minimum possible hardness of the division of the kingdom.",
    "input": "The first line of the input contains three integers n, m and q ( 1 \u2264 n, q \u2264 1000, ) \u2014 the number of cities and roads in the great kingdom, and the number of guesses, respectively. The i- th line of the following m lines contains three integers ui, vi and wi ( 1 \u2264 ui, vi \u2264 n, 0 \u2264 wi \u2264 109) , denoting the road number i connects cities ui and vi and its length is equal wi. It' s guaranteed that no road connects the city to itself and no pair of cities is connected by more than one road. Each of the next q lines contains a pair of integers li and ri ( 1 \u2264 li \u2264 ri \u2264 m) \u2014 a guess from the historians about the remaining roads in the kingdom.",
    "output": "For each guess print the minimum possible hardness of the division in described scenario.",
    "note": "",
    "topics": [
      "brute force",
      "data structures",
      "dsu",
      "graphs",
      "sortings"
    ],
    "id": "687D"
  },
  {
    "title": "Kay and Snowflake",
    "url": "https://codeforces.com/problemset/problem/685/B",
    "history": "After the piece of a devilish mirror hit the Kay' s eye, he is no longer interested in the beauty of the roses. Now he likes to watch snowflakes. Once upon a time, he found a huge snowflake that has a form of the tree ( connected acyclic graph) consisting of n nodes. The root of tree has index 1. Kay is very interested in the structure of this tree. After doing some research he formed q queries he is interested in. The i- th query asks to find a centroid of the subtree of the node vi. Your goal is to answer all queries. Subtree of a node is a part of tree consisting of this node and all it' s descendants ( direct or not) . In other words, subtree of node v is formed by nodes u, such that node v is present on the path from u to root. Centroid of a tree ( or a subtree) is a node, such that if we erase it from the tree, the maximum size of the connected component will be at least two times smaller than the size of the initial tree ( or a subtree) .",
    "input": "The first line of the input contains two integers n and q ( 2 \u2264 n \u2264 300 000, 1 \u2264 q \u2264 300 000) \u2014 the size of the initial tree and the number of queries respectively. The second line contains n - 1 integer p2, p3, . . . , pn ( 1 \u2264 pi \u2264 n) \u2014 the indices of the parents of the nodes from 2 to n. Node 1 is a root of the tree. It' s guaranteed that pi define a correct tree. Each of the following q lines contain a single integer vi ( 1 \u2264 vi \u2264 n) \u2014 the index of the node, that define the subtree, for which we want to find a centroid.",
    "output": "For each query print the index of a centroid of the corresponding subtree. If there are many suitable nodes, print any of them. It' s guaranteed, that each subtree has at least one centroid.",
    "note": "The first query asks for a centroid of the whole tree \u2014 this is node 3. If we delete node 3 the tree will split in four components, two of size 1 and two of size 2. The subtree of the second node consists of this node only, so the answer is 2. Node 3 is centroid of its own subtree. The centroids of the subtree of the node 5 are nodes 5 and 6 \u2014 both answers are considered correct.",
    "topics": [
      "data structures",
      "dfs and similar",
      "dp",
      "trees"
    ],
    "id": "685B"
  },
  {
    "title": "Heap Operations",
    "url": "https://codeforces.com/problemset/problem/681/C",
    "history": "Petya has recently learned data structure named \" Binary heap\" . The heap he is now operating with allows the following operations: put the given number into the heap; get the value of the minimum element in the heap; extract the minimum element from the heap; Thus, at any moment of time the heap contains several integers ( possibly none) , some of them might be equal. In order to better learn this data structure Petya took an empty heap and applied some operations above to it. Also, he carefully wrote down all the operations and their results to his event log, following the format: insert x \u2014 put the element with value x in the heap; getMin x \u2014 the value of the minimum element contained in the heap was equal to x; removeMin \u2014 the minimum element was extracted from the heap ( only one instance, if there were many) . All the operations were correct, i. e. there was at least one element in the heap each time getMin or removeMin operations were applied. While Petya was away for a lunch, his little brother Vova came to the room, took away some of the pages from Petya' s log and used them to make paper boats. Now Vova is worried, if he made Petya' s sequence of operations inconsistent. For example, if one apply operations one- by- one in the order they are written in the event log, results of getMin operations might differ from the results recorded by Petya, and some of getMin or removeMin operations may be incorrect, as the heap is empty at the moment they are applied. Now Vova wants to add some new operation records to the event log in order to make the resulting sequence of operations correct. That is, the result of each getMin operation is equal to the result in the record, and the heap is non- empty when getMin ad removeMin are applied. Vova wants to complete this as fast as possible, as the Petya may get back at any moment. He asks you to add the least possible number of operation records to the current log. Note that arbitrary number of operations may be added at the beginning, between any two other operations, or at the end of the log.",
    "input": "The first line of the input contains the only integer n ( 1 \u2264 n \u2264 100 000) \u2014 the number of the records left in Petya' s journal. Each of the following n lines describe the records in the current log in the order they are applied. Format described in the statement is used. All numbers in the input are integers not exceeding 109 by their absolute value.",
    "output": "The first line of the output should contain a single integer m \u2014 the minimum possible number of records in the modified sequence of operations. Next m lines should contain the corrected sequence of records following the format of the input ( described in the statement) , one per line and in the order they are applied. All the numbers in the output should be integers not exceeding 109 by their absolute value. Note that the input sequence of operations must be the subsequence of the output sequence. It' s guaranteed that there exists the correct answer consisting of no more than 1 000 000 operations.",
    "note": "In the first sample, after number 3 is inserted into the heap, the minimum number is 3. To make the result of the first getMin equal to 4 one should firstly remove number 3 from the heap and then add number 4 into the heap. In the second sample case number 1 is inserted two times, so should be similarly removed twice.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy"
    ],
    "id": "681C"
  },
  {
    "title": "Bear and Bad Powers of 42",
    "url": "https://codeforces.com/problemset/problem/679/E",
    "history": "Limak, a bear, isn' t good at handling queries. So, he asks you to do it. We say that powers of 42 ( numbers 1, 42, 1764, . . . ) are bad. Other numbers are good. You are given a sequence of n good integers t1, t2, . . . , tn. Your task is to handle q queries of three types: 1 i \u2014 print ti in a separate line. 2 a b x \u2014 for set ti to x. It' s guaranteed that x is a good number. 3 a b x \u2014 for increase ti by x. After this repeat the process while at least one ti is bad. You can note that after each query all ti are good.",
    "input": "The first line of the input contains two integers n and q ( 1 \u2264 n, q \u2264 100 000) \u2014 the size of Limak' s sequence and the number of queries, respectively. The second line of the input contains n integers t1, t2, . . . , tn ( 2 \u2264 ti \u2264 109) \u2014 initial elements of Limak' s sequence. All ti are good. Then, q lines follow. The i- th of them describes the i- th query. The first number in the line is an integer typei ( 1 \u2264 typei \u2264 3) \u2014 the type of the query. There is at least one query of the first type, so the output won' t be empty. In queries of the second and the third type there is 1 \u2264 a \u2264 b \u2264 n. In queries of the second type an integer x ( 2 \u2264 x \u2264 109) is guaranteed to be good. In queries of the third type an integer x ( 1 \u2264 x \u2264 109) may be bad.",
    "output": "For each query of the first type, print the answer in a separate line.",
    "note": "After a query 3 2 4 42 the sequence is 40, 1742, 49, 1714, 4, 1722. After a query 3 2 6 50 the sequence is 40, 1842, 149, 1814, 104, 1822. After a query 2 3 4 41 the sequence is 40, 1842, 41, 41, 104, 1822. After a query 3 1 5 1 the sequence is 43, 1845, 44, 44, 107, 1822.",
    "topics": [
      "data structures"
    ],
    "id": "679E"
  },
  {
    "title": "Lena and Queries",
    "url": "https://codeforces.com/problemset/problem/678/F",
    "history": "Lena is a programmer. She got a task to solve at work. There is an empty set of pairs of integers and n queries to process. Each query is one of three types: Add a pair ( a, b) to the set. Remove a pair added in the query number i. All queries are numbered with integers from 1 to n. For a given integer q find the maximal value x\u00b7q + y over all pairs ( x, y) from the set. Help Lena to process the queries.",
    "input": "The first line of input contains integer n ( 1 \u2264 n \u2264 3\u00b7105) \u2014 the number of queries. Each of the next n lines starts with integer t ( 1 \u2264 t \u2264 3) \u2014 the type of the query. A pair of integers a and b ( - 109 \u2264 a, b \u2264 109) follows in the query of the first type. An integer i ( 1 \u2264 i \u2264 n) follows in the query of the second type. It is guaranteed that i is less than the number of the query, the query number i has the first type and the pair from the i- th query is not already removed. An integer q ( - 109 \u2264 q \u2264 109) follows in the query of the third type.",
    "output": "For the queries of the third type print on a separate line the desired maximal value of x\u00b7q + y. If there are no pairs in the set print \" EMPTY SET\" .",
    "note": "",
    "topics": [
      "data structures",
      "divide and conquer",
      "geometry"
    ],
    "id": "678F"
  },
  {
    "title": "Vanya and Treasure",
    "url": "https://codeforces.com/problemset/problem/677/D",
    "history": "Vanya is in the palace that can be represented as a grid n \u00d7 m. Each room contains a single chest, an the room located in the i- th row and j- th columns contains the chest of type aij. Each chest of type x \u2264 p - 1 contains a key that can open any chest of type x + 1, and all chests of type 1 are not locked. There is exactly one chest of type p and it contains a treasure. Vanya starts in cell ( 1, 1) ( top left corner) . What is the minimum total distance Vanya has to walk in order to get the treasure? Consider the distance between cell ( r1, c1) ( the cell in the row r1 and column c1) and ( r2, c2) is equal to | r1 - r2| + | c1 - c2| .",
    "input": "The first line of the input contains three integers n, m and p ( 1 \u2264 n, m \u2264 300, 1 \u2264 p \u2264 n\u00b7m) \u2014 the number of rows and columns in the table representing the palace and the number of different types of the chests, respectively. Each of the following n lines contains m integers aij ( 1 \u2264 aij \u2264 p) \u2014 the types of the chests in corresponding rooms. It' s guaranteed that for each x from 1 to p there is at least one chest of this type ( that is, there exists a pair of r and c, such that arc = x) . Also, it' s guaranteed that there is exactly one chest of type p.",
    "output": "Print one integer \u2014 the minimum possible total distance Vanya has to walk in order to get the treasure from the chest of type p.",
    "note": "",
    "topics": [
      "data structures",
      "dp",
      "graphs",
      "shortest paths"
    ],
    "id": "677D"
  },
  {
    "title": "Trains and Statistic",
    "url": "https://codeforces.com/problemset/problem/675/E",
    "history": "Vasya commutes by train every day. There are n train stations in the city, and at the i- th station it' s possible to buy only tickets to stations from i + 1 to ai inclusive. No tickets are sold at the last station. Let \u03c1i, j be the minimum number of tickets one needs to buy in order to get from stations i to station j. As Vasya is fond of different useless statistic he asks you to compute the sum of all values \u03c1i, j among all pairs 1 \u2264 i < j \u2264 n.",
    "input": "The first line of the input contains a single integer n ( 2 \u2264 n \u2264 100 000) \u2014 the number of stations. The second line contains n - 1 integer ai ( i + 1 \u2264 ai \u2264 n) , the i- th of them means that at the i- th station one may buy tickets to each station from i + 1 to ai inclusive.",
    "output": "Print the sum of \u03c1i, j among all pairs of 1 \u2264 i < j \u2264 n.",
    "note": "In the first sample it' s possible to get from any station to any other ( with greater index) using only one ticket. The total number of pairs is 6, so the answer is also 6. Consider the second sample: \u03c11, 2 = 1 \u03c11, 3 = 2 \u03c11, 4 = 3 \u03c11, 5 = 3 \u03c12, 3 = 1 \u03c12, 4 = 2 \u03c12, 5 = 2 \u03c13, 4 = 1 \u03c13, 5 = 1 \u03c14, 5 = 1 Thus the answer equals 1 + 2 + 3 + 3 + 1 + 2 + 2 + 1 + 1 + 1 = 17.",
    "topics": [
      "data structures",
      "dp",
      "greedy"
    ],
    "id": "675E"
  },
  {
    "title": "Tree Construction",
    "url": "https://codeforces.com/problemset/problem/675/D",
    "history": "During the programming classes Vasya was assigned a difficult problem. However, he doesn' t know how to code and was unable to find the solution in the Internet, so he asks you to help. You are given a sequence a , consisting of n distinct integers, that is used to construct the binary search tree. Below is the formal description of the construction process. First element a_ 1 becomes the root of the tree. Elements a_ 2, a_ 3, . . . , a_ n are added one by one. To add element a_ i one needs to traverse the tree starting from the root and using the following rules: The pointer to the current node is set to the root. If a_ i is greater than the value in the current node, then its right child becomes the current node. Otherwise, the left child of the current node becomes the new current node. If at some point there is no required child, the new node is created, it is assigned value a_ i and becomes the corresponding child of the current node.",
    "input": "The first line of the input contains a single integer n ( 2 \u2264 n \u2264 100 000 ) \u2014 the length of the sequence a . The second line contains n distinct integers a_ i ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the sequence a itself.",
    "output": "Output n - 1 integers. For all i > 1 print the value written in the node that is the parent of the node with value a_ i in it.",
    "note": "",
    "topics": [
      "data structures",
      "trees"
    ],
    "id": "675D"
  },
  {
    "title": "Money Transfers",
    "url": "https://codeforces.com/problemset/problem/675/C",
    "history": "There are n banks in the city where Vasya lives, they are located in a circle, such that any two banks are neighbouring if their indices differ by no more than 1. Also, bank 1 and bank n are neighbours if n > 1. No bank is a neighbour of itself. Vasya has an account in each bank. Its balance may be negative, meaning Vasya owes some money to this bank. There is only one type of operations available: transfer some amount of money from any bank to account in any neighbouring bank. There are no restrictions on the size of the sum being transferred or balance requirements to perform this operation. Vasya doesn' t like to deal with large numbers, so he asks you to determine the minimum number of operations required to change the balance of each bank account to zero. It' s guaranteed, that this is possible to achieve, that is, the total balance of Vasya in all banks is equal to zero.",
    "input": "The first line of the input contains a single integer n ( 1 \u2264 n \u2264 100 000) \u2014 the number of banks. The second line contains n integers ai ( - 109 \u2264 ai \u2264 109) , the i- th of them is equal to the initial balance of the account in the i- th bank. It' s guaranteed that the sum of all ai is equal to 0.",
    "output": "Print the minimum number of operations required to change balance in each bank to zero.",
    "note": "In the first sample, Vasya may transfer 5 from the first bank to the third. In the second sample, Vasya may first transfer 1 from the third bank to the second, and then 1 from the second to the first. In the third sample, the following sequence provides the optimal answer: transfer 1 from the first bank to the second bank; transfer 3 from the second bank to the third; transfer 6 from the third bank to the fourth.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "675C"
  },
  {
    "title": "Organizing a Race",
    "url": "https://codeforces.com/problemset/problem/671/E",
    "history": "Kekoland is a country with n beautiful cities numbered from left to right and connected by n - 1 roads. The i- th road connects cities i and i + 1 and length of this road is wi kilometers. When you drive in Kekoland, each time you arrive in city i by car you immediately receive gi liters of gas. There is no other way to get gas in Kekoland. You were hired by the Kekoland president Keko to organize the most beautiful race Kekoland has ever seen. Let race be between cities l and r ( l \u2264 r) . Race will consist of two stages. On the first stage cars will go from city l to city r. After completing first stage, next day second stage will be held, now racers will go from r to l with their cars. Of course, as it is a race, racers drive directly from start city to finish city. It means that at the first stage they will go only right, and at the second stage they go only left. Beauty of the race between l and r is equal to r - l + 1 since racers will see r - l + 1 beautiful cities of Kekoland. Cars have infinite tank so racers will take all the gas given to them. At the beginning of each stage racers start the race with empty tank ( 0 liters of gasoline) . They will immediately take their gasoline in start cities ( l for the first stage and r for the second stage) right after the race starts. It may not be possible to organize a race between l and r if cars will run out of gas before they reach finish. You have k presents. Each time you give a present to city i its value gi increases by 1. You may distribute presents among cities in any way ( also give many presents to one city, each time increasing gi by 1) . What is the most beautiful race you can organize? Each car consumes 1 liter of gas per one kilometer.",
    "input": "The first line of the input contains two integers n and k ( 2 \u2264 n \u2264 100 000, 0 \u2264 k \u2264 109) \u2014 the number of cities in Kekoland and the number of presents you have, respectively. Next line contains n - 1 integers. The i- th of them is wi ( 1 \u2264 wi \u2264 109) \u2014 the length of the road between city i and i + 1. Next line contains n integers. The i- th of them is gi ( 0 \u2264 gi \u2264 109) \u2014 the amount of gas you receive every time you enter city i.",
    "output": "Print a single line \u2014 the beauty of the most beautiful race you can organize.",
    "note": "In first sample if you give one present to each city then it will be possible to make a race between city 1 and city 4. In second sample you should add 1 to g5 and 4 to g6, then it will be possible to make a race between cities 2 and 8.",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "671E"
  },
  {
    "title": "Roads in Yusland",
    "url": "https://codeforces.com/problemset/problem/671/D",
    "history": "Mayor of Yusland just won the lottery and decided to spent money on something good for town. For example, repair all the roads in the town. Yusland consists of n intersections connected by n - 1 bidirectional roads. One can travel from any intersection to any other intersection using only these roads. There is only one road repairing company in town, named \" RC company\" . Company' s center is located at the intersection 1. RC company doesn' t repair roads you tell them. Instead, they have workers at some intersections, who can repair only some specific paths. The i- th worker can be paid ci coins and then he repairs all roads on a path from ui to some vi that lies on the path from ui to intersection 1. Mayor asks you to choose the cheapest way to hire some subset of workers in order to repair all the roads in Yusland. It' s allowed that some roads will be repaired more than once. If it' s impossible to repair all roads print - 1.",
    "input": "The first line of the input contains two integers n and m ( 1 \u2264 n, m \u2264 300 000) \u2014 the number of cities in Yusland and the number of workers respectively. Then follow n\u22121 line, each of them contains two integers xi and yi ( 1 \u2264 xi, yi \u2264 n) \u2014 indices of intersections connected by the i- th road. Last m lines provide the description of workers, each line containing three integers ui, vi and ci ( 1 \u2264 ui, vi \u2264 n, 1 \u2264 ci \u2264 109) . This means that the i- th worker can repair all roads on the path from vi to ui for ci coins. It' s guaranteed that vi lies on the path from ui to 1. Note that vi and ui may coincide.",
    "output": "If it' s impossible to repair all roads then print - 1. Otherwise print a single integer \u2014 minimum cost required to repair all roads using \" RC company\" workers.",
    "note": "In the first sample, we should choose workers with indices 1, 3, 4 and 5, some roads will be repaired more than once but it is OK. The cost will be equal to 2 + 3 + 1 + 2 = 8 coins.",
    "topics": [
      "data structures",
      "dp",
      "greedy"
    ],
    "id": "671D"
  },
  {
    "title": "Ultimate Weirdness of an Array",
    "url": "https://codeforces.com/problemset/problem/671/C",
    "history": "Yasin has an array a containing n integers. Yasin is a 5 year old, so he loves ultimate weird things. Yasin denotes weirdness of an array as maximum gcd( ai, aj) value among all 1 \u2264 i < j \u2264 n. For n \u2264 1 weirdness is equal to 0, gcd( x, y) is the greatest common divisor of integers x and y. He also defines the ultimate weirdness of an array. Ultimate weirdness is where f( i, j) is weirdness of the new array a obtained by removing all elements between i and j inclusive, so new array is [ a1. . . ai - 1, aj + 1. . . an] . Since 5 year old boys can' t code, Yasin asks for your help to find the value of ultimate weirdness of the given array a!",
    "input": "The first line of the input contains a single integer n ( 1 \u2264 n \u2264 200 000) \u2014 the number of elements in a. The next line contains n integers ai ( 1 \u2264 ai \u2264 200 000) , where the i- th number is equal to the i- th element of the array a. It is guaranteed that all ai are distinct.",
    "output": "Print a single line containing the value of ultimate weirdness of the array a.",
    "note": "Consider the first sample. f( 1, 1) is equal to 3. f( 2, 2) is equal to 1. f( 3, 3) is equal to 2. f( 1, 2) , f( 1, 3) and f( 2, 3) are equal to 0. Thus the answer is 3 + 0 + 0 + 1 + 0 + 2 = 6.",
    "topics": [
      "data structures",
      "number theory"
    ],
    "id": "671C"
  },
  {
    "title": "Correct Bracket Sequence Editor",
    "url": "https://codeforces.com/problemset/problem/670/E",
    "history": "Recently Polycarp started to develop a text editor that works only with correct bracket sequences ( abbreviated as CBS) . Note that a bracket sequence is correct if it is possible to get a correct mathematical expression by adding \" + \" - s and \" 1\" - s to it. For example, sequences \" ( ( ) ) ( ) \" , \" ( ) \" and \" ( ( ) ( ( ) ) ) \" are correct, while \" ) ( \" , \" ( ( ) \" and \" ( ( ) ) ) ( \" are not. Each bracket in CBS has a pair. For example, in \" ( ( ) ( ( ) ) ) \" : 1st bracket is paired with 8th, 2d bracket is paired with 3d, 3d bracket is paired with 2d, 4th bracket is paired with 7th, 5th bracket is paired with 6th, 6th bracket is paired with 5th, 7th bracket is paired with 4th, 8th bracket is paired with 1st. Polycarp' s editor currently supports only three operations during the use of CBS. The cursor in the editor takes the whole position of one of the brackets ( not the position between the brackets! ) . There are three operations being supported: \u00abL\u00bb \u2014 move the cursor one position to the left, \u00abR\u00bb \u2014 move the cursor one position to the right, \u00abD\u00bb \u2014 delete the bracket in which the cursor is located, delete the bracket it' s paired to and all brackets between them ( that is, delete a substring between the bracket in which the cursor is located and the one it' s paired to) . After the operation \" D\" the cursor moves to the nearest bracket to the right ( of course, among the non- deleted) . If there is no such bracket ( that is, the suffix of the CBS was deleted) , then the cursor moves to the nearest bracket to the left ( of course, among the non- deleted) . There are pictures illustrated several usages of operation \" D\" below. All incorrect operations ( shift cursor over the end of CBS, delete the whole CBS, etc. ) are not supported by Polycarp' s editor. Polycarp is very proud of his development, can you implement the functionality of his editor?",
    "input": "The first line contains three positive integers n, m and p ( 2 \u2264 n \u2264 500 000, 1 \u2264 m \u2264 500 000, 1 \u2264 p \u2264 n) \u2014 the number of brackets in the correct bracket sequence, the number of operations and the initial position of cursor. Positions in the sequence are numbered from left to right, starting from one. It is guaranteed that n is even. It is followed by the string of n characters \" ( \" and \" ) \" forming the correct bracket sequence. Then follow a string of m characters \" L\" , \" R\" and \" D\" \u2014 a sequence of the operations. Operations are carried out one by one from the first to the last. It is guaranteed that the given operations never move the cursor outside the bracket sequence, as well as the fact that after all operations a bracket sequence will be non- empty.",
    "output": "Print the correct bracket sequence, obtained as a result of applying all operations to the initial sequence.",
    "note": "In the first sample the cursor is initially at position 5. Consider actions of the editor: command \" R\" \u2014 the cursor moves to the position 6 on the right; command \" D\" \u2014 the deletion of brackets from the position 5 to the position 6. After that CBS takes the form ( ( ) ) ( ) , the cursor is at the position 5; command \" L\" \u2014 the cursor moves to the position 4 on the left; command \" D\" \u2014 the deletion of brackets from the position 1 to the position 4. After that CBS takes the form ( ) , the cursor is at the position 1. Thus, the answer is equal to ( ) .",
    "topics": [
      "data structures",
      "dsu",
      "strings"
    ],
    "id": "670E"
  },
  {
    "title": "Forensic Examination",
    "url": "https://codeforces.com/problemset/problem/666/E",
    "history": "The country of Reberland is the archenemy of Berland. Recently the authorities of Berland arrested a Reberlandian spy who tried to bring the leaflets intended for agitational propaganda to Berland illegally . The most leaflets contain substrings of the Absolutely Inadmissible Swearword and maybe even the whole word. Berland legal system uses the difficult algorithm in order to determine the guilt of the spy. The main part of this algorithm is the following procedure. All the m leaflets that are brought by the spy are numbered from 1 to m. After that it' s needed to get the answer to q queries of the following kind: \" In which leaflet in the segment of numbers [ l, r] the substring of the Absolutely Inadmissible Swearword [ pl, pr] occurs more often? \" . The expert wants you to automate that procedure because this time texts of leaflets are too long. Help him!",
    "input": "The first line contains the string s ( 1 \u2264 | s| \u2264 5\u00b7105) \u2014 the Absolutely Inadmissible Swearword. The string s consists of only lowercase English letters. The second line contains the only integer m ( 1 \u2264 m \u2264 5\u00b7104) \u2014 the number of texts of leaflets for expertise. Each of the next m lines contains the only string ti \u2014 the text of the i- th leaflet. The sum of lengths of all leaflet texts doesn' t exceed 5\u00b7104. The text of the leaflets consists of only lowercase English letters. The next line contains integer q ( 1 \u2264 q \u2264 5\u00b7105) \u2014 the number of queries for expertise. Finally, each of the last q lines contains four integers l, r, pl, pr ( 1 \u2264 l \u2264 r \u2264 m, 1 \u2264 pl \u2264 pr \u2264 | s| ) , where | s| is the length of the Absolutely Inadmissible Swearword.",
    "output": "Print q lines. The i- th of them should contain two integers \u2014 the number of the text with the most occurences and the number of occurences of the substring [ pl, pr] of the string s. If there are several text numbers print the smallest one.",
    "note": "",
    "topics": [
      "data structures",
      "string suffix structures"
    ],
    "id": "666E"
  },
  {
    "title": "Four Divisors",
    "url": "https://codeforces.com/problemset/problem/665/F",
    "history": "If an integer a is divisible by another integer b, then b is called the divisor of a. For example: 12 has positive 6 divisors. They are 1, 2, 3, 4, 6 and 12. Let\u2019s define a function D( n) \u2014 number of integers between 1 and n ( inclusive) which has exactly four positive divisors. Between 1 and 10 only the integers 6, 8 and 10 has exactly four positive divisors. So, D( 10) = 3. You are given an integer n. You have to calculate D( n) .",
    "input": "The only line contains integer n ( 1 \u2264 n \u2264 1011) \u2014 the parameter from the problem statement.",
    "output": "Print the only integer c \u2014 the number of integers between 1 and n with exactly four divisors.",
    "note": "",
    "topics": [
      "data structures",
      "dp",
      "math",
      "number theory",
      "sortings",
      "two pointers"
    ],
    "id": "665F"
  },
  {
    "title": "Beautiful Subarrays",
    "url": "https://codeforces.com/problemset/problem/665/E",
    "history": "One day, ZS the Coder wrote down an array of integers a with elements a1, a2, . . . , an. A subarray of the array a is a sequence al, al + 1, . . . , ar for some integers ( l, r) such that 1 \u2264 l \u2264 r \u2264 n. ZS the Coder thinks that a subarray of a is beautiful if the bitwise xor of all the elements in the subarray is at least k. Help ZS the Coder find the number of beautiful subarrays of a!",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 106, 1 \u2264 k \u2264 109) \u2014 the number of elements in the array a and the value of the parameter k. The second line contains n integers ai ( 0 \u2264 ai \u2264 109) \u2014 the elements of the array a.",
    "output": "Print the only integer c \u2014 the number of beautiful subarrays of the array a.",
    "note": "",
    "topics": [
      "data structures",
      "divide and conquer",
      "strings",
      "trees"
    ],
    "id": "665E"
  },
  {
    "title": "Bear and Bowling 4",
    "url": "https://codeforces.com/problemset/problem/660/F",
    "history": "Limak is an old brown bear. He often goes bowling with his friends. Today he feels really good and tries to beat his own record! For rolling a ball one gets a score \u2014 an integer ( maybe negative) number of points. Score for the i- th roll is multiplied by i and scores are summed up. So, for k rolls with scores s1, s2, . . . , sk, the total score is . The total score is 0 if there were no rolls. Limak made n rolls and got score ai for the i- th of them. He wants to maximize his total score and he came up with an interesting idea. He can say that some first rolls were only a warm- up, and that he wasn' t focused during the last rolls. More formally, he can cancel any prefix and any suffix of the sequence a1, a2, . . . , an. It is allowed to cancel all rolls, or to cancel none of them. The total score is calculated as if there were only non- canceled rolls. So, the first non- canceled roll has score multiplied by 1, the second one has score multiplied by 2, and so on, till the last non- canceled roll. What maximum total score can Limak get?",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2\u00b7105) \u2014 the total number of rolls made by Limak. The second line contains n integers a1, a2, . . . , an ( | ai| \u2264 107) \u2014 scores for Limak' s rolls.",
    "output": "Print the maximum possible total score after cancelling rolls.",
    "note": "In the first sample test, Limak should cancel the first two rolls, and one last roll. He will be left with rolls 1, - 3, 7 what gives him the total score 1\u00b71 + 2\u00b7( - 3) + 3\u00b77 = 1 - 6 + 21 = 16.",
    "topics": [
      "binary search",
      "data structures",
      "divide and conquer",
      "geometry",
      "ternary search"
    ],
    "id": "660F"
  },
  {
    "title": "New Reform",
    "url": "https://codeforces.com/problemset/problem/659/E",
    "history": "Berland has n cities connected by m bidirectional roads. No road connects a city to itself, and each pair of cities is connected by no more than one road. It is not guaranteed that you can get from any city to any other one, using only the existing roads. The President of Berland decided to make changes to the road system and instructed the Ministry of Transport to make this reform. Now, each road should be unidirectional ( only lead from one city to another) . In order not to cause great resentment among residents, the reform needs to be conducted so that there can be as few separate cities as possible. A city is considered separate, if no road leads into it, while it is allowed to have roads leading from this city. Help the Ministry of Transport to find the minimum possible number of separate cities after the reform.",
    "input": "The first line of the input contains two positive integers, n and m \u2014 the number of the cities and the number of roads in Berland ( 2 \u2264 n \u2264 100 000, 1 \u2264 m \u2264 100 000) . Next m lines contain the descriptions of the roads: the i- th road is determined by two distinct integers xi, yi ( 1 \u2264 xi, yi \u2264 n, xi = \u0338 yi) , where xi and yi are the numbers of the cities connected by the i- th road. It is guaranteed that there is no more than one road between each pair of cities, but it is not guaranteed that from any city you can get to any other one, using only roads.",
    "output": "Print a single integer \u2014 the minimum number of separated cities after the reform.",
    "note": "In the first sample the following road orientation is allowed: , , . The second sample: , , , , . The third sample: , , , , .",
    "topics": [
      "data structures",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy"
    ],
    "id": "659E"
  },
  {
    "title": "Paper task",
    "url": "https://codeforces.com/problemset/problem/653/F",
    "history": "Alex was programming while Valentina ( his toddler daughter) got there and started asking many questions about the round brackets ( or parenthesis) in the code. He explained her a bit and when she got it he gave her a task in order to finish his code on time. For the purpose of this problem we consider only strings consisting of opening and closing round brackets, that is characters ' ( ' and ' ) ' . The sequence of brackets is called correct if: it' s empty; it' s a correct sequence of brackets, enclosed in a pair of opening and closing brackets; it' s a concatenation of two correct sequences of brackets. For example, the sequences \" ( ) ( ) \" and \" ( ( ( ) ) ) ( ( ) ) \" are correct, while \" ) ( ( ) \" , \" ( ( ( ( ( \" and \" ( ) ) \" are not. Alex took a piece of paper, wrote a string s consisting of brackets and asked Valentina to count the number of distinct non- empty substrings of s that are correct sequences of brackets. In other words, her task is to count the number of non- empty correct sequences of brackets that occur in a string s as a substring ( don' t mix up with subsequences) . When Valentina finished the task, Alex noticed he doesn' t know the answer. Help him don' t loose face in front of Valentina and solve the problem!",
    "input": "The first line of the input contains an integer n ( 1 \u2264 n \u2264 500 000) \u2014 the length of the string s. The second line contains a string s of length n consisting of only ' ( ' and ' ) ' .",
    "output": "Print the number of distinct non- empty correct sequences that occur in s as substring.",
    "note": "In the first sample, there are 5 distinct substrings we should count: \" ( ) \" , \" ( ) ( ) \" , \" ( ) ( ) ( ) \" , \" ( ) ( ) ( ) ( ) \" and \" ( ) ( ) ( ) ( ) ( ) \" . In the second sample, there are 3 distinct substrings we should count: \" ( ) \" , \" ( ( ) ) \" and \" ( ( ) ) ( ) \" .",
    "topics": [
      "data structures",
      "string suffix structures",
      "strings"
    ],
    "id": "653F"
  },
  {
    "title": "Nested Segments",
    "url": "https://codeforces.com/problemset/problem/652/D",
    "history": "You are given n segments on a line. There are no ends of some segments that coincide. For each segment find the number of segments it contains.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2\u00b7105) \u2014 the number of segments on a line. Each of the next n lines contains two integers li and ri ( - 109 \u2264 li < ri \u2264 109) \u2014 the coordinates of the left and the right ends of the i- th segment. It is guaranteed that there are no ends of some segments that coincide.",
    "output": "Print n lines. The j- th of them should contain the only integer aj \u2014 the number of segments contained in the j- th segment.",
    "note": "",
    "topics": [
      "data structures",
      "sortings"
    ],
    "id": "652D"
  },
  {
    "title": "Clockwork Bomb",
    "url": "https://codeforces.com/problemset/problem/650/E",
    "history": "My name is James diGriz, I' m the most clever robber and treasure hunter in the whole galaxy. There are books written about my adventures and songs about my operations, though you were able to catch me up in a pretty awkward moment. I was able to hide from cameras, outsmart all the guards and pass numerous traps, but when I finally reached the treasure box and opened it, I have accidentally started the clockwork bomb! Luckily, I have met such kind of bombs before and I know that the clockwork mechanism can be stopped by connecting contacts with wires on the control panel of the bomb in a certain manner. I see n contacts connected by n - 1 wires. Contacts are numbered with integers from 1 to n. Bomb has a security mechanism that ensures the following condition: if there exist k \u2265 2 contacts c1, c2, . . . , ck forming a circuit, i. e. there exist k distinct wires between contacts c1 and c2, c2 and c3, . . . , ck and c1, then the bomb immediately explodes and my story ends here. In particular, if two contacts are connected by more than one wire they form a circuit of length 2. It is also prohibited to connect a contact with itself. On the other hand, if I disconnect more than one wire ( i. e. at some moment there will be no more than n - 2 wires in the scheme) then the other security check fails and the bomb also explodes. So, the only thing I can do is to unplug some wire and plug it into a new place ensuring the fact that no circuits appear. I know how I should put the wires in order to stop the clockwork. But my time is running out! Help me get out of this alive: find the sequence of operations each of which consists of unplugging some wire and putting it into another place so that the bomb is defused.",
    "input": "The first line of the input contains n ( 2 \u2264 n \u2264 500 000) , the number of contacts. Each of the following n - 1 lines contains two of integers xi and yi ( 1 \u2264 xi, yi \u2264 n, xi = \u0338 yi) denoting the contacts currently connected by the i- th wire. The remaining n - 1 lines contain the description of the sought scheme in the same format. It is guaranteed that the starting and the ending schemes are correct ( i. e. do not contain cicuits nor wires connecting contact with itself) .",
    "output": "The first line should contain k ( k \u2265 0) \u2014 the minimum number of moves of unplugging and plugging back some wire required to defuse the bomb. In each of the following k lines output four integers ai, bi, ci, di meaning that on the i- th step it is neccesary to unplug the wire connecting the contacts ai and bi and plug it to the contacts ci and di. Of course the wire connecting contacts ai and bi should be present in the scheme. If there is no correct sequence transforming the existing scheme into the sought one, output - 1.",
    "note": "Picture with the clarification for the sample tests:",
    "topics": [
      "data structures",
      "dfs and similar",
      "dsu",
      "greedy",
      "trees"
    ],
    "id": "650E"
  },
  {
    "title": "Zip-line",
    "url": "https://codeforces.com/problemset/problem/650/D",
    "history": "Vasya has decided to build a zip- line on trees of a nearby forest. He wants the line to be as long as possible but he doesn' t remember exactly the heights of all trees in the forest. He is sure that he remembers correct heights of all trees except, possibly, one of them. It is known that the forest consists of n trees staying in a row numbered from left to right with integers from 1 to n. According to Vasya, the height of the i- th tree is equal to hi. The zip- line of length k should hang over k ( 1 \u2264 k \u2264 n) trees i1, i2, . . . , ik ( i1 < i2 < . . . < ik) such that their heights form an increasing sequence, that is hi1 < hi2 < . . . < hik. Petya had been in this forest together with Vasya, and he now has q assumptions about the mistake in Vasya' s sequence h. His i- th assumption consists of two integers ai and bi indicating that, according to Petya, the height of the tree numbered ai is actually equal to bi. Note that Petya' s assumptions are independent from each other. Your task is to find the maximum length of a zip- line that can be built over the trees under each of the q assumptions. In this problem the length of a zip line is considered equal to the number of trees that form this zip- line.",
    "input": "The first line of the input contains two integers n and m ( 1 \u2264 n, m \u2264 400 000) \u2014 the number of the trees in the forest and the number of Petya' s assumptions, respectively. The following line contains n integers hi ( 1 \u2264 hi \u2264 109) \u2014 the heights of trees according to Vasya. Each of the following m lines contains two integers ai and bi ( 1 \u2264 ai \u2264 n, 1 \u2264 bi \u2264 109) .",
    "output": "For each of the Petya' s assumptions output one integer, indicating the maximum length of a zip- line that can be built under this assumption.",
    "note": "Consider the first sample. The first assumption actually coincides with the height remembered by Vasya. In the second assumption the heights of the trees are ( 4, 2, 3, 4) , in the third one they are ( 1, 2, 3, 3) and in the fourth one they are ( 1, 2, 3, 5) .",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "hashing"
    ],
    "id": "650D"
  },
  {
    "title": "Watchmen",
    "url": "https://codeforces.com/problemset/problem/650/A",
    "history": "Watchmen are in a danger and Doctor Manhattan together with his friend Daniel Dreiberg should warn them as soon as possible. There are n watchmen on a plane, the i- th watchman is located at point ( xi, yi) . They need to arrange a plan, but there are some difficulties on their way. As you know, Doctor Manhattan considers the distance between watchmen i and j to be | xi - xj| + | yi - yj| . Daniel, as an ordinary person, calculates the distance using the formula . The success of the operation relies on the number of pairs ( i, j) ( 1 \u2264 i < j \u2264 n) , such that the distance between watchman i and watchmen j calculated by Doctor Manhattan is equal to the distance between them calculated by Daniel. You were asked to compute the number of such pairs.",
    "input": "The first line of the input contains the single integer n ( 1 \u2264 n \u2264 200 000) \u2014 the number of watchmen. Each of the following n lines contains two integers xi and yi ( | xi| , | yi| \u2264 109) . Some positions may coincide.",
    "output": "Print the number of pairs of watchmen such that the distance between them calculated by Doctor Manhattan is equal to the distance calculated by Daniel.",
    "note": "In the first sample, the distance between watchman 1 and watchman 2 is equal to | 1 - 7| + | 1 - 5| = 10 for Doctor Manhattan and for Daniel. For pairs ( 1, 1) , ( 1, 5) and ( 7, 5) , ( 1, 5) Doctor Manhattan and Daniel will calculate the same distances.",
    "topics": [
      "data structures",
      "geometry",
      "math"
    ],
    "id": "650A"
  },
  {
    "title": "Hostname Aliases",
    "url": "https://codeforces.com/problemset/problem/644/C",
    "history": "There are some websites that are accessible through several different addresses. For example, for a long time Codeforces was accessible with two hostnames codeforces. com and codeforces. ru. You are given a list of page addresses being queried. For simplicity we consider all addresses to have the form http: / / < hostname> [ / < path> ] , where: < hostname> \u2014 server name ( consists of words and maybe some dots separating them) , / < path> \u2014 optional part, where < path> consists of words separated by slashes. We consider two < hostname> to correspond to one website if for each query to the first < hostname> there will be exactly the same query to the second one and vice versa \u2014 for each query to the second < hostname> there will be the same query to the first one. Take a look at the samples for further clarifications. Your goal is to determine the groups of server names that correspond to one website. Ignore groups consisting of the only server name. Please note, that according to the above definition queries http: / / < hostname> and http: / / < hostname> / are different.",
    "input": "The first line of the input contains a single integer n ( 1 \u2264 n \u2264 100 000) \u2014 the number of page queries. Then follow n lines each containing exactly one address. Each address is of the form http: / / < hostname> [ / < path> ] , where: < hostname> consists of lowercase English letters and dots, there are no two consecutive dots, < hostname> doesn' t start or finish with a dot. The length of < hostname> is positive and doesn' t exceed 20. < path> consists of lowercase English letters, dots and slashes. There are no two consecutive slashes, < path> doesn' t start with a slash and its length doesn' t exceed 20. Addresses are not guaranteed to be distinct.",
    "output": "First print k \u2014 the number of groups of server names that correspond to one website. You should count only groups of size greater than one. Next k lines should contain the description of groups, one group per line. For each group print all server names separated by a single space. You are allowed to print both groups and names inside any group in arbitrary order.",
    "note": "",
    "topics": [
      "*special",
      "binary search",
      "data structures",
      "implementation",
      "sortings",
      "strings"
    ],
    "id": "644C"
  },
  {
    "title": "Processing Queries",
    "url": "https://codeforces.com/problemset/problem/644/B",
    "history": "In this problem you have to simulate the workflow of one- thread server. There are n queries to process, the i- th will be received at moment ti and needs to be processed for di units of time. All ti are guaranteed to be distinct. When a query appears server may react in three possible ways: If server is free and query queue is empty, then server immediately starts to process this query. If server is busy and there are less than b queries in the queue, then new query is added to the end of the queue. If server is busy and there are already b queries pending in the queue, then new query is just rejected and will never be processed. As soon as server finished to process some query, it picks new one from the queue ( if it' s not empty, of course) . If a new query comes at some moment x, and the server finishes to process another query at exactly the same moment, we consider that first query is picked from the queue and only then new query appears. For each query find the moment when the server will finish to process it or print - 1 if this query will be rejected.",
    "input": "The first line of the input contains two integers n and b ( 1 \u2264 n, b \u2264 200 000) \u2014 the number of queries and the maximum possible size of the query queue. Then follow n lines with queries descriptions ( in chronological order) . Each description consists of two integers ti and di ( 1 \u2264 ti, di \u2264 109) , where ti is the moment of time when the i- th query appears and di is the time server needs to process it. It is guaranteed that ti - 1 < ti for all i > 1.",
    "output": "Print the sequence of n integers e1, e2, . . . , en, where ei is the moment the server will finish to process the i- th query ( queries are numbered in the order they appear in the input) or - 1 if the corresponding query will be rejected.",
    "note": "Consider the first sample. The server will start to process first query at the moment 2 and will finish to process it at the moment 11. At the moment 4 second query appears and proceeds to the queue. At the moment 10 third query appears. However, the server is still busy with query 1, b = 1 and there is already query 2 pending in the queue, so third query is just rejected. At the moment 11 server will finish to process first query and will take the second query from the queue. At the moment 15 fourth query appears. As the server is currently busy it proceeds to the queue. At the moment 19 two events occur simultaneously: server finishes to proceed the second query and the fifth query appears. As was said in the statement above, first server will finish to process the second query, then it will pick the fourth query from the queue and only then will the fifth query appear. As the queue is empty fifth query is proceed there. Server finishes to process query number 4 at the moment 21. Query number 5 is picked from the queue. Server finishes to process query number 5 at the moment 22.",
    "topics": [
      "*special",
      "constructive algorithms",
      "data structures",
      "two pointers"
    ],
    "id": "644B"
  },
  {
    "title": "Choosing Ads",
    "url": "https://codeforces.com/problemset/problem/643/G",
    "history": "One social network developer recently suggested a new algorithm of choosing ads for users. There are n slots which advertisers can buy. It is possible to buy a segment of consecutive slots at once. The more slots you own, the bigger are the chances your ad will be shown to users. Every time it is needed to choose ads to show, some segment of slots is picked by a secret algorithm. Then some advertisers are chosen. The only restriction is that it should be guaranteed for advertisers which own at least p",
    "input": "The first line of the input contains three integers n, m and p ( 1 \u2264 n, m \u2264 150 000, 20 \u2264 p \u2264 100) \u2014 the number of slots, the number of queries to your system and threshold for which display of the ad is guaranteed. Next line contains n integers ai ( 1 \u2264 ai \u2264 150 000) , where the i- th number means id of advertiser who currently owns the i- th slot. Next m lines contain queries descriptions. Each description is of one of the following forms: 1 l r id ( 1 \u2264 l \u2264 r \u2264 n, 1 \u2264 id \u2264 150 000) \u2014 advertiser id bought all slots in a range from l to r inclusive; 2 l r ( 1 \u2264 l \u2264 r) \u2014 you need to choose advertisers for segment [ l, r] .",
    "output": "For each query of the second type answer should be printed in a separate line. First integer of the answer should be the number of advertisements that will be shown . Next cnt integers should be advertisers' ids. It is allowed to print one advertiser more than once, but each advertiser that owns at least slots of the segment from l to r should be in your answer.",
    "note": "Samples demonstrate that you actually have quite a lot of freedom in choosing advertisers.",
    "topics": [
      "data structures"
    ],
    "id": "643G"
  },
  {
    "title": "Little Artem and Time Machine",
    "url": "https://codeforces.com/problemset/problem/641/E",
    "history": "Little Artem has invented a time machine! He could go anywhere in time, but all his thoughts of course are with computer science. He wants to apply this time machine to a well- known data structure: multiset. Artem wants to create a basic multiset of integers. He wants these structure to support operations of three types: Add integer to the multiset. Note that the difference between set and multiset is that multiset may store several instances of one integer. Remove integer from the multiset. Only one instance of this integer is removed. Artem doesn' t want to handle any exceptions, so he assumes that every time remove operation is called, that integer is presented in the multiset. Count the number of instances of the given integer that are stored in the multiset. But what about time machine? Artem doesn' t simply apply operations to the multiset one by one, he now travels to different moments of time and apply his operation there. Consider the following example. First Artem adds integer 5 to the multiset at the 1- st moment of time. Then Artem adds integer 3 to the multiset at the moment 5. Then Artem asks how many 5 are there in the multiset at moment 6. The answer is 1. Then Artem returns back in time and asks how many integers 3 are there in the set at moment 4. Since 3 was added only at moment 5, the number of integers 3 at moment 4 equals to 0. Then Artem goes back in time again and removes 5 from the multiset at moment 3. Finally Artyom asks at moment 7 how many integers 5 are there in the set. The result is 0, since we have removed 5 at the moment 3. Note that Artem dislikes exceptions so much that he assures that after each change he makes all delete operations are applied only to element that is present in the multiset. The answer to the query of the third type is computed at the moment Artem makes the corresponding query and are not affected in any way by future changes he makes. Help Artem implement time travellers multiset.",
    "input": "The first line of the input contains a single integer n ( 1 \u2264 n \u2264 100 000) \u2014 the number of Artem' s queries. Then follow n lines with queries descriptions. Each of them contains three integers ai, ti and xi ( 1 \u2264 ai \u2264 3, 1 \u2264 ti, xi \u2264 109) \u2014 type of the query, moment of time Artem travels to in order to execute this query and the value of the query itself, respectively. It' s guaranteed that all moments of time are distinct and that after each operation is applied all operations of the first and second types are consistent.",
    "output": "For each ask operation output the number of instances of integer being queried at the given moment of time.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": "641E"
  },
  {
    "title": "Bear and Chemistry",
    "url": "https://codeforces.com/problemset/problem/639/F",
    "history": "Limak is a smart brown bear who loves chemistry, reactions and transforming elements. In Bearland ( Limak' s home) there are n elements, numbered 1 through n. There are also special machines, that can transform elements. Each machine is described by two integers ai, bi representing two elements, not necessarily distinct. One can use a machine either to transform an element ai to bi or to transform bi to ai. Machines in Bearland aren' t very resistant and each of them can be used at most once. It is possible that ai = bi and that many machines have the same pair ai, bi. Radewoosh is Limak' s biggest enemy and rival. He wants to test Limak in the chemistry. They will meet tomorrow and both of them will bring all their machines. Limak has m machines but he doesn' t know much about his enemy. They agreed Radewoosh will choose two distinct elements, let' s denote them as x and y. Limak will be allowed to use both his and Radewoosh' s machines. He may use zero or more ( maybe even all) machines to achieve the goal, each machine at most once. Limak will start from an element x and his task will be to first get an element y and then to again get an element x \u2014 then we say that he succeeds. After that Radewoosh would agree that Limak knows the chemistry ( and Radewoosh would go away) . Radewoosh likes some particular non- empty set of favorite elements and he will choose x, y from that set. Limak doesn' t know exactly which elements are in the set and also he doesn' t know what machines Radewoosh has. Limak has heard q gossips ( queries) though and each of them consists of Radewoosh' s machines and favorite elements. For each gossip Limak wonders if he would be able to succeed tomorrow for every pair x, y chosen from the set of favorite elements. If yes then print \" YES\" ( without the quotes) . But if there exists a pair ( x, y) from the given set that Limak wouldn' t be able to succeed then you should print \" NO\" ( without the quotes) .",
    "input": "The first line contains three integers n, m and q ( 1 \u2264 n, q \u2264 300 000, 0 \u2264 m \u2264 300 000) \u2014 the number of elements, the number of Limak' s machines and the number of gossips, respectively. Each of the next m lines contains two integers ai and bi ( 1 \u2264 ai, bi \u2264 n) describing one of Limak' s machines. Then, the description of q gossips follows. The first line of the description of the i- th gossip contains two integers ni and mi ( 1 \u2264 ni \u2264 300 000, 0 \u2264 mi \u2264 300 000) . The second line contains ni distinct integers xi, 1, xi, 2, . . . , xi, ni ( 1 \u2264 xi, j \u2264 n) \u2014 Radewoosh' s favorite elements in the i- th gossip. Note that ni = 1 is allowed, in this case there are no pairs of distinct elements, so Limak automatically wins ( the answer is \" YES\" ) . Then mi lines follow, each containing two integers ai, j, bi, j ( 1 \u2264 ai, j, bi, j) describing one of Radewoosh' s machines in the i- th gossip. The sum of ni over all gossips won' t exceed 300 000. Also, the sum of mi over all gossips won' t exceed 300 000. Important: Because we want you to process the gossips online, in order to know the elements in Radewoosh' s favorite set and elements that his machines can transform, for on each number that denotes them in the input you should use following function: int rotate( int element) element= ( element+ R)",
    "output": "You should print q lines. The i- th of them should contain \" YES\" ( without quotes) if for the i- th gossip for each pair of elements x and y ( in the set xi, 1, xi, 2, . . . , xi, ni) Limak is able to succeed. Otherwise you should print \" NO\" ( without quotes) .",
    "note": "Lets look at first sample: In first gossip Radewoosh' s favorite set is 4, 2 and he has no machines. Limak can tranform element 4 into 2 ( so half of a task is complete) and then 2 into 3, and 3 into 4. Answer is \" YES\" , so R is increased by 1. In second gossip set in the input is denoted by 6, 2 and machine by ( 3, 4) , but R is equal to 1, so set is 1, 3 and machine is ( 4, 5) . Answer is \" NO\" , so R isn' t changed. In third gossip set 6, 4, 3 and machines ( 2, 5) and ( 4, 6) are deciphered to be 1, 5, 4, ( 3, 6) and ( 5, 1) . Consider Radewoosh' s choices: If he chooses elements 1 and 5, then Limak is able to transform 1 into 5, then 6 into 3, 3 into 2 and 2 into 1. If he chooses elements 5 and 4, then Limak is able to transform 5 into 6, 6 into 3, 3 into 4 ( half way already behind him) , 4 into 2, 2 into 1, 1 into 5. If he chooses elements 1 and 4, then Limak is able to transform 1 into 2, 2 into 4, 4 into 3, 3 into 6, 6 into 5 and 5 into 1. So Limak is able to execute task. Answer is \" YES\" and R is increased by 3 ( it' s equal to 4 now) . In last gossip 1, 2 and ( 1, 2) are deciphered to be 5, 6 and ( 5, 6) . Now there are 2 machines ( 5, 6) so Limak is able to execute task again.",
    "topics": [
      "data structures",
      "dfs and similar",
      "graphs",
      "trees"
    ],
    "id": "639F"
  },
  {
    "title": "Bear and Contribution",
    "url": "https://codeforces.com/problemset/problem/639/D",
    "history": "Codeforces is a wonderful platform and one its feature shows how much someone contributes to the community. Every registered user has contribution \u2014 an integer number, not necessarily positive. There are n registered users and the i- th of them has contribution ti. Limak is a little polar bear and he' s new into competitive programming. He doesn' t even have an account in Codeforces but he is able to upvote existing blogs and comments. We assume that every registered user has infinitely many blogs and comments. Limak can spend b minutes to read one blog and upvote it. Author' s contribution will be increased by 5. Limak can spend c minutes to read one comment and upvote it. Author' s contribution will be increased by 1. Note that it' s possible that Limak reads blogs faster than comments. Limak likes ties. He thinks it would be awesome to see a tie between at least k registered users. To make it happen he is going to spend some time on reading and upvoting. After that, there should exist an integer value x that at least k registered users have contribution exactly x. How much time does Limak need to achieve his goal?",
    "input": "The first line contains four integers n, k, b and c ( 2 \u2264 k \u2264 n \u2264 200 000, 1 \u2264 b, c \u2264 1000) \u2014 the number of registered users, the required minimum number of users with the same contribution, time needed to read and upvote a blog, and time needed to read and upvote a comment, respectively. The second line contains n integers t1, t2, . . . , tn ( | ti| \u2264 109) where ti denotes contribution of the i- th registered user.",
    "output": "Print the minimum number of minutes Limak will spend to get a tie between at least k registered users.",
    "note": "In the first sample, there are 4 registered users and Limak wants a tie between at least 3 of them. Limak should behave as follows. He spends 100 minutes to read one blog of the 4- th user and increase his contribution from 1 to 6. Then he spends 4\u00b730 = 120 minutes to read four comments of the 2- nd user and increase his contribution from 2 to 6 ( four times it was increaded by 1) . In the given scenario, Limak spends 100 + 4\u00b730 = 220 minutes and after that each of users 2, 3, 4 has contribution 6. In the second sample, Limak needs 30 minutes to read a blog and 100 minutes to read a comment. This time he can get 3 users with contribution equal to 12 by spending 100 + 3\u00b730 = 190 minutes: Spend 2\u00b730 = 60 minutes to read two blogs of the 1- st user to increase his contribution from 2 to 12. Spend 30 + 100 minutes to read one blog and one comment of the 3- rd user. His contribution will change from 6 to 6 + 5 + 1 = 12.",
    "topics": [
      "data structures",
      "greedy",
      "sortings",
      "two pointers"
    ],
    "id": "639D"
  },
  {
    "title": "Running with Obstacles",
    "url": "https://codeforces.com/problemset/problem/637/D",
    "history": "A sportsman starts from point xstart = 0 and runs to point with coordinate xfinish = m ( on a straight line) . Also, the sportsman can jump \u2014 to jump, he should first take a run of length of not less than s meters ( in this case for these s meters his path should have no obstacles) , and after that he can jump over a length of not more than d meters. Running and jumping is permitted only in the direction from left to right. He can start andfinish a jump only at the points with integer coordinates in which there are no obstacles. To overcome some obstacle, it is necessary to land at a point which is strictly to the right of this obstacle. On the way of an athlete are n obstacles at coordinates x1, x2, . . . , xn. He cannot go over the obstacles, he can only jump over them. Your task is to determine whether the athlete will be able to get to the finish point.",
    "input": "The first line of the input containsd four integers n, m, s and d ( 1 \u2264 n \u2264 200 000, 2 \u2264 m \u2264 109, 1 \u2264 s, d \u2264 109) \u2014 the number of obstacles on the runner' s way, the coordinate of the finishing point, the length of running before the jump and the maximum length of the jump, correspondingly. The second line contains a sequence of n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 m - 1) \u2014 the coordinates of the obstacles. It is guaranteed that the starting and finishing point have no obstacles, also no point can have more than one obstacle, The coordinates of the obstacles are given in an arbitrary order.",
    "output": "If the runner cannot reach the finishing point, print in the first line of the output \" IMPOSSIBLE\" ( without the quotes) . If the athlete can get from start to finish, print any way to do this in the following format: print a line of form \" RUN X> \" ( where \" X\" should be a positive integer) , if the athlete should run for \" X\" more meters; print a line of form \" JUMP Y\" ( where \" Y\" should be a positive integer) , if the sportsman starts a jump and should remain in air for \" Y\" more meters. All commands \" RUN\" and \" JUMP\" should strictly alternate, starting with \" RUN\" , besides, they should be printed chronologically. It is not allowed to jump over the finishing point but it is allowed to land there after a jump. The athlete should stop as soon as he reaches finish.",
    "note": "",
    "topics": [
      "*special",
      "data structures",
      "dp",
      "greedy"
    ],
    "id": "637D"
  },
  {
    "title": "Chat Order",
    "url": "https://codeforces.com/problemset/problem/637/B",
    "history": "Polycarp is a big lover of killing time in social networks. A page with a chatlist in his favourite network is made so that when a message is sent to some friend, his friend' s chat rises to the very top of the page. The relative order of the other chats doesn' t change. If there was no chat with this friend before, then a new chat is simply inserted to the top of the list. Assuming that the chat list is initially empty, given the sequence of Polycaprus' messages make a list of chats after all of his messages are processed. Assume that no friend wrote any message to Polycarpus.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 200 000) \u2014 the number of Polycarpus' messages. Next n lines enlist the message recipients in the order in which the messages were sent. The name of each participant is a non- empty sequence of lowercase English letters of length at most 10.",
    "output": "Print all the recipients to who Polycarp talked to in the order of chats with them, from top to bottom.",
    "note": "In the first test case Polycarpus first writes to friend by name \" alex\" , and the list looks as follows: alex Then Polycarpus writes to friend by name \" ivan\" and the list looks as follows: ivan alex Polycarpus writes the third message to friend by name \" roman\" and the list looks as follows: roman ivan alex Polycarpus writes the fourth message to friend by name \" ivan\" , to who he has already sent a message, so the list of chats changes as follows: ivan roman alex",
    "topics": [
      "*special",
      "binary search",
      "constructive algorithms",
      "data structures",
      "sortings"
    ],
    "id": "637B"
  },
  {
    "title": "Fibonacci-ish II",
    "url": "https://codeforces.com/problemset/problem/633/H",
    "history": "Yash is finally tired of computing the length of the longest Fibonacci- ish sequence. He now plays around with more complex things such as Fibonacci- ish potentials. Fibonacci- ish potential of an array ai is computed as follows: Remove all elements j if there exists i < j such that ai = aj. Sort the remaining elements in ascending order, i. e. a1 < a2 < . . . < an. Compute the potential as P( a) = a1\u00b7F1 + a2\u00b7F2 + . . . + an\u00b7Fn, where Fi is the i- th Fibonacci number ( see notes for clarification) . You are given an array ai of length n and q ranges from lj to rj. For each range j you have to compute the Fibonacci- ish potential of the array bi, composed using all elements of ai from lj to rj inclusive. Find these potentials modulo m.",
    "input": "The first line of the input contains integers of n and m ( 1 \u2264 n, m \u2264 30 000) \u2014 the length of the initial array and the modulo, respectively. The next line contains n integers ai ( 0 \u2264 ai \u2264 109) \u2014 elements of the array. Then follow the number of ranges q ( 1 \u2264 q \u2264 30 000) . Last q lines contain pairs of indices li and ri ( 1 \u2264 li \u2264 ri \u2264 n) \u2014 ranges to compute Fibonacci- ish potentials.",
    "output": "Print q lines, i- th of them must contain the Fibonacci- ish potential of the i- th range modulo m.",
    "note": "For the purpose of this problem define Fibonacci numbers as follows: F1 = F2 = 1. Fn = Fn - 1 + Fn - 2 for each n > 2. In the first query, the subarray [ 1, 2, 1] can be formed using the minimal set 1, 2. Thus, the potential of this subarray is 1* 1+ 2* 1= 3.",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "633H"
  },
  {
    "title": "Yash And Trees",
    "url": "https://codeforces.com/problemset/problem/633/G",
    "history": "Yash loves playing with trees and gets especially excited when they have something to do with prime numbers. On his 20th birthday he was granted with a rooted tree of n nodes to answer queries on. Hearing of prime numbers on trees, Yash gets too intoxicated with excitement and asks you to help out and answer queries on trees for him. Tree is rooted at node 1. Each node i has some value ai associated with it. Also, integer m is given. There are queries of two types: for given node v and integer value x, increase all ai in the subtree of node v by value x for given node v, find the number of prime numbers p less than m, for which there exists a node u in the subtree of v and a non- negative integer value k, such that au = p + m\u00b7k.",
    "input": "The first of the input contains two integers n and m ( 1 \u2264 n \u2264 100 000, 1 \u2264 m \u2264 1000) \u2014 the number of nodes in the tree and value m from the problem statement, respectively. The second line consists of n integers ai ( 0 \u2264 ai \u2264 109) \u2014 initial values of the nodes. Then follow n - 1 lines that describe the tree. Each of them contains two integers ui and vi ( 1 \u2264 ui, vi \u2264 n) \u2014 indices of nodes connected by the i- th edge. Next line contains a single integer q ( 1 \u2264 q \u2264 100 000) \u2014 the number of queries to proceed. Each of the last q lines is either 1 v x or 2 v ( 1 \u2264 v \u2264 n, 0 \u2264 x \u2264 109) , giving the query of the first or the second type, respectively. It' s guaranteed that there will be at least one query of the second type.",
    "output": "For each of the queries of the second type print the number of suitable prime numbers.",
    "note": "",
    "topics": [
      "bitmasks",
      "data structures",
      "dfs and similar",
      "math",
      "number theory"
    ],
    "id": "633G"
  },
  {
    "title": "Startup Funding",
    "url": "https://codeforces.com/problemset/problem/633/E",
    "history": "An e- commerce startup pitches to the investors to get funding. They have been functional for n weeks now and also have a website! For each week they know the number of unique visitors during this week vi and the revenue ci. To evaluate the potential of the startup at some range of weeks from l to r inclusive investors use the minimum among the maximum number of visitors multiplied by 100 and the minimum revenue during this period, that is: The truth is that investors have no idea how to efficiently evaluate the startup, so they are going to pick some k random distinct weeks li and give them to managers of the startup. For each li they should pick some ri \u2265 li and report maximum number of visitors and minimum revenue during this period. Then, investors will calculate the potential of the startup for each of these ranges and take minimum value of p( li, ri) as the total evaluation grade of the startup. Assuming that managers of the startup always report the optimal values of ri for some particular li, i. e. , the value such that the resulting grade of the startup is maximized, what is the expected resulting grade of the startup?",
    "input": "The first line of the input contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 1 000 000) . The second line contains n integers vi ( 1 \u2264 vi \u2264 107) \u2014 the number of unique visitors during each week. The third line contains n integers ci ( 1 \u2264 ci \u2264 107) \u2014the revenue for each week.",
    "output": "Print a single real value \u2014 the expected grade of the startup. Your answer will be considered correct if its absolute or relative error does not exceed 10 - 6. Namely: let' s assume that your answer is a, and the answer of the jury is b. The checker program will consider your answer correct, if .",
    "note": "Consider the first sample. If the investors ask for li = 1 onwards, startup will choose ri = 1, such that max number of visitors is 3 and minimum revenue is 300. Thus, potential in this case is min( 3\u00b7100, 300) = 300. If the investors ask for li = 2 onwards, startup will choose ri = 3, such that max number of visitors is 2 and minimum revenue is 200. Thus, potential in this case is min( 2\u00b7100, 200) = 200. If the investors ask for li = 3 onwards, startup will choose ri = 3, such that max number of visitors is 1 and minimum revenue is 300. Thus, potential in this case is min( 1\u00b7100, 300) = 100. We have to choose a set of size 2 equi- probably and take minimum of each. The possible sets here are : 200, 300, 100, 300, 100, 200, effectively the set of possible values as perceived by investors equi- probably: 200, 100, 100. Thus, the expected value is ( 100 + 200 + 100) / 3 = 133. ( 3) .",
    "topics": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "probabilities",
      "two pointers"
    ],
    "id": "633E"
  },
  {
    "title": "Spy Syndrome 2",
    "url": "https://codeforces.com/problemset/problem/633/C",
    "history": "After observing the results of Spy Syndrome, Yash realised the errors of his ways. He now believes that a super spy such as Siddhant can' t use a cipher as basic and ancient as Caesar cipher. After many weeks of observation of Siddhant\u2019s sentences, Yash determined a new cipher technique. For a given sentence, the cipher is processed as: Convert all letters of the sentence to lowercase. Reverse each of the words of the sentence individually. Remove all the spaces in the sentence. For example, when this cipher is applied to the sentenceKira is childish and he hates losingthe resulting string isariksihsidlihcdnaehsetahgnisolNow Yash is given some ciphered string and a list of words. Help him to find out any original sentence composed using only words from the list. Note, that any of the given words could be used in the sentence multiple times.",
    "input": "The first line of the input contains a single integer n ( 1 \u2264 n \u2264 10 000) \u2014 the length of the ciphered text. The second line consists of n lowercase English letters \u2014 the ciphered text t. The third line contains a single integer m ( 1 \u2264 m \u2264 100 000) \u2014 the number of words which will be considered while deciphering the text. Each of the next m lines contains a non- empty word wi ( | wi| \u2264 1 000) consisting of uppercase and lowercase English letters only. It' s guaranteed that the total length of all words doesn' t exceed 1 000 000.",
    "output": "Print one line \u2014 the original sentence. It is guaranteed that at least one solution exists. If there are multiple solutions, you may output any of those.",
    "note": "In sample case 2 there may be multiple accepted outputs, \" HI there HeLLo\" and \" HI there hello\" you may output any of them.",
    "topics": [
      "data structures",
      "dp",
      "hashing",
      "implementation",
      "sortings",
      "string suffix structures",
      "strings"
    ],
    "id": "633C"
  },
  {
    "title": "Product Sum",
    "url": "https://codeforces.com/problemset/problem/631/E",
    "history": "Blake is the boss of Kris, however, this doesn' t spoil their friendship. They often gather at the bar to talk about intriguing problems about maximising some values. This time the problem is really special. You are given an array a of length n. The characteristic of this array is the value \u2014 the sum of the products of the values ai by i. One may perform the following operation exactly once: pick some element of the array and move to any position. In particular, it' s allowed to move the element to the beginning or to the end of the array. Also, it' s allowed to put it back to the initial position. The goal is to get the array with the maximum possible value of characteristic.",
    "input": "The first line of the input contains a single integer n ( 2 \u2264 n \u2264 200 000) \u2014 the size of the array a. The second line contains n integers ai ( 1 \u2264 i \u2264 n, | ai| \u2264 1 000 000) \u2014 the elements of the array a.",
    "output": "Print a single integer \u2014 the maximum possible value of characteristic of a that can be obtained by performing no more than one move.",
    "note": "In the first sample, one may pick the first element and place it before the third ( before 5) . Thus, the answer will be 3\u00b71 + 2\u00b72 + 4\u00b73 + 5\u00b74 = 39. In the second sample, one may pick the fifth element of the array and place it before the third. The answer will be 1\u00b71 + 1\u00b72 + 1\u00b73 + 2\u00b74 + 7\u00b75 = 49.",
    "topics": [
      "data structures",
      "dp",
      "geometry"
    ],
    "id": "631E"
  },
  {
    "title": "Messenger",
    "url": "https://codeforces.com/problemset/problem/631/D",
    "history": "Each employee of the \" Blake Techologies\" company uses a special messaging app \" Blake Messenger\" . All the stuff likes this app and uses it constantly. However, some important futures are missing. For example, many users want to be able to search through the message history. It was already announced that the new feature will appear in the nearest update, when developers faced some troubles that only you may help them to solve. All the messages are represented as a strings consisting of only lowercase English letters. In order to reduce the network load strings are represented in the special compressed form. Compression algorithm works as follows: string is represented as a concatenation of n blocks, each block containing only equal characters. One block may be described as a pair ( li, ci) , where li is the length of the i- th block and ci is the corresponding letter. Thus, the string s may be written as the sequence of pairs . Your task is to write the program, that given two compressed string t and s finds all occurrences of s in t. Developers know that there may be many such occurrences, so they only ask you to find the number of them. Note that p is the starting position of some occurrence of s in t if and only if tptp + 1. . . tp + | s| - 1 = s, where ti is the i- th character of string t. Note that the way to represent the string in compressed form may not be unique. For example string \" aaaa\" may be given as , , . . .",
    "input": "The first line of the input contains two integers n and m ( 1 \u2264 n, m \u2264 200 000) \u2014 the number of blocks in the strings t and s, respectively. The second line contains the descriptions of n parts of string t in the format \" li- ci\" ( 1 \u2264 li \u2264 1 000 000) \u2014 the length of the i- th part and the corresponding lowercase English letter. The second line contains the descriptions of m parts of string s in the format \" li- ci\" ( 1 \u2264 li \u2264 1 000 000) \u2014 the length of the i- th part and the corresponding lowercase English letter.",
    "output": "Print a single integer \u2014 the number of occurrences of s in t.",
    "note": "In the first sample, t = \" aaabbccccaaacc\" , and string s = \" aabbc\" . The only occurrence of string s in string t starts at position p = 2. In the second sample, t = \" aaabbbbbbaaaaaaacccceeeeeeeeaa\" , and s = \" aaa\" . The occurrences of s in t start at positions p = 1, p = 10, p = 11, p = 12, p = 13 and p = 14.",
    "topics": [
      "data structures",
      "hashing",
      "implementation",
      "string suffix structures",
      "strings"
    ],
    "id": "631D"
  },
  {
    "title": "Report",
    "url": "https://codeforces.com/problemset/problem/631/C",
    "history": "Each month Blake gets the report containing main economic indicators of the company \" Blake Technologies\" . There are n commodities produced by the company. For each of them there is exactly one integer in the final report, that denotes corresponding revenue. Before the report gets to Blake, it passes through the hands of m managers. Each of them may reorder the elements in some order. Namely, the i- th manager either sorts first ri numbers in non- descending or non- ascending order and then passes the report to the manager i + 1, or directly to Blake ( if this manager has number i = m) . Employees of the \" Blake Technologies\" are preparing the report right now. You know the initial sequence ai of length n and the description of each manager, that is value ri and his favourite order. You are asked to speed up the process and determine how the final report will look like.",
    "input": "The first line of the input contains two integers n and m ( 1 \u2264 n, m \u2264 200 000) \u2014 the number of commodities in the report and the number of managers, respectively. The second line contains n integers ai ( | ai| \u2264 109) \u2014 the initial report before it gets to the first manager. Then follow m lines with the descriptions of the operations managers are going to perform. The i- th of these lines contains two integers ti and ri ( , 1 \u2264 ri \u2264 n) , meaning that the i- th manager sorts the first ri numbers either in the non- descending ( if ti = 1) or non- ascending ( if ti = 2) order.",
    "output": "Print n integers \u2014 the final report, which will be passed to Blake by manager number m.",
    "note": "In the first sample, the initial report looked like: 1 2 3. After the first manager the first two numbers were transposed: 2 1 3. The report got to Blake in this form. In the second sample the original report was like this: 1 2 4 3. After the first manager the report changed to: 4 2 1 3. After the second manager the report changed to: 2 4 1 3. This report was handed over to Blake.",
    "topics": [
      "data structures",
      "sortings"
    ],
    "id": "631C"
  },
  {
    "title": "Famil Door and Roads",
    "url": "https://codeforces.com/problemset/problem/629/E",
    "history": "Famil Door\u2019s City map looks like a tree ( undirected connected acyclic graph) so other people call it Treeland. There are n intersections in the city connected by n - 1 bidirectional roads. There are m friends of Famil Door living in the city. The i- th friend lives at the intersection ui and works at the intersection vi. Everyone in the city is unhappy because there is exactly one simple path between their home and work. Famil Door plans to construct exactly one new road and he will randomly choose one among n\u00b7( n - 1) / 2 possibilities. Note, that he may even build a new road between two cities that are already connected by one. He knows, that each of his friends will become happy, if after Famil Door constructs a new road there is a path from this friend home to work and back that doesn' t visit the same road twice. Formally, there is a simple cycle containing both ui and vi. Moreover, if the friend becomes happy, his pleasure is equal to the length of such path ( it' s easy to see that it' s unique) . For each of his friends Famil Door wants to know his expected pleasure, that is the expected length of the cycle containing both ui and vi if we consider only cases when such a cycle exists.",
    "input": "The first line of the input contains integers n and m ( 2 \u2264 n, m \u2264 100 000) \u2014 the number of the intersections in the Treeland and the number of Famil Door' s friends. Then follow n - 1 lines describing bidirectional roads. Each of them contains two integers ai and bi ( 1 \u2264 ai, bi \u2264 n) \u2014 the indices of intersections connected by the i- th road. Last m lines of the input describe Famil Door' s friends. The i- th of these lines contain two integers ui and vi ( 1 \u2264 ui, vi \u2264 n, ui = \u0338 vi) \u2014 indices of intersections where the i- th friend lives and works.",
    "output": "For each friend you should print the expected value of pleasure if he will be happy. Your answer will be considered correct if its absolute or relative error does not exceed 10 - 6. Namely: let' s assume that your answer is a, and the answer of the jury is b. The checker program will consider your answer correct, if .",
    "note": "Consider the second sample. Both roads ( 1, 2) and ( 2, 3) work, so the expected length if Roads ( 1, 3) and ( 2, 3) make the second friend happy. Same as for friend 1 the answer is 2. 5 The only way to make the third friend happy is to add road ( 2, 3) , so the answer is 3",
    "topics": [
      "combinatorics",
      "data structures",
      "dfs and similar",
      "dp",
      "probabilities",
      "trees"
    ],
    "id": "629E"
  },
  {
    "title": "Babaei and Birthday Cake",
    "url": "https://codeforces.com/problemset/problem/629/D",
    "history": "As you know, every birthday party has a cake! This time, Babaei is going to prepare the very special birthday party' s cake. Simple cake is a cylinder of some radius and height. The volume of the simple cake is equal to the volume of corresponding cylinder. Babaei has n simple cakes and he is going to make a special cake placing some cylinders on each other. However, there are some additional culinary restrictions. The cakes are numbered in such a way that the cake number i can be placed only on the table or on some cake number j where j < i. Moreover, in order to impress friends Babaei will put the cake i on top of the cake j only if the volume of the cake i is strictly greater than the volume of the cake j. Babaei wants to prepare a birthday cake that has a maximum possible total volume. Help him find this value.",
    "input": "The first line of the input contains a single integer n ( 1 \u2264 n \u2264 100 000) \u2014 the number of simple cakes Babaei has. Each of the following n lines contains two integers ri and hi ( 1 \u2264 ri, hi \u2264 10 000) , giving the radius and height of the i- th cake.",
    "output": "Print the maximum volume of the cake that Babaei can make. Your answer will be considered correct if its absolute or relative error does not exceed 10 - 6. Namely: let' s assume that your answer is a, and the answer of the jury is b. The checker program will consider your answer correct, if .",
    "note": "In first sample, the optimal way is to choose the cake number 1. In second sample, the way to get the maximum volume is to use cakes with indices 1, 2 and 4.",
    "topics": [
      "data structures",
      "dp"
    ],
    "id": "629D"
  },
  {
    "title": "Zbazi in Zeydabad",
    "url": "https://codeforces.com/problemset/problem/628/E",
    "history": "A tourist wants to visit country Zeydabad for Zbazi ( a local game in Zeydabad) . The country Zeydabad is a rectangular table consisting of n rows and m columns. Each cell on the country is either ' z' or ' . ' . The tourist knows this country is named Zeydabad because there are lots of \u201dZ- pattern\" s in the country. A \u201dZ- pattern\" is a square which anti- diagonal is completely filled with ' z' and its upper and lower rows are also completely filled with ' z' . All other cells of a square can be arbitrary. Note that a \u201dZ- pattern\" can consist of only one cell ( see the examples) . So he wants to count the number of \u201dZ- pattern\" s in the country ( a necessary skill for Zbazi) . Now your task is to help tourist with counting number of \u201dZ- pattern\" s. As input/ output can reach huge size it is recommended to use fast input/ output methods: for example, prefer to use gets/ scanf/ printf instead of getline/ cin/ cout in C+ + , prefer to use BufferedReader/ PrintWriter instead of Scanner/ System. out in Java.",
    "input": "The first line contains two integers n, m ( 1 \u2264 n, m \u2264 3000) \u2014 the number of rows and columns respectively. Each of the next n lines contains m characters ' z' or ' . ' \u2014 the description of Zeydabad.",
    "output": "Print the only integer a \u2014 the number of \u201dZ- pattern\" s in Zeydabad.",
    "note": "",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "628E"
  },
  {
    "title": "Package Delivery",
    "url": "https://codeforces.com/problemset/problem/627/C",
    "history": "Johnny drives a truck and must deliver a package from his hometown to the district center. His hometown is located at point 0 on a number line, and the district center is located at the point d. Johnny' s truck has a gas tank that holds exactly n liters, and his tank is initially full. As he drives, the truck consumes exactly one liter per unit distance traveled. Moreover, there are m gas stations located at various points along the way to the district center. The i- th station is located at the point xi on the number line and sells an unlimited amount of fuel at a price of pi dollars per liter. Find the minimum cost Johnny must pay for fuel to successfully complete the delivery.",
    "input": "The first line of input contains three space separated integers d, n, and m ( 1 \u2264 n \u2264 d \u2264 109, 1 \u2264 m \u2264 200 000) \u2014 the total distance to the district center, the volume of the gas tank, and the number of gas stations, respectively. Each of the next m lines contains two integers xi, pi ( 1 \u2264 xi \u2264 d - 1, 1 \u2264 pi \u2264 106) \u2014 the position and cost of gas at the i- th gas station. It is guaranteed that the positions of the gas stations are distinct.",
    "output": "Print a single integer \u2014 the minimum cost to complete the delivery. If there is no way to complete the delivery, print - 1.",
    "note": "In the first sample, Johnny' s truck holds 4 liters. He can drive 3 units to the first gas station, buy 2 liters of gas there ( bringing the tank to 3 liters total) , drive 3 more units to the third gas station, buy 4 liters there to fill up his tank, and then drive straight to the district center. His total cost is 2\u00b75 + 4\u00b73 = 22 dollars. In the second sample, there is no way for Johnny to make it to the district center, as his tank cannot hold enough gas to take him from the latest gas station to the district center.",
    "topics": [
      "data structures",
      "divide and conquer",
      "greedy"
    ],
    "id": "627C"
  },
  {
    "title": "Factory Repairs",
    "url": "https://codeforces.com/problemset/problem/627/B",
    "history": "A factory produces thimbles in bulk. Typically, it can produce up to a thimbles a day. However, some of the machinery is defective, so it can currently only produce b thimbles each day. The factory intends to choose a k- day period to do maintenance and construction; it cannot produce any thimbles during this time, but will be restored to its full production of a thimbles per day after the k days are complete. Initially, no orders are pending. The factory receives updates of the form di, ai, indicating that ai new orders have been placed for the di- th day. Each order requires a single thimble to be produced on precisely the specified day. The factory may opt to fill as many or as few of the orders in a single batch as it likes. As orders come in, the factory owner would like to know the maximum number of orders he will be able to fill if he starts repairs on a given day pi. Help the owner answer his questions.",
    "input": "The first line contains five integers n, k, a, b, and q ( 1 \u2264 k \u2264 n \u2264 200 000, 1 \u2264 b < a \u2264 10 000, 1 \u2264 q \u2264 200 000) \u2014 the number of days, the length of the repair time, the production rates of the factory, and the number of updates, respectively. The next q lines contain the descriptions of the queries. Each query is of one of the following two forms: 1 di ai ( 1 \u2264 di \u2264 n, 1 \u2264 ai \u2264 10 000) , representing an update of ai orders on day di, or 2 pi ( 1 \u2264 pi \u2264 n - k + 1) , representing a question: at the moment, how many orders could be filled if the factory decided to commence repairs on day pi? It' s guaranteed that the input will contain at least one query of the second type.",
    "output": "For each query of the second type, print a line containing a single integer \u2014 the maximum number of orders that the factory can fill over all n days.",
    "note": "Consider the first sample. We produce up to 1 thimble a day currently and will produce up to 2 thimbles a day after repairs. Repairs take 2 days. For the first question, we are able to fill 1 order on day 1, no orders on days 2 and 3 since we are repairing, no orders on day 4 since no thimbles have been ordered for that day, and 2 orders for day 5 since we are limited to our production capacity, for a total of 3 orders filled. For the third question, we are able to fill 1 order on day 1, 1 order on day 2, and 2 orders on day 5, for a total of 4 orders.",
    "topics": [
      "data structures"
    ],
    "id": "627B"
  },
  {
    "title": "Raffles",
    "url": "https://codeforces.com/problemset/problem/626/G",
    "history": "Johnny is at a carnival which has n raffles. Raffle i has a prize with value pi. Each participant can put tickets in whichever raffles they choose ( they may have more than one ticket in a single raffle) . At the end of the carnival, one ticket is selected at random from each raffle, and the owner of the ticket wins the associated prize. A single person can win multiple prizes from different raffles. However, county rules prevent any one participant from owning more than half the tickets in a single raffle, i. e. putting more tickets in the raffle than all the other participants combined. To help combat this ( and possibly win some prizes) , the organizers started by placing a single ticket in each raffle, which they will never remove. Johnny bought t tickets and is wondering where to place them. Currently, there are a total of li tickets in the i- th raffle. He watches as other participants place tickets and modify their decisions and, at every moment in time, wants to know how much he can possibly earn. Find the maximum possible expected value of Johnny' s winnings at each moment if he distributes his tickets optimally. Johnny may redistribute all of his tickets arbitrarily between each update, but he may not place more than t tickets total or have more tickets in a single raffle than all other participants combined.",
    "input": "The first line contains two integers n, t, and q ( 1 \u2264 n, t, q \u2264 200 000) \u2014 the number of raffles, the number of tickets Johnny has, and the total number of updates, respectively. The second line contains n space- separated integers pi ( 1 \u2264 pi \u2264 1000) \u2014 the value of the i- th prize. The third line contains n space- separated integers li ( 1 \u2264 li \u2264 1000) \u2014 the number of tickets initially in the i- th raffle. The last q lines contain the descriptions of the updates. Each description contains two integers tk, rk ( 1 \u2264 tk \u2264 2, 1 \u2264 rk \u2264 n) \u2014 the type of the update and the raffle number. An update of type 1 represents another participant adding a ticket to raffle rk. An update of type 2 represents another participant removing a ticket from raffle rk. It is guaranteed that, after each update, each raffle has at least 1 ticket ( not including Johnny' s) in it.",
    "output": "Print q lines, each containing a single real number \u2014 the maximum expected value of Johnny' s winnings after the k- th update. Your answer will be considered correct if its absolute or relative error does not exceed 10 - 6. Namely: let' s assume that your answer is a, and the answer of the jury is b. The checker program will consider your answer correct, if .",
    "note": "In the first case, Johnny only has one ticket to distribute. The prizes are worth 4 and 5, and the raffles initially have 1 and 2 tickets, respectively. After the first update, each raffle has 2 tickets, so Johnny has expected value of winning by placing his ticket into the second raffle. The second update adds a ticket to the second raffle, so Johnny can win in the first raffle. After the final update, Johnny keeps his ticket in the first raffle and wins . In the second case, Johnny has more tickets than he is allowed to spend. In particular, after the first update, there are 7, 6, and 6 tickets in each raffle, respectively, so Johnny can only put in 19 tickets, winning each prize with probability . Also, note that after the last two updates, Johnny must remove a ticket from the last raffle in order to stay under the tickets in the third raffle.",
    "topics": [
      "data structures",
      "dp",
      "greedy",
      "math"
    ],
    "id": "626G"
  },
  {
    "title": "Frog Fights",
    "url": "https://codeforces.com/problemset/problem/625/E",
    "history": "Ostap Bender recently visited frog farm and was inspired to create his own frog game. Number of frogs are places on a cyclic gameboard, divided into m cells. Cells are numbered from 1 to m, but the board is cyclic, so cell number 1 goes right after the cell number m in the direction of movement. i- th frog during its turn can jump for ai cells. Frogs move in turns, game starts with a move by frog 1. On its turn i- th frog moves ai cells forward, knocking out all the frogs on its way. If there is a frog in the last cell of the path of the i- th frog, that frog is also knocked out. After this the value ai is decreased by the number of frogs that were knocked out during this turn. If ai is zero or goes negative, then i- th frog doesn' t make moves anymore. After frog number 1 finishes its turn, frog number 2 starts to move, then frog number 3 and so on. After the frog number n makes its move, frog 1 starts to move again, then frog 2 and so on this process goes forever. If some frog was already knocked out from the board, we consider that it skips all its moves. Help Ostap to identify, what frogs will stay on the board at the end of a game?",
    "input": "First line of the input contains two integers n and m ( 1 \u2264 n \u2264 100000, 1 \u2264 m \u2264 109, n \u2264 m) \u2014 number of frogs and gameboard size, respectively. Following n lines contains frogs descriptions \u2014 two integers pi and ai ( 1 \u2264 pi, ai \u2264 m) \u2014 the number of cell occupied by i- th frog initially and initial jump length. All pi are guaranteed to be distinct.",
    "output": "In the first line output number of frogs on the final gameboard. In the second line output their numbers in any order.",
    "note": "In the first sample first frog jumps 1 cell and finishes in cell number 3. Second frog jumps for 3 cells and finishes on cell number 3, knocking out frog number 1. Current jump length for frog number 2 is now 2. Third frog jumps to cell 2, then second frog jumps to cell 5. Third frog in turn finishes in cell 5 and removes frog 2 from the gameboard. Now, it' s the only remaining frog in the game. In the second sample first frog jumps 2 cells and knocks out frogs in cells 2 and 3. Its value ai is now 0. Then fourth frog jumps and knocks out fifth frog and its ai is now 0 too. These two frogs will remains on the gameboard forever.",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "625E"
  },
  {
    "title": "Not Equal on a Segment",
    "url": "https://codeforces.com/problemset/problem/622/C",
    "history": "You are given array a with n integers and m queries. The i- th query is given with three integers li, ri, xi. For the i- th query find any position pi ( li \u2264 pi \u2264 ri) so that api = \u0338 xi.",
    "input": "The first line contains two integers n, m ( 1 \u2264 n, m \u2264 2\u00b7105) \u2014 the number of elements in a and the number of queries. The second line contains n integers ai ( 1 \u2264 ai \u2264 106) \u2014 the elements of the array a. Each of the next m lines contains three integers li, ri, xi ( 1 \u2264 li \u2264 ri \u2264 n, 1 \u2264 xi \u2264 106) \u2014 the parameters of the i- th query.",
    "output": "Print m lines. On the i- th line print integer pi \u2014 the position of any number not equal to xi in segment [ li, ri] or the value - 1 if there is no such number.",
    "note": "",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "622C"
  },
  {
    "title": "Xors on Segments",
    "url": "https://codeforces.com/problemset/problem/620/F",
    "history": "You are given an array with n integers ai and m queries. Each query is described by two integers ( lj, rj) . Let' s define the function . The function is defined for only u \u2264 v. For each query print the maximal value of the function f( ax, ay) over all lj \u2264 x, y \u2264 rj, ax \u2264 ay.",
    "input": "The first line contains two integers n, m ( 1 \u2264 n \u2264 5\u00b7104, 1 \u2264 m \u2264 5\u00b7103) \u2014 the size of the array and the number of the queries. The second line contains n integers ai ( 1 \u2264 ai \u2264 106) \u2014 the elements of the array a. Each of the next m lines contains two integers lj, rj ( 1 \u2264 lj \u2264 rj \u2264 n) \u2013 the parameters of the j- th query.",
    "output": "For each query print the value aj on a separate line \u2014 the maximal value of the function f( ax, ay) over all lj \u2264 x, y \u2264 rj, ax \u2264 ay.",
    "note": "",
    "topics": [
      "data structures",
      "strings",
      "trees"
    ],
    "id": "620F"
  },
  {
    "title": "New Year Tree",
    "url": "https://codeforces.com/problemset/problem/620/E",
    "history": "The New Year holidays are over, but Resha doesn' t want to throw away the New Year tree. He invited his best friends Kerim and Gural to help him to redecorate the New Year tree. The New Year tree is an undirected tree with n vertices and root in the vertex 1. You should process the queries of the two types: Change the colours of all vertices in the subtree of the vertex v to the colour c. Find the number of different colours in the subtree of the vertex v.",
    "input": "The first line contains two integers n, m ( 1 \u2264 n, m \u2264 4\u00b7105) \u2014 the number of vertices in the tree and the number of the queries. The second line contains n integers ci ( 1 \u2264 ci \u2264 60) \u2014 the colour of the i- th vertex. Each of the next n - 1 lines contains two integers xj, yj ( 1 \u2264 xj, yj \u2264 n) \u2014 the vertices of the j- th edge. It is guaranteed that you are given correct undirected tree. The last m lines contains the description of the queries. Each description starts with the integer tk ( 1 \u2264 tk \u2264 2) \u2014 the type of the k- th query. For the queries of the first type then follows two integers vk, ck ( 1 \u2264 vk \u2264 n, 1 \u2264 ck \u2264 60) \u2014 the number of the vertex whose subtree will be recoloured with the colour ck. For the queries of the second type then follows integer vk ( 1 \u2264 vk \u2264 n) \u2014 the number of the vertex for which subtree you should find the number of different colours.",
    "output": "For each query of the second type print the integer a \u2014 the number of different colours in the subtree of the vertex given in the query. Each of the numbers should be printed on a separate line in order of query appearing in the input.",
    "note": "",
    "topics": [
      "bitmasks",
      "data structures",
      "trees"
    ],
    "id": "620E"
  },
  {
    "title": "Robot Arm",
    "url": "https://codeforces.com/problemset/problem/618/E",
    "history": "Roger is a robot. He has an arm that is a series of n segments connected to each other. The endpoints of the i- th segment are initially located at points ( i - 1, 0) and ( i, 0) . The endpoint at ( i - 1, 0) is colored red and the endpoint at ( i, 0) is colored blue for all segments. Thus, the blue endpoint of the i- th segment is touching the red endpoint of the ( i + 1) - th segment for all valid i. Roger can move his arm in two different ways: He can choose some segment and some value. This is denoted as choosing the segment number i and picking some positive l. This change happens as follows: the red endpoint of segment number i and segments from 1 to i - 1 are all fixed in place. Imagine a ray from the red endpoint to the blue endpoint. The blue endpoint and segments i + 1 through n are translated l units in the direction of this ray. In this picture, the red point labeled A and segments before A stay in place, while the blue point labeled B and segments after B gets translated. He can choose a segment and rotate it. This is denoted as choosing the segment number i, and an angle a. The red endpoint of the i- th segment will stay fixed in place. The blue endpoint of that segment and segments i + 1 to n will rotate clockwise by an angle of a degrees around the red endpoint. In this picture, the red point labeled A and segments before A stay in place, while the blue point labeled B and segments after B get rotated around point A. Roger will move his arm m times. These transformations are a bit complicated, and Roger easily loses track of where the blue endpoint of the last segment is. Help him compute the coordinates of the blue endpoint of the last segment after applying each operation. Note that these operations are cumulative, and Roger' s arm may intersect itself arbitrarily during the moves.",
    "input": "The first line of the input will contain two integers n and m ( 1 \u2264 n, m \u2264 300 000) \u2014 the number of segments and the number of operations to perform. Each of the next m lines contains three integers xi, yi and zi describing a move. If xi = 1, this line describes a move of type 1, where yi denotes the segment number and zi denotes the increase in the length. If xi = 2, this describes a move of type 2, where yi denotes the segment number, and zi denotes the angle in degrees. ( 1 \u2264 xi \u2264 2, 1 \u2264 yi \u2264 n, 1 \u2264 zi \u2264 359)",
    "output": "Print m lines. The i- th line should contain two real values, denoting the coordinates of the blue endpoint of the last segment after applying operations 1, . . . , i. Your answer will be considered correct if its absolute or relative error does not exceed 10 - 4. Namely, let' s assume that your answer for a particular value of a coordinate is a and the answer of the jury is b. The checker program will consider your answer correct if for all coordinates.",
    "note": "The following pictures shows the state of the arm after each operation. The coordinates of point F are printed after applying each operation. For simplicity, we only show the blue endpoints of a segment ( with the exception for the red endpoint of the first segment) . For instance, the point labeled B is the blue endpoint for segment 1 and also the red endpoint for segment 2. Initial state: Extend segment 1 by 3. Rotate segment 3 by 90 degrees clockwise. Rotate segment 5 by 48 degrees clockwise. Extend segment 4 by 1.",
    "topics": [
      "data structures",
      "geometry"
    ],
    "id": "618E"
  },
  {
    "title": "XOR and Favorite Number",
    "url": "https://codeforces.com/problemset/problem/617/E",
    "history": "Bob has a favorite number k and ai of length n. Now he asks you to answer m queries. Each query is given by a pair li and ri and asks you to count the number of pairs of integers i and j, such that l \u2264 i \u2264 j \u2264 r and the xor of the numbers ai, ai + 1, . . . , aj is equal to k.",
    "input": "The first line of the input contains integers n, m and k ( 1 \u2264 n, m \u2264 100 000, 0 \u2264 k \u2264 1 000 000) \u2014 the length of the array, the number of queries and Bob' s favorite number respectively. The second line contains n integers ai ( 0 \u2264 ai \u2264 1 000 000) \u2014 Bob' s array. Then m lines follow. The i- th line contains integers li and ri ( 1 \u2264 li \u2264 ri \u2264 n) \u2014 the parameters of the i- th query.",
    "output": "Print m lines, answer the queries in the order they appear in the input.",
    "note": "In the first sample the suitable pairs of i and j for the first query are: ( 1, 2) , ( 1, 4) , ( 1, 5) , ( 2, 3) , ( 3, 6) , ( 5, 6) , ( 6, 6) . Not a single of these pairs is suitable for the second query. In the second sample xor equals 1 for all subarrays of an odd length.",
    "topics": [
      "data structures"
    ],
    "id": "617E"
  },
  {
    "title": "Longest k-Good Segment",
    "url": "https://codeforces.com/problemset/problem/616/D",
    "history": "The array a with n integers is given. Let' s call the sequence of one or more consecutive elements in a segment. Also let' s call the segment k- good if it contains no more than k different values. Find any longest k- good segment. As the input/ output can reach huge size it is recommended to use fast input/ output methods: for example, prefer to use scanf/ printf instead of cin/ cout in C+ + , prefer to use BufferedReader/ PrintWriter instead of Scanner/ System. out in Java.",
    "input": "The first line contains two integers n, k ( 1 \u2264 k \u2264 n \u2264 5\u00b7105) \u2014 the number of elements in a and the parameter k. The second line contains n integers ai ( 0 \u2264 ai \u2264 106) \u2014 the elements of the array a.",
    "output": "Print two integers l, r ( 1 \u2264 l \u2264 r \u2264 n) \u2014 the index of the left and the index of the right ends of some k- good longest segment. If there are several longest segments you can print any of them. The elements in a are numbered from 1 to n from left to right.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "two pointers"
    ],
    "id": "616D"
  },
  {
    "title": "Replace To Make Regular Bracket Sequence",
    "url": "https://codeforces.com/problemset/problem/612/C",
    "history": "You are given string s consists of opening and closing brackets of four kinds < > , , [ ] , ( ) . There are two types of brackets: opening and closing. You can replace any bracket by another of the same type. For example, you can replace < by the bracket , but you can' t replace it by ) or > . The following definition of a regular bracket sequence is well- known, so you can be familiar with it. Let' s define a regular bracket sequence ( RBS) . Empty string is RBS. Let s1 and s2 be a RBS then the strings < s1> s2, s1s2, [ s1] s2, ( s1) s2 are also RBS. For example the string \" [ [ ( ) ] < > ] \" is RBS, but the strings \" [ ) ( ) \" and \" ] [ ( ) ( ) \" are not. Determine the least number of replaces to make the string s RBS.",
    "input": "The only line contains a non empty string s, consisting of only opening and closing brackets of four kinds. The length of s does not exceed 106.",
    "output": "If it' s impossible to get RBS from s print Impossible. Otherwise print the least number of replaces needed to get RBS from s.",
    "note": "",
    "topics": [
      "data structures",
      "expression parsing",
      "math"
    ],
    "id": "612C"
  },
  {
    "title": "New Year and Three Musketeers",
    "url": "https://codeforces.com/problemset/problem/611/E",
    "history": "Do you know the story about the three musketeers? Anyway, you must help them now. Richelimakieu is a cardinal in the city of Bearis. He found three brave warriors and called them the three musketeers. Athos has strength a, Borthos strength b, and Caramis has strength c. The year 2015 is almost over and there are still n criminals to be defeated. The i- th criminal has strength ti. It' s hard to defeat strong criminals \u2014 maybe musketeers will have to fight together to achieve it. Richelimakieu will coordinate musketeers' actions. In each hour each musketeer can either do nothing or be assigned to one criminal. Two or three musketeers can be assigned to the same criminal and then their strengths are summed up. A criminal can be defeated in exactly one hour ( also if two or three musketeers fight him) . Richelimakieu can' t allow the situation where a criminal has strength bigger than the sum of strengths of musketeers fighting him \u2014 a criminal would win then! In other words, there are three ways to defeat a criminal. A musketeer of the strength x in one hour can defeat a criminal of the strength not greater than x. So, for example Athos in one hour can defeat criminal i only if ti \u2264 a. Two musketeers can fight together and in one hour defeat a criminal of the strength not greater than the sum of strengths of these two musketeers. So, for example Athos and Caramis in one hour can defeat criminal i only if ti \u2264 a + c. Note that the third remaining musketeer can either do nothing or fight some other criminal. Similarly, all three musketeers can fight together and in one hour defeat a criminal of the strength not greater than the sum of musketeers' strengths, i. e. ti \u2264 a + b + c. Richelimakieu doesn' t want musketeers to fight during the New Year' s Eve. Thus, he must coordinate their actions in order to minimize the number of hours till all criminals will be defeated. Find the minimum number of hours to defeat all criminals. If musketeers can' t defeat them all then print \" - 1\" ( without the quotes) instead.",
    "input": "The first line of the input contains a single integer n ( 1 \u2264 n \u2264 200 000) \u2014 the number of criminals. The second line contains three integers a, b and c ( 1 \u2264 a, b, c \u2264 108) \u2014 strengths of musketeers. The third line contains n integers t1, t2, . . . , tn ( 1 \u2264 ti \u2264 108) \u2014 strengths of criminals.",
    "output": "Print one line with the answer. If it' s impossible to defeat all criminals, print \" - 1\" ( without the quotes) . Otherwise, print the minimum number of hours the three musketeers will spend on defeating all criminals.",
    "note": "In the first sample Athos has strength 10, Borthos 20, and Caramis 30. They can defeat all criminals in two hours: Borthos and Caramis should together fight a criminal with strength 50. In the same hour Athos can fight one of four criminals with strength 1. There are three criminals left, each with strength 1. Each musketeer can fight one criminal in the second hour. In the second sample all three musketeers must together fight a criminal with strength 51. It takes one hour. In the second hour they can fight separately, each with one criminal. In the third hour one criminal is left and any of musketeers can fight him.",
    "topics": [
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "611E"
  },
  {
    "title": "Alphabet Permutations",
    "url": "https://codeforces.com/problemset/problem/610/E",
    "history": "You are given a string s of length n, consisting of first k lowercase English letters. We define a c- repeat of some string q as a string, consisting of c copies of the string q. For example, string \" acbacbacbacb\" is a 4- repeat of the string \" acb\" . Let' s say that string a contains string b as a subsequence, if string b can be obtained from a by erasing some symbols. Let p be a string that represents some permutation of the first k lowercase English letters. We define function d( p) as the smallest integer such that a d( p) - repeat of the string p contains string s as a subsequence. There are m operations of one of two types that can be applied to string s: Replace all characters at positions from li to ri by a character ci. For the given p, that is a permutation of first k lowercase English letters, find the value of function d( p) . All operations are performed sequentially, in the order they appear in the input. Your task is to determine the values of function d( p) for all operations of the second type.",
    "input": "The first line contains three positive integers n, m and k ( 1 \u2264 n \u2264 200 000, 1 \u2264 m \u2264 20000, 1 \u2264 k \u2264 10) \u2014 the length of the string s, the number of operations and the size of the alphabet respectively. The second line contains the string s itself. Each of the following lines m contains a description of some operation: Operation of the first type starts with 1 followed by a triple li, ri and ci, that denotes replacement of all characters at positions from li to ri by character ci ( 1 \u2264 li \u2264 ri \u2264 n, ci is one of the first k lowercase English letters) . Operation of the second type starts with 2 followed by a permutation of the first k lowercase English letters.",
    "output": "For each query of the second type the value of function d( p) .",
    "note": "After the first operation the string s will be abbbbba. In the second operation the answer is 6- repeat of abc: ABcaBcaBcaBcaBcAbc. After the third operation the string s will be abbcbba. In the fourth operation the answer is 5- repeat of cba: cbAcBacBaCBacBA. Uppercase letters means the occurrences of symbols from the string s.",
    "topics": [
      "data structures",
      "strings"
    ],
    "id": "610E"
  },
  {
    "title": "Vika and Segments",
    "url": "https://codeforces.com/problemset/problem/610/D",
    "history": "Vika has an infinite sheet of squared paper. Initially all squares are white. She introduced a two- dimensional coordinate system on this sheet and drew n black horizontal and vertical segments parallel to the coordinate axes. All segments have width equal to 1 square, that means every segment occupy some set of neighbouring squares situated in one row or one column. Your task is to calculate the number of painted cells. If a cell was painted more than once, it should be calculated exactly once.",
    "input": "The first line of the input contains a single integer n ( 1 \u2264 n \u2264 100 000) \u2014 the number of segments drawn by Vika. Each of the next n lines contains four integers x1, y1, x2 and y2 ( - 109 \u2264 x1, y1, x2, y2 \u2264 109) \u2014 the coordinates of the endpoints of the segments drawn by Vika. It is guaranteed that all the segments are parallel to coordinate axes. Segments may touch, overlap and even completely coincide.",
    "output": "Print the number of cells painted by Vika. If a cell was painted more than once, it should be calculated exactly once in the answer.",
    "note": "In the first sample Vika will paint squares ( 0, 1) , ( 1, 1) , ( 2, 1) , ( 1, 2) , ( 1, 3) , ( 1, 4) , ( 0, 3) and ( 2, 3) .",
    "topics": [
      "constructive algorithms",
      "data structures",
      "geometry",
      "two pointers"
    ],
    "id": "610D"
  },
  {
    "title": "Frogs and mosquitoes",
    "url": "https://codeforces.com/problemset/problem/609/F",
    "history": "There are n frogs sitting on the coordinate axis Ox. For each frog two values xi, ti are known \u2014 the position and the initial length of the tongue of the i- th frog ( it is guaranteed that all positions xi are different) . m mosquitoes one by one are landing to the coordinate axis. For each mosquito two values are known pj \u2014 the coordinate of the position where the j- th mosquito lands and bj \u2014 the size of the j- th mosquito. Frogs and mosquitoes are represented as points on the coordinate axis. The frog can eat mosquito if mosquito is in the same position with the frog or to the right, and the distance between them is not greater than the length of the tongue of the frog. If at some moment several frogs can eat a mosquito the leftmost frog will eat it ( with minimal xi) . After eating a mosquito the length of the tongue of a frog increases with the value of the size of eaten mosquito. It' s possible that after it the frog will be able to eat some other mosquitoes ( the frog should eat them in this case) . For each frog print two values \u2014 the number of eaten mosquitoes and the length of the tongue after landing all mosquitoes and after eating all possible mosquitoes by frogs. Each mosquito is landing to the coordinate axis only after frogs eat all possible mosquitoes landed before. Mosquitoes are given in order of their landing to the coordinate axis.",
    "input": "First line contains two integers n, m ( 1 \u2264 n, m \u2264 2\u00b7105) \u2014 the number of frogs and mosquitoes. Each of the next n lines contains two integers xi, ti ( 0 \u2264 xi, ti \u2264 109) \u2014 the position and the initial length of the tongue of the i- th frog. It is guaranteed that all xi are different. Next m lines contain two integers each pj, bj ( 0 \u2264 pj, bj \u2264 109) \u2014 the position and the size of the j- th mosquito.",
    "output": "Print n lines. The i- th line should contain two integer values ci, li \u2014 the number of mosquitoes eaten by the i- th frog and the length of the tongue of the i- th frog.",
    "note": "",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "609F"
  },
  {
    "title": "Minimum spanning tree for each edge",
    "url": "https://codeforces.com/problemset/problem/609/E",
    "history": "Connected undirected weighted graph without self- loops and multiple edges is given. Graph contains n vertices and m edges. For each edge ( u, v) find the minimal possible weight of the spanning tree that contains the edge ( u, v) . The weight of the spanning tree is the sum of weights of all edges included in spanning tree.",
    "input": "First line contains two integers n and m ( 1 \u2264 n \u2264 2\u00b7105, n - 1 \u2264 m \u2264 2\u00b7105) \u2014 the number of vertices and edges in graph. Each of the next m lines contains three integers ui, vi, wi ( 1 \u2264 ui, vi \u2264 n, ui = \u0338 vi, 1 \u2264 wi \u2264 109) \u2014 the endpoints of the i- th edge and its weight.",
    "output": "Print m lines. i- th line should contain the minimal possible weight of the spanning tree that contains i- th edge. The edges are numbered from 1 to m in order of their appearing in input.",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "dsu",
      "graphs",
      "trees"
    ],
    "id": "609E"
  },
  {
    "title": "Power Tree",
    "url": "https://codeforces.com/problemset/problem/607/D",
    "history": "Genos and Saitama went shopping for Christmas trees. However, a different type of tree caught their attention, the exalted Power Tree. A Power Tree starts out as a single root vertex indexed 1. A Power Tree grows through a magical phenomenon known as an update. In an update, a single vertex is added to the tree as a child of some other vertex. Every vertex in the tree ( the root and all the added vertices) has some value vi associated with it. The power of a vertex is defined as the strength of the multiset composed of the value associated with this vertex ( vi) and the powers of its direct children. The strength of a multiset is defined as the sum of all elements in the multiset multiplied by the number of elements in it. Or in other words for some multiset S: Saitama knows the updates that will be performed on the tree, so he decided to test Genos by asking him queries about the tree during its growth cycle. An update is of the form 1 p v, and adds a new vertex with value v as a child of vertex p. A query is of the form 2 u, and asks for the power of vertex u. Please help Genos respond to these queries modulo 109 + 7.",
    "input": "The first line of the input contains two space separated integers v1 and q ( 1 \u2264 v1 < 109, 1 \u2264 q \u2264 200 000) \u2014 the value of vertex 1 and the total number of updates and queries respectively. The next q lines contain the updates and queries. Each of them has one of the following forms: 1 pi vi, if these line describes an update. The index of the added vertex is equal to the smallest positive integer not yet used as an index in the tree. It is guaranteed that pi is some already existing vertex and 1 \u2264 vi < 109. 2 ui, if these line describes a query. It is guaranteed ui will exist in the tree. It is guaranteed that the input will contain at least one query.",
    "output": "For each query, print out the power of the given vertex modulo 109 + 7.",
    "note": "For the first sample case, after all the updates the graph will have vertices labelled in the following manner: 1 \u2014 2 \u2014 3 \u2014 4 \u2014 5These vertices will have corresponding values: 2 \u2014 3 \u2014 5 \u2014 7 \u2014 11And corresponding powers: 344 \u2014 170 \u2014 82 \u2014 36 \u2014 11",
    "topics": [
      "data structures",
      "trees"
    ],
    "id": "607D"
  },
  {
    "title": "Board Game",
    "url": "https://codeforces.com/problemset/problem/605/D",
    "history": "You are playing a board card game. In this game the player has two characteristics, x and y \u2014 the white magic skill and the black magic skill, respectively. There are n spell cards lying on the table, each of them has four characteristics, ai, bi, ci and di. In one move a player can pick one of the cards and cast the spell written on it, but only if first two of it' s characteristics meet the requirement ai \u2264 x and bi \u2264 y, i. e. if the player has enough magic skill to cast this spell. However, after casting the spell the characteristics of a player change and become equal to x = ci and y = di. At the beginning of the game both characteristics of a player are equal to zero. The goal of the game is to cast the n- th spell. Your task is to make it in as few moves as possible. You are allowed to use spell in any order and any number of times ( for example, you may not use some spells at all) .",
    "input": "The first line of the input contains a single integer n ( 1 \u2264 n \u2264 100 000) \u2014 the number of cards on the table. Each of the next n lines contains four integers ai, bi, ci, di ( 0 \u2264 ai, bi, ci, di \u2264 109) \u2014 the characteristics of the corresponding card.",
    "output": "In the first line print a single integer k \u2014 the minimum number of moves needed to cast the n- th spell and in the second line print k numbers \u2014 the indices of the cards in the order in which you should cast them. In case there are multiple possible solutions, print any of them. If it is impossible to cast the n- th spell, print - 1.",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar"
    ],
    "id": "605D"
  },
  {
    "title": "Lazy Student",
    "url": "https://codeforces.com/problemset/problem/605/B",
    "history": "Student Vladislav came to his programming exam completely unprepared as usual. He got a question about some strange algorithm on a graph \u2014 something that will definitely never be useful in real life. He asked a girl sitting next to him to lend him some cheat papers for this questions and found there the following definition: The minimum spanning tree T of graph G is such a tree that it contains all the vertices of the original graph G, and the sum of the weights of its edges is the minimum possible among all such trees. Vladislav drew a graph with n vertices and m edges containing no loops and multiple edges. He found one of its minimum spanning trees and then wrote for each edge its weight and whether it is included in the found tree or not. Unfortunately, the piece of paper where the graph was painted is gone and the teacher is getting very angry and demands to see the original graph. Help Vladislav come up with a graph so that the information about the minimum spanning tree remains correct.",
    "input": "The first line of the input contains two integers n and m ( ) \u2014 the number of vertices and the number of edges in the graph. Each of the next m lines describes an edge of the graph and consists of two integers aj and bj ( 1 \u2264 aj \u2264 109, bj = 0, 1) . The first of these numbers is the weight of the edge and the second number is equal to 1 if this edge was included in the minimum spanning tree found by Vladislav, or 0 if it was not. It is guaranteed that exactly n - 1 number bj are equal to one and exactly m - n + 1 of them are equal to zero.",
    "output": "If Vladislav has made a mistake and such graph doesn' t exist, print - 1. Otherwise print m lines. On the j- th line print a pair of vertices ( uj, vj) ( 1 \u2264 uj, vj \u2264 n, uj = \u0338 vj) , that should be connected by the j- th edge. The edges are numbered in the same order as in the input. The graph, determined by these edges, must be connected, contain no loops or multiple edges and its edges with bj = 1 must define the minimum spanning tree. In case there are multiple possible solutions, print any of them.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "data structures",
      "graphs"
    ],
    "id": "605B"
  },
  {
    "title": "Pastoral Oddities",
    "url": "https://codeforces.com/problemset/problem/603/E",
    "history": "In the land of Bovinia there are n pastures, but no paths connecting the pastures. Of course, this is a terrible situation, so Kevin Sun is planning to rectify it by constructing m undirected paths connecting pairs of distinct pastures. To make transportation more efficient, he also plans to pave some of these new paths. Kevin is very particular about certain aspects of path- paving. Since he loves odd numbers, he wants each pasture to have an odd number of paved paths connected to it. Thus we call a paving sunny if each pasture is incident to an odd number of paved paths. He also enjoys short paths more than long paths, so he would like the longest paved path to be as short as possible. After adding each path, Kevin wants to know if a sunny paving exists for the paths of Bovinia, and if at least one does, the minimum possible length of the longest path in such a paving. Note that \" longest path\" here means maximum- weight edge.",
    "input": "The first line contains two integers n ( 2 \u2264 n \u2264 100 000) and m ( 1 \u2264 m \u2264 300 000) , denoting the number of pastures and paths, respectively. The next m lines each contain three integers ai, bi and li, describing the i- th path. The i- th path connects pastures ai and bi ( 1 \u2264 ai, bi \u2264 n; ai = \u0338 bi) and has length li ( 1 \u2264 li \u2264 109) . Paths are given in the order in which they are constructed.",
    "output": "Output m lines. The i- th line should contain a single integer denoting the minimum possible length of the longest path ( maximum- weight edge) in a sunny paving using only the first i paths. If Kevin cannot pave a set of paths so that each pasture is incident to an odd number of paved paths, output - 1. Note that the paving is only hypothetical\u2014your answer after adding the i- th path should not be affected by any of your previous answers.",
    "note": "For the first sample, these are the paths that Kevin should pave after building the i- th path: No set of paths works. Paths 1 ( length 4) and 2 ( length 8) . Paths 1 ( length 4) and 2 ( length 8) . Paths 3 ( length 2) and 4 ( length 3) . In the second sample, there never exists a paving that makes Kevin happy.",
    "topics": [
      "data structures",
      "divide and conquer",
      "dsu",
      "math",
      "trees"
    ],
    "id": "603E"
  },
  {
    "title": "A Museum Robbery",
    "url": "https://codeforces.com/problemset/problem/601/E",
    "history": "There' s a famous museum in the city where Kleofa\u0301s\u030c lives. In the museum, n exhibits ( numbered 1 through n) had been displayed for a long time; the i- th of those exhibits has value vi and mass wi. Then, the museum was bought by a large financial group and started to vary the exhibits. At about the same time, Kleofa\u0301s\u030c. . . gained interest in the museum, so to say. You should process q events of three types: type 1 \u2014 the museum displays an exhibit with value v and mass w; the exhibit displayed in the i- th event of this type is numbered n + i ( see sample explanation for more details) type 2 \u2014 the museum removes the exhibit with number x and stores it safely in its vault type 3 \u2014 Kleofa\u0301s\u030c visits the museum and wonders ( for no important reason at all, of course) : if there was a robbery and exhibits with total mass at most m were stolen, what would their maximum possible total value be? For each event of type 3, let s( m) be the maximum possible total value of stolen exhibits with total mass \u2264 m. Formally, let D be the set of numbers of all exhibits that are currently displayed ( so initially D = 1, . . . , n) . Let P( D) be the set of all subsets of D and let Then, s( m) is defined as Compute s( m) for each . Note that the output follows a special format.",
    "input": "The first line of the input contains two space- separated integers n and k ( 1 \u2264 n \u2264 5000, 1 \u2264 k \u2264 1000) \u2014 the initial number of exhibits in the museum and the maximum interesting mass of stolen exhibits. Then, n lines follow. The i- th of them contains two space- separated positive integers vi and wi ( 1 \u2264 vi \u2264 1 000 000, 1 \u2264 wi \u2264 1000) \u2014 the value and mass of the i- th exhibit. The next line contains a single integer q ( 1 \u2264 q \u2264 30 000) \u2014 the number of events. Each of the next q lines contains the description of one event in the following format: 1 v w \u2014 an event of type 1, a new exhibit with value v and mass w has been added ( 1 \u2264 v \u2264 1 000 000, 1 \u2264 w \u2264 1000) 2 x \u2014 an event of type 2, the exhibit with number x has been removed; it' s guaranteed that the removed exhibit had been displayed at that time 3 \u2014 an event of type 3, Kleofa\u0301s\u030c visits the museum and asks his questionThere will be at most 10 000 events of type 1 and at least one event of type 3.",
    "output": "As the number of values s( m) can get large, output the answers to events of type 3 in a special format. For each event of type 3, consider the values s( m) computed for the question that Kleofa\u0301s\u030c asked in this event; print one line containing a single number where p = 107 + 19 and q = 109 + 7. Print the answers to events of type 3 in the order in which they appear in the input.",
    "note": "In the first sample, the numbers of displayed exhibits and values s( 1) , . . . , s( 10) for individual events of type 3 are, in order: The values of individual exhibits are v1 = 30, v2 = 60, v3 = 5, v4 = 42, v5 = 20, v6 = 40 and their masses are w1 = 4, w2 = 6, w3 = 1, w4 = 5, w5 = 3, w6 = 6. In the second sample, the only question is asked after removing all exhibits, so s( m) = 0 for any m.",
    "topics": [
      "data structures",
      "dp"
    ],
    "id": "601E"
  },
  {
    "title": "Acyclic Organic Compounds",
    "url": "https://codeforces.com/problemset/problem/601/D",
    "history": "You are given a tree T with n vertices ( numbered 1 through n) and a letter in each vertex. The tree is rooted at vertex 1. Let' s look at the subtree Tv of some vertex v. It is possible to read a string along each simple path starting at v and ending at some vertex in Tv ( possibly v itself) . Let' s denote the number of distinct strings which can be read this way as . Also, there' s a number cv assigned to each vertex v. We are interested in vertices with the maximum value of . You should compute two statistics: the maximum value of and the number of vertices v with the maximum .",
    "input": "The first line of the input contains one integer n ( 1 \u2264 n \u2264 300 000) \u2014 the number of vertices of the tree. The second line contains n space- separated integers ci ( 0 \u2264 ci \u2264 109) . The third line contains a string s consisting of n lowercase English letters \u2014 the i- th character of this string is the letter in vertex i. The following n - 1 lines describe the tree T. Each of them contains two space- separated integers u and v ( 1 \u2264 u, v \u2264 n) indicating an edge between vertices u and v. It' s guaranteed that the input will describe a tree.",
    "output": "Print two lines. On the first line, print over all 1 \u2264 i \u2264 n. On the second line, print the number of vertices v for which .",
    "note": "In the first sample, the tree looks like this: The sets of strings that can be read from individual vertices are: Finally, the values of are: In the second sample, the values of are ( 5, 4, 2, 1, 1, 1) . The distinct strings read in T2 are ; note that can be read down to vertices 3 or 4.",
    "topics": [
      "data structures",
      "dfs and similar",
      "dsu",
      "hashing",
      "strings",
      "trees"
    ],
    "id": "601D"
  },
  {
    "title": "Lipshitz Sequence",
    "url": "https://codeforces.com/problemset/problem/601/B",
    "history": "A function is called Lipschitz continuous if there is a real constant K such that the inequality | f( x) - f( y) | \u2264 K\u00b7| x - y| holds for all . We' ll deal with a more. . . discrete version of this term. For an array , we define it' s Lipschitz constant as follows: if n < 2, if n \u2265 2, over all 1 \u2264 i < j \u2264 n In other words, is the smallest non- negative integer such that | h[ i] - h[ j] | \u2264 L\u00b7| i - j| holds for all 1 \u2264 i, j \u2264 n. You are given an array of size n and q queries of the form [ l, r] . For each query, consider the subarray ; determine the sum of Lipschitz constants of all subarrays of .",
    "input": "The first line of the input contains two space- separated integers n and q ( 2 \u2264 n \u2264 100 000 and 1 \u2264 q \u2264 100) \u2014 the number of elements in array and the number of queries respectively. The second line contains n space- separated integers ( ) . The following q lines describe queries. The i- th of those lines contains two space- separated integers li and ri ( 1 \u2264 li < ri \u2264 n) .",
    "output": "Print the answers to all queries in the order in which they are given in the input. For the i- th query, print one line containing a single integer \u2014 the sum of Lipschitz constants of all subarrays of .",
    "note": "In the first query of the first sample, the Lipschitz constants of subarrays of with length at least 2 are: The answer to the query is their sum.",
    "topics": [
      "data structures",
      "math"
    ],
    "id": "601B"
  },
  {
    "title": "Lomsat gelral",
    "url": "https://codeforces.com/problemset/problem/600/E",
    "history": "You are given a rooted tree with root in vertex 1. Each vertex is coloured in some colour. Let' s call colour c dominating in the subtree of vertex v if there are no other colours that appear in the subtree of vertex v more times than colour c. So it' s possible that two or more colours will be dominating in the subtree of some vertex. The subtree of vertex v is the vertex v and all other vertices that contains vertex v in each path to the root. For each vertex v find the sum of all dominating colours in the subtree of vertex v.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 105) \u2014 the number of vertices in the tree. The second line contains n integers ci ( 1 \u2264 ci \u2264 n) , ci \u2014 the colour of the i- th vertex. Each of the next n - 1 lines contains two integers xj, yj ( 1 \u2264 xj, yj \u2264 n) \u2014 the edge of the tree. The first vertex is the root of the tree.",
    "output": "Print n integers \u2014 the sums of dominating colours for each vertex.",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "dsu",
      "trees"
    ],
    "id": "600E"
  },
  {
    "title": "Queries about less or equal elements",
    "url": "https://codeforces.com/problemset/problem/600/B",
    "history": "You are given two arrays of integers a and b. For each element of the second array bj you should find the number of elements in array a that are less than or equal to the value bj.",
    "input": "The first line contains two integers n, m ( 1 \u2264 n, m \u2264 2\u00b7105) \u2014 the sizes of arrays a and b. The second line contains n integers \u2014 the elements of array a ( - 109 \u2264 ai \u2264 109) . The third line contains m integers \u2014 the elements of array b ( - 109 \u2264 bj \u2264 109) .",
    "output": "Print m integers, separated by spaces: the j- th of which is equal to the number of such elements in array a that are less than or equal to the value bj.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "sortings",
      "two pointers"
    ],
    "id": "600B"
  },
  {
    "title": "Subsequences",
    "url": "https://codeforces.com/problemset/problem/597/C",
    "history": "For the given sequence with n different elements find the number of increasing subsequences with k + 1 elements. It is guaranteed that the answer is not greater than 8\u00b71018.",
    "input": "First line contain two integer values n and k ( 1 \u2264 n \u2264 105, 0 \u2264 k \u2264 10) \u2014 the length of sequence and the number of elements in increasing subsequences. Next n lines contains one integer ai ( 1 \u2264 ai \u2264 n) each \u2014 elements of sequence. All values ai are different.",
    "output": "Print one integer \u2014 the answer to the problem.",
    "note": "",
    "topics": [
      "data structures",
      "dp"
    ],
    "id": "597C"
  },
  {
    "title": "REQ",
    "url": "https://codeforces.com/problemset/problem/594/D",
    "history": "Today on a math lesson the teacher told Vovochka that the Euler function of a positive integer \u03c6( n) is an arithmetic function that counts the positive integers less than or equal to n that are relatively prime to n. The number 1 is coprime to all the positive integers and \u03c6( 1) = 1. Now the teacher gave Vovochka an array of n positive integers a1, a2, . . . , an and a task to process q queries li ri \u2014 to calculate and print modulo 109 + 7. As it is too hard for a second grade school student, you' ve decided to help Vovochka.",
    "input": "The first line of the input contains number n ( 1 \u2264 n \u2264 200 000) \u2014 the length of the array given to Vovochka. The second line contains n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 106) . The third line contains integer q ( 1 \u2264 q \u2264 200 000) \u2014 the number of queries. Next q lines contain the queries, one per line. Each query is defined by the boundaries of the segment li and ri ( 1 \u2264 li \u2264 ri \u2264 n) .",
    "output": "Print q numbers \u2014 the value of the Euler function for each query, calculated modulo 109 + 7.",
    "note": "In the second sample the values are calculated like that: \u03c6( 13\u00b752\u00b76) = \u03c6( 4056) = 1248 \u03c6( 52\u00b76\u00b710\u00b71) = \u03c6( 3120) = 768 \u03c6( 24\u00b763\u00b713\u00b752\u00b76\u00b710\u00b71) = \u03c6( 61326720) = 12939264 \u03c6( 63\u00b713\u00b752) = \u03c6( 42588) = 11232 \u03c6( 13\u00b752\u00b76\u00b710) = \u03c6( 40560) = 9984 \u03c6( 63\u00b713\u00b752\u00b76\u00b710) = \u03c6( 2555280) = 539136",
    "topics": [
      "data structures",
      "number theory"
    ],
    "id": "594D"
  },
  {
    "title": "Happy Tree Party",
    "url": "https://codeforces.com/problemset/problem/593/D",
    "history": "Bogdan has a birthday today and mom gave him a tree consisting of n vertecies. For every edge of the tree i, some number xi was written on it. In case you forget, a tree is a connected non- directed graph without cycles. After the present was granted, m guests consecutively come to Bogdan' s party. When the i- th guest comes, he performs exactly one of the two possible operations: Chooses some number yi, and two vertecies ai and bi. After that, he moves along the edges of the tree from vertex ai to vertex bi using the shortest path ( of course, such a path is unique in the tree) . Every time he moves along some edge j, he replaces his current number yi by , that is, by the result of integer division yi div xj. Chooses some edge pi and replaces the value written in it xpi by some positive integer ci < xpi. As Bogdan cares about his guests, he decided to ease the process. Write a program that performs all the operations requested by guests and outputs the resulting value yi for each i of the first type.",
    "input": "The first line of the input contains integers, n and m ( 2 \u2264 n \u2264 200 000, 1 \u2264 m \u2264 200 000) \u2014 the number of vertecies in the tree granted to Bogdan by his mom and the number of guests that came to the party respectively. Next n - 1 lines contain the description of the edges. The i- th of these lines contains three integers ui, vi and xi ( 1 \u2264 ui, vi \u2264 n, ui = \u0338 vi, 1 \u2264 xi \u2264 1018) , denoting an edge that connects vertecies ui and vi, with the number xi initially written on it. The following m lines describe operations, requested by Bogdan' s guests. Each description contains three or four integers and has one of the two possible forms: 1 ai bi yi corresponds to a guest, who chooses the operation of the first type. 2 pi ci corresponds to a guests, who chooses the operation of the second type. It is guaranteed that all the queries are correct, namely 1 \u2264 ai, bi \u2264 n, 1 \u2264 pi \u2264 n - 1, 1 \u2264 yi \u2264 1018 and 1 \u2264 ci < xpi, where xpi represents a number written on edge pi at this particular moment of time that is not necessarily equal to the initial value xpi, as some decreases may have already been applied to it. The edges are numbered from 1 to n - 1 in the order they appear in the input.",
    "output": "For each guest who chooses the operation of the first type, print the result of processing the value yi through the path from ai to bi.",
    "note": "Initially the tree looks like this: The response to the first query is: = 2After the third edge is changed, the tree looks like this: The response to the second query is: = 4In the third query the initial and final vertex coincide, that is, the answer will be the initial number 20. After the change in the fourth edge the tree looks like this: In the last query the answer will be: = 3",
    "topics": [
      "data structures",
      "dfs and similar",
      "graphs",
      "math",
      "trees"
    ],
    "id": "593D"
  },
  {
    "title": "Duff is Mad",
    "url": "https://codeforces.com/problemset/problem/587/F",
    "history": "Duff is mad at her friends. That' s why she sometimes makes Malek to take candy from one of her friends for no reason! She has n friends. Her i- th friend' s name is si ( their names are not necessarily unique) . q times, she asks Malek to take candy from her friends. She' s angry, but also she acts with rules. When she wants to ask Malek to take candy from one of her friends, like k, she chooses two numbers l and r and tells Malek to take exactly candies from him/ her, where occur( t, s) is the number of occurrences of string t in s. Malek is not able to calculate how many candies to take in each request from Duff. That' s why she asked for your help. Please tell him how many candies to take in each request.",
    "input": "The first line of input contains two integers n and q ( 1 \u2264 n, q \u2264 105) . The next n lines contain the names. i- th of them contains an string si, consisting of lowercase English letters ( ) . The next q lines contain the requests. Each of them contains three integers, l, r and k ( says that Malek should take candies from Duff' s k- th friend) .",
    "output": "Print the answer to each request in one line.",
    "note": "",
    "topics": [
      "data structures",
      "strings"
    ],
    "id": "587F"
  },
  {
    "title": "Duff as a Queen",
    "url": "https://codeforces.com/problemset/problem/587/E",
    "history": "Duff is the queen of her country, Andarz Gu. She' s a competitive programming fan. That' s why, when he saw her minister, Malek, free, she gave her a sequence consisting of n non- negative integers, a1, a2, . . . , an and asked him to perform q queries for her on this sequence. There are two types of queries: given numbers l, r and k, Malek should perform for each l \u2264 i \u2264 r ( , bitwise exclusive OR of numbers a and b) . given numbers l and r Malek should tell her the score of sequence al, al + 1, . . . , ar. Score of a sequence b1, . . . , bk is the number of its different Kheshtaks. A non- negative integer w is a Kheshtak of this sequence if and only if there exists a subsequence of b, let' s denote it as bi1, bi2, . . . , bix ( possibly empty) such that ( 1 \u2264 i1 < i2 < . . . < ix \u2264 k) . If this subsequence is empty, then w = 0. Unlike Duff, Malek is not a programmer. That' s why he asked for your help. Please help him perform these queries.",
    "input": "The first line of input contains two integers, n and q ( 1 \u2264 n \u2264 2 \u00d7 105 and 1 \u2264 q \u2264 4 \u00d7 104) . The second line of input contains n integers, a1, a2, . . . , an separated by spaces ( 0 \u2264 ai \u2264 109 for each 1 \u2264 i \u2264 n) . The next q lines contain the queries. Each line starts with an integer t ( 1 \u2264 t \u2264 2) , type of the corresponding query. If t = 1, then there are three more integers in that line, l, r and k. Otherwise there are two more integers, l and r. ( 1 \u2264 l \u2264 r \u2264 n and 0 \u2264 k \u2264 109)",
    "output": "Print the answer of each query of the second type in one line.",
    "note": "In the first query, we want all Kheshtaks of sequence 1, 2, 3, 4, 2 which are: 0, 1, 2, 3, 4, 5, 6, 7. In the third query, we want all Khestaks of sequence 1, 10, 3, 4, 2 which are: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15. In the fifth query, we want all Kheshtaks of sequence 0 which is 0.",
    "topics": [
      "data structures"
    ],
    "id": "587E"
  },
  {
    "title": "Duff in the Army",
    "url": "https://codeforces.com/problemset/problem/587/C",
    "history": "Recently Duff has been a soldier in the army. Malek is her commander. Their country, Andarz Gu has n cities ( numbered from 1 to n) and n - 1 bidirectional roads. Each road connects two different cities. There exist a unique path between any two cities. There are also m people living in Andarz Gu ( numbered from 1 to m) . Each person has and ID number. ID number of i - th person is i and he/ she lives in city number ci. Note that there may be more than one person in a city, also there may be no people living in the city. Malek loves to order. That' s why he asks Duff to answer to q queries. In each query, he gives her numbers v, u and a. To answer a query: Assume there are x people living in the cities lying on the path from city v to city u. Assume these people' s IDs are p1, p2, . . . , px in increasing order. If k = min( x, a) , then Duff should tell Malek numbers k, p1, p2, . . . , pk in this order. In the other words, Malek wants to know a minimums on that path ( or less, if there are less than a people) . Duff is very busy at the moment, so she asked you to help her and answer the queries.",
    "input": "The first line of input contains three integers, n, m and q ( 1 \u2264 n, m, q \u2264 105) . The next n - 1 lines contain the roads. Each line contains two integers v and u, endpoints of a road ( 1 \u2264 v, u \u2264 n, v = \u0338 u) . Next line contains m integers c1, c2, . . . , cm separated by spaces ( 1 \u2264 ci \u2264 n for each 1 \u2264 i \u2264 m) . Next q lines contain the queries. Each of them contains three integers, v, u and a ( 1 \u2264 v, u \u2264 n and 1 \u2264 a \u2264 10) .",
    "output": "For each query, print numbers k, p1, p2, . . . , pk separated by spaces in one line.",
    "note": "Graph of Andarz Gu in the sample case is as follows ( ID of people in each city are written next to them) :",
    "topics": [
      "data structures",
      "trees"
    ],
    "id": "587C"
  },
  {
    "title": "Kefa and Watch",
    "url": "https://codeforces.com/problemset/problem/580/E",
    "history": "One day Kefa the parrot was walking down the street as he was on the way home from the restaurant when he saw something glittering by the road. As he came nearer he understood that it was a watch. He decided to take it to the pawnbroker to earn some money. The pawnbroker said that each watch contains a serial number represented by a string of digits from 0 to 9, and the more quality checks this number passes, the higher is the value of the watch. The check is defined by three positive integers l, r and d. The watches pass a check if a substring of the serial number from l to r has period d. Sometimes the pawnbroker gets distracted and Kefa changes in some substring of the serial number all digits to c in order to increase profit from the watch. The seller has a lot of things to do to begin with and with Kefa messing about, he gave you a task: to write a program that determines the value of the watch. Let us remind you that number x is called a period of string s ( 1 \u2264 x \u2264 | s| ) , if si = si + x for all i from 1 to | s| - x.",
    "input": "The first line of the input contains three positive integers n, m and k ( 1 \u2264 n \u2264 105, 1 \u2264 m + k \u2264 105) \u2014 the length of the serial number, the number of change made by Kefa and the number of quality checks. The second line contains a serial number consisting of n digits. Then m + k lines follow, containing either checks or changes. The changes are given as 1 l r c ( 1 \u2264 l \u2264 r \u2264 n, 0 \u2264 c \u2264 9) . That means that Kefa changed all the digits from the l- th to the r- th to be c. The checks are given as 2 l r d ( 1 \u2264 l \u2264 r \u2264 n, 1 \u2264 d \u2264 r - l + 1) .",
    "output": "For each check on a single line print \" YES\" if the watch passed it, otherwise print \" NO\" .",
    "note": "In the first sample test two checks will be made. In the first one substring \" 12\" is checked on whether or not it has period 1, so the answer is \" NO\" . In the second one substring \" 88\" , is checked on whether or not it has period 1, and it has this period, so the answer is \" YES\" . In the second statement test three checks will be made. The first check processes substring \" 3493\" , which doesn' t have period 2. Before the second check the string looks as \" 334334\" , so the answer to it is \" YES\" . And finally, the third check processes substring \" 8334\" , which does not have period 1.",
    "topics": [
      "data structures",
      "hashing",
      "strings"
    ],
    "id": "580E"
  },
  {
    "title": "Modulo Sum",
    "url": "https://codeforces.com/problemset/problem/577/B",
    "history": "You are given a sequence of numbers a1, a2, . . . , an, and a number m. Check if it is possible to choose a non- empty subsequence aij such that the sum of numbers in this subsequence is divisible by m.",
    "input": "The first line contains two numbers, n and m ( 1 \u2264 n \u2264 106, 2 \u2264 m \u2264 103) \u2014 the size of the original sequence and the number such that sum should be divisible by it. The second line contains n integers a1, a2, . . . , an ( 0 \u2264 ai \u2264 109) .",
    "output": "In the single line print either \" YES\" ( without the quotes) if there exists the sought subsequence, or \" NO\" ( without the quotes) , if such subsequence doesn' t exist.",
    "note": "In the first sample test you can choose numbers 2 and 3, the sum of which is divisible by 5. In the second sample test the single non- empty subsequence of numbers is a single number 5. Number 5 is not divisible by 6, that is, the sought subsequence doesn' t exist. In the third sample test you need to choose two numbers 3 on the ends. In the fourth sample test you can take the whole subsequence.",
    "topics": [
      "combinatorics",
      "data structures",
      "dp",
      "two pointers"
    ],
    "id": "577B"
  },
  {
    "title": "Painting Edges",
    "url": "https://codeforces.com/problemset/problem/576/E",
    "history": "Note the unusual memory limit for this problem. You are given an undirected graph consisting of n vertices and m edges. The vertices are numbered with integers from 1 to n, the edges are numbered with integers from 1 to m. Each edge can be unpainted or be painted in one of the k colors, which are numbered with integers from 1 to k. Initially, none of the edges is painted in any of the colors. You get queries of the form \" Repaint edge ei to color ci\" . At any time the graph formed by the edges of the same color must be bipartite. If after the repaint this condition is violated, then the query is considered to be invalid and edge ei keeps its color. Otherwise, edge ei is repainted in color ci, and the query is considered to valid. Recall that the graph is called bipartite if the set of its vertices can be divided into two parts so that no edge connected vertices of the same parts. For example, suppose you are given a triangle graph, that is a graph with three vertices and edges ( 1, 2) , ( 2, 3) and ( 3, 1) . Suppose that the first two edges are painted color 1, and the third one is painted color 2. Then the query of \" repaint the third edge in color 1\" will be incorrect because after its execution the graph formed by the edges of color 1 will not be bipartite. On the other hand, it is possible to repaint the second edge in color 2. You receive q queries. For each query, you should either apply it, and report that the query is valid, or report that the query is invalid.",
    "input": "The first line contains integers n, m, k, q ( 2 \u2264 n \u2264 5\u00b7105, 1 \u2264 m, q \u2264 5\u00b7105, 1 \u2264 k \u2264 50) \u2014 the number of vertices, the number of edges, the number of colors and the number of queries. Then follow m edges of the graph in the form ai, bi ( 1 \u2264 ai, bi \u2264 n) . Then follow q queries of the form ei, ci ( 1 \u2264 ei \u2264 m, 1 \u2264 ci \u2264 k) . It is guaranteed that the graph doesn' t contain multiple edges and loops.",
    "output": "For each query print \" YES\" ( without the quotes) , if it is valid, or \" NO\" ( without the quotes) , if this query destroys the bipartivity of the graph formed by the edges of some color.",
    "note": "",
    "topics": [
      "binary search",
      "data structures"
    ],
    "id": "576E"
  },
  {
    "title": "Robots protection",
    "url": "https://codeforces.com/problemset/problem/575/I",
    "history": "Company \" Robots industries\" produces robots for territory protection. Robots protect triangle territories \u2014 right isosceles triangles with catheti parallel to North- South and East- West directions. Owner of some land buys and sets robots on his territory to protect it. From time to time, businessmen want to build offices on that land and want to know how many robots will guard it. You are to handle these queries.",
    "input": "The first line contains integer N \u2014 width and height of the land, and integer Q \u2014 number of queries to handle. Next Q lines contain queries you need to process. Two types of queries: 1 dir x y len \u2014 add a robot to protect a triangle. Depending on the value of dir, the values of x, y and len represent a different triangle: dir = 1: Triangle is defined by the points ( x, y) , ( x + len, y) , ( x, y + len) dir = 2: Triangle is defined by the points ( x, y) , ( x + len, y) , ( x, y - len) dir = 3: Triangle is defined by the points ( x, y) , ( x - len, y) , ( x, y + len) dir = 4: Triangle is defined by the points ( x, y) , ( x - len, y) , ( x, y - len) 2 x y \u2014 output how many robots guard this point ( robot guards a point if the point is inside or on the border of its triangle) 1 \u2264 N \u2264 5000 1 \u2264 Q \u2264 105 1 \u2264 dir \u2264 4 All points of triangles are within range [ 1, N] All numbers are positive integers",
    "output": "For each second type query output how many robots guard this point. Each answer should be in a separate line.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": "575I"
  },
  {
    "title": "Fibonotci",
    "url": "https://codeforces.com/problemset/problem/575/A",
    "history": "Fibonotci sequence is an integer recursive sequence defined by the recurrence relation Fn = sn - 1\u00b7Fn - 1 + sn - 2\u00b7Fn - 2 with F0 = 0, F1 = 1 Sequence s is an infinite and almost cyclic sequence with a cycle of length N. A sequence s is called almost cyclic with a cycle of length N if , for i \u2265 N, except for a finite number of values si, for which ( i \u2265 N) . Following is an example of an almost cyclic sequence with a cycle of length 4: s = ( 5, 3, 8, 11, 5, 3, 7, 11, 5, 3, 8, 11, . . . ) Notice that the only value of s for which the equality does not hold is s6 ( s6 = 7 and s2 = 8) . You are given s0, s1, . . . sN - 1 and all the values of sequence s for which ( i \u2265 N) . Find .",
    "input": "The first line contains two numbers K and P. The second line contains a single number N. The third line contains N numbers separated by spaces, that represent the first N numbers of the sequence s. The fourth line contains a single number M, the number of values of sequence s for which . Each of the following M lines contains two numbers j and v, indicating that and sj = v. All j- s are distinct. 1 \u2264 N, M \u2264 50000 0 \u2264 K \u2264 1018 1 \u2264 P \u2264 109 1 \u2264 si \u2264 109, for all i = 0, 1, . . . N - 1 N \u2264 j \u2264 1018 1 \u2264 v \u2264 109 All values are integers",
    "output": "Output should contain a single integer equal to .",
    "note": "",
    "topics": [
      "data structures",
      "math",
      "matrices"
    ],
    "id": "575A"
  },
  {
    "title": "Bear and Bowling",
    "url": "https://codeforces.com/problemset/problem/573/E",
    "history": "Limak is an old brown bear. He often goes bowling with his friends. Today he feels really good and tries to beat his own record! For rolling a ball one gets a score \u2014 an integer ( maybe negative) number of points. Score for i- th roll is multiplied by i and scores are summed up. So, for k rolls with scores s1, s2, . . . , sk, total score is . Total score is 0 if there were no rolls. Limak made n rolls and got score ai for i- th of them. He wants to maximize his total score and he came up with an interesting idea. He will cancel some rolls, saying that something distracted him or there was a strong wind. Limak is able to cancel any number of rolls, maybe even all or none of them. Total score is calculated as if there were only non- canceled rolls. Look at the sample tests for clarification. What maximum total score can Limak get?",
    "input": "The first line contains single integer n ( 1 \u2264 n \u2264 105) . The second line contains n space- separated integers a1, a2, . . . , an ( | ai| \u2264 107) - scores for Limak' s rolls.",
    "output": "Print the maximum possible total score after choosing rolls to cancel.",
    "note": "In first sample Limak should cancel rolls with scores - 8 and - 3. Then he is left with three rolls with scores - 2, 0, 5. Total score is 1\u00b7( - 2) + 2\u00b70 + 3\u00b75 = 13. In second sample Limak should cancel roll with score - 50. Total score is 1\u00b7( - 10) + 2\u00b720 + 3\u00b7( - 30) + 4\u00b740 + 5\u00b760 = 400.",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "573E"
  },
  {
    "title": "Bear and Cavalry",
    "url": "https://codeforces.com/problemset/problem/573/D",
    "history": "Would you want to fight against bears riding horses? Me neither. Limak is a grizzly bear. He is general of the dreadful army of Bearland. The most important part of an army is cavalry of course. Cavalry of Bearland consists of n warriors and n horses. i- th warrior has strength wi and i- th horse has strength hi. Warrior together with his horse is called a unit. Strength of a unit is equal to multiplied strengths of warrior and horse. Total strength of cavalry is equal to sum of strengths of all n units. Good assignment of warriors and horses makes cavalry truly powerful. Initially, i- th warrior has i- th horse. You are given q queries. In each query two warriors swap their horses with each other. General Limak must be ready for every possible situation. What if warriors weren' t allowed to ride their own horses? After each query find the maximum possible strength of cavalry if we consider assignments of all warriors to all horses that no warrior is assigned to his own horse ( it can be proven that for n \u2265 2 there is always at least one correct assignment) . Note that we can' t leave a warrior without a horse.",
    "input": "The first line contains two space- separated integers, n and q ( 2 \u2264 n \u2264 30 000, 1 \u2264 q \u2264 10 000) . The second line contains n space- separated integers, w1, w2, . . . , wn ( 1 \u2264 wi \u2264 106) \u2014 strengths of warriors. The third line contains n space- separated integers, h1, h2, . . . , hn ( 1 \u2264 hi \u2264 106) \u2014 strengths of horses. Next q lines describe queries. i- th of them contains two space- separated integers ai and bi ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi) , indices of warriors who swap their horses with each other.",
    "output": "Print q lines with answers to queries. In i- th line print the maximum possible strength of cavalry after first i queries.",
    "note": "Clarification for the first sample: Warriors: 1 10 100 1000Horses: 3 7 2 5 After first query situation looks like the following: Warriors: 1 10 100 1000Horses: 3 5 2 7 We can get 1\u00b72 + 10\u00b73 + 100\u00b77 + 1000\u00b75 = 5732 ( note that no hussar takes his own horse in this assignment) . After second query we get back to initial situation and optimal assignment is 1\u00b72 + 10\u00b73 + 100\u00b75 + 1000\u00b77 = 7532. Clarification for the second sample. After first query: Warriors: 7 11 5Horses: 2 3 1 Optimal assignment is 7\u00b71 + 11\u00b72 + 5\u00b73 = 44. Then after second query 7\u00b73 + 11\u00b72 + 5\u00b71 = 48. Finally 7\u00b72 + 11\u00b73 + 5\u00b71 = 52.",
    "topics": [
      "data structures",
      "divide and conquer",
      "dp"
    ],
    "id": "573D"
  },
  {
    "title": "Bear and Blocks",
    "url": "https://codeforces.com/problemset/problem/573/B",
    "history": "Limak is a little bear who loves to play. Today he is playing by destroying block towers. He built n towers in a row. The i- th tower is made of hi identical blocks. For clarification see picture for the first sample. Limak will repeat the following operation till everything is destroyed. Block is called internal if it has all four neighbors, i. e. it has each side ( top, left, down and right) adjacent to other block or to the floor. Otherwise, block is boundary. In one operation Limak destroys all boundary blocks. His paws are very fast and he destroys all those blocks at the same time. Limak is ready to start. You task is to count how many operations will it take him to destroy all towers.",
    "input": "The first line contains single integer n ( 1 \u2264 n \u2264 105) . The second line contains n space- separated integers h1, h2, . . . , hn ( 1 \u2264 hi \u2264 109) \u2014 sizes of towers.",
    "output": "Print the number of operations needed to destroy all towers.",
    "note": "The picture below shows all three operations for the first sample test. Each time boundary blocks are marked with red color. After first operation there are four blocks left and only one remains after second operation. This last block is destroyed in third operation.",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "math"
    ],
    "id": "573B"
  },
  {
    "title": "Order Book",
    "url": "https://codeforces.com/problemset/problem/572/B",
    "history": "In this task you need to process a set of stock exchange orders and use them to create order book. An order is an instruction of some participant to buy or sell stocks on stock exchange. The order number i has price pi, direction di \u2014 buy or sell, and integer qi. This means that the participant is ready to buy or sell qi stocks at price pi for one stock. A value qi is also known as a volume of an order. All orders with the same price p and direction d are merged into one aggregated order with price p and direction d. The volume of such order is a sum of volumes of the initial orders. An order book is a list of aggregated orders, the first part of which contains sell orders sorted by price in descending order, the second contains buy orders also sorted by price in descending order. An order book of depth s contains s best aggregated orders for each direction. A buy order is better if it has higher price and a sell order is better if it has lower price. If there are less than s aggregated orders for some direction then all of them will be in the final order book. You are given n stock exhange orders. Your task is to print order book of depth s for these orders.",
    "input": "The input starts with two positive integers n and s ( 1 \u2264 n \u2264 1000, 1 \u2264 s \u2264 50) , the number of orders and the book depth. Next n lines contains a letter di ( either ' B' or ' S' ) , an integer pi ( 0 \u2264 pi \u2264 105) and an integer qi ( 1 \u2264 qi \u2264 104) \u2014 direction, price and volume respectively. The letter ' B' means buy, ' S' means sell. The price of any sell order is higher than the price of any buy order.",
    "output": "Print no more than 2s lines with aggregated orders from order book of depth s. The output format for orders should be the same as in input.",
    "note": "Denote ( x, y) an order with price x and volume y. There are 3 aggregated buy orders ( 10, 3) , ( 20, 4) , ( 25, 10) and two sell orders ( 50, 8) , ( 40, 1) in the sample. You need to print no more than two best orders for each direction, so you shouldn' t print the order ( 10 3) having the worst price among buy orders.",
    "topics": [
      "data structures",
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "572B"
  },
  {
    "title": "Campus",
    "url": "https://codeforces.com/problemset/problem/571/D",
    "history": "Oscolcovo city has a campus consisting of n student dormitories, n universities and n military offices. Initially, the i- th dormitory belongs to the i- th university and is assigned to the i- th military office. Life goes on and the campus is continuously going through some changes. The changes can be of four types: University aj merges with university bj. After that all the dormitories that belonged to university bj are assigned to to university aj, and university bj disappears. Military office cj merges with military office dj. After that all the dormitories that were assigned to military office dj, are assigned to military office cj, and military office dj disappears. Students of university xj move in dormitories. Lets kxj is the number of dormitories that belong to this university at the time when the students move in. Then the number of students in each dormitory of university xj increases by kxj ( note that the more dormitories belong to the university, the more students move in each dormitory of the university) . Military office number yj conducts raids on all the dormitories assigned to it and takes all students from there. Thus, at each moment of time each dormitory is assigned to exactly one university and one military office. Initially, all the dormitory are empty. Your task is to process the changes that take place in the campus and answer the queries, how many people currently live in dormitory qj.",
    "input": "The first line contains two integers, n and m ( 1 \u2264 n, m \u2264 5\u00b7105) \u2014 the number of dormitories and the number of queries, respectively. Next m lines contain the queries, each of them is given in one of the following formats: \u00abU aj bj\u00bb \u2014 merging universities; \u00abM cj dj\u00bb \u2014 merging military offices; \u00abA xj\u00bb \u2014 students of university xj moving in the dormitories; \u00abZ yj\u00bb \u2014 a raid in military office yj; \u00abQ qj\u00bb \u2014 a query asking the number of people in dormitory qj. All the numbers in the queries are positive integers and do not exceed n. It is guaranteed that at the moment of the query the universities and military offices, that are present in the query, exist.",
    "output": "In the i- th line print the answer to the i- th query asking the number of people in the dormitory.",
    "note": "Consider the first sample test: In the first query university 1 owns only dormitory 1, so after the query dormitory 1 will have 1 student. After the third query university 1 owns dormitories 1 and 2. The fourth query increases by 2 the number of students living in dormitories 1 and 2 that belong to university number 1. After that 3 students live in the first dormitory and 2 students live in the second dormitory. At the fifth query the number of students living in dormitory 1, assigned to the military office 1, becomes zero.",
    "topics": [
      "binary search",
      "data structures",
      "dsu",
      "trees"
    ],
    "id": "571D"
  },
  {
    "title": "Replacement",
    "url": "https://codeforces.com/problemset/problem/570/C",
    "history": "Daniel has a string s, consisting of lowercase English letters and period signs ( characters ' . ' ) . Let' s define the operation of replacement as the following sequence of steps: find a substring \" . . \" ( two consecutive periods) in string s, of all occurrences of the substring let' s choose the first one, and replace this substring with string \" . \" . In other words, during the replacement operation, the first two consecutive periods are replaced by one. If string s contains no two consecutive periods, then nothing happens. Let' s define f( s) as the minimum number of operations of replacement to perform, so that the string does not have any two consecutive periods left. You need to process m queries, the i- th results in that the character at position xi ( 1 \u2264 xi \u2264 n) of string s is assigned value ci. After each operation you have to calculate and output the value of f( s) . Help Daniel to process all queries.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 300 000) the length of the string and the number of queries. The second line contains string s, consisting of n lowercase English letters and period signs. The following m lines contain the descriptions of queries. The i- th line contains integer xi and ci ( 1 \u2264 xi \u2264 n, ci \u2014 a lowercas English letter or a period sign) , describing the query of assigning symbol ci to position xi.",
    "output": "Print m numbers, one per line, the i- th of these numbers must be equal to the value of f( s) after performing the i- th assignment.",
    "note": "Note to the first sample test ( replaced periods are enclosed in square brackets) . The original string is \" . b. . bz. . . . \" . after the first query f( hb. . bz. . . . ) = 4 ( \" hb[ . . ] bz. . . . \" \u2192 \" hb. bz[ . . ] . . \" \u2192 \" hb. bz[ . . ] . \" \u2192 \" hb. bz[ . . ] \" \u2192 \" hb. bz. \" ) after the second query f( hb\u0441. bz. . . . ) = 3 ( \" hb\u0441. bz[ . . ] . . \" \u2192 \" hb\u0441. bz[ . . ] . \" \u2192 \" hb\u0441. bz[ . . ] \" \u2192 \" hb\u0441. bz. \" ) after the third query f( hb\u0441. bz. . f. ) = 1 ( \" hb\u0441. bz[ . . ] f. \" \u2192 \" hb\u0441. bz. f. \" ) Note to the second sample test. The original string is \" . cc. \" . after the first query: f( . . c. ) = 1 ( \" [ . . ] c. \" \u2192 \" . c. \" ) after the second query: f( . . . . ) = 3 ( \" [ . . ] . . \" \u2192 \" [ . . ] . \" \u2192 \" [ . . ] \" \u2192 \" . \" ) after the third query: f( . a. . ) = 1 ( \" . a[ . . ] \" \u2192 \" . a. \" ) after the fourth query: f( aa. . ) = 1 ( \" aa[ . . ] \" \u2192 \" aa. \" )",
    "topics": [
      "constructive algorithms",
      "data structures",
      "implementation"
    ],
    "id": "570C"
  },
  {
    "title": "Longest Increasing Subsequence",
    "url": "https://codeforces.com/problemset/problem/568/E",
    "history": "Note that the memory limit in this problem is less than usual. Let' s consider an array consisting of positive integers, some positions of which contain gaps. We have a collection of numbers that can be used to fill the gaps. Each number from the given collection can be used at most once. Your task is to determine such way of filling gaps that the longest increasing subsequence in the formed array has a maximum size.",
    "input": "The first line contains a single integer n \u2014 the length of the array ( 1 \u2264 n \u2264 105) . The second line contains n space- separated integers \u2014 the elements of the sequence. A gap is marked as \" - 1\" . The elements that are not gaps are positive integers not exceeding 109. It is guaranteed that the sequence contains 0 \u2264 k \u2264 1000 gaps. The third line contains a single positive integer m \u2014 the number of elements to fill the gaps ( k \u2264 m \u2264 105) . The fourth line contains m positive integers \u2014 the numbers to fill gaps. Each number is a positive integer not exceeding 109. Some numbers may be equal.",
    "output": "Print n space- separated numbers in a single line \u2014 the resulting sequence. If there are multiple possible answers, print any of them.",
    "note": "In the first sample there are no gaps, so the correct answer is the initial sequence. In the second sample there is only one way to get an increasing subsequence of length 3. In the third sample answer \" 4 2\" would also be correct. Note that only strictly increasing subsequences are considered. In the fifth sample the answer \" 1 1 1 2\" is not considered correct, as number 1 can be used in replacing only two times.",
    "topics": [
      "data structures",
      "dp"
    ],
    "id": "568E"
  },
  {
    "title": "One-Dimensional Battle Ships",
    "url": "https://codeforces.com/problemset/problem/567/D",
    "history": "Alice and Bob love playing one- dimensional battle ships. They play on the field in the form of a line consisting of n square cells ( that is, on a 1 \u00d7 n table) . At the beginning of the game Alice puts k ships on the field without telling their positions to Bob. Each ship looks as a 1 \u00d7 a rectangle ( that is, it occupies a sequence of a consecutive squares of the field) . The ships cannot intersect and even touch each other. After that Bob makes a sequence of \" shots\" . He names cells of the field and Alice either says that the cell is empty ( \" miss\" ) , or that the cell belongs to some ship ( \" hit\" ) . But here' s the problem! Alice like to cheat. May be that is why she responds to each Bob' s move with a \" miss\" . Help Bob catch Alice cheating \u2014 find Bob' s first move, such that after it you can be sure that Alice cheated.",
    "input": "The first line of the input contains three integers: n, k and a ( 1 \u2264 n, k, a \u2264 2\u00b7105) \u2014 the size of the field, the number of the ships and the size of each ship. It is guaranteed that the n, k and a are such that you can put k ships of size a on the field, so that no two ships intersect or touch each other. The second line contains integer m ( 1 \u2264 m \u2264 n) \u2014 the number of Bob' s moves. The third line contains m distinct integers x1, x2, . . . , xm, where xi is the number of the cell where Bob made the i- th shot. The cells are numbered from left to right from 1 to n.",
    "output": "Print a single integer \u2014 the number of such Bob' s first move, after which you can be sure that Alice lied. Bob' s moves are numbered from 1 to m in the order the were made. If the sought move doesn' t exist, then print \" - 1\" .",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "567D"
  },
  {
    "title": "Geometric Progression",
    "url": "https://codeforces.com/problemset/problem/567/C",
    "history": "Polycarp loves geometric progressions very much. Since he was only three years old, he loves only the progressions of length three. He also has a favorite integer k and a sequence a, consisting of n integers. He wants to know how many subsequences of length three can be selected from a, so that they form a geometric progression with common ratio k. A subsequence of length three is a combination of three such indexes i1, i2, i3, that 1 \u2264 i1 < i2 < i3 \u2264 n. That is, a subsequence of length three are such groups of three elements that are not necessarily consecutive in the sequence, but their indexes are strictly increasing. A geometric progression with common ratio k is a sequence of numbers of the form b\u00b7k0, b\u00b7k1, . . . , b\u00b7kr - 1. Polycarp is only three years old, so he can not calculate this number himself. Help him to do it.",
    "input": "The first line of the input contains two integers, n and k ( 1 \u2264 n, k \u2264 2\u00b7105) , showing how many numbers Polycarp' s sequence has and his favorite number. The second line contains n integers a1, a2, . . . , an ( - 109 \u2264 ai \u2264 109) \u2014 elements of the sequence.",
    "output": "Output a single number \u2014 the number of ways to choose a subsequence of length three, such that it forms a geometric progression with a common ratio k.",
    "note": "In the first sample test the answer is four, as any of the two 1s can be chosen as the first element, the second element can be any of the 2s, and the third element of the subsequence must be equal to 4.",
    "topics": [
      "binary search",
      "data structures",
      "dp"
    ],
    "id": "567C"
  },
  {
    "title": "Restructuring Company",
    "url": "https://codeforces.com/problemset/problem/566/D",
    "history": "Even the most successful company can go through a crisis period when you have to make a hard decision \u2014 to restructure, discard and merge departments, fire employees and do other unpleasant stuff. Let' s consider the following model of a company. There are n people working for the Large Software Company. Each person belongs to some department. Initially, each person works on his own project in his own department ( thus, each company initially consists of n departments, one person in each) . However, harsh times have come to the company and the management had to hire a crisis manager who would rebuild the working process in order to boost efficiency. Let' s use team( person) to represent a team where person person works. A crisis manager can make decisions of two types: Merge departments team( x) and team( y) into one large department containing all the employees of team( x) and team( y) , where x and y ( 1 \u2264 x, y \u2264 n) \u2014 are numbers of two of some company employees. If team( x) matches team( y) , then nothing happens. Merge departments team( x) , team( x + 1) , . . . , team( y) , where x and y ( 1 \u2264 x \u2264 y \u2264 n) \u2014 the numbers of some two employees of the company. At that the crisis manager can sometimes wonder whether employees x and y ( 1 \u2264 x, y \u2264 n) work at the same department. Help the crisis manager and answer all of his queries.",
    "input": "The first line of the input contains two integers n and q ( 1 \u2264 n \u2264 200 000, 1 \u2264 q \u2264 500 000) \u2014 the number of the employees of the company and the number of queries the crisis manager has. Next q lines contain the queries of the crisis manager. Each query looks like type x y, where . If type = 1 or type = 2, then the query represents the decision of a crisis manager about merging departments of the first and second types respectively. If type = 3, then your task is to determine whether employees x and y work at the same department. Note that x can be equal to y in the query of any type.",
    "output": "For each question of type 3 print \" YES\" or \" NO\" ( without the quotes) , depending on whether the corresponding people work in the same department.",
    "note": "",
    "topics": [
      "data structures",
      "dsu"
    ],
    "id": "566D"
  },
  {
    "title": "A Simple Task",
    "url": "https://codeforces.com/problemset/problem/558/E",
    "history": "This task is very simple. Given a string S of length n and q queries each query is on the format i j k which means sort the substring consisting of the characters from i to j in non- decreasing order if k = 1 or in non- increasing order if k = 0. Output the final string after applying the queries.",
    "input": "The first line will contain two integers n, q ( 1 \u2264 n \u2264 105, 0 \u2264 q \u2264 50 000) , the length of the string and the number of queries respectively. Next line contains a string S itself. It contains only lowercase English letters. Next q lines will contain three integers each i, j, k ( 1 \u2264 i \u2264 j \u2264 n, ) .",
    "output": "Output one line, the string S after applying the queries.",
    "note": "First sample test explanation:",
    "topics": [
      "data structures",
      "sortings",
      "strings"
    ],
    "id": "558E"
  },
  {
    "title": "Guess Your Way Out! II",
    "url": "https://codeforces.com/problemset/problem/558/D",
    "history": "Amr bought a new video game \" Guess Your Way Out! II\" . The goal of the game is to find an exit from the maze that looks like a perfect binary tree of height h. The player is initially standing at the root of the tree and the exit from the tree is located at some leaf node. Let' s index all the nodes of the tree such that The root is number 1 Each internal node i ( i \u2264 2h - 1 - 1) will have a left child with index = 2i and a right child with index = 2i + 1 The level of a node is defined as 1 for a root, or 1 + level of parent of the node otherwise. The vertices of the level h are called leaves. The exit to the maze is located at some leaf node n, the player doesn' t know where the exit is so he has to guess his way out! In the new version of the game the player is allowed to ask questions on the format \" Does the ancestor( exit, i) node number belong to the range [ L, R] ? \" . Here ancestor( v, i) is the ancestor of a node v that located in the level i. The game will answer with \" Yes\" or \" No\" only. The game is designed such that it doesn' t always answer correctly, and sometimes it cheats to confuse the player! . Amr asked a lot of questions and got confused by all these answers, so he asked you to help him. Given the questions and its answers, can you identify whether the game is telling contradictory information or not? If the information is not contradictory and the exit node can be determined uniquely, output its number. If the information is not contradictory, but the exit node isn' t defined uniquely, output that the number of questions is not sufficient. Otherwise output that the information is contradictory.",
    "input": "The first line contains two integers h, q ( 1 \u2264 h \u2264 50, 0 \u2264 q \u2264 105) , the height of the tree and the number of questions respectively. The next q lines will contain four integers each i, L, R, ans ( 1 \u2264 i \u2264 h, 2i - 1 \u2264 L \u2264 R \u2264 2i - 1, ) , representing a question as described in the statement with its answer ( ans = 1 if the answer is \" Yes\" and ans = 0 if the answer is \" No\" ) .",
    "output": "If the information provided by the game is contradictory output \" Game cheated! \" without the quotes. Else if you can uniquely identify the exit to the maze output its index. Otherwise output \" Data not sufficient! \" without the quotes.",
    "note": "Node u is an ancestor of node v if and only if u is the same node as v, u is the parent of node v, or u is an ancestor of the parent of node v. In the first sample test there are 4 leaf nodes 4, 5, 6, 7. The first question says that the node isn' t in the range [ 4, 6] so the exit is node number 7. In the second sample test there are 8 leaf nodes. After the first question the exit is in the range [ 10, 14] . After the second and the third questions only node number 14 is correct. Check the picture below to fully understand.",
    "topics": [
      "data structures",
      "implementation",
      "sortings"
    ],
    "id": "558D"
  },
  {
    "title": "Ann and Half-Palindrome",
    "url": "https://codeforces.com/problemset/problem/557/E",
    "history": "Tomorrow Ann takes the hardest exam of programming where she should get an excellent mark. On the last theoretical class the teacher introduced the notion of a half- palindrome. String t is a half- palindrome, if for all the odd positions i ( ) the following condition is held: ti = t| t| - i + 1, where | t| is the length of string t if positions are indexed from 1. For example, strings \" abaa\" , \" a\" , \" bb\" , \" abbbaa\" are half- palindromes and strings \" ab\" , \" bba\" and \" aaabaa\" are not. Ann knows that on the exam she will get string s, consisting only of letters a and b, and number k. To get an excellent mark she has to find the k- th in the lexicographical order string among all substrings of s that are half- palyndromes. Note that each substring in this order is considered as many times as many times it occurs in s. The teachers guarantees that the given number k doesn' t exceed the number of substrings of the given string that are half- palindromes. Can you cope with this problem?",
    "input": "The first line of the input contains string s ( 1 \u2264 | s| \u2264 5000) , consisting only of characters ' a' and ' b' , where | s| is the length of string s. The second line contains a positive integer k \u2014 the lexicographical number of the requested string among all the half- palindrome substrings of the given string s. The strings are numbered starting from one. It is guaranteed that number k doesn' t exceed the number of substrings of the given string that are half- palindromes.",
    "output": "Print a substring of the given string that is the k- th in the lexicographical order of all substrings of the given string that are half- palindromes.",
    "note": "By definition, string a = a1a2. . . an is lexicographically less than string b = b1b2. . . bm, if either a is a prefix of b and doesn' t coincide with b, or there exists such i, that a1 = b1, a2 = b2, . . . ai - 1 = bi - 1, ai < bi. In the first sample half- palindrome substrings are the following strings \u2014 a, a, a, a, aa, aba, abaa, abba, abbabaa, b, b, b, b, baab, bab, bb, bbab, bbabaab ( the list is given in the lexicographical order) .",
    "topics": [
      "data structures",
      "dp",
      "graphs",
      "string suffix structures",
      "strings",
      "trees"
    ],
    "id": "557E"
  },
  {
    "title": "Arthur and Table",
    "url": "https://codeforces.com/problemset/problem/557/C",
    "history": "Arthur has bought a beautiful big table into his new flat. When he came home, Arthur noticed that the new table is unstable. In total the table Arthur bought has n legs, the length of the i- th leg is li. Arthur decided to make the table stable and remove some legs. For each of them Arthur determined number di \u2014 the amount of energy that he spends to remove the i- th leg. A table with k legs is assumed to be stable if there are more than half legs of the maximum length. For example, to make a table with 5 legs stable, you need to make sure it has at least three ( out of these five) legs of the maximum length. Also, a table with one leg is always stable and a table with two legs is stable if and only if they have the same lengths. Your task is to help Arthur and count the minimum number of energy units Arthur should spend on making the table stable.",
    "input": "The first line of the input contains integer n ( 1 \u2264 n \u2264 105) \u2014 the initial number of legs in the table Arthur bought. The second line of the input contains a sequence of n integers li ( 1 \u2264 li \u2264 105) , where li is equal to the length of the i- th leg of the table. The third line of the input contains a sequence of n integers di ( 1 \u2264 di \u2264 200) , where di is the number of energy units that Arthur spends on removing the i- th leg off the table.",
    "output": "Print a single integer \u2014 the minimum number of energy units that Arthur needs to spend in order to make the table stable.",
    "note": "",
    "topics": [
      "brute force",
      "data structures",
      "dp",
      "greedy",
      "math",
      "sortings"
    ],
    "id": "557C"
  },
  {
    "title": "Case of Chocolate",
    "url": "https://codeforces.com/problemset/problem/555/C",
    "history": "Andrewid the Android is a galaxy- known detective. Now he does not investigate any case and is eating chocolate out of boredom. A bar of chocolate can be presented as an n \u00d7 n table, where each cell represents one piece of chocolate. The columns of the table are numbered from 1 to n from left to right and the rows are numbered from top to bottom. Let' s call the anti- diagonal to be a diagonal that goes the lower left corner to the upper right corner of the table. First Andrewid eats all the pieces lying below the anti- diagonal. Then he performs the following q actions with the remaining triangular part: first, he chooses a piece on the anti- diagonal and either direction ' up' or ' left' , and then he begins to eat all the pieces starting from the selected cell, moving in the selected direction until he reaches the already eaten piece or chocolate bar edge. After each action, he wants to know how many pieces he ate as a result of this action.",
    "input": "The first line contains integers n ( 1 \u2264 n \u2264 109) and q ( 1 \u2264 q \u2264 2\u00b7105) \u2014 the size of the chocolate bar and the number of actions. Next q lines contain the descriptions of the actions: the i- th of them contains numbers xi and yi ( 1 \u2264 xi, yi \u2264 n, xi + yi = n + 1) \u2014 the numbers of the column and row of the chosen cell and the character that represents the direction ( L \u2014 left, U \u2014 up) .",
    "output": "Print q lines, the i- th of them should contain the number of eaten pieces as a result of the i- th action.",
    "note": "Pictures to the sample tests: The pieces that were eaten in the same action are painted the same color. The pieces lying on the anti- diagonal contain the numbers of the action as a result of which these pieces were eaten. In the second sample test the Andrewid tries to start eating chocolate for the second time during his fifth action, starting from the cell at the intersection of the 10- th column and the 1- st row, but this cell is already empty, so he does not eat anything.",
    "topics": [
      "data structures"
    ],
    "id": "555C"
  },
  {
    "title": "Case of Fugitive",
    "url": "https://codeforces.com/problemset/problem/555/B",
    "history": "Andrewid the Android is a galaxy- famous detective. He is now chasing a criminal hiding on the planet Oxa- 5, the planet almost fully covered with water. The only dry land there is an archipelago of n narrow islands located in a row. For more comfort let' s represent them as non- intersecting segments on a straight line: island i has coordinates [ li, ri] , besides, ri < li + 1 for 1 \u2264 i \u2264 n - 1. To reach the goal, Andrewid needs to place a bridge between each pair of adjacent islands. A bridge of length a can be placed between the i- th and the ( i + 1) - th islads, if there are such coordinates of x and y, that li \u2264 x \u2264 ri, li + 1 \u2264 y \u2264 ri + 1 and y - x = a. The detective was supplied with m bridges, each bridge can be used at most once. Help him determine whether the bridges he got are enough to connect each pair of adjacent islands.",
    "input": "The first line contains integers n ( 2 \u2264 n \u2264 2\u00b7105) and m ( 1 \u2264 m \u2264 2\u00b7105) \u2014 the number of islands and bridges. Next n lines each contain two integers li and ri ( 1 \u2264 li \u2264 ri \u2264 1018) \u2014 the coordinates of the island endpoints. The last line contains m integer numbers a1, a2, . . . , am ( 1 \u2264 ai \u2264 1018) \u2014 the lengths of the bridges that Andrewid got.",
    "output": "If it is impossible to place a bridge between each pair of adjacent islands in the required manner, print on a single line \" No\" ( without the quotes) , otherwise print in the first line \" Yes\" ( without the quotes) , and in the second line print n - 1 numbers b1, b2, . . . , bn - 1, which mean that between islands i and i + 1 there must be used a bridge number bi. If there are multiple correct answers, print any of them. Note that in this problem it is necessary to print \" Yes\" and \" No\" in correct case.",
    "note": "In the first sample test you can, for example, place the second bridge between points 3 and 8, place the third bridge between points 7 and 10 and place the first bridge between points 10 and 14. In the second sample test the first bridge is too short and the second bridge is too long, so the solution doesn' t exist.",
    "topics": [
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "555B"
  },
  {
    "title": "Vanya and Triangles",
    "url": "https://codeforces.com/problemset/problem/552/D",
    "history": "Vanya got bored and he painted n distinct points on the plane. After that he connected all the points pairwise and saw that as a result many triangles were formed with vertices in the painted points. He asks you to count the number of the formed triangles with the non- zero area.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 2000) \u2014 the number of the points painted on the plane. Next n lines contain two integers each xi, yi ( - 100 \u2264 xi, yi \u2264 100) \u2014 the coordinates of the i- th point. It is guaranteed that no two given points coincide.",
    "output": "In the first line print an integer \u2014 the number of triangles with the non- zero area among the painted points.",
    "note": "Note to the first sample test. There are 3 triangles formed: ( 0, 0) - ( 1, 1) - ( 2, 0) ; ( 0, 0) - ( 2, 2) - ( 2, 0) ; ( 1, 1) - ( 2, 2) - ( 2, 0) . Note to the second sample test. There is 1 triangle formed: ( 0, 0) - ( 1, 1) - ( 2, 0) . Note to the third sample test. A single point doesn' t form a single triangle.",
    "topics": [
      "brute force",
      "combinatorics",
      "data structures",
      "geometry",
      "math",
      "sortings"
    ],
    "id": "552D"
  },
  {
    "title": "GukiZ and GukiZiana",
    "url": "https://codeforces.com/problemset/problem/551/E",
    "history": "Professor GukiZ was playing with arrays again and accidentally discovered new function, which he called GukiZiana. For given array a, indexed with integers from 1 to n, and number y, GukiZiana( a, y) represents maximum value of j - i, such that aj = ai = y. If there is no y as an element in a, then GukiZiana( a, y) is equal to - 1. GukiZ also prepared a problem for you. This time, you have two types of queries: First type has form 1 l r x and asks you to increase values of all ai such that l \u2264 i \u2264 r by the non- negative integer x. Second type has form 2 y and asks you to find value of GukiZiana( a, y) . For each query of type 2, print the answer and make GukiZ happy!",
    "input": "The first line contains two integers n, q ( 1 \u2264 n \u2264 5 * 105, 1 \u2264 q \u2264 5 * 104) , size of array a, and the number of queries. The second line contains n integers a1, a2, . . . an ( 1 \u2264 ai \u2264 109) , forming an array a. Each of next q lines contain either four or two numbers, as described in statement: If line starts with 1, then the query looks like 1 l r x ( 1 \u2264 l \u2264 r \u2264 n, 0 \u2264 x \u2264 109) , first type query. If line starts with 2, then th query looks like 2 y ( 1 \u2264 y \u2264 109) , second type query.",
    "output": "For each query of type 2, print the value of GukiZiana( a, y) , for y value for that query.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "implementation"
    ],
    "id": "551E"
  },
  {
    "title": "Yura and Developers",
    "url": "https://codeforces.com/problemset/problem/549/F",
    "history": "Yura has a team of k developers and a list of n tasks numbered from 1 to n. Yura is going to choose some tasks to be done this week. Due to strange Looksery habits the numbers of chosen tasks should be a segment of consecutive integers containing no less than 2 numbers, i. e. a sequence of form l, l + 1, . . . , r for some 1 \u2264 l < r \u2264 n. Every task i has an integer number ai associated with it denoting how many man- hours are required to complete the i- th task. Developers are not self- confident at all, and they are actually afraid of difficult tasks. Knowing that, Yura decided to pick up a hardest task ( the one that takes the biggest number of man- hours to be completed, among several hardest tasks with same difficulty level he chooses arbitrary one) and complete it on his own. So, if tasks with numbers [ l, r] are chosen then the developers are left with r - l tasks to be done by themselves. Every developer can spend any integer amount of hours over any task, but when they are done with the whole assignment there should be exactly ai man- hours spent over the i- th task. The last, but not the least problem with developers is that one gets angry if he works more than another developer. A set of tasks [ l, r] is considered good if it is possible to find such a distribution of work that allows to complete all the tasks and to have every developer working for the same amount of time ( amount of work performed by Yura doesn' t matter for other workers as well as for him) . For example, let' s suppose that Yura have chosen tasks with following difficulties: a = [ 1, 2, 3, 4] , and he has three developers in his disposal. He takes the hardest fourth task to finish by himself, and the developers are left with tasks with difficulties [ 1, 2, 3] . If the first one spends an hour on the first task and an hour on the third one, the second developer spends two hours on the second task and the third developer spends two hours on the third task, then they are done, since every developer worked exactly for two hours and every task has been worked over for the required amount of time. As another example, if the first task required two hours instead of one to be completed then it would be impossible to assign the tasks in a way described above. Besides work, Yura is fond of problem solving. He wonders how many pairs ( l, r) ( 1 \u2264 l < r \u2264 n) exists such that a segment [ l, r] is good? Yura has already solved this problem, but he has no time to write the code. Please, help Yura and implement the solution for this problem.",
    "input": "The first line of input contains two positive integers: n and k ( 1 \u2264 n \u2264 300 000, 1 \u2264 k \u2264 1 000 000) , the number of tasks in the list and the number of developers in Yura' s disposal. The second line contains n integers ai ( 1 \u2264 ai \u2264 109) .",
    "output": "Output a single integer \u2014 the number of pairs ( l, r) satisfying the conditions from the statement.",
    "note": "In the first sample there are three good segments: [ 1; 3] \u2014 the hardest task requires 3 man- hours, so there are tasks left that require 1 and 2 man- hours. A solution is to make first developer work on the first task for an hour, while second and third developers work on the second task. Each developer works exactly one hour. [ 1; 4] \u2014 the hardest task requires 4 man- hours, so there are tasks left that require 1, 2 and 3 man- hours. If the first developer spends an hour on the first task and an hour on the third one, the second developer spends two hours on the second task and the third developer spends two hours on the third task, then they are done, since every developer worked exactly for two hours. [ 3; 4] \u2014 the hardest task requires 4 man- hours, so there is only one task left that requires 3 man- hours. A solution is to make each developer work for an hour.",
    "topics": [
      "data structures",
      "divide and conquer"
    ],
    "id": "549F"
  },
  {
    "title": "Mike and Friends",
    "url": "https://codeforces.com/problemset/problem/547/E",
    "history": "What- The- Fatherland is a strange country! All phone numbers there are strings consisting of lowercase English letters. What is double strange that a phone number can be associated with several bears! In that country there is a rock band called CF consisting of n bears ( including Mike) numbered from 1 to n. Phone number of i- th member of CF is si. May 17th is a holiday named Phone Calls day. In the last Phone Calls day, everyone called all the numbers that are substrings of his/ her number ( one may call some number several times) . In particular, everyone called himself ( that was really strange country) . Denote as call( i, j) the number of times that i- th member of CF called the j- th member of CF. The geek Mike has q questions that he wants to ask you. In each question he gives you numbers l, r and k and you should tell him the number",
    "input": "The first line of input contains integers n and q ( 1 \u2264 n \u2264 2 \u00d7 105 and 1 \u2264 q \u2264 5 \u00d7 105) . The next n lines contain the phone numbers, i- th line contains a string si consisting of lowercase English letters ( ) . The next q lines contain the information about the questions, each of them contains integers l, r and k ( 1 \u2264 l \u2264 r \u2264 n and 1 \u2264 k \u2264 n) .",
    "output": "Print the answer for each question in a separate line.",
    "note": "",
    "topics": [
      "data structures",
      "string suffix structures",
      "strings",
      "trees"
    ],
    "id": "547E"
  },
  {
    "title": "Mike and Feet",
    "url": "https://codeforces.com/problemset/problem/547/B",
    "history": "Mike is the president of country What- The- Fatherland. There are n bears living in this country besides Mike. All of them are standing in a line and they are numbered from 1 to n from left to right. i- th bear is exactly ai feet high. A group of bears is a non- empty contiguous segment of the line. The size of a group is the number of bears in that group. The strength of a group is the minimum height of the bear in that group. Mike is a curious to know for each x such that 1 \u2264 x \u2264 n the maximum strength among all groups of size x.",
    "input": "The first line of input contains integer n ( 1 \u2264 n \u2264 2 \u00d7 105) , the number of bears. The second line contains n integers separated by space, a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) , heights of bears.",
    "output": "Print n integers in one line. For each x from 1 to n, print the maximum strength among all groups of size x.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "dsu"
    ],
    "id": "547B"
  },
  {
    "title": "Listening to Music",
    "url": "https://codeforces.com/problemset/problem/543/E",
    "history": "Please note that the memory limit differs from the standard. You really love to listen to music. During the each of next s days you will listen to exactly m songs from the playlist that consists of exactly n songs. Let' s number the songs from the playlist with numbers from 1 to n, inclusive. The quality of song number i is ai. On the i- th day you choose some integer v ( li \u2264 v \u2264 ri) and listen to songs number v, v + 1, . . . , v + m - 1. On the i- th day listening to one song with quality less than qi increases your displeasure by exactly one. Determine what minimum displeasure you can get on each of the s next days.",
    "input": "The first line contains two positive integers n, m ( 1 \u2264 m \u2264 n \u2264 2\u00b7105) . The second line contains n positive integers a1, a2, . . . , an ( 0 \u2264 ai < 230) \u2014 the description of songs from the playlist. The next line contains a single number s ( 1 \u2264 s \u2264 2\u00b7105) \u2014 the number of days that you consider. The next s lines contain three integers each li, ri, xi ( 1 \u2264 li \u2264 ri \u2264 n - m + 1; 0 \u2264 xi < 230) \u2014 the description of the parameters for the i- th day. In order to calculate value qi, you need to use formula: , where ansi is the answer to the problem for day i. Assume that ans0 = 0.",
    "output": "Print exactly s integers ans1, ans2, . . . , anss, where ansi is the minimum displeasure that you can get on day i.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "data structures"
    ],
    "id": "543E"
  },
  {
    "title": "Duck Hunt",
    "url": "https://codeforces.com/problemset/problem/542/B",
    "history": "A duck hunter is doing his favorite thing, hunting. He lives in a two dimensional world and is located at point ( 0, 0) . As he doesn' t like walking for his prey, he prefers to shoot only vertically up ( because in this case, the ducks fall straight into his hands) . The hunter doesn' t reload the gun immediately \u2014 r or more seconds must pass between the shots. When the hunter shoots up, the bullet immediately hits all the ducks who are directly above the hunter. In a two dimensional world each duck is a horizontal segment that moves horizontally in the negative direction of the Ox axis at the speed 1 length unit per second. For each duck we know the values hi and ti \u2014 the x- coordinates of its head ( the left end of the segment) and its tail ( the right end of the segment) at time 0. The height where the duck is flying isn' t important as the gun shoots vertically up to the infinite height and hits all the ducks on its way. The figure to the first sample. What maximum number of ducks can the hunter shoot? The duck is considered shot by the hunter if at the moment of the shot at least one of its point intersects the Oy axis. After the hunter shoots the duck, it falls and it can' t be shot anymore. The hunter cannot make shots before the moment of time 0.",
    "input": "The first line of the input contains integers n, r ( 1 \u2264 n \u2264 200 000, 1 \u2264 r \u2264 109) \u2014 the number of ducks and the minimum time in seconds between the shots. Then n lines follow, each of them contains two integers hi, ti ( - 109 \u2264 hi < ti \u2264 109) \u2014 the x- coordinate of the head and tail of the i- th duck at the moment 0.",
    "output": "Print a single integer \u2014 the maximum number of ducks that can be shot by the hunter.",
    "note": "In the first sample the hunter must shoot at time 0, this shot kills ducks 1 and 3. Then the hunter needs to reload the gun and shoot again at time 3. His second shot hits the tail of duck 2. In the second sample the hunter can make shots at times 0 and 6 to hit three ducks.",
    "topics": [
      "data structures"
    ],
    "id": "542B"
  },
  {
    "title": "Place Your Ad Here",
    "url": "https://codeforces.com/problemset/problem/542/A",
    "history": "Ivan Anatolyevich' s agency is starting to become famous in the town. They have already ordered and made n TV commercial videos. Each video is made in a special way: the colors and the soundtrack are adjusted to the time of the day and the viewers' mood. That' s why the i- th video can only be shown within the time range of [ li, ri] ( it is not necessary to use the whole segment but the broadcast time should be within this segment) . Now it' s time to choose a TV channel to broadcast the commercial. Overall, there are m TV channels broadcasting in the city, the j- th one has cj viewers, and is ready to sell time [ aj, bj] to broadcast the commercial. Ivan Anatolyevich is facing a hard choice: he has to choose exactly one video i and exactly one TV channel j to broadcast this video and also a time range to broadcast [ x, y] . At that the time range should be chosen so that it is both within range [ li, ri] and within range [ aj, bj] . Let' s define the efficiency of the broadcast as value ( y - x) \u00b7cj \u2014 the total sum of time that all the viewers of the TV channel are going to spend watching the commercial. Help Ivan Anatolyevich choose the broadcast with the maximum efficiency!",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 2\u00b7105) \u2014 the number of commercial videos and channels, respectively. Each of the following n lines contains two integers li, ri ( 0 \u2264 li \u2264 ri \u2264 109) \u2014 the segment of time when it is possible to show the corresponding video. Each of the following m lines contains three integers aj, bj, cj ( 0 \u2264 aj \u2264 bj \u2264 109, 1 \u2264 cj \u2264 109) , characterizing the TV channel.",
    "output": "In the first line print an integer \u2014 the maximum possible efficiency of the broadcast. If there is no correct way to get a strictly positive efficiency, print a zero. If the maximum efficiency is strictly positive, in the second line also print the number of the video i ( 1 \u2264 i \u2264 n) and the number of the TV channel j ( 1 \u2264 j \u2264 m) in the most effective broadcast. If there are multiple optimal answers, you can print any of them.",
    "note": "In the first sample test the most optimal solution is to show the second commercial using the first TV channel at time [ 2, 4] . The efficiency of such solution is equal to ( 4 - 2) \u00b72 = 4. In the second sample test Ivan Anatolievich' s wish does not meet the options of the TV channel, the segments do not intersect, so the answer is zero.",
    "topics": [
      "data structures",
      "sortings"
    ],
    "id": "542A"
  },
  {
    "title": "Infinite Inversions",
    "url": "https://codeforces.com/problemset/problem/540/E",
    "history": "There is an infinite sequence consisting of all positive integers in the increasing order: p = 1, 2, 3, . . . . We performed n swap operations with this sequence. A swap( a, b) is an operation of swapping the elements of the sequence on positions a and b. Your task is to find the number of inversions in the resulting sequence, i. e. the number of such index pairs ( i, j) , that i < j and pi > pj.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 105) \u2014 the number of swap operations applied to the sequence. Each of the next n lines contains two integers ai and bi ( 1 \u2264 ai, bi \u2264 109, ai = \u0338 bi) \u2014 the arguments of the swap operation.",
    "output": "Print a single integer \u2014 the number of inversions in the resulting sequence.",
    "note": "In the first sample the sequence is being modified as follows: . It has 4 inversions formed by index pairs ( 1, 4) , ( 2, 3) , ( 2, 4) and ( 3, 4) .",
    "topics": [
      "binary search",
      "data structures",
      "implementation",
      "sortings",
      "trees"
    ],
    "id": "540E"
  },
  {
    "title": "Summer Dichotomy",
    "url": "https://codeforces.com/problemset/problem/538/H",
    "history": "T students applied into the ZPP class of Summer Irrelevant School. The organizing committee of the school may enroll any number of them, but at least t students must be enrolled. The enrolled students should be divided into two groups in any manner ( it is possible that one of the groups will be empty! ) During a shift the students from the ZPP grade are tutored by n teachers. Due to the nature of the educational process, each of the teachers should be assigned to exactly one of two groups ( it is possible that no teacher will be assigned to some of the groups! ) . The i- th teacher is willing to work in a group as long as the group will have at least li and at most ri students ( otherwise it would be either too boring or too hard) . Besides, some pairs of the teachers don' t like each other other and therefore can not work in the same group; in total there are m pairs of conflicting teachers. You, as the head teacher of Summer Irrelevant School, have got a difficult task: to determine how many students to enroll in each of the groups and in which group each teacher will teach.",
    "input": "The first line contains two space- separated integers, t and T ( 1 \u2264 t \u2264 T \u2264 109) . The second line contains two space- separated integers n and m ( 1 \u2264 n \u2264 105, 0 \u2264 m \u2264 105) . The i- th of the next n lines contain integers li and ri ( 0 \u2264 li \u2264 ri \u2264 109) . The next m lines describe the pairs of conflicting teachers. Each of these lines contain two space- separated integers \u2014 the indices of teachers in the pair. The teachers are indexed starting from one. It is guaranteed that no teacher has a conflict with himself and no pair of conflicting teachers occurs in the list more than once.",
    "output": "If the distribution is possible, print in the first line a single word ' POSSIBLE' ( without the quotes) . In the second line print two space- separated integers n1 and n2 \u2014 the number of students in the first and second group, correspondingly, the contstraint t \u2264 n1 + n2 \u2264 T should be met. In the third line print n characters, the i- th of which should be 1 or 2, if the i- th teacher should be assigned to the first or second group, correspondingly. If there are multiple possible distributions of students and teachers in groups, you can print any of them. If the sought distribution doesn' t exist, print a single word ' IMPOSSIBLE' ( without the quotes) .",
    "note": "",
    "topics": [
      "2-sat",
      "data structures",
      "dfs and similar",
      "greedy"
    ],
    "id": "538H"
  },
  {
    "title": "A Heap of Heaps",
    "url": "https://codeforces.com/problemset/problem/538/F",
    "history": "Andrew skipped lessons on the subject ' Algorithms and Data Structures' for the entire term. When he came to the final test, the teacher decided to give him a difficult task as a punishment. The teacher gave Andrew an array of n numbers a1, . . . , an. After that he asked Andrew for each k from 1 to n - 1 to build a k- ary heap on the array and count the number of elements for which the property of the minimum- rooted heap is violated, i. e. the value of an element is less than the value of its parent. Andrew looked up on the Wikipedia that a k- ary heap is a rooted tree with vertices in elements of the array. If the elements of the array are indexed from 1 to n, then the children of element v are elements with indices k( v - 1) + 2, . . . , kv + 1 ( if some of these elements lie outside the borders of the array, the corresponding children are absent) . In any k- ary heap every element except for the first one has exactly one parent; for the element 1 the parent is absent ( this element is the root of the heap) . Denote p( v) as the number of the parent of the element with the number v. Let' s say that for a non- root element v the property of the heap is violated if av < ap( v) . Help Andrew cope with the task!",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 2\u00b7105) . The second line contains n space- separated integers a1, . . . , an ( - 109 \u2264 ai \u2264 109) .",
    "output": "in a single line print n - 1 integers, separate the consecutive numbers with a single space \u2014 the number of elements for which the property of the k- ary heap is violated, for k = 1, 2, . . . , n - 1.",
    "note": "Pictures with the heaps for the first sample are given below; elements for which the property of the heap is violated are marked with red. In the second sample all elements are equal, so the property holds for all pairs.",
    "topics": [
      "brute force",
      "data structures",
      "math",
      "sortings"
    ],
    "id": "538F"
  },
  {
    "title": "Tavas on the Path",
    "url": "https://codeforces.com/problemset/problem/536/E",
    "history": "Tavas lives in Tavaspolis. Tavaspolis has n cities numbered from 1 to n connected by n - 1 bidirectional roads. There exists a path between any two cities. Also each road has a length. Tavas' favorite strings are binary strings ( they contain only 0 and 1) . For any binary string like s = s1s2. . . sk, T( s) is its Goodness. T( s) can be calculated as follows: Consider there are exactly m blocks of 1s in this string ( a block of 1s in s is a maximal consecutive substring of s that only contains 1) with lengths x1, x2, . . . , xm. Define where f is a given sequence ( if m = 0, then T( s) = 0) . Tavas loves queries. He asks you to answer q queries. In each query he gives you numbers v, u, l and you should print following number: Consider the roads on the path from city v to city u: e1, e2, . . . , ex. Build the binary string b of length x such that: bi = 1 if and only if l \u2264 w( ei) where w( e) is the length of road e. You should print T( b) for this query.",
    "input": "The first line of input contains integers n and q ( 2 \u2264 n \u2264 105 and 1 \u2264 q \u2264 105) . The next line contains n - 1 space separated integers f1, f2, . . . , fn - 1 ( | fi| \u2264 1000) . The next n - 1 lines contain the details of the roads. Each line contains integers v, u and w and it means that there' s a road between cities v and u of length w ( 1 \u2264 v, u \u2264 n and 1 \u2264 w \u2264 109) . The next q lines contain the details of the queries. Each line contains integers v, u, l ( 1 \u2264 v, u \u2264 n, v = \u0338 u and 1 \u2264 l \u2264 109) .",
    "output": "Print the answer of each query in a single line.",
    "note": "",
    "topics": [
      "data structures",
      "divide and conquer",
      "trees"
    ],
    "id": "536E"
  },
  {
    "title": "Handshakes",
    "url": "https://codeforces.com/problemset/problem/534/D",
    "history": "On February, 30th n students came in the Center for Training Olympiad Programmers ( CTOP) of the Berland State University. They came one by one, one after another. Each of them went in, and before sitting down at his desk, greeted with those who were present in the room by shaking hands. Each of the students who came in stayed in CTOP until the end of the day and never left. At any time any three students could join together and start participating in a team contest, which lasted until the end of the day. The team did not distract from the contest for a minute, so when another student came in and greeted those who were present, he did not shake hands with the members of the contest writing team. Each team consisted of exactly three students, and each student could not become a member of more than one team. Different teams could start writing contest at different times. Given how many present people shook the hands of each student, get a possible order in which the students could have come to CTOP. If such an order does not exist, then print that this is impossible. Please note that some students could work independently until the end of the day, without participating in a team contest.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 2\u00b7105) \u2014 the number of students who came to CTOP. The next line contains n integers a1, a2, . . . , an ( 0 \u2264 ai < n) , where ai is the number of students with who the i- th student shook hands.",
    "output": "If the sought order of students exists, print in the first line \" Possible\" and in the second line print the permutation of the students' numbers defining the order in which the students entered the center. Number i that stands to the left of number j in this permutation means that the i- th student came earlier than the j- th student. If there are multiple answers, print any of them. If the sought order of students doesn' t exist, in a single line print \" Impossible\" .",
    "note": "In the first sample from the statement the order of events could be as follows: student 4 comes in ( a4 = 0) , he has no one to greet; student 5 comes in ( a5 = 1) , he shakes hands with student 4; student 1 comes in ( a1 = 2) , he shakes hands with two students ( students 4, 5) ; student 3 comes in ( a3 = 3) , he shakes hands with three students ( students 4, 5, 1) ; students 4, 5, 3 form a team and start writing a contest; student 2 comes in ( a2 = 1) , he shakes hands with one student ( number 1) . In the second sample from the statement the order of events could be as follows: student 7 comes in ( a7 = 0) , he has nobody to greet; student 5 comes in ( a5 = 1) , he shakes hands with student 7; student 2 comes in ( a2 = 2) , he shakes hands with two students ( students 7, 5) ; students 7, 5, 2 form a team and start writing a contest; student 1 comes in( a1 = 0) , he has no one to greet ( everyone is busy with the contest) ; student 6 comes in ( a6 = 1) , he shakes hands with student 1; student 8 comes in ( a8 = 2) , he shakes hands with two students ( students 1, 6) ; student 3 comes in ( a3 = 3) , he shakes hands with three students ( students 1, 6, 8) ; student 4 comes in ( a4 = 4) , he shakes hands with four students ( students 1, 6, 8, 3) ; students 8, 3, 4 form a team and start writing a contest; student 9 comes in ( a9 = 2) , he shakes hands with two students ( students 1, 6) . In the third sample from the statement the order of events is restored unambiguously: student 1 comes in ( a1 = 0) , he has no one to greet; student 3 comes in ( or student 4) ( a3 = a4 = 1) , he shakes hands with student 1; student 2 comes in ( a2 = 2) , he shakes hands with two students ( students 1, 3 ( or 4) ) ; the remaining student 4 ( or student 3) , must shake one student' s hand ( a3 = a4 = 1) but it is impossible as there are only two scenarios: either a team formed and he doesn' t greet anyone, or he greets all the three present people who work individually.",
    "topics": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "greedy"
    ],
    "id": "534D"
  },
  {
    "title": "Landmarks",
    "url": "https://codeforces.com/problemset/problem/533/D",
    "history": "We have an old building with n + 2 columns in a row. These columns support the ceiling. These columns are located in points with coordinates 0 = x0 < x1 < . . . < xn < xn + 1. The leftmost and the rightmost columns are special, we will call them bearing, the other columns are ordinary. For each column we know its durability di. Let' s consider an ordinary column with coordinate x. Let' s assume that the coordinate of the closest to it column to the left ( bearing or ordinary) is a and the coordinate of the closest to it column to the right ( also, bearing or ordinary) is b. In this task let' s assume that this column supports the segment of the ceiling from point to point ( here both fractions are considered as real division) . If the length of the segment of the ceiling supported by the column exceeds di, then the column cannot support it and it crashes after a while, and after that the load is being redistributeed between the neighbouring columns according to the same principle. Thus, ordinary columns will be crashing for some time until the process stops at some state. One can prove that the set of the remaining columns doesn' t depend on the order in which columns crash. If there are only two bearing columns left in the end, then we assume that the whole construction crashes under the weight of the roof. But if at least one ordinary column stays in addition to the bearing ones, then the building doesn' t crash. To make the building stronger, we can add one extra ordinary column of arbitrary durability d' at any ( not necessarily integer) point 0 < x' < xn + 1. If point x' is already occupied by an ordinary column, it is replaced by a new one. Your task is to find out: what minimal durability can the added column have so that the building doesn' t crash?",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 105) \u2014 the number of ordinary columns. The second line contains n + 2 integers x0, x1, . . . , xn, xn + 1 ( x0 = 0, xi < xi + 1 for 0 \u2264 i \u2264 n, xn + 1 \u2264 109) \u2014 the coordinates of the columns. The third line contains n integers d1, d2, . . . , dn ( 1 \u2264 di \u2264 109) .",
    "output": "Print a single number \u2014 the minimum possible durability of the column that you need to add in order to make the building stay. If you do not have to add the column, please print 0. Your answer will be checked with the relative or absolute error 10 - 4.",
    "note": "",
    "topics": [
      "data structures",
      "dp"
    ],
    "id": "533D"
  },
  {
    "title": "Berland Miners",
    "url": "https://codeforces.com/problemset/problem/533/A",
    "history": "The biggest gold mine in Berland consists of n caves, connected by n - 1 transitions. The entrance to the mine leads to the cave number 1, it is possible to go from it to any remaining cave of the mine by moving along the transitions. The mine is being developed by the InMine Inc. , k miners work for it. Each day the corporation sorts miners into caves so that each cave has at most one miner working there. For each cave we know the height of its ceiling hi in meters, and for each miner we know his height sj, also in meters. If a miner' s height doesn' t exceed the height of the cave ceiling where he is, then he can stand there comfortably, otherwise, he has to stoop and that makes him unhappy. Unfortunately, miners typically go on strike in Berland, so InMine makes all the possible effort to make miners happy about their work conditions. To ensure that no miner goes on strike, you need make sure that no miner has to stoop at any moment on his way from the entrance to the mine to his cave ( in particular, he must be able to stand comfortably in the cave where he works) . To reach this goal, you can choose exactly one cave and increase the height of its ceiling by several meters. However enlarging a cave is an expensive and complex procedure. That' s why InMine Inc. asks you either to determine the minimum number of meters you should raise the ceiling of some cave so that it is be possible to sort the miners into the caves and keep all miners happy with their working conditions or to determine that it is impossible to achieve by raising ceiling in exactly one cave.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 5\u00b7105) \u2014 the number of caves in the mine. Then follows a line consisting of n positive integers h1, h2, . . . , hn ( 1 \u2264 hi \u2264 109) , where hi is the height of the ceiling in the i- th cave. Next n - 1 lines contain the descriptions of transitions between the caves. Each line has the form ai, bi ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi) , where ai and bi are the numbers of the caves connected by a path. The next line contains integer k ( 1 \u2264 k \u2264 n) . The last line contains k integers s1, s2, . . . , sk ( 1 \u2264 sj \u2264 109) , where sj is the j- th miner' s height.",
    "output": "In the single line print the minimum number of meters that you need to raise the ceiling by in some cave so that all miners could be sorted into caves and be happy about the work conditions. If it is impossible to do, print - 1. If it is initially possible and there' s no need to raise any ceiling, print 0.",
    "note": "In the first sample test we should increase ceiling height in the first cave from 5 to 11. After that we can distribute miners as following ( first goes index of a miner, then index of a cave) : . In the second sample test there is no need to do anything since it is already possible to distribute miners as following: . In the third sample test it is impossible.",
    "topics": [
      "binary search",
      "data structures",
      "dfs and similar",
      "greedy",
      "trees"
    ],
    "id": "533A"
  },
  {
    "title": "Clique Problem",
    "url": "https://codeforces.com/problemset/problem/527/D",
    "history": "The clique problem is one of the most well- known NP- complete problems. Under some simplification it can be formulated as follows. Consider an undirected graph G. It is required to find a subset of vertices C of the maximum size such that any two of them are connected by an edge in graph G. Sounds simple, doesn' t it? Nobody yet knows an algorithm that finds a solution to this problem in polynomial time of the size of the graph. However, as with many other NP- complete problems, the clique problem is easier if you consider a specific type of a graph. Consider n distinct points on a line. Let the i- th point have the coordinate xi and weight wi. Let' s form graph G, whose vertices are these points and edges connect exactly the pairs of points ( i, j) , such that the distance between them is not less than the sum of their weights, or more formally: | xi - xj| \u2265 wi + wj. Find the size of the maximum clique in such graph.",
    "input": "The first line contains the integer n ( 1 \u2264 n \u2264 200 000) \u2014 the number of points. Each of the next n lines contains two numbers xi, wi ( 0 \u2264 xi \u2264 109, 1 \u2264 wi \u2264 109) \u2014 the coordinate and the weight of a point. All xi are different.",
    "output": "Print a single number \u2014 the number of vertexes in the maximum clique of the given graph.",
    "note": "If you happen to know how to solve this problem without using the specific properties of the graph formulated in the problem statement, then you are able to get a prize of one million dollars! The picture for the sample test.",
    "topics": [
      "data structures",
      "dp",
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "527D"
  },
  {
    "title": "Glass Carving",
    "url": "https://codeforces.com/problemset/problem/527/C",
    "history": "Leonid wants to become a glass carver ( the person who creates beautiful artworks by cutting the glass) . He already has a rectangular w mm \u00d7 h mm sheet of glass, a diamond glass cutter and lots of enthusiasm. What he lacks is understanding of what to carve and how. In order not to waste time, he decided to practice the technique of carving. To do this, he makes vertical and horizontal cuts through the entire sheet. This process results in making smaller rectangular fragments of glass. Leonid does not move the newly made glass fragments. In particular, a cut divides each fragment of glass that it goes through into smaller fragments. After each cut Leonid tries to determine what area the largest of the currently available glass fragments has. Since there appear more and more fragments, this question takes him more and more time and distracts him from the fascinating process. Leonid offers to divide the labor \u2014 he will cut glass, and you will calculate the area of the maximum fragment after each cut. Do you agree?",
    "input": "The first line contains three integers w, h, n ( 2 \u2264 w, h \u2264 200 000, 1 \u2264 n \u2264 200 000) . Next n lines contain the descriptions of the cuts. Each description has the form H y or V x. In the first case Leonid makes the horizontal cut at the distance y millimeters ( 1 \u2264 y \u2264 h - 1) from the lower edge of the original sheet of glass. In the second case Leonid makes a vertical cut at distance x ( 1 \u2264 x \u2264 w - 1) millimeters from the left edge of the original sheet of glass. It is guaranteed that Leonid won' t make two identical cuts.",
    "output": "After each cut print on a single line the area of the maximum available glass fragment in mm2.",
    "note": "Picture for the first sample test: Picture for the second sample test:",
    "topics": [
      "binary search",
      "data structures",
      "implementation"
    ],
    "id": "527C"
  },
  {
    "title": "Pudding Monsters",
    "url": "https://codeforces.com/problemset/problem/526/F",
    "history": "In this problem you will meet the simplified model of game Pudding Monsters. An important process in developing any game is creating levels. A game field in Pudding Monsters is an n \u00d7 n rectangular grid, n of its cells contain monsters and some other cells contain game objects. The gameplay is about moving the monsters around the field. When two monsters are touching each other, they glue together into a single big one ( as they are from pudding, remember? ) . Statistics showed that the most interesting maps appear if initially each row and each column contains exactly one monster and the rest of map specifics is set up by the correct positioning of the other game objects. A technique that' s widely used to make the development process more efficient is reusing the available resources. For example, if there is a large n \u00d7 n map, you can choose in it a smaller k \u00d7 k square part, containing exactly k monsters and suggest it as a simplified version of the original map. You wonder how many ways there are to choose in the initial map a k \u00d7 k ( 1 \u2264 k \u2264 n) square fragment, containing exactly k pudding monsters. Calculate this number.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 3 \u00d7 105) \u2014 the size of the initial field. Next n lines contain the coordinates of the cells initially containing monsters. The i- th of the next lines contains two numbers ri, ci ( 1 \u2264 ri, ci \u2264 n) \u2014 the row number and the column number of the cell that initially contains the i- th monster. It is guaranteed that all ri are distinct numbers and all ci are distinct numbers.",
    "output": "Print the number of distinct square fragments of the original field that can form a new map.",
    "note": "",
    "topics": [
      "data structures",
      "divide and conquer"
    ],
    "id": "526F"
  },
  {
    "title": "Arthur and Walls",
    "url": "https://codeforces.com/problemset/problem/525/D",
    "history": "Finally it is a day when Arthur has enough money for buying an apartment. He found a great option close to the center of the city with a nice price. Plan of the apartment found by Arthur looks like a rectangle n \u00d7 m consisting of squares of size 1 \u00d7 1. Each of those squares contains either a wall ( such square is denoted by a symbol \" * \" on the plan) or a free space ( such square is denoted on the plan by a symbol \" . \" ) . Room in an apartment is a maximal connected area consisting of free squares. Squares are considered adjacent if they share a common side. The old Arthur dream is to live in an apartment where all rooms are rectangles. He asks you to calculate minimum number of walls you need to remove in order to achieve this goal. After removing a wall from a square it becomes a free square. While removing the walls it is possible that some rooms unite into a single one.",
    "input": "The first line of the input contains two integers n, m ( 1 \u2264 n, m \u2264 2000) denoting the size of the Arthur apartments. Following n lines each contain m symbols \u2014 the plan of the apartment. If the cell is denoted by a symbol \" * \" then it contains a wall. If the cell is denoted by a symbol \" . \" then it this cell is free from walls and also this cell is contained in some of the rooms.",
    "output": "Output n rows each consisting of m symbols that show how the Arthur apartment plan should look like after deleting the minimum number of walls in order to make each room ( maximum connected area free from walls) be a rectangle. If there are several possible answers, output any of them.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "data structures",
      "graphs",
      "greedy",
      "shortest paths"
    ],
    "id": "525D"
  },
  {
    "title": "And Yet Another Bracket Sequence",
    "url": "https://codeforces.com/problemset/problem/524/F",
    "history": "Polycarpus has a finite sequence of opening and closing brackets. In order not to fall asleep in a lecture, Polycarpus is having fun with his sequence. He is able to perform two operations: adding any bracket in any position ( in the beginning, the end, or between any two existing brackets) ; cyclic shift \u2014 moving the last bracket from the end of the sequence to the beginning. Polycarpus can apply any number of operations to his sequence and adding a cyclic shift in any order. As a result, he wants to get the correct bracket sequence of the minimum possible length. If there are several such sequences, Polycarpus is interested in the lexicographically smallest one. Help him find such a sequence. Acorrect bracket sequence is a sequence of opening and closing brackets, from which you can get a correct arithmetic expression by adding characters \" 1\" and \" + \" . Each opening bracket must correspond to a closed one. For example, the sequences \" ( ( ) ) ( ) \" , \" ( ) \" , \" ( ( ) ( ( ) ) ) \" are correct and \" ) ( \" , \" ( ( ) \" and \" ( ( ) ) ) ( \" are not. The sequence a1 a2. . . an is lexicographically smaller than sequence b1 b2. . . bn, if there is such number i from 1 to n, thatak = bk for 1 \u2264 k < i and ai < bi. Consider that \" ( \" < \" ) \" .",
    "input": "The first line contains Polycarpus' s sequence consisting of characters \" ( \" and \" ) \" . The length of a line is from 1 to 1 000 000.",
    "output": "Print a correct bracket sequence of the minimum length that Polycarpus can obtain by his operations. If there are multiple such sequences, print the lexicographically minimum one.",
    "note": "The sequence in the first example is already correct, but to get the lexicographically minimum answer, you need to perform four cyclic shift operations. In the second example you need to add a closing parenthesis between the second and third brackets and make a cyclic shift. You can first make the shift, and then add the bracket at the end.",
    "topics": [
      "data structures",
      "greedy",
      "hashing",
      "string suffix structures",
      "strings"
    ],
    "id": "524F"
  },
  {
    "title": "Rooks and Rectangles",
    "url": "https://codeforces.com/problemset/problem/524/E",
    "history": "Polycarpus has a chessboard of size n \u00d7 m, where k rooks are placed. Polycarpus hasn' t yet invented the rules of the game he will play. However, he has already allocated q rectangular areas of special strategic importance on the board, they must be protected well. According to Polycarpus, a rectangular area of \u200b\u200bthe board is well protected if all its vacant squares can be beaten by the rooks that stand on this area. The rooks on the rest of the board do not affect the area' s defense. The position of the rooks is fixed and cannot be changed. We remind you that the the rook beats the squares located on the same vertical or horizontal line with it, if there are no other pieces between the square and the rook. Help Polycarpus determine whether all strategically important areas are protected.",
    "input": "The first line contains four integers n, m, k and q ( 1 \u2264 n, m \u2264 100 000, 1 \u2264 k, q \u2264 200 000) \u2014 the sizes of the board, the number of rooks and the number of strategically important sites. We will consider that the cells of the board are numbered by integers from 1 to n horizontally and from 1 to m vertically. Next k lines contain pairs of integers \" x y\" , describing the positions of the rooks ( 1 \u2264 x \u2264 n, 1 \u2264 y \u2264 m) . It is guaranteed that all the rooks are in distinct squares. Next q lines describe the strategically important areas as groups of four integers \" x1 y1 x2 y2\" ( 1 \u2264 x1 \u2264 x2 \u2264 n, 1 \u2264 y1 \u2264 y2 \u2264 m) . The corresponding rectangle area consists of cells ( x, y) , for which x1 \u2264 x \u2264 x2, y1 \u2264 y \u2264 y2. Strategically important areas can intersect of coincide.",
    "output": "Print q lines. For each strategically important site print \" YES\" if it is well defended and \" NO\" otherwise.",
    "note": "Picture to the sample: For the last area the answer is \" NO\" , because cell ( 1, 2) cannot be hit by a rook.",
    "topics": [
      "data structures",
      "sortings"
    ],
    "id": "524E"
  },
  {
    "title": "Statistics of Recompressing Videos",
    "url": "https://codeforces.com/problemset/problem/523/D",
    "history": "A social network for dogs called DH ( DogHouse) has k special servers to recompress uploaded videos of cute cats. After each video is uploaded, it should be recompressed on one ( any) of the servers, and only after that it can be saved in the social network. We know that each server takes one second to recompress a one minute fragment. Thus, any server takes m seconds to recompress a m minute video. We know the time when each of the n videos were uploaded to the network ( in seconds starting from the moment all servers started working) . All videos appear at different moments of time and they are recompressed in the order they appear. If some video appeared at time s, then its recompressing can start at that very moment, immediately. Some videos can await recompressing when all the servers are busy. In this case, as soon as a server is available, it immediately starts recompressing another video. The videos that await recompressing go in a queue. If by the moment the videos started being recompressed some servers are available, then any of them starts recompressing the video. For each video find the moment it stops being recompressed.",
    "input": "The first line of the input contains integers n and k ( 1 \u2264 n, k \u2264 5\u00b7105) \u2014 the number of videos and servers, respectively. Next n lines contain the descriptions of the videos as pairs of integers si, mi ( 1 \u2264 si, mi \u2264 109) , where si is the time in seconds when the i- th video appeared and mi is its duration in minutes. It is guaranteed that all the si' s are distinct and the videos are given in the chronological order of upload, that is in the order of increasing si.",
    "output": "Print n numbers e1, e2, . . . , en, where ei is the time in seconds after the servers start working, when the i- th video will be recompressed.",
    "note": "",
    "topics": [
      "*special",
      "data structures",
      "implementation"
    ],
    "id": "523D"
  },
  {
    "title": "Closest Equals",
    "url": "https://codeforces.com/problemset/problem/522/D",
    "history": "You are given sequence a1, a2, . . . , an and m queries lj, rj ( 1 \u2264 lj \u2264 rj \u2264 n) . For each query you need to print the minimum distance between such pair of elements ax and ay ( x = \u0338 y) , that: both indexes of the elements lie within range [ lj, rj] , that is, lj \u2264 x, y \u2264 rj; the values of the elements are equal, that is ax = ay. The text above understands distance as | x - y| .",
    "input": "The first line of the input contains a pair of integers n, m ( 1 \u2264 n, m \u2264 5\u00b7105) \u2014 the length of the sequence and the number of queries, correspondingly. The second line contains the sequence of integers a1, a2, . . . , an ( - 109 \u2264 ai \u2264 109) . Next m lines contain the queries, one per line. Each query is given by a pair of numbers lj, rj ( 1 \u2264 lj \u2264 rj \u2264 n) \u2014 the indexes of the query range limits.",
    "output": "Print m integers \u2014 the answers to each query. If there is no valid match for some query, please print - 1 as an answer to this query.",
    "note": "",
    "topics": [
      "*special",
      "data structures"
    ],
    "id": "522D"
  },
  {
    "title": "Photo to Remember",
    "url": "https://codeforces.com/problemset/problem/522/B",
    "history": "One day n friends met at a party, they hadn' t seen each other for a long time and so they decided to make a group photo together. Simply speaking, the process of taking photos can be described as follows. On the photo, each photographed friend occupies a rectangle of pixels: the i- th of them occupies the rectangle of width wi pixels and height hi pixels. On the group photo everybody stands in a line, thus the minimum pixel size of the photo including all the photographed friends, is W \u00d7 H, where W is the total sum of all widths and H is the maximum height of all the photographed friends. As is usually the case, the friends made n photos \u2014 the j- th ( 1 \u2264 j \u2264 n) photo had everybody except for the j- th friend as he was the photographer. Print the minimum size of each made photo in pixels.",
    "input": "The first line contains integer n ( 2 \u2264 n \u2264 200 000) \u2014 the number of friends. Then n lines follow: the i- th line contains information about the i- th friend. The line contains a pair of integers wi, hi ( 1 \u2264 wi \u2264 10, 1 \u2264 hi \u2264 1000) \u2014 the width and height in pixels of the corresponding rectangle.",
    "output": "Print n space- separated numbers b1, b2, . . . , bn, where bi \u2014 the total number of pixels on the minimum photo containing all friends expect for the i- th one.",
    "note": "",
    "topics": [
      "*special",
      "data structures",
      "dp",
      "implementation"
    ],
    "id": "522B"
  },
  {
    "title": "A and B and Lecture Rooms",
    "url": "https://codeforces.com/problemset/problem/519/E",
    "history": "A and B are preparing themselves for programming contests. The University where A and B study is a set of rooms connected by corridors. Overall, the University has n rooms connected by n - 1 corridors so that you can get from any room to any other one by moving along the corridors. The rooms are numbered from 1 to n. Every day \u0410 and B write contests in some rooms of their university, and after each contest they gather together in the same room and discuss problems. A and B want the distance from the rooms where problems are discussed to the rooms where contests are written to be equal. The distance between two rooms is the number of edges on the shortest path between them. As they write contests in new rooms every day, they asked you to help them find the number of possible rooms to discuss problems for each of the following m days.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 105) \u2014 the number of rooms in the University. The next n - 1 lines describe the corridors. The i- th of these lines ( 1 \u2264 i \u2264 n - 1) contains two integers ai and bi ( 1 \u2264 ai, bi \u2264 n) , showing that the i- th corridor connects rooms ai and bi. The next line contains integer m ( 1 \u2264 m \u2264 105) \u2014 the number of queries. Next m lines describe the queries. The j- th of these lines ( 1 \u2264 j \u2264 m) contains two integers xj and yj ( 1 \u2264 xj, yj \u2264 n) that means that on the j- th day A will write the contest in the room xj, B will write in the room yj.",
    "output": "In the i- th ( 1 \u2264 i \u2264 m) line print the number of rooms that are equidistant from the rooms where A and B write contest on the i- th day.",
    "note": "in the first sample there is only one room at the same distance from rooms number 2 and 3 \u2014 room number 1.",
    "topics": [
      "binary search",
      "data structures",
      "dfs and similar",
      "dp",
      "trees"
    ],
    "id": "519E"
  },
  {
    "title": "A and B and Interesting Substrings",
    "url": "https://codeforces.com/problemset/problem/519/D",
    "history": "A and B are preparing themselves for programming contests. After several years of doing sports programming and solving many problems that require calculating all sorts of abstract objects, A and B also developed rather peculiar tastes. A likes lowercase letters of the Latin alphabet. He has assigned to each letter a number that shows how much he likes that letter ( he has assigned negative numbers to the letters he dislikes) . B likes substrings. He especially likes the ones that start and end with the same letter ( their length must exceed one) . Also, A and B have a string s. Now they are trying to find out how many substrings t of a string s are interesting to B ( that is, t starts and ends with the same letter and its length is larger than one) , and also the sum of values of all letters ( assigned by A) , except for the first and the last one is equal to zero. Naturally, A and B have quickly found the number of substrings t that are interesting to them. Can you do it?",
    "input": "The first line contains 26 integers xa, xb, . . . , xz ( - 105 \u2264 xi \u2264 105) \u2014 the value assigned to letters a, b, c, . . . , z respectively. The second line contains string s of length between 1 and 105 characters, consisting of Lating lowercase letters\u2014 the string for which you need to calculate the answer.",
    "output": "Print the answer to the problem.",
    "note": "In the first sample test strings satisfying the condition above are abca and bcab. In the second sample test strings satisfying the condition above are two occurences of aa.",
    "topics": [
      "data structures",
      "dp",
      "two pointers"
    ],
    "id": "519D"
  },
  {
    "title": "A and B and Compilation Errors",
    "url": "https://codeforces.com/problemset/problem/519/B",
    "history": "A and B are preparing themselves for programming contests. B loves to debug his code. But before he runs the solution and starts debugging, he has to first compile the code. Initially, the compiler displayed n compilation errors, each of them is represented as a positive integer. After some effort, B managed to fix some mistake and then another one mistake. However, despite the fact that B is sure that he corrected the two errors, he can not understand exactly what compilation errors disappeared \u2014 the compiler of the language which B uses shows errors in the new order every time! B is sure that unlike many other programming languages, compilation errors for his programming language do not depend on each other, that is, if you correct one error, the set of other error does not change. Can you help B find out exactly what two errors he corrected?",
    "input": "The first line of the input contains integer n ( 3 \u2264 n \u2264 105) \u2014 the initial number of compilation errors. The second line contains n space- separated integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) \u2014 the errors the compiler displayed for the first time. The third line contains n - 1 space- separated integers b1, b2, . . . , bn - 1 \u2014 the errors displayed at the second compilation. It is guaranteed that the sequence in the third line contains all numbers of the second string except for exactly one. The fourth line contains n - 2 space- separated integers \u04411, \u04412, . . . , \u0441n - 2 \u2014 the errors displayed at the third compilation. It is guaranteed that the sequence in the fourth line contains all numbers of the third line except for exactly one.",
    "output": "Print two numbers on a single line: the numbers of the compilation errors that disappeared after B made the first and the second correction, respectively.",
    "note": "In the first test sample B first corrects the error number 8, then the error number 123. In the second test sample B first corrects the error number 1, then the error number 3. Note that if there are multiple errors with the same number, B can correct only one of them in one step.",
    "topics": [
      "data structures",
      "implementation",
      "sortings"
    ],
    "id": "519B"
  },
  {
    "title": "Anya and Smartphone",
    "url": "https://codeforces.com/problemset/problem/518/C",
    "history": "Anya has bought a new smartphone that uses Berdroid operating system. The smartphone menu has exactly n applications, each application has its own icon. The icons are located on different screens, one screen contains k icons. The icons from the first to the k- th one are located on the first screen, from the ( k + 1) - th to the 2k- th ones are on the second screen and so on ( the last screen may be partially empty) . Initially the smartphone menu is showing the screen number 1. To launch the application with the icon located on the screen t, Anya needs to make the following gestures: first she scrolls to the required screen number t, by making t - 1 gestures ( if the icon is on the screen t) , and then make another gesture \u2014 press the icon of the required application exactly once to launch it. After the application is launched, the menu returns to the first screen. That is, to launch the next application you need to scroll through the menu again starting from the screen number 1. All applications are numbered from 1 to n. We know a certain order in which the icons of the applications are located in the menu at the beginning, but it changes as long as you use the operating system. Berdroid is intelligent system, so it changes the order of the icons by moving the more frequently used icons to the beginning of the list. Formally, right after an application is launched, Berdroid swaps the application icon and the icon of a preceding application ( that is, the icon of an application on the position that is smaller by one in the order of menu) . The preceding icon may possibly be located on the adjacent screen. The only exception is when the icon of the launched application already occupies the first place, in this case the icon arrangement doesn' t change. Anya has planned the order in which she will launch applications. How many gestures should Anya make to launch the applications in the planned order? Note that one application may be launched multiple times.",
    "input": "The first line of the input contains three numbers n, m, k ( 1 \u2264 n, m, k \u2264 105) \u2014 the number of applications that Anya has on her smartphone, the number of applications that will be launched and the number of icons that are located on the same screen. The next line contains n integers, permutation a1, a2, . . . , an \u2014 the initial order of icons from left to right in the menu ( from the first to the last one) , ai \u2014 is the id of the application, whose icon goes i- th in the menu. Each integer from 1 to n occurs exactly once among ai. The third line contains m integers b1, b2, . . . , bm( 1 \u2264 bi \u2264 n) \u2014 the ids of the launched applications in the planned order. One application may be launched multiple times.",
    "output": "Print a single number \u2014 the number of gestures that Anya needs to make to launch all the applications in the desired order.",
    "note": "In the first test the initial configuration looks like ( 123) ( 456) ( 78) , that is, the first screen contains icons of applications 1, 2, 3, the second screen contains icons 4, 5, 6, the third screen contains icons 7, 8. After application 7 is launched, we get the new arrangement of the icons \u2014 ( 123) ( 457) ( 68) . To launch it Anya makes 3 gestures. After application 8 is launched, we get configuration ( 123) ( 457) ( 86) . To launch it Anya makes 3 gestures. After application 1 is launched, the arrangement of icons in the menu doesn' t change. To launch it Anya makes 1 gesture. In total, Anya makes 7 gestures.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "implementation"
    ],
    "id": "518C"
  },
  {
    "title": "Drazil and Park",
    "url": "https://codeforces.com/problemset/problem/515/E",
    "history": "Drazil is a monkey. He lives in a circular park. There are n trees around the park. The distance between the i- th tree and ( i + 1) - st trees is di, the distance between the n- th tree and the first tree is dn. The height of the i- th tree is hi. Drazil starts each day with the morning run. The morning run consists of the following steps: Drazil chooses two different trees He starts with climbing up the first tree Then he climbs down the first tree, runs around the park ( in one of two possible directions) to the second tree, and climbs on it Then he finally climbs down the second tree. But there are always children playing around some consecutive trees. Drazil can' t stand children, so he can' t choose the trees close to children. He even can' t stay close to those trees. If the two trees Drazil chooses are x- th and y- th, we can estimate the energy the morning run takes to him as 2( hx + hy) + dist( x, y) . Since there are children on exactly one of two arcs connecting x and y, the distance dist( x, y) between trees x and y is uniquely defined. Now, you know that on the i- th day children play between ai- th tree and bi- th tree. More formally, if ai \u2264 bi, children play around the trees with indices from range [ ai, bi] , otherwise they play around the trees with indices from . Please help Drazil to determine which two trees he should choose in order to consume the most energy ( since he wants to become fit and cool- looking monkey) and report the resulting amount of energy for each day.",
    "input": "The first line contains two integer n and m ( 3 \u2264 n \u2264 105, 1 \u2264 m \u2264 105) , denoting number of trees and number of days, respectively. The second line contains n integers d1, d2, . . . , dn ( 1 \u2264 di \u2264 109) , the distances between consecutive trees. The third line contains n integers h1, h2, . . . , hn ( 1 \u2264 hi \u2264 109) , the heights of trees. Each of following m lines contains two integers ai and bi ( 1 \u2264 ai, bi \u2264 n) describing each new day. There are always at least two different trees Drazil can choose that are not affected by children.",
    "output": "For each day print the answer in a separate line.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": "515E"
  },
  {
    "title": "R2D2 and Droid Army",
    "url": "https://codeforces.com/problemset/problem/514/D",
    "history": "An army of n droids is lined up in one row. Each droid is described by m integers a1, a2, . . . , am, where ai is the number of details of the i- th type in this droid' s mechanism. R2- D2 wants to destroy the sequence of consecutive droids of maximum length. He has m weapons, the i- th weapon can affect all the droids in the army by destroying one detail of the i- th type ( if the droid doesn' t have details of this type, nothing happens to it) . A droid is considered to be destroyed when all of its details are destroyed. R2- D2 can make at most k shots. How many shots from the weapon of what type should R2- D2 make to destroy the sequence of consecutive droids of maximum length?",
    "input": "The first line contains three integers n, m, k ( 1 \u2264 n \u2264 105, 1 \u2264 m \u2264 5, 0 \u2264 k \u2264 109) \u2014 the number of droids, the number of detail types and the number of available shots, respectively. Next n lines follow describing the droids. Each line contains m integers a1, a2, . . . , am ( 0 \u2264 ai \u2264 108) , where ai is the number of details of the i- th type for the respective robot.",
    "output": "Print m space- separated integers, where the i- th number is the number of shots from the weapon of the i- th type that the robot should make to destroy the subsequence of consecutive droids of the maximum length. If there are multiple optimal solutions, print any of them. It is not necessary to make exactly k shots, the number of shots can be less.",
    "note": "In the first test the second, third and fourth droids will be destroyed. In the second test the first and second droids will be destroyed.",
    "topics": [
      "binary search",
      "data structures",
      "two pointers"
    ],
    "id": "514D"
  },
  {
    "title": "Watto and Mechanism",
    "url": "https://codeforces.com/problemset/problem/514/C",
    "history": "Watto, the owner of a spare parts store, has recently got an order for the mechanism that can process strings in a certain way. Initially the memory of the mechanism is filled with n strings. Then the mechanism should be able to process queries of the following type: \" Given string s, determine if the memory of the mechanism contains string t that consists of the same number of characters as s and differs from s in exactly one position\" . Watto has already compiled the mechanism, all that' s left is to write a program for it and check it on the data consisting of n initial lines and m queries. He decided to entrust this job to you.",
    "input": "The first line contains two non- negative numbers n and m ( 0 \u2264 n \u2264 3\u00b7105, 0 \u2264 m \u2264 3\u00b7105) \u2014 the number of the initial strings and the number of queries, respectively. Next follow n non- empty strings that are uploaded to the memory of the mechanism. Next follow m non- empty strings that are the queries to the mechanism. The total length of lines in the input doesn' t exceed 6\u00b7105. Each line consists only of letters ' a' , ' b' , ' c' .",
    "output": "For each query print on a single line \" YES\" ( without the quotes) , if the memory of the mechanism contains the required string, otherwise print \" NO\" ( without the quotes) .",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "hashing",
      "string suffix structures",
      "strings"
    ],
    "id": "514C"
  },
  {
    "title": "Han Solo and Lazer Gun",
    "url": "https://codeforces.com/problemset/problem/514/B",
    "history": "There are n Imperial stormtroopers on the field. The battle field is a plane with Cartesian coordinate system. Each stormtrooper is associated with his coordinates ( x, y) on this plane. Han Solo has the newest duplex lazer gun to fight these stormtroopers. It is situated at the point ( x0, y0) . In one shot it can can destroy all the stormtroopers, situated on some line that crosses point ( x0, y0) . Your task is to determine what minimum number of shots Han Solo needs to defeat all the stormtroopers. The gun is the newest invention, it shoots very quickly and even after a very large number of shots the stormtroopers don' t have enough time to realize what' s happening and change their location.",
    "input": "The first line contains three integers n, x0 \u0438 y0 ( 1 \u2264 n \u2264 1000, - 104 \u2264 x0, y0 \u2264 104) \u2014 the number of stormtroopers on the battle field and the coordinates of your gun. Next n lines contain two integers each xi, yi ( - 104 \u2264 xi, yi \u2264 104) \u2014 the coordinates of the stormtroopers on the battlefield. It is guaranteed that no stormtrooper stands at the same point with the gun. Multiple stormtroopers can stand at the same point.",
    "output": "Print a single integer \u2014 the minimum number of shots Han Solo needs to destroy all the stormtroopers.",
    "note": "Explanation to the first and second samples from the statement, respectively:",
    "topics": [
      "brute force",
      "data structures",
      "geometry",
      "implementation",
      "math"
    ],
    "id": "514B"
  },
  {
    "title": "Constrained Tree",
    "url": "https://codeforces.com/problemset/problem/513/D2",
    "history": "You need to find a binary tree of size n that satisfies a given set of c constraints. Suppose that the nodes of the unknown binary tree are labeled using a pre- order traversal starting with 1. For the i- th constraint you are given two labels, ai and bi and a direction, left or right. In case of left direction, bi is an element of the subtree rooted at ai' s left child. Similarly in the case of right direction bi is an element of the subtree rooted at ai' s right child.",
    "input": "The first line of input contains two integers n and c. The next c lines contain 2 integers ai, bi ( 1 \u2264 ai, bi \u2264 n) and either \" LEFT\" or \" RIGHT\" denoting whether b is in the subtree rooted at ai' s left child or in the subtree rooted at ai' s right child. The problem consists of multiple subproblems. The subproblems have different constraints on the input. You will get some score for the correct submission of the subproblem. The description of the subproblems follows. In subproblem D1 ( 9 points) , the constraints 1 \u2264 n \u2264 100, 1 \u2264 c \u2264 50 will hold. In subproblem D2 ( 8 points) , the constraints 1 \u2264 n \u2264 1000000, 1 \u2264 c \u2264 100000 will hold.",
    "output": "Output will be on a single line. Any binary tree that satisfies the constraints will be accepted. The tree' s nodes should be printed out as n space separated labels representing an in- order traversal, using the pre- order numbers as labels of vertices. If there are no trees that satisfy the constraints, print \" IMPOSSIBLE\" ( without quotes) .",
    "note": "Consider the first sample test. We need to find a tree with 3 nodes that satisfies the following two constraints. The node labeled 2 with pre- order traversal should be in the left subtree of the node labeled 1 with pre- order traversal; the node labeled 3 with pre- order traversal should be in the right subtree of the node labeled 1. There is only one tree with three nodes that satisfies these constraints and its in- order traversal is ( 2, 1, 3) . Pre- order is the \" root \u2013 left subtree \u2013 right subtree\" order. In- order is the \" left subtree \u2013 root \u2013 right subtree\" order. For other information regarding in- order and pre- order, see http: / / en. wikipedia. org/ wiki/ Tree_ traversal.",
    "topics": [
      "constructive algorithms",
      "data structures"
    ],
    "id": "513D2"
  },
  {
    "title": "Misha and Permutations Summation",
    "url": "https://codeforces.com/problemset/problem/501/D",
    "history": "Let' s define the sum of two permutations p and q of numbers 0, 1, . . . , ( n - 1) as permutation , where Perm( x) is the x- th lexicographically permutation of numbers 0, 1, . . . , ( n - 1) ( counting from zero) , and Ord( p) is the number of permutation p in the lexicographical order. For example, Perm( 0) = ( 0, 1, . . . , n - 2, n - 1) , Perm( n! - 1) = ( n - 1, n - 2, . . . , 1, 0) Misha has two permutations, p and q. Your task is to find their sum. Permutation a = ( a0, a1, . . . , an - 1) is called to be lexicographically smaller than permutation b = ( b0, b1, . . . , bn - 1) , if for some k following conditions hold: a0 = b0, a1 = b1, . . . , ak - 1 = bk - 1, ak < bk.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 200 000) . The second line contains n distinct integers from 0 to n - 1, separated by a space, forming permutation p. The third line contains n distinct integers from 0 to n - 1, separated by spaces, forming permutation q.",
    "output": "Print n distinct integers from 0 to n - 1, forming the sum of the given permutations. Separate the numbers by spaces.",
    "note": "Permutations of numbers from 0 to 1 in the lexicographical order: ( 0, 1) , ( 1, 0) . In the first sample Ord( p) = 0 and Ord( q) = 0, so the answer is . In the second sample Ord( p) = 0 and Ord( q) = 1, so the answer is . Permutations of numbers from 0 to 2 in the lexicographical order: ( 0, 1, 2) , ( 0, 2, 1) , ( 1, 0, 2) , ( 1, 2, 0) , ( 2, 0, 1) , ( 2, 1, 0) . In the third sample Ord( p) = 3 and Ord( q) = 5, so the answer is .",
    "topics": [
      "data structures"
    ],
    "id": "501D"
  },
  {
    "title": "Misha and Forest",
    "url": "https://codeforces.com/problemset/problem/501/C",
    "history": "Let' s define a forest as a non- directed acyclic graph ( also without loops and parallel edges) . One day Misha played with the forest consisting of n vertices. For each vertex v from 0 to n - 1 he wrote down two integers, degreev and sv, were the first integer is the number of vertices adjacent to vertex v, and the second integer is the XOR sum of the numbers of vertices adjacent to v ( if there were no adjacent vertices, he wrote down 0) . Next day Misha couldn' t remember what graph he initially had. Misha has values degreev and sv left, though. Help him find the number of edges and the edges of the initial graph. It is guaranteed that there exists a forest that corresponds to the numbers written by Misha.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 216) , the number of vertices in the graph. The i- th of the next lines contains numbers degreei and si ( 0 \u2264 degreei \u2264 n - 1, 0 \u2264 si < 216) , separated by a space.",
    "output": "In the first line print number m, the number of edges of the graph. Next print m lines, each containing two distinct numbers, a and b ( 0 \u2264 a \u2264 n - 1, 0 \u2264 b \u2264 n - 1) , corresponding to edge ( a, b) . Edges can be printed in any order; vertices of the edge can also be printed in any order.",
    "note": "The XOR sum of numbers is the result of bitwise adding numbers modulo 2. This operation exists in many modern programming languages. For example, in languages C+ + , Java and Python it is represented as \" ^ \" , and in Pascal \u2014 as \" xor\" .",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "sortings",
      "trees"
    ],
    "id": "501C"
  },
  {
    "title": "Misha and Changing Handles",
    "url": "https://codeforces.com/problemset/problem/501/B",
    "history": "Misha hacked the Codeforces site. Then he decided to let all the users change their handles. A user can now change his handle any number of times. But each new handle must not be equal to any handle that is already used or that was used at some point. Misha has a list of handle change requests. After completing the requests he wants to understand the relation between the original and the new handles of the users. Help him to do that.",
    "input": "The first line contains integer q ( 1 \u2264 q \u2264 1000) , the number of handle change requests. Next q lines contain the descriptions of the requests, one per line. Each query consists of two non- empty strings old and new, separated by a space. The strings consist of lowercase and uppercase Latin letters and digits. Strings old and new are distinct. The lengths of the strings do not exceed 20. The requests are given chronologically. In other words, by the moment of a query there is a single person with handle old, and handle new is not used and has not been used by anyone.",
    "output": "In the first line output the integer n \u2014 the number of users that changed their handles at least once. In the next n lines print the mapping between the old and the new handles of the users. Each of them must contain two strings, old and new, separated by a space, meaning that before the user had handle old, and after all the requests are completed, his handle is new. You may output lines in any order. Each user who changes the handle must occur exactly once in this description.",
    "note": "",
    "topics": [
      "data structures",
      "dsu",
      "strings"
    ],
    "id": "501B"
  },
  {
    "title": "New Year Domino",
    "url": "https://codeforces.com/problemset/problem/500/E",
    "history": "Celebrating the new year, many people post videos of falling dominoes; Here' s a list of them: https: / / www. youtube. com/ results? search_ query= New+ Years+ Dominos User ainta, who lives in a 2D world, is going to post a video as well. There are n dominoes on a 2D Cartesian plane. i- th domino ( 1 \u2264 i \u2264 n) can be represented as a line segment which is parallel to the y- axis and whose length is li. The lower point of the domino is on the x- axis. Let' s denote the x- coordinate of the i- th domino as pi. Dominoes are placed one after another, so p1 < p2 < . . . < pn - 1 < pn holds. User ainta wants to take a video of falling dominoes. To make dominoes fall, he can push a single domino to the right. Then, the domino will fall down drawing a circle- shaped orbit until the line segment totally overlaps with the x- axis. Also, if the s- th domino touches the t- th domino while falling down, the t- th domino will also fall down towards the right, following the same procedure above. Domino s touches domino t if and only if the segment representing s and t intersects. See the picture above. If he pushes the leftmost domino to the right, it falls down, touching dominoes ( A) , ( B) and ( C) . As a result, dominoes ( A) , ( B) , ( C) will also fall towards the right. However, domino ( D) won' t be affected by pushing the leftmost domino, but eventually it will fall because it is touched by domino ( C) for the first time. The picture above is an example of falling dominoes. Each red circle denotes a touch of two dominoes. User ainta has q plans of posting the video. j- th of them starts with pushing the xj- th domino, and lasts until the yj- th domino falls. But sometimes, it could be impossible to achieve such plan, so he has to lengthen some dominoes. It costs one dollar to increase the length of a single domino by 1. User ainta wants to know, for each plan, the minimum cost needed to achieve it. Plans are processed independently, i. e. if domino' s length is increased in some plan, it doesn' t affect its length in other plans. Set of dominos that will fall except xj- th domino and yj- th domino doesn' t matter, but the initial push should be on domino xj.",
    "input": "The first line contains an integer n ( 2 \u2264 n \u2264 2 \u00d7 105) \u2014 the number of dominoes. Next n lines describe the dominoes. The i- th line ( 1 \u2264 i \u2264 n) contains two space- separated integers pi, li ( 1 \u2264 pi, li \u2264 109) \u2014 the x- coordinate and the length of the i- th domino. It is guaranteed that p1 < p2 < . . . < pn - 1 < pn. The next line contains an integer q ( 1 \u2264 q \u2264 2 \u00d7 105) \u2014 the number of plans. Next q lines describe the plans. The j- th line ( 1 \u2264 j \u2264 q) contains two space- separated integers xj, yj ( 1 \u2264 xj < yj \u2264 n) . It means the j- th plan is, to push the xj- th domino, and shoot a video until the yj- th domino falls.",
    "output": "For each plan, print a line containing the minimum cost needed to achieve it. If no cost is needed, print 0.",
    "note": "Consider the example. The dominoes are set like the picture below. Let' s take a look at the 4th plan. To make the 6th domino fall by pushing the 2nd domino, the length of the 3rd domino ( whose x- coordinate is 4) should be increased by 1, and the 5th domino ( whose x- coordinate is 9) should be increased by 1 ( other option is to increase 4th domino instead of 5th also by 1) . Then, the dominoes will fall like in the picture below. Each cross denotes a touch between two dominoes.",
    "topics": [
      "data structures",
      "dp",
      "dsu"
    ],
    "id": "500E"
  },
  {
    "title": "Traffic Jams in the Land",
    "url": "https://codeforces.com/problemset/problem/498/D",
    "history": "Some country consists of ( n + 1) cities, located along a straight highway. Let' s number the cities with consecutive integers from 1 to n + 1 in the order they occur along the highway. Thus, the cities are connected by n segments of the highway, the i- th segment connects cities number i and i + 1. Every segment of the highway is associated with a positive integer ai > 1 \u2014 the period of traffic jams appearance on it. In order to get from city x to city y ( x < y) , some drivers use the following tactics. Initially the driver is in city x and the current time t equals zero. Until the driver arrives in city y, he perfors the following actions: if the current time t is a multiple of ax, then the segment of the highway number x is now having traffic problems and the driver stays in the current city for one unit of time ( formally speaking, we assign t = t + 1) ; if the current time t is not a multiple of ax, then the segment of the highway number x is now clear and that' s why the driver uses one unit of time to move to city x + 1 ( formally, we assign t = t + 1 and x = x + 1) . You are developing a new traffic control system. You want to consecutively process q queries of two types: determine the final value of time t after the ride from city x to city y ( x < y) assuming that we apply the tactics that is described above. Note that for each query t is being reset to 0. replace the period of traffic jams appearing on the segment number x by value y ( formally, assign ax = y) . Write a code that will effectively process the queries given above.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 105) \u2014 the number of highway segments that connect the n + 1 cities. The second line contains n integers a1, a2, . . . , an ( 2 \u2264 ai \u2264 6) \u2014 the periods of traffic jams appearance on segments of the highway. The next line contains a single integer q ( 1 \u2264 q \u2264 105) \u2014 the number of queries to process. The next q lines contain the descriptions of the queries in the format c, x, y ( c \u2014 the query type) . If c is character ' A' , then your task is to process a query of the first type. In this case the following constraints are satisfied: 1 \u2264 x < y \u2264 n + 1. If c is character ' C' , then you need to process a query of the second type. In such case, the following constraints are satisfied: 1 \u2264 x \u2264 n, 2 \u2264 y \u2264 6.",
    "output": "For each query of the first type output a single integer \u2014 the final value of time t after driving from city x to city y. Process the queries in the order in which they are given in the input.",
    "note": "",
    "topics": [
      "data structures",
      "dp",
      "number theory"
    ],
    "id": "498D"
  },
  {
    "title": "Sharti",
    "url": "https://codeforces.com/problemset/problem/494/E",
    "history": "During the last 24 hours Hamed and Malek spent all their time playing \" Sharti\" . Now they are too exhausted to finish the last round. So they asked you for help to determine the winner of this round. \" Sharti\" is played on a n \u00d7 n board with some of cells colored white and others colored black. The rows of the board are numbered from top to bottom using number 1 to n. Also the columns of the board are numbered from left to right using numbers 1 to n. The cell located at the intersection of i- th row and j- th column is denoted by ( i, j) . The players alternatively take turns. In each turn the player must choose a square with side- length at most k with its lower- right cell painted white. Then the colors of all the cells in this square are inversed ( white cells become black and vice- versa) . The player who cannot perform a move in his turn loses. You know Hamed and Malek are very clever and they would have played their best moves at each turn. Knowing this and the fact that Hamed takes the first turn, given the initial board as described in the input, you must determine which one of them will be the winner.",
    "input": "In this problem the initial board is specified as a set of m rectangles. All cells that lie inside at least one of these rectangles are colored white and the rest are colored black. In the first line of input three space- spereated integers n, m, k ( 1 \u2264 k \u2264 n \u2264 109, 1 \u2264 m \u2264 5\u00b7104) follow, denoting size of the board, number of rectangles and maximum size of the turn square during the game, respectively. In i- th line of the next m lines four space- seperated integers ai, bi, ci, di ( 1 \u2264 ai \u2264 ci \u2264 n, 1 \u2264 bi \u2264 di \u2264 n) are given meaning that i- th rectangle determining the initial board is a rectangle with upper- left cell at ( ai, bi) and lower- right cell at ( ci, di) .",
    "output": "If Hamed wins, print \" Hamed\" , otherwise print \" Malek\" ( without the quotes) .",
    "note": "",
    "topics": [
      "data structures",
      "games"
    ],
    "id": "494E"
  },
  {
    "title": "Birthday",
    "url": "https://codeforces.com/problemset/problem/494/D",
    "history": "Ali is Hamed' s little brother and tomorrow is his birthday. Hamed wants his brother to earn his gift so he gave him a hard programming problem and told him if he can successfully solve it, he' ll get him a brand new laptop. Ali is not yet a very talented programmer like Hamed and although he usually doesn' t cheat but this time is an exception. It' s about a brand new laptop. So he decided to secretly seek help from you. Please solve this problem for Ali. An n- vertex weighted rooted tree is given. Vertex number 1 is a root of the tree. We define d( u, v) as the sum of edges weights on the shortest path between vertices u and v. Specifically we define d( u, u) = 0. Also let' s define S( v) for each vertex v as a set containing all vertices u such that d( 1, u) = d( 1, v) + d( v, u) . Function f( u, v) is then defined using the following formula: The goal is to calculate f( u, v) for each of the q given pair of vertices. As the answer can be rather large it' s enough to print it modulo 109 + 7.",
    "input": "In the first line of input an integer n ( 1 \u2264 n \u2264 105) , number of vertices of the tree is given. In each of the next n - 1 lines three space- separated integers ai, bi, ci ( 1 \u2264 ai, bi \u2264 n, 1 \u2264 ci \u2264 109) are given indicating an edge between ai and bi with weight equal to ci. In the next line an integer q ( 1 \u2264 q \u2264 105) , number of vertex pairs, is given. In each of the next q lines two space- separated integers ui, vi ( 1 \u2264 ui, vi \u2264 n) are given meaning that you must calculate f( ui, vi) . It is guaranteed that the given edges form a tree.",
    "output": "Output q lines. In the i- th line print the value of f( ui, vi) modulo 109 + 7.",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "dp",
      "trees"
    ],
    "id": "494D"
  },
  {
    "title": "Vasya and Basketball",
    "url": "https://codeforces.com/problemset/problem/493/C",
    "history": "Vasya follows a basketball game and marks the distances from which each team makes a throw. He knows that each successful throw has value of either 2 or 3 points. A throw is worth 2 points if the distance it was made from doesn' t exceed some value of d meters, and a throw is worth 3 points if the distance is larger than d meters, where d is some non- negative integer. Vasya would like the advantage of the points scored by the first team ( the points of the first team minus the points of the second team) to be maximum. For that he can mentally choose the value of d. Help him to do that.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 2\u00b7105) \u2014 the number of throws of the first team. Then follow n integer numbers \u2014 the distances of throws ai ( 1 \u2264 ai \u2264 2\u00b7109) . Then follows number m ( 1 \u2264 m \u2264 2\u00b7105) \u2014 the number of the throws of the second team. Then follow m integer numbers \u2014 the distances of throws of bi ( 1 \u2264 bi \u2264 2\u00b7109) .",
    "output": "Print two numbers in the format a: b \u2014 the score that is possible considering the problem conditions where the result of subtraction a - b is maximum. If there are several such scores, find the one in which number a is maximum.",
    "note": "",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "implementation",
      "sortings",
      "two pointers"
    ],
    "id": "493C"
  },
  {
    "title": "Treeland Tour",
    "url": "https://codeforces.com/problemset/problem/490/F",
    "history": "The \" Road Accident\" band is planning an unprecedented tour around Treeland. The RA fans are looking forward to the event and making bets on how many concerts their favorite group will have. Treeland consists of n cities, some pairs of cities are connected by bidirectional roads. Overall the country has n - 1 roads. We know that it is possible to get to any city from any other one. The cities are numbered by integers from 1 to n. For every city we know its value ri \u2014 the number of people in it. We know that the band will travel along some path, having concerts in some cities along the path. The band' s path will not pass one city twice, each time they move to the city that hasn' t been previously visited. Thus, the musicians will travel along some path ( without visiting any city twice) and in some ( not necessarily all) cities along the way they will have concerts. The band plans to gather all the big stadiums and concert halls during the tour, so every time they will perform in a city which population is larger than the population of the previously visited with concert city. In other words, the sequence of population in the cities where the concerts will be held is strictly increasing. In a recent interview with the leader of the \" road accident\" band promised to the fans that the band will give concert in the largest possible number of cities! Thus the band will travel along some chain of cities of Treeland and have concerts in some of these cities, so that the population number will increase, and the number of concerts will be the largest possible. The fans of Treeland are frantically trying to figure out how many concerts the group will have in Treeland. Looks like they can' t manage without some help from a real programmer! Help the fans find the sought number of concerts.",
    "input": "The first line of the input contains integer n ( 2 \u2264 n \u2264 6000) \u2014 the number of cities in Treeland. The next line contains n integers r1, r2, . . . , rn ( 1 \u2264 ri \u2264 106) , where ri is the population of the i- th city. The next n - 1 lines contain the descriptions of the roads, one road per line. Each road is defined by a pair of integers aj, bj ( 1 \u2264 aj, bj \u2264 n) \u2014 the pair of the numbers of the cities that are connected by the j- th road. All numbers in the lines are separated by spaces.",
    "output": "Print the number of cities where the \" Road Accident\" band will have concerts.",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "dp",
      "trees"
    ],
    "id": "490F"
  },
  {
    "title": "Tourists",
    "url": "https://codeforces.com/problemset/problem/487/E",
    "history": "There are n cities in Cyberland, numbered from 1 to n, connected by m bidirectional roads. The j- th road connects city aj and bj. For tourists, souvenirs are sold in every city of Cyberland. In particular, city i sell it at a price of wi. Now there are q queries for you to handle. There are two types of queries: \" C a w\" : The price in city a is changed to w. \" A a b\" : Now a tourist will travel from city a to b. He will choose a route, he also doesn' t want to visit a city twice. He will buy souvenirs at the city where the souvenirs are the cheapest ( possibly exactly at city a or b) . You should output the minimum possible price that he can buy the souvenirs during his travel. More formally, we can define routes as follow: A route is a sequence of cities [ x1, x2, . . . , xk] , where k is a certain positive integer. For any 1 \u2264 i < j \u2264 k, xi = \u0338 xj. For any 1 \u2264 i < k, there is a road connecting xi and xi + 1. The minimum price of the route is min( wx1, wx2, . . . , wxk) . The required answer is the minimum value of the minimum prices of all valid routes from a to b.",
    "input": "The first line of input contains three integers n, m, q ( 1 \u2264 n, m, q \u2264 105) , separated by a single space. Next n lines contain integers wi ( 1 \u2264 wi \u2264 109) . Next m lines contain pairs of space- separated integers aj and bj ( 1 \u2264 aj, bj \u2264 n, aj = \u0338 bj) . It is guaranteed that there is at most one road connecting the same pair of cities. There is always at least one valid route between any two cities. Next q lines each describe a query. The format is \" C a w\" or \" A a b\" ( 1 \u2264 a, b \u2264 n, 1 \u2264 w \u2264 109) .",
    "output": "For each query of type \" A\" , output the corresponding answer.",
    "note": "For the second sample, an optimal routes are: From 2 to 3 it is [ 2, 3] . From 6 to 4 it is [ 6, 5, 1, 2, 4] . From 6 to 7 it is [ 6, 5, 7] . From 3 to 3 it is [ 3] .",
    "topics": [
      "data structures",
      "dfs and similar",
      "graphs",
      "trees"
    ],
    "id": "487E"
  },
  {
    "title": "Conveyor Belts",
    "url": "https://codeforces.com/problemset/problem/487/D",
    "history": "Automatic Bakery of Cyberland ( ABC) recently bought an n \u00d7 m rectangle table. To serve the diners, ABC placed seats around the table. The size of each seat is equal to a unit square, so there are 2( n + m) seats in total. ABC placed conveyor belts on each unit square on the table. There are three types of conveyor belts: \" ^ \" , \" < \" and \" > \" . A \" ^ \" belt can bring things upwards. \" < \" can bring leftwards and \" > \" can bring rightwards. Let' s number the rows with 1 to n from top to bottom, the columns with 1 to m from left to right. We consider the seats above and below the top of the table are rows 0 and n + 1 respectively. Also we define seats to the left of the table and to the right of the table to be column 0 and m + 1. Due to the conveyor belts direction restriction there are currently no way for a diner sitting in the row n + 1 to be served. Given the initial table, there will be q events in order. There are two types of events: \" A x y\" means, a piece of bread will appear at row x and column y ( we will denote such position as ( x, y) ) . The bread will follow the conveyor belt, until arriving at a seat of a diner. It is possible that the bread gets stuck in an infinite loop. Your task is to simulate the process, and output the final position of the bread, or determine that there will be an infinite loop. \" C x y c\" means that the type of the conveyor belt at ( x, y) is changed to c. Queries are performed separately meaning that even if the bread got stuck in an infinite loop, it won' t affect further queries.",
    "input": "The first line of input contains three integers n, m and q ( 1 \u2264 n \u2264 105, 1 \u2264 m \u2264 10, 1 \u2264 q \u2264 105) , separated by a space. Next n lines, each line contains m characters, describing the table. The characters can only be one of \" < ^ > \" . Next q lines, each line describes an event. The format is \" C x y c\" or \" A x y\" ( Consecutive elements are separated by a space) . It' s guaranteed that 1 \u2264 x \u2264 n, 1 \u2264 y \u2264 m. c is a character from the set \" < ^ > \" . There are at most 10000 queries of \" C\" type.",
    "output": "For each event of type \" A\" , output two integers tx, ty in a line, separated by a space, denoting the destination of ( x, y) is ( tx, ty) . If there is an infinite loop, you should output tx = ty = - 1.",
    "note": "For the first sample: If the bread goes from ( 2, 1) , it will go out of the table at ( 1, 3) . After changing the conveyor belt of ( 1, 2) to \" < \" , when the bread goes from ( 2, 1) again, it will get stuck at \" > < \" , so output is ( - 1, - 1) .",
    "topics": [
      "data structures"
    ],
    "id": "487D"
  },
  {
    "title": "Strip",
    "url": "https://codeforces.com/problemset/problem/487/B",
    "history": "Alexandra has a paper strip with n numbers on it. Let' s call them ai from left to right. Now Alexandra wants to split it into some pieces ( possibly 1) . For each piece of strip, it must satisfy: Each piece should contain at least l numbers. The difference between the maximal and the minimal number on the piece should be at most s. Please help Alexandra to find the minimal number of pieces meeting the condition above.",
    "input": "The first line contains three space- separated integers n, s, l ( 1 \u2264 n \u2264 105, 0 \u2264 s \u2264 109, 1 \u2264 l \u2264 105) . The second line contains n integers ai separated by spaces ( - 109 \u2264 ai \u2264 109) .",
    "output": "Output the minimal number of strip pieces. If there are no ways to split the strip, output - 1.",
    "note": "For the first sample, we can split the strip into 3 pieces: [ 1, 3, 1] , [ 2, 4] , [ 1, 2] . For the second sample, we can' t let 1 and 100 be on the same piece, so no solution exists.",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "two pointers"
    ],
    "id": "487B"
  },
  {
    "title": "LIS of Sequence",
    "url": "https://codeforces.com/problemset/problem/486/E",
    "history": "The next \" Data Structures and Algorithms\" lesson will be about Longest Increasing Subsequence ( LIS for short) of a sequence. For better understanding, Nam decided to learn it a few days before the lesson. Nam created a sequence a consisting of n ( 1 \u2264 n \u2264 105) elements a1, a2, . . . , an ( 1 \u2264 ai \u2264 105) . A subsequence ai1, ai2, . . . , aik where 1 \u2264 i1 < i2 < . . . < ik \u2264 n is called increasing if ai1 < ai2 < ai3 < . . . < aik. An increasing subsequence is called longest if it has maximum length among all increasing subsequences. Nam realizes that a sequence may have several longest increasing subsequences. Hence, he divides all indexes i ( 1 \u2264 i \u2264 n) , into three groups: group of all i such that ai belongs to no longest increasing subsequences. group of all i such that ai belongs to at least one but not every longest increasing subsequence. group of all i such that ai belongs to every longest increasing subsequence. Since the number of longest increasing subsequences of a may be very large, categorizing process is very difficult. Your task is to help him finish this job.",
    "input": "The first line contains the single integer n ( 1 \u2264 n \u2264 105) denoting the number of elements of sequence a. The second line contains n space- separated integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 105) .",
    "output": "Print a string consisting of n characters. i- th character should be ' 1' , ' 2' or ' 3' depending on which group among listed above index i belongs to.",
    "note": "In the second sample, sequence a consists of 4 elements: a1, a2, a3, a4 = 1, 3, 2, 5. Sequence a has exactly 2 longest increasing subsequences of length 3, they are a1, a2, a4 = 1, 3, 5 and a1, a3, a4 = 1, 2, 5. In the third sample, sequence a consists of 4 elements: a1, a2, a3, a4 = 1, 5, 2, 3. Sequence a have exactly 1 longest increasing subsequence of length 3, that is a1, a3, a4 = 1, 2, 3.",
    "topics": [
      "data structures",
      "dp",
      "greedy",
      "hashing",
      "math"
    ],
    "id": "486E"
  },
  {
    "title": "Sign on Fence",
    "url": "https://codeforces.com/problemset/problem/484/E",
    "history": "Bizon the Champion has recently finished painting his wood fence. The fence consists of a sequence of n panels of 1 meter width and of arbitrary height. The i- th panel' s height is hi meters. The adjacent planks follow without a gap between them. After Bizon painted the fence he decided to put a \" for sale\" sign on it. The sign will be drawn on a rectangular piece of paper and placed on the fence so that the sides of the sign are parallel to the fence panels and are also aligned with the edges of some panels. Bizon the Champion introduced the following constraints for the sign position: The width of the sign should be exactly w meters. The sign must fit into the segment of the fence from the l- th to the r- th panels, inclusive ( also, it can' t exceed the fence' s bound in vertical direction) . The sign will be really pretty, So Bizon the Champion wants the sign' s height to be as large as possible. You are given the description of the fence and several queries for placing sign. For each query print the maximum possible height of the sign that can be placed on the corresponding segment of the fence with the given fixed width of the sign.",
    "input": "The first line of the input contains integer n \u2014 the number of panels in the fence ( 1 \u2264 n \u2264 105) . The second line contains n space- separated integers hi, \u2014 the heights of the panels ( 1 \u2264 hi \u2264 109) . The third line contains an integer m \u2014 the number of the queries ( 1 \u2264 m \u2264 105) . The next m lines contain the descriptions of the queries, each query is represented by three integers l, r and w ( 1 \u2264 l \u2264 r \u2264 n, 1 \u2264 w \u2264 r - l + 1) \u2014 the segment of the fence and the width of the sign respectively.",
    "output": "For each query print the answer on a separate line \u2014 the maximum height of the sign that can be put in the corresponding segment of the fence with all the conditions being satisfied.",
    "note": "The fence described in the sample looks as follows: The possible positions for the signs for all queries are given below. The optimal position of the sign for the first query. The optimal position of the sign for the second query. The optimal position of the sign for the third query.",
    "topics": [
      "binary search",
      "constructive algorithms",
      "data structures"
    ],
    "id": "484E"
  },
  {
    "title": "Kindergarten",
    "url": "https://codeforces.com/problemset/problem/484/D",
    "history": "In a kindergarten, the children are being divided into groups. The teacher put the children in a line and associated each child with his or her integer charisma value. Each child should go to exactly one group. Each group should be a nonempty segment of consecutive children of a line. A group' s sociability is the maximum difference of charisma of two children in the group ( in particular, if the group consists of one child, its sociability equals a zero) . The teacher wants to divide the children into some number of groups in such way that the total sociability of the groups is maximum. Help him find this value.",
    "input": "The first line contains integer n \u2014 the number of children in the line ( 1 \u2264 n \u2264 106) . The second line contains n integers ai \u2014 the charisma of the i- th child ( - 109 \u2264 ai \u2264 109) .",
    "output": "Print the maximum possible total sociability of all groups.",
    "note": "In the first test sample one of the possible variants of an division is following: the first three children form a group with sociability 2, and the two remaining children form a group with sociability 1. In the second test sample any division leads to the same result, the sociability will be equal to 0 in each group.",
    "topics": [
      "data structures",
      "dp",
      "greedy"
    ],
    "id": "484D"
  },
  {
    "title": "ELCA",
    "url": "https://codeforces.com/problemset/problem/482/E",
    "history": "You have a root tree containing n vertexes. Let' s number the tree vertexes with integers from 1 to n. The tree root is in the vertex 1. Each vertex ( except fot the tree root) v has a direct ancestor pv. Also each vertex v has its integer value sv. Your task is to perform following queries: P v u ( u = \u0338 v) . If u isn' t in subtree of v, you must perform the assignment pv = u. Otherwise you must perform assignment pu = v. Note that after this query the graph continues to be a tree consisting of n vertexes. V v t. Perform assignment sv = t. Your task is following. Before starting performing queries and after each query you have to calculate expected value written on the lowest common ancestor of two equiprobably selected vertices i and j. Here lowest common ancestor of i and j is the deepest vertex that lies on the both of the path from the root to vertex i and the path from the root to vertex j. Please note that the vertices i and j can be the same ( in this case their lowest common ancestor coincides with them) .",
    "input": "The first line of the input contains integer n ( 2 \u2264 n \u2264 5\u00b7104) \u2014 the number of the tree vertexes. The second line contains n - 1 integer p2, p3, . . . , pn ( 1 \u2264 pi \u2264 n) \u2014 the description of the tree edges. It is guaranteed that those numbers form a tree. The third line contains n integers \u2014 s1, s2, . . . sn ( 0 \u2264 si \u2264 106) \u2014 the values written on each vertex of the tree. The next line contains integer q ( 1 \u2264 q \u2264 5\u00b7104) \u2014 the number of queries. Each of the following q lines contains the description of the query in the format described in the statement. It is guaranteed that query arguments u and v lie between 1 and n. It is guaranteed that argument t in the queries of type V meets limits 0 \u2264 t \u2264 106.",
    "output": "Print q + 1 number \u2014 the corresponding expected values. Your answer will be considered correct if its absolute or relative error doesn' t exceed 10 - 9.",
    "note": "Note that in the query P v u if u lies in subtree of v you must perform assignment pu = v. An example of such case is the last query in the sample.",
    "topics": [
      "data structures",
      "trees"
    ],
    "id": "482E"
  },
  {
    "title": "Interesting Array",
    "url": "https://codeforces.com/problemset/problem/482/B",
    "history": "We' ll call an array of n non- negative integers a[ 1] , a[ 2] , . . . , a[ n] interesting, if it meets m constraints. The i- th of the m constraints consists of three integers li, ri, qi ( 1 \u2264 li \u2264 ri \u2264 n) meaning that value should be equal to qi. Your task is to find any interesting array of n elements or state that such array doesn' t exist. Expression x y means the bitwise AND of numbers x and y. In programming languages C+ + , Java and Python this operation is represented as \" \" , in Pascal \u2014 as \" and\" .",
    "input": "The first line contains two integers n, m ( 1 \u2264 n \u2264 105, 1 \u2264 m \u2264 105) \u2014 the number of elements in the array and the number of limits. Each of the next m lines contains three integers li, ri, qi ( 1 \u2264 li \u2264 ri \u2264 n, 0 \u2264 qi < 230) describing the i- th limit.",
    "output": "If the interesting array exists, in the first line print \" YES\" ( without the quotes) and in the second line print n integers a[ 1] , a[ 2] , . . . , a[ n] ( 0 \u2264 a[ i] < 230) decribing the interesting array. If there are multiple answers, print any of them. If the interesting array doesn' t exist, print \" NO\" ( without the quotes) in the single line.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "data structures",
      "trees"
    ],
    "id": "482B"
  },
  {
    "title": "Parking Lot",
    "url": "https://codeforces.com/problemset/problem/480/E",
    "history": "Petya' s been bored at work and he is killing the time by watching the parking lot at the office. The parking lot looks from above like an n \u00d7 m table ( a cell of the table corresponds to a single parking spot) . Some spots in the parking lot are taken, others are empty. Petya watches cars riding into the parking lot one by one. After a car settles down at the parking spot, Petya amuzes himself by counting what maximum square of empty spots ( i. e. a square subtable) can be seen on the parking lot if we look at it from above. Also, he takes notes of the square' s size ( side length) in his notebook. You task is: given the state of the parking lot at the initial moment of time and the information about where the arriving cars park, restore what Petya wrote in his notebook. It is midday, so nobody leaves the lot.",
    "input": "The first line contains three integers n, m and k \u2014 the sizes of the parking lot and the number of arriving cars after Petya started his watch ( 1 \u2264 n, m, k \u2264 2000) . Each of the following n lines contains m characters ' X' and ' . ' , where ' X' means a taken spot and ' . ' means an empty spot. Each of the next k lines contains a pair of integers xi, yi \u2014 the number of row and column of the spot the corresponding car takes ( 1 \u2264 xi \u2264 n, 1 \u2264 yi \u2264 m) . It is guaranteed that this place was empty. You can assume that a car enters a parking lot only after the previous car successfully finds a spot.",
    "output": "Print k integers \u2014 the length of the side of the maximum square of empty spots after the corresponding car has entered the parking lot.",
    "note": "",
    "topics": [
      "data structures",
      "divide and conquer"
    ],
    "id": "480E"
  },
  {
    "title": "Dreamoon and Notepad",
    "url": "https://codeforces.com/problemset/problem/477/E",
    "history": "Dreamoon has just created a document of hard problems using notepad. exe. The document consists of n lines of text, ai denotes the length of the i- th line. He now wants to know what is the fastest way to move the cursor around because the document is really long. Let ( r, c) be a current cursor position, where r is row number and c is position of cursor in the row. We have 1 \u2264 r \u2264 n and 0 \u2264 c \u2264 ar. We can use following six operations in notepad. exe to move our cursor assuming the current cursor position is at ( r, c) : up key: the new cursor position ( nr, nc) = ( max( r - 1, 1) , min( anr, c) ) down key: the new cursor position ( nr, nc) = ( min( r + 1, n) , min( anr, c) ) left key: the new cursor position ( nr, nc) = ( r, max( 0, c - 1) ) right key: the new cursor position ( nr, nc) = ( r, min( anr, c + 1) ) HOME key: the new cursor position ( nr, nc) = ( r, 0) END key: the new cursor position ( nr, nc) = ( r, ar) You' re given the document description ( n and sequence ai) and q queries from Dreamoon. Each query asks what minimal number of key presses is needed to move the cursor from ( r1, c1) to ( r2, c2) .",
    "input": "The first line contains an integer n( 1 \u2264 n \u2264 400, 000) \u2014 the number of lines of text. The second line contains n integers a1, a2, . . . , an( 1 \u2264 ai \u2264 108) . The third line contains an integer q( 1 \u2264 q \u2264 400, 000) . Each of the next q lines contains four integers r1, c1, r2, c2 representing a query ( 1 \u2264 r1, r2 \u2264 n, 0 \u2264 c1 \u2264 ar1, 0 \u2264 c2 \u2264 ar2) .",
    "output": "For each query print the result of the query.",
    "note": "In the first sample, the first query can be solved with keys: HOME, right. The second query can be solved with keys: down, down, down, END, down. The third query can be solved with keys: down, END, down. The fourth query can be solved with keys: END, down.",
    "topics": [
      "data structures"
    ],
    "id": "477E"
  },
  {
    "title": "Meta-universe",
    "url": "https://codeforces.com/problemset/problem/475/F",
    "history": "Consider infinite grid of unit cells. Some of those cells are planets. Meta- universe M = p1, p2, . . . , pk is a set of planets. Suppose there is an infinite row or column with following two properties: 1) it doesn' t contain any planet pi of meta- universe M on it; 2) there are planets of M located on both sides from this row or column. In this case we can turn the meta- universe M into two non- empty meta- universes M1 and M2 containing planets that are located on respective sides of this row or column. A meta- universe which can' t be split using operation above is called a universe. We perform such operations until all meta- universes turn to universes. Given positions of the planets in the original meta- universe, find the number of universes that are result of described process. It can be proved that each universe is uniquely identified not depending from order of splitting.",
    "input": "The first line of input contains an integer n, ( 1 \u2264 n \u2264 105) , denoting the number of planets in the meta- universe. The next n lines each contain integers xi and yi, ( - 109 \u2264 xi, yi \u2264 109) , denoting the coordinates of the i- th planet. All planets are located in different cells.",
    "output": "Print the number of resulting universes.",
    "note": "The following figure describes the first test case:",
    "topics": [
      "data structures"
    ],
    "id": "475F"
  },
  {
    "title": "CGCDSSQ",
    "url": "https://codeforces.com/problemset/problem/475/D",
    "history": "Given a sequence of integers a1, . . . , an and q queries x1, . . . , xq on it. For each query xi you have to count the number of pairs ( l, r) such that 1 \u2264 l \u2264 r \u2264 n and gcd( al, al + 1, . . . , ar) = xi. is a greatest common divisor of v1, v2, . . . , vn, that is equal to a largest positive integer that divides all vi.",
    "input": "The first line of the input contains integer n, ( 1 \u2264 n \u2264 105) , denoting the length of the sequence. The next line contains n space separated integers a1, . . . , an, ( 1 \u2264 ai \u2264 109) . The third line of the input contains integer q, ( 1 \u2264 q \u2264 3 \u00d7 105) , denoting the number of queries. Then follows q lines, each contain an integer xi, ( 1 \u2264 xi \u2264 109) .",
    "output": "For each query print the result in a separate line.",
    "note": "",
    "topics": [
      "brute force",
      "data structures",
      "math"
    ],
    "id": "475D"
  },
  {
    "title": "Ant colony",
    "url": "https://codeforces.com/problemset/problem/474/F",
    "history": "Mole is hungry again. He found one ant colony, consisting of n ants, ordered in a row. Each ant i ( 1 \u2264 i \u2264 n) has a strength si. In order to make his dinner more interesting, Mole organizes a version of \u00abHunger Games\u00bb for the ants. He chooses two numbers l and r ( 1 \u2264 l \u2264 r \u2264 n) and each pair of ants with indices between l and r ( inclusively) will fight. When two ants i and j fight, ant i gets one battle point only if si divides sj ( also, ant j gets one battle point only if sj divides si) . After all fights have been finished, Mole makes the ranking. An ant i, with vi battle points obtained, is going to be freed only if vi = r - l, or in other words only if it took a point in every fight it participated. After that, Mole eats the rest of the ants. Note that there can be many ants freed or even none. In order to choose the best sequence, Mole gives you t segments [ li, ri] and asks for each of them how many ants is he going to eat if those ants fight.",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 105) , the size of the ant colony. The second line contains n integers s1, s2, . . . , sn ( 1 \u2264 si \u2264 109) , the strengths of the ants. The third line contains one integer t ( 1 \u2264 t \u2264 105) , the number of test cases. Each of the next t lines contains two integers li and ri ( 1 \u2264 li \u2264 ri \u2264 n) , describing one query.",
    "output": "Print to the standard output t lines. The i- th line contains number of ants that Mole eats from the segment [ li, ri] .",
    "note": "In the first test battle points for each ant are v = [ 4, 0, 2, 0, 2] , so ant number 1 is freed. Mole eats the ants 2, 3, 4, 5. In the second test case battle points are v = [ 0, 2, 0, 2] , so no ant is freed and all of them are eaten by Mole. In the third test case battle points are v = [ 2, 0, 2] , so ants number 3 and 5 are freed. Mole eats only the ant 4. In the fourth test case battle points are v = [ 0, 1] , so ant number 5 is freed. Mole eats the ant 4.",
    "topics": [
      "data structures",
      "math",
      "number theory"
    ],
    "id": "474F"
  },
  {
    "title": "Pillars",
    "url": "https://codeforces.com/problemset/problem/474/E",
    "history": "Marmot found a row with n pillars. The i- th pillar has the height of hi meters. Starting from one pillar i1, Marmot wants to jump on the pillars i2, . . . , ik. ( 1 \u2264 i1 < i2 < . . . < ik \u2264 n) . From a pillar i Marmot can jump on a pillar j only if i < j and | hi - hj| \u2265 d, where | x| is the absolute value of the number x. Now Marmot is asking you find out a jump sequence with maximal length and print it.",
    "input": "The first line contains two integers n and d ( 1 \u2264 n \u2264 105, 0 \u2264 d \u2264 109) . The second line contains n numbers h1, h2, . . . , hn ( 1 \u2264 hi \u2264 1015) .",
    "output": "The first line should contain one integer k, the maximal length of a jump sequence. The second line should contain k integers i1, i2, . . . , ik ( 1 \u2264 i1 < i2 < . . . < ik \u2264 n) , representing the pillars' indices from the maximal length jump sequence. If there is more than one maximal length jump sequence, print any.",
    "note": "In the first example Marmot chooses the pillars 1, 2, 3, 5 with the heights 1, 3, 6, 4. Another jump sequence of length 4 is 1, 2, 4, 5.",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "sortings",
      "trees"
    ],
    "id": "474E"
  },
  {
    "title": "Design Tutorial: Increase the Constraints",
    "url": "https://codeforces.com/problemset/problem/472/G",
    "history": "There is a simple way to create hard tasks: take one simple problem as the query, and try to find an algorithm that can solve it faster than bruteforce. This kind of tasks usually appears in OI contest, and usually involves data structures. Let' s try to create a task, for example, we take the \" Hamming distance problem\" : for two binary strings s and t with the same length, the Hamming distance between them is the number of positions at which the corresponding symbols are different. For example, the Hamming distance between \" 00111\" and \" 10101\" is 2 ( the different symbols are marked with bold) . We use the Hamming distance problem as a query in the following way: you are given two strings a and b and several queries. Each query will be: what is the Hamming distance between two strings ap1ap1 + 1. . . ap1 + len - 1 and bp2bp2 + 1. . . bp2 + len - 1? Note, that in this problem the strings are zero- based, that is s = s0s1. . . s| s| - 1.",
    "input": "The first line contains a string a ( 1 \u2264 | a| \u2264 200000) . The second line contains a string b ( 1 \u2264 | b| \u2264 200000) . Each character of both strings is either \" 0\" or \" 1\" . The third line contains an integer q ( 1 \u2264 q \u2264 400000) \u2014 the number of queries. Each of the following q lines contains three integers: p1, p2 and len ( 0 \u2264 p1 \u2264 | a| - len; 0 \u2264 p2 \u2264 | b| - len) , these numbers denote the parameters of the current query.",
    "output": "Output q integers \u2014 the answers for the queries.",
    "note": "",
    "topics": [
      "bitmasks",
      "data structures",
      "fft"
    ],
    "id": "472G"
  },
  {
    "title": "MUH and Lots and Lots of Segments",
    "url": "https://codeforces.com/problemset/problem/471/E",
    "history": "Polar bears Menshykov and Uslada from the zoo of St. Petersburg and elephant Horace from the zoo of Kiev decided to do some painting. As they were trying to create their first masterpiece, they made a draft on a piece of paper. The draft consists of n segments. Each segment was either horizontal or vertical. Now the friends want to simplify the draft by deleting some segments or parts of segments so that the final masterpiece meets three conditions: Horace wants to be able to paint the whole picture in one stroke: by putting the brush on the paper and never taking it off until the picture is ready. The brush can paint the same place multiple times. That' s why all the remaining segments must form a single connected shape. Menshykov wants the resulting shape to be simple. He defines a simple shape as a shape that doesn' t contain any cycles. Initially all the segment on the draft have integer startpoint and endpoint coordinates. Uslada doesn' t like real coordinates and she wants this condition to be fulfilled after all the changes. As in other parts the draft is already beautiful, the friends decided to delete such parts of the draft that the sum of lengths of the remaining segments is as large as possible. Your task is to count this maximum sum of the lengths that remain after all the extra segments are removed.",
    "input": "The first line of the input contains integer n ( 1 \u2264 n \u2264 2\u00b7105) \u2014 the number of segments on the draft. The next n lines contain four integers each: x1, y1, x2, y2 ( - 109 \u2264 x1 \u2264 x2 \u2264 109; - 109 \u2264 y1 \u2264 y2 \u2264 109) \u2014 the two startpoint and the two endpoint coordinates of a segment. All segments are non- degenerative and either are strictly horizontal or strictly vertical. No two horizontal segments share common points. No two vertical segments share common points.",
    "output": "Print a single integer \u2014 the maximum sum of lengths for the remaining segments.",
    "note": "The shapes that you can get in the two given samples are: In the first sample you need to delete any segment as the two segments together do not form a single connected shape. In the second sample the initial segments form a cycle, there are four ways to break the cycle: delete the first, second or fourth segment altogether or delete the middle of the third segment. The last way is shown on the picture.",
    "topics": [
      "data structures",
      "dsu"
    ],
    "id": "471E"
  },
  {
    "title": "Alex and Complicated Task",
    "url": "https://codeforces.com/problemset/problem/467/E",
    "history": "After you have read all the problems, probably, you think Alex is genius person. That' s true! One day he came up with the following task. Given a sequence of integer numbers a1, a2, . . . , an. You are to find a longest sequence b1, b2, . . . , b4m, that satisfies the following conditions: b4k + 1 = b4k + 3 for all valid integer k; b4k + 2 = b4k + 4 for all valid integer k; sequence b is subsequence of a ( not necessarily contiguous subsequence) . And finally. . . Alex had given this complicated task to George, and George gave it to you. Help George to cope with the task.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 5\u00b7105) . The next line contains n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) .",
    "output": "In the first line print a single integer 4m \u2014 the maximal possible length of required sequence b. In the second line print 4m integers b1, b2, . . . , b4m, that is required sequence. If there are multiple optimal answers you may print any of them.",
    "note": "",
    "topics": [
      "data structures",
      "dp",
      "greedy"
    ],
    "id": "467E"
  },
  {
    "title": "Number of Ways",
    "url": "https://codeforces.com/problemset/problem/466/C",
    "history": "You' ve got array a[ 1] , a[ 2] , . . . , a[ n] , consisting of n integers. Count the number of ways to split all the elements of the array into three contiguous parts so that the sum of elements in each part is the same. More formally, you need to find the number of such pairs of indices i, j ( 2 \u2264 i \u2264 j \u2264 n - 1) , that .",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 5\u00b7105) , showing how many numbers are in the array. The second line contains n integers a[ 1] , a[ 2] , . . . , a[ n] ( | a[ i] | \u2264 109) \u2014 the elements of array a.",
    "output": "Print a single integer \u2014 the number of ways to split the array into three parts with the same sum.",
    "note": "",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "dp",
      "two pointers"
    ],
    "id": "466C"
  },
  {
    "title": "The Classic Problem",
    "url": "https://codeforces.com/problemset/problem/464/E",
    "history": "You are given a weighted undirected graph on n vertices and m edges. Find the shortest path from vertex s to vertex t or else state that such path doesn' t exist.",
    "input": "The first line of the input contains two space- separated integers \u2014 n and m ( 1 \u2264 n \u2264 105; 0 \u2264 m \u2264 105) . Next m lines contain the description of the graph edges. The i- th line contains three space- separated integers \u2014 ui, vi, xi ( 1 \u2264 ui, vi \u2264 n; 0 \u2264 xi \u2264 105) . That means that vertices with numbers ui and vi are connected by edge of length 2xi ( 2 to the power of xi) . The last line contains two space- separated integers \u2014 the numbers of vertices s and t. The vertices are numbered from 1 to n. The graph contains no multiple edges and self- loops.",
    "output": "In the first line print the remainder after dividing the length of the shortest path by 1000000007 ( 109 + 7) if the path exists, and - 1 if the path doesn' t exist. If the path exists print in the second line integer k \u2014 the number of vertices in the shortest path from vertex s to vertex t; in the third line print k space- separated integers \u2014 the vertices of the shortest path in the visiting order. The first vertex should be vertex s, the last vertex should be vertex t. If there are multiple shortest paths, print any of them.",
    "note": "A path from vertex s to vertex t is a sequence v0, . . . , vk, such that v0 = s, vk = t, and for any i from 0 to k - 1 vertices vi and vi + 1 are connected by an edge. The length of the path is the sum of weights of edges between vi and vi + 1 for all i from 0 to k - 1. The shortest path from s to t is the path which length is minimum among all possible paths from s to t.",
    "topics": [
      "data structures",
      "graphs",
      "shortest paths"
    ],
    "id": "464E"
  },
  {
    "title": "Appleman and a Sheet of Paper",
    "url": "https://codeforces.com/problemset/problem/461/C",
    "history": "Appleman has a very big sheet of paper. This sheet has a form of rectangle with dimensions 1 \u00d7 n. Your task is help Appleman with folding of such a sheet. Actually, you need to perform q queries. Each query will have one of the following types: Fold the sheet of paper at position pi. After this query the leftmost part of the paper with dimensions 1 \u00d7 pi must be above the rightmost part of the paper with dimensions 1 \u00d7 ( [ current width of sheet] - pi) . Count what is the total width of the paper pieces, if we will make two described later cuts and consider only the pieces between the cuts. We will make one cut at distance li from the left border of the current sheet of paper and the other at distance ri from the left border of the current sheet of paper. Please look at the explanation of the first test example for better understanding of the problem.",
    "input": "The first line contains two integers: n and q ( 1 \u2264 n \u2264 105; 1 \u2264 q \u2264 105) \u2014 the width of the paper and the number of queries. Each of the following q lines contains one of the described queries in the following format: \" 1 pi\" ( 1 \u2264 pi < [ current width of sheet] ) \u2014 the first type query. \" 2 li ri\" ( 0 \u2264 li < ri \u2264 [ current width of sheet] ) \u2014 the second type query.",
    "output": "For each query of the second type, output the answer.",
    "note": "The pictures below show the shapes of the paper during the queries of the first example: After the first fold operation the sheet has width equal to 4, after the second one the width of the sheet equals to 2.",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "461C"
  },
  {
    "title": "Present",
    "url": "https://codeforces.com/problemset/problem/460/C",
    "history": "Little beaver is a beginner programmer, so informatics is his favorite subject. Soon his informatics teacher is going to have a birthday and the beaver has decided to prepare a present for her. He planted n flowers in a row on his windowsill and started waiting for them to grow. However, after some time the beaver noticed that the flowers stopped growing. The beaver thinks it is bad manners to present little flowers. So he decided to come up with some solutions. There are m days left to the birthday. The height of the i- th flower ( assume that the flowers in the row are numbered from 1 to n from left to right) is equal to ai at the moment. At each of the remaining m days the beaver can take a special watering and water w contiguous flowers ( he can do that only once at a day) . At that each watered flower grows by one height unit on that day. The beaver wants the height of the smallest flower be as large as possible in the end. What maximum height of the smallest flower can he get?",
    "input": "The first line contains space- separated integers n, m and w ( 1 \u2264 w \u2264 n \u2264 105; 1 \u2264 m \u2264 105) . The second line contains space- separated integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) .",
    "output": "Print a single integer \u2014 the maximum final height of the smallest flower.",
    "note": "In the first sample beaver can water the last 3 flowers at the first day. On the next day he may not to water flowers at all. In the end he will get the following heights: [ 2, 2, 2, 3, 2, 2] . The smallest flower has height equal to 2. It' s impossible to get height 3 in this test.",
    "topics": [
      "binary search",
      "data structures",
      "greedy"
    ],
    "id": "460C"
  },
  {
    "title": "Pashmak and Parmida's problem",
    "url": "https://codeforces.com/problemset/problem/459/D",
    "history": "Parmida is a clever girl and she wants to participate in Olympiads this year. Of course she wants her partner to be clever too ( although he' s not) ! Parmida has prepared the following test problem for Pashmak. There is a sequence a that consists of n integers a1, a2, . . . , an. Let' s denote f( l, r, x) the number of indices k such that: l \u2264 k \u2264 r and ak = x. His task is to calculate the number of pairs of indicies i, j ( 1 \u2264 i < j \u2264 n) such that f( 1, i, ai) > f( j, n, aj) . Help Pashmak with the test.",
    "input": "The first line of the input contains an integer n ( 1 \u2264 n \u2264 106) . The second line contains n space- separated integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) .",
    "output": "Print a single integer \u2014 the answer to the problem.",
    "note": "",
    "topics": [
      "data structures",
      "divide and conquer",
      "sortings"
    ],
    "id": "459D"
  },
  {
    "title": "Function",
    "url": "https://codeforces.com/problemset/problem/455/E",
    "history": "Serega and Fedor play with functions. One day they came across a very interesting function. It looks like that: f( 1, j) = a[ j] , 1 \u2264 j \u2264 n. f( i, j) = min( f( i - 1, j) , f( i - 1, j - 1) ) + a[ j] , 2 \u2264 i \u2264 n, i \u2264 j \u2264 n. Here a is an integer array of length n. Serega and Fedya want to know what values this function takes at some points. But they don' t want to calculate the values manually. So they ask you to help them.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 105) \u2014 the length of array a. The next line contains n integers: a[ 1] , a[ 2] , . . . , a[ n] ( 0 \u2264 a[ i] \u2264 104) . The next line contains integer m ( 1 \u2264 m \u2264 105) \u2014 the number of queries. Each of the next m lines contains two integers: xi, yi ( 1 \u2264 xi \u2264 yi \u2264 n) . Each line means that Fedor and Serega want to know the value of f( xi, yi) .",
    "output": "Print m lines \u2014 the answers to the guys' queries.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": "455E"
  },
  {
    "title": "Serega and Fun",
    "url": "https://codeforces.com/problemset/problem/455/D",
    "history": "Serega loves fun. However, everyone has fun in the unique manner. Serega has fun by solving query problems. One day Fedor came up with such a problem. You are given an array a consisting of n positive integers and queries to it. The queries can be of two types: Make a unit cyclic shift to the right on the segment from l to r ( both borders inclusive) . That is rearrange elements of the array in the following manner: a[ l] , a[ l + 1] , . . . , a[ r - 1] , a[ r] \u2192 a[ r] , a[ l] , a[ l + 1] , . . . , a[ r - 1] . Count how many numbers equal to k are on the segment from l to r ( both borders inclusive) . Fedor hurried to see Serega enjoy the problem and Serega solved it really quickly. Let' s see, can you solve it?",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 105) \u2014 the number of elements of the array. The second line contains n integers a[ 1] , a[ 2] , . . . , a[ n] ( 1 \u2264 a[ i] \u2264 n) . The third line contains a single integer q ( 1 \u2264 q \u2264 105) \u2014 the number of queries. The next q lines contain the queries. As you need to respond to the queries online, the queries will be encoded. A query of the first type will be given in format: 1 l' i r' i. A query of the second type will be given in format: 2 l' i r' i k' i. All the number in input are integer. They satisfy the constraints: 1 \u2264 l' i, r' i, k' i \u2264 n. To decode the queries from the data given in input, you need to perform the following transformations: li = ( ( l' i + lastans - 1) mod n) + 1; ri = ( ( r' i + lastans - 1) mod n) + 1; ki = ( ( k' i + lastans - 1) mod n) + 1. Where lastans is the last reply to the query of the 2- nd type ( initially, lastans = 0) . If after transformation li is greater than ri, you must swap these values.",
    "output": "For each query of the 2- nd type print the answer on a single line.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": "455D"
  },
  {
    "title": "Little Pony and Lord Tirek",
    "url": "https://codeforces.com/problemset/problem/453/E",
    "history": "Lord Tirek is a centaur and the main antagonist in the season four finale episodes in the series \" My Little Pony: Friendship Is Magic\" . In \" Twilight' s Kingdom\" ( Part 1) , Tirek escapes from Tartarus and drains magic from ponies to grow stronger. The core skill of Tirek is called Absorb Mana. It takes all mana from a magic creature and gives them to the caster. Now to simplify the problem, assume you have n ponies ( numbered from 1 to n) . Each pony has three attributes: si : amount of mana that the pony has at time 0; mi : maximum mana that the pony can have; ri : mana regeneration per unit time. Lord Tirek will do m instructions, each of them can be described with three integers: ti, li, ri. The instruction means that at time ti, Tirek will use Absorb Mana on ponies with numbers from li to ri ( both borders inclusive) . We' ll give you all the m instructions in order, count how much mana Tirek absorbs for each instruction.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 105) \u2014 the number of ponies. Each of the next n lines contains three integers si, mi, ri ( 0 \u2264 si \u2264 mi \u2264 105; 0 \u2264 ri \u2264 105) , describing a pony. The next line contains an integer m ( 1 \u2264 m \u2264 105) \u2014 the number of instructions. Each of the next m lines contains three integers ti, li, ri ( 0 \u2264 ti \u2264 109; 1 \u2264 li \u2264 ri \u2264 n) , describing an instruction of Lord Tirek. The instructions are given in strictly increasing order of ti ( all ti are distinct) .",
    "output": "For each instruction, output a single line which contains a single integer, the total mana absorbed in this instruction.",
    "note": "Every pony starts with zero mana. For the first instruction, each pony has 5 mana, so you get 25 mana in total and each pony has 0 mana after the first instruction. For the second instruction, pony 3 has 14 mana and other ponies have mana equal to their mi.",
    "topics": [
      "data structures"
    ],
    "id": "453E"
  },
  {
    "title": "Permutation",
    "url": "https://codeforces.com/problemset/problem/452/F",
    "history": "You are given a permutation of numbers from 1 to n. Determine whether there' s a pair of integers a, b ( 1 \u2264 a, b \u2264 n; a = \u0338 b) such that the element ( note, that it is usual division, not integer one) is between a and b in this permutation.",
    "input": "First line consists of a single integer n ( 1 \u2264 n \u2264 300000) \u2014 the size of permutation. Second line contains n integers \u2014 the permutation itself.",
    "output": "Print \" YES\" , if such a pair exists, \" NO\" otherwise ( in both cases without quotes, the answer is case insensitive) .",
    "note": "In the second example 2 is between 1 and 3. Additionally 4 is between 3 and 5.",
    "topics": [
      "data structures",
      "divide and conquer",
      "hashing"
    ],
    "id": "452F"
  },
  {
    "title": "Three strings",
    "url": "https://codeforces.com/problemset/problem/452/E",
    "history": "You are given three strings ( s1, s2, s3) . For each integer l ( 1 \u2264 l \u2264 min( | s1| , | s2| , | s3| ) you need to find how many triples ( i1, i2, i3) exist such that three strings sk[ ik. . . ik + l - 1] ( k = 1, 2, 3) are pairwise equal. Print all found numbers modulo 1000000007 ( 109 + 7) . See notes if you are not sure about some of the denotions used in the statement.",
    "input": "First three lines contain three non- empty input strings. The sum of lengths of all strings is no more than 3\u00b7105. All strings consist only of lowercase English letters.",
    "output": "You need to output min( | s1| , | s2| , | s3| ) numbers separated by spaces \u2014 answers for the problem modulo 1000000007 ( 109 + 7) .",
    "note": "Consider a string t = t1t2. . . t| t| , where ti denotes the i- th character of the string, and | t| denotes the length of the string. Then t[ i. . . j] ( 1 \u2264 i \u2264 j \u2264 | t| ) represents the string titi + 1. . . tj ( substring of t from position i to position j inclusive) .",
    "topics": [
      "data structures",
      "dsu",
      "string suffix structures",
      "strings"
    ],
    "id": "452E"
  },
  {
    "title": "DZY Loves Fibonacci Numbers",
    "url": "https://codeforces.com/problemset/problem/446/C",
    "history": "In mathematical terms, the sequence Fn of Fibonacci numbers is defined by the recurrence relation F1 = 1; F2 = 1; Fn = Fn - 1 + Fn - 2 ( n > 2) . DZY loves Fibonacci numbers very much. Today DZY gives you an array consisting of n integers: a1, a2, . . . , an. Moreover, there are m queries, each query has one of the two types: Format of the query \" 1 l r\" . In reply to the query, you need to add Fi - l + 1 to each element ai, where l \u2264 i \u2264 r. Format of the query \" 2 l r\" . In reply to the query you should output the value of modulo 1000000009 ( 109 + 9) . Help DZY reply to all the queries.",
    "input": "The first line of the input contains two integers n and m ( 1 \u2264 n, m \u2264 300000) . The second line contains n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) \u2014 initial array a. Then, m lines follow. A single line describes a single query in the format given in the statement. It is guaranteed that for each query inequality 1 \u2264 l \u2264 r \u2264 n holds.",
    "output": "For each query of the second type, print the value of the sum on a single line.",
    "note": "After the first query, a = [ 2, 3, 5, 7] . For the second query, sum = 2 + 3 + 5 + 7 = 17. After the third query, a = [ 2, 4, 6, 9] . For the fourth query, sum = 2 + 4 + 6 = 12.",
    "topics": [
      "data structures",
      "math",
      "number theory"
    ],
    "id": "446C"
  },
  {
    "title": "DZY Loves Modification",
    "url": "https://codeforces.com/problemset/problem/446/B",
    "history": "As we know, DZY loves playing games. One day DZY decided to play with a n \u00d7 m matrix. To be more precise, he decided to modify the matrix with exactly k operations. Each modification is one of the following: Pick some row of the matrix and decrease each element of the row by p. This operation brings to DZY the value of pleasure equal to the sum of elements of the row before the decreasing. Pick some column of the matrix and decrease each element of the column by p. This operation brings to DZY the value of pleasure equal to the sum of elements of the column before the decreasing. DZY wants to know: what is the largest total value of pleasure he could get after performing exactly k modifications? Please, help him to calculate this value.",
    "input": "The first line contains four space- separated integers n, m, k and p ( 1 \u2264 n, m \u2264 103; 1 \u2264 k \u2264 106; 1 \u2264 p \u2264 100) . Then n lines follow. Each of them contains m integers representing aij ( 1 \u2264 aij \u2264 103) \u2014 the elements of the current row of the matrix.",
    "output": "Output a single integer \u2014 the maximum possible total pleasure value DZY could get.",
    "note": "For the first sample test, we can modify: column 2, row 2. After that the matrix becomes: 1 10 0For the second sample test, we can modify: column 2, row 2, row 1, column 1, column 2. After that the matrix becomes: - 3 - 3- 2 - 2",
    "topics": [
      "brute force",
      "data structures",
      "greedy"
    ],
    "id": "446B"
  },
  {
    "title": "DZY Loves Colors",
    "url": "https://codeforces.com/problemset/problem/444/C",
    "history": "DZY loves colors, and he enjoys painting. On a colorful day, DZY gets a colorful ribbon, which consists of n units ( they are numbered from 1 to n from left to right) . The color of the i- th unit of the ribbon is i at first. It is colorful enough, but we still consider that the colorfulness of each unit is 0 at first. DZY loves painting, we know. He takes up a paintbrush with color x and uses it to draw a line on the ribbon. In such a case some contiguous units are painted. Imagine that the color of unit i currently is y. When it is painted by this paintbrush, the color of the unit becomes x, and the colorfulness of the unit increases by | x - y| . DZY wants to perform m operations, each operation can be one of the following: Paint all the units with numbers between l and r ( both inclusive) with color x. Ask the sum of colorfulness of the units between l and r ( both inclusive) . Can you help DZY?",
    "input": "The first line contains two space- separated integers n, m ( 1 \u2264 n, m \u2264 105) . Each of the next m lines begins with a integer type ( 1 \u2264 type \u2264 2) , which represents the type of this operation. If type = 1, there will be 3 more integers l, r, x ( 1 \u2264 l \u2264 r \u2264 n; 1 \u2264 x \u2264 108) in this line, describing an operation 1. If type = 2, there will be 2 more integers l, r ( 1 \u2264 l \u2264 r \u2264 n) in this line, describing an operation 2.",
    "output": "For each operation 2, print a line containing the answer \u2014 sum of colorfulness.",
    "note": "In the first sample, the color of each unit is initially [ 1, 2, 3] , and the colorfulness is [ 0, 0, 0] . After the first operation, colors become [ 4, 4, 3] , colorfulness become [ 3, 2, 0] . After the second operation, colors become [ 4, 5, 5] , colorfulness become [ 3, 3, 2] . So the answer to the only operation of type 2 is 8.",
    "topics": [
      "data structures"
    ],
    "id": "444C"
  },
  {
    "title": "Adam and Tree",
    "url": "https://codeforces.com/problemset/problem/442/D",
    "history": "When Adam gets a rooted tree ( connected non- directed graph without cycles) , he immediately starts coloring it. More formally, he assigns a color to each edge of the tree so that it meets the following two conditions: There is no vertex that has more than two incident edges painted the same color. For any two vertexes that have incident edges painted the same color ( say, c) , the path between them consists of the edges of the color c. Not all tree paintings are equally good for Adam. Let' s consider the path from some vertex to the root. Let' s call the number of distinct colors on this path the cost of the vertex. The cost of the tree' s coloring will be the maximum cost among all the vertexes. Help Adam determine the minimum possible cost of painting the tree. Initially, Adam' s tree consists of a single vertex that has number one and is the root. In one move Adam adds a new vertex to the already existing one, the new vertex gets the number equal to the minimum positive available integer. After each operation you need to calculate the minimum cost of coloring the resulting tree.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 106) \u2014 the number of times a new vertex is added. The second line contains n numbers pi ( 1 \u2264 pi \u2264 i) \u2014 the numbers of the vertexes to which we add another vertex.",
    "output": "Print n integers \u2014 the minimum costs of the tree painting after each addition.",
    "note": "The figure below shows one of the possible variants to paint a tree from the sample at the last moment. The cost of the vertexes with numbers 11 and 12 equals 3.",
    "topics": [
      "data structures",
      "trees"
    ],
    "id": "442D"
  },
  {
    "title": "Artem and Array ",
    "url": "https://codeforces.com/problemset/problem/442/C",
    "history": "Artem has an array of n positive integers. Artem decided to play with it. The game consists of n moves. Each move goes like this. Artem chooses some element of the array and removes it. For that, he gets min( a, b) points, where a and b are numbers that were adjacent with the removed number. If the number doesn' t have an adjacent number to the left or right, Artem doesn' t get any points. After the element is removed, the two parts of the array glue together resulting in the new array that Artem continues playing with. Borya wondered what maximum total number of points Artem can get as he plays this game.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 5\u00b7105) \u2014 the number of elements in the array. The next line contains n integers ai ( 1 \u2264 ai \u2264 106) \u2014 the values of the array elements.",
    "output": "In a single line print a single integer \u2014 the maximum number of points Artem can get.",
    "note": "",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "442C"
  },
  {
    "title": "The Child and Sequence",
    "url": "https://codeforces.com/problemset/problem/438/D",
    "history": "At the children' s day, the child came to Picks' s house, and messed his house up. Picks was angry at him. A lot of important things were lost, in particular the favorite sequence of Picks. Fortunately, Picks remembers how to repair the sequence. Initially he should create an integer array a[ 1] , a[ 2] , . . . , a[ n] . Then he should perform a sequence of m operations. An operation can be one of the following: Print operation l, r. Picks should write down the value of . Modulo operation l, r, x. Picks should perform assignment a[ i] = a[ i] mod x for each i ( l \u2264 i \u2264 r) . Set operation k, x. Picks should set the value of a[ k] to x ( in other words perform an assignment a[ k] = x) . Can you help Picks to perform the whole sequence of operations?",
    "input": "The first line of input contains two integer: n, m ( 1 \u2264 n, m \u2264 105) . The second line contains n integers, separated by space: a[ 1] , a[ 2] , . . . , a[ n] ( 1 \u2264 a[ i] \u2264 109) \u2014 initial value of array elements. Each of the next m lines begins with a number type . If type = 1, there will be two integers more in the line: l, r ( 1 \u2264 l \u2264 r \u2264 n) , which correspond the operation 1. If type = 2, there will be three integers more in the line: l, r, x ( 1 \u2264 l \u2264 r \u2264 n; 1 \u2264 x \u2264 109) , which correspond the operation 2. If type = 3, there will be two integers more in the line: k, x ( 1 \u2264 k \u2264 n; 1 \u2264 x \u2264 109) , which correspond the operation 3.",
    "output": "For each operation 1, please print a line containing the answer. Notice that the answer may exceed the 32- bit integer.",
    "note": "Consider the first testcase: At first, a = 1, 2, 3, 4, 5. After operation 1, a = 1, 2, 3, 0, 1. After operation 2, a = 1, 2, 5, 0, 1. At operation 3, 2 + 5 + 0 + 1 = 8. After operation 4, a = 1, 2, 2, 0, 1. At operation 5, 1 + 2 + 2 = 5.",
    "topics": [
      "data structures",
      "math"
    ],
    "id": "438D"
  },
  {
    "title": "Banners",
    "url": "https://codeforces.com/problemset/problem/436/F",
    "history": "All modern mobile applications are divided into free and paid. Even a single application developers often release two versions: a paid version without ads and a free version with ads. Suppose that a paid version of the app costs p ( p is an integer) rubles, and the free version of the application contains c ad banners. Each user can be described by two integers: ai \u2014 the number of rubles this user is willing to pay for the paid version of the application, and bi \u2014 the number of banners he is willing to tolerate in the free version. The behavior of each member shall be considered strictly deterministic: if for user i, value bi is at least c, then he uses the free version, otherwise, if value ai is at least p, then he buys the paid version without advertising, otherwise the user simply does not use the application. Each user of the free version brings the profit of c \u00d7 w rubles. Each user of the paid version brings the profit of p rubles. Your task is to help the application developers to select the optimal parameters p and c. Namely, knowing all the characteristics of users, for each value of c from 0 to ( max bi) + 1 you need to determine the maximum profit from the application and the corresponding parameter p.",
    "input": "The first line contains two integers n and w ( 1 \u2264 n \u2264 105; 1 \u2264 w \u2264 105) \u2014 the number of users and the profit from a single banner. Each of the next n lines contains two integers ai and bi ( 0 \u2264 ai, bi \u2264 105) \u2014 the characteristics of the i- th user.",
    "output": "Print ( max bi) + 2 lines, in the i- th line print two integers: pay \u2014 the maximum gained profit at c = i - 1, p ( 0 \u2264 p \u2264 109) \u2014 the corresponding optimal app cost. If there are multiple optimal solutions, print any of them.",
    "note": "",
    "topics": [
      "brute force",
      "data structures",
      "dp"
    ],
    "id": "436F"
  },
  {
    "title": "Cardboard Box",
    "url": "https://codeforces.com/problemset/problem/436/E",
    "history": "Everyone who has played Cut the Rope knows full well how the gameplay is organized. All levels in the game are divided into boxes. Initially only one box with some levels is available. Player should complete levels to earn stars, collecting stars opens new box with levels. Imagine that you are playing Cut the Rope for the first time. Currently you have only the levels of the first box ( by the way, it is called \" Cardboard Box\" ) . Each level is characterized by two integers: ai \u2014 how long it takes to complete the level for one star, bi \u2014 how long it takes to complete the level for two stars ( ai < bi) . You want to open the next box as quickly as possible. So, you need to earn at least w stars. How do make it happen? Note that the level can be passed only once: either for one star or for two. You do not necessarily need to pass all the levels.",
    "input": "The first line contains two integers n and w ( 1 \u2264 n \u2264 3\u00b7105; 1 \u2264 w \u2264 2n) \u2014 the number of levels in the first box and the number of stars you need to open another box. Each of the following n lines contains two integers ai and bi ( 1 \u2264 ai < bi \u2264 109) \u2014 the attributes of the i- th level.",
    "output": "In the first line print integer t \u2014 the minimum time you need to open the next box. In the next line, print n digits without spaces \u2014 the description of the optimal scenario: if you need to pass the i- th level for one star, the i- th digit should equal 1; if you need to pass the i- th level for two stars, the i- th digit should equal 2; if you do not need to pass the i- th level at all, the i- th digit should equal 0.",
    "note": "In the first test sample, answer 21 is also assumed correct.",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "436E"
  },
  {
    "title": "Chemistry Experiment",
    "url": "https://codeforces.com/problemset/problem/431/E",
    "history": "One day two students, Grisha and Diana, found themselves in the university chemistry lab. In the lab the students found n test tubes with mercury numbered from 1 to n and decided to conduct an experiment. The experiment consists of q steps. On each step, one of the following actions occurs: Diana pours all the contents from tube number pi and then pours there exactly xi liters of mercury. Let' s consider all the ways to add vi liters of water into the tubes; for each way let' s count the volume of liquid ( water and mercury) in the tube with water with maximum amount of liquid; finally let' s find the minimum among counted maximums. That is the number the students want to count. At that, the students don' t actually pour the mercury. They perform calculations without changing the contents of the tubes. Unfortunately, the calculations proved to be too complex and the students asked you to help them. Help them conduct the described experiment.",
    "input": "The first line contains two integers n and q ( 1 \u2264 n, q \u2264 105) \u2014 the number of tubes ans the number of experiment steps. The next line contains n space- separated integers: h1, h2, . . . , hn ( 0 \u2264 hi \u2264 109) , where hi is the volume of mercury in the \u0456- th tube at the beginning of the experiment. The next q lines contain the game actions in the following format: A line of form \" 1 pi xi\" means an action of the first type ( 1 \u2264 pi \u2264 n; 0 \u2264 xi \u2264 109) . A line of form \" 2 vi\" means an action of the second type ( 1 \u2264 vi \u2264 1015) . It is guaranteed that there is at least one action of the second type. It is guaranteed that all numbers that describe the experiment are integers.",
    "output": "For each action of the second type print the calculated value. The answer will be considered correct if its relative or absolute error doesn' t exceed 10 - 4.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "ternary search"
    ],
    "id": "431E"
  },
  {
    "title": "Tricky Function",
    "url": "https://codeforces.com/problemset/problem/429/D",
    "history": "Iahub and Sorin are the best competitive programmers in their town. However, they can' t both qualify to an important contest. The selection will be made with the help of a single problem. Blatnatalag, a friend of Iahub, managed to get hold of the problem before the contest. Because he wants to make sure Iahub will be the one qualified, he tells Iahub the following task. You' re given an ( 1- based) array a with n elements. Let' s define function f( i, j) ( 1 \u2264 i, j \u2264 n) as ( i - j) 2 + g( i, j) 2. Function g is calculated by the following pseudo- code: int g( int i, int j) int sum = 0; for ( int k = min( i, j) + 1; k < = max( i, j) ; k = k + 1) sum = sum + a[ k] ; return sum; Find a value mini = \u0338 j f( i, j) . Probably by now Iahub already figured out the solution to this problem. Can you?",
    "input": "The first line of input contains a single integer n ( 2 \u2264 n \u2264 100000) . Next line contains n integers a[ 1] , a[ 2] , . . . , a[ n] ( - 104 \u2264 a[ i] \u2264 104) .",
    "output": "Output a single integer \u2014 the value of mini = \u0338 j f( i, j) .",
    "note": "",
    "topics": [
      "data structures",
      "divide and conquer",
      "geometry"
    ],
    "id": "429D"
  },
  {
    "title": "Prison Transfer",
    "url": "https://codeforces.com/problemset/problem/427/B",
    "history": "The prison of your city has n prisoners. As the prison can' t accommodate all of them, the city mayor has decided to transfer c of the prisoners to a prison located in another city. For this reason, he made the n prisoners to stand in a line, with a number written on their chests. The number is the severity of the crime he/ she has committed. The greater the number, the more severe his/ her crime was. Then, the mayor told you to choose the c prisoners, who will be transferred to the other prison. He also imposed two conditions. They are, The chosen c prisoners has to form a contiguous segment of prisoners. Any of the chosen prisoner' s crime level should not be greater then t. Because, that will make the prisoner a severe criminal and the mayor doesn' t want to take the risk of his running away during the transfer. Find the number of ways you can choose the c prisoners.",
    "input": "The first line of input will contain three space separated integers n ( 1 \u2264 n \u2264 2\u00b7105) , t ( 0 \u2264 t \u2264 109) and c ( 1 \u2264 c \u2264 n) . The next line will contain n space separated integers, the ith integer is the severity ith prisoner' s crime. The value of crime severities will be non- negative and will not exceed 109.",
    "output": "Print a single integer \u2014 the number of ways you can choose the c prisoners.",
    "note": "",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "427B"
  },
  {
    "title": "Sereja and Squares",
    "url": "https://codeforces.com/problemset/problem/425/D",
    "history": "Sereja has painted n distinct points on the plane. The coordinates of each point are integers. Now he is wondering: how many squares are there with sides parallel to the coordinate axes and with points painted in all its four vertexes? Help him, calculate this number.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 105) . Each of the next n lines contains two integers xi, yi ( 0 \u2264 xi, yi \u2264 105) , the integers represent the coordinates of the i- th point. It is guaranteed that all the given points are distinct.",
    "output": "In a single line print the required number of squares.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "hashing"
    ],
    "id": "425D"
  },
  {
    "title": "Sereja and Two Sequences",
    "url": "https://codeforces.com/problemset/problem/425/C",
    "history": "Sereja has two sequences a1, a2, . . . , an and b1, b2, . . . , bm, consisting of integers. One day Sereja got bored and he decided two play with them. The rules of the game was very simple. Sereja makes several moves, in one move he can perform one of the following actions: Choose several ( at least one) first elements of sequence a ( non- empty prefix of a) , choose several ( at least one) first elements of sequence b ( non- empty prefix of b) ; the element of sequence a with the maximum index among the chosen ones must be equal to the element of sequence b with the maximum index among the chosen ones; remove the chosen elements from the sequences. Remove all elements of both sequences. The first action is worth e energy units and adds one dollar to Sereja' s electronic account. The second action is worth the number of energy units equal to the number of elements Sereja removed from the sequences before performing this action. After Sereja performed the second action, he gets all the money that he earned on his electronic account during the game. Initially Sereja has s energy units and no money on his account. What maximum number of money can Sereja get? Note, the amount of Seraja' s energy mustn' t be negative at any time moment.",
    "input": "The first line contains integers n, m, s, e ( 1 \u2264 n, m \u2264 105; 1 \u2264 s \u2264 3\u00b7105; 103 \u2264 e \u2264 104) . The second line contains n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 105) . The third line contains m integers b1, b2, . . . , bm ( 1 \u2264 bi \u2264 105) .",
    "output": "Print a single integer \u2014 maximum number of money in dollars that Sereja can get.",
    "note": "",
    "topics": [
      "data structures",
      "dp"
    ],
    "id": "425C"
  },
  {
    "title": "Biathlon Track",
    "url": "https://codeforces.com/problemset/problem/424/D",
    "history": "Recently an official statement of the world Olympic Committee said that the Olympic Winter Games 2030 will be held in Tomsk. The city officials decided to prepare for the Olympics thoroughly and to build all the necessary Olympic facilities as early as possible. First, a biathlon track will be built. To construct a biathlon track a plot of land was allocated, which is a rectangle divided into n \u00d7 m identical squares. Each of the squares has two coordinates: the number of the row ( from 1 to n) , where it is located, the number of the column ( from 1 to m) , where it is located. Also each of the squares is characterized by its height. During the sports the biathletes will have to move from one square to another. If a biathlete moves from a higher square to a lower one, he makes a descent. If a biathlete moves from a lower square to a higher one, he makes an ascent. If a biathlete moves between two squares with the same height, then he moves on flat ground. The biathlon track should be a border of some rectangular area of the allocated land on which biathletes will move in the clockwise direction. It is known that on one move on flat ground an average biathlete spends tp seconds, an ascent takes tu seconds, a descent takes td seconds. The Tomsk Administration wants to choose the route so that the average biathlete passes it in as close to t seconds as possible. In other words, the difference between time ts of passing the selected track and t should be minimum. For a better understanding you can look at the first sample of the input data. In this sample n = 6, m = 7, and the administration wants the track covering time to be as close to t = 48 seconds as possible, also, tp = 3, tu = 6 and td = 2. If we consider the rectangle shown on the image by arrows, the average biathlete can move along the boundary in a clockwise direction in exactly 48 seconds. The upper left corner of this track is located in the square with the row number 4, column number 3 and the lower right corner is at square with row number 6, column number 7. Among other things the administration wants all sides of the rectangle which boundaries will be the biathlon track to consist of no less than three squares and to be completely contained within the selected land. You are given the description of the given plot of land and all necessary time values. You are to write the program to find the most suitable rectangle for a biathlon track. If there are several such rectangles, you are allowed to print any of them.",
    "input": "The first line of the input contains three integers n, m and t ( 3 \u2264 n, m \u2264 300, 1 \u2264 t \u2264 109) \u2014 the sizes of the land plot and the desired distance covering time. The second line also contains three integers tp, tu and td ( 1 \u2264 tp, tu, td \u2264 100) \u2014 the time the average biathlete needs to cover a flat piece of the track, an ascent and a descent respectively. Then n lines follow, each line contains m integers that set the heights of each square of the given plot of land. Each of the height values is a positive integer, not exceeding 106.",
    "output": "In a single line of the output print four positive integers \u2014 the number of the row and the number of the column of the upper left corner and the number of the row and the number of the column of the lower right corner of the rectangle that is chosen for the track.",
    "note": "",
    "topics": [
      "binary search",
      "brute force",
      "constructive algorithms",
      "data structures",
      "dp"
    ],
    "id": "424D"
  },
  {
    "title": "Bug in Code",
    "url": "https://codeforces.com/problemset/problem/421/D",
    "history": "Recently a serious bug has been found in the FOS code. The head of the F company wants to find the culprit and punish him. For that, he set up an organizational meeting, the issue is: who' s bugged the code? Each of the n coders on the meeting said: ' I know for sure that either x or y did it! ' The head of the company decided to choose two suspects and invite them to his office. Naturally, he should consider the coders' opinions. That' s why the head wants to make such a choice that at least p of n coders agreed with it. A coder agrees with the choice of two suspects if at least one of the two people that he named at the meeting was chosen as a suspect. In how many ways can the head of F choose two suspects? Note that even if some coder was chosen as a suspect, he can agree with the head' s choice if he named the other chosen coder at the meeting.",
    "input": "The first line contains integers n and p ( 3 \u2264 n \u2264 3\u00b7105; 0 \u2264 p \u2264 n) \u2014 the number of coders in the F company and the minimum number of agreed people. Each of the next n lines contains two integers xi, yi ( 1 \u2264 xi, yi \u2264 n) \u2014 the numbers of coders named by the i- th coder. It is guaranteed that xi = \u0338 i, yi = \u0338 i, xi = \u0338 yi.",
    "output": "Print a single integer \u2014 the number of possible two- suspect sets. Note that the order of the suspects doesn' t matter, that is, sets ( 1, 2) and ( 2, 1) are considered identical.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "sortings"
    ],
    "id": "421D"
  },
  {
    "title": "Cup Trick",
    "url": "https://codeforces.com/problemset/problem/420/D",
    "history": "The employees of the F company have lots of ways to entertain themselves. Today they invited a famous magician who shows a trick with plastic cups and a marble. The point is to trick the spectator' s attention. Initially, the spectator stands in front of a line of n plastic cups. Then the magician places a small marble under one cup and shuffles the cups. Then the spectator should guess which cup hides the marble. But the head coder of the F company isn' t easy to trick. When he saw the performance, he noticed several important facts: each cup contains a mark \u2014 a number from 1 to n; all marks on the cups are distinct; the magician shuffles the cups in m operations, each operation looks like that: take a cup marked xi, sitting at position yi in the row of cups ( the positions are numbered from left to right, starting from 1) and shift it to the very beginning of the cup row ( on the first position) . When the head coder came home after work he wanted to re- do the trick. Unfortunately, he didn' t remember the starting or the final position of the cups. He only remembered which operations the magician performed. Help the coder: given the operations in the order they were made find at least one initial permutation of the cups that can go through the described operations in the given order. Otherwise, state that such permutation doesn' t exist.",
    "input": "The first line contains integers n and m ( 1 \u2264 n, m \u2264 106) . Each of the next m lines contains a couple of integers. The i- th line contains integers xi, yi ( 1 \u2264 xi, yi \u2264 n) \u2014 the description of the i- th operation of the magician. Note that the operations are given in the order in which the magician made them and the coder wants to make them in the same order.",
    "output": "If the described permutation doesn' t exist ( the programmer remembered wrong operations) , print - 1. Otherwise, print n distinct integers, each from 1 to n: the i- th number should represent the mark on the cup that initially is in the row in position i. If there are multiple correct answers, you should print the lexicographically minimum one.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": "420D"
  },
  {
    "title": "Bug in Code",
    "url": "https://codeforces.com/problemset/problem/420/C",
    "history": "Recently a serious bug has been found in the FOS code. The head of the F company wants to find the culprit and punish him. For that, he set up an organizational meeting, the issue is: who' s bugged the code? Each of the n coders on the meeting said: ' I know for sure that either x or y did it! ' The head of the company decided to choose two suspects and invite them to his office. Naturally, he should consider the coders' opinions. That' s why the head wants to make such a choice that at least p of n coders agreed with it. A coder agrees with the choice of two suspects if at least one of the two people that he named at the meeting was chosen as a suspect. In how many ways can the head of F choose two suspects? Note that even if some coder was chosen as a suspect, he can agree with the head' s choice if he named the other chosen coder at the meeting.",
    "input": "The first line contains integers n and p ( 3 \u2264 n \u2264 3\u00b7105; 0 \u2264 p \u2264 n) \u2014 the number of coders in the F company and the minimum number of agreed people. Each of the next n lines contains two integers xi, yi ( 1 \u2264 xi, yi \u2264 n) \u2014 the numbers of coders named by the i- th coder. It is guaranteed that xi = \u0338 i, yi = \u0338 i, xi = \u0338 yi.",
    "output": "Print a single integer \u2013\u2013 the number of possible two- suspect sets. Note that the order of the suspects doesn' t matter, that is, sets ( 1, 2) \u0438 ( 2, 1) are considered identical.",
    "note": "",
    "topics": [
      "data structures",
      "graphs",
      "implementation",
      "two pointers"
    ],
    "id": "420C"
  },
  {
    "title": "Tricky Password",
    "url": "https://codeforces.com/problemset/problem/418/E",
    "history": "In order to ensure confidentiality, the access to the \" Russian Code Cup\" problems is password protected during the problem development process. To select a password, the jury can generate a special table that contains n columns and the infinite number of rows. To construct a table, the first row is fixed, and all the others are obtained by the following rule: In the row i at position p there is a number equal to the number of times a[ i - 1] [ p] occurs on the prefix a[ i - 1] [ 1. . . p] . To ensure the required level of confidentiality, the jury must be able to perform the following operations: Replace number a[ 1] [ p] by v and rebuild the table. Find the number a[ x] [ y] , which will be the new password. Doing all these steps manually is very tedious, so the jury asks you to help him. Write a program that responds to the request of the jury.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 100000) \u2014 the number of columns. The second line contains the description of the first row of the table, that is, n integers, which are not less than 1 and do not exceed 109. The third line of the input contains an integer m ( 1 \u2264 m \u2264 100000) \u2014 the number of requests. Next, each row contains a description of the request, which consists of three integers: If the first number is equal to 1, then the remaining two numbers are v, p ( 1 \u2264 v \u2264 109; 1 \u2264 p \u2264 n) . So, you should put value v in the position p in the first row. If the first number is equal to 2, then the remaining two numbers are x, y ( 1 \u2264 x \u2264 105; 1 \u2264 y \u2264 n) \u2014 the row and column of the table cell from which you want to get value.",
    "output": "Print an answer for each request of the second type in the order you receive them.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": "418E"
  },
  {
    "title": "Big Problems for Organizers",
    "url": "https://codeforces.com/problemset/problem/418/D",
    "history": "The Finals of the \" Russian Code Cup\" 2214 will be held in n hotels. Two hotels ( let' s assume that they are the main hotels) , will host all sorts of events, and the remaining hotels will accommodate the participants. The hotels are connected by n - 1 roads, you can get from any hotel to any other one. The organizers wonder what is the minimum time all the participants need to get to the main hotels, if each participant goes to the main hotel that is nearest to him and moving between two hotels connected by a road takes one unit of time. The hosts consider various options for the location of the main hotels. For each option help the organizers to find minimal time.",
    "input": "The first line contains an integer n ( 2 \u2264 n \u2264 100000) \u2014 the number of hotels. The next n - 1 lines contain two integers each \u2014 the numbers of the hotels that have a road between them. Consider hotels are numbered from 1 to n. The next line contains an integer m ( 1 \u2264 m \u2264 100000) \u2014 the number of queries. The following m lines contains two distinct integers each \u2014 the numbers of the hotels we assume to be the main.",
    "output": "For each request of the organizers print a single integer \u2014 the time that all participants need to reach the main hotels.",
    "note": "",
    "topics": [
      "data structures",
      "graphs",
      "trees"
    ],
    "id": "418D"
  },
  {
    "title": "Mashmokh's Designed Problem",
    "url": "https://codeforces.com/problemset/problem/414/E",
    "history": "After a lot of trying, Mashmokh designed a problem and it' s your job to solve it. You have a tree T with n vertices. Each vertex has a unique index from 1 to n. The root of T has index 1. For each vertex of this tree v, you are given a list of its children in a specific order. You must perform three types of query on this tree: find distance ( the number of edges in the shortest path) between u and v; given v and h, disconnect v from its father and connect it to its h- th ancestor; more formally, let' s denote the path from v to the root by x1, x2, . . . , xl ( h < l) , so that x1 = v and xl is root; disconnect v from its father ( x2) and connect it to xh + 1; vertex v must be added to the end of the child- list of vertex xh + 1; in the vertex sequence produced by calling function dfs( root) find the latest vertex that has distance k from the root. The pseudo- code of function dfs( v) : / / ls[ v] : list of children of vertex v / / its i- th element is ls[ v] [ i] / / its size is size( ls[ v] ) sequence result = empty sequence; void dfs( vertex now) add now to end of result; for( int i = 1; i < = size( ls[ v] ) ; i = i + 1) / / loop from i = 1 to i = size( ls[ v] ) dfs( ls[ v] [ i] ) ;",
    "input": "The first line of input contains two space- separated integers n, m ( 2 \u2264 n \u2264 105; 1 \u2264 m \u2264 105) , the number of vertices of T and number of queries to perform. The i- th of the following n lines contains an integer li ( 0 \u2264 li \u2264 n) , number of i- th vertex' s children. Then li space- separated integers follow, the j- th of them is the index of j- th child of i- th vertex. Note that the order of these vertices is important. Each of the following m lines has one of the following format: \" 1 v u\" , \" 2 v h\" , or \" 3 k\" . The first number in the line is the type of query to perform according to the problem statement. The next numbers are description of the query. It' s guaranteed that all the queries are correct. For example, in the second- type query h is at least 2 and at most distance of v from root. Also in the third- type query there is at least one vertex with distance k from the root at the time the query is given.",
    "output": "For each query of the first or third type output one line containing the result of the query.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": "414E"
  },
  {
    "title": "Mashmokh and Water Tanks",
    "url": "https://codeforces.com/problemset/problem/414/D",
    "history": "Mashmokh is playing a new game. In the beginning he has k liters of water and p coins. Additionally he has a rooted tree ( an undirected connected acyclic graph) that consists of m vertices. Each vertex of the tree contains a water tank that is empty in the beginning. The game begins with the fact that Mashmokh chooses some ( no more than k) of these tanks ( except the root) and pours into each of them exactly 1 liter of water. Then the following process is performed until there is no water remained in tanks. The process consists of several steps. At the beginning of each step Mashmokh opens doors of all tanks. Then Mashmokh closes doors of some tanks ( he is not allowed to close door of tank in the root) for the duration of this move. Let' s denote the number of liters in some tank with closed door as w, Mashmokh pays w coins for the closing of that tank during this move. Let' s denote by x1, x2, . . . , xm as the list of vertices of the tree sorted ( nondecreasing) by their depth. The vertices from this list should be considered one by one in the order. Firstly vertex x1 ( which is the root itself) is emptied. Then for each vertex xi ( i > 1) , if its door is closed then skip the vertex else move all the water from the tank of vertex xi to the tank of its father ( even if the tank of the father is closed) . Suppose l moves were made until the tree became empty. Let' s denote the amount of water inside the tank of the root after the i- th move by wi then Mashmokh will win max( w1, w2, . . . , wl) dollars. Mashmokh wanted to know what is the maximum amount of dollars he can win by playing the above game. He asked you to find this value for him.",
    "input": "The first line of the input contains three space- separated integers m, k, p ( 2 \u2264 m \u2264 105; 0 \u2264 k, p \u2264 109) . Each of the following m - 1 lines contains two space- separated integers ai, bi ( 1 \u2264 ai, bi \u2264 m; ai = \u0338 bi) \u2014 the edges of the tree. Consider that the vertices of the tree are numbered from 1 to m. The root of the tree has number 1.",
    "output": "Output a single integer, the number Mashmokh asked you to find.",
    "note": "The tree in the first sample is shown on the picture below. The black, red, blue colors correspond to vertices with 0, 1, 2 liters of water. One way to achieve the maximum amount of money is to put 1 liter of water in each of vertices 3 and 4. The beginning state is shown on the picture below. Then in the first move Mashmokh will pay one token to close the door of the third vertex tank. The tree after the first move is shown on the picture below. After the second move there are 2 liters of water in the root as shown on the picture below.",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "trees",
      "two pointers"
    ],
    "id": "414D"
  },
  {
    "title": "Maze 2D",
    "url": "https://codeforces.com/problemset/problem/413/E",
    "history": "The last product of the R2 company in the 2D games' field is a new revolutionary algorithm of searching for the shortest path in a 2 \u00d7 n maze. Imagine a maze that looks like a 2 \u00d7 n rectangle, divided into unit squares. Each unit square is either an empty cell or an obstacle. In one unit of time, a person can move from an empty cell of the maze to any side- adjacent empty cell. The shortest path problem is formulated as follows. Given two free maze cells, you need to determine the minimum time required to go from one cell to the other. Unfortunately, the developed algorithm works well for only one request for finding the shortest path, in practice such requests occur quite often. You, as the chief R2 programmer, are commissioned to optimize the algorithm to find the shortest path. Write a program that will effectively respond to multiple requests to find the shortest path in a 2 \u00d7 n maze.",
    "input": "The first line contains two integers, n and m ( 1 \u2264 n \u2264 2\u00b7105; 1 \u2264 m \u2264 2\u00b7105) \u2014 the width of the maze and the number of queries, correspondingly. Next two lines contain the maze. Each line contains n characters, each character equals either ' . ' ( empty cell) , or ' X' ( obstacle) . Each of the next m lines contains two integers vi and ui ( 1 \u2264 vi, ui \u2264 2n) \u2014 the description of the i- th request. Numbers vi, ui mean that you need to print the value of the shortest path from the cell of the maze number vi to the cell number ui. We assume that the cells of the first line of the maze are numbered from 1 to n, from left to right, and the cells of the second line are numbered from n + 1 to 2n from left to right. It is guaranteed that both given cells are empty.",
    "output": "Print m lines. In the i- th line print the answer to the i- th request \u2014 either the size of the shortest path or - 1, if we can' t reach the second cell from the first one.",
    "note": "",
    "topics": [
      "data structures",
      "divide and conquer"
    ],
    "id": "413E"
  },
  {
    "title": "k-d-sequence",
    "url": "https://codeforces.com/problemset/problem/407/E",
    "history": "We' ll call a sequence of integers a good k- d sequence if we can add to it at most k numbers in such a way that after the sorting the sequence will be an arithmetic progression with difference d. You got hold of some sequence a, consisting of n integers. Your task is to find its longest contiguous subsegment, such that it is a good k- d sequence.",
    "input": "The first line contains three space- separated integers n, k, d ( 1 \u2264 n \u2264 2\u00b7105; 0 \u2264 k \u2264 2\u00b7105; 0 \u2264 d \u2264 109) . The second line contains n space- separated integers: a1, a2, . . . , an ( - 109 \u2264 ai \u2264 109) \u2014 the actual sequence.",
    "output": "Print two space- separated integers l, r ( 1 \u2264 l \u2264 r \u2264 n) show that sequence al, al + 1, . . . , ar is the longest subsegment that is a good k- d sequence. If there are multiple optimal answers, print the one with the minimum value of l.",
    "note": "In the first test sample the answer is the subsegment consisting of numbers 2, 8, 6 \u2014 after adding number 4 and sorting it becomes sequence 2, 4, 6, 8 \u2014 the arithmetic progression with difference 2.",
    "topics": [
      "data structures"
    ],
    "id": "407E"
  },
  {
    "title": "Two Rooted Trees",
    "url": "https://codeforces.com/problemset/problem/403/E",
    "history": "You have two rooted undirected trees, each contains n vertices. Let' s number the vertices of each tree with integers from 1 to n. The root of each tree is at vertex 1. The edges of the first tree are painted blue, the edges of the second one are painted red. For simplicity, let' s say that the first tree is blue and the second tree is red. Edge x, y is called bad for edge p, q if two conditions are fulfilled: The color of edge x, y is different from the color of edge p, q. Let' s consider the tree of the same color that edge p, q is. Exactly one of vertices x, y lies both in the subtree of vertex p and in the subtree of vertex q. In this problem, your task is to simulate the process described below. The process consists of several stages: On each stage edges of exactly one color are deleted. On the first stage, exactly one blue edge is deleted. Let' s assume that at the stage i we' ve deleted edges u1, v1, u2, v2, . . . , uk, vk. At the stage i + 1 we will delete all undeleted bad edges for edge u1, v1, then we will delete all undeleted bad edges for edge u2, v2 and so on until we reach edge uk, vk. For each stage of deleting edges determine what edges will be removed on the stage. Note that the definition of a bad edge always considers the initial tree before it had any edges removed.",
    "input": "The first line contains integer n ( 2 \u2264 n \u2264 2\u00b7105) \u2014 the number of vertices in each tree. The next line contains n - 1 positive integers a2, a3, . . . , an ( 1 \u2264 ai \u2264 n; ai = \u0338 i) \u2014 the description of edges of the first tree. Number ai means that the first tree has an edge connecting vertex ai and vertex i. The next line contains n - 1 positive integers b2, b3, . . . , bn ( 1 \u2264 bi \u2264 n; bi = \u0338 i) \u2014 the description of the edges of the second tree. Number bi means that the second tree has an edge connecting vertex bi and vertex i. The next line contains integer idx ( 1 \u2264 idx < n) \u2014 the index of the blue edge that was removed on the first stage. Assume that the edges of each tree are numbered with numbers from 1 to n - 1 in the order in which they are given in the input.",
    "output": "For each stage of removing edges print its description. Each description must consist of exactly two lines. If this is the stage when blue edges are deleted, then the first line of the description must contain word Blue, otherwise \u2014 word Red. In the second line print the indexes of the edges that will be deleted on this stage in the increasing order.",
    "note": "For simplicity let' s assume that all edges of the root tree received some direction, so that all vertices are reachable from vertex 1. Then a subtree of vertex v is a set of vertices reachable from vertex v in the resulting directed graph ( vertex v is also included in the set) .",
    "topics": [
      "data structures",
      "implementation",
      "trees"
    ],
    "id": "403E"
  },
  {
    "title": "Inna and Binary Logic",
    "url": "https://codeforces.com/problemset/problem/400/E",
    "history": "Inna is fed up with jokes about female logic. So she started using binary logic instead. Inna has an array of n elements a1[ 1] , a1[ 2] , . . . , a1[ n] . Girl likes to train in her binary logic, so she does an exercise consisting of n stages: on the first stage Inna writes out all numbers from array a1, on the i- th ( i \u2265 2) stage girl writes all elements of array ai, which consists of n - i + 1 integers; the k- th integer of array ai is defined as follows: ai[ k] = ai - 1[ k] AND ai - 1[ k + 1] . Here AND is bit- wise binary logical operation. Dima decided to check Inna' s skill. He asks Inna to change array, perform the exercise and say the sum of all elements she wrote out during the current exercise. Help Inna to answer the questions!",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 105) \u2014 size of array a1 and number of Dima' s questions. Next line contains n integers a1[ 1] , a1[ 2] , . . . , a1[ n] ( 0 \u2264 ai \u2264 105) \u2014 initial array elements. Each of next m lines contains two integers \u2014 Dima' s question description. Each question consists of two integers pi, vi ( 1 \u2264 pi \u2264 n; 0 \u2264 vi \u2264 105) . For this question Inna should make a1[ pi] equals vi, and then perform the exercise. Please, note that changes are saved from question to question.",
    "output": "For each question print Inna' s answer on a single line.",
    "note": "",
    "topics": [
      "binary search",
      "bitmasks",
      "data structures"
    ],
    "id": "400E"
  },
  {
    "title": "Instant Messanger",
    "url": "https://codeforces.com/problemset/problem/398/D",
    "history": "User ainta decided to make a new instant messenger called \" aintalk\" . With aintalk, each user can chat with other people. User ainta made the prototype of some functions to implement this thing. login( u) : User u logins into aintalk and becomes online. logout( u) : User u logouts and becomes offline. add_ friend( u, v) : User u and user v become friends. It means, u and v can talk with each other. The friendship is bidirectional. del_ friend( u, v) : Unfriend user u and user v. It means, u and v cannot talk with each other from then. count_ online_ friends( u) : The function returns the number of friends of user u who are online at the moment. Because the messenger is being tested by some users numbered from 1 to n, there is no register method. This means, at the beginning, some users may be online, and some users may have friends. User ainta is going to make these functions, but before making the messenger public, he wants to know whether he is correct. Help ainta verify his code.",
    "input": "The first line contains three space- separated integers n, m and q ( 1 \u2264 n \u2264 50000; 1 \u2264 m \u2264 150000; 1 \u2264 q \u2264 250000) \u2014 the number of users, the number of pairs of friends, and the number of queries. The second line contains an integer o ( 1 \u2264 o \u2264 n) \u2014 the number of online users at the beginning. The third line contains o space- separated integers x1, x2, . . . , xo ( 1 \u2264 xi \u2264 n) \u2014 the ids of the online users. It is guaranteed that these values are distinct. Each of the next m lines contains two space- separated integers ai and bi ( 1 \u2264 ai, bi \u2264 n; ai = \u0338 bi) \u2014 the ids of two users who are friends at the beginning. It is guaranteed there are no multiple friendship given in the input. Note that the friendship is bidirectional. Next q lines describe the q queries in the format: \" O u\" ( 1 \u2264 u \u2264 n) : Call online( u) . It is guaranteed that user u was offline just before the function call. \" F u\" ( 1 \u2264 u \u2264 n) : Call offline( u) . It is guaranteed that user u was online just before the function call. \" A u v\" ( 1 \u2264 u, v \u2264 n; u = \u0338 v) : Call add_ friend( u, v) . It is guaranteed that these two users weren' t friends just before the function call. \" D u v\" ( 1 \u2264 u, v \u2264 n; u = \u0338 v) : Call del_ friend( u, v) . It is guaranteed that these two users were friends just before the function call. \" C u\" ( 1 \u2264 u \u2264 n) : Call count_ online_ friends( u) and print the result in a single line.",
    "output": "For each count_ online_ friends( u) query, print the required answer in a single line.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": "398D"
  },
  {
    "title": "On Changing Tree",
    "url": "https://codeforces.com/problemset/problem/396/C",
    "history": "You are given a rooted tree consisting of n vertices numbered from 1 to n. The root of the tree is a vertex number 1. Initially all vertices contain number 0. Then come q queries, each query has one of the two types: The format of the query: 1 v x k. In response to the query, you need to add to the number at vertex v number x; to the numbers at the descendants of vertex v at distance 1, add x - k; and so on, to the numbers written in the descendants of vertex v at distance i, you need to add x - ( i\u00b7k) . The distance between two vertices is the number of edges in the shortest path between these vertices. The format of the query: 2 v. In reply to the query you should print the number written in vertex v modulo 1000000007 ( 109 + 7) . Process the queries given in the input.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 3\u00b7105) \u2014 the number of vertices in the tree. The second line contains n - 1 integers p2, p3, . . . pn ( 1 \u2264 pi < i) , where pi is the number of the vertex that is the parent of vertex i in the tree. The third line contains integer q ( 1 \u2264 q \u2264 3\u00b7105) \u2014 the number of queries. Next q lines contain the queries, one per line. The first number in the line is type. It represents the type of the query. If type = 1, then next follow space- separated integers v, x, k ( 1 \u2264 v \u2264 n; 0 \u2264 x < 109 + 7; 0 \u2264 k < 109 + 7) . If type = 2, then next follows integer v ( 1 \u2264 v \u2264 n) \u2014 the vertex where you need to find the value of the number.",
    "output": "For each query of the second type print on a single line the number written in the vertex from the query. Print the number modulo 1000000007 ( 109 + 7) .",
    "note": "You can read about a rooted tree here: http: / / en. wikipedia. org/ wiki/ Tree_ ( graph_ theory) .",
    "topics": [
      "data structures",
      "graphs",
      "trees"
    ],
    "id": "396C"
  },
  {
    "title": "Three Arrays",
    "url": "https://codeforces.com/problemset/problem/392/D",
    "history": "There are three arrays a, b and c. Each of them consists of n integers. SmallY wants to find three integers u, v, w ( 0 \u2264 u, v, w \u2264 n) such that the following condition holds: each number that appears in the union of a, b and c, appears either in the first u elements of a, or in the first v elements of b, or in the first w elements of c. Of course, SmallY doesn' t want to have huge numbers u, v and w, so she wants sum u + v + w to be as small as possible. Please, help her to find the minimal possible sum of u + v + w.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 105) . The second line contains n space- separated integers a1, a2, . . . , an \u2014 array a. The third line contains the description of array b in the same format. The fourth line contains the description of array c in the same format. The following constraint holds: 1 \u2264 ai, bi, ci \u2264 109.",
    "output": "Print a single integer \u2014 the minimum possible sum of u + v + w.",
    "note": "In the first example you should choose u = 3, v = 0, w = 2. In the second example you should choose u = 1, v = 3, w = 1.",
    "topics": [
      "data structures"
    ],
    "id": "392D"
  },
  {
    "title": "Supercollider",
    "url": "https://codeforces.com/problemset/problem/391/D2",
    "history": "This problem consists of two subproblems: for solving subproblem D1 you will receive 3 points, and for solving subproblem D2 you will receive 16 points. Manao is the chief architect involved in planning a new supercollider. He has to identify a plot of land where the largest possible supercollider can be built. The supercollider he is building requires four- way orthogonal collisions of particles traveling at the same speed, so it will consist of four accelerating chambers and be shaped like a plus sign ( i. e. , + ) . Each of the four accelerating chambers must be the same length and must be aligned with the Earth' s magnetic field ( parallel or orthogonal) to minimize interference. The accelerating chambers need to be laid down across long flat stretches of land to keep costs under control. Thus, Manao has already commissioned a topographical study that has identified all possible maximal length tracts of land available for building accelerating chambers that are either parallel or orthogonal to the Earth' s magnetic field. To build the largest possible supercollider, Manao must identify the largest symmetric plus shape from among these candidate tracts. That is, he must find the two tracts of land that form an axis- aligned plus shape with the largest distance from the center of the plus to the tip of the shortest of the four arms of the plus. Note that the collider need not use the entire length of the tracts identified ( see the example in the notes) .",
    "input": "The first line of the input will contain two single- space- separated integers n, the number of north- south tracts and m, the number of west- east tracts. Each of the n lines following the first describes a north- south tract. Each such tract is described by three single- space- separated integers xi, yi, li representing the vertical line segment from ( xi, yi) to ( xi, yi + li) . Similarly, after the n lines describing north- south tracts follow m similar lines describing the west- east tracts. Each such tract is described by three single- space- separated integers xi, yi, li representing the horizontal line segment from ( xi, yi) to ( xi + li, yi) . All xi and yi are between - 100000000 and 100000000, inclusive. All li are between 1 and 100000000, inclusive. No pair of horizontal segments will touch or intersect, and no pair of vertical segments will touch or intersect. The problem consists of two subproblems. The subproblems have different constraints on the input. You will get some score for the correct submission of the subproblem. The description of the subproblems follows. In subproblem D1 ( 3 points) , n and m will be between 1 and 1000, inclusive. In subproblem D2 ( 16 points) , n and m will be between 1 and 50000, inclusive.",
    "output": "Print one line containing a single integer, the size of the largest supercollider that can be built on one north- south tract and one west- east tract. The size of the supercollider is defined to be the length of one of the four accelerating chambers. In other words, the size of the resulting supercollider is defined to be the distance from the intersection of the two line segments to the closest endpoint of either of the two segments. If no pair of north- south and west- east tracts intersects, it is not possible to build a supercollider and the program should report a maximum size of zero.",
    "note": "Consider the example. There is one vertical line segment from ( 4, 0) to ( 4, 9) and two horizontal line segments: from ( 1, 1) to ( 9, 1) and from ( 1, 2) to ( 8, 2) . The largest plus shape that can be found among these segments is formed from the only vertical segment and the second of horizontal segments, and is centered at ( 4, 2) . The program should output 2 because the closest end point of those segments to the center is ( 4, 0) , which is distance 2 from the center point of ( 4, 2) . The collider will be formed by the line segments from ( 2, 2) to ( 6, 2) and from ( 4, 0) to ( 4, 4) .",
    "topics": [
      "data structures"
    ],
    "id": "391D2"
  },
  {
    "title": "Inna and Candy Boxes",
    "url": "https://codeforces.com/problemset/problem/390/C",
    "history": "Inna loves sweets very much. She has n closed present boxes lines up in a row in front of her. Each of these boxes contains either a candy ( Dima' s work) or nothing ( Sereja' s work) . Let' s assume that the boxes are numbered from 1 to n, from left to right. As the boxes are closed, Inna doesn' t know which boxes contain candies and which boxes contain nothing. Inna chose number k and asked w questions to Dima to find that out. Each question is characterised by two integers li, ri ( 1 \u2264 li \u2264 ri \u2264 n; r - l + 1 is divisible by k) , the i- th question is: \" Dima, is that true that among the boxes with numbers from li to ri, inclusive, the candies lie only in boxes with numbers li + k - 1, li + 2k - 1, li + 3k - 1, . . . , ri? \" Dima hates to say \" no\" to Inna. That' s why he wonders, what number of actions he will have to make for each question to make the answer to the question positive. In one action, Dima can either secretly take the candy from any box or put a candy to any box ( Dima has infinitely many candies) . Help Dima count the number of actions for each Inna' s question. Please note that Dima doesn' t change the array during Inna' s questions. That' s why when you calculate the number of operations for the current question, please assume that the sequence of boxes didn' t change.",
    "input": "The first line of the input contains three integers n, k and w ( 1 \u2264 k \u2264 min( n, 10) , 1 \u2264 n, w \u2264 105) . The second line contains n characters. If the i- th box contains a candy, the i- th character of the line equals 1, otherwise it equals 0. Each of the following w lines contains two integers li and ri ( 1 \u2264 li \u2264 ri \u2264 n) \u2014 the description of the i- th question. It is guaranteed that ri - li + 1 is divisible by k.",
    "output": "For each question, print a single number on a single line \u2014 the minimum number of operations Dima needs to make the answer to the question positive.",
    "note": "For the first question, you need to take a candy from the first box to make the answer positive. So the answer is 1. For the second question, you need to take a candy from the first box, take a candy from the fifth box and put a candy to the sixth box. The answer is 3. For the third question, you need to take a candy from the fifth box and put it to the sixth box. The answer is 2.",
    "topics": [
      "data structures"
    ],
    "id": "390C"
  },
  {
    "title": "George and Cards",
    "url": "https://codeforces.com/problemset/problem/387/E",
    "history": "George is a cat, so he loves playing very much. Vitaly put n cards in a row in front of George. Each card has one integer written on it. All cards had distinct numbers written on them. Let' s number the cards from the left to the right with integers from 1 to n. Then the i- th card from the left contains number pi ( 1 \u2264 pi \u2264 n) . Vitaly wants the row to have exactly k cards left. He also wants the i- th card from left to have number bi written on it. Vitaly gave a task to George, to get the required sequence of cards using the remove operation n - k times. In one remove operation George can choose w ( 1 \u2264 w; w is not greater than the current number of cards in the row) contiguous cards ( contiguous subsegment of cards) . Let' s denote the numbers written on these card as x1, x2, . . . , xw ( from the left to the right) . After that, George can remove the card xi, such that xi \u2264 xj for each j ( 1 \u2264 j \u2264 w) . After the described operation George gets w pieces of sausage. George wondered: what maximum number of pieces of sausage will he get in total if he reaches his goal and acts optimally well? Help George, find an answer to his question!",
    "input": "The first line contains integers n and k ( 1 \u2264 k \u2264 n \u2264 106) \u2014 the initial and the final number of cards. The second line contains n distinct space- separated integers p1, p2, . . . , pn ( 1 \u2264 pi \u2264 n) \u2014 the initial row of cards. The third line contains k space- separated integers b1, b2, . . . , bk \u2014 the row of cards that you need to get. It is guaranteed that it' s possible to obtain the given row by using the remove operation for n - k times.",
    "output": "Print a single integer \u2014 the maximum number of pieces of sausage that George can get if he acts optimally well.",
    "note": "",
    "topics": [
      "binary search",
      "data structures"
    ],
    "id": "387E"
  },
  {
    "title": "Bear and Prime Numbers",
    "url": "https://codeforces.com/problemset/problem/385/C",
    "history": "Recently, the bear started studying data structures and faced the following problem. You are given a sequence of integers x1, x2, . . . , xn of length n and m queries, each of them is characterized by two integers li, ri. Let' s introduce f( p) to represent the number of such indexes k, that xk is divisible by p. The answer to the query li, ri is the sum: , where S( li, ri) is a set of prime numbers from segment [ li, ri] ( both borders are included in the segment) . Help the bear cope with the problem.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 106) . The second line contains n integers x1, x2, . . . , xn ( 2 \u2264 xi \u2264 107) . The numbers are not necessarily distinct. The third line contains integer m ( 1 \u2264 m \u2264 50000) . Each of the following m lines contains a pair of space- separated integers, li and ri ( 2 \u2264 li \u2264 ri \u2264 2\u00b7109) \u2014 the numbers that characterize the current query.",
    "output": "Print m integers \u2014 the answers to the queries on the order the queries appear in the input.",
    "note": "Consider the first sample. Overall, the first sample has 3 queries. The first query l = 2, r = 11 comes. You need to count f( 2) + f( 3) + f( 5) + f( 7) + f( 11) = 2 + 1 + 4 + 2 + 0 = 9. The second query comes l = 3, r = 12. You need to count f( 3) + f( 5) + f( 7) + f( 11) = 1 + 4 + 2 + 0 = 7. The third query comes l = 4, r = 4. As this interval has no prime numbers, then the sum equals 0.",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "dp",
      "implementation",
      "math",
      "number theory"
    ],
    "id": "385C"
  },
  {
    "title": "Propagating tree",
    "url": "https://codeforces.com/problemset/problem/383/C",
    "history": "Iahub likes trees very much. Recently he discovered an interesting tree named propagating tree. The tree consists of n nodes numbered from 1 to n, each node i having an initial value ai. The root of the tree is node 1. This tree has a special property: when a value val is added to a value of node i, the value - val is added to values of all the children of node i. Note that when you add value - val to a child of node i, you also add - ( - val) to all children of the child of node i and so on. Look an example explanation to understand better how it works. This tree supports two types of queries: \" 1 x val\" \u2014 val is added to the value of node x; \" 2 x\" \u2014 print the current value of node x. In order to help Iahub understand the tree better, you must answer m queries of the preceding type.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 200000) . The second line contains n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 1000) . Each of the next n\u20131 lines contains two integers vi and ui ( 1 \u2264 vi, ui \u2264 n) , meaning that there is an edge between nodes vi and ui. Each of the next m lines contains a query in the format described above. It is guaranteed that the following constraints hold for all queries: 1 \u2264 x \u2264 n, 1 \u2264 val \u2264 1000.",
    "output": "For each query of type two ( print the value of node x) you must print the answer to the query on a separate line. The queries must be answered in the order given in the input.",
    "note": "The values of the nodes are [ 1, 2, 1, 1, 2] at the beginning. Then value 3 is added to node 2. It propagates and value - 3 is added to it' s sons, node 4 and node 5. Then it cannot propagate any more. So the values of the nodes are [ 1, 5, 1, - 2, - 1] . Then value 2 is added to node 1. It propagates and value - 2 is added to it' s sons, node 2 and node 3. From node 2 it propagates again, adding value 2 to it' s sons, node 4 and node 5. Node 3 has no sons, so it cannot propagate from there. The values of the nodes are [ 3, 3, - 1, 0, 1] . You can see all the definitions about the tree at the following link: http: / / en. wikipedia. org/ wiki/ Tree_ ( graph_ theory)",
    "topics": [
      "data structures",
      "dfs and similar",
      "trees"
    ],
    "id": "383C"
  },
  {
    "title": "Milking cows",
    "url": "https://codeforces.com/problemset/problem/383/A",
    "history": "Iahub helps his grandfather at the farm. Today he must milk the cows. There are n cows sitting in a row, numbered from 1 to n from left to right. Each cow is either facing to the left or facing to the right. When Iahub milks a cow, all the cows that see the current cow get scared and lose one unit of the quantity of milk that they can give. A cow facing left sees all the cows with lower indices than her index, and a cow facing right sees all the cows with higher indices than her index. A cow that got scared once can get scared again ( and lose one more unit of milk) . A cow that has been milked once cannot get scared and lose any more milk. You can assume that a cow never loses all the milk she can give ( a cow gives an infinitely amount of milk) . Iahub can decide the order in which he milks the cows. But he must milk each cow exactly once. Iahub wants to lose as little milk as possible. Print the minimum amount of milk that is lost.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 200000) . The second line contains n integers a1, a2, . . . , an, where ai is 0 if the cow number i is facing left, and 1 if it is facing right.",
    "output": "Print a single integer, the minimum amount of lost milk. Please, do not write the",
    "note": "In the first sample Iahub milks the cows in the following order: cow 3, cow 4, cow 2, cow 1. When he milks cow 3, cow 4 loses 1 unit of milk. After that, no more milk is lost.",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "383A"
  },
  {
    "title": "Sereja and Dividing",
    "url": "https://codeforces.com/problemset/problem/380/E",
    "history": "Let' s assume that we have a sequence of doubles a1, a2, . . . , a| a| and a double variable x. You are allowed to perform the following two- staged operation: choose an index of the sequence element i ( 1 \u2264 i \u2264 | a| ) ; consecutively perform assignments: . Let' s use function g( a, x) to represent the largest value that can be obtained from variable x, using the described operation any number of times and sequence a. Sereja has sequence b1, b2, . . . , b| b| . Help Sereja calculate sum: . Record [ bi, bi + 1, . . . , bj] represents a sequence containing the elements in brackets in the given order. To avoid problems with precision, please, print the required sum divided by | b| 2.",
    "input": "The first line contains integer | b| ( 1 \u2264 | b| \u2264 3\u00b7105) \u2014 the length of sequence b. The second line contains | b| integers b1, b2, . . . , b| b| ( 1 \u2264 bi \u2264 105) .",
    "output": "In a single line print a real number \u2014 the required sum divided by | b| 2. Your answer will be considered correct if its absolute or relative error won' t exceed 10 - 6.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": "380E"
  },
  {
    "title": "Sereja and Brackets",
    "url": "https://codeforces.com/problemset/problem/380/C",
    "history": "Sereja has a bracket sequence s1, s2, . . . , sn, or, in other words, a string s of length n, consisting of characters \" ( \" and \" ) \" . Sereja needs to answer m queries, each of them is described by two integers li, ri ( 1 \u2264 li \u2264 ri \u2264 n) . The answer to the i- th query is the length of the maximum correct bracket subsequence of sequence sli, sli + 1, . . . , sri. Help Sereja answer all queries. You can find the definitions for a subsequence and a correct bracket sequence in the notes.",
    "input": "The first line contains a sequence of characters s1, s2, . . . , sn ( 1 \u2264 n \u2264 106) without any spaces. Each character is either a \" ( \" or a \" ) \" . The second line contains integer m ( 1 \u2264 m \u2264 105) \u2014 the number of queries. Each of the next m lines contains a pair of integers. The i- th line contains integers li, ri ( 1 \u2264 li \u2264 ri \u2264 n) \u2014 the description of the i- th query.",
    "output": "Print the answer to each question on a single line. Print the answers in the order they go in the input.",
    "note": "A subsequence of length | x| of string s = s1s2. . . s| s| ( where | s| is the length of string s) is string x = sk1sk2. . . sk| x| ( 1 \u2264 k1 < k2 < . . . < k| x| \u2264 | s| ) . A correct bracket sequence is a bracket sequence that can be transformed into a correct aryphmetic expression by inserting characters \" 1\" and \" + \" between the characters of the string. For example, bracket sequences \" ( ) ( ) \" , \" ( ( ) ) \" are correct ( the resulting expressions \" ( 1) + ( 1) \" , \" ( ( 1+ 1) + 1) \" ) , and \" ) ( \" and \" ( \" are not. For the third query required sequence will be \u00ab( ) \u00bb. For the fourth query required sequence will be \u00ab( ) ( ( ) ) ( ( ) ) \u00bb.",
    "topics": [
      "data structures",
      "schedules"
    ],
    "id": "380C"
  },
  {
    "title": "New Year Tree",
    "url": "https://codeforces.com/problemset/problem/379/F",
    "history": "You are a programmer and you have a New Year Tree ( not the traditional fur tree, though) \u2014 a tree of four vertices: one vertex of degree three ( has number 1) , connected with three leaves ( their numbers are from 2 to 4) . On the New Year, programmers usually have fun. You decided to have fun as well by adding vertices to the tree. One adding operation looks as follows: First we choose some leaf of the tree with number v. Let' s mark the number of vertices on the tree at this moment by variable n, then two vertexes are added to the tree, their numbers are n + 1 and n + 2, also you get new edges, one between vertices v and n + 1 and one between vertices v and n + 2. Your task is not just to model the process of adding vertices to the tree, but after each adding operation print the diameter of the current tree. Come on, let' s solve the New Year problem!",
    "input": "The first line contains integer q ( 1 \u2264 q \u2264 5\u00b7105) \u2014 the number of operations. Each of the next q lines contains integer vi ( 1 \u2264 vi \u2264 n) \u2014 the operation of adding leaves to vertex vi. Variable n represents the number of vertices in the current tree. It is guaranteed that all given operations are correct.",
    "output": "Print q integers \u2014 the diameter of the current tree after each operation.",
    "note": "",
    "topics": [
      "data structures",
      "divide and conquer",
      "trees"
    ],
    "id": "379F"
  },
  {
    "title": "Developing Game",
    "url": "https://codeforces.com/problemset/problem/377/D",
    "history": "Pavel is going to make a game of his dream. However, he knows that he can' t make it on his own so he founded a development company and hired n workers of staff. Now he wants to pick n workers from the staff who will be directly responsible for developing a game. Each worker has a certain skill level vi. Besides, each worker doesn' t want to work with the one whose skill is very different. In other words, the i- th worker won' t work with those whose skill is less than li, and with those whose skill is more than ri. Pavel understands that the game of his dream isn' t too hard to develop, so the worker with any skill will be equally useful. That' s why he wants to pick a team of the maximum possible size. Help him pick such team.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 105) \u2014 the number of workers Pavel hired. Each of the following n lines contains three space- separated integers li, vi, ri ( 1 \u2264 li \u2264 vi \u2264 ri \u2264 3\u00b7105) \u2014 the minimum skill value of the workers that the i- th worker can work with, the i- th worker' s skill and the maximum skill value of the workers that the i- th worker can work with.",
    "output": "In the first line print a single integer m \u2014 the number of workers Pavel must pick for developing the game. In the next line print m space- separated integers \u2014 the numbers of the workers in any order. If there are multiple optimal solutions, print any of them.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": "377D"
  },
  {
    "title": "Preparing for the Contest",
    "url": "https://codeforces.com/problemset/problem/377/B",
    "history": "Soon there will be held the world' s largest programming contest, but the testing system still has m bugs. The contest organizer, a well- known university, has no choice but to attract university students to fix all the bugs. The university has n students able to perform such work. The students realize that they are the only hope of the organizers, so they don' t want to work for free: the i- th student wants to get ci ' passes' in his subjects ( regardless of the volume of his work) . Bugs, like students, are not the same: every bug is characterized by complexity aj, and every student has the level of his abilities bi. Student i can fix a bug j only if the level of his abilities is not less than the complexity of the bug: bi \u2265 aj, and he does it in one day. Otherwise, the bug will have to be fixed by another student. Of course, no student can work on a few bugs in one day. All bugs are not dependent on each other, so they can be corrected in any order, and different students can work simultaneously. The university wants to fix all the bugs as quickly as possible, but giving the students the total of not more than s passes. Determine which students to use for that and come up with the schedule of work saying which student should fix which bug.",
    "input": "The first line contains three space- separated integers: n, m and s ( 1 \u2264 n, m \u2264 105, 0 \u2264 s \u2264 109) \u2014 the number of students, the number of bugs in the system and the maximum number of passes the university is ready to give the students. The next line contains m space- separated integers a1, a2, . . . , am ( 1 \u2264 ai \u2264 109) \u2014 the bugs' complexities. The next line contains n space- separated integers b1, b2, . . . , bn ( 1 \u2264 bi \u2264 109) \u2014 the levels of the students' abilities. The next line contains n space- separated integers c1, c2, . . . , cn ( 0 \u2264 ci \u2264 109) \u2014 the numbers of the passes the students want to get for their help.",
    "output": "If the university can' t correct all bugs print \" NO\" . Otherwise, on the first line print \" YES\" , and on the next line print m space- separated integers: the i- th of these numbers should equal the number of the student who corrects the i- th bug in the optimal answer. The bugs should be corrected as quickly as possible ( you must spend the minimum number of days) , and the total given passes mustn' t exceed s. If there are multiple optimal answers, you can output any of them.",
    "note": "Consider the first sample. The third student ( with level 3) must fix the 2nd and 4th bugs ( complexities 3 and 2 correspondingly) and the second student ( with level 1) must fix the 1st and 3rd bugs ( their complexity also equals 1) . Fixing each bug takes one day for each student, so it takes 2 days to fix all bugs ( the students can work in parallel) . The second student wants 3 passes for his assistance, the third student wants 6 passes. It meets the university' s capabilities as it is ready to give at most 9 passes.",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "377B"
  },
  {
    "title": "Tree and Queries",
    "url": "https://codeforces.com/problemset/problem/375/D",
    "history": "You have a rooted tree consisting of n vertices. Each vertex of the tree has some color. We will assume that the tree vertices are numbered by integers from 1 to n. Then we represent the color of vertex v as cv. The tree root is a vertex with number 1. In this problem you need to answer to m queries. Each query is described by two integers vj, kj. The answer to query vj, kj is the number of such colors of vertices x, that the subtree of vertex vj contains at least kj vertices of color x. You can find the definition of a rooted tree by the following link: http: / / en. wikipedia. org/ wiki/ Tree_ ( graph_ theory) .",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 105; 1 \u2264 m \u2264 105) . The next line contains a sequence of integers c1, c2, . . . , cn ( 1 \u2264 ci \u2264 105) . The next n - 1 lines contain the edges of the tree. The i- th line contains the numbers ai, bi ( 1 \u2264 ai, bi \u2264 n; ai = \u0338 bi) \u2014 the vertices connected by an edge of the tree. Next m lines contain the queries. The j- th line contains two integers vj, kj ( 1 \u2264 vj \u2264 n; 1 \u2264 kj \u2264 105) .",
    "output": "Print m integers \u2014 the answers to the queries in the order the queries appear in the input.",
    "note": "A subtree of vertex v in a rooted tree with root r is a set of vertices u : dist( r, v) + dist( v, u) = dist( r, u) . Where dist( x, y) is the length ( in edges) of the shortest path between vertices x and y.",
    "topics": [
      "data structures",
      "dfs and similar",
      "trees"
    ],
    "id": "375D"
  },
  {
    "title": "Maximum Submatrix 2",
    "url": "https://codeforces.com/problemset/problem/375/B",
    "history": "You are given a matrix consisting of digits zero and one, its size is n \u00d7 m. You are allowed to rearrange its rows. What is the maximum area of the submatrix that only consists of ones and can be obtained in the given problem by the described operations? Let' s assume that the rows of matrix a are numbered from 1 to n from top to bottom and the columns are numbered from 1 to m from left to right. A matrix cell on the intersection of the i- th row and the j- th column can be represented as ( i, j) . Formally, a submatrix of matrix a is a group of four integers d, u, l, r ( 1 \u2264 d \u2264 u \u2264 n; 1 \u2264 l \u2264 r \u2264 m) . We will assume that the submatrix contains cells ( i, j) ( d \u2264 i \u2264 u; l \u2264 j \u2264 r) . The area of the submatrix is the number of cells it contains.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 5000) . Next n lines contain m characters each \u2014 matrix a. Matrix a only contains characters: \" 0\" and \" 1\" . Note that the elements of the matrix follow without any spaces in the lines.",
    "output": "Print a single integer \u2014 the area of the maximum obtained submatrix. If we cannot obtain a matrix of numbers one, print 0.",
    "note": "",
    "topics": [
      "data structures",
      "dp",
      "implementation",
      "sortings"
    ],
    "id": "375B"
  },
  {
    "title": "Inna and Babies",
    "url": "https://codeforces.com/problemset/problem/374/E",
    "history": "Inna, Dima and Sereja are in one room together. It' s cold outside, so Sereja suggested to play a board game called \" Babies\" . The babies playing board is an infinite plane containing n blue babies and m red ones. Each baby is a segment that grows in time. At time moment t the blue baby ( x, y) is a blue segment with ends at points ( x - t, y + t) , ( x + t, y - t) . Similarly, at time t the red baby ( x, y) is a red segment with ends at points ( x + t, y + t) , ( x - t, y - t) of the plane. Initially, at time t = 0 all babies are points on the plane. The goal of the game is to find the first integer moment of time when the plane contains a rectangle of a non- zero area which sides are fully covered by some babies. A side may be covered by multiple babies. More formally, each point of each side of the rectangle should be covered by at least one baby of any color. At that, you must assume that the babies are closed segments, that is, they contain their endpoints. You are given the positions of all babies \u2014 help Inna and Dima to find the required moment of time.",
    "input": "The first line of the input contains two integers n and m ( 1 \u2264 n, m \u2264 2000) . Next n lines contain the coordinates of the blue babies. The i- th line contains integers xi, yi \u2014 a baby' s coordinates. Next m lines contain the coordinates of m red babies in the similar form. All coordinates of the input don' t exceed 106 in their absolute value. Note that all babies stand in distinct points.",
    "output": "In the single line print a single integer \u2014 the answer to the problem. If the rectangle never appears on the plane, print \" Poor Sereja! \" without the quotes.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "dsu",
      "geometry",
      "implementation"
    ],
    "id": "374E"
  },
  {
    "title": "Inna and Sequence ",
    "url": "https://codeforces.com/problemset/problem/374/D",
    "history": "Dima' s spent much time thinking what present to give to Inna and gave her an empty sequence w. Now they want to fill sequence w with numbers zero and one. For that, they decided to play an amusing game. Before the game begins, Dima chooses m integers a1, a2, . . . , am ( 1 \u2264 a1 < a2 < . . . < am) . Then Inna and Dima start playing, that is, adding numbers to sequence w. Each new number they choose is added to the end of the sequence. At some moments of time Dima feels that the game is going to end too soon ( and he wants to play with Inna as long as possible) , so he hits a table hard with his fist. At that the a1- th, a2- th, a3- th, . . . , ak- th numbers from the beginning simultaneously fall out of the sequence ( the sequence gets k numbers less) . Here k is such maximum number that value ak doesn' t exceed the current length of the sequence. If number a1 is larger than the current length of w, then nothing falls out of the sequence. You are given the chronological sequence of events in the game. Each event is either adding a number to the end of sequence w or Dima' s hit on the table. Calculate the sequence w after all these events happen.",
    "input": "The first line of the input contains two integers n and m ( 1 \u2264 n, m \u2264 106) showing how many events took place and how many numbers Dima chose. The next line contains m distinct integers ai ( 1 \u2264 ai \u2264 106) sorted in the increasing order. Next n lines describe the events in the chronological order. Each line contains a single integer: - 1, 0 or 1. Number - 1 means that Dima hits the table. Number 0 means that Inna and Dima add number 0 to the end of the sequence. Number 1 means that Inna and Dima add number 1 to the end of the sequence.",
    "output": "In a single line print a sequence of numbers 0 and 1 \u2014 the elements of the sequence after all events happen. Print the elements of the sequence in the order from the beginning to the end of the sequence. If after all events the sequence ends up empty, print \" Poor stack! \" .",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "trees"
    ],
    "id": "374D"
  },
  {
    "title": "Choosing Subtree is Fun",
    "url": "https://codeforces.com/problemset/problem/372/D",
    "history": "There is a tree consisting of n vertices. The vertices are numbered from 1 to n. Let' s define the length of an interval [ l, r] as the value r - l + 1. The score of a subtree of this tree is the maximum length of such an interval [ l, r] that, the vertices with numbers l, l + 1, . . . , r belong to the subtree. Considering all subtrees of the tree whose size is at most k, return the maximum score of the subtree. Note, that in this problem tree is not rooted, so a subtree \u2014 is an arbitrary connected subgraph of the tree.",
    "input": "There are two integers in the first line, n and k ( 1 \u2264 k \u2264 n \u2264 105) . Each of the next n - 1 lines contains integers ai and bi ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi) . That means ai and bi are connected by a tree edge. It is guaranteed that the input represents a tree.",
    "output": "Output should contain a single integer \u2014 the maximum possible score.",
    "note": "For the first case, there is some subtree whose size is at most 6, including 3 consecutive numbers of vertices. For example, the subtree that consists of 1, 3, 4, 5, 7, 8 or of 1, 4, 6, 7, 8, 10 includes 3 consecutive numbers of vertices. But there is no subtree whose size is at most 6, which includes 4 or more consecutive numbers of vertices.",
    "topics": [
      "binary search",
      "data structures",
      "dfs and similar",
      "trees",
      "two pointers"
    ],
    "id": "372D"
  },
  {
    "title": "Watching Fireworks is Fun",
    "url": "https://codeforces.com/problemset/problem/372/C",
    "history": "A festival will be held in a town' s main street. There are n sections in the main street. The sections are numbered 1 through n from left to right. The distance between each adjacent sections is 1. In the festival m fireworks will be launched. The i- th ( 1 \u2264 i \u2264 m) launching is on time ti at section ai. If you are at section x ( 1 \u2264 x \u2264 n) at the time of i- th launching, you' ll gain happiness value bi - | ai - x| ( note that the happiness value might be a negative value) . You can move up to d length units in a unit time interval, but it' s prohibited to go out of the main street. Also you can be in an arbitrary section at initial time moment ( time equals to 1) , and want to maximize the sum of happiness that can be gained from watching fireworks. Find the maximum total happiness. Note that two or more fireworks can be launched at the same time.",
    "input": "The first line contains three integers n, m, d ( 1 \u2264 n \u2264 150000; 1 \u2264 m \u2264 300; 1 \u2264 d \u2264 n) . Each of the next m lines contains integers ai, bi, ti ( 1 \u2264 ai \u2264 n; 1 \u2264 bi \u2264 109; 1 \u2264 ti \u2264 109) . The i- th line contains description of the i- th launching. It is guaranteed that the condition ti \u2264 ti + 1 ( 1 \u2264 i < m) will be satisfied.",
    "output": "Print a single integer \u2014 the maximum sum of happiness that you can gain from watching all the fireworks. Please, do not write the",
    "note": "",
    "topics": [
      "data structures",
      "dp",
      "math"
    ],
    "id": "372C"
  },
  {
    "title": "Vessels",
    "url": "https://codeforces.com/problemset/problem/371/D",
    "history": "There is a system of n vessels arranged one above the other as shown in the figure below. Assume that the vessels are numbered from 1 to n, in the order from the highest to the lowest, the volume of the i- th vessel is ai liters. Initially, all the vessels are empty. In some vessels water is poured. All the water that overflows from the i- th vessel goes to the ( i + 1) - th one. The liquid that overflows from the n- th vessel spills on the floor. Your task is to simulate pouring water into the vessels. To do this, you will need to handle two types of queries: Add xi liters of water to the pi- th vessel; Print the number of liters of water in the ki- th vessel. When you reply to the second request you can assume that all the water poured up to this point, has already overflown between the vessels.",
    "input": "The first line contains integer n \u2014 the number of vessels ( 1 \u2264 n \u2264 2\u00b7105) . The second line contains n integers a1, a2, . . . , an \u2014 the vessels' capacities ( 1 \u2264 ai \u2264 109) . The vessels' capacities do not necessarily increase from the top vessels to the bottom ones ( see the second sample) . The third line contains integer m \u2014 the number of queries ( 1 \u2264 m \u2264 2\u00b7105) . Each of the next m lines contains the description of one query. The query of the first type is represented as \" 1 pi xi\" , the query of the second type is represented as \" 2 ki\" ( 1 \u2264 pi \u2264 n, 1 \u2264 xi \u2264 109, 1 \u2264 ki \u2264 n) .",
    "output": "For each query, print on a single line the number of liters of water in the corresponding vessel.",
    "note": "",
    "topics": [
      "data structures",
      "dsu",
      "implementation",
      "trees"
    ],
    "id": "371D"
  },
  {
    "title": "Valera and Queries",
    "url": "https://codeforces.com/problemset/problem/369/E",
    "history": "Valera loves segments. He has recently come up with one interesting problem. The Ox axis of coordinates has n segments, the i- th segment starts in position li and ends in position ri ( we will mark it as [ li, ri] ) . Your task is to process m queries, each consists of number cnti and a set of cnti coordinates of points located on the Ox axis. The answer to the query is the number of segments, such that each of them contains at least one point from the query. Segment [ l, r] contains point q, if l \u2264 q \u2264 r. Valera found the solution of this problem too difficult. So he asked you to help him. Help Valera.",
    "input": "The first line contains two integers n, m ( 1 \u2264 n, m \u2264 3\u00b7105) \u2014 the number of segments on the axis of coordinates and the number of queries. Next n lines contain the descriptions of the segments. The i- th line contains two positive integers li, ri ( 1 \u2264 li \u2264 ri \u2264 106) \u2014 the borders of the i- th segment. Next m lines contain the description of the queries, one per line. Each line starts from integer cnti ( 1 \u2264 cnti \u2264 3\u00b7105) \u2014 the number of points in the i- th query. Then the line contains cnti distinct positive integers p1, p2, . . . , pcnti ( 1 \u2264 p1 < p2 < . . . < pcnti \u2264 106) \u2014 the coordinates of points in the i- th query. It is guaranteed that the total number of points in all queries doesn' t exceed 3\u00b7105.",
    "output": "Print m non- negative integers, where the i- th number is the response to the i- th query.",
    "note": "",
    "topics": [
      "binary search",
      "data structures"
    ],
    "id": "369E"
  },
  {
    "title": "Sereja and Suffixes",
    "url": "https://codeforces.com/problemset/problem/368/B",
    "history": "Sereja has an array a, consisting of n integers a1, a2, . . . , an. The boy cannot sit and do nothing, he decided to study an array. Sereja took a piece of paper and wrote out m integers l1, l2, . . . , lm ( 1 \u2264 li \u2264 n) . For each number li he wants to know how many distinct numbers are staying on the positions li, li + 1, . . . , n. Formally, he want to find the number of distinct numbers among ali, ali + 1, . . . , an. ? Sereja wrote out the necessary array elements but the array was so large and the boy was so pressed for time. Help him, find the answer for the described question for each li.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 105) . The second line contains n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 105) \u2014 the array elements. Next m lines contain integers l1, l2, . . . , lm. The i- th line contains integer li ( 1 \u2264 li \u2264 n) .",
    "output": "Print m lines \u2014 on the i- th line print the answer to the number li.",
    "note": "",
    "topics": [
      "data structures",
      "dp"
    ],
    "id": "368B"
  },
  {
    "title": "Sereja ans Anagrams",
    "url": "https://codeforces.com/problemset/problem/367/B",
    "history": "Sereja has two sequences a and b and number p. Sequence a consists of n integers a1, a2, . . . , an. Similarly, sequence b consists of m integers b1, b2, . . . , bm. As usual, Sereja studies the sequences he has. Today he wants to find the number of positions q ( q + ( m - 1) \u00b7p \u2264 n; q \u2265 1) , such that sequence b can be obtained from sequence aq, aq + p, aq + 2p, . . . , aq + ( m - 1) p by rearranging elements. Sereja needs to rush to the gym, so he asked to find all the described positions of q.",
    "input": "The first line contains three integers n, m and p ( 1 \u2264 n, m \u2264 2\u00b7105, 1 \u2264 p \u2264 2\u00b7105) . The next line contains n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) . The next line contains m integers b1, b2, . . . , bm ( 1 \u2264 bi \u2264 109) .",
    "output": "In the first line print the number of valid qs. In the second line, print the valid values in the increasing order.",
    "note": "",
    "topics": [
      "binary search",
      "data structures"
    ],
    "id": "367B"
  },
  {
    "title": "Sereja and Algorithm ",
    "url": "https://codeforces.com/problemset/problem/367/A",
    "history": "Sereja loves all sorts of algorithms. He has recently come up with a new algorithm, which receives a string as an input. Let' s represent the input string of the algorithm as q = q1q2. . . qk. The algorithm consists of two steps: Find any continuous subsequence ( substring) of three characters of string q, which doesn' t equal to either string \" zyx\" , \" xzy\" , \" yxz\" . If q doesn' t contain any such subsequence, terminate the algorithm, otherwise go to step 2. Rearrange the letters of the found subsequence randomly and go to step 1. Sereja thinks that the algorithm works correctly on string q if there is a non- zero probability that the algorithm will be terminated. But if the algorithm anyway will work for infinitely long on a string, then we consider the algorithm to work incorrectly on this string. Sereja wants to test his algorithm. For that, he has string s = s1s2. . . sn, consisting of n characters. The boy conducts a series of m tests. As the i- th test, he sends substring slisli + 1. . . sri ( 1 \u2264 li \u2264 ri \u2264 n) to the algorithm input. Unfortunately, the implementation of his algorithm works too long, so Sereja asked you to help. For each test ( li, ri) determine if the algorithm works correctly on this test or not.",
    "input": "The first line contains non- empty string s, its length ( n) doesn' t exceed 105. It is guaranteed that string s only contains characters: ' x' , ' y' , ' z' . The second line contains integer m ( 1 \u2264 m \u2264 105) \u2014 the number of tests. Next m lines contain the tests. The i- th line contains a pair of integers li, ri ( 1 \u2264 li \u2264 ri \u2264 n) .",
    "output": "For each test, print \" YES\" ( without the quotes) if the algorithm works correctly on the corresponding test and \" NO\" ( without the quotes) otherwise.",
    "note": "In the first example, in test one and two the algorithm will always be terminated in one step. In the fourth test you can get string \" xzyx\" on which the algorithm will terminate. In all other tests the algorithm doesn' t work correctly.",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "367A"
  },
  {
    "title": "Dima and Trap Graph",
    "url": "https://codeforces.com/problemset/problem/366/D",
    "history": "Dima and Inna love spending time together. The problem is, Seryozha isn' t too enthusiastic to leave his room for some reason. But Dima and Inna love each other so much that they decided to get criminal. . . Dima constructed a trap graph. He shouted: \" Hey Seryozha, have a look at my cool graph! \" to get his roommate interested and kicked him into the first node. A trap graph is an undirected graph consisting of n nodes and m edges. For edge number k, Dima denoted a range of integers from lk to rk ( lk \u2264 rk) . In order to get out of the trap graph, Seryozha initially ( before starting his movements) should pick some integer ( let' s call it x) , then Seryozha must go some way from the starting node with number 1 to the final node with number n. At that, Seryozha can go along edge k only if lk \u2264 x \u2264 rk. Seryozha is a mathematician. He defined the loyalty of some path from the 1- st node to the n- th one as the number of integers x, such that if he initially chooses one of them, he passes the whole path. Help Seryozha find the path of maximum loyalty and return to his room as quickly as possible!",
    "input": "The first line of the input contains two integers n and m ( 2 \u2264 n \u2264 103, 0 \u2264 m \u2264 3\u00b7103) . Then follow m lines describing the edges. Each line contains four integers ak, bk, lk and rk ( 1 \u2264 ak, bk \u2264 n, 1 \u2264 lk \u2264 rk \u2264 106) . The numbers mean that in the trap graph the k- th edge connects nodes ak and bk, this edge corresponds to the range of integers from lk to rk. Note that the given graph can have loops and multiple edges.",
    "output": "In a single line of the output print an integer \u2014 the maximum loyalty among all paths from the first node to the n- th one. If such paths do not exist or the maximum loyalty equals 0, print in a single line \" Nice work, Dima! \" without the quotes.",
    "note": "Explanation of the first example. Overall, we have 2 ways to get from node 1 to node 4: first you must go along the edge 1- 2 with range [ 1- 10] , then along one of the two edges 2- 4. One of them contains range [ 3- 5] , that is, we can pass through with numbers 3, 4, 5. So the loyalty of such path is 3. If we go along edge 2- 4 with range [ 2- 7] , then we can pass through with numbers 2, 3, 4, 5, 6, 7. The loyalty is 6. That is the answer. The edge 1- 2 have no influence on the answer because its range includes both ranges of the following edges.",
    "topics": [
      "binary search",
      "data structures",
      "dfs and similar",
      "dsu",
      "shortest paths",
      "two pointers"
    ],
    "id": "366D"
  },
  {
    "title": "Matrix",
    "url": "https://codeforces.com/problemset/problem/364/A",
    "history": "You have a string of decimal digits s. Let' s define bij = si\u00b7sj. Find in matrix b the number of such rectangles that the sum bij for all cells ( i, j) that are the elements of the rectangle equals a in each rectangle. A rectangle in a matrix is a group of four integers ( x, y, z, t) ( x \u2264 y, z \u2264 t) . The elements of the rectangle are all cells ( i, j) such that x \u2264 i \u2264 y, z \u2264 j \u2264 t.",
    "input": "The first line contains integer a ( 0 \u2264 a \u2264 109) , the second line contains a string of decimal integers s ( 1 \u2264 | s| \u2264 4000) .",
    "output": "Print a single integer \u2014 the answer to a problem. Please, do not write the",
    "note": "",
    "topics": [
      "combinatorics",
      "data structures",
      "implementation"
    ],
    "id": "364A"
  },
  {
    "title": "Two Circles",
    "url": "https://codeforces.com/problemset/problem/363/E",
    "history": "Let' s assume that we are given an n \u00d7 m table filled by integers. We' ll mark a cell in the i- th row and j- th column as ( i, j) . Thus, ( 1, 1) is the upper left cell of the table and ( n, m) is the lower right cell. We' ll assume that a circle of radius r with the center in cell ( i0, j0) is a set of such cells ( i, j) that . We' ll consider only the circles that do not go beyond the limits of the table, that is, for which r + 1 \u2264 i0 \u2264 n - r and r + 1 \u2264 j0 \u2264 m - r. A circle of radius 3 with the center at ( 4, 5) . Find two such non- intersecting circles of the given radius r that the sum of numbers in the cells that belong to these circles is maximum. Two circles intersect if there is a cell that belongs to both circles. As there can be more than one way to choose a pair of circles with the maximum sum, we will also be interested in the number of such pairs. Calculate the number of unordered pairs of circles, for instance, a pair of circles of radius 2 with centers at ( 3, 4) and ( 7, 7) is the same pair as the pair of circles of radius 2 with centers at ( 7, 7) and ( 3, 4) .",
    "input": "The first line contains three integers n, m and r ( 2 \u2264 n, m \u2264 500, r \u2265 0) . Each of the following n lines contains m integers from 1 to 1000 each \u2014 the elements of the table. The rows of the table are listed from top to bottom at the elements in the rows are listed from left to right. It is guaranteed that there is at least one circle of radius r, not going beyond the table limits.",
    "output": "Print two integers \u2014 the maximum sum of numbers in the cells that are located into two non- intersecting circles and the number of pairs of non- intersecting circles with the maximum sum. If there isn' t a single pair of non- intersecting circles, print 0 0.",
    "note": "",
    "topics": [
      "brute force",
      "data structures",
      "implementation"
    ],
    "id": "363E"
  },
  {
    "title": "Fools and Foolproof Roads",
    "url": "https://codeforces.com/problemset/problem/362/D",
    "history": "You must have heard all about the Foolland on your Geography lessons. Specifically, you must know that federal structure of this country has been the same for many centuries. The country consists of n cities, some pairs of cities are connected by bidirectional roads, each road is described by its length li. The fools lived in their land joyfully, but a recent revolution changed the king. Now the king is Vasily the Bear. Vasily divided the country cities into regions, so that any two cities of the same region have a path along the roads between them and any two cities of different regions don' t have such path. Then Vasily decided to upgrade the road network and construct exactly p new roads in the country. Constructing a road goes like this: We choose a pair of distinct cities u, v that will be connected by a new road ( at that, it is possible that there already is a road between these cities) . We define the length of the new road: if cities u, v belong to distinct regions, then the length is calculated as min( 109, S + 1) ( S \u2014 the total length of all roads that exist in the linked regions) , otherwise we assume that the length equals 1000. We build a road of the specified length between the chosen cities. If the new road connects two distinct regions, after construction of the road these regions are combined into one new region. Vasily wants the road constructing process to result in the country that consists exactly of q regions. Your task is to come up with such road constructing plan for Vasily that it meets the requirement and minimizes the total length of the built roads.",
    "input": "The first line contains four integers n ( 1 \u2264 n \u2264 105) , m ( 0 \u2264 m \u2264 105) , p ( 0 \u2264 p \u2264 105) , q ( 1 \u2264 q \u2264 n) \u2014 the number of cities in the Foolland, the number of existing roads, the number of roads that are planned to construct and the required number of regions. Next m lines describe the roads that exist by the moment upgrading of the roads begun. Each of these lines contains three integers xi, yi, li: xi, yi \u2014 the numbers of the cities connected by this road ( 1 \u2264 xi, yi \u2264 n, xi = \u0338 yi) , li \u2014 length of the road ( 1 \u2264 li \u2264 109) . Note that one pair of cities can be connected with multiple roads.",
    "output": "If constructing the roads in the required way is impossible, print a single string \" NO\" ( without the quotes) . Otherwise, in the first line print word \" YES\" ( without the quotes) , and in the next p lines print the road construction plan. Each line of the plan must consist of two distinct integers, giving the numbers of the cities connected by a road. The road must occur in the plan in the order they need to be constructed. If there are multiple optimal solutions, you can print any of them.",
    "note": "Consider the first sample. Before the reform the Foolland consists of four regions. The first region includes cities 1, 2, 3, the second region has cities 4 and 6, the third region has cities 5, 7, 8, the fourth region has city 9. The total length of the roads in these cities is 11, 20, 5 and 0, correspondingly. According to the plan, we first build the road of length 6 between cities 5 and 9, then the road of length 23 between cities 1 and 9. Thus, the total length of the built roads equals 29.",
    "topics": [
      "data structures",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy"
    ],
    "id": "362D"
  },
  {
    "title": "Insertion Sort",
    "url": "https://codeforces.com/problemset/problem/362/C",
    "history": "Petya is a beginner programmer. He has already mastered the basics of the C+ + language and moved on to learning algorithms. The first algorithm he encountered was insertion sort. Petya has already written the code that implements this algorithm and sorts the given integer zero- indexed array a of size n in the non- decreasing order. for ( int i = 1; i < n; i = i + 1) int j = i; while ( j > 0 a[ j] < a[ j - 1] ) swap( a[ j] , a[ j - 1] ) ; / / swap elements a[ j] and a[ j - 1] j = j - 1; Petya uses this algorithm only for sorting of arrays that are permutations of numbers from 0 to n - 1. He has already chosen the permutation he wants to sort but he first decided to swap some two of its elements. Petya wants to choose these elements in such a way that the number of times the sorting executes function swap, was minimum. Help Petya find out the number of ways in which he can make the swap and fulfill this requirement. It is guaranteed that it' s always possible to swap two elements of the input permutation in such a way that the number of swap function calls decreases.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 5000) \u2014 the length of the permutation. The second line contains n different integers from 0 to n - 1, inclusive \u2014 the actual permutation.",
    "output": "Print two integers: the minimum number of times the swap function is executed and the number of such pairs ( i, j) that swapping the elements of the input permutation with indexes i and j leads to the minimum number of the executions.",
    "note": "In the first sample the appropriate pairs are ( 0, 3) and ( 0, 4) . In the second sample the appropriate pairs are ( 0, 4) , ( 1, 4) , ( 2, 4) and ( 3, 4) .",
    "topics": [
      "data structures",
      "dp",
      "implementation",
      "math"
    ],
    "id": "362C"
  },
  {
    "title": "Pair of Numbers",
    "url": "https://codeforces.com/problemset/problem/359/D",
    "history": "Simon has an array a1, a2, . . . , an, consisting of n positive integers. Today Simon asked you to find a pair of integers l, r ( 1 \u2264 l \u2264 r \u2264 n) , such that the following conditions hold: there is integer j ( l \u2264 j \u2264 r) , such that all integers al, al + 1, . . . , ar are divisible by aj; value r - l takes the maximum value among all pairs for which condition 1 is true; Help Simon, find the required pair of numbers ( l, r) . If there are multiple required pairs find all of them.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 3\u00b7105) . The second line contains n space- separated integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 106) .",
    "output": "Print two integers in the first line \u2014 the number of required pairs and the maximum value of r - l. On the following line print all l values from optimal pairs in increasing order.",
    "note": "In the first sample the pair of numbers is right, as numbers 6, 9, 3 are divisible by 3. In the second sample all numbers are divisible by number 1. In the third sample all numbers are prime, so conditions 1 and 2 are true only for pairs of numbers ( 1, 1) , ( 2, 2) , ( 3, 3) , ( 4, 4) , ( 5, 5) .",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "math",
      "two pointers"
    ],
    "id": "359D"
  },
  {
    "title": "Knight Tournament",
    "url": "https://codeforces.com/problemset/problem/356/A",
    "history": "Hooray! Berl II, the king of Berland is making a knight tournament. The king has already sent the message to all knights in the kingdom and they in turn agreed to participate in this grand event. As for you, you' re just a simple peasant. There' s no surprise that you slept in this morning and were late for the tournament ( it was a weekend, after all) . Now you are really curious about the results of the tournament. This time the tournament in Berland went as follows: There are n knights participating in the tournament. Each knight was assigned his unique number \u2014 an integer from 1 to n. The tournament consisted of m fights, in the i- th fight the knights that were still in the game with numbers at least li and at most ri have fought for the right to continue taking part in the tournament. After the i- th fight among all participants of the fight only one knight won \u2014 the knight number xi, he continued participating in the tournament. Other knights left the tournament. The winner of the last ( the m- th) fight ( the knight number xm) became the winner of the tournament. You fished out all the information about the fights from your friends. Now for each knight you want to know the name of the knight he was conquered by. We think that the knight number b was conquered by the knight number a, if there was a fight with both of these knights present and the winner was the knight number a. Write the code that calculates for each knight, the name of the knight that beat him.",
    "input": "The first line contains two integers n, m ( 2 \u2264 n \u2264 3\u00b7105; 1 \u2264 m \u2264 3\u00b7105) \u2014 the number of knights and the number of fights. Each of the following m lines contains three integers li, ri, xi ( 1 \u2264 li < ri \u2264 n; li \u2264 xi \u2264 ri) \u2014 the description of the i- th fight. It is guaranteed that the input is correct and matches the problem statement. It is guaranteed that at least two knights took part in each battle.",
    "output": "Print n integers. If the i- th knight lost, then the i- th number should equal the number of the knight that beat the knight number i. If the i- th knight is the winner, then the i- th number must equal 0.",
    "note": "Consider the first test case. Knights 1 and 2 fought the first fight and knight 1 won. Knights 1 and 3 fought the second fight and knight 3 won. The last fight was between knights 3 and 4, knight 4 won.",
    "topics": [
      "data structures",
      "dsu"
    ],
    "id": "356A"
  },
  {
    "title": "Jeff and Removing Periods",
    "url": "https://codeforces.com/problemset/problem/351/D",
    "history": "Cosider a sequence, consisting of n integers: a1, a2, . . . , an. Jeff can perform the following operation on sequence a: take three integers v, t, k ( 1 \u2264 v, t \u2264 n; 0 \u2264 k; v + tk \u2264 n) , such that av = av + t, av + t = av + 2t, . . . , av + t( k - 1) = av + tk; remove elements av, av + t, . . . , av + t\u00b7k from the sequence a, the remaining elements should be reindexed a1, a2, . . . , an - k - 1. permute in some order the remaining elements of sequence a. A beauty of a sequence a is the minimum number of operations that is needed to delete all elements from sequence a. Jeff' s written down a sequence of m integers b1, b2, . . . , bm. Now he wants to ask q questions. Each question can be described with two integers li, ri. The answer to the question is the beauty of sequence bli, bli + 1, . . . , bri. You are given the sequence b and all questions. Help Jeff, answer all his questions.",
    "input": "The first line contains integer m ( 1 \u2264 m \u2264 105) . The next line contains m integers b1, b2, . . . , bm ( 1 \u2264 bi \u2264 105) . The third line contains integer q ( 1 \u2264 q \u2264 105) \u2014 the number of questions. The next q lines contain pairs of integers, i- th of them contains a pair of integers li, ri ( 1 \u2264 li \u2264 ri \u2264 m) \u2014 the description of i- th question.",
    "output": "In q lines print the answers to Jeff' s queries. Print the answers according to the order of questions in input.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": "351D"
  },
  {
    "title": "Looking for Owls",
    "url": "https://codeforces.com/problemset/problem/350/D",
    "history": "Emperor Palpatine loves owls very much. The emperor has some blueprints with the new Death Star, the blueprints contain n distinct segments and m distinct circles. We will consider the segments indexed from 1 to n in some way and the circles \u2014 indexed from 1 to m in some way. Palpatine defines an owl as a set of a pair of distinct circles ( i, j) ( i < j) and one segment k, such that: circles i and j are symmetrical relatively to the straight line containing segment k; circles i and j don' t have any common points; circles i and j have the same radius; segment k intersects the segment that connects the centers of circles i and j. Help Palpatine, count the number of distinct owls on the picture.",
    "input": "The first line contains two integers \u2014 n and m ( 1 \u2264 n \u2264 3\u00b7105, 2 \u2264 m \u2264 1500) . The next n lines contain four integers each, x1, y1, x2, y2 \u2014 the coordinates of the two endpoints of the segment. It' s guaranteed that each segment has positive length. The next m lines contain three integers each, xi, yi, ri \u2014 the coordinates of the center and the radius of the i- th circle. All coordinates are integers of at most 104 in their absolute value. The radius is a positive integer of at most 104. It is guaranteed that all segments and all circles are dictinct.",
    "output": "Print a single number \u2014 the answer to the problem. Please, do not use the",
    "note": "Here' s an owl from the first sample. The owl is sitting and waiting for you to count it.",
    "topics": [
      "binary search",
      "data structures",
      "geometry",
      "hashing",
      "sortings"
    ],
    "id": "350D"
  },
  {
    "title": "Color the Fence",
    "url": "https://codeforces.com/problemset/problem/349/B",
    "history": "Igor has fallen in love with Tanya. Now Igor wants to show his feelings and write a number on the fence opposite to Tanya' s house. Igor thinks that the larger the number is, the more chance to win Tanya' s heart he has. Unfortunately, Igor could only get v liters of paint. He did the math and concluded that digit d requires ad liters of paint. Besides, Igor heard that Tanya doesn' t like zeroes. That' s why Igor won' t use them in his number. Help Igor find the maximum number he can write on the fence.",
    "input": "The first line contains a positive integer v ( 0 \u2264 v \u2264 106) . The second line contains nine positive integers a1, a2, . . . , a9 ( 1 \u2264 ai \u2264 105) .",
    "output": "Print the maximum number Igor can write on the fence. If he has too little paint for any digit ( so, he cannot write anything) , print - 1.",
    "note": "",
    "topics": [
      "data structures",
      "dp",
      "greedy",
      "implementation"
    ],
    "id": "349B"
  },
  {
    "title": "Subset Sums",
    "url": "https://codeforces.com/problemset/problem/348/C",
    "history": "You are given an array a1, a2, . . . , an and m sets S1, S2, . . . , Sm of indices of elements of this array. Let' s denote Sk = Sk, i ( 1 \u2264 i \u2264 | Sk| ) . In other words, Sk, i is some element from set Sk. In this problem you have to answer q queries of the two types: Find the sum of elements with indices from set Sk: . The query format is \" ? k\" . Add number x to all elements at indices from set Sk: aSk, i is replaced by aSk, i + x for all i ( 1 \u2264 i \u2264 | Sk| ) . The query format is \" + k x\" . After each first type query print the required sum.",
    "input": "The first line contains integers n, m, q ( 1 \u2264 n, m, q \u2264 105) . The second line contains n integers a1, a2, . . . , an ( | ai| \u2264 108) \u2014 elements of array a. Each of the following m lines describes one set of indices. The k- th line first contains a positive integer, representing the number of elements in set ( | Sk| ) , then follow | Sk| distinct integers Sk, 1, Sk, 2, . . . , Sk, | Sk| ( 1 \u2264 Sk, i \u2264 n) \u2014 elements of set Sk. The next q lines contain queries. Each query looks like either \" ? k\" or \" + k x\" and sits on a single line. For all queries the following limits are held: 1 \u2264 k \u2264 m, | x| \u2264 108. The queries are given in order they need to be answered. It is guaranteed that the sum of sizes of all sets Sk doesn' t exceed 105.",
    "output": "After each first type query print the required sum on a single line. Please, do not write the",
    "note": "",
    "topics": [
      "brute force",
      "data structures"
    ],
    "id": "348C"
  },
  {
    "title": "Water Tree",
    "url": "https://codeforces.com/problemset/problem/343/D",
    "history": "Mad scientist Mike has constructed a rooted tree, which consists of n vertices. Each vertex is a reservoir which can be either empty or filled with water. The vertices of the tree are numbered from 1 to n with the root at vertex 1. For each vertex, the reservoirs of its children are located below the reservoir of this vertex, and the vertex is connected with each of the children by a pipe through which water can flow downwards. Mike wants to do the following operations with the tree: Fill vertex v with water. Then v and all its children are filled with water. Empty vertex v. Then v and all its ancestors are emptied. Determine whether vertex v is filled with water at the moment. Initially all vertices of the tree are empty. Mike has already compiled a full list of operations that he wants to perform in order. Before experimenting with the tree Mike decided to run the list through a simulation. Help Mike determine what results will he get after performing all the operations.",
    "input": "The first line of the input contains an integer n ( 1 \u2264 n \u2264 500000) \u2014 the number of vertices in the tree. Each of the following n - 1 lines contains two space- separated numbers ai, bi ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi) \u2014 the edges of the tree. The next line contains a number q ( 1 \u2264 q \u2264 500000) \u2014 the number of operations to perform. Each of the following q lines contains two space- separated numbers ci ( 1 \u2264 ci \u2264 3) , vi ( 1 \u2264 vi \u2264 n) , where ci is the operation type ( according to the numbering given in the statement) , and vi is the vertex on which the operation is performed. It is guaranteed that the given graph is a tree.",
    "output": "For each type 3 operation print 1 on a separate line if the vertex is full, and 0 if the vertex is empty. Print the answers to queries in the order in which the queries are given in the input.",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "graphs",
      "trees"
    ],
    "id": "343D"
  },
  {
    "title": "Alternating Current",
    "url": "https://codeforces.com/problemset/problem/343/B",
    "history": "Mad scientist Mike has just finished constructing a new device to search for extraterrestrial intelligence! He was in such a hurry to launch it for the first time that he plugged in the power wires without giving it a proper glance and started experimenting right away. After a while Mike observed that the wires ended up entangled and now have to be untangled again. The device is powered by two wires \" plus\" and \" minus\" . The wires run along the floor from the wall ( on the left) to the device ( on the right) . Both the wall and the device have two contacts in them on the same level, into which the wires are plugged in some order. The wires are considered entangled if there are one or more places where one wire runs above the other one. For example, the picture below has four such places ( top view) : Mike knows the sequence in which the wires run above each other. Mike also noticed that on the left side, the \" plus\" wire is always plugged into the top contact ( as seen on the picture) . He would like to untangle the wires without unplugging them and without moving the device. Determine if it is possible to do that. A wire can be freely moved and stretched on the floor, but cannot be cut. To understand the problem better please read the notes to the test samples.",
    "input": "The single line of the input contains a sequence of characters \" + \" and \" - \" of length n ( 1 \u2264 n \u2264 100000) . The i- th ( 1 \u2264 i \u2264 n) position of the sequence contains the character \" + \" , if on the i- th step from the wall the \" plus\" wire runs above the \" minus\" wire, and the character \" - \" otherwise.",
    "output": "Print either \" Yes\" ( without the quotes) if the wires can be untangled or \" No\" ( without the quotes) if the wires cannot be untangled.",
    "note": "The first testcase corresponds to the picture in the statement. To untangle the wires, one can first move the \" plus\" wire lower, thus eliminating the two crosses in the middle, and then draw it under the \" minus\" wire, eliminating also the remaining two crosses. In the second testcase the \" plus\" wire makes one full revolution around the \" minus\" wire. Thus the wires cannot be untangled: In the third testcase the \" plus\" wire simply runs above the \" minus\" wire twice in sequence. The wires can be untangled by lifting \" plus\" and moving it higher: In the fourth testcase the \" minus\" wire runs above the \" plus\" wire once. The wires cannot be untangled without moving the device itself:",
    "topics": [
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "343B"
  },
  {
    "title": "Xenia and Tree",
    "url": "https://codeforces.com/problemset/problem/342/E",
    "history": "Xenia the programmer has a tree consisting of n nodes. We will consider the tree nodes indexed from 1 to n. We will also consider the first node to be initially painted red, and the other nodes \u2014 to be painted blue. The distance between two tree nodes v and u is the number of edges in the shortest path between v and u. Xenia needs to learn how to quickly execute queries of two types: paint a specified blue node in red; calculate which red node is the closest to the given one and print the shortest distance to the closest red node. Your task is to write a program which will execute the described queries.",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 105, 1 \u2264 m \u2264 105) \u2014 the number of nodes in the tree and the number of queries. Next n - 1 lines contain the tree edges, the i- th line contains a pair of integers ai, bi ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi) \u2014 an edge of the tree. Next m lines contain queries. Each query is specified as a pair of integers ti, vi ( 1 \u2264 ti \u2264 2, 1 \u2264 vi \u2264 n) . If ti = 1, then as a reply to the query we need to paint a blue node vi in red. If ti = 2, then we should reply to the query by printing the shortest distance from some red node to node vi. It is guaranteed that the given graph is a tree and that all queries are correct.",
    "output": "For each second type query print the reply in a single line.",
    "note": "",
    "topics": [
      "data structures",
      "divide and conquer",
      "trees"
    ],
    "id": "342E"
  },
  {
    "title": "Iahub and Xors",
    "url": "https://codeforces.com/problemset/problem/341/D",
    "history": "Iahub does not like background stories, so he' ll tell you exactly what this problem asks you for. You are given a matrix a with n rows and n columns. Initially, all values of the matrix are zeros. Both rows and columns are 1- based, that is rows are numbered 1, 2, . . . , n and columns are numbered 1, 2, . . . , n. Let' s denote an element on the i- th row and j- th column as ai, j. We will call a submatrix ( x0, y0, x1, y1) such elements ai, j for which two inequalities hold: x0 \u2264 i \u2264 x1, y0 \u2264 j \u2264 y1. Write a program to perform two following operations: Query( x0, y0, x1, y1) : print the xor sum of the elements of the submatrix ( x0, y0, x1, y1) . Update( x0, y0, x1, y1, v) : each element from submatrix ( x0, y0, x1, y1) gets xor- ed by value v.",
    "input": "The first line contains two integers: n ( 1 \u2264 n \u2264 1000) and m ( 1 \u2264 m \u2264 105) . The number m represents the number of operations you need to perform. Each of the next m lines contains five or six integers, depending on operation type. If the i- th operation from the input is a query, the first number from i- th line will be 1. It will be followed by four integers x0, y0, x1, y1. If the i- th operation is an update, the first number from the i- th line will be 2. It will be followed by five integers x0, y0, x1, y1, v. It is guaranteed that for each update operation, the following inequality holds: 0 \u2264 v < 262. It is guaranteed that for each operation, the following inequalities hold: 1 \u2264 x0 \u2264 x1 \u2264 n, 1 \u2264 y0 \u2264 y1 \u2264 n.",
    "output": "For each query operation, output on a new line the result.",
    "note": "After the first 3 operations, the matrix will look like this: 1 1 21 1 23 3 3The fourth operation asks us to compute 1 xor 2 xor 3 xor 3 = 3. The fifth operation asks us to compute 1 xor 3 = 2.",
    "topics": [
      "data structures"
    ],
    "id": "341D"
  },
  {
    "title": "Bubble Sort Graph",
    "url": "https://codeforces.com/problemset/problem/340/D",
    "history": "Iahub recently has learned Bubble Sort, an algorithm that is used to sort a permutation with n elements a1, a2, . . . , an in ascending order. He is bored of this so simple algorithm, so he invents his own graph. The graph ( let' s call it G) initially has n vertices and 0 edges. During Bubble Sort execution, edges appear as described in the following algorithm ( pseudocode) . procedure bubbleSortGraph( ) build a graph G with n vertices and 0 edges repeat swapped = false for i = 1 to n - 1 inclusive do: if a[ i] > a[ i + 1] then add an undirected edge in G between a[ i] and a[ i + 1] swap( a[ i] , a[ i + 1] ) swapped = true end if end for until not swapped / * repeat the algorithm as long as swapped value is true. * / end procedureFor a graph, an independent set is a set of vertices in a graph, no two of which are adjacent ( so there are no edges between vertices of an independent set) . A maximum independent set is an independent set which has maximum cardinality. Given the permutation, find the size of the maximum independent set of graph G, if we use such permutation as the premutation a in procedure bubbleSortGraph.",
    "input": "The first line of the input contains an integer n ( 2 \u2264 n \u2264 105) . The next line contains n distinct integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 n) .",
    "output": "Output a single integer \u2014 the answer to the problem.",
    "note": "Consider the first example. Bubble sort swaps elements 3 and 1. We add edge ( 1, 3) . Permutation is now [ 1, 3, 2] . Then bubble sort swaps elements 3 and 2. We add edge ( 2, 3) . Permutation is now sorted. We have a graph with 3 vertices and 2 edges ( 1, 3) and ( 2, 3) . Its maximal independent set is [ 1, 2] .",
    "topics": [
      "binary search",
      "data structures",
      "dp"
    ],
    "id": "340D"
  },
  {
    "title": "Xenia and Bit Operations",
    "url": "https://codeforces.com/problemset/problem/339/D",
    "history": "Xenia the beginner programmer has a sequence a, consisting of 2n non- negative integers: a1, a2, . . . , a2n. Xenia is currently studying bit operations. To better understand how they work, Xenia decided to calculate some value v for a. Namely, it takes several iterations to calculate value v. At the first iteration, Xenia writes a new sequence a1 or a2, a3 or a4, . . . , a2n - 1 or a2n, consisting of 2n - 1 elements. In other words, she writes down the bit- wise OR of adjacent elements of sequence a. At the second iteration, Xenia writes the bitwise exclusive OR of adjacent elements of the sequence obtained after the first iteration. At the third iteration Xenia writes the bitwise OR of the adjacent elements of the sequence obtained after the second iteration. And so on; the operations of bitwise exclusive OR and bitwise OR alternate. In the end, she obtains a sequence consisting of one element, and that element is v. Let' s consider an example. Suppose that sequence a = ( 1, 2, 3, 4) . Then let' s write down all the transformations ( 1, 2, 3, 4) \u2192 ( 1 or 2 = 3, 3 or 4 = 7) \u2192 ( 3 xor 7 = 4) . The result is v = 4. You are given Xenia' s initial sequence. But to calculate value v for a given sequence would be too easy, so you are given additional m queries. Each query is a pair of integers p, b. Query p, b means that you need to perform the assignment ap = b. After each query, you need to print the new value v for the new sequence a.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 17, 1 \u2264 m \u2264 105) . The next line contains 2n integers a1, a2, . . . , a2n ( 0 \u2264 ai < 230) . Each of the next m lines contains queries. The i- th line contains integers pi, bi ( 1 \u2264 pi \u2264 2n, 0 \u2264 bi < 230) \u2014 the i- th query.",
    "output": "Print m integers \u2014 the i- th integer denotes value v for sequence a after the i- th query.",
    "note": "For more information on the bit operations, you can follow this link: http: / / en. wikipedia. org/ wiki/ Bitwise_ operation",
    "topics": [
      "data structures",
      "trees"
    ],
    "id": "339D"
  },
  {
    "title": "Optimize!",
    "url": "https://codeforces.com/problemset/problem/338/E",
    "history": "Manao is solving a problem with the following statement: He came up with a solution that produces the correct answers but is too slow. You are given the pseudocode of his solution, where the function getAnswer calculates the answer to the problem: getAnswer( a[ 1. . n] , b[ 1. . len] , h) answer = 0 for i = 1 to n- len+ 1 answer = answer + f( a[ i. . i+ len- 1] , b, h, 1) return answerf( s[ 1. . len] , b[ 1. . len] , h, index) if index = len+ 1 then return 1 for i = 1 to len if s[ index] + b[ i] > = h mem = b[ i] b[ i] = 0 res = f( s, b, h, index + 1) b[ i] = mem if res > 0 return 1 return 0Your task is to help Manao optimize his algorithm.",
    "input": "The first line contains space- separated integers n, len and h ( 1 \u2264 len \u2264 n \u2264 150000; 1 \u2264 h \u2264 109) . The second line contains len space- separated integers b1, b2, . . . , blen ( 1 \u2264 bi \u2264 109) . The third line contains n space- separated integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) .",
    "output": "Print a single number \u2014 the answer to Manao' s problem.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": "338E"
  },
  {
    "title": "Students' Revenge",
    "url": "https://codeforces.com/problemset/problem/332/C",
    "history": "A student' s life is fraught with complications. Some Berland University students know this only too well. Having studied for two years, they contracted strong antipathy towards the chairperson of some department. Indeed, the person in question wasn' t the kindest of ladies to begin with: prone to reforming groups, banning automatic passes and other mean deeds. At last the students decided that she just can' t get away with all this anymore. . . The students pulled some strings on the higher levels and learned that the next University directors' meeting is going to discuss n orders about the chairperson and accept exactly p of them. There are two values assigned to each order: ai is the number of the chairperson' s hairs that turn grey if she obeys the order and bi \u2014 the displeasement of the directors if the order isn' t obeyed. The students may make the directors pass any p orders chosen by them. The students know that the chairperson will obey exactly k out of these p orders. She will pick the orders to obey in the way that minimizes first, the directors' displeasement and second, the number of hairs on her head that turn grey. The students want to choose p orders in the way that maximizes the number of hairs on the chairperson' s head that turn grey. If there are multiple ways to accept the orders, then the students are keen on maximizing the directors' displeasement with the chairperson' s actions. Help them.",
    "input": "The first line contains three integers n ( 1 \u2264 n \u2264 105) , p ( 1 \u2264 p \u2264 n) , k ( 1 \u2264 k \u2264 p) \u2014 the number of orders the directors are going to discuss, the number of orders to pass and the number of orders to be obeyed by the chairperson, correspondingly. Each of the following n lines contains two integers ai and bi ( 1 \u2264 ai, bi \u2264 109) , describing the corresponding order.",
    "output": "Print in an arbitrary order p distinct integers \u2014 the numbers of the orders to accept so that the students could carry out the revenge. The orders are indexed from 1 to n in the order they occur in the input. If there are multiple solutions, you can print any of them.",
    "note": "In the first sample one of optimal solutions is to pass orders 1, 2, 3. In this case the chairperson obeys orders number 1 and 2. She gets 10 new grey hairs in the head and the directors' displeasement will equal 3. Note that the same result can be achieved with order 4 instead of order 3. In the second sample, the chairperson can obey all the orders, so the best strategy for the students is to pick the orders with the maximum sum of ai values. The chairperson gets 58 new gray hairs and the directors' displeasement will equal 0.",
    "topics": [
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "332C"
  },
  {
    "title": "Maximum Absurdity",
    "url": "https://codeforces.com/problemset/problem/332/B",
    "history": "Reforms continue entering Berland. For example, during yesterday sitting the Berland Parliament approved as much as n laws ( each law has been assigned a unique number from 1 to n) . Today all these laws were put on the table of the President of Berland, G. W. Boosch, to be signed. This time mr. Boosch plans to sign 2k laws. He decided to choose exactly two non- intersecting segments of integers from 1 to n of length k and sign all laws, whose numbers fall into these segments. More formally, mr. Boosch is going to choose two integers a, b ( 1 \u2264 a \u2264 b \u2264 n - k + 1, b - a \u2265 k) and sign all laws with numbers lying in the segments [ a; a + k - 1] and [ b; b + k - 1] ( borders are included) . As mr. Boosch chooses the laws to sign, he of course considers the public opinion. Allberland Public Opinion Study Centre ( APOSC) conducted opinion polls among the citizens, processed the results into a report and gave it to the president. The report contains the absurdity value for each law, in the public opinion. As mr. Boosch is a real patriot, he is keen on signing the laws with the maximum total absurdity. Help him.",
    "input": "The first line contains two integers n and k ( 2 \u2264 n \u2264 2\u00b7105, 0 < 2k \u2264 n) \u2014 the number of laws accepted by the parliament and the length of one segment in the law list, correspondingly. The next line contains n integers x1, x2, . . . , xn \u2014 the absurdity of each law ( 1 \u2264 xi \u2264 109) .",
    "output": "Print two integers a, b \u2014 the beginning of segments that mr. Boosch should choose. That means that the president signs laws with numbers from segments [ a; a + k - 1] and [ b; b + k - 1] . If there are multiple solutions, print the one with the minimum number a. If there still are multiple solutions, print the one with the minimum b.",
    "note": "In the first sample mr. Boosch signs laws with numbers from segments [ 1; 2] and [ 4; 5] . The total absurdity of the signed laws equals 3 + 6 + 1 + 6 = 16. In the second sample mr. Boosch signs laws with numbers from segments [ 1; 2] and [ 3; 4] . The total absurdity of the signed laws equals 1 + 1 + 1 + 1 = 4.",
    "topics": [
      "data structures",
      "dp",
      "implementation"
    ],
    "id": "332B"
  },
  {
    "title": "Escaping on Beaveractor",
    "url": "https://codeforces.com/problemset/problem/331/D3",
    "history": "Don' t put up with what you' re sick of! The Smart Beaver decided to escape from the campus of Beaver Science Academy ( BSA) . BSA is a b \u00d7 b square on a plane. Each point x, y ( 0 \u2264 x, y \u2264 b) belongs to BSA. To make the path quick and funny, the Beaver constructed a Beaveractor, an effective and comfortable types of transport. The campus obeys traffic rules: there are n arrows, parallel to the coordinate axes. The arrows do not intersect and do not touch each other. When the Beaveractor reaches some arrow, it turns in the arrow' s direction and moves on until it either reaches the next arrow or gets outside the campus. The Beaveractor covers exactly one unit of space per one unit of time. You can assume that there are no obstacles to the Beaveractor. The BSA scientists want to transport the brand new Beaveractor to the \" Academic Tractor\" research institute and send the Smart Beaver to do his postgraduate studies and sharpen pencils. They have q plans, representing the Beaveractor' s initial position ( xi, yi) , the initial motion vector wi and the time ti that have passed after the escape started. Your task is for each of the q plans to determine the Smart Beaver' s position after the given time.",
    "input": "The first line contains two integers: the number of traffic rules n and the size of the campus b, 0 \u2264 n, 1 \u2264 b. Next n lines contain the rules. Each line of the rules contains four space- separated integers x0, y0, x1, y1 \u2014 the beginning and the end of the arrow. It is guaranteed that all arrows are parallel to the coordinate axes and have no common points. All arrows are located inside the campus, that is, 0 \u2264 x0, y0, x1, y1 \u2264 b holds. Next line contains integer q \u2014 the number of plans the scientists have, 1 \u2264 q \u2264 105. The i- th plan is represented by two integers, xi, yi are the Beaveractor' s coordinates at the initial time, 0 \u2264 xi, yi \u2264 b, character wi, that takes value U, D, L, R and sets the initial direction up, down, to the left or to the right correspondingly ( the Y axis is directed upwards) , and ti \u2014 the time passed after the escape started, 0 \u2264 ti \u2264 1015. to get 30 points you need to solve the problem with constraints n, b \u2264 30 ( subproblem D1) ; to get 60 points you need to solve the problem with constraints n, b \u2264 1000 ( subproblems D1+ D2) ; to get 100 points you need to solve the problem with constraints n, b \u2264 105 ( subproblems D1+ D2+ D3) .",
    "output": "Print q lines. Each line should contain two integers \u2014 the Beaveractor' s coordinates at the final moment of time for each plan. If the Smart Beaver manages to leave the campus in time ti, print the coordinates of the last point in the campus he visited.",
    "note": "",
    "topics": [
      "data structures",
      "implementation",
      "trees"
    ],
    "id": "331D3"
  },
  {
    "title": "Shave Beaver!",
    "url": "https://codeforces.com/problemset/problem/331/B2",
    "history": "The Smart Beaver has recently designed and built an innovative nanotechnologic all- purpose beaver mass shaving machine, \" Beavershave 5000\" . Beavershave 5000 can shave beavers by families! How does it work? Very easily! There are n beavers, each of them has a unique id from 1 to n. Consider a permutation a1, a2, . . . , an of n these beavers. Beavershave 5000 needs one session to shave beavers with ids from x to y ( inclusive) if and only if there are such indices i1 < i2 < . . . < ik, that ai1 = x, ai2 = x + 1, . . . , aik - 1 = y - 1, aik = y. And that is really convenient. For example, it needs one session to shave a permutation of beavers 1, 2, 3, . . . , n. If we can' t shave beavers from x to y in one session, then we can split these beavers into groups [ x, p1] , [ p1 + 1, p2] , . . . , [ pm + 1, y] ( x \u2264 p1 < p2 < . . . < pm < y) , in such a way that the machine can shave beavers in each group in one session. But then Beavershave 5000 needs m + 1 working sessions to shave beavers from x to y. All beavers are restless and they keep trying to swap. So if we consider the problem more formally, we can consider queries of two types: what is the minimum number of sessions that Beavershave 5000 needs to shave beavers with ids from x to y, inclusive? two beavers on positions x and y ( the beavers ax and ay) swapped. You can assume that any beaver can be shaved any number of times.",
    "input": "The first line contains integer n \u2014 the total number of beavers, 2 \u2264 n. The second line contains n space- separated integers \u2014 the initial beaver permutation. The third line contains integer q \u2014 the number of queries, 1 \u2264 q \u2264 105. The next q lines contain the queries. Each query i looks as pi xi yi, where pi is the query type ( 1 is to shave beavers from xi to yi, inclusive, 2 is to swap beavers on positions xi and yi) . All queries meet the condition: 1 \u2264 xi < yi \u2264 n. to get 30 points, you need to solve the problem with constraints: n \u2264 100 ( subproblem B1) ; to get 100 points, you need to solve the problem with constraints: n \u2264 3\u00b7105 ( subproblems B1+ B2) . Note that the number of queries q is limited 1 \u2264 q \u2264 105 in both subproblem B1 and subproblem B2.",
    "output": "For each query with pi = 1, print the minimum number of Beavershave 5000 sessions.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": "331B2"
  },
  {
    "title": "Oh Sweet Beaverette",
    "url": "https://codeforces.com/problemset/problem/331/A2",
    "history": "\u2014 Oh my sweet Beaverette, would you fancy a walk along a wonderful woodland belt with me? \u2014 Of course, my Smart Beaver! Let us enjoy the splendid view together. How about Friday night? At this point the Smart Beaver got rushing. Everything should be perfect by Friday, so he needed to prepare the belt to the upcoming walk. He needed to cut down several trees. Let' s consider the woodland belt as a sequence of trees. Each tree i is described by the esthetic appeal ai \u2014 some trees are very esthetically pleasing, others are ' so- so' , and some trees are positively ugly! The Smart Beaver calculated that he needed the following effects to win the Beaverette' s heart: The first objective is to please the Beaverette: the sum of esthetic appeal of the remaining trees must be maximum possible; the second objective is to surprise the Beaverette: the esthetic appeal of the first and the last trees in the resulting belt must be the same; and of course, the walk should be successful: there must be at least two trees in the woodland belt left. Now help the Smart Beaver! Which trees does he need to cut down to win the Beaverette' s heart?",
    "input": "The first line contains a single integer n \u2014 the initial number of trees in the woodland belt, 2 \u2264 n. The second line contains space- separated integers ai \u2014 the esthetic appeals of each tree. All esthetic appeals do not exceed 109 in their absolute value. to get 30 points, you need to solve the problem with constraints: n \u2264 100 ( subproblem A1) ; to get 100 points, you need to solve the problem with constraints: n \u2264 3\u00b7105 ( subproblems A1+ A2) .",
    "output": "In the first line print two integers \u2014 the total esthetic appeal of the woodland belt after the Smart Beaver' s intervention and the number of the cut down trees k. In the next line print k integers \u2014 the numbers of the trees the Beaver needs to cut down. Assume that the trees are numbered from 1 to n from left to right. If there are multiple solutions, print any of them. It is guaranteed that at least two trees have equal esthetic appeal.",
    "note": "",
    "topics": [
      "data structures",
      "sortings"
    ],
    "id": "331A2"
  },
  {
    "title": "Two permutations",
    "url": "https://codeforces.com/problemset/problem/323/C",
    "history": "You are given two permutations p and q, consisting of n elements, and m queries of the form: l1, r1, l2, r2 ( l1 \u2264 r1; l2 \u2264 r2) . The response for the query is the number of such integers from 1 to n, that their position in the first permutation is in segment [ l1, r1] ( borders included) , and position in the second permutation is in segment [ l2, r2] ( borders included too) . A permutation of n elements is the sequence of n distinct integers, each not less than 1 and not greater than n. Position of number v ( 1 \u2264 v \u2264 n) in permutation g1, g2, . . . , gn is such number i, that gi = v.",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 106) , the number of elements in both permutations. The following line contains n integers, separated with spaces: p1, p2, . . . , pn ( 1 \u2264 pi \u2264 n) . These are elements of the first permutation. The next line contains the second permutation q1, q2, . . . , qn in same format. The following line contains an integer m ( 1 \u2264 m \u2264 2\u00b7105) , that is the number of queries. The following m lines contain descriptions of queries one in a line. The description of the i- th query consists of four integers: a, b, c, d ( 1 \u2264 a, b, c, d \u2264 n) . Query parameters l1, r1, l2, r2 are obtained from the numbers a, b, c, d using the following algorithm: Introduce variable x. If it is the first query, then the variable equals 0, else it equals the response for the previous query plus one. Introduce function f( z) = ( ( z - 1 + x) mod n) + 1. Suppose l1 = min( f( a) , f( b) ) , r1 = max( f( a) , f( b) ) , l2 = min( f( c) , f( d) ) , r2 = max( f( c) , f( d) ) .",
    "output": "Print a response for each query in a separate line.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": "323C"
  },
  {
    "title": "Ciel and Gondolas",
    "url": "https://codeforces.com/problemset/problem/321/E",
    "history": "Fox Ciel is in the Amusement Park. And now she is in a queue in front of the Ferris wheel. There are n people ( or foxes more precisely) in the queue: we use first people to refer one at the head of the queue, and n- th people to refer the last one in the queue. There will be k gondolas, and the way we allocate gondolas looks like this: When the first gondolas come, the q1 people in head of the queue go into the gondolas. Then when the second gondolas come, the q2 people in head of the remain queue go into the gondolas. . . . The remain qk people go into the last ( k- th) gondolas. Note that q1, q2, . . . , qk must be positive. You can get from the statement that and qi > 0. You know, people don' t want to stay with strangers in the gondolas, so your task is to find an optimal allocation way ( that is find an optimal sequence q) to make people happy. For every pair of people i and j, there exists a value uij denotes a level of unfamiliar. You can assume uij = uji for all i, j ( 1 \u2264 i, j \u2264 n) and uii = 0 for all i ( 1 \u2264 i \u2264 n) . Then an unfamiliar value of a gondolas is the sum of the levels of unfamiliar between any pair of people that is into the gondolas. A total unfamiliar value is the sum of unfamiliar values for all gondolas. Help Fox Ciel to find the minimal possible total unfamiliar value for some optimal allocation.",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 4000 and 1 \u2264 k \u2264 min( n, 800) ) \u2014 the number of people in the queue and the number of gondolas. Each of the following n lines contains n integers \u2014 matrix u, ( 0 \u2264 uij \u2264 9, uij = uji and uii = 0) . Please, use fast input methods ( for example, please use BufferedReader instead of Scanner for Java) .",
    "output": "Print an integer \u2014 the minimal possible total unfamiliar value.",
    "note": "In the first example, we can allocate people like this: 1, 2 goes into a gondolas, 3, 4, 5 goes into another gondolas. In the second example, an optimal solution is : 1, 2, 3 | 4, 5, 6 | 7, 8.",
    "topics": [
      "data structures",
      "divide and conquer",
      "dp"
    ],
    "id": "321E"
  },
  {
    "title": "Ping-Pong",
    "url": "https://codeforces.com/problemset/problem/319/E",
    "history": "In this problem at each moment you have a set of intervals. You can move from interval ( a, b) from our set to interval ( c, d) from our set if and only if c < a < d or c < b < d. Also there is a path from interval I1 from our set to interval I2 from our set if there is a sequence of successive moves starting from I1 so that we can reach I2. Your program should handle the queries of the following two types: \" 1 x y\" ( x < y) \u2014 add the new interval ( x, y) to the set of intervals. The length of the new interval is guaranteed to be strictly greater than all the previous intervals. \" 2 a b\" ( a = \u0338 b) \u2014 answer the question: is there a path from a- th ( one- based) added interval to b- th ( one- based) added interval? Answer all the queries. Note, that initially you have an empty set of intervals.",
    "input": "The first line of the input contains integer n denoting the number of queries, ( 1 \u2264 n \u2264 105) . Each of the following lines contains a query as described above. All numbers in the input are integers and don' t exceed 109 by their absolute value. It' s guaranteed that all queries are correct.",
    "output": "For each query of the second type print \" YES\" or \" NO\" on a separate line depending on the answer.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": "319E"
  },
  {
    "title": "Psychos in a Line",
    "url": "https://codeforces.com/problemset/problem/319/B",
    "history": "There are n psychos standing in a line. Each psycho is assigned a unique integer from 1 to n. At each step every psycho who has an id greater than the psycho to his right ( if exists) kills his right neighbor in the line. Note that a psycho might kill and get killed at the same step. You' re given the initial arrangement of the psychos in the line. Calculate how many steps are needed to the moment of time such, that nobody kills his neighbor after that moment. Look notes to understand the statement more precise.",
    "input": "The first line of input contains integer n denoting the number of psychos, ( 1 \u2264 n \u2264 105) . In the second line there will be a list of n space separated distinct integers each in range 1 to n, inclusive \u2014 ids of the psychos in the line from left to right.",
    "output": "Print the number of steps, so that the line remains the same afterward.",
    "note": "In the first sample line of the psychos transforms as follows: [ 10 9 7 8 6 5 3 4 2 1] \u2192 [ 10 8 4] \u2192 [ 10] . So, there are two steps.",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "319B"
  },
  {
    "title": "Summer Homework",
    "url": "https://codeforces.com/problemset/problem/316/E3",
    "history": "By the age of three Smart Beaver mastered all arithmetic operations and got this summer homework from the amazed teacher: You are given a sequence of integers a1, a2, . . . , an. Your task is to perform on it m consecutive operations of the following type: For given numbers xi and vi assign value vi to element axi. For given numbers li and ri you' ve got to calculate sum , where f0 = f1 = 1 and at i \u2265 2: fi = fi - 1 + fi - 2. For a group of three numbers li ri di you should increase value ax by di for all x ( li \u2264 x \u2264 ri) . Smart Beaver planned a tour around great Canadian lakes, so he asked you to help him solve the given problem.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 2\u00b7105) \u2014 the number of integers in the sequence and the number of operations, correspondingly. The second line contains n integers a1, a2, . . . , an ( 0 \u2264 ai \u2264 105) . Then follow m lines, each describes an operation. Each line starts with an integer ti ( 1 \u2264 ti \u2264 3) \u2014 the operation type: if ti = 1, then next follow two integers xi vi ( 1 \u2264 xi \u2264 n, 0 \u2264 vi \u2264 105) ; if ti = 2, then next follow two integers li ri ( 1 \u2264 li \u2264 ri \u2264 n) ; if ti = 3, then next follow three integers li ri di ( 1 \u2264 li \u2264 ri \u2264 n, 0 \u2264 di \u2264 105) . The input limits for scoring 30 points are ( subproblem E1) : It is guaranteed that n does not exceed 100, m does not exceed 10000 and there will be no queries of the 3- rd type. The input limits for scoring 70 points are ( subproblems E1+ E2) : It is guaranteed that there will be queries of the 1- st and 2- nd type only. The input limits for scoring 100 points are ( subproblems E1+ E2+ E3) : No extra limitations.",
    "output": "For each query print the calculated sum modulo 1000000000 ( 109) .",
    "note": "",
    "topics": [
      "data structures",
      "math"
    ],
    "id": "316E3"
  },
  {
    "title": "Summer Homework",
    "url": "https://codeforces.com/problemset/problem/316/E2",
    "history": "By the age of three Smart Beaver mastered all arithmetic operations and got this summer homework from the amazed teacher: You are given a sequence of integers a1, a2, . . . , an. Your task is to perform on it m consecutive operations of the following type: For given numbers xi and vi assign value vi to element axi. For given numbers li and ri you' ve got to calculate sum , where f0 = f1 = 1 and at i \u2265 2: fi = fi - 1 + fi - 2. For a group of three numbers li ri di you should increase value ax by di for all x ( li \u2264 x \u2264 ri) . Smart Beaver planned a tour around great Canadian lakes, so he asked you to help him solve the given problem.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 2\u00b7105) \u2014 the number of integers in the sequence and the number of operations, correspondingly. The second line contains n integers a1, a2, . . . , an ( 0 \u2264 ai \u2264 105) . Then follow m lines, each describes an operation. Each line starts with an integer ti ( 1 \u2264 ti \u2264 3) \u2014 the operation type: if ti = 1, then next follow two integers xi vi ( 1 \u2264 xi \u2264 n, 0 \u2264 vi \u2264 105) ; if ti = 2, then next follow two integers li ri ( 1 \u2264 li \u2264 ri \u2264 n) ; if ti = 3, then next follow three integers li ri di ( 1 \u2264 li \u2264 ri \u2264 n, 0 \u2264 di \u2264 105) . The input limits for scoring 30 points are ( subproblem E1) : It is guaranteed that n does not exceed 100, m does not exceed 10000 and there will be no queries of the 3- rd type. The input limits for scoring 70 points are ( subproblems E1+ E2) : It is guaranteed that there will be queries of the 1- st and 2- nd type only. The input limits for scoring 100 points are ( subproblems E1+ E2+ E3) : No extra limitations.",
    "output": "For each query print the calculated sum modulo 1000000000 ( 109) .",
    "note": "",
    "topics": [
      "data structures",
      "math"
    ],
    "id": "316E2"
  },
  {
    "title": "Summer Homework",
    "url": "https://codeforces.com/problemset/problem/316/E1",
    "history": "By the age of three Smart Beaver mastered all arithmetic operations and got this summer homework from the amazed teacher: You are given a sequence of integers a1, a2, . . . , an. Your task is to perform on it m consecutive operations of the following type: For given numbers xi and vi assign value vi to element axi. For given numbers li and ri you' ve got to calculate sum , where f0 = f1 = 1 and at i \u2265 2: fi = fi - 1 + fi - 2. For a group of three numbers li ri di you should increase value ax by di for all x ( li \u2264 x \u2264 ri) . Smart Beaver planned a tour around great Canadian lakes, so he asked you to help him solve the given problem.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 2\u00b7105) \u2014 the number of integers in the sequence and the number of operations, correspondingly. The second line contains n integers a1, a2, . . . , an ( 0 \u2264 ai \u2264 105) . Then follow m lines, each describes an operation. Each line starts with an integer ti ( 1 \u2264 ti \u2264 3) \u2014 the operation type: if ti = 1, then next follow two integers xi vi ( 1 \u2264 xi \u2264 n, 0 \u2264 vi \u2264 105) ; if ti = 2, then next follow two integers li ri ( 1 \u2264 li \u2264 ri \u2264 n) ; if ti = 3, then next follow three integers li ri di ( 1 \u2264 li \u2264 ri \u2264 n, 0 \u2264 di \u2264 105) . The input limits for scoring 30 points are ( subproblem E1) : It is guaranteed that n does not exceed 100, m does not exceed 10000 and there will be no queries of the 3- rd type. The input limits for scoring 70 points are ( subproblems E1+ E2) : It is guaranteed that there will be queries of the 1- st and 2- nd type only. The input limits for scoring 100 points are ( subproblems E1+ E2+ E3) : No extra limitations.",
    "output": "For each query print the calculated sum modulo 1000000000 ( 109) .",
    "note": "",
    "topics": [
      "brute force",
      "data structures"
    ],
    "id": "316E1"
  },
  {
    "title": "Sereja and Straight Lines",
    "url": "https://codeforces.com/problemset/problem/314/D",
    "history": "Sereja placed n points on a plane. Now Sereja wants to place on the plane two straight lines, intersecting at a right angle, so that one of the straight lines intersect the Ox axis at an angle of 45 degrees and the maximum distance from the points to the straight lines were minimum. In this problem we consider the distance between points ( x1, y1) and ( x2, y2) equal | x1 - x2| + | y1 - y2| . The distance between the point and the straight lines is the minimum distance from the point to some point belonging to one of the lines. Help Sereja, find the maximum distance from the points to the optimally located straight lines.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 105) . Next n lines contain the coordinates of the lines. The i- th line contains two integers xi, yi ( | xi| , | yi| \u2264 109) .",
    "output": "In a single line print a real number \u2014 the answer to the problem. Your answer will be considered correct iff its absolute or relative error doesn' t exceed 10 - 6.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "geometry",
      "sortings",
      "two pointers"
    ],
    "id": "314D"
  },
  {
    "title": "Sereja and Subsequences",
    "url": "https://codeforces.com/problemset/problem/314/C",
    "history": "Sereja has a sequence that consists of n positive integers, a1, a2, . . . , an. First Sereja took a piece of squared paper and wrote all distinct non- empty non- decreasing subsequences of sequence a. Then for each sequence written on the squared paper, Sereja wrote on a piece of lines paper all sequences that do not exceed it. A sequence of positive integers x = x1, x2, . . . , xr doesn' t exceed a sequence of positive integers y = y1, y2, . . . , yr, if the following inequation holds: x1 \u2264 y1, x2 \u2264 y2, . . . , xr \u2264 yr. Now Sereja wonders, how many sequences are written on the lines piece of paper. Help Sereja, find the required quantity modulo 1000000007 ( 109 + 7) .",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 105) . The second line contains n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 106) .",
    "output": "In the single line print the answer to the problem modulo 1000000007 ( 109 + 7) .",
    "note": "",
    "topics": [
      "data structures",
      "dp"
    ],
    "id": "314C"
  },
  {
    "title": "Ilya and Two Numbers",
    "url": "https://codeforces.com/problemset/problem/313/E",
    "history": "Ilya has recently taken up archaeology. He' s recently found two numbers, written in the m- based notation. Each of the found numbers consisted of exactly n digits. Ilya immediately started looking for information about those numbers. He learned that the numbers are part of a cyphered code and the one who can decypher it can get the greatest treasure. After considerable research Ilya understood that to decypher the code, he should do the following: Rearrange digits in the first number in some manner. Similarly, rearrange digits in the second number in some manner. As a result of this operation, the numbers can get leading zeroes. Add numbers, digit by digit, modulo m. In other words, we need to get the third number of length n, each digit of the number is the sum of the respective numbers of the found numbers. For example, suppose there are two numbers recorded in the ternary notation, 001210 and 012111, then if you add them to each other digit by digit modulo 3, you will get number 010021. The key to the code is the maximum possible number that can be obtained in the previous step. Help Ilya, find the key to the code.",
    "input": "The first line contains two integers n, m ( 1 \u2264 n, m \u2264 105, m > 1) . The second line contains the first found number, the third line contains the second found number. The numbers are recorded as a sequence of digits in the m- based notation. Each digit is an integer from 0 to m - 1. The digits in the line are written in the order from the most significant digits to the least significant ones. The given numbers can contain leading zeroes.",
    "output": "Print n m- base digits. The resulting third number written in the m- based notation. Print the digits in the order from the most significant digits to the least significant ones.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "data structures",
      "dsu",
      "greedy"
    ],
    "id": "313E"
  },
  {
    "title": "Interval Cubing",
    "url": "https://codeforces.com/problemset/problem/311/D",
    "history": "While learning Computational Geometry, Tiny is simultaneously learning a useful data structure called segment tree or interval tree. He has scarcely grasped it when comes out a strange problem: Given an integer sequence a1, a2, . . . , an. You should run q queries of two types: Given two integers l and r ( 1 \u2264 l \u2264 r \u2264 n) , ask the sum of all elements in the sequence al, al + 1, . . . , ar. Given two integers l and r ( 1 \u2264 l \u2264 r \u2264 n) , let each element x in the sequence al, al + 1, . . . , ar becomes x3. In other words, apply an assignments al = al3, al + 1 = al + 13, . . . , ar = ar3. For every query of type 1, output the answer to it. Tiny himself surely cannot work it out, so he asks you for help. In addition, Tiny is a prime lover. He tells you that because the answer may be too huge, you should only output it modulo 95542721 ( this number is a prime number) .",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 105) , representing the length of the sequence. The second line contains n space- separated integers a1, a2, . . . , an ( 0 \u2264 ai \u2264 109) . The third line contains an integer q ( 1 \u2264 q \u2264 105) , representing the number of queries. Then follow q lines. Each line contains three integers ti ( 1 \u2264 ti \u2264 2) , li, ri ( 1 \u2264 li \u2264 ri \u2264 n) , where ti stands for the type of the query while li and ri is the parameters of the query, correspondingly.",
    "output": "For each 1- type query, print the answer to it per line. You should notice that each printed number should be non- negative and less than 95542721.",
    "note": "",
    "topics": [
      "data structures",
      "math"
    ],
    "id": "311D"
  },
  {
    "title": "Fetch the Treasure",
    "url": "https://codeforces.com/problemset/problem/311/C",
    "history": "Rainbow built h cells in a row that are numbered from 1 to h from left to right. There are n cells with treasure. We call each of these n cells \" Treasure Cell\" . The i- th \" Treasure Cell\" is the ai- th cell and the value of treasure in it is ci dollars. Then, Freda went in the first cell. For now, she can go just k cells forward, or return to the first cell. That means Freda was able to reach the 1st, ( k + 1) - th, ( 2\u00b7k + 1) - th, ( 3\u00b7k + 1) - th cells and so on. Then Rainbow gave Freda m operations. Each operation is one of the following three types: Add another method x: she can also go just x cells forward at any moment. For example, initially she has only one method k. If at some moment she has methods a1, a2, . . . , ar then she can reach all the cells with number in form , where vi \u2014 some non- negative integer. Reduce the value of the treasure in the x- th \" Treasure Cell\" by y dollars. In other words, to apply assignment cx = cx - y. Ask the value of the most valuable treasure among the cells Freda can reach. If Freda cannot reach any cell with the treasure then consider the value of the most valuable treasure equal to 0, and do nothing. Otherwise take the most valuable treasure away. If several \" Treasure Cells\" have the most valuable treasure, take the \" Treasure Cell\" with the minimum number ( not necessarily with the minimum number of cell) . After that the total number of cells with a treasure is decreased by one. As a programmer, you are asked by Freda to write a program to answer each query.",
    "input": "The first line of the input contains four integers: h ( 1 \u2264 h \u2264 1018) , n, m ( 1 \u2264 n, m \u2264 105) and k ( 1 \u2264 k \u2264 104) . Each of the next n lines contains two integers: ai ( 1 \u2264 ai \u2264 h) , ci ( 1 \u2264 ci \u2264 109) . That means the i- th \" Treasure Cell\" is the ai- th cell and cost of the treasure in that cell is ci dollars. All the ai are distinct. Each of the next m lines is in one of the three following formats: \" 1 x\" \u2014 an operation of type 1, 1 \u2264 x \u2264 h; \" 2 x y\" \u2014 an operation of type 2, 1 \u2264 x \u2264 n, 0 \u2264 y < cx; \" 3\" \u2014 an operation of type 3. There are at most 20 operations of type 1. It' s guaranteed that at any moment treasure in each cell has positive value. It' s guaranteed that all operations is correct ( no operation can decrease the value of the taken tresure) . Please, do not use the",
    "output": "For each operation of type 3, output an integer indicates the value ( in dollars) of the most valuable treasure among the \" Treasure Cells\" Freda can reach. If there is no such treasure, output 0.",
    "note": "In the sample, there are 10 cells and 3 \" Treasure Cells\" . The first \" Treasure Cell\" is cell 5, having 50 dollars tresure in it. The second \" Treasure Cell\" is cell 7, having 60 dollars tresure in it. The third \" Treasure Cell\" is cell 8, having 100 dollars tresure in it. At first, Freda can only reach cell 1, 3, 5, 7 and 9. In the first operation, we reduce the value in the second \" Treasure Cell\" from 60 to 55. Then the most valuable treasure among the \" Treasure Cells\" she can reach is max( 50, 55) = 55. After the third operation, she can also go 3 cells forward each step, being able to reach cell 1, 3, 4, 5, 6, 7, 8, 9, 10. So the most valuable tresure is 100. Noticed that she took the 55 dollars and 100 dollars treasure away, so the last answer is 50.",
    "topics": [
      "brute force",
      "data structures",
      "graphs",
      "shortest paths"
    ],
    "id": "311C"
  },
  {
    "title": "Cats Transport",
    "url": "https://codeforces.com/problemset/problem/311/B",
    "history": "Zxr960115 is owner of a large farm. He feeds m cute cats and employs p feeders. There' s a straight road across the farm and n hills along the road, numbered from 1 to n from left to right. The distance between hill i and ( i - 1) is di meters. The feeders live in hill 1. One day, the cats went out to play. Cat i went on a trip to hill hi, finished its trip at time ti, and then waited at hill hi for a feeder. The feeders must take all the cats. Each feeder goes straightly from hill 1 to n without waiting at a hill and takes all the waiting cats at each hill away. Feeders walk at a speed of 1 meter per unit time and are strong enough to take as many cats as they want. For example, suppose we have two hills ( d2 = 1) and one cat that finished its trip at time 3 at hill 2 ( h1 = 2) . Then if the feeder leaves hill 1 at time 2 or at time 3, he can take this cat, but if he leaves hill 1 at time 1 he can' t take it. If the feeder leaves hill 1 at time 2, the cat waits him for 0 time units, if the feeder leaves hill 1 at time 3, the cat waits him for 1 time units. Your task is to schedule the time leaving from hill 1 for each feeder so that the sum of the waiting time of all cats is minimized.",
    "input": "The first line of the input contains three integers n, m, p ( 2 \u2264 n \u2264 105, 1 \u2264 m \u2264 105, 1 \u2264 p \u2264 100) . The second line contains n - 1 positive integers d2, d3, . . . , dn ( 1 \u2264 di < 104) . Each of the next m lines contains two integers hi and ti ( 1 \u2264 hi \u2264 n, 0 \u2264 ti \u2264 109) .",
    "output": "Output an integer, the minimum sum of waiting time of all cats. Please, do not write the",
    "note": "",
    "topics": [
      "data structures",
      "dp"
    ],
    "id": "311B"
  },
  {
    "title": "Optimizer",
    "url": "https://codeforces.com/problemset/problem/306/B",
    "history": "A process RAM is a sequence of bytes that are indexed from 1 to n. Polycarpus' s program contains such instructions as \" memset\" , that is, the operations of filling memory cells on a segment with some value. The details are: the code only contains m instructions that look like \" set13 a_ i l_ i\" . Instruction i fills a continuous memory segment of length li, starting from cell number ai, ( that it cells with numbers ai, ai + 1, . . . , ai + li - 1) with values 13. In Polycarpus' s code, the optimizer' s task is to remove the maximum number of instructions from his code in such a way that the remaining instructions set value 13 in all the memory bytes that got this value from the code before the optimization. Also, the value 13 should be set only in the memory bytes that got this value from the code before the optimization. Your task is to implement the optimizer for such program.",
    "input": "The first line contains integers n and m ( 1 \u2264 n \u2264 2\u00b7106, 1 \u2264 m \u2264 2\u00b7105) \u2014 the number of bytes ( memory cells) and the number of instructions in Polycarpus' s code. Then m lines follow, each line contains a pair of integers ai, li ( 1 \u2264 ai \u2264 n, 1 \u2264 li \u2264 n - ai + 1) .",
    "output": "Print in the first line the sought maximum number of instructions that can be removed from the code. In the second line print the numbers of the instructions. The instructions are numbered from 1 to m in the order they appeared in the input. If there are multiple solutions, print any of them.",
    "note": "",
    "topics": [
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "306B"
  },
  {
    "title": "Yaroslav and Divisors",
    "url": "https://codeforces.com/problemset/problem/301/D",
    "history": "Yaroslav has an array p = p1, p2, . . . , pn ( 1 \u2264 pi \u2264 n) , consisting of n distinct integers. Also, he has m queries: Query number i is represented as a pair of integers li, ri ( 1 \u2264 li \u2264 ri \u2264 n) . The answer to the query li, ri is the number of pairs of integers q, w ( li \u2264 q, w \u2264 ri) such that pq is the divisor of pw. Help Yaroslav, answer all his queries.",
    "input": "The first line contains the integers n and m ( 1 \u2264 n, m \u2264 2\u00b7105) . The second line contains n distinct integers p1, p2, . . . , pn ( 1 \u2264 pi \u2264 n) . The following m lines contain Yaroslav' s queries. The i- th line contains integers li, ri ( 1 \u2264 li \u2264 ri \u2264 n) .",
    "output": "Print m integers \u2014 the answers to Yaroslav' s queries in the order they appear in the input. Please, do not use the",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": "301D"
  },
  {
    "title": "Mystic Carvings",
    "url": "https://codeforces.com/problemset/problem/297/E",
    "history": "The polar bears have discovered a gigantic circular piece of floating ice with some mystic carvings on it. There are n lines carved on the ice. Each line connects two points on the boundary of the ice ( we call these points endpoints) . The endpoints are numbered 1, 2, . . . , 2n counter- clockwise along the circumference. No two lines share an endpoint. Now a group of 6 polar bears ( Alice, Bob, Carol, Dave, Eve, Frank) are going to build caves on the endpoints. Each polar bear would build a cave and live in it. No two polar bears can build a cave on the same endpoints. Alice and Bob is a pair of superstitious lovers. They believe the lines are carved by aliens ( or humans, which are pretty much the same thing to polar bears) , and have certain spiritual power. Therefore they want to build their caves on two endpoints which are connected by a line. The same for Carol and Dave, Eve and Frank. The distance between two caves X and Y is defined as one plus minimum number of other caves one need to pass through in order to travel from X to Y along the boundary of the ice ( endpoints without caves are not counted) . To ensure fairness, the distances between the three pairs of lovers have to be the same ( that is, the distance between Alice and Bob, the distance between Carol and Dave, and the distance between Eve and Frank are the same) . The figures below show two different configurations, where the dots on the circle are the endpoints. The configuration on the left is not valid. Although each pair of lovers ( A and B, C and D, E and F) is connected a line, the distance requirement is not satisfied. The distance between A and B is 2 ( one can go from A to B in the clockwise direction passing through F) . The distance between E and F is also 2. However, the distance between C and D is 1 ( one can go from C to D in the counter- clockwise direction without passing through any other caves) . The configuration on the right is valid. All three pairs have the same distance 1. Count the number of ways to build the caves under the requirements. Two configurations are considered the same if the same set of 6 endpoints are used.",
    "input": "The first line contains integer n( 3 \u2264 n \u2264 105) \u2014 the number of lines. Each of the following n lines contains two integers ai, bi ( 1 \u2264 ai, bi \u2264 2n) , which means that there is a line carved on the ice connecting the ai\u2013th and bi\u2013th endpoint. It' s guaranteed that each endpoints touches exactly one line.",
    "output": "Print the number of ways to build the caves. Please, do not write the",
    "note": "The second sample corresponds to the figure in the problem statement.",
    "topics": [
      "data structures"
    ],
    "id": "297E"
  },
  {
    "title": "Yaroslav and Points",
    "url": "https://codeforces.com/problemset/problem/295/E",
    "history": "Yaroslav has n points that lie on the Ox axis. The coordinate of the first point is x1, the coordinate of the second point is x2, . . . , the coordinate of the n- th point is \u2014 xn. Now Yaroslav wants to execute m queries, each of them is of one of the two following types: Move the pj- th point from position xpj to position xpj + dj. At that, it is guaranteed that after executing such query all coordinates of the points will be distinct. Count the sum of distances between all pairs of points that lie on the segment [ lj, rj] ( lj \u2264 rj) . In other words, you should count the sum of: . Help Yaroslav.",
    "input": "The first line contains integer n \u2014 the number of points ( 1 \u2264 n \u2264 105) . The second line contains distinct integers x1, x2, . . . , xn \u2014 the coordinates of points ( | xi| \u2264 109) . The third line contains integer m \u2014 the number of queries ( 1 \u2264 m \u2264 105) . The next m lines contain the queries. The j- th line first contains integer tj ( 1 \u2264 tj \u2264 2) \u2014 the query type. If tj = 1, then it is followed by two integers pj and dj ( 1 \u2264 pj \u2264 n, | dj| \u2264 1000) . If tj = 2, then it is followed by two integers lj and rj ( - 109 \u2264 lj \u2264 rj \u2264 109) . It is guaranteed that at any moment all the points have distinct coordinates.",
    "output": "For each type 2 query print the answer on a single line. Print the answers in the order, in which the queries follow in the input. Please, do not use the",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": "295E"
  },
  {
    "title": "Greg and Array",
    "url": "https://codeforces.com/problemset/problem/295/A",
    "history": "Greg has an array a = a1, a2, . . . , an and m operations. Each operation looks as: li, ri, di, ( 1 \u2264 li \u2264 ri \u2264 n) . To apply operation i to the array means to increase all array elements with numbers li, li + 1, . . . , ri by value di. Greg wrote down k queries on a piece of paper. Each query has the following form: xi, yi, ( 1 \u2264 xi \u2264 yi \u2264 m) . That means that one should apply operations with numbers xi, xi + 1, . . . , yi to the array. Now Greg is wondering, what the array a will be after all the queries are executed. Help Greg.",
    "input": "The first line contains integers n, m, k ( 1 \u2264 n, m, k \u2264 105) . The second line contains n integers: a1, a2, . . . , an ( 0 \u2264 ai \u2264 105) \u2014 the initial array. Next m lines contain operations, the operation number i is written as three integers: li, ri, di, ( 1 \u2264 li \u2264 ri \u2264 n) , ( 0 \u2264 di \u2264 105) . Next k lines contain the queries, the query number i is written as two integers: xi, yi, ( 1 \u2264 xi \u2264 yi \u2264 m) . The numbers in the lines are separated by single spaces.",
    "output": "On a single line print n integers a1, a2, . . . , an \u2014 the array after executing all the queries. Separate the printed numbers by spaces. Please, do not use the",
    "note": "",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "295A"
  },
  {
    "title": "Close Vertices",
    "url": "https://codeforces.com/problemset/problem/293/E",
    "history": "You' ve got a weighted tree, consisting of n vertices. Each edge has a non- negative weight. The length of the path between any two vertices of the tree is the number of edges in the path. The weight of the path is the total weight of all edges it contains. Two vertices are close if there exists a path of length at most l between them and a path of weight at most w between them. Count the number of pairs of vertices v, u ( v < u) , such that vertices v and u are close.",
    "input": "The first line contains three integers n, l and w ( 1 \u2264 n \u2264 105, 1 \u2264 l \u2264 n, 0 \u2264 w \u2264 109) . The next n - 1 lines contain the descriptions of the tree edges. The i- th line contains two integers pi, wi ( 1 \u2264 pi < ( i + 1) , 0 \u2264 wi \u2264 104) , that mean that the i- th edge connects vertex ( i + 1) and pi and has weight wi. Consider the tree vertices indexed from 1 to n in some way.",
    "output": "Print a single integer \u2014 the number of close pairs. Please, do not use the",
    "note": "",
    "topics": [
      "data structures",
      "divide and conquer",
      "trees"
    ],
    "id": "293E"
  },
  {
    "title": "Copying Data",
    "url": "https://codeforces.com/problemset/problem/292/E",
    "history": "We often have to copy large volumes of information. Such operation can take up many computer resources. Therefore, in this problem you are advised to come up with a way to copy some part of a number array into another one, quickly. More formally, you' ve got two arrays of integers a1, a2, . . . , an and b1, b2, . . . , bn of length n. Also, you' ve got m queries of two types: Copy the subsegment of array a of length k, starting from position x, into array b, starting from position y, that is, execute by + q = ax + q for all integer q ( 0 \u2264 q < k) . The given operation is correct \u2014 both subsegments do not touch unexistent elements. Determine the value in position x of array b, that is, find value bx. For each query of the second type print the result \u2014 the value of the corresponding element of array b.",
    "input": "The first line contains two space- separated integers n and m ( 1 \u2264 n, m \u2264 105) \u2014 the number of elements in the arrays and the number of queries, correspondingly. The second line contains an array of integers a1, a2, . . . , an ( | ai| \u2264 109) . The third line contains an array of integers b1, b2, . . . , bn ( | bi| \u2264 109) . Next m lines contain the descriptions of the queries. The i- th line first contains integer ti \u2014 the type of the i- th query ( 1 \u2264 ti \u2264 2) . If ti = 1, then the i- th query means the copying operation. If ti = 2, then the i- th query means taking the value in array b. If ti = 1, then the query type is followed by three integers xi, yi, ki ( 1 \u2264 xi, yi, ki \u2264 n) \u2014 the parameters of the copying query. If ti = 2, then the query type is followed by integer xi ( 1 \u2264 xi \u2264 n) \u2014 the position in array b. All numbers in the lines are separated with single spaces. It is guaranteed that all the queries are correct, that is, the copying borders fit into the borders of arrays a and b.",
    "output": "For each second type query print the result on a single line.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": "292E"
  },
  {
    "title": "Connected Components",
    "url": "https://codeforces.com/problemset/problem/292/D",
    "history": "We already know of the large corporation where Polycarpus works as a system administrator. The computer network there consists of n computers and m cables that connect some pairs of computers. In other words, the computer network can be represented as some non- directed graph with n nodes and m edges. Let' s index the computers with integers from 1 to n, let' s index the cables with integers from 1 to m. Polycarpus was given an important task \u2014 check the reliability of his company' s network. For that Polycarpus decided to carry out a series of k experiments on the computer network, where the i- th experiment goes as follows: Temporarily disconnect the cables with indexes from li to ri, inclusive ( the other cables remain connected) . Count the number of connected components in the graph that is defining the computer network at that moment. Re- connect the disconnected cables with indexes from li to ri ( that is, restore the initial network) . Help Polycarpus carry out all experiments and for each print the number of connected components in the graph that defines the computer network through the given experiment. Isolated vertex should be counted as single component.",
    "input": "The first line contains two space- separated integers n, m ( 2 \u2264 n \u2264 500; 1 \u2264 m \u2264 104) \u2014 the number of computers and the number of cables, correspondingly. The following m lines contain the cables' description. The i- th line contains space- separated pair of integers xi, yi ( 1 \u2264 xi, yi \u2264 n; xi = \u0338 yi) \u2014 the numbers of the computers that are connected by the i- th cable. Note that a pair of computers can be connected by multiple cables. The next line contains integer k ( 1 \u2264 k \u2264 2\u00b7104) \u2014 the number of experiments. Next k lines contain the experiments' descriptions. The i- th line contains space- separated integers li, ri ( 1 \u2264 li \u2264 ri \u2264 m) \u2014 the numbers of the cables that Polycarpus disconnects during the i- th experiment.",
    "output": "Print k numbers, the i- th number represents the number of connected components of the graph that defines the computer network during the i- th experiment.",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "dp",
      "dsu"
    ],
    "id": "292D"
  },
  {
    "title": "Tourists",
    "url": "https://codeforces.com/problemset/problem/286/D",
    "history": "A double tourist path, located at a park in Ultima Thule, is working by the following principle: We introduce the Cartesian coordinate system. At some points of time there are two tourists going ( for a walk) from points ( - 1, 0) and ( 1, 0) simultaneously. The first one is walking from ( - 1, 0) , the second one is walking from ( 1, 0) . Both tourists in a pair move at the same speed 1 ( distance unit per second) , the first one moves along line x = - 1, the second one moves along line x = 1, both of them are moving in the positive direction of the Oy axis. At some points of time walls appear. Wall ( li, ri) is a segment between points ( 0, li) and ( 0, ri) . Each wall appears immediately. The Ultima Thule government wants to learn this for each pair of tourists that walk simultaneously: for how long ( in seconds) will they not see each other? Two tourists don' t see each other if the segment that connects their positions on the plane intersects at least one wall. Two segments intersect if they share at least one point. We assume that the segments' ends belong to the segments. Help the government count the required time. Note that the walls can intersect ( in any way) or coincide.",
    "input": "The first line contains two space- separated integers n and m ( 1 \u2264 n, m \u2264 105) \u2014 the number of pairs of tourists and the number of built walls. The next m lines contain three space- separated integers li, ri and ti each ( 0 \u2264 li < ri \u2264 109, 0 \u2264 ti \u2264 109) \u2014 the wall ends and the time it appeared. The last line contains n distinct space- separated strictly increasing integers q1, q2, . . . , qn ( 0 \u2264 qi \u2264 109) \u2014 the points of time when pairs of tourists walk. All points of time are given in seconds.",
    "output": "For each pair of tourists print on a single line a single integer \u2014 the time in seconds when the two tourists from the corresponding pair won' t see each other. Print the numbers in the order in which the they go in the input.",
    "note": "",
    "topics": [
      "data structures",
      "sortings"
    ],
    "id": "286D"
  },
  {
    "title": "Cow Tennis Tournament",
    "url": "https://codeforces.com/problemset/problem/283/E",
    "history": "Farmer John is hosting a tennis tournament with his n cows. Each cow has a skill level si, and no two cows having the same skill level. Every cow plays every other cow exactly once in the tournament, and each cow beats every cow with skill level lower than its own. However, Farmer John thinks the tournament will be demoralizing for the weakest cows who lose most or all of their matches, so he wants to flip some of the results. In particular, at k different instances, he will take two integers ai, bi ( ai < bi) and flip all the results between cows with skill level between ai and bi inclusive. That is, for any pair x, y he will change the result of the match on the final scoreboard ( so if x won the match, the scoreboard will now display that y won the match, and vice versa) . It is possible that Farmer John will change the result of a match multiple times. It is not guaranteed that ai and bi are equal to some cow' s skill level. Farmer John wants to determine how balanced he made the tournament results look. In particular, he wants to count the number of triples of cows ( p, q, r) for which the final leaderboard shows that cow p beats cow q, cow q beats cow r, and cow r beats cow p. Help him determine this number. Note that two triples are considered different if they do not contain the same set of cows ( i. e. if there is a cow in one triple that is not in the other) .",
    "input": "On the first line are two space- separated integers, n and k ( 3 \u2264 n \u2264 105; 0 \u2264 k \u2264 105) . On the next line are n space- separated distinct integers, s1, s2, . . . , sn ( 1 \u2264 si \u2264 109) , denoting the skill levels of the cows. On the next k lines are two space separated integers, ai and bi ( 1 \u2264 ai < bi \u2264 109) representing the changes Farmer John made to the scoreboard in the order he makes it.",
    "output": "A single integer, containing the number of triples of cows ( p, q, r) for which the final leaderboard shows that cow p beats cow q, cow q beats cow r, and cow r beats cow p. Please do not use the",
    "note": "In the first sample, cow 3 > cow 1, cow 3 > cow 2, and cow 2 > cow 1. However, the results between cows 1 and 2 and cows 2 and 3 are flipped, so now FJ' s results show that cow 1 > cow 2, cow 2 > cow 3, and cow 3 > cow 1, so cows 1, 2, and 3 form a balanced triple.",
    "topics": [
      "combinatorics",
      "data structures",
      "math"
    ],
    "id": "283E"
  },
  {
    "title": "Cows and Sequence",
    "url": "https://codeforces.com/problemset/problem/283/A",
    "history": "Bessie and the cows are playing with sequences and need your help. They start with a sequence, initially containing just the number 0, and perform n operations. Each operation is one of the following: Add the integer xi to the first ai elements of the sequence. Append an integer ki to the end of the sequence. ( And hence the size of the sequence increases by 1) Remove the last element of the sequence. So, the size of the sequence decreases by one. Note, that this operation can only be done if there are at least two elements in the sequence. After each operation, the cows would like to know the average of all the numbers in the sequence. Help them!",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2\u00b7105) \u2014 the number of operations. The next n lines describe the operations. Each line will start with an integer ti ( 1 \u2264 ti \u2264 3) , denoting the type of the operation ( see above) . If ti = 1, it will be followed by two integers ai, xi ( | xi| \u2264 103; 1 \u2264 ai) . If ti = 2, it will be followed by a single integer ki ( | ki| \u2264 103) . If ti = 3, it will not be followed by anything. It is guaranteed that all operations are correct ( don' t touch nonexistent elements) and that there will always be at least one element in the sequence.",
    "output": "Output n lines each containing the average of the numbers in the sequence after the corresponding operation. The answer will be considered correct if its absolute or relative error doesn' t exceed 10 - 6.",
    "note": "In the second sample, the sequence becomes",
    "topics": [
      "constructive algorithms",
      "data structures",
      "implementation"
    ],
    "id": "283A"
  },
  {
    "title": "Sausage Maximization",
    "url": "https://codeforces.com/problemset/problem/282/E",
    "history": "The Bitlandians are quite weird people. They have their own problems and their own solutions. They have their own thoughts and their own beliefs, they have their own values and their own merits. They have their own dishes and their own sausages! In Bitland a sausage is an array of integers! A sausage' s deliciousness is equal to the bitwise excluding OR ( the xor operation) of all integers in that sausage. One day, when Mr. Bitkoch ( the local cook) was going to close his BitRestaurant, BitHaval and BitAryo, the most famous citizens of Bitland, entered the restaurant and each ordered a sausage. But Mr. Bitkoch had only one sausage left. So he decided to cut a prefix ( several, may be zero, first array elements) of the sausage and give it to BitHaval and a postfix ( several, may be zero, last array elements) of the sausage and give it to BitAryo. Note that one or both pieces of the sausage can be empty. Of course, the cut pieces mustn' t intersect ( no array element can occur in both pieces) . The pleasure of BitHaval and BitAryo is equal to the bitwise XOR of their sausages' deliciousness. An empty sausage' s deliciousness equals zero. Find a way to cut a piece of sausage for BitHaval and BitAryo that maximizes the pleasure of these worthy citizens.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 105) . The next line contains n integers a1, a2, . . . , an ( 0 \u2264 ai \u2264 1012) \u2014 Mr. Bitkoch' s sausage. Please, do not use the",
    "output": "Print a single integer \u2014 the maximum pleasure BitHaval and BitAryo can get from the dinner.",
    "note": "",
    "topics": [
      "bitmasks",
      "data structures",
      "trees"
    ],
    "id": "282E"
  },
  {
    "title": "Sequence Transformation",
    "url": "https://codeforces.com/problemset/problem/280/E",
    "history": "You' ve got a non- decreasing sequence x1, x2, . . . , xn ( 1 \u2264 x1 \u2264 x2 \u2264 . . . \u2264 xn \u2264 q) . You' ve also got two integers a and b ( a \u2264 b; a\u00b7( n - 1) < q) . Your task is to transform sequence x1, x2, . . . , xn into some sequence y1, y2, . . . , yn ( 1 \u2264 yi \u2264 q; a \u2264 yi + 1 - yi \u2264 b) . The transformation price is the following sum: . Your task is to choose such sequence y that minimizes the described transformation price.",
    "input": "The first line contains four integers n, q, a, b ( 2 \u2264 n \u2264 6000; 1 \u2264 q, a, b \u2264 109; a\u00b7( n - 1) < q; a \u2264 b) . The second line contains a non- decreasing integer sequence x1, x2, . . . , xn ( 1 \u2264 x1 \u2264 x2 \u2264 . . . \u2264 xn \u2264 q) .",
    "output": "In the first line print n real numbers \u2014 the sought sequence y1, y2, . . . , yn ( 1 \u2264 yi \u2264 q; a \u2264 yi + 1 - yi \u2264 b) . In the second line print the minimum transformation price, that is, . If there are multiple optimal answers you can print any of them. The answer will be considered correct if the absolute or relative error doesn' t exceed 10 - 6.",
    "note": "",
    "topics": [
      "brute force",
      "data structures",
      "dp",
      "implementation",
      "math"
    ],
    "id": "280E"
  },
  {
    "title": "k-Maximum Subsequence Sum",
    "url": "https://codeforces.com/problemset/problem/280/D",
    "history": "Consider integer sequence a1, a2, . . . , an. You should run queries of two types: The query format is \" 0 i val\" . In reply to this query you should make the following assignment: ai = val. The query format is \" 1 l r k\" . In reply to this query you should print the maximum sum of at most k non- intersecting subsegments of sequence al, al + 1, . . . , ar. Formally, you should choose at most k pairs of integers ( x1, y1) , ( x2, y2) , . . . , ( xt, yt) ( l \u2264 x1 \u2264 y1 < x2 \u2264 y2 < . . . < xt \u2264 yt \u2264 r; t \u2264 k) such that the sum ax1 + ax1 + 1 + . . . + ay1 + ax2 + ax2 + 1 + . . . + ay2 + . . . + axt + axt + 1 + . . . + ayt is as large as possible. Note that you should choose at most k subsegments. Particularly, you can choose 0 subsegments. In this case the described sum considered equal to zero.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 105) , showing how many numbers the sequence has. The next line contains n integers a1, a2, . . . , an ( | ai| \u2264 500) . The third line contains integer m ( 1 \u2264 m \u2264 105) \u2014 the number of queries. The next m lines contain the queries in the format, given in the statement. All changing queries fit into limits: 1 \u2264 i \u2264 n, | val| \u2264 500. All queries to count the maximum sum of at most k non- intersecting subsegments fit into limits: 1 \u2264 l \u2264 r \u2264 n, 1 \u2264 k \u2264 20. It is guaranteed that the number of the queries to count the maximum sum of at most k non- intersecting subsegments doesn' t exceed 10000.",
    "output": "For each query to count the maximum sum of at most k non- intersecting subsegments print the reply \u2014 the maximum sum. Print the answers to the queries in the order, in which the queries follow in the input.",
    "note": "In the first query of the first example you can select a single pair ( 1, 9) . So the described sum will be 17. Look at the second query of the first example. How to choose two subsegments? ( 1, 3) and ( 7, 9) ? Definitely not, the sum we could get from ( 1, 3) and ( 7, 9) is 20, against the optimal configuration ( 1, 7) and ( 9, 9) with 25. The answer to the third query is 0, we prefer select nothing if all of the numbers in the given interval are negative.",
    "topics": [
      "data structures",
      "flows",
      "graphs",
      "implementation"
    ],
    "id": "280D"
  },
  {
    "title": "Maximum Xor Secondary",
    "url": "https://codeforces.com/problemset/problem/280/B",
    "history": "Bike loves looking for the second maximum element in the sequence. The second maximum element in the sequence of distinct numbers x1, x2, . . . , xk ( k > 1) is such maximum element xj, that the following inequality holds: . The lucky number of the sequence of distinct positive integers x1, x2, . . . , xk ( k > 1) is the number that is equal to the bitwise excluding OR of the maximum element of the sequence and the second maximum element of the sequence. You' ve got a sequence of distinct positive integers s1, s2, . . . , sn ( n > 1) . Let' s denote sequence sl, sl + 1, . . . , sr as s[ l. . r] ( 1 \u2264 l < r \u2264 n) . Your task is to find the maximum number among all lucky numbers of sequences s[ l. . r] . Note that as all numbers in sequence s are distinct, all the given definitions make sence.",
    "input": "The first line contains integer n ( 1 < n \u2264 105) . The second line contains n distinct integers s1, s2, . . . , sn ( 1 \u2264 si \u2264 109) .",
    "output": "Print a single integer \u2014 the maximum lucky number among all lucky numbers of sequences s[ l. . r] .",
    "note": "For the first sample you can choose s[ 4. . 5] = 4, 3 and its lucky number is ( 4 xor 3) = 7. You can also choose s[ 1. . 2] . For the second sample you must choose s[ 2. . 5] = 8, 3, 5, 7.",
    "topics": [
      "data structures",
      "implementation",
      "two pointers"
    ],
    "id": "280B"
  },
  {
    "title": "Little Girl and Problem on Trees",
    "url": "https://codeforces.com/problemset/problem/276/E",
    "history": "A little girl loves problems on trees very much. Here' s one of them. A tree is an undirected connected graph, not containing cycles. The degree of node x in the tree is the number of nodes y of the tree, such that each of them is connected with node x by some edge of the tree. Let' s consider a tree that consists of n nodes. We' ll consider the tree' s nodes indexed from 1 to n. The cosidered tree has the following property: each node except for node number 1 has the degree of at most 2. Initially, each node of the tree contains number 0. Your task is to quickly process the requests of two types: Request of form: 0 v x d. In reply to the request you should add x to all numbers that are written in the nodes that are located at the distance of at most d from node v. The distance between two nodes is the number of edges on the shortest path between them. Request of form: 1 v. In reply to the request you should print the current number that is written in node v.",
    "input": "The first line contains integers n ( 2 \u2264 n \u2264 105) and q ( 1 \u2264 q \u2264 105) \u2014 the number of tree nodes and the number of requests, correspondingly. Each of the next n - 1 lines contains two integers ui and vi ( 1 \u2264 ui, vi \u2264 n, ui = \u0338 vi) , that show that there is an edge between nodes ui and vi. Each edge' s description occurs in the input exactly once. It is guaranteed that the given graph is a tree that has the property that is described in the statement. Next q lines describe the requests. The request to add has the following format: 0 v x d ( 1 \u2264 v \u2264 n, 1 \u2264 x \u2264 104, 1 \u2264 d < n) . The request to print the node value has the following format: 1 v ( 1 \u2264 v \u2264 n) . The numbers in the lines are separated by single spaces.",
    "output": "For each request to print the node value print an integer \u2014 the reply to the request.",
    "note": "",
    "topics": [
      "data structures",
      "graphs",
      "trees"
    ],
    "id": "276E"
  },
  {
    "title": "Little Girl and Maximum Sum",
    "url": "https://codeforces.com/problemset/problem/276/C",
    "history": "The little girl loves the problems on array queries very much. One day she came across a rather well- known problem: you' ve got an array of n elements ( the elements of the array are indexed starting from 1) ; also, there are q queries, each one is defined by a pair of integers l_ i , r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 n) . You need to find for each query the sum of elements of the array with indexes from l_ i to r_ i , inclusive. The little girl found the problem rather boring. She decided to reorder the array elements before replying to the queries in a way that makes the sum of query replies maximum possible. Your task is to find the value of this maximum sum.",
    "input": "The first line contains two space- separated integers n ( 1 \u2264 n \u2264 2\u00b710^ 5 ) and q ( 1 \u2264 q \u2264 2\u00b710^ 5 ) \u2014 the number of elements in the array and the number of queries, correspondingly. The next line contains n space- separated integers a_ i ( 1 \u2264 a_ i \u2264 2\u00b710^ 5 ) \u2014 the array elements. Each of the following q lines contains two space- separated integers l_ i and r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 n ) \u2014 the i - th query.",
    "output": "In a single line print, a single integer \u2014 the maximum sum of query replies after the array elements are reordered. Please, do not use the",
    "note": "",
    "topics": [
      "data structures",
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "276C"
  },
  {
    "title": "Mirror Room",
    "url": "https://codeforces.com/problemset/problem/274/E",
    "history": "Imagine an n \u00d7 m grid with some blocked cells. The top left cell in the grid has coordinates ( 1, 1) and the bottom right cell has coordinates ( n, m) . There are k blocked cells in the grid and others are empty. You flash a laser beam from the center of an empty cell ( xs, ys) in one of the diagonal directions ( i. e. north- east, north- west, south- east or south- west) . If the beam hits a blocked cell or the border of the grid it will reflect. The behavior of the beam reflection in different situations is depicted in the figure below. After a while the beam enters an infinite cycle. Count the number of empty cells that the beam goes through at least once. We consider that the beam goes through cell if it goes through its center.",
    "input": "The first line of the input contains three integers n, m and k ( 1 \u2264 n, m \u2264 105, 0 \u2264 k \u2264 105) . Each of the next k lines contains two integers xi and yi ( 1 \u2264 xi \u2264 n, 1 \u2264 yi \u2264 m) indicating the position of the i- th blocked cell. The last line contains xs, ys ( 1 \u2264 xs \u2264 n, 1 \u2264 ys \u2264 m) and the flash direction which is equal to \" NE\" , \" NW\" , \" SE\" or \" SW\" . These strings denote directions ( - 1, 1) , ( - 1, - 1) , ( 1, 1) , ( 1, - 1) . It' s guaranteed that no two blocked cells have the same coordinates.",
    "output": "In the only line of the output print the number of empty cells that the beam goes through at least once. Please, do not write the",
    "note": "",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "274E"
  },
  {
    "title": "Dima and Staircase",
    "url": "https://codeforces.com/problemset/problem/272/C",
    "history": "Dima' s got a staircase that consists of n stairs. The first stair is at height a1, the second one is at a2, the last one is at an ( 1 \u2264 a1 \u2264 a2 \u2264 . . . \u2264 an) . Dima decided to play with the staircase, so he is throwing rectangular boxes at the staircase from above. The i- th box has width wi and height hi. Dima throws each box vertically down on the first wi stairs of the staircase, that is, the box covers stairs with numbers 1, 2, . . . , wi. Each thrown box flies vertically down until at least one of the two following events happen: the bottom of the box touches the top of a stair; the bottom of the box touches the top of a box, thrown earlier. We only consider touching of the horizontal sides of stairs and boxes, at that touching with the corners isn' t taken into consideration. Specifically, that implies that a box with width wi cannot touch the stair number wi + 1. You are given the description of the staircase and the sequence in which Dima threw the boxes at it. For each box, determine how high the bottom of the box after landing will be. Consider a box to fall after the previous one lands.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 105) \u2014 the number of stairs in the staircase. The second line contains a non- decreasing sequence, consisting of n integers, a1, a2, . . . , an ( 1 \u2264 ai \u2264 109; ai \u2264 ai + 1) . The next line contains integer m ( 1 \u2264 m \u2264 105) \u2014 the number of boxes. Each of the following m lines contains a pair of integers wi, hi ( 1 \u2264 wi \u2264 n; 1 \u2264 hi \u2264 109) \u2014 the size of the i- th thrown box. The numbers in the lines are separated by spaces.",
    "output": "Print m integers \u2014 for each box the height, where the bottom of the box will be after landing. Print the answers for the boxes in the order, in which the boxes are given in the input. Please, do not use the",
    "note": "The first sample are shown on the picture.",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "272C"
  },
  {
    "title": "Good Substrings",
    "url": "https://codeforces.com/problemset/problem/271/D",
    "history": "You' ve got string s, consisting of small English letters. Some of the English letters are good, the rest are bad. A substring s[ l. . . r] ( 1 \u2264 l \u2264 r \u2264 | s| ) of string s = s1s2. . . s| s| ( where | s| is the length of string s) is string slsl + 1. . . sr. The substring s[ l. . . r] is good, if among the letters sl, sl + 1, . . . , sr there are at most k bad ones ( look at the sample' s explanation to understand it more clear) . Your task is to find the number of distinct good substrings of the given string s. Two substrings s[ x. . . y] and s[ p. . . q] are considered distinct if their content is different, i. e. s[ x. . . y] = \u0338 s[ p. . . q] .",
    "input": "The first line of the input is the non- empty string s, consisting of small English letters, the string' s length is at most 1500 characters. The second line of the input is the string of characters \" 0\" and \" 1\" , the length is exactly 26 characters. If the i- th character of this string equals \" 1\" , then the i- th English letter is good, otherwise it' s bad. That is, the first character of this string corresponds to letter \" a\" , the second one corresponds to letter \" b\" and so on. The third line of the input consists a single integer k ( 0 \u2264 k \u2264 | s| ) \u2014 the maximum acceptable number of bad characters in a good substring.",
    "output": "Print a single integer \u2014 the number of distinct good substrings of string s.",
    "note": "In the first example there are following good substrings: \" a\" , \" ab\" , \" b\" , \" ba\" , \" bab\" . In the second example there are following good substrings: \" a\" , \" aa\" , \" ac\" , \" b\" , \" ba\" , \" c\" , \" ca\" , \" cb\" .",
    "topics": [
      "data structures",
      "strings"
    ],
    "id": "271D"
  },
  {
    "title": "Multithreading",
    "url": "https://codeforces.com/problemset/problem/270/B",
    "history": "Emuskald is addicted to Codeforces, and keeps refreshing the main page not to miss any changes in the \" recent actions\" list. He likes to read thread conversations where each thread consists of multiple messages. Recent actions shows a list of n different threads ordered by the time of the latest message in the thread. When a new message is posted in a thread that thread jumps on the top of the list. No two messages of different threads are ever posted at the same time. Emuskald has just finished reading all his opened threads and refreshes the main page for some more messages to feed his addiction. He notices that no new threads have appeared in the list and at the i- th place in the list there is a thread that was at the ai- th place before the refresh. He doesn' t want to waste any time reading old messages so he wants to open only threads with new messages. Help Emuskald find out the number of threads that surely have new messages. A thread x surely has a new message if there is no such sequence of thread updates ( posting messages) that both conditions hold: thread x is not updated ( it has no new messages) ; the list order 1, 2, . . . , n changes to a1, a2, . . . , an.",
    "input": "The first line of input contains an integer n, the number of threads ( 1 \u2264 n \u2264 105) . The next line contains a list of n space- separated integers a1, a2, . . . , an where ai ( 1 \u2264 ai \u2264 n) is the old position of the i- th thread in the new list. It is guaranteed that all of the ai are distinct.",
    "output": "Output a single integer \u2014 the number of threads that surely contain a new message.",
    "note": "In the first test case, threads 2 and 5 are placed before the thread 1, so these threads must contain new messages. Threads 1, 3 and 4 may contain no new messages, if only threads 2 and 5 have new messages. In the second test case, there may be no new messages at all, since the thread order hasn' t changed. In the third test case, only thread 1 can contain no new messages.",
    "topics": [
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "270B"
  },
  {
    "title": "Maximum Waterfall",
    "url": "https://codeforces.com/problemset/problem/269/D",
    "history": "Emuskald was hired to design an artificial waterfall according to the latest trends in landscape architecture. A modern artificial waterfall consists of multiple horizontal panels affixed to a wide flat wall. The water flows down the top of the wall from panel to panel until it reaches the bottom of the wall. The wall has height t and has n panels on the wall. Each panel is a horizontal segment at height hi which begins at li and ends at ri. The i- th panel connects the points ( li, hi) and ( ri, hi) of the plane. The top of the wall can be considered a panel connecting the points ( - 109, t) and ( 109, t) . Similarly, the bottom of the wall can be considered a panel connecting the points ( - 109, 0) and ( 109, 0) . No two panels share a common point. Emuskald knows that for the waterfall to be aesthetically pleasing, it can flow from panel i to panel j ( ) only if the following conditions hold: max( li, lj) < min( ri, rj) ( horizontal projections of the panels overlap) ; hj < hi ( panel j is below panel i) ; there is no such panel k ( hj < hk < hi) that the first two conditions hold for the pairs ( i, k) and ( k, j) . Then the flow for is equal to min( ri, rj) - max( li, lj) , the length of their horizontal projection overlap. Emuskald has decided that in his waterfall the water will flow in a single path from top to bottom. If water flows to a panel ( except the bottom of the wall) , the water will fall further to exactly one lower panel. The total amount of water flow in the waterfall is then defined as the minimum horizontal projection overlap between two consecutive panels in the path of the waterfall. Formally: the waterfall consists of a single path of panels ; the flow of the waterfall is the minimum flow in the path . To make a truly great waterfall Emuskald must maximize this water flow, but there are too many panels and he is having a hard time planning his creation. Below is an example of a waterfall Emuskald wants: Help Emuskald maintain his reputation and find the value of the maximum possible water flow.",
    "input": "The first line of input contains two space- separated integers n and t ( 1 \u2264 n \u2264 105, 2 \u2264 t \u2264 109) , the number of the panels excluding the top and the bottom panels, and the height of the wall. Each of the n following lines contain three space- separated integers hi, li and ri ( 0 < hi < t, - 109 \u2264 li < ri \u2264 109) , the height, left and right ends of the i- th panel segment. It is guaranteed that no two segments share a common point.",
    "output": "Output a single integer \u2014 the maximum possible amount of water flow in the desired waterfall.",
    "note": "The first test case corresponds to the picture.",
    "topics": [
      "data structures",
      "dp",
      "graphs",
      "sortings"
    ],
    "id": "269D"
  },
  {
    "title": "More Queries to Array...",
    "url": "https://codeforces.com/problemset/problem/266/E",
    "history": "You' ve got an array, consisting of n integers: a1, a2, . . . , an. Your task is to quickly run the queries of two types: Assign value x to all elements from l to r inclusive. After such query the values of the elements of array al, al + 1, . . . , ar become equal to x. Calculate and print sum , where k doesn' t exceed 5. As the value of the sum can be rather large, you should print it modulo 1000000007 ( 109 + 7) .",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 105) , showing, how many numbers are in the array and the number of queries, correspondingly. The second line contains n integers: a1, a2, . . . , an ( 0 \u2264 ai \u2264 109) \u2014 the initial values of the array elements. Then m queries follow, one per line: The assign query has the following format: \" \" , ( 1 \u2264 l \u2264 r \u2264 n; 0 \u2264 x \u2264 109) . The query to calculate the sum has the following format: \" \" , ( 1 \u2264 l \u2264 r \u2264 n; 0 \u2264 k \u2264 5) . All numbers in the input are integers.",
    "output": "For each query to calculate the sum print an integer \u2014 the required sum modulo 1000000007 ( 109 + 7) .",
    "note": "",
    "topics": [
      "data structures",
      "math"
    ],
    "id": "266E"
  },
  {
    "title": "Roadside Trees",
    "url": "https://codeforces.com/problemset/problem/264/E",
    "history": "Squirrel Liss loves nuts. Liss asks you to plant some nut trees. There are n positions ( numbered 1 to n from west to east) to plant a tree along a street. Trees grow one meter per month. At the beginning of each month you should process one query. The query is one of the following types: Plant a tree of height h at position p. Cut down the x- th existent ( not cut) tree from the west ( where x is 1- indexed) . When we cut the tree it drops down and takes all the available place at the position where it has stood. So no tree can be planted at this position anymore. After processing each query, you should print the length of the longest increasing subsequence. A subset of existent trees is called an increasing subsequence if the height of the trees in the set is strictly increasing from west to east ( for example, the westmost tree in the set must be the shortest in the set) . The length of the increasing subsequence is the number of trees in it. Note that Liss don' t like the trees with the same heights, so it is guaranteed that at any time no two trees have the exactly same heights.",
    "input": "The first line contains two integers: n and m ( 1 \u2264 n \u2264 105; 1 \u2264 m \u2264 2\u00b7105) \u2014 the number of positions and the number of queries. Next m lines contains the information of queries by following formats: If the i- th query is type 1, the i- th line contains three integers: 1, pi, and hi ( 1 \u2264 pi \u2264 n, 1 \u2264 hi \u2264 10) , where pi is the position of the new tree and hi is the initial height of the new tree. If the i- th query is type 2, the i- th line contains two integers: 2 and xi ( 1 \u2264 xi \u2264 10) , where the xi is the index of the tree we want to cut. The input is guaranteed to be correct, i. e. , For type 1 queries, pi will be pairwise distinct. For type 2 queries, xi will be less than or equal to the current number of trees. At any time no two trees have the exactly same heights. In each line integers are separated by single spaces.",
    "output": "Print m integers \u2014 the length of the longest increasing subsequence after each query. Separate the numbers by whitespaces.",
    "note": "States of street after each query you can see on the following animation: If your browser doesn' t support animation png, please see the gif version here: http: / / 212. 193. 37. 254/ codeforces/ images/ 162/ roadtree. gif",
    "topics": [
      "data structures",
      "dp"
    ],
    "id": "264E"
  },
  {
    "title": "Escape from Stones",
    "url": "https://codeforces.com/problemset/problem/264/A",
    "history": "Squirrel Liss lived in a forest peacefully, but unexpected trouble happens. Stones fall from a mountain. Initially Squirrel Liss occupies an interval [ 0, 1] . Next, n stones will fall and Liss will escape from the stones. The stones are numbered from 1 to n in order. The stones always fall to the center of Liss' s interval. When Liss occupies the interval [ k - d, k + d] and a stone falls to k, she will escape to the left or to the right. If she escapes to the left, her new interval will be [ k - d, k] . If she escapes to the right, her new interval will be [ k, k + d] . You are given a string s of length n. If the i- th character of s is \" l\" or \" r\" , when the i- th stone falls Liss will escape to the left or to the right, respectively. Find the sequence of stones' numbers from left to right after all the n stones falls.",
    "input": "The input consists of only one line. The only line contains the string s ( 1 \u2264 | s| \u2264 106) . Each character in s will be either \" l\" or \" r\" .",
    "output": "Output n lines \u2014 on the i- th line you should print the i- th stone' s number from the left.",
    "note": "In the first example, the positions of stones 1, 2, 3, 4, 5 will be , respectively. So you should print the sequence: 3, 5, 4, 2, 1.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "implementation",
      "two pointers"
    ],
    "id": "264A"
  },
  {
    "title": "Rhombus",
    "url": "https://codeforces.com/problemset/problem/263/E",
    "history": "You' ve got a table of size n \u00d7 m. On the intersection of the i- th row ( 1 \u2264 i \u2264 n) and the j- th column ( 1 \u2264 j \u2264 m) there is a non- negative integer ai, j. Besides, you' ve got a non- negative integer k. Your task is to find such pair of integers ( a, b) that meets these conditions: k \u2264 a \u2264 n - k + 1; k \u2264 b \u2264 m - k + 1; let' s denote the maximum of the function among all integers x and y, that satisfy the inequalities k \u2264 x \u2264 n - k + 1 and k \u2264 y \u2264 m - k + 1, as mval; for the required pair of numbers the following equation must hold f( a, b) = mval.",
    "input": "The first line contains three space- separated integers n, m and k ( 1 \u2264 n, m \u2264 1000, ) . Next n lines each contains m integers: the j- th number on the i- th line equals ai, j ( 0 \u2264 ai, j \u2264 106) . The numbers in the lines are separated by spaces.",
    "output": "Print the required pair of integers a and b. Separate the numbers by a space. If there are multiple correct answers, you are allowed to print any of them.",
    "note": "",
    "topics": [
      "brute force",
      "data structures",
      "dp"
    ],
    "id": "263E"
  },
  {
    "title": "Dividing Kingdom",
    "url": "https://codeforces.com/problemset/problem/260/E",
    "history": "A country called Flatland is an infinite two- dimensional plane. Flatland has n cities, each of them is a point on the plane. Flatland is ruled by king Circle IV. Circle IV has 9 sons. He wants to give each of his sons part of Flatland to rule. For that, he wants to draw four distinct straight lines, such that two of them are parallel to the Ox axis, and two others are parallel to the Oy axis. At that, no straight line can go through any city. Thus, Flatland will be divided into 9 parts, and each son will be given exactly one of these parts. Circle IV thought a little, evaluated his sons' obedience and decided that the i- th son should get the part of Flatland that has exactly ai cities. Help Circle find such four straight lines that if we divide Flatland into 9 parts by these lines, the resulting parts can be given to the sons so that son number i got the part of Flatland which contains ai cities.",
    "input": "The first line contains integer n ( 9 \u2264 n \u2264 105) \u2014 the number of cities in Flatland. Next n lines each contain two space- separated integers: xi, yi ( - 109 \u2264 xi, yi \u2264 109) \u2014 the coordinates of the i- th city. No two cities are located at the same point. The last line contains nine space- separated integers: .",
    "output": "If there is no solution, print a single integer - 1. Otherwise, print in the first line two distinct real space- separated numbers: x1, x2 \u2014 the abscissas of the straight lines that are parallel to the Oy axis. And in the second line print two distinct real space- separated numbers: y1, y2 \u2014 the ordinates of the straight lines, parallel to the Ox. If there are multiple solutions, print any of them. When the answer is being checked, a city is considered to lie on a straight line, if the distance between the city and the line doesn' t exceed 10 - 6. Two straight lines are considered the same if the distance between them doesn' t exceed 10 - 6.",
    "note": "The solution for the first sample test is shown below: The solution for the second sample test is shown below: There is no solution for the third sample test.",
    "topics": [
      "binary search",
      "brute force",
      "data structures"
    ],
    "id": "260E"
  },
  {
    "title": "Little Elephant and Tree",
    "url": "https://codeforces.com/problemset/problem/258/E",
    "history": "The Little Elephant loves trees very much, he especially loves root trees. He' s got a tree consisting of n nodes ( the nodes are numbered from 1 to n) , with root at node number 1. Each node of the tree contains some list of numbers which initially is empty. The Little Elephant wants to apply m operations. On the i- th operation ( 1 \u2264 i \u2264 m) he first adds number i to lists of all nodes of a subtree with the root in node number ai, and then he adds number i to lists of all nodes of the subtree with root in node bi. After applying all operations the Little Elephant wants to count for each node i number ci \u2014 the number of integers j ( 1 \u2264 j \u2264 n; j = \u0338 i) , such that the lists of the i- th and the j- th nodes contain at least one common number. Help the Little Elephant, count numbers ci for him.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 105) \u2014 the number of the tree nodes and the number of operations. Each of the following n - 1 lines contains two space- separated integers, ui and vi ( 1 \u2264 ui, vi \u2264 n, ui = \u0338 vi) , that mean that there is an edge between nodes number ui and vi. Each of the following m lines contains two space- separated integers, ai and bi ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi) , that stand for the indexes of the nodes in the i- th operation. It is guaranteed that the given graph is an undirected tree.",
    "output": "In a single line print n space- separated integers \u2014 c1, c2, . . . , cn.",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "trees"
    ],
    "id": "258E"
  },
  {
    "title": "Greedy Elevator",
    "url": "https://codeforces.com/problemset/problem/257/E",
    "history": "The m- floor ( m > 1) office of international corporation CodeForces has the advanced elevator control system established. It works as follows. All office floors are sequentially numbered with integers from 1 to m. At time t = 0, the elevator is on the first floor, the elevator is empty and nobody is waiting for the elevator on other floors. Next, at times ti ( ti > 0) people come to the elevator. For simplicity, we assume that one person uses the elevator only once during the reported interval. For every person we know three parameters: the time at which the person comes to the elevator, the floor on which the person is initially, and the floor to which he wants to go. The movement of the elevator between the floors is as follows. At time t ( t \u2265 0, t is an integer) the elevator is always at some floor. First the elevator releases all people who are in the elevator and want to get to the current floor. Then it lets in all the people waiting for the elevator on this floor. If a person comes to the elevator exactly at time t, then he has enough time to get into it. We can assume that all of these actions ( going in or out from the elevator) are made instantly. After that the elevator decides, which way to move and at time ( t + 1) the elevator gets to the selected floor. The elevator selects the direction of moving by the following algorithm. If the elevator is empty and at the current time no one is waiting for the elevator on any floor, then the elevator remains at the current floor. Otherwise, let' s assume that the elevator is on the floor number x ( 1 \u2264 x \u2264 m) . Then elevator calculates the directions' \" priorities\" pup and pdown: pup is the sum of the number of people waiting for the elevator on the floors with numbers greater than x, and the number of people in the elevator, who want to get to the floors with the numbers greater than x; pdown is the sum of the number of people waiting for the elevator on the floors with numbers less than x, and the number of people in the elevator, who want to get to the floors with the numbers less than x. If pup \u2265 pdown, then the elevator goes one floor above the current one ( that is, from floor x to floor x + 1) , otherwise the elevator goes one floor below the current one ( that is, from floor x to floor x - 1) . Your task is to simulate the work of the elevator and for each person to tell the time when the elevator will get to the floor this person needs. Please note that the elevator is large enough to accommodate all the people at once.",
    "input": "The first line contains two space- separated integers: n, m ( 1 \u2264 n \u2264 105, 2 \u2264 m \u2264 105) \u2014 the number of people and floors in the building, correspondingly. Next n lines each contain three space- separated integers: ti, si, fi ( 1 \u2264 ti \u2264 109, 1 \u2264 si, fi \u2264 m, si = \u0338 fi) \u2014 the time when the i- th person begins waiting for the elevator, the floor number, where the i- th person was initially located, and the number of the floor, where he wants to go.",
    "output": "Print n lines. In the i- th line print a single number \u2014 the moment of time, when the i- th person gets to the floor he needs. The people are numbered in the order, in which they are given in the input. Please don' t use the",
    "note": "In the first sample the elevator worked as follows: t = 1. The elevator is on the floor number 1. The elevator is empty. The floor number 2 has one person waiting. pup = 1 + 0 = 1, pdown = 0 + 0 = 0, pup \u2265 pdown. So the elevator goes to the floor number 2. t = 2. The elevator is on the floor number 2. One person enters the elevator, he wants to go to the floor number 7. pup = 0 + 1 = 1, pdown = 0 + 0 = 0, pup \u2265 pdown. So the elevator goes to the floor number 3. t = 3. The elevator is on the floor number 3. There is one person in the elevator, he wants to go to floor 7. The floors number 4 and 6 have two people waiting for the elevator. pup = 2 + 1 = 3, pdown = 0 + 0 = 0, pup \u2265 pdown. So the elevator goes to the floor number 4. t = 4. The elevator is on the floor number 4. There is one person in the elevator who wants to go to the floor number 7. One person goes into the elevator, he wants to get to the floor number 8. The floor number 6 has one man waiting. pup = 1 + 2 = 3, pdown = 0 + 0 = 0, pup \u2265 pdown. So the elevator goes to the floor number 5. t = 5. The elevator is on the floor number 5. There are two people in the elevator, they want to get to the floors number 7 and 8, correspondingly. There is one person waiting for the elevator on the floor number 6. pup = 1 + 2 = 3, pdown = 0 + 0 = 0, pup \u2265 pdown. So the elevator goes to the floor number 6. t = 6. The elevator is on the floor number 6. There are two people in the elevator, they want to get to the floors number 7 and 8, correspondingly. One man enters the elevator, he wants to get to the floor number 5. pup = 0 + 2 = 2, pdown = 0 + 1 = 1, pup \u2265 pdown. So the elevator goes to the floor number 7. t = 7. The elevator is on the floor number 7. One person leaves the elevator, this person wanted to get to the floor number 7. There are two people in the elevator, they want to get to the floors with numbers 8 and 5, correspondingly. pup = 0 + 1 = 1, pdown = 0 + 1 = 1, pup \u2265 pdown. So the elevator goes to the floor number 8. t = 8. The elevator is on the floor number 8. One person leaves the elevator, this person wanted to go to the floor number 8. There is one person in the elevator, he wants to go to the floor number 5. pup = 0 + 0 = 0, pdown = 0 + 1 = 1, pup < pdown. So the elevator goes to the floor number 7. t = 9. The elevator is on the floor number 7. There is one person in the elevator, this person wants to get to the floor number 5. pup = 0 + 0 = 0, pdown = 0 + 1 = 1, pup < pdown. So the elevator goes to the floor number 6. t = 10. The elevator is on the floor number 6. There is one person in the elevator, he wants to get to the floor number 5. pup = 0 + 0 = 0, pdown = 0 + 1 = 1, pup < pdown. So the elevator goes to the floor number 5. t = 11. The elevator is on the floor number 5. One person leaves the elevator, this person initially wanted to get to the floor number 5. The elevator is empty and nobody needs it, so the elevator remains at the floor number 5.",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "257E"
  },
  {
    "title": "Lucky Arrays",
    "url": "https://codeforces.com/problemset/problem/256/E",
    "history": "Little Maxim loves interesting problems. He decided to share one such problem with you. Initially there is an array a, consisting of n zeroes. The elements of the array are indexed, starting from 1. Then follow queries to change array a. Each query is characterized by two integers vi, ti. In the answer to the query we should make the vi- th array element equal ti ( avi = ti; 1 \u2264 vi \u2264 n) . Maxim thinks that some pairs of integers ( x, y) are good and some are not. Maxim thinks that array a, consisting of n integers, is lucky, if for all integer i, ( 1 \u2264 i \u2264 n - 1) the pair of integers ( ai, ai + 1) \u2014 is good. Note that the order of numbers in the pairs is important, that is, specifically, ( 1, 2) = \u0338 ( 2, 1) . After each query to change array a Maxim wants to know, how many ways there are to replace all zeroes in array a with integers from one to three so as to make the resulting array ( without zeroes) lucky. Of course, distinct zeroes can be replaced by distinct integers. Maxim told you the sequence of queries and all pairs of integers he considers lucky. Help Maxim, solve this problem for him.",
    "input": "The first line contains integers n and m ( 1 \u2264 n, m \u2264 77777) \u2014 the number of elements in the array and the number of commands. The next three lines contain matrix w, consisting only of zeroes and ones; the j- th number in the i- th of these lines \u2014 wi, j. If wi, j = 1 ( 1 \u2264 i, j \u2264 3) , then pair ( i, j) is good, otherwise it is not good. Matrix does not have to be symmetric relative to the main diagonal. Next m lines contain pairs of integers vi, ti ( 1 \u2264 vi \u2264 n, 0 \u2264 ti \u2264 3) \u2014 the queries to change the array.",
    "output": "Print m integers \u2014 the i- th number should equal to the number of ways to replace all zeroes in array a ( changed after the i- th query) by integers from one to three so as to make the resulting array ( without zeroes) lucky. Separate the numbers by whitespaces. As the answers can be rather large, print the remainder from dividing them by 777777777.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": "256E"
  },
  {
    "title": "Printer",
    "url": "https://codeforces.com/problemset/problem/253/E",
    "history": "Let' s consider a network printer that functions like that. It starts working at time 0. In each second it can print one page of a text. At some moments of time the printer receives printing tasks. We know that a printer received n tasks. Let' s number the tasks by consecutive integers from 1 to n. Then the task number i is characterised by three integers: ti is the time when the task came, si is the task' s volume ( in pages) and pi is the task' s priority. The priorities of all tasks are distinct. When the printer receives a task, the task goes to the queue and remains there until all pages from this task are printed. The printer chooses a page to print each time when it either stops printing some page or when it is free and receives a new task. Among all tasks that are in the queue at this moment, the printer chooses the task with the highest priority and next second prints an unprinted page from this task. You can assume that a task goes to the queue immediately, that' s why if a task has just arrived by time t, the printer can already choose it for printing. You are given full information about all tasks except for one: you don' t know this task' s priority. However, we know the time when the last page from this task was finished printing. Given this information, find the unknown priority value and determine the moments of time when the printer finished printing each task.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 50000) . Next n lines describe the tasks. The i- th of these lines contains three integers ti, si and pi, separated by single spaces ( 0 \u2264 ti \u2264 109, 1 \u2264 si, pi \u2264 109) . Exactly one task ( let' s assume that his number is x) has number - 1 written instead of the priority. All priorities are different. The last line contains integer T \u2014 the time when the printer finished printing the last page of task x ( 1 \u2264 T \u2264 1015) . Numbers ti are not necessarily distinct. The tasks in the input are written in the arbitrary order.",
    "output": "In the first line print integer px \u2014 the priority of the task number x ( 1 \u2264 px \u2264 109, remember that all priorities should be distinct) . Then print n integers, the i- th of them represents the moment of time when the last page of the task number i finished printing. It is guaranteed that at least one solution exists. If there are multiple solutions, print any of them.",
    "note": "Let' s consider the first test case. Let' s assume that the unknown priority equals 4, then the printer' s actions for each second are as follows: the beginning of the 1- st second ( time 0) . The queue has task 2. The printer prints the first page of this task; the beginning of the 2- nd second ( time 1) . The queue has tasks 2 and 3. The printer prints the first page of task 3; the beginning of the 3- rd second ( time 2) . The queue has tasks 2 and 3. The printer prints the second page of task 3; the beginning of the 4- th second ( time 3) . The queue has tasks 2 and 3. The printer prints the third ( last) page of task 3. Thus, by the end of the 4- th second this task will have been printed; the beginning of the 5- th second ( time 4) . The queue has tasks 2 and 1. The printer prints the first page of task 1; the beginning of the 6- th second ( time 5) . The queue has tasks 2 and 1. The printer prints the second page of task 1; the beginning of the 7- th second ( time 6) . The queue has tasks 2 and 1. The printer prints the third ( last) page of task 1. Thus, by the end of the 7- th second this task will have been printed; the beginning of the 8- th second ( time 7) . The queue has task 2. The printer prints the second ( last) page of task 2. Thus, by the end of the 8- th second this task will have been printed. In the end, task number 1 will have been printed by the end of the 7- th second, as was required. And tasks 2 and 3 are printed by the end of the of the 8- th and the 4- th second correspondingly.",
    "topics": [
      "binary search",
      "data structures",
      "implementation",
      "sortings"
    ],
    "id": "253E"
  },
  {
    "title": "Text Editor",
    "url": "https://codeforces.com/problemset/problem/253/C",
    "history": "Vasya is pressing the keys on the keyboard reluctantly, squeezing out his ideas on the classical epos depicted in Homer' s Odysseus. . . How can he explain to his literature teacher that he isn' t going to become a writer? In fact, he is going to become a programmer. So, he would take great pleasure in writing a program, but none \u2014 in writing a composition. As Vasya was fishing for a sentence in the dark pond of his imagination, he suddenly wondered: what is the least number of times he should push a key to shift the cursor from one position to another one? Let' s describe his question more formally: to type a text, Vasya is using the text editor. He has already written n lines, the i- th line contains ai characters ( including spaces) . If some line contains k characters, then this line overall contains ( k + 1) positions where the cursor can stand: before some character or after all characters ( at the end of the line) . Thus, the cursor' s position is determined by a pair of integers ( r, c) , where r is the number of the line and c is the cursor' s position in the line ( the positions are indexed starting from one from the beginning of the line) . Vasya doesn' t use the mouse to move the cursor. He uses keys \" Up\" , \" Down\" , \" Right\" and \" Left\" . When he pushes each of these keys, the cursor shifts in the needed direction. Let' s assume that before the corresponding key is pressed, the cursor was located in the position ( r, c) , then Vasya pushed key: \" Up\" : if the cursor was located in the first line ( r = 1) , then it does not move. Otherwise, it moves to the previous line ( with number r - 1) , to the same position. At that, if the previous line was short, that is, the cursor couldn' t occupy position c there, the cursor moves to the last position of the line with number r - 1; \" Down\" : if the cursor was located in the last line ( r = n) , then it does not move. Otherwise, it moves to the next line ( with number r + 1) , to the same position. At that, if the next line was short, that is, the cursor couldn' t occupy position c there, the cursor moves to the last position of the line with number r + 1; \" Right\" : if the cursor can move to the right in this line ( c < ar + 1) , then it moves to the right ( to position c + 1) . Otherwise, it is located at the end of the line and doesn' t move anywhere when Vasya presses the \" Right\" key; \" Left\" : if the cursor can move to the left in this line ( c > 1) , then it moves to the left ( to position c - 1) . Otherwise, it is located at the beginning of the line and doesn' t move anywhere when Vasya presses the \" Left\" key. You' ve got the number of lines in the text file and the number of characters, written in each line of this file. Find the least number of times Vasya should push the keys, described above, to shift the cursor from position ( r1, c1) to position ( r2, c2) .",
    "input": "The first line of the input contains an integer n ( 1 \u2264 n \u2264 100) \u2014 the number of lines in the file. The second line contains n integers a1, a2, . . . , an ( 0 \u2264 ai \u2264 105) , separated by single spaces. The third line contains four integers r1, c1, r2, c2 ( 1 \u2264 r1, r2 \u2264 n, 1 \u2264 c1 \u2264 ar1 + 1, 1 \u2264 c2 \u2264 ar2 + 1) .",
    "output": "Print a single integer \u2014 the minimum number of times Vasya should push a key to move the cursor from position ( r1, c1) to position ( r2, c2) .",
    "note": "In the first sample the editor contains four lines. Let' s represent the cursor' s possible positions in the line as numbers. Letter s represents the cursor' s initial position, letter t represents the last one. Then all possible positions of the cursor in the text editor are described by the following table. 12312123s5671t345One of the possible answers in the given sample is: \" Left\" , \" Down\" , \" Left\" .",
    "topics": [
      "data structures",
      "dfs and similar",
      "graphs",
      "greedy",
      "shortest paths"
    ],
    "id": "253C"
  },
  {
    "title": "Donkey and Stars",
    "url": "https://codeforces.com/problemset/problem/249/D",
    "history": "In the evenings Donkey would join Shrek to look at the stars. They would sit on a log, sipping tea and they would watch the starry sky. The sky hung above the roof, right behind the chimney. Shrek' s stars were to the right of the chimney and the Donkey' s stars were to the left. Most days the Donkey would just count the stars, so he knew that they are exactly n. This time he wanted a challenge. He imagined a coordinate system: he put the origin of the coordinates at the intersection of the roof and the chimney, directed the OX axis to the left along the roof and the OY axis \u2014 up along the chimney ( see figure) . The Donkey imagined two rays emanating from he origin of axes at angles \u03b11 and \u03b12 to the OX axis. Now he chooses any star that lies strictly between these rays. After that he imagines more rays that emanate from this star at the same angles \u03b11 and \u03b12 to the OX axis and chooses another star that lies strictly between the new rays. He repeats the operation as long as there still are stars he can choose between the rays that emanate from a star. As a result, the Donkey gets a chain of stars. He can consecutively get to each star if he acts by the given rules. Your task is to find the maximum number of stars m that the Donkey' s chain can contain. Note that the chain must necessarily start in the point of the origin of the axes, that isn' t taken into consideration while counting the number m of stars in the chain.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 105) \u2014 the number of stars. The second line contains simple fractions representing relationships \" a/ b c/ d\" , such that and ( 0 \u2264 a, b, c, d \u2264 105; ; ; ) . The given numbers a, b, c, d are integers. Next n lines contain pairs of integers xi, yi ( 1 \u2264 xi, yi \u2264 105) \u2014 the stars' coordinates. It is guaranteed that all stars have distinct coordinates.",
    "output": "In a single line print number m \u2014 the answer to the problem.",
    "note": "In the sample the longest chain the Donkey can build consists of four stars. Note that the Donkey can' t choose the stars that lie on the rays he imagines.",
    "topics": [
      "data structures",
      "dp",
      "geometry",
      "math",
      "sortings"
    ],
    "id": "249D"
  },
  {
    "title": "Blood Cousins Return",
    "url": "https://codeforces.com/problemset/problem/246/E",
    "history": "Polycarpus got hold of a family tree. The found tree describes the family relations of n people, numbered from 1 to n. Every person in this tree has at most one direct ancestor. Also, each person in the tree has a name, the names are not necessarily unique. We call the man with a number a a 1- ancestor of the man with a number b, if the man with a number a is a direct ancestor of the man with a number b. We call the man with a number a a k- ancestor ( k > 1) of the man with a number b, if the man with a number b has a 1- ancestor, and the man with a number a is a ( k - 1) - ancestor of the 1- ancestor of the man with a number b. In the tree the family ties do not form cycles. In other words there isn' t a person who is his own direct or indirect ancestor ( that is, who is an x- ancestor of himself, for some x, x > 0) . We call a man with a number a the k- son of the man with a number b, if the man with a number b is a k- ancestor of the man with a number a. Polycarpus is very much interested in how many sons and which sons each person has. He took a piece of paper and wrote m pairs of numbers vi, ki. Help him to learn for each pair vi, ki the number of distinct names among all names of the ki- sons of the man with number vi.",
    "input": "The first line of the input contains a single integer n ( 1 \u2264 n \u2264 105) \u2014 the number of people in the tree. Next n lines contain the description of people in the tree. The i- th line contains space- separated string si and integer ri ( 0 \u2264 ri \u2264 n) , where si is the name of the man with a number i, and ri is either the number of the direct ancestor of the man with a number i or 0, if the man with a number i has no direct ancestor. The next line contains a single integer m ( 1 \u2264 m \u2264 105) \u2014 the number of Polycarpus' s records. Next m lines contain space- separated pairs of integers. The i- th line contains integers vi, ki ( 1 \u2264 vi, ki \u2264 n) . It is guaranteed that the family relationships do not form cycles. The names of all people are non- empty strings, consisting of no more than 20 lowercase English letters.",
    "output": "Print m whitespace- separated integers \u2014 the answers to Polycarpus' s records. Print the answers to the records in the order, in which the records occur in the input.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "dfs and similar",
      "dp",
      "sortings"
    ],
    "id": "246E"
  },
  {
    "title": "Matrix",
    "url": "https://codeforces.com/problemset/problem/243/E",
    "history": "Let' s consider an n \u00d7 n square matrix, consisting of digits one and zero. We' ll consider a matrix good, if it meets the following condition: in each row of the matrix all ones go in one group. That is, each row of the matrix looks like that 00. . . 0011. . . 1100. . . 00 ( or simply consists of zeroes if it has no ones) . You are given matrix a of size n \u00d7 n, consisting of zeroes and ones. Your task is to determine whether you can get a good matrix b from it by rearranging the columns or not.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 500) \u2014 the size of matrix a. Each of n following lines contains n characters \" 0\" and \" 1\" \u2014 matrix a. Note that the characters are written without separators.",
    "output": "Print \" YES\" in the first line, if you can rearrange the matrix columns so as to get a good matrix b. In the next n lines print the good matrix b. If there are multiple answers, you are allowed to print any of them. If it is impossible to get a good matrix, print \" NO\" .",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": "243E"
  },
  {
    "title": "Cubes",
    "url": "https://codeforces.com/problemset/problem/243/D",
    "history": "One day Petya got a set of wooden cubes as a present from his mom. Petya immediately built a whole city from these cubes. The base of the city is an n \u00d7 n square, divided into unit squares. The square' s sides are parallel to the coordinate axes, the square' s opposite corners have coordinates ( 0, 0) and ( n, n) . On each of the unit squares Petya built a tower of wooden cubes. The side of a wooden cube also has a unit length. After that Petya went an infinitely large distance away from his masterpiece and looked at it in the direction of vector v = ( vx, vy, 0) . Petya wonders, how many distinct cubes are visible from this position. Help him, find this number. Each cube includes the border. We think that a cube is visible if there is a ray emanating from some point p, belonging to the cube, in the direction of vector - v, that doesn' t contain any points, belonging to other cubes.",
    "input": "The first line contains three integers n, vx and vy ( 1 \u2264 n \u2264 103, | vx| , | vy| \u2264 | 104| , | vx| + | vy| > 0) . Next n lines contain n integers each: the j- th integer in the i- th line aij ( 0 \u2264 aij \u2264 109, 1 \u2264 i, j \u2264 n) represents the height of the cube tower that stands on the unit square with opposite corners at points ( i - 1, j - 1) and ( i, j) .",
    "output": "Print a single integer \u2014 the number of visible cubes. Please, do not use the",
    "note": "",
    "topics": [
      "data structures",
      "dp",
      "geometry",
      "two pointers"
    ],
    "id": "243D"
  },
  {
    "title": "XOR on Segment",
    "url": "https://codeforces.com/problemset/problem/242/E",
    "history": "You' ve got an array a, consisting of n integers a1, a2, . . . , an. You are allowed to perform two operations on this array: Calculate the sum of current array elements on the segment [ l, r] , that is, count value al + al + 1 + . . . + ar. Apply the xor operation with a given number x to each array element on the segment [ l, r] , that is, execute . This operation changes exactly r - l + 1 array elements. Expression means applying bitwise xor operation to numbers x and y. The given operation exists in all modern programming languages, for example in language C+ + and Java it is marked as \" ^ \" , in Pascal \u2014 as \" xor\" . You' ve got a list of m operations of the indicated type. Your task is to perform all given operations, for each sum query you should print the result you get.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 105) \u2014 the size of the array. The second line contains space- separated integers a1, a2, . . . , an ( 0 \u2264 ai \u2264 106) \u2014 the original array. The third line contains integer m ( 1 \u2264 m \u2264 5\u00b7104) \u2014 the number of operations with the array. The i- th of the following m lines first contains an integer ti ( 1 \u2264 ti \u2264 2) \u2014 the type of the i- th query. If ti = 1, then this is the query of the sum, if ti = 2, then this is the query to change array elements. If the i- th operation is of type 1, then next follow two integers li, ri ( 1 \u2264 li \u2264 ri \u2264 n) . If the i- th operation is of type 2, then next follow three integers li, ri, xi ( 1 \u2264 li \u2264 ri \u2264 n, 1 \u2264 xi \u2264 106) . The numbers on the lines are separated by single spaces.",
    "output": "For each query of type 1 print in a single line the sum of numbers on the given segment. Print the answers to the queries in the order in which the queries go in the input. Please, do not use the",
    "note": "",
    "topics": [
      "bitmasks",
      "data structures"
    ],
    "id": "242E"
  },
  {
    "title": "Friends",
    "url": "https://codeforces.com/problemset/problem/241/B",
    "history": "You have n friends and you want to take m pictures of them. Exactly two of your friends should appear in each picture and no two pictures should contain the same pair of your friends. So if you have n = 3 friends you can take 3 different pictures, each containing a pair of your friends. Each of your friends has an attractiveness level which is specified by the integer number ai for the i- th friend. You know that the attractiveness of a picture containing the i- th and the j- th friends is equal to the exclusive- or ( xor operation) of integers ai and aj. You want to take pictures in a way that the total sum of attractiveness of your pictures is maximized. You have to calculate this value. Since the result may not fit in a 32- bit integer number, print it modulo 1000000007 ( 109 + 7) .",
    "input": "The first line of input contains two integers n and m \u2014 the number of friends and the number of pictures that you want to take. Next line contains n space- separated integers a1, a2, . . . , an ( 0 \u2264 ai \u2264 109) \u2014 the values of attractiveness of the friends.",
    "output": "The only line of output should contain an integer \u2014 the optimal total sum of attractiveness of your pictures.",
    "note": "",
    "topics": [
      "binary search",
      "bitmasks",
      "data structures",
      "math"
    ],
    "id": "241B"
  },
  {
    "title": "TorCoder",
    "url": "https://codeforces.com/problemset/problem/240/F",
    "history": "A boy named Leo doesn' t miss a single TorCoder contest round. On the last TorCoder round number 100666 Leo stumbled over the following problem. He was given a string s, consisting of n lowercase English letters, and m queries. Each query is characterised by a pair of integers li, ri ( 1 \u2264 li \u2264 ri \u2264 n) . We' ll consider the letters in the string numbered from 1 to n from left to right, that is, s = s1s2. . . sn. After each query he must swap letters with indexes from li to ri inclusive in string s so as to make substring ( li, ri) a palindrome. If there are multiple such letter permutations, you should choose the one where string ( li, ri) will be lexicographically minimum. If no such permutation exists, you should ignore the query ( that is, not change string s) . Everybody knows that on TorCoder rounds input line and array size limits never exceed 60, so Leo solved this problem easily. Your task is to solve the problem on a little bit larger limits. Given string s and m queries, print the string that results after applying all m queries to string s.",
    "input": "The first input line contains two integers n and m ( 1 \u2264 n, m \u2264 105) \u2014 the string length and the number of the queries. The second line contains string s, consisting of n lowercase Latin letters. Each of the next m lines contains a pair of integers li, ri ( 1 \u2264 li \u2264 ri \u2264 n) \u2014 a query to apply to the string.",
    "output": "In a single line print the result of applying m queries to string s. Print the queries in the order in which they are given in the input.",
    "note": "A substring ( li, ri) 1 \u2264 li \u2264 ri \u2264 n) of string s = s1s2. . . sn of length n is a sequence of characters slisli + 1. . . sri. A string is a palindrome, if it reads the same from left to right and from right to left. String x1x2. . . xp is lexicographically smaller than string y1y2. . . yq, if either p < q and x1 = y1, x2 = y2, . . . , xp = yp, or exists such number r ( r < p, r < q) , that x1 = y1, x2 = y2, . . . , xr = yr and xr + 1 < yr + 1.",
    "topics": [
      "data structures"
    ],
    "id": "240F"
  },
  {
    "title": "Tape Programming",
    "url": "https://codeforces.com/problemset/problem/238/D",
    "history": "There is a programming language in which every program is a non- empty sequence of \" < \" and \" > \" signs and digits. Let' s explain how the interpreter of this programming language works. A program is interpreted using movement of instruction pointer ( IP) which consists of two parts. Current character pointer ( CP) ; Direction pointer ( DP) which can point left or right; Initially CP points to the leftmost character of the sequence and DP points to the right. We repeat the following steps until the first moment that CP points to somewhere outside the sequence. If CP is pointing to a digit the interpreter prints that digit then CP moves one step according to the direction of DP. After that the value of the printed digit in the sequence decreases by one. If the printed digit was 0 then it cannot be decreased therefore it' s erased from the sequence and the length of the sequence decreases by one. If CP is pointing to \" < \" or \" > \" then the direction of DP changes to \" left\" or \" right\" correspondingly. Then CP moves one step according to DP. If the new character that CP is pointing to is \" < \" or \" > \" then the previous character will be erased from the sequence. If at any moment the CP goes outside of the sequence the execution is terminated. It' s obvious the every program in this language terminates after some steps. We have a sequence s1, s2, . . . , sn of \" < \" , \" > \" and digits. You should answer q queries. Each query gives you l and r and asks how many of each digit will be printed if we run the sequence sl, sl + 1, . . . , sr as an independent program in this language.",
    "input": "The first line of input contains two integers n and q ( 1 \u2264 n, q \u2264 105) \u2014 represents the length of the sequence s and the number of queries. The second line contains s, a sequence of \" < \" , \" > \" and digits ( 0. . 9) written from left to right. Note, that the characters of s are not separated with spaces. The next q lines each contains two integers li and ri ( 1 \u2264 li \u2264 ri \u2264 n) \u2014 the i- th query.",
    "output": "For each query print 10 space separated integers: x0, x1, . . . , x9 where xi equals the number of times the interpreter prints i while running the corresponding program. Print answers to the queries in the order they are given in input.",
    "note": "",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "238D"
  },
  {
    "title": "Cyclical Quest",
    "url": "https://codeforces.com/problemset/problem/235/C",
    "history": "Some days ago, WJMZBMR learned how to answer the query \" how many times does a string x occur in a string s\" quickly by preprocessing the string s. But now he wants to make it harder. So he wants to ask \" how many consecutive substrings of s are cyclical isomorphic to a given string x\" . You are given string s and n strings xi, for each string xi find, how many consecutive substrings of s are cyclical isomorphic to xi. Two strings are called cyclical isomorphic if one can rotate one string to get the other one. ' Rotate' here means ' to take some consecutive chars ( maybe none) from the beginning of a string and put them back at the end of the string in the same order' . For example, string \" abcde\" can be rotated to string \" deabc\" . We can take characters \" abc\" from the beginning and put them at the end of \" de\" .",
    "input": "The first line contains a non- empty string s. The length of string s is not greater than 106 characters. The second line contains an integer n ( 1 \u2264 n \u2264 105) \u2014 the number of queries. Then n lines follow: the i- th line contains the string xi \u2014 the string for the i- th query. The total length of xi is less than or equal to 106 characters. In this problem, strings only consist of lowercase English letters.",
    "output": "For each query xi print a single integer that shows how many consecutive substrings of s are cyclical isomorphic to xi. Print the answers to the queries in the order they are given in the input.",
    "note": "",
    "topics": [
      "data structures",
      "string suffix structures",
      "strings"
    ],
    "id": "235C"
  },
  {
    "title": "Fence",
    "url": "https://codeforces.com/problemset/problem/232/D",
    "history": "John Doe has a crooked fence, consisting of n rectangular planks, lined up from the left to the right: the plank that goes i- th ( 1 \u2264 i \u2264 n) ( from left to right) has width 1 and height hi. We will assume that the plank that goes i- th ( 1 \u2264 i \u2264 n) ( from left to right) has index i. A piece of the fence from l to r ( 1 \u2264 l \u2264 r \u2264 n) is a sequence of planks of wood with indices from l to r inclusive, that is, planks with indices l, l + 1, . . . , r. The width of the piece of the fence from l to r is value r - l + 1. Two pieces of the fence from l1 to r1 and from l2 to r2 are called matching, if the following conditions hold: the pieces do not intersect, that is, there isn' t a single plank, such that it occurs in both pieces of the fence; the pieces are of the same width; for all i ( 0 \u2264 i \u2264 r1 - l1) the following condition holds: hl1 + i + hl2 + i = hl1 + hl2. John chose a few pieces of the fence and now wants to know how many distinct matching pieces are for each of them. Two pieces of the fence are distinct if there is a plank, which belongs to one of them and does not belong to the other one.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 105) \u2014 the number of wood planks in the fence. The second line contains n space- separated integers h1, h2, . . . , hn ( 1 \u2264 hi \u2264 109) \u2014 the heights of fence planks. The third line contains integer q ( 1 \u2264 q \u2264 105) \u2014 the number of queries. Next q lines contain two space- separated integers li and ri ( 1 \u2264 li \u2264 ri \u2264 n) \u2014 the boundaries of the i- th piece of the fence.",
    "output": "For each query on a single line print a single integer \u2014 the number of pieces of the fence that match the given one. Print the answers to the queries in the order, in which the queries are given in the input.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "string suffix structures"
    ],
    "id": "232D"
  },
  {
    "title": "Cactus",
    "url": "https://codeforces.com/problemset/problem/231/E",
    "history": "A connected undirected graph is called a vertex cactus, if each vertex of this graph belongs to at most one simple cycle. A simple cycle in a undirected graph is a sequence of distinct vertices v1, v2, . . . , vt ( t > 2) , such that for any i ( 1 \u2264 i < t) exists an edge between vertices vi and vi + 1, and also exists an edge between vertices v1 and vt. A simple path in a undirected graph is a sequence of not necessarily distinct vertices v1, v2, . . . , vt ( t > 0) , such that for any i ( 1 \u2264 i < t) exists an edge between vertices vi and vi + 1 and furthermore each edge occurs no more than once. We' ll say that a simple path v1, v2, . . . , vt starts at vertex v1 and ends at vertex vt. You' ve got a graph consisting of n vertices and m edges, that is a vertex cactus. Also, you' ve got a list of k pairs of interesting vertices xi, yi, for which you want to know the following information \u2014 the number of distinct simple paths that start at vertex xi and end at vertex yi. We will consider two simple paths distinct if the sets of edges of the paths are distinct. For each pair of interesting vertices count the number of distinct simple paths between them. As this number can be rather large, you should calculate it modulo 1000000007 ( 109 + 7) .",
    "input": "The first line contains two space- separated integers n, m ( 2 \u2264 n \u2264 105; 1 \u2264 m \u2264 105) \u2014 the number of vertices and edges in the graph, correspondingly. Next m lines contain the description of the edges: the i- th line contains two space- separated integers ai, bi ( 1 \u2264 ai, bi \u2264 n) \u2014 the indexes of the vertices connected by the i- th edge. The next line contains a single integer k ( 1 \u2264 k \u2264 105) \u2014 the number of pairs of interesting vertices. Next k lines contain the list of pairs of interesting vertices: the i- th line contains two space- separated numbers xi, yi ( 1 \u2264 xi, yi \u2264 n; xi = \u0338 yi) \u2014 the indexes of interesting vertices in the i- th pair. It is guaranteed that the given graph is a vertex cactus. It is guaranteed that the graph contains no loops or multiple edges. Consider the graph vertices are numbered from 1 to n.",
    "output": "Print k lines: in the i- th line print a single integer \u2014 the number of distinct simple ways, starting at xi and ending at yi, modulo 1000000007 ( 109 + 7) .",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "dp",
      "graphs",
      "trees"
    ],
    "id": "231E"
  },
  {
    "title": "Planets",
    "url": "https://codeforces.com/problemset/problem/229/B",
    "history": "Goa' uld Apophis captured Jack O' Neill' s team again! Jack himself was able to escape, but by that time Apophis' s ship had already jumped to hyperspace. But Jack knows on what planet will Apophis land. In order to save his friends, Jack must repeatedly go through stargates to get to this planet. Overall the galaxy has n planets, indexed with numbers from 1 to n. Jack is on the planet with index 1, and Apophis will land on the planet with index n. Jack can move between some pairs of planets through stargates ( he can move in both directions) ; the transfer takes a positive, and, perhaps, for different pairs of planets unequal number of seconds. Jack begins his journey at time 0. It can be that other travellers are arriving to the planet where Jack is currently located. In this case, Jack has to wait for exactly 1 second before he can use the stargate. That is, if at time t another traveller arrives to the planet, Jack can only pass through the stargate at time t + 1, unless there are more travellers arriving at time t + 1 to the same planet. Knowing the information about travel times between the planets, and the times when Jack would not be able to use the stargate on particular planets, determine the minimum time in which he can get to the planet with index n.",
    "input": "The first line contains two space- separated integers: n ( 2 \u2264 n \u2264 105) , the number of planets in the galaxy, and m ( 0 \u2264 m \u2264 105) \u2014 the number of pairs of planets between which Jack can travel using stargates. Then m lines follow, containing three integers each: the i- th line contains numbers of planets ai and bi ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi) , which are connected through stargates, and the integer transfer time ( in seconds) ci ( 1 \u2264 ci \u2264 104) between these planets. It is guaranteed that between any pair of planets there is at most one stargate connection. Then n lines follow: the i- th line contains an integer ki ( 0 \u2264 ki \u2264 105) that denotes the number of moments of time when other travellers arrive to the planet with index i. Then ki distinct space- separated integers tij ( 0 \u2264 tij < 109) follow, sorted in ascending order. An integer tij means that at time tij ( in seconds) another traveller arrives to the planet i. It is guaranteed that the sum of all ki does not exceed 105.",
    "output": "Print a single number \u2014 the least amount of time Jack needs to get from planet 1 to planet n. If Jack can' t get to planet n in any amount of time, print number - 1.",
    "note": "In the first sample Jack has three ways to go from planet 1. If he moves to planet 4 at once, he spends 8 seconds. If he transfers to planet 3, he spends 3 seconds, but as other travellers arrive to planet 3 at time 3 and 4, he can travel to planet 4 only at time 5, thus spending 8 seconds in total. But if Jack moves to planet 2, and then \u2014 to planet 4, then he spends a total of only 2 + 5 = 7 seconds. In the second sample one can' t get from planet 1 to planet 3 by moving through stargates.",
    "topics": [
      "binary search",
      "data structures",
      "graphs",
      "shortest paths"
    ],
    "id": "229B"
  },
  {
    "title": "Zigzag",
    "url": "https://codeforces.com/problemset/problem/228/D",
    "history": "The court wizard Zigzag wants to become a famous mathematician. For that, he needs his own theorem, like the Cauchy theorem, or his sum, like the Minkowski sum. But most of all he wants to have his sequence, like the Fibonacci sequence, and his function, like the Euler' s totient function. The Zigag' s sequence with the zigzag factor z is an infinite sequence Siz ( i \u2265 1; z \u2265 2) , that is determined as follows: Siz = 2, when ; , when ; , when . Operation means taking the remainder from dividing number x by number y. For example, the beginning of sequence Si3 ( zigzag factor 3) looks as follows: 1, 2, 3, 2, 1, 2, 3, 2, 1. Let' s assume that we are given an array a, consisting of n integers. Let' s define element number i ( 1 \u2264 i \u2264 n) of the array as ai. The Zigzag function is function , where l, r, z satisfy the inequalities 1 \u2264 l \u2264 r \u2264 n, z \u2265 2. To become better acquainted with the Zigzag sequence and the Zigzag function, the wizard offers you to implement the following operations on the given array a. The assignment operation. The operation parameters are ( p, v) . The operation denotes assigning value v to the p- th array element. After the operation is applied, the value of the array element ap equals v. The Zigzag operation. The operation parameters are ( l, r, z) . The operation denotes calculating the Zigzag function Z( l, r, z) . Explore the magical powers of zigzags, implement the described operations.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 105) \u2014 The number of elements in array a. The second line contains n space- separated integers: a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) \u2014 the elements of the array. The third line contains integer m ( 1 \u2264 m \u2264 105) \u2014 the number of operations. Next m lines contain the operations' descriptions. An operation' s description starts with integer ti ( 1 \u2264 ti \u2264 2) \u2014 the operation type. If ti = 1 ( assignment operation) , then on the line follow two space- separated integers: pi, vi ( 1 \u2264 pi \u2264 n; 1 \u2264 vi \u2264 109) \u2014 the parameters of the assigning operation. If ti = 2 ( Zigzag operation) , then on the line follow three space- separated integers: li, ri, zi ( 1 \u2264 li \u2264 ri \u2264 n; 2 \u2264 zi \u2264 6) \u2014 the parameters of the Zigzag operation. You should execute the operations in the order, in which they are given in the input.",
    "output": "For each Zigzag operation print the calculated value of the Zigzag function on a single line. Print the values for Zigzag functions in the order, in which they are given in the input. Please, do not use the",
    "note": "Explanation of the sample test: Result of the first operation is Z( 2, 3, 2) = 3\u00b71 + 1\u00b72 = 5. Result of the second operation is Z( 1, 5, 3) = 2\u00b71 + 3\u00b72 + 1\u00b73 + 5\u00b72 + 5\u00b71 = 26. After the third operation array a is equal to 2, 3, 5, 5, 5. Result of the forth operation is Z( 1, 5, 3) = 2\u00b71 + 3\u00b72 + 5\u00b73 + 5\u00b72 + 5\u00b71 = 38.",
    "topics": [
      "data structures"
    ],
    "id": "228D"
  },
  {
    "title": "Noble Knight's Path",
    "url": "https://codeforces.com/problemset/problem/226/E",
    "history": "In Berland each feudal owns exactly one castle and each castle belongs to exactly one feudal. Each feudal, except one ( the King) is subordinate to another feudal. A feudal can have any number of vassals ( subordinates) . Some castles are connected by roads, it is allowed to move along the roads in both ways. Two castles have a road between them if and only if the owner of one of these castles is a direct subordinate to the other owner. Each year exactly one of these two events may happen in Berland. The barbarians attacked castle c. The interesting fact is, the barbarians never attacked the same castle twice throughout the whole Berlandian history. A noble knight sets off on a journey from castle a to castle b ( provided that on his path he encounters each castle not more than once) . Let' s consider the second event in detail. As the journey from a to b is not short, then the knight might want to stop at a castle he encounters on his way to have some rest. However, he can' t stop at just any castle: his nobility doesn' t let him stay in the castle that has been desecrated by the enemy' s stench. A castle is desecrated if and only if it has been attacked after the year of y. So, the knight chooses the k- th castle he encounters, starting from a ( castles a and b aren' t taken into consideration) , that hasn' t been attacked in years from y + 1 till current year. The knights don' t remember which castles were attacked on what years, so he asked the court scholar, aka you to help them. You' ve got a sequence of events in the Berland history. Tell each knight, in what city he should stop or else deliver the sad news \u2014 that the path from city a to city b has less than k cities that meet his requirements, so the knight won' t be able to rest.",
    "input": "The first input line contains integer n ( 2 \u2264 n \u2264 105) \u2014 the number of feudals. The next line contains n space- separated integers: the i- th integer shows either the number of the i- th feudal' s master, or a 0, if the i- th feudal is the King. The third line contains integer m ( 1 \u2264 m \u2264 105) \u2014 the number of queries. Then follow m lines that describe the events. The i- th line ( the lines are indexed starting from 1) contains the description of the event that occurred in year i. Each event is characterised by type ti ( 1 \u2264 ti \u2264 2) . The description of the first type event looks as two space- separated integers ti ci ( ti = 1; 1 \u2264 ci \u2264 n) , where ci is the number of the castle that was attacked by the barbarians in the i- th year. The description of the second type contains five space- separated integers: ti ai bi ki yi ( ti = 2; 1 \u2264 ai, bi, ki \u2264 n; ai = \u0338 bi; 0 \u2264 yi < i) , where ai is the number of the castle from which the knight is setting off, bi is the number of the castle to which the knight is going, ki and yi are the k and y from the second event' s description. You can consider the feudals indexed from 1 to n. It is guaranteed that there is only one king among the feudals. It is guaranteed that for the first type events all values ci are different.",
    "output": "For each second type event print an integer \u2014 the number of the castle where the knight must stay to rest, or - 1, if he will have to cover the distance from ai to bi without a rest. Separate the answers by whitespaces. Print the answers in the order, in which the second type events are given in the input.",
    "note": "In the first sample there is only castle 2 on the knight' s way from castle 1 to castle 3. When the knight covers the path 1 - 3 for the first time, castle 2 won' t be desecrated by an enemy and the knight will stay there. In the second year the castle 2 will become desecrated, so the knight won' t have anywhere to stay for the next two years ( as finding a castle that hasn' t been desecrated from years 1 and 2, correspondingly, is important for him) . In the fifth year the knight won' t consider the castle 2 desecrated, so he will stay there again.",
    "topics": [
      "data structures",
      "trees"
    ],
    "id": "226E"
  },
  {
    "title": "Anniversary",
    "url": "https://codeforces.com/problemset/problem/226/C",
    "history": "There are less than 60 years left till the 900- th birthday anniversary of a famous Italian mathematician Leonardo Fibonacci. Of course, such important anniversary needs much preparations. Dima is sure that it' ll be great to learn to solve the following problem by the Big Day: You' re given a set A, consisting of numbers l, l + 1, l + 2, . . . , r; let' s consider all its k- element subsets; for each such subset let' s find the largest common divisor of Fibonacci numbers with indexes, determined by the subset elements. Among all found common divisors, Dima is interested in the largest one. Dima asked to remind you that Fibonacci numbers are elements of a numeric sequence, where F1 = 1, F2 = 1, Fn = Fn - 1 + Fn - 2 for n \u2265 3. Dima has more than half a century ahead to solve the given task, but you only have two hours. Count the residue from dividing the sought largest common divisor by m.",
    "input": "The first line contains four space- separated integers m, l, r and k ( 1 \u2264 m \u2264 109; 1 \u2264 l < r \u2264 1012; 2 \u2264 k \u2264 r - l + 1) . Please, do not use the",
    "output": "Print a single integer \u2014 the residue from dividing the sought greatest common divisor by m.",
    "note": "",
    "topics": [
      "data structures",
      "implementation",
      "math",
      "matrices",
      "number theory"
    ],
    "id": "226C"
  },
  {
    "title": "Two Strings",
    "url": "https://codeforces.com/problemset/problem/223/B",
    "history": "A subsequence of length | x| of string s = s1s2. . . s| s| ( where | s| is the length of string s) is a string x = sk1sk2. . . sk| x| ( 1 \u2264 k1 < k2 < . . . < k| x| \u2264 | s| ) . You' ve got two strings \u2014 s and t. Let' s consider all subsequences of string s, coinciding with string t. Is it true that each character of string s occurs in at least one of these subsequences? In other words, is it true that for all i ( 1 \u2264 i \u2264 | s| ) , there is such subsequence x = sk1sk2. . . sk| x| of string s, that x = t and for some j ( 1 \u2264 j \u2264 | x| ) kj = i.",
    "input": "The first line contains string s, the second line contains string t. Each line consists only of lowercase English letters. The given strings are non- empty, the length of each string does not exceed 2\u00b7105.",
    "output": "Print \" Yes\" ( without the quotes) , if each character of the string s occurs in at least one of the described subsequences, or \" No\" ( without the quotes) otherwise.",
    "note": "In the first sample string t can occur in the string s as a subsequence in three ways: abab, abab and abab. In these occurrences each character of string s occurs at least once. In the second sample the 4- th character of the string s doesn' t occur in any occurrence of string t. In the third sample there is no occurrence of string t in string s.",
    "topics": [
      "data structures",
      "dp",
      "strings"
    ],
    "id": "223B"
  },
  {
    "title": "Bracket Sequence",
    "url": "https://codeforces.com/problemset/problem/223/A",
    "history": "A bracket sequence is a string, containing only characters \" ( \" , \" ) \" , \" [ \" and \" ] \" . A correct bracket sequence is a bracket sequence that can be transformed into a correct arithmetic expression by inserting characters \" 1\" and \" + \" between the original characters of the sequence. For example, bracket sequences \" ( ) [ ] \" , \" ( [ ] ) \" are correct ( the resulting expressions are: \" ( 1) + [ 1] \" , \" ( [ 1+ 1] + 1) \" ) , and \" ] ( \" and \" [ \" are not. The empty string is a correct bracket sequence by definition. A substring s[ l. . . r] ( 1 \u2264 l \u2264 r \u2264 | s| ) of string s = s1s2. . . s| s| ( where | s| is the length of string s) is the string slsl + 1. . . sr. The empty string is a substring of any string by definition. You are given a bracket sequence, not necessarily correct. Find its substring which is a correct bracket sequence and contains as many opening square brackets \u00ab[ \u00bb as possible.",
    "input": "The first and the only line contains the bracket sequence as a string, consisting only of characters \" ( \" , \" ) \" , \" [ \" and \" ] \" . It is guaranteed that the string is non- empty and its length doesn' t exceed 105 characters.",
    "output": "In the first line print a single integer \u2014 the number of brackets \u00ab[ \u00bb in the required bracket sequence. In the second line print the optimal sequence. If there are more than one optimal solutions print any of them.",
    "note": "",
    "topics": [
      "data structures",
      "expression parsing",
      "implementation"
    ],
    "id": "223A"
  },
  {
    "title": "Cosmic Tables",
    "url": "https://codeforces.com/problemset/problem/222/B",
    "history": "The Free Meteor Association ( FMA) has got a problem: as meteors are moving, the Universal Cosmic Descriptive Humorous Program ( UCDHP) needs to add a special module that would analyze this movement. UCDHP stores some secret information about meteors as an n \u00d7 m table with integers in its cells. The order of meteors in the Universe is changing. That' s why the main UCDHP module receives the following queries: The query to swap two table rows; The query to swap two table columns; The query to obtain a secret number in a particular table cell. As the main UCDHP module is critical, writing the functional of working with the table has been commissioned to you.",
    "input": "The first line contains three space- separated integers n, m and k ( 1 \u2264 n, m \u2264 1000, 1 \u2264 k \u2264 500000) \u2014 the number of table columns and rows and the number of queries, correspondingly. Next n lines contain m space- separated numbers each \u2014 the initial state of the table. Each number p in the table is an integer and satisfies the inequality 0 \u2264 p \u2264 106. Next k lines contain queries in the format \" si xi yi\" , where si is one of the characters \" \u0441\" , \" r\" or \" g\" , and xi, yi are two integers. If si = \" c\" , then the current query is the query to swap columns with indexes xi and yi ( 1 \u2264 x, y \u2264 m, x = \u0338 y) ; If si = \" r\" , then the current query is the query to swap rows with indexes xi and yi ( 1 \u2264 x, y \u2264 n, x = \u0338 y) ; If si = \" g\" , then the current query is the query to obtain the number that located in the xi- th row and in the yi- th column ( 1 \u2264 x \u2264 n, 1 \u2264 y \u2264 m) . The table rows are considered to be indexed from top to bottom from 1 to n, and the table columns \u2014 from left to right from 1 to m.",
    "output": "For each query to obtain a number ( si = \" g\" ) print the required number. Print the answers to the queries in the order of the queries in the input.",
    "note": "Let' s see how the table changes in the second test case. After the first operation is fulfilled, the table looks like that: 2 1 41 3 5After the second operation is fulfilled, the table looks like that: 1 3 52 1 4So the answer to the third query ( the number located in the first row and in the third column) will be 5.",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "222B"
  },
  {
    "title": "Little Elephant and Inversions",
    "url": "https://codeforces.com/problemset/problem/220/E",
    "history": "The Little Elephant has array a, consisting of n positive integers, indexed from 1 to n. Let' s denote the number with index i as ai. The Little Elephant wants to count, how many pairs of integers l and r are there, such that 1 \u2264 l < r \u2264 n and sequence b = a1a2. . . alarar + 1. . . an has no more than k inversions. An inversion in sequence b is a pair of elements of the sequence b, that change their relative order after a stable sorting of the sequence. In other words, an inversion is a pair of integers i and j, such that 1 \u2264 i < j \u2264 | b| and bi > bj, where | b| is the length of sequence b, and bj is its j- th element. Help the Little Elephant and count the number of the described pairs.",
    "input": "The first line contains two integers n and k ( 2 \u2264 n \u2264 105, 0 \u2264 k \u2264 1018) \u2014 the size of array a and the maximum allowed number of inversions respectively. The next line contains n positive integers, separated by single spaces, a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) \u2014 elements of array a. Please, do not use the",
    "output": "In a single line print a single number \u2014 the answer to the problem.",
    "note": "",
    "topics": [
      "data structures",
      "two pointers"
    ],
    "id": "220E"
  },
  {
    "title": "Little Elephant and Shifts",
    "url": "https://codeforces.com/problemset/problem/220/C",
    "history": "The Little Elephant has two permutations a and b of length n, consisting of numbers from 1 to n, inclusive. Let' s denote the i- th ( 1 \u2264 i \u2264 n) element of the permutation a as ai, the j- th ( 1 \u2264 j \u2264 n) element of the permutation b \u2014 as bj. The distance between permutations a and b is the minimum absolute value of the difference between the positions of the occurrences of some number in a and in b. More formally, it' s such minimum | i - j| , that ai = bj. A cyclic shift number i ( 1 \u2264 i \u2264 n) of permutation b consisting from n elements is a permutation bibi + 1. . . bnb1b2. . . bi - 1. Overall a permutation has n cyclic shifts. The Little Elephant wonders, for all cyclic shifts of permutation b, what is the distance between the cyclic shift and permutation a?",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 105) \u2014 the size of the permutations. The second line contains permutation a as n distinct numbers from 1 to n, inclusive. The numbers are separated with single spaces. The third line contains permutation b in the same format.",
    "output": "In n lines print n integers \u2014 the answers for cyclic shifts. Print the answers to the shifts in the order of the shifts' numeration in permutation b, that is, first for the 1- st cyclic shift, then for the 2- nd, and so on.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": "220C"
  },
  {
    "title": "Little Elephant and Array",
    "url": "https://codeforces.com/problemset/problem/220/B",
    "history": "The Little Elephant loves playing with arrays. He has array a, consisting of n positive integers, indexed from 1 to n. Let' s denote the number with index i as ai. Additionally the Little Elephant has m queries to the array, each query is characterised by a pair of integers lj and rj ( 1 \u2264 lj \u2264 rj \u2264 n) . For each query lj, rj the Little Elephant has to count, how many numbers x exist, such that number x occurs exactly x times among numbers alj, alj + 1, . . . , arj. Help the Little Elephant to count the answers to all queries.",
    "input": "The first line contains two space- separated integers n and m ( 1 \u2264 n, m \u2264 105) \u2014 the size of array a and the number of queries to it. The next line contains n space- separated positive integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) . Next m lines contain descriptions of queries, one per line. The j- th of these lines contains the description of the j- th query as two space- separated integers lj and rj ( 1 \u2264 lj \u2264 rj \u2264 n) .",
    "output": "In m lines print m integers \u2014 the answers to the queries. The j- th line should contain the answer to the j- th query.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "data structures"
    ],
    "id": "220B"
  },
  {
    "title": "Parking Lot",
    "url": "https://codeforces.com/problemset/problem/219/E",
    "history": "A parking lot in the City consists of n parking spaces, standing in a line. The parking spaces are numbered from 1 to n from left to right. When a car arrives at the lot, the operator determines an empty parking space for it. For the safety' s sake the chosen place should be located as far from the already occupied places as possible. That is, the closest occupied parking space must be as far away as possible. If there are several such places, then the operator chooses the place with the minimum index from them. If all parking lot places are empty, then the car gets place number 1. We consider the distance between the i- th and the j- th parking spaces equal to 4\u00b7| i - j| meters. You are given the parking lot records of arriving and departing cars in the chronological order. For each record of an arriving car print the number of the parking lot that was given to this car.",
    "input": "The first line contains two space- separated integers n and m ( 1 \u2264 n, m \u2264 2\u00b7105) \u2014 the number of parking places and the number of records correspondingly. Next m lines contain the descriptions of the records, one per line. The i- th line contains numbers ti, idi ( 1 \u2264 ti \u2264 2; 1 \u2264 idi \u2264 106) . If ti equals 1, then the corresponding record says that the car number idi arrived at the parking lot. If ti equals 2, then the corresponding record says that the car number idi departed from the parking lot. Records about arriving to the parking lot and departing from the parking lot are given chronologically. All events occurred consecutively, no two events occurred simultaneously. It is guaranteed that all entries are correct: each car arrived at the parking lot at most once and departed from the parking lot at most once, there is no record of a departing car if it didn' t arrive at the parking lot earlier, there are no more than n cars on the parking lot at any moment. You can consider the cars arbitrarily numbered from 1 to 106, all numbers are distinct. Initially all places in the parking lot are empty.",
    "output": "For each entry of an arriving car print the number of its parking space. Print the numbers of the spaces in the order, in which the cars arrive to the parking lot.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": "219E"
  },
  {
    "title": "Alien DNA",
    "url": "https://codeforces.com/problemset/problem/217/E",
    "history": "Professor Bajtocy is conducting experiments on alien DNA. He has discovered that it is subject to repetitive mutations \u2014 each mutation happens in the same way: some continuous subsequence of the alien DNA becomes active, copies itself, the copy gets mangled and inserts itself right after the original subsequence. The mangled copy of the activated continuous subsequence is formed by first joining all the elements at the even positions in that subsequence, and then joining all the elements at the odd ones at the end. That is, if the activated subsequence consists of 11 elements and represented as s1s2. . . s11, its mangled copy is s2s4s6s8s10s1s3s5s7s9s11. For example, if the original sequence was \" ACTGG\" and the mutation happened on the segment [ 2, 4] ( that is the activated subsequence is \" CTG\" ) , the mutated DNA is: \" ACTGTCGG\" . The mangled copy of the activated subsequence is marked with bold font. Professor Bajtocy has written down the original DNA sequence and the mutations that sequentially happened to it, and he now asks you to recover the first k elements of the DNA sequence after all the mutations.",
    "input": "The first line of input contains the original DNA sequence, consisting only of letters \" A\" , \" C\" , \" T\" and \" G\" and not exceeding 3\u00b7106 in length. The second line contains a single integer k ( 1 \u2264 k \u2264 3\u00b7106) . The third line contains a single integer n ( 0 \u2264 n \u2264 5000) \u2014 the number of mutations. The next n lines describe the mutations in chronological order \u2014 each mutation is described by two numbers li and ri ( 1 \u2264 li \u2264 ri \u2264 109) , meaning that the continuous subsequence [ li, ri] has become active and cloned itself, joining itself with the mangled copy. It is guaranteed that the input data is correct, that is, no mutation acts on non- existing elements of the DNA sequence, and the resulting DNA sequence has at least k elements. Assume that the DNA elements are indexed starting from 1 and that the notation [ l, r] meaning the continuous subsequence of DNA sequence that consists of r - l + 1 elements starting at the l- th DNA sequence element and ending at the r- th DNA sequence element.",
    "output": "Output a single line, containing the first k letters of the mutated DNA sequence.",
    "note": "In the second example, after the first mutation the sequence is \" ACCAGTACGT\" . After the second mutation it' s \" ACCAGTACCGACATCGT\" .",
    "topics": [
      "data structures",
      "dsu",
      "trees"
    ],
    "id": "217E"
  },
  {
    "title": "Two Permutations",
    "url": "https://codeforces.com/problemset/problem/213/E",
    "history": "Rubik is very keen on number permutations. A permutation a with length n is a sequence, consisting of n different numbers from 1 to n. Element number i ( 1 \u2264 i \u2264 n) of this permutation will be denoted as ai. Furik decided to make a present to Rubik and came up with a new problem on permutations. Furik tells Rubik two number permutations: permutation a with length n and permutation b with length m. Rubik must give an answer to the problem: how many distinct integers d exist, such that sequence c ( c1 = a1 + d, c2 = a2 + d, . . . , cn = an + d) of length n is a subsequence of b. Sequence a is a subsequence of sequence b, if there are such indices i1, i2, . . . , in ( 1 \u2264 i1 < i2 < . . . < in \u2264 m) , that a1 = bi1, a2 = bi2, . . . , an = bin, where n is the length of sequence a, and m is the length of sequence b. You are given permutations a and b, help Rubik solve the given problem.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 m \u2264 200000) \u2014 the sizes of the given permutations. The second line contains n distinct integers \u2014 permutation a, the third line contains m distinct integers \u2014 permutation b. Numbers on the lines are separated by spaces.",
    "output": "On a single line print the answer to the problem.",
    "note": "",
    "topics": [
      "data structures",
      "hashing",
      "strings"
    ],
    "id": "213E"
  },
  {
    "title": "Cutting a Fence",
    "url": "https://codeforces.com/problemset/problem/212/D",
    "history": "Vasya the carpenter has an estate that is separated from the wood by a fence. The fence consists of n planks put in a line. The fence is not closed in a circle. The planks are numbered from left to right from 1 to n, the i- th plank is of height ai. All planks have the same width, the lower edge of each plank is located at the ground level. Recently a local newspaper \" Malevich and Life\" wrote that the most fashionable way to decorate a fence in the summer is to draw a fuchsia- colored rectangle on it, the lower side of the rectangle must be located at the lower edge of the fence. Vasya is delighted with this idea! He immediately bought some fuchsia- colored paint and began to decide what kind of the rectangle he should paint. Vasya is sure that the rectangle should cover k consecutive planks. In other words, he will paint planks number x, x + 1, . . . , x + k - 1 for some x ( 1 \u2264 x \u2264 n - k + 1) . He wants to paint the rectangle of maximal area, so the rectangle height equals min ai for x \u2264 i \u2264 x + k - 1, x is the number of the first colored plank. Vasya has already made up his mind that the rectangle width can be equal to one of numbers of the sequence k1, k2, . . . , km. For each ki he wants to know the expected height of the painted rectangle, provided that he selects x for such fence uniformly among all n - ki + 1 possible values. Help him to find the expected heights.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 106) \u2014 the number of planks in the fence. The second line contains a sequence of integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) where ai is the height of the i- th plank of the fence. The third line contains an integer m ( 1 \u2264 m \u2264 106) and the next line contains m space- separated integers k1, k2, . . . , km ( 1 \u2264 ki \u2264 n) where ki is the width of the desired fuchsia- colored rectangle in planks.",
    "output": "Print m whitespace- separated real numbers, the i- th number equals the expected value of the rectangle height, if its width in planks equals ki. The value will be considered correct if its absolute or relative error doesn' t exceed 10 - 9.",
    "note": "Let' s consider the first sample test. There are three possible positions of the fence for k1 = 1. For the first position ( x = 1) the height is 3, for the second one ( x = 2) the height is 2, for the third one ( x = 3) the height is 1. As the fence position is chosen uniformly, the expected height of the fence equals ; There are two possible positions of the fence for k2 = 2. For the first position ( x = 1) the height is 2, for the second one ( x = 2) the height is 1. The expected height of the fence equals ; There is the only possible position of the fence for k3 = 3. The expected height of the fence equals 1.",
    "topics": [
      "binary search",
      "data structures",
      "dsu"
    ],
    "id": "212D"
  },
  {
    "title": "Blood Cousins",
    "url": "https://codeforces.com/problemset/problem/208/E",
    "history": "Polycarpus got hold of a family relationship tree. The tree describes family relationships of n people, numbered 1 through n. Each person in the tree has no more than one parent. Let' s call person a a 1- ancestor of person b, if a is the parent of b. Let' s call person a a k- ancestor ( k > 1) of person b, if person b has a 1- ancestor, and a is a ( k - 1) - ancestor of b' s 1- ancestor. Family relationships don' t form cycles in the found tree. In other words, there is no person who is his own ancestor, directly or indirectly ( that is, who is an x- ancestor for himself, for some x, x > 0) . Let' s call two people x and y ( x = \u0338 y) p- th cousins ( p > 0) , if there is person z, who is a p- ancestor of x and a p- ancestor of y. Polycarpus wonders how many counsins and what kinds of them everybody has. He took a piece of paper and wrote m pairs of integers vi, pi. Help him to calculate the number of pi- th cousins that person vi has, for each pair vi, pi.",
    "input": "The first input line contains a single integer n ( 1 \u2264 n \u2264 105) \u2014 the number of people in the tree. The next line contains n space- separated integers r1, r2, . . . , rn, where ri ( 1 \u2264 ri \u2264 n) is the number of person i' s parent or 0, if person i has no parent. It is guaranteed that family relationships don' t form cycles. The third line contains a single number m ( 1 \u2264 m \u2264 105) \u2014 the number of family relationship queries Polycarus has. Next m lines contain pairs of space- separated integers. The i- th line contains numbers vi, pi ( 1 \u2264 vi, pi \u2264 n) .",
    "output": "Print m space- separated integers \u2014 the answers to Polycarpus' queries. Print the answers to the queries in the order, in which the queries occur in the input.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "dfs and similar",
      "trees"
    ],
    "id": "208E"
  },
  {
    "title": "Game with Two Trees",
    "url": "https://codeforces.com/problemset/problem/207/C3",
    "history": "The Smart Beaver from ABBYY has come up with a new developing game for children. The Beaver thinks that this game will help children to understand programming better. The main object of the game is finite rooted trees, each of their edges contains some lowercase English letter. Vertices on any tree are always numbered sequentially from 1 to m, where m is the number of vertices in the tree. Before describing the actual game, let' s introduce some definitions. We' ll assume that the sequence of vertices with numbers v1, v2, . . . , vk ( k \u2265 1) is a forward path, if for any integer i from 1 to k - 1 vertex vi is a direct ancestor of vertex vi + 1. If we sequentially write out all letters from the the edges of the given path from v1 to vk, we get some string ( k = 1 gives us an empty string) . We' ll say that such string corresponds to forward path v1, v2, . . . , vk. We' ll assume that the sequence of tree vertices with numbers v1, v2, . . . , vk ( k \u2265 1) is a backward path if for any integer i from 1 to k - 1 vertex vi is the direct descendant of vertex vi + 1. If we sequentially write out all the letters from the edges of the given path from v1 to vk, we get some string ( k = 1 gives us an empty string) . We' ll say that such string corresponds to backward path v1, v2, . . . , vk. Now let' s describe the game that the Smart Beaver from ABBYY has come up with. The game uses two rooted trees, each of which initially consists of one vertex with number 1. The player is given some sequence of operations. Each operation is characterized by three values ( t, v, c) where: t is the number of the tree on which the operation is executed ( 1 or 2) ; v is the vertex index in this tree ( it is guaranteed that the tree contains a vertex with this index) ; c is a lowercase English letter. The actual operation is as follows: vertex v of tree t gets a new descendant with number m + 1 ( where m is the current number of vertices in tree t) , and there should be letter c put on the new edge from vertex v to vertex m + 1. We' ll say that an ordered group of three integers ( i, j, q) is a good combination if: 1 \u2264 i \u2264 m1, where m1 is the number of vertices in the first tree; 1 \u2264 j, q \u2264 m2, where m2 is the number of vertices in the second tree; there exists a forward path v1, v2, . . . , vk such that v1 = j and vk = q in the second tree; the string that corresponds to the forward path in the second tree from vertex j to vertex q equals the string that corresponds to the backward path in the first tree from vertex i to vertex 1 ( note that both paths are determined uniquely) . Your task is to calculate the number of existing good combinations after each operation on the trees.",
    "input": "The first line contains integer n \u2014 the number of operations on the trees. Next n lines specify the operations in the order of their execution. Each line has form \" t v c\" , where t is the number of the tree, v is the vertex index in this tree, and c is a lowercase English letter. To get the full points for the first group of tests it is sufficient to solve the problem with 1 \u2264 n \u2264 700. To get the full points for the second group of tests it is sufficient to solve the problem with 1 \u2264 n \u2264 7000. To get the full points for the third group of tests it is sufficient to solve the problem with 1 \u2264 n \u2264 100000.",
    "output": "Print exactly n lines, each containing one integer \u2014 the number of existing good combinations after the corresponding operation from the input. Please, do not use the",
    "note": "After the first operation the only good combination was ( 1, 1, 1) . After the second operation new good combinations appeared, ( 2, 1, 2) and ( 1, 2, 2) . The third operation didn' t bring any good combinations. The fourth operation added good combination ( 1, 3, 3) . Finally, the fifth operation resulted in as much as three new good combinations \u2014 ( 1, 4, 4) , ( 2, 3, 4) and ( 3, 1, 4) .",
    "topics": [
      "data structures"
    ],
    "id": "207C3"
  },
  {
    "title": "Little Elephant and Strings",
    "url": "https://codeforces.com/problemset/problem/204/E",
    "history": "The Little Elephant loves strings very much. He has an array a from n strings, consisting of lowercase English letters. Let' s number the elements of the array from 1 to n, then let' s denote the element number i as ai. For each string ai ( 1 \u2264 i \u2264 n) the Little Elephant wants to find the number of pairs of integers l and r ( 1 \u2264 l \u2264 r \u2264 | ai| ) such that substring ai[ l. . . r] is a substring to at least k strings from array a ( including the i- th string) . Help the Little Elephant solve this problem. If you are not familiar with the basic notation in string problems, you can find the corresponding definitions in the notes.",
    "input": "The first line contains two space- separated integers \u2014 n and k ( 1 \u2264 n, k \u2264 105) . Next n lines contain array a. The i- th line contains a non- empty string ai, consisting of lowercase English letter. The total length of all strings ai does not exceed 105.",
    "output": "On a single line print n space- separated integers \u2014 the i- th number is the answer for string ai. Please, do not use the",
    "note": "Let' s assume that you are given string a = a1a2. . . a| a| , then let' s denote the string' s length as | a| and the string' s i- th character as ai. A substring a[ l. . . r] ( 1 \u2264 l \u2264 r \u2264 | a| ) of string a is string alal + 1. . . ar. String a is a substring of string b, if there exists such pair of integers l and r ( 1 \u2264 l \u2264 r \u2264 | b| ) , that b[ l. . . r] = a.",
    "topics": [
      "data structures",
      "implementation",
      "string suffix structures",
      "two pointers"
    ],
    "id": "204E"
  },
  {
    "title": "Little Elephant and Cards",
    "url": "https://codeforces.com/problemset/problem/204/B",
    "history": "The Little Elephant loves to play with color cards. He has n cards, each has exactly two colors ( the color of the front side and the color of the back side) . Initially, all the cards lay on the table with the front side up. In one move the Little Elephant can turn any card to the other side. The Little Elephant thinks that a set of cards on the table is funny if at least half of the cards have the same color ( for each card the color of the upper side is considered) . Help the Little Elephant to find the minimum number of moves needed to make the set of n cards funny.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 105) \u2014 the number of the cards. The following n lines contain the description of all cards, one card per line. The cards are described by a pair of positive integers not exceeding 109 \u2014 colors of both sides. The first number in a line is the color of the front of the card, the second one \u2014 of the back. The color of the front of the card may coincide with the color of the back of the card. The numbers in the lines are separated by single spaces.",
    "output": "On a single line print a single integer \u2014 the sought minimum number of moves. If it is impossible to make the set funny, print - 1.",
    "note": "In the first sample there initially are three cards lying with colors 4, 4, 7. Since two of the three cards are of the same color 4, you do not need to change anything, so the answer is 0. In the second sample, you can turn the first and the fourth cards. After that three of the five cards will be of color 7.",
    "topics": [
      "binary search",
      "data structures"
    ],
    "id": "204B"
  },
  {
    "title": "Cinema",
    "url": "https://codeforces.com/problemset/problem/200/A",
    "history": "The capital of Berland has the only movie theater in the country. Besides, it consists of only one room. The room is divided into n rows, each row consists of m seats. There are k people lined up to the box office, each person wants to buy exactly one ticket for his own entertainment. Before the box office started selling tickets, each person found the seat that seemed best for him and remembered it as a pair of coordinates ( xi, yi) , where xi is the row number, and yi is the seat number in this row. It is possible that some people have chosen the same place, then when some people see their favorite seat taken in the plan of empty seats in the theater, they choose and buy a ticket to another place. Each of them has the following logic: let' s assume that he originally wanted to buy a ticket to seat ( x1, y1) , then when he comes to the box office, he chooses such empty seat ( x2, y2) , which satisfies the following conditions: the value of | x1 - x2| + | y1 - y2| is minimum if the choice is not unique, then among the seats that satisfy the first condition, this person selects the one for which the value of x2 is minimum if the choice is still not unique, among the seats that satisfy the first and second conditions, this person selects the one for which the value of y2 is minimum Your task is to find the coordinates of a seat for each person.",
    "input": "The first input line contains three integers n, m, k ( 1 \u2264 n, m \u2264 2000, 1 \u2264 k \u2264 min( n\u00b7m, 105) \u2014 the number of rows in the room, the number of seats in each row and the number of people in the line, correspondingly. Each of the next k lines contains two integers xi, yi ( 1 \u2264 xi \u2264 n, 1 \u2264 yi \u2264 m) \u2014 the coordinates of the seat each person has chosen. Numbers on the same line are separated by a space. The pairs of coordinates are located in the order, in which people stand in the line, starting from the head ( the first person in the line who stands in front of the box office) to the tail ( the last person in the line) .",
    "output": "Print k lines, each containing a pair of integers. Print on the i- th line xi, yi \u2014 the coordinates of the seat, for which the person who stands i- th in the line will buy the ticket.",
    "note": "",
    "topics": [
      "brute force",
      "data structures"
    ],
    "id": "200A"
  },
  {
    "title": "Gripping Story",
    "url": "https://codeforces.com/problemset/problem/198/E",
    "history": "One day Qwerty the Ranger witnessed two transport ships collide with each other. As a result, all contents of their cargo holds scattered around the space. And now Qwerty wants to pick as many lost items as possible to sell them later. The thing is, both ships had lots of new gravitational grippers, transported to sale. A gripper is a device that can be installed on a spaceship and than draw items in space to itself ( \" grip\" ) and transport them to the ship' s cargo hold. Overall the crashed ships lost n gravitational grippers: the i- th gripper is located at a point with coordinates ( xi, yi) . Each gripper has two features \u2014 pi ( the power) and ri ( the action radius) and can grip any items with mass of no more than pi at distance no more than ri. A gripper itself is an item, too and it has its mass of mi. Qwerty' s ship is located at point ( x, y) and has an old magnetic gripper installed, its characteristics are p and r. There are no other grippers in the ship' s cargo holds. Find the largest number of grippers Qwerty can get hold of. As he picks the items, he can arbitrarily install any gripper in the cargo hold of the ship, including the gripper he has just picked. At any moment of time the ship can have only one active gripper installed. We consider all items and the Qwerty' s ship immobile when the ranger picks the items, except for when the gripper moves an item \u2014 then the item moves to the cargo holds and the ship still remains immobile. We can assume that the ship' s cargo holds have enough room for all grippers. Qwerty can use any gripper he finds or the initial gripper an arbitrary number of times.",
    "input": "The first line contains five integers x, y, p, r and n ( - 109 \u2264 x, y \u2264 109, 1 \u2264 p, r \u2264 109, 1 \u2264 n \u2264 250000) \u2014 the ship' s initial position, the initial gripper' s features and the number of grippers that got into the space during the collision. Next n lines contain the grippers' descriptions: the i- th line contains five integers xi, yi, mi, pi, ri ( - 109 \u2264 xi, yi \u2264 109, 1 \u2264 mi, pi, ri \u2264 109) \u2014 the i- th gripper' s coordinates and features. It is guaranteed that all grippers are located at different points. No gripper is located at the same point with Qwerty' s ship.",
    "output": "Print a single number \u2014 the maximum number of grippers Qwerty can draw to his ship. You do not need to count the initial old magnet gripper.",
    "note": "In the first sample you should get the second gripper, then use the second gripper to get the first one, then use the first gripper to get the fourth one. You cannot get neither the third gripper as it is too heavy, nor the fifth one as it is too far away.",
    "topics": [
      "binary search",
      "data structures",
      "sortings"
    ],
    "id": "198E"
  },
  {
    "title": "The Next Good String",
    "url": "https://codeforces.com/problemset/problem/196/D",
    "history": "In problems on strings one often has to find a string with some particular properties. The problem authors were reluctant to waste time on thinking of a name for some string so they called it good. A string is good if it doesn' t have palindrome substrings longer than or equal to d. You are given string s, consisting only of lowercase English letters. Find a good string t with length | s| , consisting of lowercase English letters, which is lexicographically larger than s. Of all such strings string t must be lexicographically minimum. We will call a non- empty string s[ a . . . b] = sasa + 1. . . sb ( 1 \u2264 a \u2264 b \u2264 | s| ) a substring of string s = s1s2. . . s| s| . A non- empty string s = s1s2. . . sn is called a palindrome if for all i from 1 to n the following fulfills: si = sn - i + 1. In other words, palindrome read the same in both directions. String x = x1x2. . . x| x| is lexicographically larger than string y = y1y2. . . y| y| , if either | x| > | y| and x1 = y1, x2 = y2, . . . , x| y| = y| y| , or there exists such number r ( r < | x| , r < | y| ) , that x1 = y1, x2 = y2, . . . , xr = yr and xr + 1 > yr + 1. Characters in such strings are compared like their ASCII codes.",
    "input": "The first line contains integer d ( 1 \u2264 d \u2264 | s| ) . The second line contains a non- empty string s, its length is no more than 4\u00b7105 characters. The string consists of lowercase English letters.",
    "output": "Print the good string that lexicographically follows s, has the same length and consists of only lowercase English letters. If such string does not exist, print \" Impossible\" ( without the quotes) .",
    "note": "",
    "topics": [
      "data structures",
      "greedy",
      "hashing",
      "strings"
    ],
    "id": "196D"
  },
  {
    "title": "Building Forest",
    "url": "https://codeforces.com/problemset/problem/195/E",
    "history": "An oriented weighted forest is an acyclic weighted digraph in which from each vertex at most one edge goes. The root of vertex v of an oriented weighted forest is a vertex from which no edge goes and which can be reached from vertex v moving along the edges of the weighted oriented forest. We denote the root of vertex v as root( v) . The depth of vertex v is the sum of weights of paths passing from the vertex v to its root. Let' s denote the depth of the vertex v as depth( v) . Let' s consider the process of constructing a weighted directed forest. Initially, the forest does not contain vertices. Vertices are added sequentially one by one. Overall, there are n performed operations of adding. The i- th ( i > 0) adding operation is described by a set of numbers ( k, v1, x1, v2, x2, . . . , vk, xk) and means that we should add vertex number i and k edges to the graph: an edge from vertex root( v1) to vertex i with weight depth( v1) + x1, an edge from vertex root( v2) to vertex i with weight depth( v2) + x2 and so on. If k = 0, then only vertex i is added to the graph, there are no added edges. Your task is like this: given the operations of adding vertices, calculate the sum of the weights of all edges of the forest, resulting after the application of all defined operations, modulo 1000000007 ( 109 + 7) .",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 105) \u2014 the number of operations of adding a vertex. Next n lines contain descriptions of the operations, the i- th line contains the description of the operation of adding the i- th vertex in the following format: the first number of a line is an integer k ( 0 \u2264 k \u2264 i - 1) , then follow 2k space- separated integers: v1, x1, v2, x2, . . . , vk, xk ( 1 \u2264 vj \u2264 i - 1, | xj| \u2264 109) . The operations are given in the order, in which they should be applied to the graph. It is guaranteed that sum k of all operations does not exceed 105, also that applying operations of adding vertexes does not result in loops and multiple edges.",
    "output": "Print a single number \u2014 the sum of weights of all edges of the resulting graph modulo 1000000007 ( 109 + 7) .",
    "note": "Conside the first sample: Vertex 1 is added. k = 0, thus no edges are added. Vertex 2 is added. k = 0, thus no edges are added. Vertex 3 is added. k = 1. v1 = 2, x1 = 1. Edge from vertex root( 2) = 2 to vertex 3 with weight depth( 2) + x1 = 0 + 1 = 1 is added. Vertex 4 is added. k = 2. v1 = 1, x1 = 5. Edge from vertex root( 1) = 1 to vertex 4 with weight depth( 1) + x1 = 0 + 5 = 5 is added. v2 = 2, x2 = 2. Edge from vertex root( 2) = 3 to vertex 4 with weight depth( 2) + x1 = 1 + 2 = 3 is added. Vertex 5 is added. k = 1. v1 = 1, x1 = 2. Edge from vertex root( 1) = 4 to vertex 5 with weight depth( 1) + x1 = 5 + 2 = 7 is added. Vertex 6 is added. k = 1. v1 = 3, x1 = 4. Edge from vertex root( 3) = 5 to vertex 6 with weight depth( 3) + x1 = 10 + 4 = 14 is added. The resulting graph is shown on the pictore below:",
    "topics": [
      "data structures",
      "dsu",
      "graphs"
    ],
    "id": "195E"
  },
  {
    "title": "After Training",
    "url": "https://codeforces.com/problemset/problem/195/B",
    "history": "After a team finished their training session on Euro football championship, Valeric was commissioned to gather the balls and sort them into baskets. Overall the stadium has n balls and m baskets. The baskets are positioned in a row from left to right and they are numbered with numbers from 1 to m, correspondingly. The balls are numbered with numbers from 1 to n. Valeric decided to sort the balls in the order of increasing of their numbers by the following scheme. He will put each new ball in the basket with the least number of balls. And if he' s got several variants, he chooses the basket which stands closer to the middle. That means that he chooses the basket for which is minimum, where i is the number of the basket. If in this case Valeric still has multiple variants, he chooses the basket with the minimum number. For every ball print the number of the basket where it will go according to Valeric' s scheme. Note that the balls are sorted into baskets in the order of increasing numbers, that is, the first ball goes first, then goes the second ball and so on.",
    "input": "The first line contains two space- separated integers n, m ( 1 \u2264 n, m \u2264 105) \u2014 the number of balls and baskets, correspondingly.",
    "output": "Print n numbers, one per line. The i- th line must contain the number of the basket for the i- th ball.",
    "note": "",
    "topics": [
      "data structures",
      "implementation",
      "math"
    ],
    "id": "195B"
  },
  {
    "title": "Two Segments",
    "url": "https://codeforces.com/problemset/problem/193/D",
    "history": "Nick has some permutation consisting of p integers from 1 to n. A segment [ l, r] ( l \u2264 r) is a set of elements pi satisfying l \u2264 i \u2264 r. Nick calls a pair of segments [ a0, a1] and [ b0, b1] ( 1 \u2264 a0 \u2264 a1 < b0 \u2264 b1 \u2264 n) good if all their ( a1 - a0 + b1 - b0 + 2) elements, when sorted in ascending order, form an arithmetic progression with a difference of 1. That is, when they sorted in ascending order, the elements are in the form x, x + 1, x + 2, . . . , x + m - 1, for some x and m. Your task is to find the number of distinct pairs of good segments in the given permutation. Two pairs of segments are considered distinct if the sets of elements contained in these pairs of segments are distinct. For example, any segment [ l, r] ( l < r) can be represented as a pair of segments, as [ l, i] and [ i + 1, r] ( l \u2264 i \u2264 r) . As all these pairs consist of the same set of elements, they are considered identical. See the notes accompanying the sample tests for clarification.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 3\u00b7105) \u2014 the permutation size. The second line contains n space- separated distinct integers pi, ( 1 \u2264 pi \u2264 n) .",
    "output": "Print a single integer \u2014 the number of good pairs of segments of permutation p. Please, do not use the",
    "note": "In the first sample the following pairs of segments are good: ( [ 1, 1] , [ 2, 2] ) ; ( [ 2, 2] , [ 3, 3] ) ; ( [ 1, 2] , [ 3, 3] ) . Pair of segments ( [ 1, 1] , [ 2, 3] ) is by definition equivalent to pair ( [ 1, 2] , [ 3, 3] ) , since both of them covers the same set of elements, namely 1, 2, 3. In the third sample the following pairs of segments are good: ( [ 4, 4] , [ 5, 5] ) ; ( [ 3, 3] , [ 4, 5] ) ; ( [ 2, 2] , [ 3, 5] ) ; ( [ 1, 1] , [ 2, 5] ) ; ( [ 3, 3] , [ 5, 5] ) ; ( [ 2, 3] , [ 5, 5] ) ; ( [ 1, 3] , [ 5, 5] ) ; ( [ 2, 2] , [ 3, 3] ) ; ( [ 1, 1] , [ 2, 3] ) ; ( [ 1, 1] , [ 2, 2] ) .",
    "topics": [
      "data structures"
    ],
    "id": "193D"
  },
  {
    "title": "Thwarting Demonstrations",
    "url": "https://codeforces.com/problemset/problem/191/E",
    "history": "It is dark times in Berland. Berlyand opposition, funded from a neighboring state, has organized a demonstration in Berland capital Bertown. Through the work of intelligence we know that the demonstrations are planned to last for k days. Fortunately, Berland has a special police unit, which can save the country. It has exactly n soldiers numbered from 1 to n. Berland general, the commander of the detachment, must schedule the detachment' s work in these difficult k days. In each of these days, the general must send a certain number of police officers to disperse riots. Since the detachment is large and the general is not very smart, he can only select a set of all soldiers numbered from l to r, inclusive, where l and r are selected arbitrarily. Now the general has exactly two problems. First, he cannot send the same group twice \u2014 then soldiers get bored and they rebel. Second, not all soldiers are equally reliable. Every soldier has a reliability of ai. The reliability of the detachment is counted as the sum of reliabilities of soldiers in it. The reliability of a single soldier can be negative, then when you include him in the detachment, he will only spoil things. The general is distinguished by his great greed and shortsightedness, so each day he sends to the dissolution the most reliable group of soldiers possible ( that is, of all the groups that have not been sent yet) . The Berland Government has decided to know what would be the minimum reliability of the detachment, sent to disperse the demonstrations during these k days. The general himself can not cope with such a difficult task. Help him to not embarrass himself in front of his superiors!",
    "input": "The first line contains two integers n and k \u2014 the number of soldiers in the detachment and the number of times somebody goes on duty. The second line contains n space- separated integers ai, their absolute value doesn' t exceed 109 \u2014 the soldiers' reliabilities. Please do not use the",
    "output": "Print a single number \u2014 the sought minimum reliability of the groups that go on duty during these k days.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "trees"
    ],
    "id": "191E"
  },
  {
    "title": "Fools and Roads",
    "url": "https://codeforces.com/problemset/problem/191/C",
    "history": "They say that Berland has exactly two problems, fools and roads. Besides, Berland has n cities, populated by the fools and connected by the roads. All Berland roads are bidirectional. As there are many fools in Berland, between each pair of cities there is a path ( or else the fools would get upset) . Also, between each pair of cities there is no more than one simple path ( or else the fools would get lost) . But that is not the end of Berland' s special features. In this country fools sometimes visit each other and thus spoil the roads. The fools aren' t very smart, so they always use only the simple paths. A simple path is the path which goes through every Berland city not more than once. The Berland government knows the paths which the fools use. Help the government count for each road, how many distinct fools can go on it. Note how the fools' paths are given in the input.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 105) \u2014 the number of cities. Each of the next n - 1 lines contains two space- separated integers ui, vi ( 1 \u2264 ui, vi \u2264 n, ui = \u0338 vi) , that means that there is a road connecting cities ui and vi. The next line contains integer k ( 0 \u2264 k \u2264 105) \u2014 the number of pairs of fools who visit each other. Next k lines contain two space- separated numbers. The i- th line ( i > 0) contains numbers ai, bi ( 1 \u2264 ai, bi \u2264 n) . That means that the fool number 2i - 1 lives in city ai and visits the fool number 2i, who lives in city bi. The given pairs describe simple paths, because between every pair of cities there is only one simple path.",
    "output": "Print n - 1 integer. The integers should be separated by spaces. The i- th number should equal the number of fools who can go on the i- th road. The roads are numbered starting from one in the order, in which they occur in the input.",
    "note": "In the first sample the fool number one goes on the first and third road and the fool number 3 goes on the second, first and fourth ones. In the second sample, the fools number 1, 3 and 5 go on the first road, the fool number 5 will go on the second road, on the third road goes the fool number 3, and on the fourth one goes fool number 1.",
    "topics": [
      "data structures",
      "dfs and similar",
      "trees"
    ],
    "id": "191C"
  },
  {
    "title": "Counter Attack",
    "url": "https://codeforces.com/problemset/problem/190/E",
    "history": "Berland has managed to repel the flatlanders' attack and is now starting the counter attack. Flatland has n cities, numbered from 1 to n, and some pairs of them are connected by bidirectional roads. The Flatlandian maps show roads between cities if and only if there is in fact no road between this pair of cities ( we do not know whether is it a clever spy- proof strategy or just saving ink) . In other words, if two cities are connected by a road on a flatland map, then there is in fact no road between them. The opposite situation is also true: if two cities are not connected by a road on a flatland map, then in fact, there is a road between them. The berlanders got hold of a flatland map. Now Vasya the Corporal is commissioned by General Touristov to find all such groups of flatland cities, that in each group of cities you can get from any city to any other one, moving along the actual roads. Also the cities from different groups are unreachable from each other, moving along the actual roads. Indeed, destroying such groups one by one is much easier than surrounding all Flatland at once! Help the corporal complete this task and finally become a sergeant! Don' t forget that a flatland map shows a road between cities if and only if there is in fact no road between them.",
    "input": "The first line contains two space- separated integers n and m ( 1 \u2264 n \u2264 5\u00b7105, 0 \u2264 m \u2264 106) \u2014 the number of cities and the number of roads marked on the flatland map, correspondingly. Next m lines contain descriptions of the cities on the map. The i- th line contains two integers ai and bi ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi) \u2014 the numbers of cities that are connected by the i- th road on the flatland map. It is guaranteed that each pair of cities occurs in the input no more than once.",
    "output": "On the first line print number k \u2014 the number of groups of cities in Flatland, such that in each group you can get from any city to any other one by flatland roads. At the same time, the cities from different groups should be unreachable by flatland roads. On each of the following k lines first print ti ( 1 \u2264 ti \u2264 n) \u2014 the number of vertexes in the i- th group. Then print space- separated numbers of cities in the i- th group. The order of printing groups and the order of printing numbers in the groups does not matter. The total sum ti for all k groups must equal n.",
    "note": "In the first sample there are roads only between pairs of cities 1- 4 and 2- 3. In the second sample there is no road between cities 1 and 2, but still you can get from one city to the other one through city number 3.",
    "topics": [
      "data structures",
      "dsu",
      "graphs",
      "hashing",
      "sortings"
    ],
    "id": "190E"
  },
  {
    "title": "Heaven Tour",
    "url": "https://codeforces.com/problemset/problem/187/E",
    "history": "The story was not finished as PMP thought. God offered him one more chance to reincarnate and come back to life. But before he can come back, God told him that PMP should ask n great men including prominent programmers about their life experiences. The men are standing on a straight line. They are numbered 1 through n from left to right. The coordinate of the i- th man is xi ( xi < xi + 1, i < n) . PMP should visit all these people one by one in arbitrary order. Each men should be visited exactly once. At the beginning of his tour, he starts at location of s- th man and asks him about his experiences. Each time PMP wants to change his location, he should give a ticket to an angel and the angel carries him to his destination. Angels take PMP from one location, fly to his destination and put him down there. Nobody else is visited in this movement. Moving from i- th man to j- th man, takes | xi - xj| time. PMP can get back to life as soon as he visits all men. There are two types of angels: Some angels are going to the right and they only accept right tickets. Others are going the left and they only accept left tickets. There are an unlimited number of angels of each type. PMP has l left tickets and n - 1 - l right tickets. PMP wants to get back to life as soon as possible to be able to compete in this year' s final instead of the final he missed last year. He wants to know the quickest way to visit all the men exactly once. He also needs to know the exact sequence moves he should make.",
    "input": "The first line of input contains three space- separated integers n, l, s ( 2 \u2264 n \u2264 105, 0 \u2264 l < n, 1 \u2264 s \u2264 n) \u2014 the number of people to visit, the number left tickets PMP got, and initial location of PMP. Next line contains n space- separated integers. The i- th integer in this line is xi ( 0 = x1 < x2 < . . . < xn \u2264 109) \u2014 the location of i- th man.",
    "output": "If PMP cannot visit all men with the tickets he got print - 1 in the only line of output. Otherwise, in the first line you should print the minimum time PMP can visit all men. In the second line you should print n - 1 integers that are the numbers of the men that PMP should visit in order in one optimal solution. If there are multiple answers, output any of them. Please do not use the",
    "note": "Let us remind here, a great contestant of all times, who left us about a year ago. May Renat Mullakhanov rest in peace.",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "187E"
  },
  {
    "title": "BRT Contract ",
    "url": "https://codeforces.com/problemset/problem/187/D",
    "history": "In the last war of PMP, he defeated all his opponents and advanced to the final round. But after the end of semi- final round evil attacked him from behind and killed him! God bless him. Before his death, PMP signed a contract with the bus rapid transit ( BRT) that improves public transportations by optimizing time of travel estimation. You should help PMP finish his last contract. Each BRT line is straight line that passes n intersecting on its ways. At each intersection there is traffic light that periodically cycles between green and red. It starts illuminating green at time zero. During the green phase which lasts for g seconds, traffic is allowed to proceed. After the green phase the light changes to red and remains in this color for r seconds. During the red phase traffic is prohibited from proceeding. If a vehicle reaches the intersection exactly at a time when the light changes to red, it should stop, but the vehicle is clear to proceed if the light has just changed to green. All traffic lights have the same timing and are synchronized. In other words the period of red ( and green) phase is the same for all of traffic lights and they all start illuminating green at time zero. The BRT Company has calculated the time that a bus requires to pass each road segment. A road segment is the distance between two consecutive traffic lights or between a traffic light and source ( or destination) station. More precisely BRT specialists provide n + 1 positive integers li, the time in seconds that a bus needs to traverse i- th road segment in the path from source to destination. The l1 value denotes the time that a bus needs to pass the distance between source and the first intersection. The ln + 1 value denotes the time between the last intersection and destination. In one day q buses leave the source station. The i- th bus starts from source at time ti ( in seconds) . Decision makers of BRT Company want to know what time a bus gets to destination? The bus is considered as point. A bus will always move if it can. The buses do not interfere with each other.",
    "input": "The first line of input contains three space- separated positive integers n, g, r ( 1 \u2264 n \u2264 105, 2 \u2264 g + r \u2264 109) \u2014 the number of intersections, duration of green phase and duration of red phase. Next line contains n + 1 integers li ( 1 \u2264 li \u2264 109) \u2014 the time to pass the i- th road segment in the path from source to destination. Next line contains a single integer q ( 1 \u2264 q \u2264 105) \u2014 the number of buses in a day. The i- th of next q lines contains a single integer ti ( 1 \u2264 ti \u2264 109) \u2014 the time when i- th bus leaves the source station.",
    "output": "In the i- th line of output you should print a single integer \u2014 the time that i- th bus gets to destination. Please do not use the",
    "note": "In the first sample, buses # 1, # 2 and # 5 will reach the destination without waiting behind the red light. But buses # 3 and # 4 should wait. In the second sample, first bus should wait at third, fourth and fifth intersections. Second and third buses should wait only at the fifth intersection.",
    "topics": [
      "data structures"
    ],
    "id": "187D"
  },
  {
    "title": "Soap Time! - 2",
    "url": "https://codeforces.com/problemset/problem/185/E",
    "history": "Imagine the Cartesian coordinate system. There are k different points containing subway stations. One can get from any subway station to any one instantly. That is, the duration of the transfer between any two subway stations can be considered equal to zero. You are allowed to travel only between subway stations, that is, you are not allowed to leave the subway somewhere in the middle of your path, in- between the stations. There are n dwarves, they are represented by their coordinates on the plane. The dwarves want to come together and watch a soap opera at some integer point on the plane. For that, they choose the gathering point and start moving towards it simultaneously. In one second a dwarf can move from point ( x, y) to one of the following points: ( x - 1, y) , ( x + 1, y) , ( x, y - 1) , ( x, y + 1) . Besides, the dwarves can use the subway as many times as they want ( the subway transfers the dwarves instantly) . The dwarves do not interfere with each other as they move ( that is, the dwarves move simultaneously and independently from each other) . Help the dwarves and find the minimum time they need to gather at one point.",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 105; 0 \u2264 k \u2264 105) \u2014 the number of dwarves and the number of subway stations, correspondingly. The next n lines contain the coordinates of the dwarves. The i- th line contains two space- separated integers xi and yi ( | xi| , | yi| \u2264 108) \u2014 the coordinates of the i- th dwarf. It is guaranteed that all dwarves are located at different points. The next k lines contain the coordinates of the subway stations. The t- th line contains two space- separated integers xt and yt ( | xt| , | yt| \u2264 108) \u2014 the coordinates of the t- th subway station. It is guaranteed that all subway stations are located at different points.",
    "output": "Print a single number \u2014 the minimum time, in which all dwarves can gather together at one point to watch the soap.",
    "note": "",
    "topics": [
      "binary search",
      "data structures"
    ],
    "id": "185E"
  },
  {
    "title": "Optimal Sum",
    "url": "https://codeforces.com/problemset/problem/182/C",
    "history": "And here goes another problem on arrays. You are given positive integer len and array a which consists of n integers a1, a2, . . . , an. Let' s introduce two characteristics for the given array. Let' s consider an arbitrary interval of the array with length len, starting in position i. Value , is the modular sum on the chosen interval. In other words, the modular sum is the sum of integers on the chosen interval with length len, taken in its absolute value. Value is the optimal sum of the array. In other words, the optimal sum of an array is the maximum of all modular sums on various intervals of array with length len. Your task is to calculate the optimal sum of the given array a. However, before you do the calculations, you are allowed to produce no more than k consecutive operations of the following form with this array: one operation means taking an arbitrary number from array ai and multiply it by - 1. In other words, no more than k times you are allowed to take an arbitrary number ai from the array and replace it with - ai. Each number of the array is allowed to choose an arbitrary number of times. Your task is to calculate the maximum possible optimal sum of the array after at most k operations described above are completed.",
    "input": "The first line contains two integers n, len ( 1 \u2264 len \u2264 n \u2264 105) \u2014 the number of elements in the array and the length of the chosen subinterval of the array, correspondingly. The second line contains a sequence consisting of n integers a1, a2, . . . , an ( | ai| \u2264 109) \u2014 the original array. The third line contains a single integer k ( 0 \u2264 k \u2264 n) \u2014 the maximum allowed number of operations. All numbers in lines are separated by a single space.",
    "output": "In a single line print the maximum possible optimal sum after no more than k acceptable operations are fulfilled. Please do not use the",
    "note": "",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "182C"
  },
  {
    "title": "Encrypting Messages",
    "url": "https://codeforces.com/problemset/problem/177/D2",
    "history": "The Smart Beaver from ABBYY invented a new message encryption method and now wants to check its performance. Checking it manually is long and tiresome, so he decided to ask the ABBYY Cup contestants for help. A message is a sequence of n integers a1, a2, . . . , an. Encryption uses a key which is a sequence of m integers b1, b2, . . . , bm ( m \u2264 n) . All numbers from the message and from the key belong to the interval from 0 to c - 1, inclusive, and all the calculations are performed modulo c. Encryption is performed in n - m + 1 steps. On the first step we add to each number a1, a2, . . . , am a corresponding number b1, b2, . . . , bm. On the second step we add to each number a2, a3, . . . , am + 1 ( changed on the previous step) a corresponding number b1, b2, . . . , bm. And so on: on step number i we add to each number ai, ai + 1, . . . , ai + m - 1 a corresponding number b1, b2, . . . , bm. The result of the encryption is the sequence a1, a2, . . . , an after n - m + 1 steps. Help the Beaver to write a program that will encrypt messages in the described manner.",
    "input": "The first input line contains three integers n, m and c, separated by single spaces. The second input line contains n integers ai ( 0 \u2264 ai < c) , separated by single spaces \u2014 the original message. The third input line contains m integers bi ( 0 \u2264 bi < c) , separated by single spaces \u2014 the encryption key. The input limitations for getting 30 points are: 1 \u2264 m \u2264 n \u2264 103 1 \u2264 c \u2264 103 The input limitations for getting 100 points are: 1 \u2264 m \u2264 n \u2264 105 1 \u2264 c \u2264 103",
    "output": "Print n space- separated integers \u2014 the result of encrypting the original message.",
    "note": "In the first sample the encryption is performed in two steps: after the first step a = ( 0, 0, 0, 1) ( remember that the calculations are performed modulo 2) , after the second step a = ( 0, 1, 1, 0) , and that is the answer.",
    "topics": [
      "data structures"
    ],
    "id": "177D2"
  },
  {
    "title": "Archaeology",
    "url": "https://codeforces.com/problemset/problem/176/E",
    "history": "This time you should help a team of researchers on an island in the Pacific Ocean. They research the culture of the ancient tribes that used to inhabit the island many years ago. Overall they' ve dug out n villages. Some pairs of villages were connected by roads. People could go on the roads in both directions. Overall there were exactly n - 1 roads, and from any village one could get to any other one. The tribes were not peaceful and they had many wars. As a result of the wars, some villages were destroyed completely. During more peaceful years some of the villages were restored. At each moment of time people used only those roads that belonged to some shortest way between two villages that existed at the given moment. In other words, people used the minimum subset of roads in such a way, that it was possible to get from any existing village to any other existing one. Note that throughout the island' s whole history, there existed exactly n - 1 roads that have been found by the researchers. There never were any other roads. The researchers think that observing the total sum of used roads\u2019 lengths at different moments of time can help to better understand the tribes' culture and answer several historical questions. You will be given the full history of the tribes' existence. Your task is to determine the total length of used roads at some moments of time.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 105) \u2014 the number of villages. The next n - 1 lines describe the roads. The i- th of these lines contains three integers ai, bi and ci ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi, 1 \u2264 ci \u2264 109, 1 \u2264 i < n) \u2014 the numbers of villages that are connected by the i- th road and the road' s length. The numbers in the lines are separated by a space. The next line contains an integer q ( 1 \u2264 q \u2264 105) \u2014 the number of queries. Then follow q queries, one per line, ordered by time. Each query belongs to one of three types: \" + x\" \u2014 village number x is restored ( 1 \u2264 x \u2264 n) . \" - x\" \u2014 village number x is destroyed ( 1 \u2264 x \u2264 n) . \" ? \" \u2014 the archaeologists want to know the total length of the roads which were used for that time period. It is guaranteed that the queries do not contradict each other, that is, there won' t be queries to destroy non- existing villages or restore the already existing ones. It is guaranteed that we have at least one query of type \" ? \" . It is also guaranteed that one can get from any village to any other one by the given roads. At the initial moment of time no village is considered to exist.",
    "output": "For each query of type \" ? \" print the total length of used roads on a single line. You should print the answers to the queries in the order, in which they are given in the input. Please do not use the",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "trees"
    ],
    "id": "176E"
  },
  {
    "title": "Gnomes of Might and Magic",
    "url": "https://codeforces.com/problemset/problem/175/F",
    "history": "Vasya plays a popular game the Gnomes of Might and Magic. In this game Vasya manages the kingdom of gnomes, consisting of several castles, connected by bidirectional roads. The kingdom road network has a special form. The kingdom has m main castles a1, a2, . . . , am, which form the Good Path. This path consists of roads between the castles ai, ai + 1 ( 1 \u2264 i < m) as well as the road between am and a1. There are no other roads between the castles of the Good Path. In addition, for each pair of neighboring Good Path castles u and v there is exactly one Evil Shortcut \u2014 a path that goes along the roads leading from the first castle ( u) to the second one ( v) and not having any common vertexes with the Good Path except for the vertexes u and v. It is known that there are no other roads and castles in the kingdom there, that is, every road and every castle lies either on the Good Path or the Evil Shortcut ( castles can lie in both of them) . In addition, no two Evil Shortcuts have any common castles, different than the castles of the Good Path. At the beginning of each week in the kingdom appears one very bad gnome who stands on one of the roads of the kingdom, and begins to rob the corovans going through this road. One road may accumulate multiple very bad gnomes. Vasya cares about his corovans, so sometimes he sends the Mission of Death from one castle to another. Let' s suggest that the Mission of Death should get from castle s to castle t. Then it will move from castle s to castle t, destroying all very bad gnomes, which are on the roads of the Mission' s path. Vasya is so tough that his Mission of Death can destroy any number of gnomes on its way. However, Vasya is very kind, so he always chooses such path between castles s and t, following which he will destroy the smallest number of gnomes. If there are multiple such paths, then Vasya chooses the path that contains the smallest number of roads among them. If there are multiple such paths still, Vasya chooses the lexicographically minimal one among them. Help Vasya to simulate the life of the kingdom in the Gnomes of Might and Magic game. A path is a sequence of castles, such that each pair of the neighboring castles on the path is connected by a road. Also, path x1, x2, . . . , xp is lexicographically less than path y1, y2, . . . , yq, if either p < q and x1 = y1, x2 = y2, . . . , xp = yp, or exists such number r ( r < p, r < q) , that x1 = y1, x2 = y2, . . . , xr = yr and xr + 1 < yr + 1.",
    "input": "The first line contains two integers n and m ( 3 \u2264 m \u2264 n \u2264 100000) \u2014 the number of castles in the kingdom, and the number of castles on the Good Path, respectively. The second line contains m integers, which are numbers of Good Path castles ( the castles are numbered from 1 to n) in the order of occurrence on the Path, starting with some castle. All Good Path castles are different. Each of the following m lines describes an Evil Shortcut. First a line contains an integer ki ( 3 \u2264 ki \u2264 100000) \u2014 the number of castles on the corresponding Evil Shortcut ( with the two castles which are on the Good Path) , followed by a ki integers \u2014 number of castles in the order of occurrence in the given Shortcut. All castles in one Evil Shortcut are different. It is guaranteed that the first and the last castles from the Shortcut are on the Good Path and the first castles in the Evil Shortcuts form the Good Path and are presented in the same order in which the Path was represented on the second line. The next line contains an integer q ( 1 \u2264 q \u2264 100000) \u2014 the number of events in the life of the kingdom. Each of the following q lines describes a single event. An event is described by the symbol cj and two numbers or castles sj and tj ( the character and numbers of castles are separated by a single space) . If the character of cj is equal to \" + \" ( a plus) , it means that a very bad gnome ( probably not the first one) has appeared on the road between castles sj and tj. If cj equals \" ? \" ( a question) , then Vasya sent a Mission of Death from castle sj to castle tj. It is guaranteed that for each request \" + \" , the road between castles sj and tj exists. The events are given in chronological order, starting with the earliest one. Initially there are no very bad gnomes on the roads. All numbers in all lines are separated by single spaces. It is guaranteed that all the given Evil Shortcuts and Good Path fit in the limitations given in the problem statement.",
    "output": "For each query \" ? \" print a single number on a single line \u2014 the number of very bad gnomes destroyed by the corresponding Mission of Death. Print the answers to queries in the chronological order.",
    "note": "In the example after the first four requests there is only one path from castle 1 to castle 2, which does not contain roads with very bad gnomes: 1 6 3 5 2. After a gnome stood on the road ( 2, 5) , the next Mission of Death moves along path 1 2, and destroys the gnome, who was on the road ( 1, 2) . The next Mission of Death follows the same path which is already free of gnomes. After yet another gnome stood on the road ( 1, 2) , the next Mission of Death goes on the path 1 2, and kills the gnome.",
    "topics": [
      "data structures",
      "graphs",
      "implementation",
      "shortest paths"
    ],
    "id": "175F"
  },
  {
    "title": "Range Increments",
    "url": "https://codeforces.com/problemset/problem/174/C",
    "history": "Polycarpus is an amateur programmer. Now he is analyzing a friend' s program. He has already found there the function rangeIncrement( l, r) , that adds 1 to each element of some array a for all indexes in the segment [ l, r] . In other words, this function does the following: function rangeIncrement( l, r) for i : = l . . r do a[ i] = a[ i] + 1Polycarpus knows the state of the array a after a series of function calls. He wants to determine the minimum number of function calls that lead to such state. In addition, he wants to find what function calls are needed in this case. It is guaranteed that the required number of calls does not exceed 105. Before calls of function rangeIncrement( l, r) all array elements equal zero.",
    "input": "The first input line contains a single integer n ( 1 \u2264 n \u2264 105) \u2014 the length of the array a[ 1. . . n] . The second line contains its integer space- separated elements, a[ 1] , a[ 2] , . . . , a[ n] ( 0 \u2264 a[ i] \u2264 105) after some series of function calls rangeIncrement( l, r) . It is guaranteed that at least one element of the array is positive. It is guaranteed that the answer contains no more than 105 calls of function rangeIncrement( l, r) .",
    "output": "Print on the first line t \u2014 the minimum number of calls of function rangeIncrement( l, r) , that lead to the array from the input data. It is guaranteed that this number will turn out not more than 105. Then print t lines \u2014 the descriptions of function calls, one per line. Each line should contain two integers li, ri ( 1 \u2264 li \u2264 ri \u2264 n) \u2014 the arguments of the i- th call rangeIncrement( l, r) . Calls can be applied in any order. If there are multiple solutions, you are allowed to print any of them.",
    "note": "The first sample requires a call for the entire array, and four additional calls: one for the segment [ 2, 2] ( i. e. the second element of the array) , three for the segment [ 5, 5] ( i. e. the fifth element of the array) .",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "174C"
  },
  {
    "title": "Camping Groups",
    "url": "https://codeforces.com/problemset/problem/173/E",
    "history": "A club wants to take its members camping. In order to organize the event better the club directors decided to partition the members into several groups. Club member i has a responsibility value ri and an age value ai. A group is a non- empty subset of club members with one member known as group leader. A group leader should be one of the most responsible members of the group ( his responsibility value is not less than responsibility of any other group member) and his age absolute difference with any other group member should not exceed k. Some club members are friends and want to be in the same group. They also like their group to be as large as possible. Now you should write a program that answers a series of questions like \" What' s the largest size of a group containing club member x and club member y? \" . It' s possible for x or y to be the group leader.",
    "input": "The first line contains two integers n and k ( 2 \u2264 n \u2264 105, 0 \u2264 k \u2264 109) \u2014 the number of club members and the age restriction for one group. The next line contains integer numbers r1, r2, . . . , rn ( 1 \u2264 ri \u2264 109) separated by space: ri denotes the i- th club member' s responsibility. In the same way there are integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) in the third line: ai denotes the i- th club member' s age. The next line contains an integer q denoting the number of questions that you should answer ( 1 \u2264 q \u2264 105) . The next q lines describe the questions. Each line contains two space- separated integers xi and yi ( 1 \u2264 xi, yi \u2264 n, xi = \u0338 yi) \u2014 the indices of the club members that should end up in the same group.",
    "output": "For each question print the maximum size of the group in a line. If making such a group is impossible print - 1 instead.",
    "note": "In the first query the largest group with members 3 and 5 is 1, 3, 4, 5 where member 3 is the leader. In the second query member 2 should be the leader so the group will be 1, 2, 3. In the third query the leader of the group should have age 3 so the only leader can be member 3, who is less responsible than member 2. So making a group is impossible. The group for the fourth query is the same as first query.",
    "topics": [
      "data structures",
      "sortings"
    ],
    "id": "173E"
  },
  {
    "title": "Wizards and Roads",
    "url": "https://codeforces.com/problemset/problem/167/D",
    "history": "In some country live wizards. They love to build cities and roads. The country used to have k cities, the j- th city ( 1 \u2264 j \u2264 k) was located at a point ( xj, yj) . It was decided to create another n - k cities. And the i- th one ( k < i \u2264 n) was created at a point with coordinates ( xi, yi) : xi = ( a\u00b7xi - 1 + b) mod ( 109 + 9) yi = ( c\u00b7yi - 1 + d) mod ( 109 + 9) Here a, b, c, d are primes. Also, a = \u0338 c, b = \u0338 d. After the construction of all n cities, the wizards have noticed something surprising. It turned out that for every two different cities i and j, xi = \u0338 xj and yi = \u0338 yj holds. The cities are built, it' s time to build roads! It was decided to use the most difficult ( and, of course, the most powerful) spell for the construction of roads. Using this spell creates a road between the towns of u, v ( yu > yv) if and only if for any city w which lies strictly inside the corner at the point u, v ( see below) , there is a city s that does not lie in the corner, which is located along the x- coordinate strictly between w and u and simultaneously ys > yv. A corner on the points p2( x2, y2) , p1( x1, y1) ( y1 < y2) is the set of points ( x, y) , for which at least one of the two conditions is fulfilled: min( x1, x2) \u2264 x \u2264 max( x1, x2) and y \u2265 y1 y1 \u2264 y \u2264 y2 and ( x - x2) \u00b7( x1 - x2) \u2265 0 The pictures showing two different corners In order to test the spell, the wizards will apply it to all the cities that lie on the x- coordinate in the interval [ L, R] . After the construction of roads the national government wants to choose the maximum number of pairs of cities connected by the road, so that no city occurs in two or more pairs. Your task is for each m offered variants of values L, R to calculate the maximum number of such pairs after the construction of the roads. Please note that the cities that do not lie in the interval [ L, R] on the x- coordinate, do not affect the construction of roads in any way.",
    "input": "The first line contains two space- separated integers n, k ( 1 \u2264 k \u2264 n \u2264 105, k \u2264 30) . Next k lines contain coordinates of the cities' location points from the first to the k- th one. The j- th line contains space- separated pair of integers xj, yj ( 0 \u2264 xj, yj < 109 + 9) \u2014 coordinates of the j- th city. The next line contains space- separated integers a, b, c, d ( 2 \u2264 a, b, c, d < 109 + 9) . It is guaranteed that those numbers are prime and also that a = \u0338 c, b = \u0338 d. It' s guaranteed, that for every two different cities i and j, xi = \u0338 xj and yi = \u0338 yj holds. The next line contains integer m ( 1 \u2264 m \u2264 105) \u2014 the number of variants to build the roads. Next m lines contain pairs of space- separated integers Li, Ri ( 0 \u2264 Li \u2264 Ri < 109 + 9) \u2014 the variants of choosing the cities to build the roads.",
    "output": "For any pair of numbers Li, Ri print the answer to the problem on a single line. Print the answers for the pairs in the order, in which the pairs are given in the input data.",
    "note": "In the first sample the roads connect the cities in a chain in the order of increasing of x. In the second sample the remaining 5 cities will be located at points ( 5, 11) ; ( 20, 263098) ; ( 65, 292514823) ; ( 200, 76958738) ; ( 605, 622120197) .",
    "topics": [
      "data structures",
      "divide and conquer",
      "graph matchings",
      "graphs",
      "greedy"
    ],
    "id": "167D"
  },
  {
    "title": "Beard Graph",
    "url": "https://codeforces.com/problemset/problem/165/D",
    "history": "Let' s define a non- oriented connected graph of n vertices and n - 1 edges as a beard, if all of its vertices except, perhaps, one, have the degree of 2 or 1 ( that is, there exists no more than one vertex, whose degree is more than two) . Let us remind you that the degree of a vertex is the number of edges that connect to it. Let each edge be either black or white. Initially all edges are black. You are given the description of the beard graph. Your task is to analyze requests of the following types: paint the edge number i black. The edge number i is the edge that has this number in the description. It is guaranteed that by the moment of this request the i- th edge is white paint the edge number i white. It is guaranteed that by the moment of this request the i- th edge is black find the length of the shortest path going only along the black edges between vertices a and b or indicate that no such path exists between them ( a path' s length is the number of edges in it) The vertices are numbered with integers from 1 to n, and the edges are numbered with integers from 1 to n - 1.",
    "input": "The first line of the input contains an integer n ( 2 \u2264 n \u2264 105) \u2014 the number of vertices in the graph. Next n - 1 lines contain edges described as the numbers of vertices vi, ui ( 1 \u2264 vi, ui \u2264 n, vi = \u0338 ui) connected by this edge. It is guaranteed that the given graph is connected and forms a beard graph, and has no self- loops or multiple edges. The next line contains an integer m ( 1 \u2264 m \u2264 3\u00b7105) \u2014 the number of requests. Next m lines contain requests in the following form: first a line contains an integer type, which takes values \u200b\u200bfrom 1 to 3, and represents the request type. If type = 1, then the current request is a request to paint the edge black. In this case, in addition to number type the line should contain integer id ( 1 \u2264 id \u2264 n - 1) , which represents the number of the edge to paint. If type = 2, then the current request is a request to paint the edge white, its form is similar to the previous request. If type = 3, then the current request is a request to find the distance. In this case, in addition to type, the line should contain two integers a, b ( 1 \u2264 a, b \u2264 n, a can be equal to b) \u2014 the numbers of vertices, the distance between which must be found. The numbers in all lines are separated by exactly one space. The edges are numbered in the order in which they are given in the input.",
    "output": "For each request to \" find the distance between vertices a and b\" print the result. If there is no path going only along the black edges between vertices a and b, then print \" - 1\" ( without the quotes) . Print the results in the order of receiving the requests, separate the numbers with spaces or line breaks.",
    "note": "In the first sample vertices 1 and 2 are connected with edge number 1, and vertices 2 and 3 are connected with edge number 2. Before the repainting edge number 2 each vertex is reachable from each one along the black edges. Specifically, the shortest path between 1 and 3 goes along both edges. If we paint edge number 2 white, vertex 3 will end up cut off from other vertices, that is, no path exists from it to any other vertex along the black edges.",
    "topics": [
      "data structures",
      "dsu",
      "trees"
    ],
    "id": "165D"
  },
  {
    "title": "e-Government",
    "url": "https://codeforces.com/problemset/problem/163/E",
    "history": "The best programmers of Embezzland compete to develop a part of the project called \" e- Government\" \u2014 the system of automated statistic collecting and press analysis. We know that any of the k citizens can become a member of the Embezzland government. The citizens' surnames are a1, a2, . . . , ak. All surnames are different. Initially all k citizens from this list are members of the government. The system should support the following options: Include citizen ai to the government. Exclude citizen ai from the government. Given a newspaper article text, calculate how politicized it is. To do this, for every active government member the system counts the number of times his surname occurs in the text as a substring. All occurrences are taken into consideration, including the intersecting ones. The degree of politicization of a text is defined as the sum of these values for all active government members. Implement this system.",
    "input": "The first line contains space- separated integers n and k ( 1 \u2264 n, k \u2264 105) \u2014 the number of queries to the system and the number of potential government members. Next k lines contain the surnames a1, a2, . . . , ak, one per line. All surnames are pairwise different. Next n lines contain queries to the system, one per line. Each query consists of a character that determines an operation and the operation argument, written consecutively without a space. Operation \" include in the government\" corresponds to the character \" + \" , operation \" exclude\" corresponds to \" - \" . An argument of those operations is an integer between 1 and k \u2014 the index of the citizen involved in the operation. Any citizen can be included and excluded from the government an arbitrary number of times in any order. Including in the government a citizen who is already there or excluding the citizen who isn' t there changes nothing. The operation \" calculate politicization\" corresponds to character \" ? \" . Its argument is a text. All strings \u2014 surnames and texts \u2014 are non- empty sequences of lowercase Latin letters. The total length of all surnames doesn' t exceed 106, the total length of all texts doesn' t exceed 106.",
    "output": "For any \" calculate politicization\" operation print on a separate line the degree of the politicization of the given text. Print nothing for other operations.",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "dp",
      "strings",
      "trees"
    ],
    "id": "163E"
  },
  {
    "title": "Buses and People",
    "url": "https://codeforces.com/problemset/problem/160/E",
    "history": "The main Bertown street is represented by a straight line. There are 109 bus stops located on the line. The stops are numbered with integers from 1 to 109 in the order in which they follow on the road. The city has n buses. Every day the i- th bus drives from stop number si to stop number fi ( si < fi) , it stops on all intermediate stops and returns only at night. The bus starts driving at time ti and drives so fast that it finishes driving also at time ti. The time ti is different for all buses. The buses have infinite capacity. Bertown has m citizens. Today the i- th person should get from stop number li to stop number ri ( li < ri) ; the i- th citizen comes to his initial stop ( li) at time bi. Each person, on the one hand, wants to get to the destination point as quickly as possible, and on the other hand, definitely does not want to change the buses as he rides. More formally: the i- th person chooses bus j, with minimum time tj, such that sj \u2264 li, ri \u2264 fj and bi \u2264 tj. Your task is to determine for each citizen whether he can ride to the destination point today and if he can, find the number of the bus on which the citizen will ride.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 105) \u2014 the number of buses and the number of people. Then n lines follow, each of them contains three integers: si, fi, ti ( 1 \u2264 si, fi, ti \u2264 109, si < fi) \u2014 the description of the buses. It is guaranteed that all ti- s are different. Then m lines follow, each of them contains three integers: li, ri, bi ( 1 \u2264 li, ri, bi \u2264 109, li < ri) \u2014 the Bertown citizens' description. Some bi- s could coincide.",
    "output": "In the first line print m space- separated integers: the i- th number should be equal either to - 1, if the person number i can' t get to the destination point, or to the number of the bus that will ride the person number i. The buses are numbered with integers from 1 to n in the input order.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "sortings"
    ],
    "id": "160E"
  },
  {
    "title": "Zebra Tower",
    "url": "https://codeforces.com/problemset/problem/159/E",
    "history": "Little Janet likes playing with cubes. Actually, she likes to play with anything whatsoever, cubes or tesseracts, as long as they are multicolored. Each cube is described by two parameters \u2014 color ci and size si. A Zebra Tower is a tower that consists of cubes of exactly two colors. Besides, the colors of the cubes in the tower must alternate ( colors of adjacent cubes must differ) . The Zebra Tower should have at least two cubes. There are no other limitations. The figure below shows an example of a Zebra Tower. A Zebra Tower' s height is the sum of sizes of all cubes that form the tower. Help little Janet build the Zebra Tower of the maximum possible height, using the available cubes.",
    "input": "The first line contains an integer n ( 2 \u2264 n \u2264 105) \u2014 the number of cubes. Next n lines contain the descriptions of the cubes, one description per line. A cube description consists of two space- separated integers ci and si ( 1 \u2264 ci, si \u2264 109) \u2014 the i- th cube' s color and size, correspondingly. It is guaranteed that there are at least two cubes of different colors.",
    "output": "Print the description of the Zebra Tower of the maximum height in the following form. In the first line print the tower' s height, in the second line print the number of cubes that form the tower, and in the third line print the space- separated indices of cubes in the order in which they follow in the tower from the bottom to the top. Assume that the cubes are numbered from 1 to n in the order in which they were given in the input. If there are several existing Zebra Towers with maximum heights, it is allowed to print any of them. Please do not use the",
    "note": "",
    "topics": [
      "*special",
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "159E"
  },
  {
    "title": "String Manipulation 1.0",
    "url": "https://codeforces.com/problemset/problem/159/C",
    "history": "One popular website developed an unusual username editing procedure. One can change the username only by deleting some characters from it: to change the current name s, a user can pick number p and character c and delete the p- th occurrence of character c from the name. After the user changed his name, he can' t undo the change. For example, one can change name \" arca\" by removing the second occurrence of character \" a\" to get \" arc\" . Polycarpus learned that some user initially registered under nickname t, where t is a concatenation of k copies of string s. Also, Polycarpus knows the sequence of this user' s name changes. Help Polycarpus figure out the user' s final name.",
    "input": "The first line contains an integer k ( 1 \u2264 k \u2264 2000) . The second line contains a non- empty string s, consisting of lowercase Latin letters, at most 100 characters long. The third line contains an integer n ( 0 \u2264 n \u2264 20000) \u2014 the number of username changes. Each of the next n lines contains the actual changes, one per line. The changes are written as \" pi ci\" ( without the quotes) , where pi ( 1 \u2264 pi \u2264 200000) is the number of occurrences of letter ci, ci is a lowercase Latin letter. It is guaranteed that the operations are correct, that is, the letter to be deleted always exists, and after all operations not all letters are deleted from the name. The letters' occurrences are numbered starting from 1.",
    "output": "Print a single string \u2014 the user' s final name after all changes are applied to it.",
    "note": "Let' s consider the first sample. Initially we have name \" bacbac\" ; the first operation transforms it into \" bacbc\" , the second one \u2014 to \" acbc\" , and finally, the third one transforms it into \" acb\" .",
    "topics": [
      "*special",
      "binary search",
      "brute force",
      "data structures",
      "strings"
    ],
    "id": "159C"
  },
  {
    "title": "Cd and pwd commands",
    "url": "https://codeforces.com/problemset/problem/158/C",
    "history": "Vasya is writing an operating system shell, and it should have commands for working with directories. To begin with, he decided to go with just two commands: cd ( change the current directory) and pwd ( display the current directory) . Directories in Vasya' s operating system form a traditional hierarchical tree structure. There is a single root directory, denoted by the slash character \" / \" . Every other directory has a name \u2014 a non- empty string consisting of lowercase Latin letters. Each directory ( except for the root) has a parent directory \u2014 the one that contains the given directory. It is denoted as \" . . \" . The command cd takes a single parameter, which is a path in the file system. The command changes the current directory to the directory specified by the path. The path consists of the names of directories separated by slashes. The name of the directory can be \" . . \" , which means a step up to the parent directory. \u00ab. . \u00bb can be used in any place of the path, maybe several times. If the path begins with a slash, it is considered to be an absolute path, that is, the directory changes to the specified one, starting from the root. If the parameter begins with a directory name ( or \" . . \" ) , it is considered to be a relative path, that is, the directory changes to the specified directory, starting from the current one. The command pwd should display the absolute path to the current directory. This path must not contain \" . . \" . Initially, the current directory is the root. All directories mentioned explicitly or passed indirectly within any command cd are considered to exist. It is guaranteed that there is no attempt of transition to the parent directory of the root directory.",
    "input": "The first line of the input data contains the single integer n ( 1 \u2264 n \u2264 50) \u2014 the number of commands. Then follow n lines, each contains one command. Each of these lines contains either command pwd, or command cd, followed by a space- separated non- empty parameter. The command parameter cd only contains lower case Latin letters, slashes and dots, two slashes cannot go consecutively, dots occur only as the name of a parent pseudo- directory. The command parameter cd does not end with a slash, except when it is the only symbol that points to the root directory. The command parameter has a length from 1 to 200 characters, inclusive. Directories in the file system can have the same names.",
    "output": "For each command pwd you should print the full absolute path of the given directory, ending with a slash. It should start with a slash and contain the list of slash- separated directories in the order of being nested from the root to the current folder. It should contain no dots.",
    "note": "",
    "topics": [
      "*special",
      "data structures",
      "implementation"
    ],
    "id": "158C"
  },
  {
    "title": "Suspects",
    "url": "https://codeforces.com/problemset/problem/156/B",
    "history": "As Sherlock Holmes was investigating a crime, he identified n suspects. He knows for sure that exactly one of them committed the crime. To find out which one did it, the detective lines up the suspects and numbered them from 1 to n. After that, he asked each one: \" Which one committed the crime? \" . Suspect number i answered either \" The crime was committed by suspect number ai\" , or \" Suspect number ai didn' t commit the crime\" . Also, the suspect could say so about himself ( ai = i) . Sherlock Holmes understood for sure that exactly m answers were the truth and all other answers were a lie. Now help him understand this: which suspect lied and which one told the truth?",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 105, 0 \u2264 m \u2264 n) \u2014 the total number of suspects and the number of suspects who told the truth. Next n lines contain the suspects' answers. The i- th line contains either \" + ai\" ( without the quotes) , if the suspect number i says that the crime was committed by suspect number ai, or \" - ai\" ( without the quotes) , if the suspect number i says that the suspect number ai didn' t commit the crime ( ai is an integer, 1 \u2264 ai \u2264 n) . It is guaranteed that at least one suspect exists, such that if he committed the crime, then exactly m people told the truth.",
    "output": "Print n lines. Line number i should contain \" Truth\" if suspect number i has told the truth for sure. Print \" Lie\" if the suspect number i lied for sure and print \" Not defined\" if he could lie and could tell the truth, too, depending on who committed the crime.",
    "note": "The first sample has the single person and he confesses to the crime, and Sherlock Holmes knows that one person is telling the truth. That means that this person is telling the truth. In the second sample there are three suspects and each one denies his guilt. Sherlock Holmes knows that only two of them are telling the truth. Any one of them can be the criminal, so we don' t know for any of them, whether this person is telling the truth or not. In the third sample the second and the fourth suspect defend the first and the third one. But only one is telling the truth, thus, the first or the third one is the criminal. Both of them can be criminals, so the second and the fourth one can either be lying or telling the truth. The first and the third one are lying for sure as they are blaming the second and the fourth one.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "implementation"
    ],
    "id": "156B"
  },
  {
    "title": "Freezing with Style",
    "url": "https://codeforces.com/problemset/problem/150/E",
    "history": "This winter is so. . . well, you' ve got the idea : - ) The Nvodsk road system can be represented as n junctions connected with n - 1 bidirectional roads so that there is a path between any two junctions. The organizers of some event want to choose a place to accommodate the participants ( junction v) , and the place to set up the contests ( junction u) . Besides, at the one hand, they want the participants to walk about the city and see the neighbourhood ( that' s why the distance between v and u should be no less than l) . On the other hand, they don' t want the participants to freeze ( so the distance between v and u should be no more than r) . Besides, for every street we know its beauty \u2014 some integer from 0 to 109. Your task is to choose the path that fits in the length limits and has the largest average beauty. We shall define the average beauty as a median of sequence of the beauties of all roads along the path. We can put it more formally like that: let there be a path with the length k. Let ai be a non- decreasing sequence that contains exactly k elements. Each number occurs there exactly the number of times a road with such beauty occurs along on path. We will represent the path median as number a\u230ak / 2\u230b, assuming that indexation starting from zero is used. \u230ax\u230b \u2014 is number \u0445, rounded down to the nearest integer. For example, if a = 0, 5, 12, then the median equals to 5, and if a = 0, 5, 7, 12, then the median is number 7. It is guaranteed that there will be at least one path with the suitable quantity of roads.",
    "input": "The first line contains three integers n, l, r ( 1 \u2264 l \u2264 r < n \u2264 105) . Next n - 1 lines contain descriptions of roads of the Nvodsk, each line contains three integers ai, bi, ci ( 1 \u2264 ai, bi \u2264 n, 0 \u2264 ci \u2264 109, ai = \u0338 bi) \u2014 junctions ai and bi are connected with a street whose beauty equals ci.",
    "output": "Print two integers \u2014 numbers of the junctions, where to accommodate the participants and set up the contests, correspondingly. If there are multiple optimal variants, print any of them.",
    "note": "In the first sample all roads have the same beauty. That means that all paths of the positive length have the same median. Thus, any path with length from 3 to 4, inclusive will be valid for us. In the second sample the city looks like that: 1 - 2 - 3 - 4 - 5 - 6. Two last roads are more valuable and we should choose any path that contains both of them and has the suitable length. It is either the path between 2 and 6 or the path between 3 and 6.",
    "topics": [
      "binary search",
      "data structures",
      "divide and conquer",
      "trees"
    ],
    "id": "150E"
  },
  {
    "title": "Smart Cheater",
    "url": "https://codeforces.com/problemset/problem/150/C",
    "history": "I guess there' s not much point in reminding you that Nvodsk winters aren' t exactly hot. That increased the popularity of the public transport dramatically. The route of bus 62 has exactly n stops ( stop 1 goes first on its way and stop n goes last) . The stops are positioned on a straight line and their coordinates are 0 = x1 < x2 < . . . < xn. Each day exactly m people use bus 62. For each person we know the number of the stop where he gets on the bus and the number of the stop where he gets off the bus. A ticket from stop a to stop b ( a < b) costs xb - xa rubles. However, the conductor can choose no more than one segment NOT TO SELL a ticket for. We mean that conductor should choose C and D ( \u0421 < = D) and sell a ticket for the segments [ A, C] and [ D, B] , or not sell the ticket at all. The conductor and the passenger divide the saved money between themselves equally. The conductor' s \" untaxed income\" is sometimes interrupted by inspections that take place as the bus drives on some segment of the route located between two consecutive stops. The inspector fines the conductor by c rubles for each passenger who doesn' t have the ticket for this route' s segment. You know the coordinated of all stops xi; the numbers of stops where the i- th passenger gets on and off, ai and bi ( ai < bi) ; the fine c; and also pi \u2014 the probability of inspection on segment between the i- th and the i + 1- th stop. The conductor asked you to help him make a plan of selling tickets that maximizes the mathematical expectation of his profit.",
    "input": "The first line contains three integers n, m and c ( 2 \u2264 n \u2264 150 000, 1 \u2264 m \u2264 300 000, 1 \u2264 c \u2264 10 000) . The next line contains n integers xi ( 0 \u2264 xi \u2264 109, x1 = 0, xi < xi + 1) \u2014 the coordinates of the stops on the bus' s route. The third line contains n - 1 integer pi ( 0 \u2264 pi \u2264 100) \u2014 the probability of inspection in percents on the segment between stop i and stop i + 1. Then follow m lines that describe the bus' s passengers. Each line contains exactly two integers ai and bi ( 1 \u2264 ai < bi \u2264 n) \u2014 the numbers of stops where the i- th passenger gets on and off.",
    "output": "Print the single real number \u2014 the maximum expectation of the conductor' s profit. Your answer will be considered correct if its absolute or relative error does not exceed 10 - 6. Namely: let' s assume that your answer is a, and the answer of the jury is b. The checker program will consider your answer correct, if .",
    "note": "A comment to the first sample: The first and third passengers get tickets from stop 1 to stop 2. The second passenger doesn' t get a ticket. There always is inspection on the segment 1- 2 but both passengers have the ticket for it. There never is an inspection on the segment 2- 3, that' s why the second passenger gets away with the cheating. Our total profit is ( 0 + 90 / 2 + 90 / 2) = 90.",
    "topics": [
      "data structures",
      "math",
      "probabilities"
    ],
    "id": "150C"
  },
  {
    "title": "Lucky Queries",
    "url": "https://codeforces.com/problemset/problem/145/E",
    "history": "Petya loves lucky numbers very much. Everybody knows that lucky numbers are positive integers whose decimal record contains only the lucky digits 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not. Petya brought home string s with the length of n. The string only consists of lucky digits. The digits are numbered from the left to the right starting with 1. Now Petya should execute m queries of the following form: switch l r \u2014 \" switch\" digits ( i. e. replace them with their opposites) at all positions with indexes from l to r, inclusive: each digit 4 is replaced with 7 and each digit 7 is replaced with 4 ( 1 \u2264 l \u2264 r \u2264 n) ; count \u2014 find and print on the screen the length of the longest non- decreasing subsequence of string s. Subsequence of a string s is a string that can be obtained from s by removing zero or more of its elements. A string is called non- decreasing if each successive digit is not less than the previous one. Help Petya process the requests.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 106, 1 \u2264 m \u2264 3\u00b7105) \u2014 the length of the string s and the number of queries correspondingly. The second line contains n lucky digits without spaces \u2014 Petya' s initial string. Next m lines contain queries in the form described in the statement.",
    "output": "For each query count print an answer on a single line.",
    "note": "In the first sample the chronology of string s after some operations are fulfilled is as follows ( the sought maximum subsequence is marked with bold) : 47 74 74 In the second sample: 747 447 447 774 774",
    "topics": [
      "data structures"
    ],
    "id": "145E"
  },
  {
    "title": "Lucky Pair",
    "url": "https://codeforces.com/problemset/problem/145/D",
    "history": "Petya loves lucky numbers very much. Everybody knows that lucky numbers are positive integers whose decimal record contains only the lucky digits 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not. Petya has an array a of n integers. The numbers in the array are numbered starting from 1. Unfortunately, Petya has been misbehaving and so, his parents don' t allow him play with arrays that have many lucky numbers. It is guaranteed that no more than 1000 elements in the array a are lucky numbers. Petya needs to find the number of pairs of non- intersecting segments [ l1; r1] and [ l2; r2] ( 1 \u2264 l1 \u2264 r1 < l2 \u2264 r2 \u2264 n, all four numbers are integers) such that there' s no such lucky number that occurs simultaneously in the subarray a[ l1. . r1] and in the subarray a[ l2. . r2] . Help Petya count the number of such pairs.",
    "input": "The first line contains an integer n ( 2 \u2264 n \u2264 105) \u2014 the size of the array a. The second line contains n space- separated integers ai ( 1 \u2264 ai \u2264 109) \u2014 array a. It is guaranteed that no more than 1000 elements in the array a are lucky numbers.",
    "output": "On the single line print the only number \u2014 the answer to the problem. Please do not use the",
    "note": "The subarray a[ l. . r] is an array that consists of elements al, al + 1, . . . , ar. In the first sample there are 9 possible pairs that satisfy the condition: [ 1, 1] and [ 2, 2] , [ 1, 1] and [ 2, 3] , [ 1, 1] and [ 2, 4] , [ 1, 1] and [ 3, 3] , [ 1, 1] and [ 3, 4] , [ 1, 1] and [ 4, 4] , [ 1, 2] and [ 3, 3] , [ 2, 2] and [ 3, 3] , [ 3, 3] and [ 4, 4] . In the second sample there is only one pair of segments \u2014 [ 1; 1] and [ 2; 2] and it satisfies the condition.",
    "topics": [
      "combinatorics",
      "data structures",
      "implementation"
    ],
    "id": "145D"
  },
  {
    "title": "Competition",
    "url": "https://codeforces.com/problemset/problem/144/E",
    "history": "The secondary diagonal of a square matrix is a diagonal going from the top right to the bottom left corner. Let' s define an n- degree staircase as a square matrix n \u00d7 n containing no squares above the secondary diagonal ( the picture below shows a 5- degree staircase) . The squares of the n- degree staircase contain m sportsmen. A sportsman needs one second to move to a side- neighboring square of the staircase. Before the beginning of the competition each sportsman must choose one of the shortest ways to the secondary diagonal. After the starting whistle the competition begins and all sportsmen start moving along the chosen paths. When a sportsman reaches a cell of the secondary diagonal, he stops and moves no more. The competition ends when all sportsmen reach the secondary diagonal. The competition is considered successful if during it no two sportsmen were present in the same square simultaneously. Any square belonging to the secondary diagonal also cannot contain more than one sportsman. If a sportsman at the given moment of time leaves a square and another sportsman comes to it, then they are not considered to occupy the same square simultaneously. Note that other extreme cases ( for example, two sportsmen moving towards each other) are impossible as the chosen ways are the shortest ones. You are given positions of m sportsmen on the staircase. Your task is to choose among them the maximum number of sportsmen for who the competition can be successful, that is, so that there existed such choice of shortest ways for the sportsmen at which no two sportsmen find themselves in the same square simultaneously. All other sportsmen that are not chosen will be removed from the staircase before the competition starts.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 105) . Then m lines contain coordinates of sportsmen on the staircase as pairs of integers ri, ci ( 1 \u2264 ri, ci \u2264 n, n - ci < ri) , where ri is the number of the staircase row, ci is the number of the staircase column ( to understand the principle of numbering rows and columns see the explanatory pictures) . No two sportsmen stand on the same square of the staircase.",
    "output": "In the first line print the number of the chosen sportsmen. In the second line print the numbers of chosen sportsmen in any order, separating the numbers with spaces. If there are several answers, you are permitted to print any of them. The sportsmen are numbered starting from one in the order in which they are given in the input data.",
    "note": "A note to the first sample. The picture shows a three- degree staircase. The arrows show the shortest paths that the sportsmen choose.",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "144E"
  },
  {
    "title": "Missile Silos",
    "url": "https://codeforces.com/problemset/problem/144/D",
    "history": "A country called Berland consists of n cities, numbered with integer numbers from 1 to n. Some of them are connected by bidirectional roads. Each road has some length. There is a path from each city to any other one by these roads. According to some Super Duper Documents, Berland is protected by the Super Duper Missiles. The exact position of the Super Duper Secret Missile Silos is kept secret but Bob managed to get hold of the information. That information says that all silos are located exactly at a distance l from the capital. The capital is located in the city with number s. The documents give the formal definition: the Super Duper Secret Missile Silo is located at some place ( which is either city or a point on a road) if and only if the shortest distance from this place to the capital along the roads of the country equals exactly l. Bob wants to know how many missile silos are located in Berland to sell the information then to enemy spies. Help Bob.",
    "input": "The first line contains three integers n, m and s ( 2 \u2264 n \u2264 105, , 1 \u2264 s \u2264 n) \u2014 the number of cities, the number of roads in the country and the number of the capital, correspondingly. Capital is the city no. s. Then m lines contain the descriptions of roads. Each of them is described by three integers vi, ui, wi ( 1 \u2264 vi, ui \u2264 n, vi = \u0338 ui, 1 \u2264 wi \u2264 1000) , where vi, ui are numbers of the cities connected by this road and wi is its length. The last input line contains integer l ( 0 \u2264 l \u2264 109) \u2014 the distance from the capital to the missile silos. It is guaranteed that: between any two cities no more than one road exists; each road connects two different cities; from each city there is at least one way to any other city by the roads.",
    "output": "Print the single number \u2014 the number of Super Duper Secret Missile Silos that are located in Berland.",
    "note": "In the first sample the silos are located in cities 3 and 4 and on road ( 1, 3) at a distance 2 from city 1 ( correspondingly, at a distance 1 from city 3) . In the second sample one missile silo is located right in the middle of the road ( 1, 2) . Two more silos are on the road ( 4, 5) at a distance 3 from city 4 in the direction to city 5 and at a distance 3 from city 5 to city 4.",
    "topics": [
      "data structures",
      "dfs and similar",
      "graphs",
      "shortest paths"
    ],
    "id": "144D"
  },
  {
    "title": "New Year Snowmen",
    "url": "https://codeforces.com/problemset/problem/140/C",
    "history": "As meticulous Gerald sets the table and caring Alexander sends the postcards, Sergey makes snowmen. Each showman should consist of three snowballs: a big one, a medium one and a small one. Sergey' s twins help him: they' ve already made n snowballs with radii equal to r1, r2, . . . , rn. To make a snowman, one needs any three snowballs whose radii are pairwise different. For example, the balls with radii 1, 2 and 3 can be used to make a snowman but 2, 2, 3 or 2, 2, 2 cannot. Help Sergey and his twins to determine what maximum number of snowmen they can make from those snowballs.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 105) \u2014 the number of snowballs. The next line contains n integers \u2014 the balls' radii r1, r2, . . . , rn ( 1 \u2264 ri \u2264 109) . The balls' radii can coincide.",
    "output": "Print on the first line a single number k \u2014 the maximum number of the snowmen. Next k lines should contain the snowmen' s descriptions. The description of each snowman should consist of three space- separated numbers \u2014 the big ball' s radius, the medium ball' s radius and the small ball' s radius. It is allowed to print the snowmen in any order. If there are several solutions, print any of them.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "greedy"
    ],
    "id": "140C"
  },
  {
    "title": "Mushroom Gnomes - 2",
    "url": "https://codeforces.com/problemset/problem/138/C",
    "history": "One day Natalia was walking in the woods when she met a little mushroom gnome. The gnome told her the following story: Everybody knows that the mushroom gnomes' power lies in the magic mushrooms that grow in the native woods of the gnomes. There are n trees and m magic mushrooms in the woods: the i- th tree grows at a point on a straight line with coordinates ai and has the height of hi, the j- th mushroom grows at the point with coordinates bj and has magical powers zj. But one day wild mushroommunchers, the sworn enemies of mushroom gnomes unleashed a terrible storm on their home forest. As a result, some of the trees began to fall and crush the magic mushrooms. The supreme oracle of mushroom gnomes calculated in advance the probability for each tree that it will fall to the left, to the right or will stand on. If the tree with the coordinate x and height h falls to the left, then all the mushrooms that belong to the right- open interval [ x - h, x) , are destroyed. If a tree falls to the right, then the mushrooms that belong to the left- open interval ( x, x + h] are destroyed. Only those mushrooms that are not hit by a single tree survive. Knowing that all the trees fall independently of each other ( i. e. , all the events are mutually independent, and besides, the trees do not interfere with other trees falling in an arbitrary direction) , the supreme oracle was also able to quickly calculate what would be the expectation of the total power of the mushrooms which survived after the storm. His calculations ultimately saved the mushroom gnomes from imminent death. Natalia, as a good Olympiad programmer, got interested in this story, and she decided to come up with a way to quickly calculate the expectation of the sum of the surviving mushrooms' power.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 105, 1 \u2264 m \u2264 104) \u2014 the number of trees and mushrooms, respectively. Each of the next n lines contain four integers \u2014 ai, hi, li, ri ( | ai| \u2264 109, 1 \u2264 hi \u2264 109, 0 \u2264 li, ri, li + ri \u2264 100) which represent the coordinate of the i- th tree, its height, the percentage of the probabilities that the tree falls to the left and to the right, respectively ( the remaining percentage is the probability that the tree will stand on) . Each of next m lines contain two integers bj, zj ( | bj| \u2264 109, 1 \u2264 zj \u2264 103) which represent the coordinate and the magical power of the j- th mushroom, respectively. An arbitrary number of trees and mushrooms can grow in one point.",
    "output": "Print a real number \u2014 the expectation of the total magical power of the surviving mushrooms. The result is accepted with relative or absolute accuracy 10 - 4.",
    "note": "It is believed that the mushroom with the coordinate x belongs to the right- open interval [ l, r) if and only if l \u2264 x < r. Similarly, the mushroom with the coordinate x belongs to the left- open interval ( l, r] if and only if l < x \u2264 r. In the first test the mushroom survives with the probability of 50",
    "topics": [
      "binary search",
      "data structures",
      "probabilities",
      "sortings"
    ],
    "id": "138C"
  },
  {
    "title": "Last Chance",
    "url": "https://codeforces.com/problemset/problem/137/E",
    "history": "Having read half of the book called \" Storm and Calm\" on the IT lesson, Innocentius was absolutely determined to finish the book on the maths lessons. All was fine until the math teacher Ms. Watkins saw Innocentius reading fiction books instead of solving equations of the fifth degree. As during the last maths class Innocentius suggested the algorithm of solving equations of the fifth degree in the general case, Ms. Watkins had no other choice but to give him a new task. The teacher asked to write consecutively ( without spaces) all words from the \" Storm and Calm\" in one long string s. She thought that a string is good if the number of vowels in the string is no more than twice more than the number of consonants. That is, the string with v vowels and c consonants is good if and only if v \u2264 2c. The task Innocentius had to solve turned out to be rather simple: he should find the number of the longest good substrings of the string s.",
    "input": "The only input line contains a non- empty string s consisting of no more than 2\u00b7105 uppercase and lowercase Latin letters. We shall regard letters \" a\" , \" e\" , \" i\" , \" o\" , \" u\" and their uppercase variants as vowels.",
    "output": "Print on a single line two numbers without a space: the maximum length of a good substring and the number of good substrings with this length. If no good substring exists, print \" No solution\" without the quotes. Two substrings are considered different if their positions of occurrence are different. So if some string occurs more than once, then it should be counted more than once.",
    "note": "In the first sample there is only one longest good substring: \" Abo\" itself. The other good substrings are \" b\" , \" Ab\" , \" bo\" , but these substrings have shorter length. In the second sample there is only one longest good substring: \" EIS\" . The other good substrings are: \" S\" , \" IS\" .",
    "topics": [
      "data structures",
      "implementation",
      "strings"
    ],
    "id": "137E"
  },
  {
    "title": "Lucky Array",
    "url": "https://codeforces.com/problemset/problem/121/E",
    "history": "Petya loves lucky numbers. Everybody knows that lucky numbers are positive integers whose decimal representation contains only the lucky digits 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not. Petya has an array consisting of n numbers. He wants to perform m operations of two types: add l r d \u2014 add an integer d to all elements whose indexes belong to the interval from l to r, inclusive ( 1 \u2264 l \u2264 r \u2264 n, 1 \u2264 d \u2264 104) ; count l r \u2014 find and print on the screen how many lucky numbers there are among elements with indexes that belong to the interval from l to r inclusive ( 1 \u2264 l \u2264 r \u2264 n) . Each lucky number should be counted as many times as it appears in the interval. Petya has a list of all operations. The operations are such that after all additions the array won' t have numbers that would exceed 104. Help Petya write a program that would perform these operations.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 105) \u2014 the number of numbers in the array and the number of operations correspondingly. The second line contains n positive integers, none of which exceeds 104 \u2014 those are the array numbers. Next m lines contain operations, one per line. They correspond to the description given in the statement. It is guaranteed that after all operations are fulfilled each number in the array will not exceed 104.",
    "output": "For each operation of the second type print the single number on the single line \u2014 the number of lucky numbers in the corresponding interval.",
    "note": "In the first sample after the first addition the array will look in the following manner: 4 5 6After the second addition: 4 8 9The second sample after the first addition: 7 7 7 7After the second addition: 7 47 47 7",
    "topics": [
      "data structures"
    ],
    "id": "121E"
  },
  {
    "title": "Tree or not Tree",
    "url": "https://codeforces.com/problemset/problem/117/E",
    "history": "You are given an undirected connected graph G consisting of n vertexes and n edges. G contains no self- loops or multiple edges. Let each edge has two states: on and off. Initially all edges are switched off. You are also given m queries represented as ( v, u) \u2014 change the state of all edges on the shortest path from vertex v to vertex u in graph G. If there are several such paths, the lexicographically minimal one is chosen. More formally, let us consider all shortest paths from vertex v to vertex u as the sequences of vertexes v, v1, v2, . . . , u. Among such sequences we choose the lexicographically minimal one. After each query you should tell how many connected components has the graph whose vertexes coincide with the vertexes of graph G and edges coincide with the switched on edges of graph G.",
    "input": "The first line contains two integers n and m ( 3 \u2264 n \u2264 105, 1 \u2264 m \u2264 105) . Then n lines describe the graph edges as a b ( 1 \u2264 a, b \u2264 n) . Next m lines contain the queries as v u ( 1 \u2264 v, u \u2264 n) . It is guaranteed that the graph is connected, does not have any self- loops or multiple edges.",
    "output": "Print m lines, each containing one integer \u2014 the query results.",
    "note": "Let' s consider the first sample. We' ll highlight the switched on edges blue on the image. The graph before applying any operations. No graph edges are switched on, that' s why there initially are 5 connected components. The graph after query v = 5, u = 4. We can see that the graph has three components if we only consider the switched on edges. The graph after query v = 1, u = 5. We can see that the graph has three components if we only consider the switched on edges. Lexicographical comparison of two sequences of equal length of k numbers should be done as follows. Sequence x is lexicographically less than sequence y if exists such i ( 1 \u2264 i \u2264 k) , so that xi < yi, and for any j ( 1 \u2264 j < i) xj = yj.",
    "topics": [
      "data structures",
      "divide and conquer",
      "implementation",
      "trees"
    ],
    "id": "117E"
  },
  {
    "title": "Linear Kingdom Races",
    "url": "https://codeforces.com/problemset/problem/115/E",
    "history": "You are a car race organizer and would like to arrange some races in Linear Kingdom. Linear Kingdom has n consecutive roads spanning from left to right. The roads are numbered from 1 to n from left to right, thus the roads follow in the order of their numbers' increasing. There will be several races that may be held on these roads. Each race will use a consecutive subset of these roads. Also, each race will pay some amount of money to you if this race is held. No races overlap in time, so some roads can be used in several races. Unfortunately, some of the roads are in a bad condition and they need repair. Each road has repair costs associated with it, you are required to pay this cost to repair the road. A race can only take place if all the roads used in the race are renovated. Your task is to repair such roads ( possibly all or none) that will maximize your profit. Your profit is defined as the total money you get from the races that are held minus the total money you spent to repair the roads. Note that you may decide not to repair any road and gain zero profit. Print the maximum profit you can gain.",
    "input": "The first line contains two single- space separated integers, n and m ( 1 \u2264 n, m \u2264 2\u00b7105) , denoting the number of roads and the number of races, respectively. Then n lines follow, each line will contain a single non- negative integer not exceeding 109 denoting the cost to repair a road. The costs are given in order from road 1 to road n. Finally, m lines follow. Each line is single- space- separated triplets of integers. Each triplet will be given as lb, ub, and p ( 1 \u2264 lb \u2264 ub \u2264 n, 1 \u2264 p \u2264 109) , which means that the race these three integers describe will use all the roads from lb to ub, inclusive, and if it' s held you get p.",
    "output": "Print a single integer denoting the maximum possible profit you can gain. Please, do not use the",
    "note": "In the first sample the optimal solution is to repair roads 1, 2, 3, and 7. Three races will take place which nets you 15. The road repair costs 11, hence your profit is 4.",
    "topics": [
      "data structures",
      "dp"
    ],
    "id": "115E"
  },
  {
    "title": "Petr#",
    "url": "https://codeforces.com/problemset/problem/113/B",
    "history": "Long ago, when Petya was a schoolboy, he was very much interested in the Petr# language grammar. During one lesson Petya got interested in the following question: how many different continuous substrings starting with the sbegin and ending with the send ( it is possible sbegin = send) , the given string t has. Substrings are different if and only if their contents aren' t equal, their positions of occurence don' t matter. Petya wasn' t quite good at math, that' s why he couldn' t count this number. Help him!",
    "input": "The input file consists of three lines. The first line contains string t. The second and the third lines contain the sbegin and send identificators, correspondingly. All three lines are non- empty strings consisting of lowercase Latin letters. The length of each string doesn' t exceed 2000 characters.",
    "output": "Output the only number \u2014 the amount of different substrings of t that start with sbegin and end with send.",
    "note": "In the third sample there are four appropriate different substrings. They are: ab, abab, ababab, abababab. In the fourth sample identificators intersect.",
    "topics": [
      "brute force",
      "data structures",
      "hashing",
      "strings"
    ],
    "id": "113B"
  },
  {
    "title": "Petya and Divisors",
    "url": "https://codeforces.com/problemset/problem/111/B",
    "history": "Little Petya loves looking for numbers' divisors. One day Petya came across the following problem: You are given n queries in the form \" xi yi\" . For each query Petya should count how many divisors of number xi divide none of the numbers xi - yi, xi - yi + 1, . . . , xi - 1. Help him.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 105) . Each of the following n lines contain two space- separated integers xi and yi ( 1 \u2264 xi \u2264 105, 0 \u2264 yi \u2264 i - 1, where i is the query' s ordinal number; the numeration starts with 1) . If yi = 0 for the query, then the answer to the query will be the number of divisors of the number xi. In this case you do not need to take the previous numbers x into consideration.",
    "output": "For each query print the answer on a single line: the number of positive integers k such that",
    "note": "Let' s write out the divisors that give answers for the first 5 queries: 1) 1, 2, 4 2) 33) 54) 2, 65) 9, 18",
    "topics": [
      "binary search",
      "data structures",
      "number theory"
    ],
    "id": "111B"
  },
  {
    "title": "Time to Raid Cowavans",
    "url": "https://codeforces.com/problemset/problem/103/D",
    "history": "As you know, the most intelligent beings on the Earth are, of course, cows. This conclusion was reached long ago by the Martian aliens, as well as a number of other intelligent civilizations from outer space. Sometimes cows gather into cowavans. This seems to be seasonal. But at this time the cows become passive and react poorly to external stimuli. A cowavan is a perfect target for the Martian scientific saucer, it' s time for large- scale abductions, or, as the Martians say, raids. Simply put, a cowavan is a set of cows in a row. If we number all cows in the cowavan with positive integers from 1 to n, then we can formalize the popular model of abduction, known as the ( a, b) - Cowavan Raid: first they steal a cow number a, then number a + b, then \u2014 number a + 2\u00b7b, and so on, until the number of an abducted cow exceeds n. During one raid the cows are not renumbered. The aliens would be happy to place all the cows on board of their hospitable ship, but unfortunately, the amount of cargo space is very, very limited. The researchers, knowing the mass of each cow in the cowavan, made p scenarios of the ( a, b) - raid. Now they want to identify the following thing for each scenario individually: what total mass of pure beef will get on board of the ship. All the scenarios are independent, in the process of performing the calculations the cows are not being stolen.",
    "input": "The first line contains the only positive integer n ( 1 \u2264 n \u2264 3\u00b7105) \u2014 the number of cows in the cowavan. The second number contains n positive integer wi, separated by spaces, where the i- th number describes the mass of the i- th cow in the cowavan ( 1 \u2264 wi \u2264 109) . The third line contains the only positive integer p \u2014 the number of scenarios of ( a, b) - raids ( 1 \u2264 p \u2264 3\u00b7105) . Each following line contains integer parameters a and b of the corresponding scenario ( 1 \u2264 a, b \u2264 n) .",
    "output": "Print for each scenario of the ( a, b) - raid the total mass of cows, that can be stolen using only this scenario. Please, do not use the",
    "note": "",
    "topics": [
      "brute force",
      "data structures",
      "sortings"
    ],
    "id": "103D"
  },
  {
    "title": "Buses",
    "url": "https://codeforces.com/problemset/problem/101/B",
    "history": "Little boy Gerald studies at school which is quite far from his house. That' s why he has to go there by bus every day. The way from home to school is represented by a segment of a straight line; the segment contains exactly n + 1 bus stops. All of them are numbered with integers from 0 to n in the order in which they follow from Gerald' s home. The bus stop by Gerald' s home has number 0 and the bus stop by the school has number n. There are m buses running between the house and the school: the i- th bus goes from stop si to ti ( si < ti) , visiting all the intermediate stops in the order in which they follow on the segment. Besides, Gerald' s no idiot and he wouldn' t get off the bus until it is still possible to ride on it closer to the school ( obviously, getting off would be completely pointless) . In other words, Gerald can get on the i- th bus on any stop numbered from si to ti - 1 inclusive, but he can get off the i- th bus only on the bus stop ti. Gerald can' t walk between the bus stops and he also can' t move in the direction from the school to the house. Gerald wants to know how many ways he has to get from home to school. Tell him this number. Two ways are considered different if Gerald crosses some segment between the stops on different buses. As the number of ways can be too much, find the remainder of a division of this number by 1000000007 ( 109 + 7) .",
    "input": "The first line contains two space- separated integers: n and m ( 1 \u2264 n \u2264 109, 0 \u2264 m \u2264 105) . Then follow m lines each containing two integers si, ti. They are the numbers of starting stops and end stops of the buses ( 0 \u2264 si < ti \u2264 n) .",
    "output": "Print the only number \u2014 the number of ways to get to the school modulo 1000000007 ( 109 + 7) .",
    "note": "The first test has the only variant to get to school: first on bus number one to the bus stop number one; then on bus number two to the bus stop number two. In the second test no bus goes to the third bus stop, where the school is positioned. Thus, the correct answer is 0. In the third test Gerald can either get or not on any of the first four buses to get closer to the school. Thus, the correct answer is 24 = 16.",
    "topics": [
      "binary search",
      "data structures",
      "dp"
    ],
    "id": "101B"
  },
  {
    "title": "Name the album",
    "url": "https://codeforces.com/problemset/problem/100/G",
    "history": "The famous singer, Aryo, is going to publish a new album of his great work! Unfortunately these days, there are many albums, Aryo wants to choose a new name for his album, a name that has not been used or at least has not been used recently. He has a list of all used album names together with the year the albums were published. He also has a list of suitable names for his album. If he finds a suitable name which has not been used before, he' ll use it. Otherwise he will use the name which was used as long ago as possible. If two such names are found ( that haven' t been used or were used at the same year) , he uses the name that is alphabetically latest. Help him name his album.",
    "input": "The first line contains a single integer n ( 0 \u2264 n \u2264 105) , the number of used names. The following n lines each contain a string ( the album name) and an integer ( the year album was published) . Album names are made of lowercase Latin letters and contain at most 14 letters. The year is in range [ 1900, 2011] . The following line contains a single integer m ( 1 \u2264 m \u2264 104) , the number of suitable album names. The following m lines each contain a string \u2014 a suitable name. It contains at most 14 lowercase Latin letters. All album names and suitable names are non- empty.",
    "output": "Write a single string. The name of the new album.",
    "note": "",
    "topics": [
      "*special",
      "data structures",
      "implementation"
    ],
    "id": "100G"
  },
  {
    "title": "Igloo Skyscraper",
    "url": "https://codeforces.com/problemset/problem/91/E",
    "history": "Today the North Pole hosts an Olympiad in a sport called. . . toy igloo skyscrapers' building! There are n walruses taking part in the contest. Each walrus is given a unique number from 1 to n. After start each walrus begins to build his own igloo skyscraper. Initially, at the moment of time equal to 0, the height of the skyscraper i- th walrus is equal to ai. Each minute the i- th walrus finishes building bi floors. The journalists that are reporting from the spot where the Olympiad is taking place, make q queries to the organizers. Each query is characterized by a group of three numbers li, ri, ti. The organizers respond to each query with a number x, such that: 1. Number x lies on the interval from li to ri inclusive ( li \u2264 x \u2264 ri) . 2. The skyscraper of the walrus number x possesses the maximum height among the skyscrapers of all walruses from the interval [ li, ri] at the moment of time ti. For each journalists' query print the number of the walrus x that meets the above- given criteria. If there are several possible answers, print any of them.",
    "input": "The first line contains numbers n and q ( 1 \u2264 n, q \u2264 105) . Next n lines contain pairs of numbers ai, bi ( 1 \u2264 ai, bi \u2264 109) . Then follow q queries i the following format li, ri, ti, one per each line ( 1 \u2264 li \u2264 ri \u2264 n, 0 \u2264 ti \u2264 106) . All input numbers are integers.",
    "output": "For each journalists' query print the number of the walrus x that meets the criteria, given in the statement. Print one number per line.",
    "note": "",
    "topics": [
      "data structures",
      "geometry"
    ],
    "id": "91E"
  },
  {
    "title": "Queue",
    "url": "https://codeforces.com/problemset/problem/91/B",
    "history": "There are n walruses standing in a queue in an airport. They are numbered starting from the queue' s tail: the 1- st walrus stands at the end of the queue and the n- th walrus stands at the beginning of the queue. The i- th walrus has the age equal to ai. The i- th walrus becomes displeased if there' s a younger walrus standing in front of him, that is, if exists such j ( i < j) , that ai > aj. The displeasure of the i- th walrus is equal to the number of walruses between him and the furthest walrus ahead of him, which is younger than the i- th one. That is, the further that young walrus stands from him, the stronger the displeasure is. The airport manager asked you to count for each of n walruses in the queue his displeasure.",
    "input": "The first line contains an integer n ( 2 \u2264 n \u2264 105) \u2014 the number of walruses in the queue. The second line contains integers ai ( 1 \u2264 ai \u2264 109) . Note that some walruses can have the same age but for the displeasure to emerge the walrus that is closer to the head of the queue needs to be strictly younger than the other one.",
    "output": "Print n numbers: if the i- th walrus is pleased with everything, print \" - 1\" ( without the quotes) . Otherwise, print the i- th walrus' s displeasure: the number of other walruses that stand between him and the furthest from him younger walrus.",
    "note": "",
    "topics": [
      "binary search",
      "data structures"
    ],
    "id": "91B"
  },
  {
    "title": "Chip Play",
    "url": "https://codeforces.com/problemset/problem/89/C",
    "history": "Let' s consider the following game. We have a rectangular field n \u00d7 m in size. Some squares of the field contain chips. Each chip has an arrow painted on it. Thus, each chip on the field points in one of the following directions: up, down, left or right. The player may choose a chip and make a move with it. The move is the following sequence of actions. The chosen chip is marked as the current one. After that the player checks whether there are more chips in the same row ( or in the same column) with the current one that are pointed by the arrow on the current chip. If there is at least one chip then the closest of them is marked as the new current chip and the former current chip is removed from the field. After that the check is repeated. This process can be repeated several times. If a new chip is not found, then the current chip is removed from the field and the player' s move ends. By the end of a move the player receives several points equal to the number of the deleted chips. By the given initial chip arrangement determine the maximum number of points that a player can receive during one move. Also determine the number of such moves.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m, n \u00d7 m \u2264 5000) . Then follow n lines containing m characters each \u2014 that is the game field description. \" . \" means that this square is empty. \" L\" , \" R\" , \" U\" , \" D\" mean that this square contains a chip and an arrow on it says left, right, up or down correspondingly. It is guaranteed that a field has at least one chip.",
    "output": "Print two numbers \u2014 the maximal number of points a player can get after a move and the number of moves that allow receiving this maximum number of points.",
    "note": "In the first sample the maximum number of points is earned by the chip in the position ( 3, 3) . You can see its progress at the following picture: All other chips earn fewer points.",
    "topics": [
      "brute force",
      "data structures",
      "implementation"
    ],
    "id": "89C"
  },
  {
    "title": "Powerful array",
    "url": "https://codeforces.com/problemset/problem/86/D",
    "history": "An array of positive integers a1, a2, . . . , an is given. Let us consider its arbitrary subarray al, al + 1. . . , ar, where 1 \u2264 l \u2264 r \u2264 n. For every positive integer s denote by Ks the number of occurrences of s into the subarray. We call the power of the subarray the sum of products Ks\u00b7Ks\u00b7s for every positive integer s. The sum contains only finite number of nonzero summands as the number of different values in the array is indeed finite. You should calculate the power of t given subarrays.",
    "input": "First line contains two integers n and t ( 1 \u2264 n, t \u2264 200000) \u2014 the array length and the number of queries correspondingly. Second line contains n positive integers ai ( 1 \u2264 ai \u2264 106) \u2014 the elements of the array. Next t lines contain two positive integers l, r ( 1 \u2264 l \u2264 r \u2264 n) each \u2014 the indices of the left and the right ends of the corresponding subarray.",
    "output": "Output t lines, the i- th line of the output should contain single positive integer \u2014 the power of the i- th query subarray. Please, do not use",
    "note": "Consider the following array ( see the second sample) and its [ 2, 7] subarray ( elements of the subarray are colored) : Then K1 = 3, K2 = 2, K3 = 1, so the power is equal to 32\u00b71 + 22\u00b72 + 12\u00b73 = 20.",
    "topics": [
      "data structures",
      "implementation",
      "math",
      "two pointers"
    ],
    "id": "86D"
  },
  {
    "title": "Sum of Medians",
    "url": "https://codeforces.com/problemset/problem/85/D",
    "history": "In one well- known algorithm of finding the k- th order statistics we should divide all elements into groups of five consecutive elements and find the median of each five. A median is called the middle element of a sorted array ( it' s the third largest element for a group of five) . To increase the algorithm' s performance speed on a modern video card, you should be able to find a sum of medians in each five of the array. A sum of medians of a sorted k- element set S = a1, a2, . . . , ak, where a1 < a2 < a3 < . . . < ak, will be understood by as The operator stands for taking the remainder, that is stands for the remainder of dividing x by y. To organize exercise testing quickly calculating the sum of medians for a changing set was needed.",
    "input": "The first line contains number n ( 1 \u2264 n \u2264 105) , the number of operations performed. Then each of n lines contains the description of one of the three operations: add x \u2014 add the element x to the set; del x \u2014 delete the element x from the set; sum \u2014 find the sum of medians of the set. For any add x operation it is true that the element x is not included in the set directly before the operation. For any del x operation it is true that the element x is included in the set directly before the operation. All the numbers in the input are positive integers, not exceeding 109.",
    "output": "For each operation sum print on the single line the sum of medians of the current set. If the set is empty, print 0. Please, do not use the",
    "note": "",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "implementation"
    ],
    "id": "85D"
  },
  {
    "title": "Embassy Queue",
    "url": "https://codeforces.com/problemset/problem/85/B",
    "history": "In an embassy of a well- known kingdom an electronic queue is organised. Every person who comes to the embassy, needs to make the following three actions: show the ID, pay money to the cashier and be fingerprinted. Besides, the actions should be performed in the given order. For each action several separate windows are singled out: k1 separate windows for the first action ( the first type windows) , k2 windows for the second one ( the second type windows) , and k3 for the third one ( the third type windows) . The service time for one person in any of the first type window equals to t1. Similarly, it takes t2 time to serve a person in any of the second type windows. And it takes t3 to serve one person in any of the third type windows. Thus, the service time depends only on the window type and is independent from the person who is applying for visa. At some moment n people come to the embassy, the i- th person comes at the moment of time ci. The person is registered under some number. After that he sits in the hall and waits for his number to be shown on a special board. Besides the person' s number the board shows the number of the window where one should go and the person goes there immediately. Let' s consider that the time needed to approach the window is negligible. The table can show information for no more than one person at a time. The electronic queue works so as to immediately start working with the person who has approached the window, as there are no other people in front of the window. The Client Service Quality inspectors noticed that several people spend too much time in the embassy ( this is particularly tiresome as the embassy has no mobile phone reception and 3G) . It was decided to organise the system so that the largest time a person spends in the embassy were minimum. Help the inspectors organise the queue. Consider that all actions except for being served in at the window, happen instantly.",
    "input": "The first line contains three space- separated integers k1, k2, k3 ( 1 \u2264 ki \u2264 109) , they are the number of windows of the first, second and third type correspondingly. The second line contains three space- separated integers t1, t2, t3 ( 1 \u2264 ti \u2264 105) , they are the periods of time needed to serve one person in the window of the first, second and third type correspondingly. The third line contains an integer n ( 1 \u2264 n \u2264 105) , it is the number of people. The fourth line contains n space- separated integers ci ( 1 \u2264 ci \u2264 109) in the non- decreasing order; ci is the time when the person number i comes to the embassy.",
    "output": "Print the single number, the maximum time a person will spend in the embassy if the queue is organized optimally. Please, do not use the",
    "note": "In the first test 5 people come simultaneously at the moment of time equal to 1. There is one window of every type, it takes 1 unit of time to be served at each window. That' s why the maximal time a person spends in the embassy is the time needed to be served at the windows ( 3 units of time) plus the time the last person who comes to the first window waits ( 4 units of time) . Windows in the second test work like this: The first window of the first type: [ 1, 6) \u2014 the first person, [ 6, 11) \u2014 third person, [ 11, 16) \u2014 fifth personThe second window of the first type: [ 2, 7) \u2014 the second person, [ 7, 12) \u2014 the fourth personThe only second type window: [ 6, 7) \u2014 first, [ 7, 8) \u2014 second, [ 11, 12) \u2014 third, [ 12, 13) \u2014 fourth, [ 16, 17) \u2014 fifthThe only third type window: [ 7, 8) \u2014 first, [ 8, 9) \u2014 second, [ 12, 13) \u2014 third, [ 13, 14) \u2014 fourth, [ 17, 18) \u2014 fifthWe can see that it takes most time to serve the fifth person.",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "85B"
  },
  {
    "title": "General Mobilization",
    "url": "https://codeforces.com/problemset/problem/82/C",
    "history": "The Berland Kingdom is a set of n cities connected with each other with n - 1 railways. Each road connects exactly two different cities. The capital is located in city 1. For each city there is a way to get from there to the capital by rail. In the i- th city there is a soldier division number i, each division is characterized by a number of ai. It represents the priority, the smaller the number, the higher the priority of this division. All values of ai are different. One day the Berland King Berl Great declared a general mobilization, and for that, each division should arrive in the capital. Every day from every city except the capital a train departs. So there are exactly n - 1 departing trains each day. Each train moves toward the capital and finishes movement on the opposite endpoint of the railway on the next day. It has some finite capacity of cj, expressed in the maximum number of divisions, which this train can transport in one go. Each train moves in the direction of reducing the distance to the capital. So each train passes exactly one railway moving from a city to the neighboring ( where it stops) toward the capital. In the first place among the divisions that are in the city, division with the smallest number of ai get on the train, then with the next smallest and so on, until either the train is full or all the divisions are be loaded. So it is possible for a division to stay in a city for a several days. The duration of train' s progress from one city to another is always equal to 1 day. All divisions start moving at the same time and end up in the capital, from where they don' t go anywhere else any more. Each division moves along a simple path from its city to the capital, regardless of how much time this journey will take. Your goal is to find for each division, in how many days it will arrive to the capital of Berland. The countdown begins from day 0.",
    "input": "The first line contains the single integer n ( 1 \u2264 n \u2264 5000) . It is the number of cities in Berland. The second line contains n space- separated integers a1, a2, . . . , an, where ai represents the priority of the division, located in the city number i. All numbers a1, a2, . . . , an are different ( 1 \u2264 ai \u2264 109) . Then n - 1 lines contain the descriptions of the railway roads. Each description consists of three integers vj, uj, cj, where vj, uj are number of cities connected by the j- th rail, and cj stands for the maximum capacity of a train riding on this road ( 1 \u2264 vj, uj \u2264 n, vj = \u0338 uj, 1 \u2264 cj \u2264 n) .",
    "output": "Print sequence t1, t2, . . . , tn, where ti stands for the number of days it takes for the division of city i to arrive to the capital. Separate numbers with spaces.",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "sortings"
    ],
    "id": "82C"
  },
  {
    "title": "Beaver",
    "url": "https://codeforces.com/problemset/problem/79/C",
    "history": "After Fox Ciel got off a bus, she found that the bus she was on was a wrong bus and she lost her way in a strange town. However, she fortunately met her friend Beaver Taro and asked which way to go to her castle. Taro' s response to her was a string s, and she tried to remember the string s correctly. However, Ciel feels n strings b1, b2, . . . , bn are really boring, and unfortunately she dislikes to remember a string that contains a boring substring. To make the thing worse, what she can remember is only the contiguous substring of s. Determine the longest contiguous substring of s that does not contain any boring string, so that she can remember the longest part of Taro' s response.",
    "input": "In the first line there is a string s. The length of s will be between 1 and 105, inclusive. In the second line there is a single integer n ( 1 \u2264 n \u2264 10) . Next n lines, there is a string bi ( 1 \u2264 i \u2264 n) . Each length of bi will be between 1 and 10, inclusive. Each character of the given strings will be either a English alphabet ( both lowercase and uppercase) or a underscore ( ' _ ' ) or a digit. Assume that these strings are case- sensitive.",
    "output": "Output in the first line two space- separated integers len and pos: the length of the longest contiguous substring of s that does not contain any bi, and the first position of the substring ( 0- indexed) . The position pos must be between 0 and | s| - len inclusive, where | s| is the length of string s. If there are several solutions, output any.",
    "note": "In the first sample, the solution is traight_ alon. In the second sample, the solution is an empty string, so the output can be \u00ab0 0\u00bb, \u00ab0 1\u00bb, \u00ab0 2\u00bb, and so on. In the third sample, the solution is either nagio or oisii.",
    "topics": [
      "data structures",
      "dp",
      "greedy",
      "hashing",
      "strings",
      "two pointers"
    ],
    "id": "79C"
  },
  {
    "title": "Tourist",
    "url": "https://codeforces.com/problemset/problem/76/F",
    "history": "Tourist walks along the X axis. He can choose either of two directions and any speed not exceeding V. He can also stand without moving anywhere. He knows from newspapers that at time t1 in the point with coordinate x1 an interesting event will occur, at time t2 in the point with coordinate x2 \u2014 another one, and so on up to ( xn, tn) . Interesting events are short so we can assume they are immediate. Event i counts visited if at time ti tourist was at point with coordinate xi. Write program tourist that will find maximum number of events tourist if: at the beginning ( when time is equal to 0) tourist appears at point 0, tourist can choose initial point for himself. Yes, you should answer on two similar but different questions.",
    "input": "The first line of input contains single integer number N ( 1 \u2264 N \u2264 100000) \u2014 number of interesting events. The following N lines contain two integers xi and ti \u2014 coordinate and time of the i- th event. The last line of the input contains integer V \u2014 maximum speed of the tourist. All xi will be within range - 2\u00b7108 \u2264 xi \u2264 2\u00b7108, all ti will be between 1 and 2\u00b7106 inclusive. V will be positive and will not exceed 1000. The input may contain events that happen at the same time or in the same place but not in the same place at the same time.",
    "output": "The only line of the output should contain two space- sepatated integers \u2014 maximum number of events tourist can visit in he starts moving from point 0 at time 0, and maximum number of events tourist can visit if he chooses the initial point for himself.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "dp"
    ],
    "id": "76F"
  },
  {
    "title": "Big Maximum Sum",
    "url": "https://codeforces.com/problemset/problem/75/D",
    "history": "Ahmed and Mostafa used to compete together in many programming contests for several years. Their coach Fegla asked them to solve one challenging problem, of course Ahmed was able to solve it but Mostafa couldn' t. This problem is similar to a standard problem but it has a different format and constraints. In the standard problem you are given an array of integers, and you have to find one or more consecutive elements in this array where their sum is the maximum possible sum. But in this problem you are given n small arrays, and you will create one big array from the concatenation of one or more instances of the small arrays ( each small array could occur more than once) . The big array will be given as an array of indexes ( 1- based) of the small arrays, and the concatenation should be done in the same order as in this array. Then you should apply the standard problem mentioned above on the resulting big array. For example let' s suppose that the small arrays are 1, 6, - 2, 3, 3 and - 5, 1. And the indexes in the big array are 2, 3, 1, 3. So the actual values in the big array after formatting it as concatenation of the small arrays will be 3, 3, - 5, 1, 1, 6, - 2, - 5, 1. In this example the maximum sum is 9. Can you help Mostafa solve this problem?",
    "input": "The first line contains two integers n and m, n is the number of the small arrays ( 1 \u2264 n \u2264 50) , and m is the number of indexes in the big array ( 1 \u2264 m \u2264 250000) . Then follow n lines, the i- th line starts with one integer l which is the size of the i- th array ( 1 \u2264 l \u2264 5000) , followed by l integers each one will be greater than or equal - 1000 and less than or equal 1000. The last line contains m integers which are the indexes in the big array, and you should concatenate the small arrays in the same order, and each index will be greater than or equal to 1 and less than or equal to n. The small arrays are numbered from 1 to n in the same order as given in the input. Some of the given small arrays may not be used in big array. Note, that the array is very big. So if you try to build it straightforwardly, you will probably get time or/ and memory limit exceeded.",
    "output": "Print one line containing the maximum sum in the big array after formatting it as described above. You must choose at least one element for the sum, i. e. it cannot be empty. Please, do not use",
    "note": "",
    "topics": [
      "data structures",
      "dp",
      "greedy",
      "implementation",
      "math",
      "trees"
    ],
    "id": "75D"
  },
  {
    "title": "Hanger",
    "url": "https://codeforces.com/problemset/problem/74/D",
    "history": "In one very large and very respectable company there is a cloakroom with a coat hanger. It is represented by n hooks, positioned in a row. The hooks are numbered with positive integers from 1 to n from the left to the right. The company workers have a very complicated work schedule. At the beginning of a work day all the employees are not there and the coat hanger in the cloakroom is empty. At some moments of time the employees arrive and some of them leave. When some employee arrives, he hangs his cloak on one of the available hooks. To be of as little discomfort to his colleagues as possible, the hook where the coat will hang, is chosen like this. First the employee chooses the longest segment among available hooks following in a row. If there are several of such segments, then he chooses the one closest to the right. After that the coat is hung on the hook located in the middle of this segment. If the segment has an even number of hooks, then among two central hooks we choose the one closest to the right. When an employee leaves, he takes his coat. As all the company workers deeply respect each other, no one takes somebody else' s coat. From time to time the director of this respectable company gets bored and he sends his secretary to see how many coats hang on the coat hanger from the i- th to the j- th hook inclusive. And this whim is always to be fulfilled, otherwise the director gets angry and has a mental breakdown. Not to spend too much time traversing from the director' s office to the cloakroom and back again, the secretary asked you to write a program, emulating the company cloakroom' s work.",
    "input": "The first line contains two integers n, q ( 1 \u2264 n \u2264 109, 1 \u2264 q \u2264 105) , which are the number of hooks on the hanger and the number of requests correspondingly. Then follow q lines with requests, sorted according to time. The request of the type \" 0 i j\" ( 1 \u2264 i \u2264 j \u2264 n) \u2014 is the director' s request. The input data has at least one director' s request. In all other cases the request contains a positive integer not exceeding 109 \u2014 an employee identificator. Each odd appearance of the identificator of an employee in the request list is his arrival. Each even one is his leaving. All employees have distinct identificators. When any employee arrives, there is always at least one free hook.",
    "output": "For each director' s request in the input data print a single number on a single line \u2014 the number of coats hanging on the hooks from the i- th one to the j- th one inclusive.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": "74D"
  },
  {
    "title": "Professor's task",
    "url": "https://codeforces.com/problemset/problem/70/D",
    "history": "Once a walrus professor Plato asked his programming students to perform the following practical task. The students had to implement such a data structure that would support a convex hull on some set of points S. The input to the program had q queries of two types: 1. Add a point with coordinates ( x, y) into the set S. Note that in this case the convex hull of S could have changed, and could have remained the same. 2. Say whether a point with coordinates ( x, y) belongs to an area limited by the convex hull, including the border. All the students coped with the task. What about you?",
    "input": "The first line contains an integer q ( 4 \u2264 q \u2264 105) . Then follow q lines in the following way: \" t x y\" , where t is the query type ( 1 or 2) , and ( x, y) are the coordinates of the point ( - 106 \u2264 x, y \u2264 106, x and y are integers) . There is at least one query of type 2. It is guaranteed that the three queries of the first type follow first and the points given in the queries form a non- degenerative triangle. Also all the points added in S are distinct.",
    "output": "For each query of the second type print one string containing \" YES\" , if the point lies inside the convex hull or on its border. Otherwise, print \" NO\" .",
    "note": "",
    "topics": [
      "data structures",
      "geometry"
    ],
    "id": "70D"
  },
  {
    "title": "Lucky Tickets",
    "url": "https://codeforces.com/problemset/problem/70/C",
    "history": "In Walrusland public transport tickets are characterized by two integers: by the number of the series and by the number of the ticket in the series. Let the series number be represented by a and the ticket number \u2014 by b, then a ticket is described by the ordered pair of numbers ( a, b) . The walruses believe that a ticket is lucky if a * b = rev( a) * rev( b) . The function rev( x) reverses a number written in the decimal system, at that the leading zeroes disappear. For example, rev( 12343) = 34321, rev( 1200) = 21. The Public Transport Management Committee wants to release x series, each containing y tickets, so that at least w lucky tickets were released and the total number of released tickets ( x * y) were minimum. The series are numbered from 1 to x inclusive. The tickets in each series are numbered from 1 to y inclusive. The Transport Committee cannot release more than maxx series and more than maxy tickets in one series.",
    "input": "The first line contains three integers maxx, maxy, w ( 1 \u2264 maxx, maxy \u2264 105, 1 \u2264 w \u2264 107) .",
    "output": "Print on a single line two space- separated numbers, the x and the y. If there are several possible variants, print any of them. If such x and y do not exist, print a single number - 1.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "sortings",
      "two pointers"
    ],
    "id": "70C"
  },
  {
    "title": "Subsegments",
    "url": "https://codeforces.com/problemset/problem/69/E",
    "history": "Programmer Sasha has recently begun to study data structures. His coach Stas told him to solve the problem of finding a minimum on the segment of the array in , which Sasha coped with. For Sasha not to think that he had learned all, Stas gave him a new task. For each segment of the fixed length Sasha must find the maximum element of those that occur on the given segment exactly once. Help Sasha solve this problem.",
    "input": "The first line contains two positive integers n and k ( 1 \u2264 n \u2264 105, 1 \u2264 k \u2264 n) \u2014 the number of array elements and the length of the segment. Then follow n lines: the i- th one contains a single number ai ( - 109 \u2264 ai \u2264 109) .",
    "output": "Print n\u2013k + 1 numbers, one per line: on the i- th line print of the maximum number of those numbers from the subarray ai ai + 1 . . . ai + k - 1 that occur in this subarray exactly 1 time. If there are no such numbers in this subarray, print \" Nothing\" .",
    "note": "",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "69E"
  },
  {
    "title": "Half-decay tree",
    "url": "https://codeforces.com/problemset/problem/68/D",
    "history": "Recently Petya has become keen on physics. Anna V. , his teacher noticed Petya' s interest and gave him a fascinating physical puzzle \u2014 a half- decay tree. A half- decay tree is a complete binary tree with the height h. The height of a tree is the length of the path ( in edges) from the root to a leaf in the tree. While studying the tree Petya can add electrons to vertices or induce random decay with synchrophasotron. Random decay is a process during which the edges of some path from the root to the random leaf of the tree are deleted. All the leaves are equiprobable. As the half- decay tree is the school property, Petya will return back the deleted edges into the tree after each decay. After being desintegrated, the tree decomposes into connected components. Charge of each component is the total quantity of electrons placed in vertices of the component. Potential of desintegerated tree is the maximum from the charges of its connected components. Each time before inducing random decay Petya is curious about the mathematical expectation of potential of the tree after being desintegrated.",
    "input": "First line will contain two integers h and q ( 1 \u2264 h \u2264 30, 1 \u2264 q \u2264 105) . Next q lines will contain a query of one of two types: add v ePetya adds e electrons to vertex number v ( 1 \u2264 v \u2264 2h + 1 - 1, 0 \u2264 e \u2264 104) . v and e are integers. The vertices of the tree are numbered in the following way: the root is numbered with 1, the children of the vertex with number x are numbered with 2x and 2x + 1. decayPetya induces tree decay.",
    "output": "For each query decay solution you should output the mathematical expectation of potential of the tree after being desintegrated. The absolute or relative error in the answer should not exceed 10 - 4.",
    "note": "",
    "topics": [
      "data structures",
      "divide and conquer",
      "dp",
      "math",
      "probabilities"
    ],
    "id": "68D"
  },
  {
    "title": "Optical Experiment",
    "url": "https://codeforces.com/problemset/problem/67/D",
    "history": "Professor Phunsuk Wangdu has performed some experiments on rays. The setup for n rays is as follows. There is a rectangular box having exactly n holes on the opposite faces. All rays enter from the holes of the first side and exit from the holes of the other side of the box. Exactly one ray can enter or exit from each hole. The holes are in a straight line. Professor Wangdu is showing his experiment to his students. He shows that there are cases, when all the rays are intersected by every other ray. A curious student asked the professor: \" Sir, there are some groups of rays such that all rays in that group intersect every other ray in that group. Can we determine the number of rays in the largest of such groups? \" . Professor Wangdu now is in trouble and knowing your intellect he asks you to help him.",
    "input": "The first line contains n ( 1 \u2264 n \u2264 106) , the number of rays. The second line contains n distinct integers. The i- th integer xi ( 1 \u2264 xi \u2264 n) shows that the xi- th ray enters from the i- th hole. Similarly, third line contains n distinct integers. The i- th integer yi ( 1 \u2264 yi \u2264 n) shows that the yi- th ray exits from the i- th hole. All rays are numbered from 1 to n.",
    "output": "Output contains the only integer which is the number of rays in the largest group of rays all of which intersect each other.",
    "note": "For the first test case, the figure is shown above. The output of the first test case is 3, since the rays number 1, 4 and 3 are the ones which are intersected by each other one i. e. 1 is intersected by 4 and 3, 3 is intersected by 4 and 1, and 4 is intersected by 1 and 3. Hence every ray in this group is intersected by each other one. There does not exist any group containing more than 3 rays satisfying the above- mentioned constraint.",
    "topics": [
      "binary search",
      "data structures",
      "dp"
    ],
    "id": "67D"
  },
  {
    "title": "Petya and Post",
    "url": "https://codeforces.com/problemset/problem/66/E",
    "history": "Little Vasya' s uncle is a postman. The post offices are located on one circular road. Besides, each post office has its own gas station located next to it. Petya' s uncle works as follows: in the morning he should leave the house and go to some post office. In the office he receives a portion of letters and a car. Then he must drive in the given car exactly one round along the circular road and return to the starting post office ( the uncle can drive along the circle in any direction, counterclockwise or clockwise) . Besides, since the car belongs to the city post, it should also be fuelled with gasoline only at the Post Office stations. The total number of stations equals to n. One can fuel the car at the i- th station with no more than ai liters of gasoline. Besides, one can fuel the car no more than once at each station. Also, the distance between the 1- st and the 2- nd station is b1 kilometers, the distance between the 2- nd and the 3- rd one is b2 kilometers, . . . , between the ( n - 1) - th and the n- th ones the distance is bn - 1 kilometers and between the n- th and the 1- st one the distance is bn kilometers. Petya' s uncle' s high- tech car uses only one liter of gasoline per kilometer. It is known that the stations are located so that the sum of all ai is equal to the sum of all bi. The i- th gas station and i- th post office are very close, so the distance between them is 0 kilometers. Thus, it becomes clear that if we start from some post offices, then it is not always possible to drive one round along a circular road. The uncle faces the following problem: to what stations can he go in the morning to be able to ride exactly one circle along the circular road and visit all the post offices that are on it? Petya, who used to attend programming classes, has volunteered to help his uncle, but his knowledge turned out to be not enough, so he asks you to help him write the program that will solve the posed problem.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 105) . The second line contains n integers ai \u2014 amount of gasoline on the i- th station. The third line contains n integers b1, b2, . . . , bn. They are the distances between the 1- st and the 2- nd gas stations, between the 2- nd and the 3- rd ones, . . . , between the n- th and the 1- st ones, respectively. The sum of all bi equals to the sum of all ai and is no more than 109. Each of the numbers ai, bi is no less than 1 and no more than 109.",
    "output": "Print on the first line the number k \u2014 the number of possible post offices, from which the car can drive one circle along a circular road. Print on the second line k numbers in the ascending order \u2014 the numbers of offices, from which the car can start.",
    "note": "",
    "topics": [
      "data structures",
      "dp"
    ],
    "id": "66E"
  },
  {
    "title": "Petya and File System",
    "url": "https://codeforces.com/problemset/problem/66/C",
    "history": "Recently, on a programming lesson little Petya showed how quickly he can create files and folders on the computer. But he got soon fed up with this activity, and he decided to do a much more useful thing. He decided to calculate what folder contains most subfolders ( including nested folders, nested folders of nested folders, and so on) and what folder contains most files ( including the files in the subfolders) . More formally, the subfolders of the folder are all its directly nested folders and the subfolders of these nested folders. The given folder is not considered the subfolder of itself. A file is regarded as lying in a folder, if and only if it either lies directly in this folder, or lies in some subfolder of the folder. For a better understanding of how to count subfolders and files for calculating the answer, see notes and answers to the samples. You are given a few files that Petya has managed to create. The path to each file looks as follows: diskName: 12. \u0307. folderndiskName is single capital letter from the set C, D, E, F, G. folder1, . . . , foldern are folder names. Each folder name is nonempty sequence of lowercase Latin letters and digits from 0 to 9. ( n \u2265 1) fileName is a file name in the form of name. extension, where the name and the extension are nonempty sequences of lowercase Latin letters and digits from 0 to 9. It is also known that there is no file whose path looks like diskName: . That is, each file is stored in some folder, but there are no files directly in the root. Also let us assume that the disk root is not a folder. Help Petya to find the largest number of subfolders, which can be in some folder, and the largest number of files that can be in some folder, counting all its subfolders.",
    "input": "Each line of input data contains the description of one file path. The length of each line does not exceed 100, and overall there are no more than 100 lines. It is guaranteed, that all the paths are correct and meet the above rules. It is also guaranteed, that there are no two completely equal lines. That is, each file is described exactly once. There is at least one line in the input data.",
    "output": "Print two space- separated numbers. The first one is the maximal number of possible subfolders in a folder ( including nested folders, nested folders of nested folders, and so on) . The second one is the maximal number of files in a folder ( including nested files in subfolders) . Note that the disks are not regarded as folders.",
    "note": "In the first sample we have one folder on the \" C\" disk. It has no subfolders, which is why the first number in the answer is 0. But this folder contains one file, so the second number of the answer is 1. In the second sample we have several different folders. Consider the \" folder1\" folder on the \" C\" disk. This folder directly contains one folder, \" folder2\" . The \" folder2\" folder contains two more folders \u2014 \" folder3\" and \" folder4\" . Thus, the \" folder1\" folder on the \" C\" drive has exactly 3 subfolders. Also this folder contains two files, even though they do not lie directly in the folder, but they are located in subfolders of \" folder1\" . In the third example we see that the names of some folders and some subfolders are identical. Consider the \" file\" folder, which lies directly on the \" C\" disk. That folder contains another \" file\" folder, which in turn contains another \" file\" folder, which contains two more folders, \" file\" and \" file2\" . Thus, the \" file\" folder, which lies directly on the \" C\" disk, contains 4 subfolders.",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "66C"
  },
  {
    "title": "Enemy is weak",
    "url": "https://codeforces.com/problemset/problem/61/E",
    "history": "The Romans have attacked again. This time they are much more than the Persians but Shapur is ready to defeat them. He says: \" A lion is never afraid of a hundred sheep\" . Nevertheless Shapur has to find weaknesses in the Roman army to defeat them. So he gives the army a weakness number. In Shapur' s opinion the weakness of an army is equal to the number of triplets i, j, k such that i < j < k and ai > aj > ak where ax is the power of man standing at position x. The Roman army has one special trait \u2014 powers of all the people in it are distinct. Help Shapur find out how weak the Romans are.",
    "input": "The first line of input contains a single number n ( 3 \u2264 n \u2264 106) \u2014 the number of men in Roman army. Next line contains n different positive integers ai ( 1 \u2264 i \u2264 n, 1 \u2264 ai \u2264 109) \u2014 powers of men in the Roman army.",
    "output": "A single integer number, the weakness of the Roman army. Please, do not use",
    "note": "",
    "topics": [
      "data structures",
      "trees"
    ],
    "id": "61E"
  },
  {
    "title": "Domino Principle",
    "url": "https://codeforces.com/problemset/problem/56/E",
    "history": "Vasya is interested in arranging dominoes. He is fed up with common dominoes and he uses the dominoes of different heights. He put n dominoes on the table along one axis, going from left to right. Every domino stands perpendicular to that axis so that the axis passes through the center of its base. The i- th domino has the coordinate xi and the height hi. Now Vasya wants to learn for every domino, how many dominoes will fall if he pushes it to the right. Help him do that. Consider that a domino falls if it is touched strictly above the base. In other words, the fall of the domino with the initial coordinate x and height h leads to the fall of all dominoes on the segment [ x + 1, x + h - 1] .",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 105) which is the number of dominoes. Then follow n lines containing two integers xi and hi ( - 108 \u2264 xi \u2264 108, 2 \u2264 hi \u2264 108) each, which are the coordinate and height of every domino. No two dominoes stand on one point.",
    "output": "Print n space- separated numbers zi \u2014 the number of dominoes that will fall if Vasya pushes the i- th domino to the right ( including the domino itself) .",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "sortings"
    ],
    "id": "56E"
  },
  {
    "title": "Corporation Mail",
    "url": "https://codeforces.com/problemset/problem/56/C",
    "history": "The Beroil corporation structure is hierarchical, that is it can be represented as a tree. Let' s examine the presentation of this structure as follows: employee : : = name. | name: employee1, employee2, . . . , employeek. name : : = name of an employee That is, the description of each employee consists of his name, a colon ( : ) , the descriptions of all his subordinates separated by commas, and, finally, a dot. If an employee has no subordinates, then the colon is not present in his description. For example, line MIKE: MAX. , ARTEM: MIKE. . , DMITRY: DMITRY. , DMITRY. . . is the correct way of recording the structure of a corporation where the director MIKE has subordinates MAX, ARTEM and DMITRY. ARTEM has a subordinate whose name is MIKE, just as the name of his boss and two subordinates of DMITRY are called DMITRY, just like himself. In the Beroil corporation every employee can only correspond with his subordinates, at that the subordinates are not necessarily direct. Let' s call an uncomfortable situation the situation when a person whose name is s writes a letter to another person whose name is also s. In the example given above are two such pairs: a pair involving MIKE, and two pairs for DMITRY ( a pair for each of his subordinates) . Your task is by the given structure of the corporation to find the number of uncomfortable pairs in it.",
    "input": "The first and single line contains the corporation structure which is a string of length from 1 to 1000 characters. It is guaranteed that the description is correct. Every name is a string consisting of capital Latin letters from 1 to 10 symbols in length.",
    "output": "Print a single number \u2014 the number of uncomfortable situations in the company.",
    "note": "",
    "topics": [
      "data structures",
      "expression parsing",
      "implementation"
    ],
    "id": "56C"
  },
  {
    "title": "Circular RMQ",
    "url": "https://codeforces.com/problemset/problem/52/C",
    "history": "You are given circular array a0, a1, . . . , an - 1. There are two types of operations with it: inc( lf, rg, v) \u2014 this operation increases each element on the segment [ lf, rg] ( inclusively) by v; rmq( lf, rg) \u2014 this operation returns minimal value on the segment [ lf, rg] ( inclusively) . Assume segments to be circular, so if n = 5 and lf = 3, rg = 1, it means the index sequence: 3, 4, 0, 1. Write program to process given sequence of operations.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 200000) . The next line contains initial state of the array: a0, a1, . . . , an - 1 ( - 106 \u2264 ai \u2264 106) , ai are integer. The third line contains integer m ( 0 \u2264 m \u2264 200000) , m \u2014 the number of operartons. Next m lines contain one operation each. If line contains two integer lf, rg ( 0 \u2264 lf, rg \u2264 n - 1) it means rmq operation, it contains three integers lf, rg, v ( 0 \u2264 lf, rg \u2264 n - 1; - 106 \u2264 v \u2264 106) \u2014 inc operation.",
    "output": "For each rmq operation write result for it. Please, do not use",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": "52C"
  },
  {
    "title": "Iqea",
    "url": "https://codeforces.com/problemset/problem/936/E",
    "history": "",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "divide and conquer",
      "dsu",
      "shortest paths",
      "trees"
    ],
    "id": "936E"
  },
  {
    "title": "Cannon",
    "url": "https://codeforces.com/problemset/problem/47/E",
    "history": "Bertown is under siege! The attackers have blocked all the ways out and their cannon is bombarding the city. Fortunately, Berland intelligence managed to intercept the enemies' shooting plan. Let' s introduce the Cartesian system of coordinates, the origin of which coincides with the cannon' s position, the Ox axis is directed rightwards in the city' s direction, the Oy axis is directed upwards ( to the sky) . The cannon will make n more shots. The cannon balls' initial speeds are the same in all the shots and are equal to V, so that every shot is characterized by only one number alphai which represents the angle at which the cannon fires. Due to the cannon' s technical peculiarities this angle does not exceed 45 angles ( \u03c0 / 4) . We disregard the cannon sizes and consider the firing made from the point ( 0, 0) . The balls fly according to the known physical laws of a body thrown towards the horizon at an angle: vx( t) = V\u00b7cos( alpha) vy( t) = V\u00b7sin( alpha) \u2013 g\u00b7t x( t) = V\u00b7cos( alpha) \u00b7t y( t) = V\u00b7sin( alpha) \u00b7t \u2013 g\u00b7t2 / 2Think of the acceleration of gravity g as equal to 9. 8. Bertown defends m walls. The i- th wall is represented as a vertical segment ( xi, 0) - ( xi, yi) . When a ball hits a wall, it gets stuck in it and doesn' t fly on. If a ball doesn' t hit any wall it falls on the ground ( y = 0) and stops. If the ball exactly hits the point ( xi, yi) , it is considered stuck. Your task is to find for each ball the coordinates of the point where it will be located in the end.",
    "input": "The first line contains integers n and V ( 1 \u2264 n \u2264 104, 1 \u2264 V \u2264 1000) which represent the number of shots and the initial speed of every ball. The second line contains n space- separated real numbers alphai ( 0 < alphai < \u03c0 / 4) which represent the angles in radians at which the cannon will fire. The third line contains integer m ( 1 \u2264 m \u2264 105) which represents the number of walls. Then follow m lines, each containing two real numbers xi and yi ( 1 \u2264 xi \u2264 1000, 0 \u2264 yi \u2264 1000) which represent the wall\u2019s coordinates. All the real numbers have no more than 4 decimal digits. The walls may partially overlap or even coincide.",
    "output": "Print n lines containing two real numbers each \u2014 calculate for every ball the coordinates of its landing point. Your answer should have the relative or absolute error less than 10 - 4.",
    "note": "",
    "topics": [
      "data structures",
      "geometry",
      "sortings"
    ],
    "id": "47E"
  },
  {
    "title": "Comb",
    "url": "https://codeforces.com/problemset/problem/46/E",
    "history": "Having endured all the hardships, Lara Croft finally found herself in a room with treasures. To her surprise she didn' t find golden mountains there. Lara looked around and noticed on the floor a painted table n \u00d7 m panels in size with integers written on the panels. There also was a huge number of stones lying by the wall. On the pillar near the table Lara found a guidance note which said that to get hold of the treasures one has to choose some non- zero number of the first panels in each row of the table and put stones on all those panels to push them down. After that she will receive a number of golden coins equal to the sum of numbers written on the chosen panels. Lara quickly made up her mind on how to arrange the stones and was about to start when she noticed an addition to the note in small font below. According to the addition, for the room ceiling not to crush and smash the adventurer, the chosen panels should form a comb. It was explained that the chosen panels form a comb when the sequence c1, c2, . . . , cn made from the quantities of panels chosen in each table line satisfies the following property: c1 > c2 < c3 > c4 < . . . , i. e. the inequation mark interchanges between the neighboring elements. Now Lara is bewildered and doesn' t know what to do. Help her to determine the largest number of coins she can get and survive at the same time.",
    "input": "The first line contains a pair of integers n, m ( 2 \u2264 n, m \u2264 1500) . Next n lines contain m integers each \u2014 that is the table itself. The absolute value of the numbers in the table does not exceed 10000.",
    "output": "Print the single number \u2014 the maximum number of coins Lara can get.",
    "note": "",
    "topics": [
      "data structures",
      "dp"
    ],
    "id": "46E"
  },
  {
    "title": "Parking Lot",
    "url": "https://codeforces.com/problemset/problem/46/D",
    "history": "Nowadays it is becoming increasingly difficult to park a car in cities successfully. Let' s imagine a segment of a street as long as L meters along which a parking lot is located. Drivers should park their cars strictly parallel to the pavement on the right side of the street ( remember that in the country the authors of the tasks come from the driving is right side! ) . Every driver when parking wants to leave for themselves some extra space to move their car freely, that' s why a driver is looking for a place where the distance between his car and the one behind his will be no less than b meters and the distance between his car and the one in front of his will be no less than f meters ( if there' s no car behind then the car can be parked at the parking lot segment edge; the same is true for the case when there' re no cars parked in front of the car) . Let' s introduce an axis of coordinates along the pavement. Let the parking lot begin at point 0 and end at point L. The drivers drive in the direction of the coordinates' increasing and look for the earliest place ( with the smallest possible coordinate) where they can park the car. In case there' s no such place, the driver drives on searching for his perfect peaceful haven. Sometimes some cars leave the street and free some space for parking. Considering that there never are two moving cars on a street at a time write a program that can use the data on the drivers, entering the street hoping to park there and the drivers leaving it, to model the process and determine a parking lot space for each car.",
    "input": "The first line contains three integers L, b \u0438 f ( 10 \u2264 L \u2264 100000, 1 \u2264 b, f \u2264 100) . The second line contains an integer n ( 1 \u2264 n \u2264 100) that indicates the number of requests the program has got. Every request is described on a single line and is given by two numbers. The first number represents the request type. If the request type is equal to 1, then in that case the second number indicates the length of a car ( in meters) that enters the street looking for a place to park. And if the request type is equal to 2, then the second number identifies the number of such a request ( starting with 1) that the car whose arrival to the parking lot was described by a request with this number, leaves the parking lot. It is guaranteed that that car was parked at the moment the request of the 2 type was made. The lengths of cars are integers from 1 to 1000.",
    "output": "For every request of the 1 type print number - 1 on the single line if the corresponding car couldn' t find place to park along the street. Otherwise, print a single number equal to the distance between the back of the car in its parked position and the beginning of the parking lot zone.",
    "note": "",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "46D"
  },
  {
    "title": "Dancing Lessons",
    "url": "https://codeforces.com/problemset/problem/45/C",
    "history": "There are n people taking dancing lessons. Every person is characterized by his/ her dancing skill ai. At the beginning of the lesson they line up from left to right. While there is at least one couple of a boy and a girl in the line, the following process is repeated: the boy and girl who stand next to each other, having the minimal difference in dancing skills start to dance. If there are several such couples, the one first from the left starts to dance. After a couple leaves to dance, the line closes again, i. e. as a result the line is always continuous. The difference in dancing skills is understood as the absolute value of difference of ai variable. Your task is to find out what pairs and in what order will start dancing.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 2\u00b7105) \u2014 the number of people. The next line contains n symbols B or G without spaces. B stands for a boy, G stands for a girl. The third line contains n space- separated integers ai ( 1 \u2264 ai \u2264 107) \u2014 the dancing skill. People are specified from left to right in the order in which they lined up.",
    "output": "Print the resulting number of couples k. Then print k lines containing two numerals each \u2014 the numbers of people forming the couple. The people are numbered with integers from 1 to n from left to right. When a couple leaves to dance you shouldn' t renumber the people. The numbers in one couple should be sorted in the increasing order. Print the couples in the order in which they leave to dance.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": "45C"
  },
  {
    "title": "Shooting Gallery",
    "url": "https://codeforces.com/problemset/problem/44/G",
    "history": "Berland amusement park shooting gallery is rightly acknowledged as one of the best in the world. Every day the country' s best shooters master their skills there and the many visitors compete in clay pigeon shooting to win decent prizes. And the head of the park has recently decided to make an online version of the shooting gallery. During the elaboration process it turned out that the program that imitates the process of shooting effectively, is needed. To formulate the requirements to the program, the shooting gallery was formally described. A 3D Cartesian system of coordinates was introduced, where the X axis ran across the gallery floor along the line, along which the shooters are located, the Y axis ran vertically along the gallery wall and the positive direction of the Z axis matched the shooting direction. Let' s call the XOY plane a shooting plane and let' s assume that all the bullets are out of the muzzles at the points of this area and fly parallel to the Z axis. Every clay pigeon can be represented as a rectangle whose sides are parallel to X and Y axes, and it has a positive z- coordinate. The distance between a clay pigeon and the shooting plane is always different for every target. The bullet hits the target if it goes through the inner area or border of the rectangle corresponding to it. When the bullet hits the target, the target falls down vertically into the crawl- space of the shooting gallery and cannot be shot at any more. The targets are tough enough, that' s why a bullet can not pierce a target all the way through and if a bullet hits a target it can' t fly on. In input the simulator program is given the arrangement of all the targets and also of all the shots in the order of their appearance. The program should determine which target was hit by which shot. If you haven' t guessed it yet, you are the one who is to write such a program.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 105) \u2014 the number of targets. Each of the subsequent n lines contains the description of a target. The target is described by five integers xl, xr, yl, yr, z, that determine it' s location in space ( 0 \u2264 xl < xr \u2264 107, 0 \u2264 yl < yr \u2264 107, 0 < z \u2264 107) . The next line contains an integer m ( 1 \u2264 m \u2264 105) , determining the number of shots. Then in m lines shots are described. Every shot is determined by the coordinates of a bullet on the shooting plane ( x, y) ( 0 \u2264 x, y \u2264 107, the coordinates of bullets are integers) . The shots are given in the order of their firing. The intervals between shots are large enough, and a target falls very quickly, that' s why assume that a falling target can not be an obstruction for all the shots following the one that hit it.",
    "output": "For every shot in the single line print the number of the target which the shot has hit, or 0, if the bullet did not hit any target. The targets are numbered starting from 1 in the order in which they were given in the input data.",
    "note": "",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "44G"
  },
  {
    "title": "Queue",
    "url": "https://codeforces.com/problemset/problem/38/G",
    "history": "On a cold winter evening our hero Vasya stood in a railway queue to buy a ticket for Codeforces championship final. As it usually happens, the cashier said he was going to be away for 5 minutes and left for an hour. Then Vasya, not to get bored, started to analyze such a mechanism as a queue. The findings astonished Vasya. Every man is characterized by two numbers: ai, which is the importance of his current task ( the greater the number is, the more important the task is) and number ci, which is a picture of his conscience. Numbers ai form the permutation of numbers from 1 to n. Let the queue consist of n - 1 people at the moment. Let' s look at the way the person who came number n behaves. First, he stands at the end of the queue and the does the following: if importance of the task ai of the man in front of him is less than an, they swap their places ( it looks like this: the man number n asks the one before him: \" Erm. . . Excuse me please but it' s very important for me. . . could you please let me move up the queue? \" ) , then he again poses the question to the man in front of him and so on. But in case when ai is greater than an, moving up the queue stops. However, the man number n can perform the operation no more than cn times. In our task let us suppose that by the moment when the man number n joins the queue, the process of swaps between n - 1 will have stopped. If the swap is possible it necessarily takes place. Your task is to help Vasya model the described process and find the order in which the people will stand in queue when all the swaps stops.",
    "input": "The first input line contains an integer n which is the number of people who has joined the queue ( 1 \u2264 n \u2264 105) . In the next n lines descriptions of the people are given in order of their coming \u2014 space- separated integers ai and ci ( 1 \u2264 ai \u2264 n, 0 \u2264 ci \u2264 n) . Every description is located on s single line. All the ai' s are different.",
    "output": "Output the permutation of numbers from 1 to n, which signifies the queue formed according to the above described rules, starting from the beginning to the end. In this succession the i- th number stands for the number of a person who will stand in line on the place number i after the swaps ends. People are numbered starting with 1 in the order in which they were given in the input. Separate numbers by a space.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": "38G"
  },
  {
    "title": "Old Berland Language",
    "url": "https://codeforces.com/problemset/problem/37/C",
    "history": "Berland scientists know that the Old Berland language had exactly n words. Those words had lengths of l1, l2, . . . , ln letters. Every word consisted of two letters, 0 and 1. Ancient Berland people spoke quickly and didn\u2019t make pauses between the words, but at the same time they could always understand each other perfectly. It was possible because no word was a prefix of another one. The prefix of a string is considered to be one of its substrings that starts from the initial symbol. Help the scientists determine whether all the words of the Old Berland language can be reconstructed and if they can, output the words themselves.",
    "input": "The first line contains one integer N ( 1 \u2264 N \u2264 1000) \u2014 the number of words in Old Berland language. The second line contains N space- separated integers \u2014 the lengths of these words. All the lengths are natural numbers not exceeding 1000.",
    "output": "If there\u2019s no such set of words, in the single line output NO. Otherwise, in the first line output YES, and in the next N lines output the words themselves in the order their lengths were given in the input file. If the answer is not unique, output any.",
    "note": "",
    "topics": [
      "data structures",
      "greedy",
      "trees"
    ],
    "id": "37C"
  },
  {
    "title": "Parade",
    "url": "https://codeforces.com/problemset/problem/35/E",
    "history": "No Great Victory anniversary in Berland has ever passed without the war parade. This year is not an exception. That\u2019s why the preparations are on in full strength. Tanks are building a line, artillery mounts are ready to fire, soldiers are marching on the main square. . . And the air forces general Mr. Generalov is in trouble again. This year a lot of sky- scrapers have been built which makes it difficult for the airplanes to fly above the city. It was decided that the planes should fly strictly from south to north. Moreover, there must be no sky scraper on a plane\u2019s route, otherwise the anniversary will become a tragedy. The Ministry of Building gave the data on n sky scrapers ( the rest of the buildings are rather small and will not be a problem to the planes) . When looking at the city from south to north as a geometrical plane, the i- th building is a rectangle of height hi. Its westernmost point has the x- coordinate of li and the easternmost \u2014 of ri. The terrain of the area is plain so that all the buildings stand on one level. Your task as the Ministry of Defence\u2019s head programmer is to find an enveloping polyline using the data on the sky- scrapers. The polyline\u2019s properties are as follows: If you look at the city from south to north as a plane, then any part of any building will be inside or on the boarder of the area that the polyline encloses together with the land surface. The polyline starts and ends on the land level, i. e. at the height equal to 0. The segments of the polyline are parallel to the coordinate axes, i. e. they can only be vertical or horizontal. The polyline\u2019s vertices should have integer coordinates. If you look at the city from south to north the polyline ( together with the land surface) must enclose the minimum possible area. The polyline must have the smallest length among all the polylines, enclosing the minimum possible area with the land. The consecutive segments of the polyline must be perpendicular. Picture to the second sample test ( the enveloping polyline is marked on the right) .",
    "input": "The first input line contains integer n ( 1 \u2264 n \u2264 100000) . Then follow n lines, each containing three integers hi, li, ri ( 1 \u2264 hi \u2264 109, - 109 \u2264 li < ri \u2264 109) .",
    "output": "In the first line output integer m \u2014 amount of vertices of the enveloping polyline. The next m lines should contain 2 integers each \u2014 the position and the height of the polyline\u2019s vertex. Output the coordinates of each vertex in the order of traversing the polyline from west to east. Remember that the first and the last vertices of the polyline should have the height of 0.",
    "note": "",
    "topics": [
      "data structures",
      "sortings"
    ],
    "id": "35E"
  },
  {
    "title": "Tricky and Clever Password",
    "url": "https://codeforces.com/problemset/problem/30/E",
    "history": "In his very young years the hero of our story, king Copa, decided that his private data was hidden not enough securely, what is unacceptable for the king. That' s why he invented tricky and clever password ( later he learned that his password is a palindrome of odd length) , and coded all his data using it. Copa is afraid to forget his password, so he decided to write it on a piece of paper. He is aware that it is insecure to keep password in such way, so he decided to cipher it the following way: he cut x characters from the start of his password and from the end of it ( x can be 0, and 2x is strictly less than the password length) . He obtained 3 parts of the password. Let' s call it prefix, middle and suffix correspondingly, both prefix and suffix having equal length and middle always having odd length. From these parts he made a string A + prefix + B + middle + C + suffix, where A, B and C are some ( possibly empty) strings invented by Copa, and \u00ab + \u00bb means concatenation. Many years have passed, and just yesterday the king Copa found the piece of paper where his ciphered password was written. The password, as well as the strings A, B and C, was completely forgotten by Copa, so he asks you to find a password of maximum possible length, which could be invented, ciphered and written by Copa.",
    "input": "The input contains single string of small Latin letters with length from 1 to 105 characters.",
    "output": "The first line should contain integer k \u2014 amount of nonempty parts of the password in your answer ( ) . In each of the following k lines output two integers xi and li \u2014 start and length of the corresponding part of the password. Output pairs in order of increasing xi. Separate the numbers in pairs by a single space. Starting position xi should be an integer from 1 to the length of the input string. All li must be positive, because you should output only non- empty parts. The middle part must have odd length. If there are several solutions, output any. Note that your goal is to maximize the sum of li, but not to maximize k.",
    "note": "",
    "topics": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "greedy",
      "hashing",
      "strings"
    ],
    "id": "30E"
  },
  {
    "title": "Mail Stamps",
    "url": "https://codeforces.com/problemset/problem/29/C",
    "history": "One day Bob got a letter in an envelope. Bob knows that when Berland' s post officers send a letter directly from city \u00abA\u00bb to city \u00abB\u00bb, they stamp it with \u00abA B\u00bb, or \u00abB A\u00bb. Unfortunately, often it is impossible to send a letter directly from the city of the sender to the city of the receiver, that' s why the letter is sent via some intermediate cities. Post officers never send a letter in such a way that the route of this letter contains some city more than once. Bob is sure that the post officers stamp the letters accurately. There are n stamps on the envelope of Bob' s letter. He understands that the possible routes of this letter are only two. But the stamps are numerous, and Bob can' t determine himself none of these routes. That' s why he asks you to help him. Find one of the possible routes of the letter.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 105) \u2014 amount of mail stamps on the envelope. Then there follow n lines with two integers each \u2014 description of the stamps. Each stamp is described with indexes of the cities between which a letter is sent. The indexes of cities are integers from 1 to 109. Indexes of all the cities are different. Every time the letter is sent from one city to another, exactly one stamp is put on the envelope. It is guaranteed that the given stamps correspond to some valid route from some city to some other city.",
    "output": "Output n + 1 numbers \u2014 indexes of cities in one of the two possible routes of the letter.",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "graphs",
      "implementation"
    ],
    "id": "29C"
  },
  {
    "title": "Don't fear, DravDe is kind",
    "url": "https://codeforces.com/problemset/problem/28/D",
    "history": "A motorcade of n trucks, driving from city \u00abZ\u00bb to city \u00ab\u0417\u00bb, has approached a tunnel, known as Tunnel of Horror. Among truck drivers there were rumours about monster DravDe, who hunts for drivers in that tunnel. Some drivers fear to go first, others - to be the last, but let' s consider the general case. Each truck is described with four numbers: v \u2014 value of the truck, of its passangers and cargo c \u2014 amount of passanger on the truck, the driver included l \u2014 total amount of people that should go into the tunnel before this truck, so that the driver can overcome his fear ( \u00abif the monster appears in front of the motorcade, he' ll eat them first\u00bb) r \u2014 total amount of people that should follow this truck, so that the driver can overcome his fear ( \u00abif the monster appears behind the motorcade, he' ll eat them first\u00bb) . Since the road is narrow, it' s impossible to escape DravDe, if he appears from one side. Moreover, the motorcade can' t be rearranged. The order of the trucks can' t be changed, but it' s possible to take any truck out of the motorcade, and leave it near the tunnel for an indefinite period. You, as the head of the motorcade, should remove some of the trucks so, that the rest of the motorcade can move into the tunnel and the total amount of the left trucks' values is maximal.",
    "input": "The first input line contains integer number n ( 1 \u2264 n \u2264 105) \u2014 amount of trucks in the motorcade. The following n lines contain four integers each. Numbers in the i- th line: vi, ci, li, ri ( 1 \u2264 vi \u2264 104, 1 \u2264 ci \u2264 105, 0 \u2264 li, ri \u2264 105) \u2014 describe the i- th truck. The trucks are numbered from 1, counting from the front of the motorcade.",
    "output": "In the first line output number k \u2014 amount of trucks that will drive into the tunnel. In the second line output k numbers \u2014 indexes of these trucks in ascending order. Don' t forget please that you are not allowed to change the order of trucks. If the answer is not unique, output any.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "hashing"
    ],
    "id": "28D"
  },
  {
    "title": "Points",
    "url": "https://codeforces.com/problemset/problem/19/D",
    "history": "Pete and Bob invented a new interesting game. Bob takes a sheet of paper and locates a Cartesian coordinate system on it as follows: point ( 0, 0) is located in the bottom- left corner, Ox axis is directed right, Oy axis is directed up. Pete gives Bob requests of three types: add x y \u2014 on the sheet of paper Bob marks a point with coordinates ( x, y) . For each request of this type it' s guaranteed that point ( x, y) is not yet marked on Bob' s sheet at the time of the request. remove x y \u2014 on the sheet of paper Bob erases the previously marked point with coordinates ( x, y) . For each request of this type it' s guaranteed that point ( x, y) is already marked on Bob' s sheet at the time of the request. find x y \u2014 on the sheet of paper Bob finds all the marked points, lying strictly above and strictly to the right of point ( x, y) . Among these points Bob chooses the leftmost one, if it is not unique, he chooses the bottommost one, and gives its coordinates to Pete. Bob managed to answer the requests, when they were 10, 100 or 1000, but when their amount grew up to 2\u00b7105, Bob failed to cope. Now he needs a program that will answer all Pete' s requests. Help Bob, please!",
    "input": "The first input line contains number n ( 1 \u2264 n \u2264 2\u00b7105) \u2014 amount of requests. Then there follow n lines \u2014 descriptions of the requests. add x y describes the request to add a point, remove x y \u2014 the request to erase a point, find x y \u2014 the request to find the bottom- left point. All the coordinates in the input file are non- negative and don' t exceed 109.",
    "output": "For each request of type find x y output in a separate line the answer to it \u2014 coordinates of the bottommost among the leftmost marked points, lying strictly above and to the right of point ( x, y) . If there are no points strictly above and to the right of point ( x, y) , output - 1.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": "19D"
  },
  {
    "title": "Stripe",
    "url": "https://codeforces.com/problemset/problem/18/C",
    "history": "Once Bob took a paper stripe of n squares ( the height of the stripe is 1 square) . In each square he wrote an integer number, possibly negative. He became interested in how many ways exist to cut this stripe into two pieces so that the sum of numbers from one piece is equal to the sum of numbers from the other piece, and each piece contains positive integer amount of squares. Would you help Bob solve this problem?",
    "input": "The first input line contains integer n ( 1 \u2264 n \u2264 105) \u2014 amount of squares in the stripe. The second line contains n space- separated numbers \u2014 they are the numbers written in the squares of the stripe. These numbers are integer and do not exceed 10000 in absolute value.",
    "output": "Output the amount of ways to cut the stripe into two non- empty pieces so that the sum of numbers from one piece is equal to the sum of numbers from the other piece. Don' t forget that it' s allowed to cut the stripe along the squares' borders only.",
    "note": "",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": "18C"
  },
  {
    "title": "Map",
    "url": "https://codeforces.com/problemset/problem/15/D",
    "history": "There is an area map that is a rectangular matrix n \u00d7 m, each cell of the matrix contains the average height of a corresponding area part. Peter works for a company that has to build several cities within this area, each of the cities will occupy a rectangle a \u00d7 b cells on the map. To start construction works in a particular place Peter needs to remove excess ground from the construction site where a new city will be built. To do so he chooses a cell of the minimum height within this site, and removes excess ground from other cells of the site down to this minimum level. Let' s consider that to lower the ground level from h2 to h1 ( h1 \u2264 h2) they need to remove h2 - h1 ground units. Let' s call a site' s position optimal, if the amount of the ground removed from this site is minimal compared to other possible positions. Peter constructs cities according to the following algorithm: from all the optimum site' s positions he chooses the uppermost one. If this position is not unique, he chooses the leftmost one. Then he builds a city on this site. Peter repeats this process untill he can build at least one more city. For sure, he cannot carry out construction works on the occupied cells. Would you, please, help Peter place cities according to the algorithm?",
    "input": "The first line contains four space- separated integers: map sizes n, m and city sizes a, b ( 1 \u2264 a \u2264 n \u2264 1000, 1 \u2264 b \u2264 m \u2264 1000) . Then there follow n lines, each contains m non- negative space- separated numbers, describing the height matrix. Each number doesn' t exceed 109.",
    "output": "In the first line output k \u2014 the amount of constructed cities. In each of the following k lines output 3 space- separated numbers \u2014 the row number and the column number of the upper- left corner of a subsequent construction site, and the amount of the ground to remove from it. Output the sites in the order of their building up.",
    "note": "",
    "topics": [
      "data structures",
      "implementation",
      "sortings"
    ],
    "id": "15D"
  },
  {
    "title": "Holes",
    "url": "https://codeforces.com/problemset/problem/13/E",
    "history": "Little Petya likes to play a lot. Most of all he likes to play a game \u00abHoles\u00bb. This is a game for one person with following rules: There are N holes located in a single row and numbered from left to right with numbers from 1 to N. Each hole has it' s own power ( hole number i has the power ai) . If you throw a ball into hole i it will immediately jump to hole i + ai, then it will jump out of it and so on. If there is no hole with such number, the ball will just jump out of the row. On each of the M moves the player can perform one of two actions: Set the power of the hole a to value b. Throw a ball into the hole a and count the number of jumps of a ball before it jump out of the row and also write down the number of the hole from which it jumped out just before leaving the row. Petya is not good at math, so, as you have already guessed, you are to perform all computations.",
    "input": "The first line contains two integers N and M ( 1 \u2264 N \u2264 105, 1 \u2264 M \u2264 105) \u2014 the number of holes in a row and the number of moves. The second line contains N positive integers not exceeding N \u2014 initial values of holes power. The following M lines describe moves made by Petya. Each of these line can be one of the two types: 0 a b 1 a Type 0 means that it is required to set the power of hole a to b, and type 1 means that it is required to throw a ball into the a- th hole. Numbers a and b are positive integers do not exceeding N.",
    "output": "For each move of the type 1 output two space- separated numbers on a separate line \u2014 the number of the last hole the ball visited before leaving the row and the number of jumps it made.",
    "note": "",
    "topics": [
      "data structures",
      "dsu"
    ],
    "id": "13E"
  },
  {
    "title": "Ball",
    "url": "https://codeforces.com/problemset/problem/12/D",
    "history": "N ladies attend the ball in the King' s palace. Every lady can be described with three values: beauty, intellect and richness. King' s Master of Ceremonies knows that ladies are very special creatures. If some lady understands that there is other lady at the ball which is more beautiful, smarter and more rich, she can jump out of the window. He knows values of all ladies and wants to find out how many probable self- murderers will be on the ball. Lets denote beauty of the i- th lady by Bi, her intellect by Ii and her richness by Ri. Then i- th lady is a probable self- murderer if there is some j- th lady that Bi < Bj, Ii < Ij, Ri < Rj. Find the number of probable self- murderers.",
    "input": "The first line contains one integer N ( 1 \u2264 N \u2264 500000) . The second line contains N integer numbers Bi, separated by single spaces. The third and the fourth lines contain sequences Ii and Ri in the same format. It is guaranteed that 0 \u2264 Bi, Ii, Ri \u2264 109.",
    "output": "Output the answer to the problem.",
    "note": "",
    "topics": [
      "data structures",
      "sortings"
    ],
    "id": "12D"
  },
  {
    "title": "Exposition",
    "url": "https://codeforces.com/problemset/problem/6/E",
    "history": "There are several days left before the fiftieth birthday of a famous Berland' s writer Berlbury. In this connection the local library decided to make an exposition of the works of this famous science- fiction writer. It was decided as well that it is necessary to include into the exposition only those books that were published during a particular time period. It is obvious that if the books differ much in size, the visitors will not like it. That was why the organizers came to the opinion, that the difference between the highest and the lowest books in the exposition should be not more than k millimeters. The library has n volumes of books by Berlbury, arranged in chronological order of their appearance. The height of each book in millimeters is know, it is hi. As Berlbury is highly respected in the city, the organizers want to include into the exposition as many books as possible, and to find out what periods of his creative work they will manage to cover. You are asked to help the organizers cope with this hard task.",
    "input": "The first line of the input data contains two integer numbers separated by a space n ( 1 \u2264 n \u2264 105) and k ( 0 \u2264 k \u2264 106) \u2014 the amount of books by Berlbury in the library, and the maximum allowed height difference between the lowest and the highest books. The second line contains n integer numbers separated by a space. Each number hi ( 1 \u2264 hi \u2264 106) is the height of the i- th book in millimeters.",
    "output": "In the first line of the output data print two numbers a and b ( separate them by a space) , where a is the maximum amount of books the organizers can include into the exposition, and b \u2014 the amount of the time periods, during which Berlbury published a books, and the height difference between the lowest and the highest among these books is not more than k milllimeters. In each of the following b lines print two integer numbers separated by a space \u2014 indexes of the first and the last volumes from each of the required time periods of Berlbury' s creative work.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "dsu",
      "trees",
      "two pointers"
    ],
    "id": "6E"
  },
  {
    "title": "Bindian Signalizing",
    "url": "https://codeforces.com/problemset/problem/5/E",
    "history": "Everyone knows that long ago on the territory of present- day Berland there lived Bindian tribes. Their capital was surrounded by n hills, forming a circle. On each hill there was a watchman, who watched the neighbourhood day and night. In case of any danger the watchman could make a fire on the hill. One watchman could see the signal of another watchman, if on the circle arc connecting the two hills there was no hill higher than any of the two. As for any two hills there are two different circle arcs connecting them, the signal was seen if the above mentioned condition was satisfied on at least one of the arcs. For example, for any two neighbouring watchmen it is true that the signal of one will be seen by the other. An important characteristics of this watch system was the amount of pairs of watchmen able to see each other' s signals. You are to find this amount by the given heights of the hills.",
    "input": "The first line of the input data contains an integer number n ( 3 \u2264 n \u2264 106) , n \u2014 the amount of hills around the capital. The second line contains n numbers \u2014 heights of the hills in clockwise order. All height numbers are integer and lie between 1 and 109.",
    "output": "Print the required amount of pairs.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": "5E"
  },
  {
    "title": "Longest Regular Bracket Sequence",
    "url": "https://codeforces.com/problemset/problem/5/C",
    "history": "This is yet another problem dealing with regular bracket sequences. We should remind you that a bracket sequence is called regular, if by inserting \u00ab+ \u00bb and \u00ab1\u00bb into it we can get a correct mathematical expression. For example, sequences \u00ab( ( ) ) ( ) \u00bb, \u00ab( ) \u00bb and \u00ab( ( ) ( ( ) ) ) \u00bb are regular, while \u00ab) ( \u00bb, \u00ab( ( ) \u00bb and \u00ab( ( ) ) ) ( \u00bb are not. You are given a string of \u00ab( \u00bb and \u00ab) \u00bb characters. You are to find its longest substring that is a regular bracket sequence. You are to find the number of such substrings as well.",
    "input": "The first line of the input file contains a non- empty string, consisting of \u00ab( \u00bb and \u00ab) \u00bb characters. Its length does not exceed 106.",
    "output": "Print the length of the longest substring that is a regular bracket sequence, and the number of such substrings. If there are no such substrings, write the only line containing \" 0 1\" .",
    "note": "",
    "topics": [
      "constructive algorithms",
      "data structures",
      "dp",
      "greedy",
      "sortings",
      "strings"
    ],
    "id": "5C"
  },
  {
    "title": "Registration System",
    "url": "https://codeforces.com/problemset/problem/4/C",
    "history": "A new e- mail service \" Berlandesk\" is going to be opened in Berland in the near future. The site administration wants to launch their project as soon as possible, that' s why they ask you to help. You' re suggested to implement the prototype of site registration system. The system should work on the following principle. Each time a new user wants to register, he sends to the system a request with his name. If such a name does not exist in the system database, it is inserted into the database, and the user gets the response OK, confirming the successful registration. If the name already exists in the system database, the system makes up a new user name, sends it to the user as a prompt and also inserts the prompt into the database. The new name is formed by the following rule. Numbers, starting with 1, are appended one after another to name ( name1, name2, . . . ) , among these numbers the least i is found so that namei does not yet exist in the database.",
    "input": "The first line contains number n ( 1 \u2264 n \u2264 105) . The following n lines contain the requests to the system. Each request is a non- empty line, and consists of not more than 32 characters, which are all lowercase Latin letters.",
    "output": "Print n lines, which are system responses to the requests: OK in case of successful registration, or a prompt with a new name, if the requested name is already taken.",
    "note": "",
    "topics": [
      "data structures",
      "hashing",
      "implementation"
    ],
    "id": "4C"
  }
]