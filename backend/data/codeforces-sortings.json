[
  {
    "title": "Yet Another Tournament",
    "url": "https://codeforces.com/problemset/problem/1783/C",
    "history": "You are participating in Yet Another Tournament. There are n + 1 participants: you and n other opponents, numbered from 1 to n . Each two participants will play against each other exactly once. If the opponent i plays against the opponent j , he wins if and only if i > j . When the opponent i plays against you, everything becomes a little bit complicated. In order to get a win against opponent i , you need to prepare for the match for at least a_ i minutes \u2014 otherwise, you lose to that opponent. You have m minutes in total to prepare for matches, but you can prepare for only one match at one moment. In other words, if you want to win against opponents p_ 1, p_ 2, . . . , p_ k , you need to spend a_ p_ 1 + a_ p_ 2 + . . . + a_ p_ k minutes for preparation \u2014 and if this number is greater than m , you cannot achieve a win against all of these opponents at the same time. The final place of each contestant is equal to the number of contestants with strictly more wins + 1 . For example, if 3 contestants have 5 wins each, 1 contestant has 3 wins and 2 contestants have 1 win each, then the first 3 participants will get the 1 - st place, the fourth one gets the 4 - th place and two last ones get the 5 - th place. Calculate the minimum possible place ( lower is better) you can achieve if you can' t prepare for the matches more than m minutes in total.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains two integers n and m ( 1 \u2264 n \u2264 5 \u00b7 10^ 5 ; 0 \u2264 m \u2264\u2211_ i= 1^ na_ i ) \u2014 the number of your opponents and the total time you have for preparation. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 1000 ) , where a_ i is the time you need to prepare in order to win against the i - th opponent. It' s guaranteed that the total sum of n over all test cases doesn' t exceed 5 \u00b7 10^ 5 .",
    "output": "For each test case, print the minimum possible place you can take if you can prepare for the matches no more than m minutes in total.",
    "note": "In the first test case, you can prepare to all opponents, so you' ll win 4 games and get the 1 - st place, since all your opponents win no more than 3 games. In the second test case, you can prepare against the second opponent and win. As a result, you' ll have 1 win, opponent 1 \u2014 1 win, opponent 2 \u2014 1 win, opponent 3 \u2014 3 wins. So, opponent 3 will take the 1 - st place, and all other participants, including you, get the 2 - nd place. In the third test case, you have no time to prepare at all, so you' ll lose all games. Since each opponent has at least 1 win, you' ll take the last place ( place 6 ) . In the fourth test case, you have no time to prepare, but you can still win against the first opponent. As a result, opponent 1 has no wins, you have 1 win and all others have at least 2 wins. So your place is 4 .",
    "topics": [
      "binary search",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Make it Beautiful",
    "url": "https://codeforces.com/problemset/problem/1783/A",
    "history": "An array a is called ugly if it contains at least one element which is equal to the sum of all elements before it. If the array is not ugly, it is beautiful. For example: the array [ 6, 3, 9, 6] is ugly: the element 9 is equal to 6 + 3 ; the array [ 5, 5, 7] is ugly: the element 5 ( the second one) is equal to 5 ; the array [ 8, 4, 10, 14] is beautiful: 8 0 , 4 8 , 10 8 + 4 , 14 8 + 4 + 10 , so there is no element which is equal to the sum of all elements before it. You are given an array a such that 1 \u2264 a_ 1 \u2264 a_ 2 \u2264. . . \u2264 a_ n \u2264 100 . You have to reorder the elements of a in such a way that the resulting array is beautiful. Note that you are not allowed to insert new elements or erase existing ones, you can only change the order of elements of a . You are allowed to keep the array a unchanged, if it is beautiful.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 2000 ) \u2014 the number of test cases. Each test case consists of two lines. The first line contains one integer n ( 2 \u2264 n \u2264 50 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ 1 \u2264 a_ 2 \u2264. . . \u2264 a_ n \u2264 100 ) .",
    "output": "For each test case, print the answer as follows: if it is impossible to reorder the elements of a in such a way that it becomes beautiful, print NO; otherwise, in the first line, print YES. In the second line, print n integers \u2014 any beautiful array which can be obtained from a by reordering its elements. If there are multiple such arrays, print any of them.",
    "note": " ",
    "topics": [
      "constructive algorithms",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Equal Frequencies",
    "url": "https://codeforces.com/problemset/problem/1781/C",
    "history": "Let' s call a string balanced if all characters that are present in it appear the same number of times. For example, \" coder\" , \" appall\" , and \" ttttttt\" are balanced, while \" wowwow\" and \" codeforces\" are not. You are given a string s of length n consisting of lowercase English letters. Find a balanced string t of the same length n consisting of lowercase English letters that is different from the string s in as few positions as possible. In other words, the number of indices i such that s_ i t_ i should be as small as possible.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . The description of the test cases follows. Each test case consists of two lines. The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of the string s . The second line contains the string s of length n consisting of lowercase English letters. It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, print the smallest number of positions where string s and a balanced string t can differ, followed by such a string t . If there are multiple solutions, print any. It can be shown that at least one balanced string always exists.",
    "note": "In the first test case, the given string \" hello\" is not balanced: letters ' h' , ' e' , and ' o' appear in it once, while letter ' l' appears twice. On the other hand, string \" helno\" is balanced: five distinct letters are present in it, and each of them appears exactly once. Strings \" hello\" and \" helno\" differ in just one position: the fourth character. Other solutions are possible too. In the second test case, string \" codefofced\" is balanced since only letters ' c' , ' o' , ' d' , ' e' , and ' f' are present in it, and each of them appears exactly twice. In the third test case, string \" eeeee\" is balanced since only letter ' e' is present in it. In the fourth test case, the given string \" appall\" is already balanced.",
    "topics": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "implementation",
      "sortings",
      "strings"
    ]
  },
  {
    "title": "Going to the Cinema",
    "url": "https://codeforces.com/problemset/problem/1781/B",
    "history": "A company of n people is planning a visit to the cinema. Every person can either go to the cinema or not. That depends on how many other people will go. Specifically, every person i said: \" I want to go to the cinema if and only if at least a_ i other people will go, not counting myself\" . That means that person i will become sad if: they go to the cinema, and strictly less than a_ i other people go; or they don' t go to the cinema, and at least a_ i other people go. In how many ways can a set of people going to the cinema be chosen so that nobody becomes sad?",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . The description of the test cases follows. Each test case consists of two lines. The first line contains a single integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of people in the company. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 n - 1 ) \u2014 integers from peoples' claims. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print a single integer \u2014 the number of different ways to choose a set of people going to the cinema so that nobody becomes sad.",
    "note": "In the first test case, both people want to go to the cinema if and only if the other person goes. There are two valid options: either both people go, or neither of them goes. However, if just one of them goes, both will be sad. In the second test case, everyone has to go to the cinema. In any other case, someone will be sad. In the third test case, there are three valid options: person number 2 goes to the cinema; or persons with indices 2, 3, 4, 7 go; or all eight people go.",
    "topics": [
      "brute force",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Anya's Simultaneous Exhibition",
    "url": "https://codeforces.com/problemset/problem/1779/E",
    "history": "This is an interactive problem. Anya has gathered n chess experts numbered from 1 to n for which the following properties hold: For any pair of players one of the players wins every game against the other ( and no draws ever occur) ; Transitivity does not necessarily hold \u2014 it might happen that A always beats B , B always beats C and C always beats A . Anya does not know, for each pair, who is the player who beats the other. To organize a tournament, Anya hosts n- 1 games. In each game, she chooses two players. One of them wins and stays, while the other one is disqualified. After all the games are hosted only one player will remain. A player is said to be a candidate master if they can win a tournament ( notice that the winner of a tournament may depend on the players selected by Anya in the n- 1 games) . Since Anya is a curious girl, she is interested in finding the candidate masters. Unfortunately, she does not have much time. To speed up the process, she will organize up to 2n simuls ( short for \" simultaneous exhibition\" , in which one player plays against many) . In one simul, Anya chooses exactly one player who will play against some ( at least one) of the other players. The chosen player wins all games they would win in a regular game, and the same holds for losses. After the simul finishes, Anya is only told the total number of games won by the chosen player ( but not which ones) . Nobody is disqualified during a simul. Can you help Anya host simuls and determine the candidate masters? The winning players in each pair could be changed between the simuls, but only in a way that preserves the results of all previous simuls. These changes may depend on your queries. InteractionFirstly, the jury sends one integer n ( 3 \u2264 n \u2264 250 ) which should be read \u2014 the number of players. After that, your program may ask queries or report an answer. To ask a query, print \" ? i s_ 1 s_ 2 . . . s_ n \" ( without quotes) , where i is the index of the player who will play against some of the other players in the simul. s is a binary string that denotes the players they play against. i plays against every player j for which s_ j = 1 holds ( and s_ j = 1 should hold for at least one 1 \u2264 j \u2264 n ) . Please note that s_ i = 0 must hold since a player cannot play against themselves, otherwise, the query is considered to be incorrect. After this, you should read an integer \u2014 the number of games player i has won. When you have identified the answer, you must print \" ! c_ 1 c_ 2 . . . c_ n \" ( without quotes) and terminate your program. c is a binary string which represents the candidate masters. Player i is a candidate master if c_ i= 1 holds, otherwise, they are not. If you ask more than 2n queries or if one of the queries is malformed, the interaction terminates immediately and your program receives verdict Wrong Answer. After printing a query do not forget to output the end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use: fflush( stdout) or cout. flush( ) in C+ + ; System. out. flush( ) in Java; flush( output) in Pascal; stdout. flush( ) in Python; see the documentation for other languages. Hacks are disabled in this problem.",
    "input": " ",
    "output": " ",
    "note": "In the first example, the first query describes a simul in which player 1 plays against player 2 ( and no one else) . The answer to the query is 1 , meaning that player 1 won the only game they played. We can conclude that 1 beats 2 . Similarly, the second query tells us that 2 beats 3 and the third query tells us that 3 beats 1 . All players are candidate masters in this case as Player 1 can win the tournament if 2 and 3 play first. 3 loses and leaves, while 2 stays. 1 then plays against 2 and wins; Other players can win in the same fashion. In the second example, the third query describes a simul in which player 1 plays against every other player. The answer to the query is 4 , meaning that they won every game they played. It can be concluded that player 1 also beats every other player. They can never lose, hence they are the only player who can remain at the end of every possible tournament, and the only possible candidate master.",
    "topics": [
      "constructive algorithms",
      "graphs",
      "greedy",
      "interactive",
      "sortings"
    ]
  },
  {
    "title": "Boris and His Amazing Haircut",
    "url": "https://codeforces.com/problemset/problem/1779/D",
    "history": "Boris thinks that chess is a tedious game. So he left his tournament early and went to a barber shop as his hair was a bit messy. His current hair can be described by an array a_ 1, a_ 2, . . . , a_ n , where a_ i is the height of the hair standing at position i . His desired haircut can be described by an array b_ 1, b_ 2, . . . , b_ n in a similar fashion. The barber has m razors. Each has its own size and can be used at most once. In one operation, he chooses a razor and cuts a segment of Boris' s hair. More formally, an operation is: Choose any razor which hasn' t been used before, let its size be x ; Choose a segment [ l, r] ( 1\u2264 l \u2264 r \u2264 n ) ; Set a_ i : = min ( a_ i, x) for each l\u2264 i \u2264 r ; Notice that some razors might have equal sizes \u2014 the barber can choose some size x only as many times as the number of razors with size x . He may perform as many operations as he wants, as long as any razor is used at most once and a_ i = b_ i for each 1 \u2264 i \u2264 n at the end. He does not have to use all razors. Can you determine whether the barber can give Boris his desired haircut?",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 20 000 ) . The description of the test cases follows. The first line of each test case contains a positive integer n ( 3\u2264 n\u2264 2\u00b7 10^ 5 ) \u2014 the length of arrays a and b . The second line of each test case contains n positive integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 Boris' s current hair. The third line of each test case contains n positive integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 10^ 9 ) \u2014 Boris' s desired hair. The fourth line of each test case contains a positive integer m ( 1 \u2264 m \u2264 2\u00b7 10^ 5 ) \u2014 the number of razors. The fifth line of each test case contains m positive integers x_ 1, x_ 2, . . . , x_ m ( 1 \u2264 x_ i \u2264 10^ 9 ) \u2014 the sizes of the razors. It is guaranteed that the sum of n and the sum of m over all test cases do not exceed 2\u00b7 10^ 5 .",
    "output": "For each test case, print \" YES\" if the barber can cut Boris' s hair as desired. Otherwise, print \" NO\" . You can output the answer in any case ( upper or lower) . For example, the strings \" yEs\" , \" yes\" , \" Yes\" , and \" YES\" will be recognized as positive responses.",
    "note": "In the first test case, Boris' s hair is initially [ 3, 3, 3] . Let us describe a sequence of 2 operations the barber can perform: The barber uses the razor with size 1 on the segment [ 2, 2] ; hence Boris' s hair becomes [ 3, 1, 3] . The barber uses the razor with size 2 on the segment [ 1, 3] ; hence Boris' s hair becomes [ 2, 1, 2] which is the desired haircut. In the third test case, no operation has to be done since Boris' s hair is already as desired. In the fourth test case, no cuts will be able to increase the third element in [ 1, 1, 1] in a way that the array becomes [ 1, 1, 2] .",
    "topics": [
      "constructive algorithms",
      "data structures",
      "dp",
      "dsu",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Easy Assembly",
    "url": "https://codeforces.com/problemset/problem/1773/E",
    "history": "Emma loves playing with blocks. She has several cubic blocks of the same size that are numbered with distinct integers written on them. She assembles towers from those blocks by stacking them vertically. A configuration of her game is a set of towers that she has assembled from the blocks. Emma can perform two kinds of operations on a configuration of towers: Split any tower with more than one block in it by taking any number of blocks from the top of the tower and moving them to a new tower keeping their order, so that the top block of the old tower becomes the top block of the new tower. As a result of this operation, the number of towers increases by one. Combine any two towers by moving blocks from one tower on top of the other tower in the same order. As a result of this operation, the number of towers decreases by one. Emma wants to stack all the blocks into a single tower so that all blocks come in order sorted by the numbers \u2014 from the block with the minimal number at the top to the block with the maximal number at the bottom. Emma wants to do as little of splitting and combining operations as possible. Your task is to find the minimal number of operations she has to make and output how many splits and combines are needed.",
    "input": "The first line of the input file contains an integer n ( 1 \u2264 n \u2264 10 000 ) \u2014 the number of towers in the initial configuration. Next n lines describe towers. Each tower i is described by a line that starts with the number k_ i ( k_ i \u2265 1 ; \u2211_ 1^ nk_ i\u2264 10 000 ) \u2014 the number of blocks in the tower, followed by k_ i numbers b_ i, j ( 1 \u2264 b_ i, j\u2264 10^ 9 ) \u2014 numbers written on the blocks in the i - th tower, listed from top to bottom. All block numbers listed in the input are different.",
    "output": "Output a line with two integers s and c \u2014 the number of split and combine operations Emma should make to get a single tower with blocks sorted by their numbers, so that the total number of operations is minimized.",
    "note": "The example needs the following operations ( 1 split and 2 combines) . InitialSplit lastCombined 2nd onto 1stCombined 1st onto 2nd",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Gaining Rating",
    "url": "https://codeforces.com/problemset/problem/1772/G",
    "history": "Monocarp is playing chess on one popular website. He has n opponents he can play with. The i - th opponent has rating equal to a_ i . Monocarp' s initial rating is x . Monocarp wants to raise his rating to the value y ( y > x ) . When Monocarp is playing against one of the opponents, he will win if his current rating is bigger or equal to the opponent' s rating. If Monocarp wins, his rating is increased by 1 , otherwise it is decreased by 1 . The rating of his opponent does not change. Monocarp wants to gain rating y playing as few games as possible. But he can' t just grind it, playing against weak opponents. The website has a rule that you should play against all opponents as evenly as possible. Speaking formally, if Monocarp wants to play against an opponent i , there should be no other opponent j such that Monocarp has played more games against i than against j . Calculate the minimum possible number of games Monocarp needs to gain rating y or say it' s impossible. Note that ratings of Monocarp' s opponents don' t change, while Monocarp' s rating does change.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains three integers n , x and y ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ; 1 \u2264 x < y \u2264 10^ 12 ) \u2014 the number of Monocarp' s opponents, his initial and desired ratings. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 12 ) \u2014 ratings of Monocarp' s opponents. Additional constraint on the input: the total sum of n over all t test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print a single integer \u2014 the minimum number of games Monocarp needs to play to gain rating y , or - 1 if it' s impossible.",
    "note": "In the first test case, Monocarp can use the following strategy: Monocarp plays against the 2 - nd opponent to increase rating ( 2 \u2192 3 ) ; Monocarp plays against the 1 - st opponent to increase rating ( 3 \u2192 4 ) ; Monocarp plays against the 4 - th opponent to increase rating ( 4 \u2192 5 ) ; Monocarp plays against the 5 - th opponent to increase rating ( 5 \u2192 6 ) ; Now Monocarp have to play with remaining three opponents. So, he will lose 3 times and get rating 3 ( 6 \u2192 5 \u2192 4 \u2192 3 ) ; After that, Monocarp will repeat steps 1- 5 again. After 14 games, he has played twice with each opponent and get final rating 4 . Monocarp plays against the 1 - st opponent to increase rating ( 4 \u2192 5 ) ; Monocarp plays against the 2 - nd opponent to increase rating ( 5 \u2192 6 ) ; Monocarp plays against the 4 - th opponent to increase rating ( 6 \u2192 7 ) ; Monocarp plays against the 5 - th opponent to increase rating ( 7 \u2192 8 ) ; Monocarp plays against the 7 - th opponent to increase rating ( 8 \u2192 9 ) ; Monocarp plays against the 3 - rd opponent to increase rating ( 9 \u2192 10 ) ; In total, Monocarp, played twice against the 6 - th opponent and three times against other opponents and got rating 10 in 14 + 6 = 20 games. In the second test case, it can be proven that whichever games Monocarp plays, he can' t get his rating higher than 4 .",
    "topics": [
      "binary search",
      "greedy",
      "implementation",
      "math",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Copy of a Copy of a Copy",
    "url": "https://codeforces.com/problemset/problem/1772/F",
    "history": "It all started with a black- and- white picture, that can be represented as an n \u00d7 m matrix such that all its elements are either 0 or 1 . The rows are numbered from 1 to n , the columns are numbered from 1 to m . Several operations were performed on the picture ( possibly, zero) , each of one of the two kinds: choose a cell such that it' s not on the border ( neither row 1 or n , nor column 1 or m ) and it' s surrounded by four cells of the opposite color ( four zeros if it' s a one and vice versa) and paint it the opposite color itself; make a copy of the current picture. Note that the order of operations could be arbitrary, they were not necessarily alternating. You are presented with the outcome: all k copies that were made. Additionally, you are given the initial picture. However, all k+ 1 pictures are shuffled. Restore the sequence of the operations. If there are multiple answers, print any of them. The tests are constructed from the real sequence of operations, i. e. at least one answer always exists.",
    "input": "The first line contains three integers n, m and k ( 3 \u2264 n, m \u2264 30 ; 0 \u2264 k \u2264 100 ) \u2014 the number of rows and columns of the pictures and the number of copies made, respectively. Then k+ 1 pictures follow \u2014 k copies and the initial picture. Their order is arbitrary. Each picture consists of n lines, each consisting of m characters, each character is either 0 or 1 . There is an empty line before each picture.",
    "output": "In the first line, print a single integer \u2014 the index of the initial picture. The pictures are numbered from 1 to k+ 1 in the order they appear in the input. In the second line, print a single integer q \u2014 the number of operations. Each of the next q lines should contain an operation. The operations should be listed in order they were applied. Each operation is one of two types: 1 x y \u2014 recolor a cell ( x, y) ( the y - th cell in the x - th row, it should not be on the border and it should be surrounded by four cells of opposite color to itself) ; 2 i \u2014 make a copy of the current picture and assign it index i ( picture with index the i should be equal to the current picture) . Each index from 1 to k+ 1 should appear in the output exactly once \u2014 one of them is the index of the initial picture, the remaining k are arguments of the operations of the second kind. If there are multiple answers, print any of them. The tests are constructed from the real sequence of operations, i. e. at least one answer always exists.",
    "note": " ",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Hossam and Combinatorics",
    "url": "https://codeforces.com/problemset/problem/1771/A",
    "history": "Hossam woke up bored, so he decided to create an interesting array with his friend Hazem. Now, they have an array a of n positive integers, Hossam will choose a number a_ i and Hazem will choose a number a_ j . Count the number of interesting pairs ( a_ i, a_ j) that meet all the following conditions: 1 \u2264 i, j \u2264 n ; i = \u0338 j ; The absolute difference | a_ i - a_ j| must be equal to the maximum absolute difference over all the pairs in the array. More formally, | a_ i - a_ j| = max_ 1 \u2264 p, q \u2264 n | a_ p - a_ q| .",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) , which denotes the number of test cases. Description of the test cases follows. The first line of each test case contains an integer n ( 2 \u2264 n \u2264 10^ 5 ) . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 5 ) . It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case print an integer \u2014 the number of interesting pairs ( a_ i, a_ j) .",
    "note": "In the first example, the two ways are: Hossam chooses the fourth number 8 and Hazem chooses the fifth number 1 . Hossam chooses the fifth number 1 and Hazem chooses the fourth number 8 . In the second example, the four ways are: Hossam chooses the second number 2 and Hazem chooses the sixth number 10 . Hossam chooses the sixth number 10 and Hazem chooses the second number 2 . Hossam chooses the fifth number 2 and Hazem chooses the sixth number 10 . Hossam chooses the sixth number 10 and Hazem chooses the fifth number 2 .",
    "topics": [
      "combinatorics",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Elemental Decompress",
    "url": "https://codeforces.com/problemset/problem/1768/C",
    "history": "You are given an array a of n integers. Find two permutations ^ \u2020 p and q of length n such that max( p_ i, q_ i) = a_ i for all 1 \u2264 i \u2264 n or report that such p and q do not exist. ^ \u2020 A permutation of length n is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [ 2, 3, 1, 5, 4] is a permutation, but [ 1, 2, 2] is not a permutation ( 2 appears twice in the array) , and [ 1, 3, 4] is also not a permutation ( n= 3 but there is 4 in the array) .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 the array a . It is guaranteed that the total sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, if there do not exist p and q that satisfy the conditions, output \" NO\" ( without quotes) . Otherwise, output \" YES\" ( without quotes) and then output 2 lines. The first line should contain n integers p_ 1, p_ 2, . . . , p_ n and the second line should contain n integers q_ 1, q_ 2, . . . , q_ n . If there are multiple solutions, you may output any of them. You can output \" YES\" and \" NO\" in any case ( for example, strings \" yEs\" , \" yes\" and \" Yes\" will be recognized as a positive response) .",
    "note": "In the first test case, p= q= [ 1] . It is correct since a_ 1 = max( p_ 1, q_ 1) = 1 . In the second test case, p= [ 1, 3, 4, 2, 5] and q= [ 5, 2, 3, 1, 4] . It is correct since: a_ 1 = max( p_ 1, q_ 1) = max( 1, 5) = 5 , a_ 2 = max( p_ 2, q_ 2) = max( 3, 2) = 3 , a_ 3 = max( p_ 3, q_ 3) = max( 4, 3) = 4 , a_ 4 = max( p_ 4, q_ 4) = max( 2, 1) = 2 , a_ 5 = max( p_ 5, q_ 5) = max( 5, 4) = 5 . In the third test case, one can show that no such p and q exist.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Block Towers",
    "url": "https://codeforces.com/problemset/problem/1767/B",
    "history": "There are n block towers, numbered from 1 to n . The i - th tower consists of a_ i blocks. In one move, you can move one block from tower i to tower j , but only if a_ i > a_ j . That move increases a_ j by 1 and decreases a_ i by 1 . You can perform as many moves as you would like ( possibly, zero) . What' s the largest amount of blocks you can have on the tower 1 after the moves?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of testcases. The first line of each testcase contains a single integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of towers. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the number of blocks on each tower. The sum of n over all testcases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each testcase, print the largest amount of blocks you can have on the tower 1 after you make any number of moves ( possibly, zero) .",
    "note": "In the first testcase, you can move a block from tower 2 to tower 1 , making the block counts [ 2, 1, 3] . Then move a block from tower 3 to tower 1 , making the block counts [ 3, 1, 2] . Tower 1 has 3 blocks in it, and you can' t obtain a larger amount. In the second testcase, you can move a block from any of towers 2 or 3 to tower 1 , so that it has 2 blocks in it. In the third testcase, you can 500000000 times move a block from tower 2 to tower 1 . After that the block countes will be [ 500000001, 500000000] .",
    "topics": [
      "data structures",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Doremy's Experimental Tree",
    "url": "https://codeforces.com/problemset/problem/1764/F",
    "history": "Doremy has an edge- weighted tree with n vertices whose weights are integers between 1 and 10^ 9 . She does n( n+ 1) / 2 experiments on it. In each experiment, Doremy chooses vertices i and j such that j \u2264 i and connects them directly with an edge with weight 1 . Then, there is exactly one cycle ( or self- loop when i= j ) in the graph. Doremy defines f( i, j) as the sum of lengths of shortest paths from every vertex to the cycle. Formally, let dis_ i, j( x, y) be the length of the shortest path between vertex x and y when the edge ( i, j) of weight 1 is added, and S_ i, j be the set of vertices that are on the cycle when edge ( i, j) is added. Then, f( i, j) = \u2211_ x= 1^ n( min_ y\u2208 S_ i, jdis_ i, j( x, y) ) . Doremy writes down all values of f( i, j) such that 1 \u2264 j \u2264 i \u2264 n , then goes to sleep. However, after waking up, she finds that the tree has gone missing. Fortunately, the values of f( i, j) are still in her notebook, and she knows which i and j they belong to. Given the values of f( i, j) , can you help her restore the tree? It is guaranteed that at least one suitable tree exists.",
    "input": "The first line of input contains a single integer n ( 2 \u2264 n \u2264 2000 ) \u2014 the number of vertices in the tree. The following n lines contain a lower- triangular matrix with i integers on the i - th line; the j - th integer on the i - th line is f( i, j) ( 0 \u2264 f( i, j) \u2264 2\u00b7 10^ 15 ) . It is guaranteed that there exists a tree whose weights are integers between 1 and 10^ 9 such that the values of f( i, j) of the tree match those given in the input.",
    "output": "Print n- 1 lines describing the tree. In the i - th line of the output, output three integers u_ i , v_ i , w_ i ( 1 \u2264 u_ i, v_ i \u2264 n , 1 \u2264 w_ i \u2264 10^ 9 ) , representing an edge ( u_ i, v_ i) whose weight is w_ i . If there are multiple answers, you may output any. All edges must form a tree and all values of f( i, j) must match those given in the input.",
    "note": "In the first test case, the picture below, from left to right, from top to bottom, shows the graph when pairs ( 1, 1) , ( 1, 2) , ( 1, 3) , ( 2, 2) , ( 2, 3) , ( 3, 3) are connected with an edge, respectively. The nodes colored yellow are on the cycle.",
    "topics": [
      "brute force",
      "constructive algorithms",
      "dfs and similar",
      "dsu",
      "sortings",
      "trees"
    ]
  },
  {
    "title": "Doremy's Number Line",
    "url": "https://codeforces.com/problemset/problem/1764/E",
    "history": "Doremy has two arrays a and b of n integers each, and an integer k . Initially, she has a number line where no integers are colored. She chooses a permutation p of [ 1, 2, . . . , n] then performs n moves. On the i - th move she does the following: Pick an uncolored integer x on the number line such that either: x \u2264 a_ p_ i ; or there exists a colored integer y such that y \u2264 a_ p_ i and x \u2264 y+ b_ p_ i . Color integer x with color p_ i . Determine if the integer k can be colored with color 1 .",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1\u2264 t\u2264 10^ 4 ) \u2014 the number of test cases. The description of the test cases follows. The first line contains two integers n and k ( 1 \u2264 n \u2264 10^ 5 , 1 \u2264 k \u2264 10^ 9 ) . Each of the following n lines contains two integers a_ i and b_ i ( 1 \u2264 a_ i, b_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, output \" YES\" ( without quotes) if the point k can be colored with color 1 . Otherwise, output \" NO\" ( without quotes) . You can output \" YES\" and \" NO\" in any case ( for example, strings \" yEs\" , \" yes\" and \" Yes\" will be recognized as a positive response) .",
    "note": "For the first test case, it is impossible to color point 16 with color 1 . For the second test case, p= [ 2, 1, 3, 4] is one possible choice, the detail is shown below. On the first move, pick x= 8 and color it with color 2 since x= 8 is uncolored and x \u2264 a_ 2 . On the second move, pick x= 16 and color it with color 1 since there exists a colored point y= 8 such that y\u2264 a_ 1 and x \u2264 y + b_ 1 . On the third move, pick x= 0 and color it with color 3 since x= 0 is uncolored and x \u2264 a_ 3 . On the forth move, pick x= - 2 and color it with color 4 since x= - 2 is uncolored and x \u2264 a_ 4 . In the end, point - 2, 0, 8, 16 are colored with color 4, 3, 2, 1 , respectively. For the third test case, p= [ 2, 1, 4, 3] is one possible choice. For the fourth test case, p= [ 2, 3, 4, 1] is one possible choice.",
    "topics": [
      "dp",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Incinerate",
    "url": "https://codeforces.com/problemset/problem/1763/B",
    "history": "To destroy humanity, The Monster Association sent n monsters to Earth' s surface. The i - th monster has health h_ i and power p_ i . With his last resort attack, True Spiral Incineration Cannon, Genos can deal k damage to all monsters alive. In other words, Genos can reduce the health of all monsters by k ( if k > 0 ) with a single attack. However, after every attack Genos makes, the monsters advance. With their combined efforts, they reduce Genos' attack damage by the power of the ^ \u2020 weakest monster ^ alive. In other words, the minimum p_ i among all currently living monsters is subtracted from the value of k after each attack. ^ \u2020 The Weakest monster is the one with the least power. ^ A monster is alive if its health is strictly greater than 0 . Will Genos be successful in killing all the monsters?",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains two integers, n and k ( 1 \u2264 n, k \u2264 10^ 5 ) \u2014 the number of monsters and Genos' initial attack damage. Then two lines follow, each containing n integers describing the arrays h and p ( 1 \u2264 h_ i, p_ i \u2264 10^ 9 ) . It' s guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print the answer \u2014 \" YES\" ( without quotes) if Genos could kill all monsters and \" NO\" otherwise.",
    "note": "In the first example, after Genos' first attack, h and k will update to: h: [ 11, 0, 6, 2, 3, 0] k: 7- 1 = 6 After second attack: h: [ 5, 0, 0, 0, 0, 0] k: 6- 2 = 4 After third attack: h: [ 1, 0, 0, 0, 0, 0] k: 4- 2 = 2 After fourth attack: h: [ 0, 0, 0, 0, 0, 0] As Genos could kill all monsters, the answer is YES.",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "implementation",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Unequal Adjacent Elements",
    "url": "https://codeforces.com/problemset/problem/1762/G",
    "history": "You are given an array a consisting of n positive integers. Find any permutation p of [ 1, 2, . . . , n] such that: p_ i- 2 < p_ i for all i , where 3 \u2264 i \u2264 n , and a_ p_ i- 1= \u0338 a_ p_ i for all i , where 2 \u2264 i \u2264 n . Or report that no such permutation exists.",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n ( 3 \u2264 n \u2264 3 \u00b7 10^ 5 ) \u2014 the length of the array a . The second line of each test case contains n space- separated integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 representing the array a . It is guaranteed that the sum of n over all test cases does not exceed 3 \u00b7 10^ 5 .",
    "output": "For each test case, output \" NO\" if no such permutation exists, otherwise output \" YES\" in the first line and print the permutation p in the next line. In case there are multiple permutations, print any one of them. You can output \" YES\" and \" NO\" in any case ( for example, the strings \" yEs\" , \" yes\" , \" Yes\" and \" YES\" will be recognized as a positive response) .",
    "note": "In the first test case, p= [ 1, 2, 3] is the only permutation of [ 1, 2, 3] that satisfy the given constraints. In the second test case, [ 1, 3, 2, 4] , [ 2, 1, 4, 3] and some other permutations are also acceptable. In the third test case, it can be proved that there does not exist any permutation of [ 1, 2, 3] satisfying the given constraints.",
    "topics": [
      "constructive algorithms",
      "sortings"
    ]
  },
  {
    "title": "Make Array Good",
    "url": "https://codeforces.com/problemset/problem/1762/B",
    "history": "An array b of m positive integers is good if for all pairs i and j ( 1 \u2264 i, j \u2264 m ) , max( b_ i, b_ j) is divisible by min( b_ i, b_ j) . You are given an array a of n positive integers. You can perform the following operation: Select an index i ( 1 \u2264 i \u2264 n ) and an integer x ( 0 \u2264 x \u2264 a_ i ) and add x to a_ i , in other words, a_ i : = a_ i+ x . After this operation, a_ i \u2264 10^ 18 should be satisfied. You have to construct a sequence of at most n operations that will make a good. It can be proven that under the constraints of the problem, such a sequence of operations always exists.",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of the array a . The second line of each test case contains n space- separated integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 representing the array a . It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test, output a single integer p ( 0 \u2264 p \u2264 n ) \u2014 denoting the number of operations in your solution. In each of the following p lines, output two space- separated integers \u2014 i and x . You do not need to minimize the number of operations. It can be proven that a solution always exists.",
    "note": "In the first test case, array a becomes [ 5, 5, 5, 5] after the operations. It is easy to see that [ 5, 5, 5, 5] is good. In the second test case, array a is already good. In the third test case, after performing the operations, array a becomes [ 10, 5, 350, 5, 10] , which is good. In the fourth test case, after performing the operations, array a becomes [ 60, 10, 20] , which is good.",
    "topics": [
      "constructive algorithms",
      "implementation",
      "number theory",
      "sortings"
    ]
  },
  {
    "title": "Quests",
    "url": "https://codeforces.com/problemset/problem/1760/F",
    "history": "There are n quests. If you complete the i - th quest, you will gain a_ i coins. You can only complete at most one quest per day. However, once you complete a quest, you cannot do the same quest again for k days. ( For example, if k= 2 and you do quest 1 on day 1 , then you cannot do it on day 2 or 3 , but you can do it again on day 4 . ) You are given two integers c and d . Find the maximum value of k such that you can gain at least c coins over d days. If no such k exists, output Impossible. If k can be arbitrarily large, output Infinity.",
    "input": "The input consists of multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains three integers n, c, d ( 2 \u2264 n \u2264 2\u00b710^ 5 ; 1 \u2264 c \u2264 10^ 16 ; 1 \u2264 d \u2264 2\u00b710^ 5 ) \u2014 the number of quests, the number of coins you need, and the number of days. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the rewards for the quests. The sum of n over all test cases does not exceed 2\u00b710^ 5 , and the sum of d over all test cases does not exceed 2\u00b710^ 5 .",
    "output": "For each test case, output one of the following. If no such k exists, output Impossible. If k can be arbitrarily large, output Infinity. Otherwise, output a single integer \u2014 the maximum value of k such that you can gain at least c coins over d days. Please note, the checker is case- sensitive, and you should output strings exactly as they are given.",
    "note": "In the first test case, one way to earn 5 coins over 4 days with k= 2 is as follows: Day 1: do quest 2, and earn 2 coins. Day 2: do quest 1, and earn 1 coin. Day 3: do nothing. Day 4: do quest 2, and earn 2 coins. In total, we earned 2+ 1+ 2= 5 coins. In the second test case, we can make over 20 coins on the first day itself by doing the first quest to earn 100 coins, so the value of k can be arbitrarily large, since we never need to do another quest. In the third test case, no matter what we do, we can' t earn 100 coins over 3 days.",
    "topics": [
      "binary search",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Advantage",
    "url": "https://codeforces.com/problemset/problem/1760/C",
    "history": "There are n participants in a competition, participant i having a strength of s_ i . Every participant wonders how much of an advantage they have over the other best participant. In other words, each participant i wants to know the difference between s_ i and s_ j , where j is the strongest participant in the competition, not counting i ( a difference can be negative) . So, they ask you for your help! For each i ( 1 \u2264 i \u2264 n ) output the difference between s_ i and the maximum strength of any participant other than participant i .",
    "input": "The input consists of multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The descriptions of the test cases follow. The first line of each test case contains an integer n ( 2 \u2264 n \u2264 2\u00b710^ 5 ) \u2014 the length of the array. The following line contains n space- separated positive integers s_ 1 , s_ 2 , . . . , s_ n ( 1 \u2264 s_ i \u2264 10^ 9 ) \u2014 the strengths of the participants. It is guaranteed that the sum of n over all test cases does not exceed 2\u00b710^ 5 .",
    "output": "For each test case, output n space- separated integers. For each i ( 1 \u2264 i \u2264 n ) output the difference between s_ i and the maximum strength of any other participant.",
    "note": "For the first test case: The first participant has a strength of 4 and the largest strength of a participant different from the first one is 7 , so the answer for the first participant is 4 - 7 = - 3 . The second participant has a strength of 7 and the largest strength of a participant different from the second one is 5 , so the answer for the second participant is 7 - 5 = 2 . The third participant has a strength of 3 and the largest strength of a participant different from the third one is 7 , so the answer for the third participant is 3 - 7 = - 4 . The fourth participant has a strength of 5 and the largest strength of a participant different from the fourth one is 7 , so the answer for the fourth participant is 5 - 7 = - 2 .",
    "topics": [
      "data structures",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Medium Number",
    "url": "https://codeforces.com/problemset/problem/1760/A",
    "history": "Given three distinct integers a , b , and c , find the medium number between all of them. The medium number is the number that is neither the minimum nor the maximum of the given three numbers. For example, the median of 5, 2, 6 is 5 , since the minimum is 2 and the maximum is 6 .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 6840 ) \u2014 the number of test cases. The description of each test case consists of three distinct integers a , b , c ( 1 \u2264 a, b, c \u2264 20 ) .",
    "output": "For each test case, output a single integer \u2014 the medium number of the three numbers.",
    "note": " ",
    "topics": [
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "The Humanoid",
    "url": "https://codeforces.com/problemset/problem/1759/E",
    "history": "There are n astronauts working on some space station. An astronaut with the number i ( 1 \u2264 i \u2264 n ) has power a_ i . An evil humanoid has made his way to this space station. The power of this humanoid is equal to h . Also, the humanoid took with him two green serums and one blue serum. In one second , a humanoid can do any of three actions: to absorb an astronaut with power strictly less humanoid power; to use green serum, if there is still one left; to use blue serum, if there is still one left. When an astronaut with power a_ i is absorbed, this astronaut disappears, and power of the humanoid increases by \u230aa_ i/ 2\u230b , that is, an integer part of a_ i/ 2 . For example, if a humanoid absorbs an astronaut with power 4 , its power increases by 2 , and if a humanoid absorbs an astronaut with power 7 , its power increases by 3 . After using the green serum, this serum disappears, and the power of the humanoid doubles, so it increases by 2 times. After using the blue serum, this serum disappears, and the power of the humanoid triples, so it increases by 3 times. The humanoid is wondering what the maximum number of astronauts he will be able to absorb if he acts optimally.",
    "input": "The first line of each test contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 number of test cases. The first line of each test case contains integers n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 number of astronauts and h ( 1 \u2264 h \u2264 10^ 6 ) \u2014 the initial power of the humanoid. The second line of each test case contains n integers a_ i ( 1 \u2264 a_ i \u2264 10^ 8 ) \u2014 powers of astronauts. It is guaranteed that the sum of n for all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, in a separate line, print the maximum number of astronauts that a humanoid can absorb.",
    "note": "In the first case, you can proceed as follows: use green serum. h = 1 \u00b7 2 = 2 absorb the cosmonaut 2 . h = 2 + \u230a1/ 2\u230b = 2 use green serum. h = 2 \u00b7 2 = 4 absorb the spaceman 1 . h = 4 + \u230a2/ 2\u230b = 5 use blue serum. h = 5 \u00b7 3 = 15 absorb the spaceman 3 . h = 15 + \u230a8/ 2\u230b = 19 absorb the cosmonaut 4 . h = 19 + \u230a9/ 2\u230b = 23",
    "topics": [
      "brute force",
      "dp",
      "sortings"
    ]
  },
  {
    "title": "Olympiad Training",
    "url": "https://codeforces.com/problemset/problem/1746/G",
    "history": "Anton decided to get ready for an Olympiad in Informatics. Ilya prepared n tasks for him to solve. It is possible to submit the solution for the i - th task in the first d_ i days only. Anton cannot solve more than one task a day. Ilya estimated the usefulness of the i - th tasks as r_ i and divided the tasks into three topics, the topic of the i - th task is type_ i . Anton wants to solve exactly a tasks on the first topic, b tasks on the second topic and c tasks on the third topic. Tell Anton if it is possible to do so, and if it is, calculate the maximum total usefulness of the tasks he may solve.",
    "input": "The first line of input contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains four integers n, a, b, c ( 1 \u2264 n \u2264 10^ 5 , 0 \u2264 a, b, c \u2264 n ) . The following n lines contain three integers each \u2014 r_ i, type_ i, d_ i ( 0 \u2264 r_ i \u2264 10^ 9 , 1 \u2264 type_ i \u2264 3 , 1 \u2264 d_ i \u2264 n ) . The sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case print - 1 if Anton cannot reach his goal; otherwise, print the maximum usefulness of the tasks he will solve.",
    "note": "In the first test case from the sample test Anton can solve tasks 2 and 4 . In the second test case from the sample test it is impossible to fulfill Anton' s wish. In the third test case from the sample test it is optimal to solve tasks 2 , 3 and 4 . In the last test case from the sample test it is optimal to solve tasks 1 , 2 and 4 .",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "flows",
      "geometry",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Paths on the Tree",
    "url": "https://codeforces.com/problemset/problem/1746/D",
    "history": "You are given a rooted tree consisting of n vertices. The vertices are numbered from 1 to n , and the root is the vertex 1 . You are also given a score array s_ 1, s_ 2, . . . , s_ n . A multiset of k simple paths is called valid if the following two conditions are both true. Each path starts from 1 . Let c_ i be the number of paths covering vertex i . For each pair of vertices ( u, v) ( 2\u2264 u, v\u2264 n ) that have the same parent, | c_ u- c_ v| \u2264 1 holds. The value of the path multiset is defined as \u2211_ i= 1^ n c_ i s_ i . It can be shown that it is always possible to find at least one valid multiset. Find the maximum value among all valid multisets.",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains two space- separated integers n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) and k ( 1 \u2264 k \u2264 10^ 9 ) \u2014 the size of the tree and the required number of paths. The second line contains n - 1 space- separated integers p_ 2, p_ 3, . . . , p_ n ( 1\u2264 p_ i\u2264 n ) , where p_ i is the parent of the i - th vertex. It is guaranteed that this value describe a valid tree with root 1 . The third line contains n space- separated integers s_ 1, s_ 2, . . . , s_ n ( 0 \u2264 s_ i \u2264 10^ 4 ) \u2014 the scores of the vertices. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10 ^ 5 .",
    "output": "For each test case, print a single integer \u2014 the maximum value of a path multiset.",
    "note": "In the first test case, one of optimal solutions is four paths 1 \u2192 2 \u2192 3 \u2192 5 , 1 \u2192 2 \u2192 3 \u2192 5 , 1 \u2192 4 , 1 \u2192 4 , here c= [ 4, 2, 2, 2, 2] . The value equals to 4\u00b7 6+ 2\u00b7 2+ 2\u00b7 1+ 2\u00b7 5+ 2\u00b7 7= 54 . In the second test case, one of optimal solution is three paths 1 \u2192 2 \u2192 3 \u2192 5 , 1 \u2192 2 \u2192 3 \u2192 5 , 1 \u2192 4 , here c= [ 3, 2, 2, 1, 2] . The value equals to 3\u00b7 6+ 2\u00b7 6+ 2\u00b7 1+ 1\u00b7 4+ 2\u00b7 10= 56 .",
    "topics": [
      "dfs and similar",
      "dp",
      "greedy",
      "sortings",
      "trees"
    ]
  },
  {
    "title": "Divisibility by 2^n",
    "url": "https://codeforces.com/problemset/problem/1744/D",
    "history": "You are given an array of positive integers a_ 1, a_ 2, . . . , a_ n . Make the product of all the numbers in the array ( that is, a_ 1 \u00b7 a_ 2 \u00b7. . . \u00b7 a_ n ) divisible by 2^ n . You can perform the following operation as many times as you like: select an arbitrary index i ( 1 \u2264 i \u2264 n ) and replace the value a_ i with a_ i= a_ i \u00b7 i . You cannot apply the operation repeatedly to a single index. In other words, all selected values of i must be different. Find the smallest number of operations you need to perform to make the product of all the elements in the array divisible by 2^ n . Note that such a set of operations does not always exist.",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number test cases. Then the descriptions of the input data sets follow. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of array a . The second line of each test case contains exactly n integers: a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n values over all test cases in a test does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print the least number of operations to make the product of all numbers in the array divisible by 2^ n . If the answer does not exist, print - 1.",
    "note": "In the first test case, the product of all elements is initially 2 , so no operations needed. In the second test case, the product of elements initially equals 6 . We can apply the operation for i = 2 , and then a_ 2 becomes 2\u00b72= 4 , and the product of numbers becomes 3\u00b74= 12 , and this product of numbers is divided by 2^ n= 2^ 2= 4 . In the fourth test case, even if we apply all possible operations, we still cannot make the product of numbers divisible by 2^ n \u2014 it will be ( 13\u00b71) \u00b7( 17\u00b72) \u00b7( 1\u00b73) \u00b7( 1\u00b74) = 5304 , which does not divide by 2^ n= 2^ 4= 16 . In the fifth test case, we can apply operations for i = 2 and i = 4 .",
    "topics": [
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Orray",
    "url": "https://codeforces.com/problemset/problem/1742/G",
    "history": "You are given an array a consisting of n nonnegative integers. Let' s define the prefix OR array b as the array b_ i = a_ 1 OR a_ 2 OR . . . OR a_ i , where OR represents the bitwise OR operation. In other words, the array b is formed by computing the OR of every prefix of a . You are asked to rearrange the elements of the array a in such a way that its prefix OR array is lexicographically maximum. An array x is lexicographically greater than an array y if in the first position where x and y differ, x_ i > y_ i .",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the array a . The second line of each test case contains n nonnegative integers a_ 1, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case print n integers \u2014 any rearrangement of the array a that obtains the lexicographically maximum prefix OR array.",
    "note": " ",
    "topics": [
      "bitmasks",
      "brute force",
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Increasing",
    "url": "https://codeforces.com/problemset/problem/1742/B",
    "history": "You are given an array a of n positive integers. Determine if, by rearranging the elements, you can make the array strictly increasing. In other words, determine if it is possible to rearrange the elements such that a_ 1 < a_ 2 < . . . < a_ n holds.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 100 ) \u2014 the length of the array. The second line of each test case contains n integers a_ i ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the elements of the array.",
    "output": "For each test case, output \" YES\" ( without quotes) if the array satisfies the condition, and \" NO\" ( without quotes) otherwise. You can output the answer in any case ( for example, the strings \" yEs\" , \" yes\" , \" Yes\" and \" YES\" will be recognized as a positive answer) .",
    "note": "In the first test case any rearrangement will keep the array [ 1, 1, 1, 1] , which is not strictly increasing. In the second test case, you can make the array [ 1, 3, 4, 7, 8] .",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Multi-Colored Segments",
    "url": "https://codeforces.com/problemset/problem/1741/F",
    "history": "Dmitry has n segments of different colors on the coordinate axis Ox . Each segment is characterized by three integers l_ i , r_ i and c_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 10^ 9, 1 \u2264 c_ i \u2264 n ) , where l_ i and r_ i are are the coordinates of the ends of the i - th segment, and c_ i is its color. Dmitry likes to find the minimum distances between segments. However, he considers pairs of segments of the same color uninteresting. Therefore, he wants to know for each segment the distance from this segment to the nearest differently colored segment. The distance between two segments is the minimum of the distances between a point of the first segment and a point of the second segment. In particular, if the segments intersect, then the distance between them is equal to 0 . For example, Dmitry has 5 segments: The first segment intersects with the second ( and these are segments of different colors) , so the answers for them are equal to 0 . For the 3 - rd segment, the nearest segment of a different color is the 2 - nd segment, the distance to which is equal to 2 . For the 4 - th segment, the nearest segment of a different color is the 5 - th segment, the distance to which is equal to 1 . The 5 - th segment lies inside the 2 - nd segment ( and these are segments of different colors) , so the answers for them are equal to 0 .",
    "input": "The first line of the input contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the test. The descriptions of the test cases follow. The first line of description of each test case contains one integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of segments. The next n lines contain descriptions of the segments. Each segment is described by three integers l_ i , r_ i and c_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 10^ 9, 1 \u2264 c_ i \u2264 n ) \u2014 coordinates of the left and right ends of i - th segment, as well as the color of this segment. It is guaranteed that there are at least 2 segments of different colors. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, on a separate line print n integers, where the i - th number is equal to the distance from the i - th segment to the nearest segment of a different color.",
    "note": "In the first test case of the first sample there is only one segment of color 2 , and all other segments have color 1 . Therefore, for segments of color 1 , the answer is equal to the distance to the 3 rd segment, and for 3 rd one, the answer is equal to the minimum of the distances to segments of color 1 . In the second test case of the first sample there are only 2 segments, and for both of them the answer is equal to the distance between them. In the third test case of the first sample, each segment intersects at least one of its ends with a segment of a different color, so all answers are equal to 0 . The fourth test case of the first sample is described in the problem statement. In the fifth test case of the first sample, one segment lies completely inside the other, and for both of them the answer is 0 . In the sixth test case of the first sample, all segments are points of different colors.",
    "topics": [
      "binary search",
      "data structures",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Masha and a Beautiful Tree",
    "url": "https://codeforces.com/problemset/problem/1741/D",
    "history": "The girl named Masha was walking in the forest and found a complete binary tree of height n and a permutation p of length m= 2^ n . A complete binary tree of height n is a rooted tree such that every vertex except the leaves has exactly two sons, and the length of the path from the root to any of the leaves is n . The picture below shows the complete binary tree for n= 2 . A permutation is an array consisting of n different integers from 1 to n . For example, [ 2, 3, 1, 5, 4 ] is a permutation, but [ 1, 2, 2 ] is not ( 2 occurs twice) , and [ 1, 3, 4 ] is also not a permutation ( n= 3 , but there is 4 in the array) . Let' s enumerate m leaves of this tree from left to right. The leaf with the number i contains the value p_ i ( 1 \u2264 i \u2264 m ) . For example, if n = 2 , p = [ 3, 1, 4, 2] , the tree will look like this: Masha considers a tree beautiful if the values in its leaves are ordered from left to right in increasing order. In one operation, Masha can choose any non- leaf vertex of the tree and swap its left and right sons ( along with their subtrees) . For example, if Masha applies this operation to the root of the tree discussed above, it will take the following form: Help Masha understand if she can make a tree beautiful in a certain number of operations. If she can, then output the minimum number of operations to make the tree beautiful.",
    "input": "The first line contains single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 number of test cases. In each test case, the first line contains an integer m ( 1 \u2264 m \u2264 262144 ) , which is a power of two \u2014 the size of the permutation p . The second line contains m integers: p_ 1, p_ 2, . . . , p_ m ( 1 \u2264 p_ i \u2264 m ) \u2014 the permutation p . It is guaranteed that the sum of m over all test cases does not exceed 3 \u00b7 10^ 5 .",
    "output": "For each test case in a separate line, print the minimum possible number of operations for which Masha will be able to make the tree beautiful or - 1, if this is not possible.",
    "note": "Consider the first test. In the first test case, you can act like this ( the vertex to which the operation is applied at the current step is highlighted in purple) : It can be shown that it is impossible to make a tree beautiful in fewer operations. In the second test case, it can be shown that it is impossible to make a tree beautiful. In the third test case, the tree is already beautiful.",
    "topics": [
      "dfs and similar",
      "divide and conquer",
      "graphs",
      "sortings",
      "trees"
    ]
  },
  {
    "title": "Dangerous Laser Power",
    "url": "https://codeforces.com/problemset/problem/1740/G",
    "history": "Pak Chanek has an n \u00d7 m grid of portals. The portal on the i - th row and j - th column is denoted as portal ( i, j) . The portals ( 1, 1) and ( n, m) are on the north- west and south- east corner of the grid respectively. The portal ( i, j) has two settings: Type t_ i, j , which is either 0 or 1 . Strength s_ i, j , which is an integer between 1 and 10^ 9 inclusive. Each portal has 4 faces labelled with integers 0, 1, 2, 3 , which correspond to the north, east, south, and west direction respectively. When a laser enters face k of portal ( i, j) with speed x_ in , it leaves the portal going out of face ( k+ 2+ t_ i, j) 4 with speed x_ out = max( x_ in, s_ i, j) . The portal also has to consume x_ out - x_ in units of energy. Pak Chanek is very bored today. He will shoot 4nm lasers with an initial speed of 1 , one into each face of each portal. Each laser will travel throughout this grid of portals until it moves outside the grid or it has passed through 10^ 100 portals. At the end, Pak Chanek thinks that a portal is good if and only if the total energy consumed by that portal modulo 2 is equal to its type. Given the strength settings of all portals, find a way to assign the type settings of each portal such that the number of good portals is maximised.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 1000 ) \u2014 the number of rows and columns in the grid. The i - th of the next n lines contains m integers, with the j - th integer being s_ i, j ( 1 \u2264 s_ i, j\u2264 10^ 9 ) \u2014 the strength of portal ( i, j) .",
    "output": "Print n lines with each line containing a string of length m consisting of characters 0 or 1 representing the type settings. The j - th character in the i - th string is the type setting of portal ( i, j) . If there are multiple solutions, you can output any of them.",
    "note": "In the first example, let' s consider the laser Pak Chanek shoots into face 1 of portal ( 2, 2) . The laser travels as follows: The laser enters face 1 of portal ( 2, 2) with speed 1 . It leaves the portal going out of face 3 with speed 5 . Portal ( 2, 2) consumes 4 units of energy. The laser enters face 1 of portal ( 2, 1) with speed 5 . It leaves the portal going out of face 0 with speed 6 . Portal ( 2, 1) consumes 1 units of energy. The laser enters face 2 of portal ( 1, 1) with speed 6 . It leaves the portal going out of face 1 with speed 8 . Portal ( 1, 1) consumes 2 units of energy. The laser enters face 3 of portal ( 1, 2) with speed 8 . It leaves the portal going out of face 2 with speed 8 . Portal ( 1, 2) consumes 0 units of energy. The laser enters face 0 of portal ( 2, 2) with speed 8 . It leaves the portal going out of face 2 with speed 8 . Portal ( 2, 2) consumes 0 units of energy. The illustration of the travel of the laser above is as follows. As an example, consider portal ( 2, 3) . We can calculate that the total energy consumed by that portal in the end will be 32 . Since 32 2 = 0 and t_ 2, 3 = 0 , then it is a good portal.",
    "topics": [
      "constructive algorithms",
      "dsu",
      "sortings"
    ]
  },
  {
    "title": "Bricks and Bags",
    "url": "https://codeforces.com/problemset/problem/1740/C",
    "history": "There are n bricks numbered from 1 to n . Brick i has a weight of a_ i . Pak Chanek has 3 bags numbered from 1 to 3 that are initially empty. For each brick, Pak Chanek must put it into one of the bags. After this, each bag must contain at least one brick. After Pak Chanek distributes the bricks, Bu Dengklek will take exactly one brick from each bag. Let w_ j be the weight of the brick Bu Dengklek takes from bag j . The score is calculated as | w_ 1 - w_ 2| + | w_ 2 - w_ 3| , where | x| denotes the absolute value of x . It is known that Bu Dengklek will take the bricks in such a way that minimises the score. What is the maximum possible final score if Pak Chanek distributes the bricks optimally?",
    "input": "Each test contains multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 4 ) \u2014 the number of test cases. The following lines contain the description of each test case. The first line of each test case contains an integer n ( 3 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of bricks. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the weights of the bricks. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output a line containing an integer representing the maximum possible final score if Pak Chanek distributes the bricks optimally.",
    "note": "In the first test case, one way of achieving a final score of 6 is to do the following: Put bricks 1 , 4 , and 5 into bag 1 . Put brick 3 into bag 2 . Put brick 2 into bag 3 . If Pak Chanek distributes the bricks that way, a way Bu Dengklek can take the bricks is: Take brick 5 from bag 1 . Take brick 3 from bag 2 . Take brick 2 from bag 3 . The score is | a_ 5 - a_ 3| + | a_ 3 - a_ 2| = | 3 - 5| + | 5 - 1| = 6 . It can be shown that Bu Dengklek cannot get a smaller score from this distribution. It can be shown that there is no other distribution that results in a final score bigger than 6 .",
    "topics": [
      "constructive algorithms",
      "games",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Jumbo Extra Cheese 2",
    "url": "https://codeforces.com/problemset/problem/1740/B",
    "history": "Pak Chanek has n two- dimensional slices of cheese. The i - th slice of cheese can be represented as a rectangle of dimensions a_ i \u00d7 b_ i . We want to arrange them on the two- dimensional plane such that: Each edge of each cheese is parallel to either the x- axis or the y- axis. The bottom edge of each cheese is a segment of the x- axis. No two slices of cheese overlap, but their sides can touch. They form one connected shape. Note that we can arrange them in any order ( the leftmost slice of cheese is not necessarily the first slice of cheese) . Also note that we can rotate each slice of cheese in any way as long as all conditions still hold. Find the minimum possible perimeter of the constructed shape.",
    "input": "Each test contains multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 4 ) \u2014 the number of test cases. The following lines contain the description of each test case. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of slices of cheese Pak Chanek has. The i - th of the next n lines of each test case contains two integers a_ i and b_ i ( 1 \u2264 a_ i, b_ i \u2264 10^ 9 ) \u2014 the dimensions of the i - th slice of cheese. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output a line containing an integer representing the minimum possible perimeter of the constructed shape.",
    "note": "In the first test case, a way of getting the minimum possible perimeter is to arrange the slices of cheese as follows. We can calculate that the perimeter of the constructed shape is 2+ 5+ 1+ 1+ 1+ 1+ 3+ 1+ 5+ 1+ 2+ 3= 26 . It can be shown that we cannot get a smaller perimeter. Consider the following invalid arrangement. Even though the perimeter of the shape above is 24 , it does not satisfy all conditions of the problem. The bottom edge of the 1 \u00d7 1 slice of cheese is not a segment of the x- axis. In the second test case, a way of getting the minimum possible perimeter is to arrange the slices of cheese as follows. We can calculate that the perimeter of the constructed shape is 2+ 2+ 2+ 3+ 2+ 3+ 2+ 2+ 2+ 4= 24 . It can be shown that we cannot get a smaller perimeter.",
    "topics": [
      "geometry",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Prefix Sum Addicts",
    "url": "https://codeforces.com/problemset/problem/1738/B",
    "history": "Suppose a_ 1, a_ 2, . . . , a_ n is a sorted integer sequence of length n such that a_ 1 \u2264 a_ 2 \u2264. . . \u2264 a_ n . For every 1 \u2264 i \u2264 n , the prefix sum s_ i of the first i terms a_ 1, a_ 2, . . . , a_ i is defined by s_ i = \u2211_ k= 1^ i a_ k = a_ 1 + a_ 2 + . . . + a_ i. Now you are given the last k terms of the prefix sums, which are s_ n- k+ 1, . . . , s_ n- 1, s_ n . Your task is to determine whether this is possible. Formally, given k integers s_ n- k+ 1, . . . , s_ n- 1, s_ n , the task is to check whether there is a sequence a_ 1, a_ 2, . . . , a_ n such that a_ 1 \u2264 a_ 2 \u2264. . . \u2264 a_ n , and s_ i = a_ 1 + a_ 2 + . . . + a_ i for all n- k+ 1 \u2264 i \u2264 n .",
    "input": "Each test contains multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. The following lines contain the description of each test case. The first line of each test case contains two integers n ( 1 \u2264 n \u2264 10^ 5 ) and k ( 1 \u2264 k \u2264 n ) , indicating the length of the sequence a and the number of terms of prefix sums, respectively. The second line of each test case contains k integers s_ n- k+ 1, . . . , s_ n- 1, s_ n ( - 10^ 9 \u2264 s_ i \u2264 10^ 9 for every n- k+ 1 \u2264 i \u2264 n ) . It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, output \" YES\" ( without quotes) if it is possible and \" NO\" ( without quotes) otherwise. You can output \" YES\" and \" NO\" in any case ( for example, strings \" yEs\" , \" yes\" and \" Yes\" will be recognized as a positive response) .",
    "note": "In the first test case, we have the only sequence a = [ 1, 1, 1, 1, 1] . In the second test case, we can choose, for example, a = [ - 3, - 2, - 1, 0, 1, 2, 3] . In the third test case, the prefix sums define the only sequence a = [ 2, 1, 1] , but it is not sorted. In the fourth test case, it can be shown that there is no sequence with the given prefix sums.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Glory Addicts",
    "url": "https://codeforces.com/problemset/problem/1738/A",
    "history": "The hero is addicted to glory, and is fighting against a monster. The hero has n skills. The i - th skill is of type a_ i ( either fire or frost) and has initial damage b_ i . The hero can perform all of the n skills in any order ( with each skill performed exactly once) . When performing each skill, the hero can play a magic as follows: If the current skill immediately follows another skill of a different type, then its damage is doubled. In other words, If a skill of type fire and with initial damage c is performed immediately after a skill of type fire, then it will deal c damage; If a skill of type fire and with initial damage c is performed immediately after a skill of type frost, then it will deal 2c damage; If a skill of type frost and with initial damage c is performed immediately after a skill of type fire, then it will deal 2c damage; If a skill of type frost and with initial damage c is performed immediately after a skill of type frost , then it will deal c damage. Your task is to find the maximum damage the hero can deal.",
    "input": "Each test contains multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. The following lines contain the description of each test case. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 10^ 5 ) , indicating the number of skills. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 1 ) , where a_ i indicates the type of the i - th skill. Specifically, the i - th skill is of type fire if a_ i = 0 , and of type frost if a_ i = 1 . The third line of each test case contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 10^ 9 ) , where b_ i indicates the initial damage of the i - th skill. It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, output the maximum damage the hero can deal.",
    "note": "In the first test case, we can order the skills by [ 3, 1, 4, 2] , and the total damage is 100 + 2 \u00d7 1 + 2 \u00d7 1000 + 10 = 2112 . In the second test case, we can order the skills by [ 1, 4, 2, 5, 3, 6] , and the total damage is 3 + 2 \u00d7 6 + 2 \u00d7 4 + 2 \u00d7 7 + 2 \u00d7 5 + 2 \u00d7 8 = 63 . In the third test case, we can order the skills by [ 1, 2, 3] , and the total damage is 1000000000 + 1000000000 + 1000000000 = 3000000000 . In the fourth test case, there is only one skill with initial damage 1 , so the total damage is 1 .",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Make A Equal to B",
    "url": "https://codeforces.com/problemset/problem/1736/A",
    "history": "You are given two arrays a and b of n elements, each element is either 0 or 1 . You can make operations of 2 kinds. Pick an index i and change a_ i to 1- a_ i . Rearrange the array a however you want. Find the minimum number of operations required to make a equal to b .",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 400 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 100 ) \u2014 the length of the arrays a and b . The second line of each test case contains n space- separated integers a_ 1, a_ 2, . . . , a_ n ( a_ i is 0 or 1 ) , representing the array a . The third line of each test case contains n space- separated integers b_ 1, b_ 2, . . . , b_ n ( b_ i is 0 or 1 ) , representing the array b .",
    "output": "For each test case, print the minimum number of operations required to make a equal to b .",
    "note": "In the first case, we need only one operation: change a_ 1 to 1- a_ i . Now a = [ 0, 0] which is equal to b . In the second case, the optimal way is to rearrange a to get the array [ 0, 1, 11 . Now a = [ 0, 0, 1] which is equal to b . In the second case, one of optimal ways would be to first change a_ 3 to 1 - a_ 3 , then rearrange a . In the third case, no operation is needed. In the fourth case, the optimal way is to rearrange a to get the array [ 0, 1, 1, 0] .",
    "topics": [
      "brute force",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Select Three Sticks",
    "url": "https://codeforces.com/problemset/problem/1734/A",
    "history": "You are given n sticks with positive integral length a_ 1, a_ 2, . . . , a_ n . You can perform the following operation any number of times ( possibly zero) : choose one stick, then either increase or decrease its length by 1 . After each operation, all sticks should have positive lengths. What is the minimum number of operations that you have to perform such that it is possible to select three of the n sticks and use them without breaking to form an equilateral triangle? An equilateral triangle is a triangle where all of its three sides have the same length.",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n ( 3 \u2264 n \u2264 300 ) \u2014 the number of sticks. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the lengths of the sticks. It is guaranteed that the sum of n over all test cases does not exceed 300 .",
    "output": "For each test case, print one integer on a single line \u2014 the minimum number of operations to be made.",
    "note": "In the first test case, you can increase the length of the first stick by 1 , then decrease the length of the third stick by 1 . In total, you perform 2 operations, such that the three sticks form an equilateral triangle of side length 2 . In the fourth test case, you can decrease the length of the seventh stick by 1 . An equilateral triangle of side length 1 can be selected and formed by the second, fourth, and seventh sticks.",
    "topics": [
      "brute force",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Parity Shuffle Sorting",
    "url": "https://codeforces.com/problemset/problem/1733/C",
    "history": "You are given an array a with n non- negative integers. You can apply the following operation on it. Choose two indices l and r ( 1 \u2264 l < r \u2264 n ) . If a_ l + a_ r is odd, do a_ r : = a_ l . If a_ l + a_ r is even, do a_ l : = a_ r . Find any sequence of at most n operations that makes a non- decreasing. It can be proven that it is always possible. Note that you do not have to minimize the number of operations. An array a_ 1, a_ 2, . . . , a_ n is non- decreasing if and only if a_ 1 \u2264 a_ 2 \u2264. . . \u2264 a_ n .",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. Each test case consists of two lines. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of the array. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) \u2014 the array itself. It is guaranteed that the sum of n over all test cases doesn' t exceed 10^ 5 .",
    "output": "For each test case, print one integer m ( 0 \u2264 m \u2264 n ) , the number of operations, in the first line. Then print m lines. Each line must contain two integers l_ i, r_ i , which are the indices you chose in the i - th operation ( 1 \u2264 l_ i < r_ i \u2264 n ) . If there are multiple solutions, print any of them.",
    "note": "In the second test case, a changes like this: Select indices 3 and 4 . a_ 3 + a_ 4 = 3 is odd, so do a_ 4 : = a_ 3 . a = [ 1, 1000000000, 3, 3, 5] now. Select indices 1 and 2 . a_ 1 + a_ 2 = 1000000001 is odd, so do a_ 2 : = a_ 1 . a = [ 1, 1, 3, 3, 5] now, and it is non- decreasing. In the first and third test cases, a is already non- decreasing.",
    "topics": [
      "constructive algorithms",
      "sortings"
    ]
  },
  {
    "title": "Consecutive Sum",
    "url": "https://codeforces.com/problemset/problem/1733/A",
    "history": "You are given an array a with n integers. You can perform the following operation at most k times: Choose two indices i and j , in which i k = j k ( 1 \u2264 i < j \u2264 n ) . Swap a_ i and a_ j . After performing all operations, you have to select k consecutive elements, and the sum of the k elements becomes your score. Find the maximum score you can get. Here x y denotes the remainder from dividing x by y .",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 600 ) \u2014 the number of test cases. Each test case consists of two lines. The first line of each test case contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 100 ) \u2014 the length of the array and the number in the statement above. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) \u2014 the array itself.",
    "output": "For each test case, print the maximum score you can get, one per line.",
    "note": "In the first test case, we can get a score of 11 if we select a_ 1, a_ 2 without performing any operations. In the third test case, we can get a score of 15 if we first swap a_ 1 with a_ 4 and then select a_ 3, a_ 4, a_ 5 .",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Minimum Notation",
    "url": "https://codeforces.com/problemset/problem/1730/C",
    "history": "You have a string s consisting of digits from 0 to 9 inclusive. You can perform the following operation any ( possibly zero) number of times: You can choose a position i and delete a digit d on the i - th position. Then insert the digit min( d + 1, 9) on any position ( at the beginning, at the end or in between any two adjacent digits) . What is the lexicographically smallest string you can get by performing these operations? A string a is lexicographically smaller than a string b of the same length if and only if the following holds: in the first position where a and b differ, the string a has a smaller digit than the corresponding digit in b .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then the test cases follow. Each test case consists of a single line that contains one string s ( 1 \u2264 | s| \u2264 2 \u00b7 10^ 5 ) \u2014 the string consisting of digits. Please note that s is just a string consisting of digits, so leading zeros are allowed. It is guaranteed that the sum of lengths of s over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "Print a single string \u2014 the minimum string that is possible to obtain.",
    "note": "In the first test case: Delete 8 and insert 9 at the end of the notation. The resulting notation is 04299 . Delete 4 and insert 5 in the 3 - rd position of the notation. The resulting notation is 02599 . Nothing needs to be done in the second and third test cases.",
    "topics": [
      "data structures",
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Planets",
    "url": "https://codeforces.com/problemset/problem/1730/A",
    "history": "One day, Vogons wanted to build a new hyperspace highway through a distant system with n planets. The i - th planet is on the orbit a_ i , there could be multiple planets on the same orbit. It' s a pity that all the planets are on the way and need to be destructed. Vogons have two machines to do that. The first machine in one operation can destroy any planet at cost of 1 Triganic Pu. The second machine in one operation can destroy all planets on a single orbit in this system at the cost of c Triganic Pus. Vogons can use each machine as many times as they want. Vogons are very greedy, so they want to destroy all planets with minimum amount of money spent. Can you help them to know the minimum cost of this project?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. Then the test cases follow. Each test case consists of two lines. The first line contains two integers n and c ( 1 \u2264 n, c \u2264 100 ) \u2014 the number of planets and the cost of the second machine usage. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 100 ) , where a_ i is the orbit of the i - th planet.",
    "output": "For each test case print a single integer \u2014 the minimum cost of destroying all planets.",
    "note": "In the first test case, the cost of using both machines is the same, so you can always use the second one and destroy all planets in orbit 1 , all planets in orbit 2 , all planets in orbit 4 , all planets in orbit 5 . In the second test case, it is advantageous to use the second machine for 2 Triganic Pus to destroy all the planets in orbit 2 , then destroy the remaining two planets using the first machine. In the third test case, you can use the first machine twice or the second machine once. In the fourth test case, it is advantageous to use the first machine twice.",
    "topics": [
      "data structures",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Friends and the Restaurant",
    "url": "https://codeforces.com/problemset/problem/1729/D",
    "history": "A group of n friends decide to go to a restaurant. Each of the friends plans to order meals for x_ i burles and has a total of y_ i burles ( 1 \u2264 i \u2264 n ) . The friends decide to split their visit to the restaurant into several days. Each day, some group of at least two friends goes to the restaurant. Each of the friends visits the restaurant no more than once ( that is, these groups do not intersect) . These groups must satisfy the condition that the total budget of each group must be not less than the amount of burles that the friends in the group are going to spend at the restaurant. In other words, the sum of all x_ i values in the group must not exceed the sum of y_ i values in the group. What is the maximum number of days friends can visit the restaurant? For example, let there be n = 6 friends for whom x = [ 8, 3, 9, 2, 4, 5 ] and y = [ 5, 3, 1, 4, 5, 10 ] . Then: first and sixth friends can go to the restaurant on the first day. They will spend 8+ 5= 13 burles at the restaurant, and their total budget is 5+ 10= 15 burles. Since 15 \u2265 13 , they can actually form a group. friends with indices 2, 4, 5 can form a second group. They will spend 3+ 2+ 4= 9 burles at the restaurant, and their total budget will be 3+ 4+ 5= 12 burles ( 12 \u2265 9 ) . It can be shown that they will not be able to form more groups so that each group has at least two friends and each group can pay the bill. So, the maximum number of groups the friends can split into is 2 . Friends will visit the restaurant for a maximum of two days. Note that the 3 - rd friend will not visit the restaurant at all. Output the maximum number of days the friends can visit the restaurant for given n , x and y .",
    "input": "The first line of the input contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the test. The descriptions of the test cases follow. The first line of each test case contains a single integer n ( 2 \u2264 n \u2264 10^ 5 ) \u2014 the number of friends. The second line of each test case contains exactly n integers x_ 1, x_ 2, . . . , x_ n ( 1 \u2264 x_ i \u2264 10^ 9 ) . The value of x_ i corresponds to the number of burles that the friend numbered i plans to spend at the restaurant. The third line of each test case contains exactly n integers y_ 1, y_ 2, . . . , y_ n ( 1 \u2264 y_ i \u2264 10^ 9 ) . The value y_ i corresponds to the number of burles that the friend numbered i has. It is guaranteed that the sum of n values over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, print the maximum number of days to visit the restaurant. If friends cannot form even one group to visit the restaurant, print 0.",
    "note": "The first test case in explained in the problem statement. In the second test case, friends cannot form at least one group of two or more people. In the third test case, one way to visit the restaurant in one day is to go in a group of all three friends ( 1+ 3+ 10 \u2265 2+ 3+ 7 ) . Note that they do not have the option of splitting into two groups.",
    "topics": [
      "greedy",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Digital Logarithm",
    "url": "https://codeforces.com/problemset/problem/1728/C",
    "history": "Let' s define f( x) for a positive integer x as the length of the base- 10 representation of x without leading zeros. I like to call it a digital logarithm. Similar to a digital root, if you are familiar with that. You are given two arrays a and b , each containing n positive integers. In one operation, you do the following: pick some integer i from 1 to n ; assign either f( a_ i) to a_ i or f( b_ i) to b_ i . Two arrays are considered similar to each other if you can rearrange the elements in both of them, so that they are equal ( e. g. a_ i = b_ i for all i from 1 to n ) . What' s the smallest number of operations required to make a and b similar to each other?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of testcases. The first line of the testcase contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of elements in each of the arrays. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i < 10^ 9 ) . The third line contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ j < 10^ 9 ) . The sum of n over all testcases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each testcase, print the smallest number of operations required to make a and b similar to each other.",
    "note": "In the first testcase, you can apply the digital logarithm to b_ 1 twice. In the second testcase, the arrays are already similar to each other. In the third testcase, you can first apply the digital logarithm to a_ 1 , then to b_ 2 .",
    "topics": [
      "data structures",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Colored Balls: Revisited",
    "url": "https://codeforces.com/problemset/problem/1728/A",
    "history": "The title is a reference to the very first Educational Round from our writers team, Educational Round 18. There is a bag, containing colored balls. There are n different colors of balls, numbered from 1 to n . There are cnt_ i balls of color i in the bag. The total amount of balls in the bag is odd ( e. g. cnt_ 1 + cnt_ 2 + . . . + cnt_ n is odd) . In one move, you can choose two balls with different colors and take them out of the bag. At some point, all the remaining balls in the bag will have the same color. That' s when you can' t make moves anymore. Find any possible color of the remaining balls.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of testcases. The first line of each testcase contains a single integer n ( 1 \u2264 n \u2264 20 ) \u2014 the number of colors. The second line contains n integers cnt_ 1, cnt_ 2, . . . , cnt_ n ( 1 \u2264cnt_ i \u2264 100 ) \u2014 the amount of balls of each color in the bag. The total amount of balls in the bag is odd ( e. g. cnt_ 1 + cnt_ 2 + . . . + cnt_ n is odd) .",
    "output": "For each testcase, print a single integer \u2014 any possible color of the remaining balls, after you made some moves and can' t make moves anymore.",
    "note": "In the first testcase, your first and only move can be one of the following: take balls with colors 1 and 2 ; take balls with colors 1 and 3 ; take balls with colors 2 and 3 . After the move, exactly one ball will remain. Its color can be 3, 2 or 1 depending on the move. In the second testcase, you can' t make moves at all \u2014 there is only color of balls already. This color is 1 . In the third testcase, you can keep removing one ball of color 1 and one ball of color 2 until there are no more balls of color 1 . At the end, three balls of color 2 remain.",
    "topics": [
      "brute force",
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "A Certain Magical Party",
    "url": "https://codeforces.com/problemset/problem/1726/G",
    "history": "There are n people at a party. The i - th person has an amount of happiness a_ i . Every person has a certain kind of personality which can be represented as a binary integer b . If b = 0 , it means the happiness of the person will increase if he tells the story to someone strictly less happy than them. If b = 1 , it means the happiness of the person will increase if he tells the story to someone strictly more happy than them. Let us define a speaking order as an ordering of the people from left to right. Now the following process occurs. We go from left to right. The current person tells the story to all people other than himself. Note that all happiness values stay constant while this happens. After the person is done, he counts the number of people who currently have strictly less/ more happiness than him as per his kind of personality, and his happiness increases by that value. Note that only the current person' s happiness value increases. As the organizer of the party, you don' t want anyone to leave sad. Therefore, you want to count the number of speaking orders such that at the end of the process all n people have equal happiness. Two speaking orders are considered different if there exists at least one person who does not have the same position in the two speaking orders.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of people. The second line contains a sequence of n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 2n ) \u2014 the happiness values. The third line contains a sequence of n binary numbers b_ 1, b_ 2, . . . , b_ n ( b_ i \u2208{ 0, 1} ) \u2014 the kinds of personality.",
    "output": "Output the number of different valid speaking orders. Since this number can be large, output it modulo 998244353 .",
    "note": "Here is the explanation for the first example. One valid speaking order is [ 2, 1, 4, 3] ( here, we have written the indices of each person) . Each step shows the current happiness values and results. Step 1 : [ 1, 2, 4, 4] \u2192 Person 2 tells the story to others. Since his kind of personality is 1 , his happiness increases by 2 since persons 3 and 4 have strictly greater happiness. Step 2 : [ 1, 4, 4, 4] \u2192 Person 1 tells the story to others. Since his kind of personality is 1 , his happiness increases by 3 since persons 2 , 3 and 4 have strictly greater happiness. Step 3 : [ 4, 4, 4, 4] \u2192 Person 4 tells the story to others. Since his kind of personality is 0 , his happiness increases by 0 since no one has strictly lesser happiness. Step 4 : [ 4, 4, 4, 4] \u2192 Person 3 tells the story to others. Since his kind of personality is 0 , his happiness increases by 0 since no one has strictly lesser happiness. At the end, everyone has equal happiness. Note that [ 2, 1, 3, 4] is also a valid answer for this example. It can be shown that there is no valid ordering for the second example.",
    "topics": [
      "combinatorics",
      "data structures",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Field Photography",
    "url": "https://codeforces.com/problemset/problem/1725/F",
    "history": "Pak Chanek is traveling to Manado. It turns out that OSN ( Indonesian National Scientific Olympiad) 2019 is being held. The contestants of OSN 2019 are currently lining up in a field to be photographed. The field is shaped like a grid of size N \u00d7 10^ 100 with N rows and 10^ 100 columns. The rows are numbered from 1 to N from north to south, the columns are numbered from 1 to 10^ 100 from west to east. The tile in row r and column c is denoted as ( r, c) . There are N provinces that participate in OSN 2019. Initially, each contestant who represents province i stands in tile ( i, p) for each p satisfying L_ i \u2264 p \u2264 R_ i . So, we can see that there are R_ i- L_ i+ 1 contestants who represent province i . Pak Chanek has a variable Z that is initially equal to 0 . In one operation, Pak Chanek can choose a row i and a positive integer k . Then, Pak Chanek will do one of the two following possibilities: Move all contestants in row i exactly k tiles to the west. In other words, a contestant who is in ( i, p) is moved to ( i, p- k) . Move all contestants in row i exactly k tiles to the east. In other words, a contestant who is in ( i, p) is moved to ( i, p+ k) . After each operation, the value of Z will change into Z OR k , with OR being the bitwise OR operation. Note that Pak Chanek can do operations to the same row more than once. Also note that Pak Chanek is not allowed to move contestants out of the grid. There are Q questions. For the j - th question, you are given a positive integer W_ j , Pak Chanek must do zero or more operations so that the final value of Z is exactly W_ j . Define M as the biggest number such that after all operations, there is at least one column that contains exactly M contestants. For each question, you must find the biggest possible M for all sequences of operations that can be done by Pak Chanek. Note that the operations done by Pak Chanek for one question do not carry over to other questions.",
    "input": "The first line contains a single integer N ( 1 \u2264 N \u2264 10^ 5 ) \u2014 the number of rows in the grid and also the number of provinces that participate in OSN 2019. The i - th of the next N lines contains two integers L_ i and R_ i ( 1 \u2264 L_ i \u2264 R_ i \u2264 10^ 9 ) describing the positions of the contestants who represent province i . The next line contains a single integer Q ( 1 \u2264 Q \u2264 10^ 5 ) \u2014 the number of questions. The j - th of the next Q lines contains a single integer W_ j ( 1 \u2264 W_ j \u2264 10^ 9 ) \u2014 the required final value of Z for the j - th question.",
    "output": "Output Q lines, with the j - th line containing an integer that is the answer to the j - th question.",
    "note": "For the 1 - st question, Pak Chanek can do the following operations to get M= 2 : Move all contestants in row 2 to the east by 4 tiles. Z changes into 0 OR 4 = 4 . Move all contestants in row 1 to the east by 12 tiles. Z changes into 4 OR 12 = 12 . Now, columns 14 and 15 each contains exactly 2 contestants. For the 2 - nd question, Pak Chanek can do the following operations to get M= 3 : Move all contestants in row 3 to the east by 4 tiles. Z changes into 0 OR 4 = 4 . Move all contestants in row 3 to the west by 1 tiles. Z changes into 4 OR 1 = 5 . Move all contestants in row 1 to the east by 5 tiles. Z changes into 5 OR 5 = 5 . Move all contestants in row 1 to the east by 5 tiles. Z changes into 5 OR 5 = 5 . Now, column 11 contains exactly 3 contestants. The following is an illustration of the example operations for the 2 - nd question.",
    "topics": [
      "bitmasks",
      "data structures",
      "sortings"
    ]
  },
  {
    "title": "Basketball Together",
    "url": "https://codeforces.com/problemset/problem/1725/B",
    "history": "A basketball competition is held where the number of players in a team does not have a maximum or minimum limit ( not necessarily 5 players in one team for each match) . There are N candidate players in the competition that will be trained by Pak Chanek, the best basketball coach on earth. The i - th candidate player has a power of P_ i . Pak Chanek will form zero or more teams from the N candidate players on the condition that each candidate player may only join in at most one team. Each of Pak Chanek' s teams will be sent to compete once with an enemy team that has a power of D . In each match, the team sent is said to defeat the enemy team if the sum of powers from the formed players is strictly greater than D . One of Pak Chanek' s skills is that when a team that has been formed plays in a match, he can change the power of each player in the team to be equal to the biggest player power from the team. Determine the maximum number of wins that can be achieved by Pak Chanek.",
    "input": "The first line contains two integers N and D ( 1 \u2264 N \u2264 10^ 5 , 1 \u2264 D \u2264 10^ 9 ) \u2014 the number of candidate players and the power of the enemy team. The second line contains N integers P_ 1, P_ 2, . . . , P_ N ( 1 \u2264 P_ i \u2264 10^ 9 ) \u2014 the powers of all candidate players.",
    "output": "A line containing an integer representing the maximum number of wins that can be achieved by Pak Chanek.",
    "note": "The 1 - st team formed is a team containing players 4 and 6 . The power of each player in the team becomes 100 . So the total power of the team is 100 + 100 = 200 > 180 . The 2 - nd team formed is a team containing players 1 , 2 , and 5 . The power of each player in the team becomes 90 . So the total power of the team is 90 + 90 + 90 = 270 > 180 .",
    "topics": [
      "binary search",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Line",
    "url": "https://codeforces.com/problemset/problem/1722/D",
    "history": "There are n people in a horizontal line, each looking either to the left or the right. Each person counts the number of people in the direction they are looking. The value of the line is the sum of each person' s count. For example, in the arrangement LRRLL, where L stands for a person looking left and R stands for a person looking right, the counts for each person are [ 0, 3, 2, 3, 4] , and the value is 0+ 3+ 2+ 3+ 4= 12 . You are given the initial arrangement of people in the line. For each k from 1 to n , determine the maximum value of the line if you can change the direction of at most k people.",
    "input": "The input consists of multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 2\u00b710^ 5 ) \u2014 the length of the line. The following line contains a string consisting of n characters, each of which is either L or R, representing a person facing left or right, respectively \u2014 the description of the line. It is guaranteed that the sum of n over all test cases does not exceed 2\u00b710^ 5 . Please note that the answer for some test cases won' t fit into 32- bit integer type, so you should use at least 64- bit integer type in your programming language ( like long long for C+ + ) .",
    "output": "For each test case, output n space- separated non- negative integers \u2014 the maximum value of the line if you can change the direction of at most k people for each k from 1 to n , inclusive.",
    "note": "In the first test case: k= 1 : change the direction of 1 person to make the line RLR. The total value is 2+ 1+ 0= 3 . k= 2 : change the direction of 2 people to make the line RLL. The total value is 2+ 1+ 2= 5 . k= 3 : change the direction of 2 people to make the line RLL. The total value is 2+ 1+ 2= 5 . Note that you have to change the direction of at most k people. In the second test case, it is optimal to only change the direction of the first person for all k from 1 to 5 ( that is, make the line RRRLL) .",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Maximum AND",
    "url": "https://codeforces.com/problemset/problem/1721/D",
    "history": "You are given two arrays a and b , consisting of n integers each. Let' s define a function f( a, b) as follows: let' s define an array c of size n , where c_ i = a_ i \u2295 b_ i ( \u2295 denotes bitwise XOR) ; the value of the function is c_ 1 & c_ 2 & \u22ef& c_ n ( i. e. bitwise AND of the entire array c ) . Find the maximum value of the function f( a, b) if you can reorder the array b in an arbitrary way ( leaving the initial order is also an option) .",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the size of arrays a and b . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i < 2^ 30 ) . The third line contains n integers b_ 1, b_ 2, . . . , b_ n ( 0 \u2264 b_ i < 2^ 30 ) . The sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case print one integer \u2014 the maximum value of the function f( a, b) if you can reorder the array b in an arbitrary way.",
    "note": " ",
    "topics": [
      "bitmasks",
      "dfs and similar",
      "divide and conquer",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Interesting Sum",
    "url": "https://codeforces.com/problemset/problem/1720/B",
    "history": "You are given an array a that contains n integers. You can choose any proper subsegment a_ l, a_ l + 1, . . . , a_ r of this array, meaning you can choose any two integers 1 \u2264 l \u2264 r \u2264 n , where r - l + 1 < n . We define the beauty of a given subsegment as the value of the following expression: max( a_ 1, a_ 2, . . . , a_ l- 1, a_ r+ 1, a_ r+ 2, . . . , a_ n) - min( a_ 1, a_ 2, . . . , a_ l- 1, a_ r+ 1, a_ r+ 2, . . . , a_ n) + max( a_ l, . . . , a_ r) - min( a_ l, . . . , a_ r) . Please find the maximum beauty among all proper subsegments.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Then follow the descriptions of each test case. The first line of each test case contains a single integer n ( 4 \u2264 n \u2264 10^ 5) \u2014 the length of the array. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i\u2264 10^ 9 ) \u2014 the elements of the given array. It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each testcase print a single integer \u2014 the maximum beauty of a proper subsegment.",
    "note": "In the first test case, the optimal segment is l = 7 , r = 8 . The beauty of this segment equals to ( 6 - 1) + ( 5 - 1) = 9 . In the second test case, the optimal segment is l = 2 , r = 4 . The beauty of this segment equals ( 100 - 2) + ( 200 - 1) = 297 .",
    "topics": [
      "brute force",
      "data structures",
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Optimal Reduction",
    "url": "https://codeforces.com/problemset/problem/1713/B",
    "history": "Consider an array a of n positive integers. You may perform the following operation: select two indices l and r ( 1 \u2264 l \u2264 r \u2264 n ) , then decrease all elements a_ l, a_ l + 1, . . . , a_ r by 1 . Let' s call f( a) the minimum number of operations needed to change array a into an array of n zeros. Determine if for all permutations ^ \u2020 b of a , f( a) \u2264 f( b) is true. ^ \u2020 An array b is a permutation of an array a if b consists of the elements of a in arbitrary order. For example, [ 4, 2, 3, 4] is a permutation of [ 3, 2, 4, 4] while [ 1, 2, 2] is not a permutation of [ 1, 2, 3] .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of the array a . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 description of the array a . It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, print \" YES\" ( without quotes) if for all permutations b of a , f( a) \u2264 f( b) is true, and \" NO\" ( without quotes) otherwise. You can output \" YES\" and \" NO\" in any case ( for example, strings \" yEs\" , \" yes\" and \" Yes\" will be recognized as a positive response) .",
    "note": "In the first test case, we can change all elements to 0 in 5 operations. It can be shown that no permutation of [ 2, 3, 5, 4] requires less than 5 operations to change all elements to 0 . In the third test case, we need 5 operations to change all elements to 0 , while [ 2, 3, 3, 1] only needs 3 operations.",
    "topics": [
      "constructive algorithms",
      "sortings"
    ]
  },
  {
    "title": "Sort Zero",
    "url": "https://codeforces.com/problemset/problem/1712/C",
    "history": "An array is sorted if it has no inversionsA Young BoyYou are given an array of n positive integers a_ 1, a_ 2, . . . , a_ n . In one operation you do the following: Choose any integer x . For all i such that a_ i = x , do a_ i : = 0 ( assign 0 to a_ i ) . Find the minimum number of operations required to sort the array in non- decreasing order.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . Description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) . The second line of each test case contains n positive integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) . It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case print one integer \u2014 the minimum number of operations required to sort the array in non- decreasing order.",
    "note": "In the first test case, you can choose x = 3 for the operation, the resulting array is [ 0, 0, 2] . In the second test case, you can choose x = 1 for the first operation and x = 3 for the second operation, the resulting array is [ 0, 0, 0, 0] .",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "DFS Trees",
    "url": "https://codeforces.com/problemset/problem/1707/C",
    "history": "You are given a connected undirected graph consisting of n vertices and m edges. The weight of the i - th edge is i . Here is a wrong algorithm of finding a minimum spanning tree ( MST) of a graph: vis : = an array of length ns : = a set of edgesfunction dfs( u) : vis[ u] : = true iterate through each edge ( u, v) in the order from smallest to largest edge weight if vis[ v] = false add edge ( u, v) into the set ( s) dfs( v) function findMST( u) : reset all elements of ( vis) to false reset the edge set ( s) to empty dfs( u) return the edge set ( s) Each of the calls findMST( 1) , findMST( 2) , . . . , findMST( n) gives you a spanning tree of the graph. Determine which of these trees are minimum spanning trees.",
    "input": "The first line of the input contains two integers n , m ( 2\u2264 n\u2264 10^ 5 , n- 1\u2264 m\u2264 2\u00b7 10^ 5 ) \u2014 the number of vertices and the number of edges in the graph. Each of the following m lines contains two integers u_ i and v_ i ( 1\u2264 u_ i, v_ i\u2264 n , u_ i v_ i ) , describing an undirected edge ( u_ i, v_ i) in the graph. The i - th edge in the input has weight i . It is guaranteed that the graph is connected and there is at most one edge between any pair of vertices.",
    "output": "You need to output a binary string s , where s_ i= 1 if findMST( i) creates an MST, and s_ i = 0 otherwise.",
    "note": "Here is the graph given in the first example. There is only one minimum spanning tree in this graph. A minimum spanning tree is ( 1, 2) , ( 3, 5) , ( 1, 3) , ( 2, 4) which has weight 1+ 2+ 3+ 5= 11 . Here is a part of the process of calling findMST( 1) : reset the array vis and the edge set s; calling dfs( 1) ; vis[ 1] : = true; iterate through each edge ( 1, 2) , ( 1, 3) ; add edge ( 1, 2) into the edge set s, calling dfs( 2) : vis[ 2] : = true iterate through each edge ( 2, 1) , ( 2, 3) , ( 2, 4) ; because vis[ 1] = true, ignore the edge ( 2, 1) ; add edge ( 2, 3) into the edge set s, calling dfs( 3) : . . . In the end, it will select edges ( 1, 2) , ( 2, 3) , ( 3, 5) , ( 2, 4) with total weight 1+ 4+ 2+ 5= 12> 11 , so findMST( 1) does not find a minimum spanning tree. It can be shown that the other trees are all MSTs, so the answer is 01111.",
    "topics": [
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "sortings",
      "trees"
    ]
  },
  {
    "title": "Difference Array",
    "url": "https://codeforces.com/problemset/problem/1707/B",
    "history": "You are given an array a consisting of n non- negative integers. It is guaranteed that a is sorted from small to large. For each operation, we generate a new array b_ i= a_ i+ 1- a_ i for 1 \u2264 i < n . Then we sort b from small to large, replace a with b , and decrease n by 1 . After performing n- 1 operations, n becomes 1 . You need to output the only integer in array a ( that is to say, you need to output a_ 1 ) .",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1\u2264 t\u2264 10^ 4 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains one integer n ( 2\u2264 n\u2264 10^ 5 ) \u2014 the length of the array a . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0\u2264 a_ 1\u2264. . . \u2264 a_ n \u2264 5\u00b7 10^ 5 ) \u2014 the array a . It is guaranteed that the sum of n over all test cases does not exceed 2. 5\u00b7 10^ 5 , and the sum of a_ n over all test cases does not exceed 5\u00b7 10^ 5 .",
    "output": "For each test case, output the answer on a new line.",
    "note": "To simplify the notes, let sort( a) denote the array you get by sorting a from small to large. In the first test case, a= [ 1, 10, 100] at first. After the first operation, a= sort( [ 10- 1, 100- 10] ) = [ 9, 90] . After the second operation, a= sort( [ 90- 9] ) = [ 81] . In the second test case, a= [ 4, 8, 9, 13] at first. After the first operation, a= sort( [ 8- 4, 9- 8, 13- 9] ) = [ 1, 4, 4] . After the second operation, a= sort( [ 4- 1, 4- 4] ) = [ 0, 3] . After the last operation, a= sort( [ 3- 0] ) = [ 3] .",
    "topics": [
      "brute force",
      "data structures",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Mark and Lightbulbs",
    "url": "https://codeforces.com/problemset/problem/1705/D",
    "history": "Mark has just purchased a rack of n lightbulbs. The state of the lightbulbs can be described with binary string s = s_ 1s_ 2. . . s_ n , where s_ i= means that the i - th lightbulb is turned on, while s_ i= means that the i - th lightbulb is turned off. Unfortunately, the lightbulbs are broken, and the only operation he can perform to change the state of the lightbulbs is the following: Select an index i from 2, 3, . . . , n- 1 such that s_ i- 1 s_ i+ 1 . Toggle s_ i . Namely, if s_ i is , set s_ i to or vice versa. Mark wants the state of the lightbulbs to be another binary string t . Help Mark determine the minimum number of operations to do so.",
    "input": "The first line of the input contains a single integer q ( 1\u2264 q\u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 3\u2264 n\u2264 2\u00b7 10^ 5 ) \u2014 the number of lightbulbs. The second line of each test case contains a binary string s of length n \u2014 the initial state of the lightbulbs. The third line of each test case contains a binary string t of length n \u2014 the final state of the lightbulbs. It is guaranteed that the sum of n across all test cases does not exceed 2\u00b7 10^ 5 .",
    "output": "For each test case, print a line containing the minimum number of operations Mark needs to perform to transform s to t . If there is no such sequence of operations, print - 1 .",
    "note": "In the first test case, one sequence of operations that achieves the minimum number of operations is the following. Select i= 3 , changing to . Select i= 2 , changing to . In the second test case, there is no sequence of operations because one cannot change the first digit or the last digit of s . In the third test case, even though the first digits of s and t are the same and the last digits of s and t are the same, it can be shown that there is no sequence of operations that satisfies the condition. In the fourth test case, one sequence that achieves the minimum number of operations is the following: Select i= 3 , changing to . Select i= 2 , changing to . Select i= 4 , changing to . Select i= 5 , changing to . Select i= 3 , changing to .",
    "topics": [
      "combinatorics",
      "constructive algorithms",
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Mark the Photographer",
    "url": "https://codeforces.com/problemset/problem/1705/A",
    "history": "Mark is asked to take a group photo of 2n people. The i - th person has height h_ i units. To do so, he ordered these people into two rows, the front row and the back row, each consisting of n people. However, to ensure that everyone is seen properly, the j - th person of the back row must be at least x units taller than the j - th person of the front row for each j between 1 and n , inclusive. Help Mark determine if this is possible.",
    "input": "The first line contains one integer t ( 1\u2264 t\u2264 100 ) \u2014 the number of test cases. Each test case consists of two lines. The first line of each test case contains two positive integers n and x ( 1\u2264 n\u2264 100 , 1\u2264 x\u2264 10^ 3 ) \u2014 the number of people in each row and the minimum difference Mark wants. The second line of each test case contains 2n positive integers h_ 1, h_ 2, . . . , h_ 2n ( 1\u2264 h_ i\u2264 10^ 3 ) \u2014 the height of each person in units. Note that the sum of n over all test cases is not bounded.",
    "output": "For each test case, print a single line containing \" YES\" if Mark could arrange people satisfying his condition and \" NO\" otherwise. You may print each letter in any case ( for example, YES, Yes, yes, yEs will all be recognized as positive answers) .",
    "note": "In the first test case, one possible order is to have the third, fifth, and sixth person on the back row and the second, first, and fourth on the front row. The heights of the people will look like this. Back 9 12 16 Front 3 1 10 It works because h_ 3- h_ 2 = 9- 3 \u2265 6 , h_ 5- h_ 1 = 12- 1\u2265 6 , and h_ 6- h_ 4 = 16- 10\u2265 6 . In the second test case, it can be shown there is no way to order people in a way that satisfies the condition. In the third test case, the only way to arrange people to satisfy the condition is to have the first person on the back row and the second person on the front row.",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Virus",
    "url": "https://codeforces.com/problemset/problem/1704/C",
    "history": "There are n houses numbered from 1 to n on a circle. For each 1 \u2264 i \u2264 n - 1 , house i and house i + 1 are neighbours; additionally, house n and house 1 are also neighbours. Initially, m of these n houses are infected by a deadly virus. Each morning, Cirno can choose a house which is uninfected and protect the house from being infected permanently. Every day, the following things happen in order: Cirno chooses an uninfected house, and protect it permanently. All uninfected, unprotected houses which have at least one infected neighbor become infected. Cirno wants to stop the virus from spreading. Find the minimum number of houses that will be infected in the end, if she optimally choose the houses to protect. Note that every day Cirno always chooses a house to protect before the virus spreads. Also, a protected house will not be infected forever.",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Description of test cases follows. The first line of each test case consists of two positive integers n, m ( 5 \u2264 n \u2264 10^ 9 , 1 \u2264 m \u2264min( n, 10^ 5) ) \u2014 the number of houses on the circle, and the number of houses that are initially infected. The second line of each test case consists of m distinct positive integers a_ 1, a_ 2, \u22ef , a_ m ( 1 \u2264 a_ i \u2264 n ) \u2014 the indices of the houses infected initially. It is guaranteed that the sum of m over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, output an integer on a separate line, which is the minimum number of infected houses in the end.",
    "note": "In the first test case: At the start of the first day, house 3 , 6 , 8 are infected. Choose house 2 to protect. At the start of the second day, house 3 , 4 , 5 , 6 , 7 , 8 , 9 are infected. Choose house 10 to protect. At the start of the third day, no more houses are infected. In the second test case: At the start of the first day, house 2 , 5 are infected. Choose house 1 to protect. At the start of the second day, house 2 , 3 , 4 , 5 , 6 are infected. No more available houses can be protected.",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Yet Another Problem About Pairs Satisfying an Inequality",
    "url": "https://codeforces.com/problemset/problem/1703/F",
    "history": "You are given an array a_ 1, a_ 2, . . . a_ n . Count the number of pairs of indices 1 \u2264 i, j \u2264 n such that a_ i < i < a_ j < j .",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains an integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the array. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) \u2014 the elements of the array. It is guaranteed that the sum of n across all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output a single integer \u2014 the number of pairs of indices satisfying the condition in the statement. Please note, that the answer for some test cases won' t fit into 32- bit integer type, so you should use at least 64- bit integer type in your programming language ( like long long for C+ + ) .",
    "note": "For the first test cases the pairs are ( i, j) = { ( 2, 4) , ( 2, 8) , ( 3, 8) } . The pair ( 2, 4) is true because a_ 2 = 1 , a_ 4 = 3 and 1 < 2 < 3 < 4 . The pair ( 2, 8) is true because a_ 2 = 1 , a_ 8 = 4 and 1 < 2 < 4 < 8 . The pair ( 3, 8) is true because a_ 3 = 2 , a_ 8 = 4 and 2 < 3 < 4 < 8 .",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Permutation Restoration",
    "url": "https://codeforces.com/problemset/problem/1701/D",
    "history": "Monocarp had a permutation a of n integers 1 , 2 , . . . , n ( a permutation is an array where each element from 1 to n occurs exactly once) . Then Monocarp calculated an array of integers b of size n , where b_ i = \u230ai/ a_ i\u230b . For example, if the permutation a is [ 2, 1, 4, 3] , then the array b is equal to [ \u230a1/ 2\u230b, \u230a2/ 1\u230b, \u230a3/ 4\u230b, \u230a4/ 3\u230b] = [ 0, 2, 0, 1] . Unfortunately, the Monocarp has lost his permutation, so he wants to restore it. Your task is to find a permutation a that corresponds to the given array b . If there are multiple possible permutations, then print any of them. The tests are constructed in such a way that least one suitable permutation exists.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 5 \u00b7 10^ 5 ) . The second line contains n integers b_ 1, b_ 2, . . . , b_ n ( 0 \u2264 b_ i \u2264 n ) . Additional constrains on the input: the sum of n over test cases does not exceed 5 \u00b7 10^ 5 ; there exists at least one permutation a that would yield this array b .",
    "output": "For each test case, print n integers \u2014 a permutation a that corresponds to the given array b . If there are multiple possible permutations, then print any of them.",
    "note": " ",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "math",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "PermutationForces II",
    "url": "https://codeforces.com/problemset/problem/1698/E",
    "history": "You are given a permutation a of length n . Recall that permutation is an array consisting of n distinct integers from 1 to n in arbitrary order. You have a strength of s and perform n moves on the permutation a . The i - th move consists of the following: Pick two integers x and y such that i \u2264 x \u2264 y \u2264min( i+ s, n) , and swap the positions of the integers x and y in the permutation a . Note that you can select x= y in the operation, in which case no swap will occur. You want to turn a into another permutation b after n moves. However, some elements of b are missing and are replaced with - 1 instead. Count the number of ways to replace each - 1 in b with some integer from 1 to n so that b is a permutation and it is possible to turn a into b with a strength of s . Since the answer can be large, output it modulo 998 244 353 .",
    "input": "The input consists of multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains two integers n and s ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ; 1 \u2264 s \u2264 n ) \u2014 the size of the permutation and your strength, respectively. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 the elements of a . All elements of a are distinct. The third line of each test case contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 n or b_ i = - 1 ) \u2014 the elements of b . All elements of b that are not equal to - 1 are distinct. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output a single integer \u2014 the number of ways to fill up the permutation b so that it is possible to turn a into b using a strength of s , modulo 998 244 353 .",
    "note": "In the first test case, a= [ 2, 1, 3] . There are two possible ways to fill out the - 1 s in b to make it a permutation: [ 3, 1, 2] or [ 3, 2, 1] . We can make a into [ 3, 1, 2] with a strength of 1 as follows: [ 2, 1, 3] [ 2, 1, 3] [ 3, 1, 2] [ 3, 1, 2] . It can be proven that it is impossible to make [ 2, 1, 3] into [ 3, 2, 1] with a strength of 1 . Thus only one permutation b satisfies the constraints, so the answer is 1 . In the second test case, a and b the same as the previous test case, but we now have a strength of 2 . We can make a into [ 3, 2, 1] with a strength of 2 as follows: [ 2, 1, 3] [ 2, 3, 1] [ 3, 2, 1] [ 3, 2, 1] . We can still make a into [ 3, 1, 2] using a strength of 1 as shown in the previous test case, so the answer is 2 . In the third test case, there is only one permutation b . It can be shown that it is impossible to turn a into b , so the answer is 0 .",
    "topics": [
      "brute force",
      "combinatorics",
      "greedy",
      "sortings",
      "trees",
      "two pointers"
    ]
  },
  {
    "title": "Promo",
    "url": "https://codeforces.com/problemset/problem/1697/B",
    "history": "The store sells n items, the price of the i - th item is p_ i . The store' s management is going to hold a promotion: if a customer purchases at least x items, y cheapest of them are free. The management has not yet decided on the exact values of x and y . Therefore, they ask you to process q queries: for the given values of x and y , determine the maximum total value of items received for free, if a customer makes one purchase. Note that all queries are independent; they don' t affect the store' s stock.",
    "input": "The first line contains two integers n and q ( 1 \u2264 n, q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of items in the store and the number of queries, respectively. The second line contains n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 10^ 6 ) , where p_ i \u2014 the price of the i - th item. The following q lines contain two integers x_ i and y_ i each ( 1 \u2264 y_ i \u2264 x_ i \u2264 n ) \u2014 the values of the parameters x and y in the i - th query.",
    "output": "For each query, print a single integer \u2014 the maximum total value of items received for free for one purchase.",
    "note": "In the first query, a customer can buy three items worth 5, 3, 5 , the two cheapest of them are 3 + 5 = 8 . In the second query, a customer can buy two items worth 5 and 5 , the cheapest of them is 5 . In the third query, a customer has to buy all the items to receive the three cheapest of them for free; their total price is 1 + 2 + 3 = 6 .",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "2^Sort",
    "url": "https://codeforces.com/problemset/problem/1692/G",
    "history": "Given an array a of length n and an integer k , find the number of indices 1 \u2264 i \u2264 n - k such that the subarray [ a_ i, . . . , a_ i+ k] with length k+ 1 ( not with length k ) has the following property: If you multiply the first element by 2^ 0 , the second element by 2^ 1 , . . . , and the ( k+ 1 ) - st element by 2^ k , then this subarray is sorted in strictly increasing order. More formally, count the number of indices 1 \u2264 i \u2264 n - k such that 2^ 0 \u00b7 a_ i < 2^ 1 \u00b7 a_ i+ 1 < 2^ 2 \u00b7 a_ i+ 2 < . . . < 2^ k \u00b7 a_ i+ k.",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains two integers n , k ( 3 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 k < n ) \u2014 the length of the array and the number of inequalities. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the elements of the array. The sum of n across all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output a single integer \u2014 the number of indices satisfying the condition in the statement.",
    "note": "In the first test case, both subarrays satisfy the condition: i= 1 : the subarray [ a_ 1, a_ 2, a_ 3] = [ 20, 22, 19] , and 1 \u00b7 20 < 2 \u00b7 22 < 4 \u00b7 19 . i= 2 : the subarray [ a_ 2, a_ 3, a_ 4] = [ 22, 19, 84] , and 1 \u00b7 22 < 2 \u00b7 19 < 4 \u00b7 84 . In the second test case, three subarrays satisfy the condition: i= 1 : the subarray [ a_ 1, a_ 2] = [ 9, 5] , and 1 \u00b7 9 < 2 \u00b7 5 . i= 2 : the subarray [ a_ 2, a_ 3] = [ 5, 3] , and 1 \u00b7 5 < 2 \u00b7 3 . i= 3 : the subarray [ a_ 3, a_ 4] = [ 3, 2] , and 1 \u00b7 3 < 2 \u00b7 2 . i= 4 : the subarray [ a_ 4, a_ 5] = [ 2, 1] , but 1 \u00b7 2 = 2 \u00b7 1 , so this subarray doesn' t satisfy the condition.",
    "topics": [
      "data structures",
      "dp",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "All Distinct",
    "url": "https://codeforces.com/problemset/problem/1692/B",
    "history": "Sho has an array a consisting of n integers. An operation consists of choosing two distinct indices i and j and removing a_ i and a_ j from the array. For example, for the array [ 2, 3, 4, 2, 5] , Sho can choose to remove indices 1 and 3 . After this operation, the array becomes [ 3, 2, 5] . Note that after any operation, the length of the array is reduced by two. After he made some operations, Sho has an array that has only distinct elements. In addition, he made operations such that the resulting array is the longest possible. More formally, the array after Sho has made his operations respects these criteria: No pairs such that ( i < j ) and a_ i = a_ j exist. The length of a is maximized. Output the length of the final array.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 3 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 50 ) \u2014 the length of the array. The second line of each test case contains n integers a_ i ( 1 \u2264 a_ i \u2264 10^ 4 ) \u2014 the elements of the array.",
    "output": "For each test case, output a single integer \u2014 the length of the final array. Remember that in the final array, all elements are different, and its length is maximum.",
    "note": "For the first test case Sho can perform operations as follows: Choose indices 1 and 5 to remove. The array becomes [ 2, 2, 2, 3, 3, 3] \u2192 [ 2, 2, 3, 3] . Choose indices 1 and 4 to remove. The array becomes [ 2, 2, 3, 3] \u2192 [ 2, 3] . The final array has a length of 2 , so the answer is 2 . It can be proven that Sho cannot obtain an array with a longer length. For the second test case Sho can perform operations as follows: Choose indices 3 and 4 to remove. The array becomes [ 9, 1, 9, 9, 1] \u2192 [ 9, 1, 1] . Choose indices 1 and 3 to remove. The array becomes [ 9, 1, 1] \u2192 [ 1] . The final array has a length of 1 , so the answer is 1 . It can be proven that Sho cannot obtain an array with a longer length.",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Number of Groups",
    "url": "https://codeforces.com/problemset/problem/1691/E",
    "history": "You are given n colored segments on the number line. Each segment is either colored red or blue. The i - th segment can be represented by a tuple ( c_ i, l_ i, r_ i) . The segment contains all the points in the range [ l_ i, r_ i] , inclusive, and its color denoted by c_ i : if c_ i = 0 , it is a red segment; if c_ i = 1 , it is a blue segment. We say that two segments of different colors are connected, if they share at least one common point. Two segments belong to the same group, if they are either connected directly, or through a sequence of directly connected segments. Find the number of groups of segments.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 5 ) . Description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of segments. Each of the next n lines contains three integers c_ i, l_ i, r_ i ( 0 \u2264 c_ i \u2264 1, 0 \u2264 l_ i \u2264 r_ i \u2264 10^ 9 ) , describing the i - th segment. It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, print a single integer k , the number of groups of segments.",
    "note": "In the first example there are 5 segments. The segments 1 and 2 are connected, because they are of different colors and share a point. Also, the segments 2 and 3 are connected, and so are segments 4 and 5 . Thus, there are two groups: one containing segments { 1, 2, 3} , and the other one containing segments { 4, 5} .",
    "topics": [
      "data structures",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Count the Trains",
    "url": "https://codeforces.com/problemset/problem/1690/G",
    "history": "There are n of independent carriages on the rails. The carriages are numbered from left to right from 1 to n . The carriages are not connected to each other. The carriages move to the left, so that the carriage with number 1 moves ahead of all of them. The i - th carriage has its own engine, which can accelerate the carriage to a_ i km/ h, but the carriage cannot go faster than the carriage in front of it. See example for explanation. All carriages start moving to the left at the same time, and they naturally form trains. We will call trains \u2014 consecutive moving carriages having the same speed. For example, we have n= 5 carriages and array a = [ 10, 13, 5, 2, 6] . Then the final speeds of the carriages will be [ 10, 10, 5, 2, 2] . Respectively, 3 of the train will be formed. There are also messages saying that some engine has been corrupted: message \" k d\" means that the speed of the k - th carriage has decreased by d ( that is, there has been a change in the maximum speed of the carriage a_ k = a_ k - d ) . Messages arrive sequentially, the processing of the next message takes into account the changes from all previous messages. After each message determine the number of formed trains.",
    "input": "The first line of input data contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014the number of input test cases. This is followed by descriptions of the test cases. The first line of each test case is empty. The second line of the test case contains two integers n and m ( 1 \u2264 n, m \u2264 10^ 5 ) \u2014the number of carriages and the number of messages to slow down the carriage, respectively. The third line contains n integers: a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) \u2014 the number a_ i means that the carriage with number i can reach a speed of a_ i km/ h. The next m lines contain two integers k_ j and d_ j ( 1 \u2264 k_ j \u2264 n , 0 \u2264 d_ j \u2264 a_ k_ j ) \u2014this is the message that the speed of the carriage with number k_ j has decreased by d_ j . In other words, there has been a change in its maximum speed a_ k_ j = a_ k_ j - d_ j . Note that at any time the speed of each carriage is non- negative. In other words, a_ i \u2265 s_ i , where s_ i \u2014is the sum of such d_ j that k_ j= i . It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 . Similarly, it is guaranteed that the sum of m over all test cases does not exceed 10^ 5 .",
    "output": "Print t lines. On each line print the answer for the corresponding test case. For each test case print m numbers: the number of trains formed after each message.",
    "note": "For the first test case: Initially array a = [ 6, 2, 3, 7] . After the first message, the array a = [ 6, 2, 1, 7] . Accordingly, the speeds of the carriages are [ 6, 2, 1, 1] and will form 3 of the train. After the second message the array a = [ 6, 2, 1, 0] . Accordingly, the speeds of the carriages are [ 6, 2, 1, 0] , and 4 of the train will be formed. For the second test case: Initially, the array a = [ 10, 13, 5, 2, 6] . After the first message, the array a = [ 10, 9, 5, 2, 6] . Accordingly, the speeds of the carriages are equal: [ 10, 9, 5, 2, 2] , and 4 of the train will be formed. After the second message the array a = [ 10, 9, 5, 2, 4] . Accordingly, the speeds of the carriages are [ 10, 9, 5, 2, 2] , and 4 of the train will be formed. After the third message the array a = [ 5, 9, 5, 2, 4] . Accordingly, the speeds of the carriages are [ 5, 5, 5, 2, 2] , and 2 of the train will be formed. After the fourth message the array a = [ 5, 9, 3, 2, 4] . Accordingly, the speeds of the carriages are [ 5, 5, 3, 2, 2] , and 3 of the train will be formed.",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Lex String",
    "url": "https://codeforces.com/problemset/problem/1689/A",
    "history": "Kuznecov likes art, poetry, and music. And strings consisting of lowercase English letters. Recently, Kuznecov has found two strings, a and b , of lengths n and m respectively. They consist of lowercase English letters and no character is contained in both strings. Let another string c be initially empty. Kuznecov can do the following two types of operations: Choose any character from the string a , remove it from a , and add it to the end of c . Choose any character from the string b , remove it from b , and add it to the end of c . But, he can not do more than k operations of the same type in a row. He must perform operations until either a or b becomes empty. What is the lexicographically smallest possible value of c after he finishes? A string x is lexicographically smaller than a string y if and only if one of the following holds: x is a prefix of y , but x = \u0338 y ; in the first position where x and y differ, the string x has a letter that appears earlier in the alphabet than the corresponding letter in y .",
    "input": "There are several test cases in the input data. The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. This is followed by the test cases description. The first line of each test case contains three integers n , m , and k ( 1\u2264 n, m, k \u2264 100 ) \u2014 parameters from the statement. The second line of each test case contains the string a of length n . The third line of each test case contains the string b of length m . The strings contain only lowercase English letters. It is guaranteed that no symbol appears in a and b simultaneously.",
    "output": "In each test case, output a single string c \u2014 the answer to the problem.",
    "note": "In the first test case, it is optimal to take two ' a' s from the string a and add them to the string c . Then it is forbidden to take more characters from a , hence one character ' b' from the string b has to be taken. Following that logic, we end up with c being ' aabaabaa' when string a is emptied. In the second test case it is optimal to take as many ' a' s from string a as possible, then take as many ' b' s as possible from string b . In the end, we take two ' c' s from the string a emptying it.",
    "topics": [
      "brute force",
      "greedy",
      "implementation",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Patchouli's Magical Talisman",
    "url": "https://codeforces.com/problemset/problem/1688/B",
    "history": "She is skilled in all kinds of magics, and is keen on inventing new one. \u2014Perfect Memento in Strict SensePatchouli is making a magical talisman. She initially has n magical tokens. Their magical power can be represented with positive integers a_ 1, a_ 2, . . . , a_ n . Patchouli may perform the following two operations on the tokens. Fusion: Patchouli chooses two tokens, removes them, and creates a new token with magical power equal to the sum of the two chosen tokens. Reduction: Patchouli chooses a token with an even value of magical power x , removes it and creates a new token with magical power equal to x/ 2 . Tokens are more effective when their magical powers are odd values. Please help Patchouli to find the minimum number of operations she needs to make magical powers of all tokens odd values.",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 3 ) \u2014 the number of test cases. The description of the test cases follows. For each test case, the first line contains one integer n ( 1 \u2264 n\u2264 2\u00b7 10^ 5 ) \u2014 the initial number of tokens. The second line contains n intergers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the initial magical power of the n tokens. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print a single integer \u2014 the minimum number of operations Patchouli needs to make all tokens have an odd value of magical power. It can be shown that under such restrictions the required sequence of operations exists.",
    "note": "Test case 1: a consists solely of odd numbers initially. Test case 2: Choose the tokens with magical power of 1 and 2 and perform Fusion. Now a= [ 1, 3] , both are odd numbers. Test case 3: Choose the tokens with magical power of 2 and 8 and perform Fusion. Now a= [ 4, 10] . Choose the token with magical power of 10 and perform Reduction. Now a= [ 4, 5] . Choose the tokens with magical power of 4 and 5 and perform Fusion. Now a= [ 9] , and 9 is an odd number. It can be shown that you can not make all the magical powers odd numbers in less than 3 moves, so the answer is 3 .",
    "topics": [
      "bitmasks",
      "constructive algorithms",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Sanae and Giant Robot",
    "url": "https://codeforces.com/problemset/problem/1687/C",
    "history": "Is it really? ! The robot only existing in my imagination? ! The Colossal Walking Robot? ! ! \u2014 Kochiya Sanae Sanae made a giant robot \u2014 Hisoutensoku, but something is wrong with it. To make matters worse, Sanae can not figure out how to stop it, and she is forced to fix it on- the- fly. The state of a robot can be represented by an array of integers of length n . Initially, the robot is at state a . She wishes to turn it into state b . As a great programmer, Sanae knows the art of copy- and- paste. In one operation, she can choose some segment from given segments, copy the segment from b and paste it into the same place of the robot, replacing the original state there. However, she has to ensure that the sum of a does not change after each copy operation in case the robot go haywire. Formally, Sanae can choose segment [ l, r] and assign a_ i = b_ i ( l\u2264 i\u2264 r ) if \u2211_ i= 1^ n a_ i does not change after the operation. Determine whether it is possible for Sanae to successfully turn the robot from the initial state a to the desired state b with any ( possibly, zero) operations.",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 2\u00b7 10^ 4 ) \u2014 the number of test cases. The descriptions of the test cases follow. The first line of each test case contains two integers n , m ( 2 \u2264 n\u2264 2\u00b7 10^ 5 , 1 \u2264 m\u2264 2\u00b7 10^ 5 ) \u2014 the length of a , b and the number of segments. The second line contains n intergers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the initial state a . The third line contains n intergers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 10^ 9 ) \u2014 the desired state b . Then m lines follow, the i - th line contains two intergers l_ i, r_ i ( 1 \u2264 l_ i < r_ i \u2264 n ) \u2014 the segments that can be copy- pasted by Sanae. It is guaranteed that both the sum of n and the sum of m over all test cases does not exceed 2 \u00b7 10 ^ 5 .",
    "output": "For each test case, print \" YES\" ( without quotes) if a can be turned into b , or \" NO\" ( without quotes) otherwise. You can output \" YES\" and \" NO\" in any case ( for example, strings \" yEs\" , \" yes\" and \" Yes\" will be recognized as a positive response) .",
    "note": "Test case 1: One possible way of turning a to b : First, select [ 1, 3] . After the operation, a= [ 3, 2, 5, 2, 3] . Then, select [ 2, 5] . After the operation, a= [ 3, 2, 5, 4, 1] = b . Test case 2: It can be shown that it is impossible to turn a into b .",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "dsu",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Railway System",
    "url": "https://codeforces.com/problemset/problem/1687/B",
    "history": "As for the technology in the outside world, it is really too advanced for Gensokyo to even look up to. \u2014Yasaka Kanako, Symposium of Post- mysticismThis is an interactive problem. Under the direct supervision of Kanako and the Moriya Shrine, the railway system of Gensokyo is finally finished. GSKR ( Gensokyo Railways) consists of n stations with m bidirectional tracks connecting them. The i - th track has length l_ i ( 1\u2264 l_ i\u2264 10^ 6 ) . Due to budget limits, the railway system may not be connected, though there may be more than one track between two stations. The value of a railway system is defined as the total length of its all tracks. The maximum ( or minimum) capacity of a railway system is defined as the maximum ( or minimum) value among all of the currently functional system' s full spanning forest. In brief, full spanning forest of a graph is a spanning forest with the same connectivity as the given graph. Kanako has a simulator only able to process no more than 2m queries. The input of the simulator is a string s of length m , consisting of characters 0 and/ or 1. The simulator will assume the i - th track functional if s_ i= 1. The device will then tell Kanako the maximum capacity of the system in the simulated state. Kanako wants to know the the minimum capacity of the system with all tracks functional with the help of the simulator. The structure of the railway system is fixed in advance. In other words, the interactor is not adaptive. InteractionBegin the interaction by reading n, m . To make a query, print \" ? s \" ( without quotes, s is a string of length m , consisting of characters 0 and/ or 1) . Then you should read our response from standard input \u2014 the maximum capacity of the system in the simulated state. If your program has made an invalid query or has run out of tries, the interactor will terminate immediately and your program will get a verdict Wrong answer. To give the final answer, print \" ! L \" ( without the quotes, L is the minimum capacity of the system with all tracks functional) . Note that giving this answer is not counted towards the limit of 2m queries. After printing a query do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use: fflush( stdout) or cout. flush( ) in C+ + ; System. out. flush( ) in Java; flush( output) in Pascal; stdout. flush( ) in Python; see documentation for other languages. HacksThe first line of input must contain two integers n, m ( 2 \u2264 n \u2264 200 , 1\u2264 m \u2264 500 ) \u2014 the number of stations and tracks. The next m lines of input must contain exactly 3 space- separated integers u_ i , v_ i , l_ i ( 1\u2264 u_ i, v_ i \u2264 n , u_ i v_ i , 1 \u2264 l_ i \u2264 10^ 6 ) \u2014 the endpoints and the length of the i - th track.",
    "input": "The first and only line of input contains two integers n, m ( 2 \u2264 n \u2264 200 , 1\u2264 m \u2264 500 ) \u2014 the number of stations and tracks.",
    "output": " ",
    "note": "Here is the graph of the example, satisfying l_ i= i .",
    "topics": [
      "constructive algorithms",
      "graphs",
      "greedy",
      "interactive",
      "sortings"
    ]
  },
  {
    "title": "Linguistics",
    "url": "https://codeforces.com/problemset/problem/1685/B",
    "history": "Alina has discovered a weird language, which contains only 4 words: , , , . It also turned out that there are no spaces in this language: a sentence is written by just concatenating its words into a single string. Alina has found one such sentence s and she is curious: is it possible that it consists of precisely a words , b words , c words , and d words ? In other words, determine, if it' s possible to concatenate these a+ b+ c+ d words in some order so that the resulting string is s . Each of the a+ b+ c+ d words must be used exactly once in the concatenation, but you can choose the order in which they are concatenated.",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains four integers a , b , c , d ( 0\u2264 a, b, c, d\u2264 2\u00b7 10^ 5 ) \u2014 the number of times that words , , , respectively must be used in the sentence. The second line contains the string s ( s consists only of the characters and , 1\u2264 | s| \u2264 2\u00b7 10^ 5 , | s| = a+ b+ 2c+ 2d ) \u2014 the sentence. Notice that the condition | s| = a+ b+ 2c+ 2d ( here | s| denotes the length of the string s ) is equivalent to the fact that s is as long as the concatenation of the a+ b+ c+ d words. The sum of the lengths of s over all test cases doesn' t exceed 2\u00b7 10^ 5 .",
    "output": "For each test case output if it is possible that the sentence s consists of precisely a words , b words , c words , and d words , and otherwise. You can output each letter in any case.",
    "note": "In the first test case, the sentence s is . Clearly, it can' t consist of a single word , so the answer is . In the second test case, the sentence s is , and it' s possible that it consists of a single word , so the answer is . In the third test case, the sentence s is , and it' s possible that it consists of one word , one word , and one word , as + + = . In the fourth test case, the sentence s is , and it' s possible that it consists of one word , one word , and one word , as + + = . In the fifth test case, the sentence s is , and it' s possible that it consists of one word , one word , two words , and two words , as + + + + + = .",
    "topics": [
      "greedy",
      "implementation",
      "sortings",
      "strings"
    ]
  },
  {
    "title": "Circular Local MiniMax",
    "url": "https://codeforces.com/problemset/problem/1685/A",
    "history": "You are given n integers a_ 1, a_ 2, . . . , a_ n . Is it possible to arrange them on a circle so that each number is strictly greater than both its neighbors or strictly smaller than both its neighbors? In other words, check if there exists a rearrangement b_ 1, b_ 2, . . . , b_ n of the integers a_ 1, a_ 2, . . . , a_ n such that for each i from 1 to n at least one of the following conditions holds: b_ i- 1 < b_ i > b_ i+ 1 b_ i- 1 > b_ i < b_ i+ 1 To make sense of the previous formulas for i= 1 and i= n , one shall define b_ 0= b_ n and b_ n+ 1= b_ 1 .",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 3\u00b7 10^ 4 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n ( 3 \u2264 n \u2264 10^ 5 ) \u2014 the number of integers. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) . The sum of n over all test cases doesn' t exceed 2\u00b7 10^ 5 .",
    "output": "For each test case, if it is not possible to arrange the numbers on the circle satisfying the conditions from the statement, output . You can output each letter in any case. Otherwise, output . In the second line, output n integers b_ 1, b_ 2, . . . , b_ n , which are a rearrangement of a_ 1, a_ 2, . . . , a_ n and satisfy the conditions from the statement. If there are multiple valid ways to arrange the numbers, you can output any of them.",
    "note": "It can be shown that there are no valid arrangements for the first and the third test cases. In the second test case, the arrangement [ 1, 8, 4, 9] works. In this arrangement, 1 and 4 are both smaller than their neighbors, and 8, 9 are larger. In the fourth test case, the arrangement [ 1, 11, 1, 111, 1, 1111] works. In this arrangement, the three elements equal to 1 are smaller than their neighbors, while all other elements are larger than their neighbors.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Traps",
    "url": "https://codeforces.com/problemset/problem/1684/D",
    "history": "There are n traps numbered from 1 to n . You will go through them one by one in order. The i - th trap deals a_ i base damage to you. Instead of going through a trap, you can jump it over. You can jump over no more than k traps. If you jump over a trap, it does not deal any damage to you. But there is an additional rule: if you jump over a trap, all next traps damages increase by 1 ( this is a bonus damage) . Note that if you jump over a trap, you don' t get any damage ( neither base damage nor bonus damage) . Also, the bonus damage stacks so, for example, if you go through a trap i with base damage a_ i , and you have already jumped over 3 traps, you get ( a_ i + 3) damage. You have to find the minimal damage that it is possible to get if you are allowed to jump over no more than k traps.",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains two integers n and k ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 k \u2264 n ) \u2014 the number of traps and the number of jump overs that you are allowed to make. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 base damage values of all traps. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case output a single integer \u2014 the minimal total damage that it is possible to get if you are allowed to jump over no more than k traps.",
    "note": "In the first test case it is allowed to jump over all traps and take 0 damage. In the second test case there are 5 ways to jump over some traps: Do not jump over any trap. Total damage: 5 + 10 + 11 + 5 = 31 . Jump over the 1 - st trap. Total damage: 0 + ( 10 + 1) + ( 11 + 1) + ( 5 + 1) = 29 . Jump over the 2 - nd trap. Total damage: 5 + 0 + ( 11 + 1) + ( 5 + 1) = 23 . Jump over the 3 - rd trap. Total damage: 5 + 10 + 0 + ( 5 + 1) = 21 . Jump over the 4 - th trap. Total damage: 5 + 10 + 11 + 0 = 26 . To get minimal damage it is needed to jump over the 3 - rd trap, so the answer is 21 . In the third test case it is optimal to jump over the traps 1 , 3 , 4 , 5 , 7 : Total damage: 0 + ( 2 + 1) + 0 + 0 + 0 + ( 2 + 4) + 0 = 9 .",
    "topics": [
      "constructive algorithms",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Column Swapping",
    "url": "https://codeforces.com/problemset/problem/1684/C",
    "history": "You are given a grid with n rows and m columns, where each cell has a positive integer written on it. Let' s call a grid good, if in each row the sequence of numbers is sorted in a non- decreasing order. It means, that for each 1 \u2264 i \u2264 n and 2 \u2264 j \u2264 m the following holds: a_ i, j\u2265 a_ i, j- 1 . You have to to do the following operation exactly once: choose two columns with indexes i and j ( not necessarily different) , 1 \u2264 i, j \u2264 m , and swap them. You are asked to determine whether it is possible to make the grid good after the swap and, if it is, find the columns that need to be swapped.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 100 ) . Description of the test cases follows. The first line of each test case contains two integers n and m ( 1 \u2264 n, m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of rows and columns respectively. Each of the next n rows contains m integers, j - th element of i - th row is a_ i, j ( 1 \u2264 a_ i, j\u2264 10^ 9 ) \u2014 the number written in the j - th cell of the i - th row. It' s guaranteed that the sum of n \u00b7 m over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "If after the swap it is impossible to get a good grid, output - 1 . In the other case output 2 integers \u2014 the indices of the columns that should be swapped to get a good grid. If there are multiple solutions, print any.",
    "note": "In the first test case the grid is initially good, so we can, for example, swap the first column with itself. In the second test case it is impossible to make the grid good. In the third test case it is needed to swap the first and the second column, then the grid becomes good.",
    "topics": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "MCMF?",
    "url": "https://codeforces.com/problemset/problem/1682/F",
    "history": "You are given two integer arrays a and b ( b_ i = \u0338 0 and | b_ i| \u2264 10^ 9 ) . Array a is sorted in non- decreasing order. The cost of a subarray a[ l: r] is defined as follows: If \u2211_ j = l^ r b_ j = \u0338 0 , then the cost is not defined. Otherwise: Construct a bipartite flow graph with r- l+ 1 vertices, labeled from l to r , with all vertices having b_ i 0 on the left and those with b_ i 0 on right. For each i, j such that l \u2264 i, j \u2264 r , b_ i< 0 and b_ j> 0 , draw an edge from i to j with infinite capacity and cost of unit flow as | a_ i- a_ j| . Add two more vertices: source S and sink T . For each i such that l \u2264 i \u2264 r and b_ i< 0 , add an edge from S to i with cost 0 and capacity | b_ i| . For each i such that l \u2264 i \u2264 r and b_ i> 0 , add an edge from i to T with cost 0 and capacity | b_ i| . The cost of the subarray is then defined as the minimum cost of maximum flow from S to T . You are given q queries in the form of two integers l and r . You have to compute the cost of subarray a[ l: r] for each query, modulo 10^ 9 + 7 . If you don' t know what the minimum cost of maximum flow means, read here.",
    "input": "The first line of input contains two integers n and q ( 2 \u2264 n \u2264 2\u00b7 10^ 5, 1 \u2264 q \u2264 2\u00b710^ 5) \u2014 length of arrays a , b and the number of queries. The next line contains n integers a_ 1, a_ 2 . . . a_ n ( 0 \u2264 a_ 1 \u2264 a_ 2 . . . \u2264 a_ n \u2264 10^ 9) \u2014 the array a . It is guaranteed that a is sorted in non- decreasing order. The next line contains n integers b_ 1, b_ 2 . . . b_ n ( - 10^ 9\u2264 b_ i \u2264 10^ 9, b_ i = \u0338 0) \u2014 the array b . The i - th of the next q lines contains two integers l_ i, r_ i ( 1\u2264 l_ i \u2264 r_ i \u2264 n) . It is guaranteed that \u2211_ j = l_ i^ r_ i b_ j = 0 .",
    "output": "For each query l_ i , r_ i \u2014 print the cost of subarray a[ l_ i: r_ i] modulo 10^ 9 + 7 .",
    "note": "In the first query, the maximum possible flow is 1 i. e one unit from source to 2 , then one unit from 2 to 3 , then one unit from 3 to sink. The cost of the flow is 0 \u00b7 1 + | 2 - 4| \u00b7 1 + 0 \u00b7 1 = 2 . In the second query, the maximum possible flow is again 1 i. e from source to 7 , 7 to 6 , and 6 to sink with a cost of 0 \u00b7 | 10 - 10| \u00b7 1 + 0 \u00b7 1 = 0 . In the third query, the flow network is shown on the left with capacity written over the edge and the cost written in bracket. The image on the right shows the flow through each edge in an optimal configuration. Maximum flow is 3 with a cost of 0 \u00b7 3 + 1 \u00b7 1 + 4 \u00b7 2 + 0 \u00b7 1 + 0 \u00b7 2 = 9 . In the fourth query, the flow network looks as \u2013 The minimum cost maximum flow is achieved in the configuration \u2013 The maximum flow in the above network is 4 and the minimum cost of such flow is 15.",
    "topics": [
      "data structures",
      "flows",
      "graphs",
      "greedy",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Unordered Swaps",
    "url": "https://codeforces.com/problemset/problem/1682/E",
    "history": "Alice had a permutation p of numbers from 1 to n . Alice can swap a pair ( x, y) which means swapping elements at positions x and y in p ( i. e. swap p_ x and p_ y ) . Alice recently learned her first sorting algorithm, so she decided to sort her permutation in the minimum number of swaps possible. She wrote down all the swaps in the order in which she performed them to sort the permutation on a piece of paper. For example, [ ( 2, 3) , ( 1, 3) ] is a valid swap sequence by Alice for permutation p = [ 3, 1, 2] whereas [ ( 1, 3) , ( 2, 3) ] is not because it doesn' t sort the permutation. Note that we cannot sort the permutation in less than 2 swaps. [ ( 1, 2) , ( 2, 3) , ( 2, 4) , ( 2, 3) ] cannot be a sequence of swaps by Alice for p = [ 2, 1, 4, 3] even if it sorts the permutation because p can be sorted in 2 swaps, for example using the sequence [ ( 4, 3) , ( 1, 2) ] . Unfortunately, Bob shuffled the sequence of swaps written by Alice. You are given Alice' s permutation p and the swaps performed by Alice in arbitrary order. Can you restore the correct sequence of swaps that sorts the permutation p ? Since Alice wrote correct swaps before Bob shuffled them up, it is guaranteed that there exists some order of swaps that sorts the permutation.",
    "input": "The first line contains 2 integers n and m ( 2 \u2264 n \u2264 2 \u00b7 10^ 5, 1 \u2264 m \u2264 n - 1) \u2014 the size of permutation and the minimum number of swaps required to sort the permutation. The next line contains n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n , all p_ i are distinct) \u2014 the elements of p . It is guaranteed that p forms a permutation. Then m lines follow. The i - th of the next m lines contains two integers x_ i and y_ i \u2014 the i - th swap ( x_ i, y_ i) . It is guaranteed that it is possible to sort p with these m swaps and that there is no way to sort p with less than m swaps.",
    "output": "Print a permutation of m integers \u2014 a valid order of swaps written by Alice that sorts the permutation p . See sample explanation for better understanding. In case of multiple possible answers, output any.",
    "note": "In the first example, p = [ 2, 3, 4, 1] , m = 3 and given swaps are [ ( 1, 4) , ( 2, 1) , ( 1, 3) ] . There is only one correct order of swaps i. e [ 2, 3, 1] . First we perform the swap 2 from the input i. e ( 2, 1) , p becomes [ 3, 2, 4, 1] . Then we perform the swap 3 from the input i. e ( 1, 3) , p becomes [ 4, 2, 3, 1] . Finally we perform the swap 1 from the input i. e ( 1, 4) and p becomes [ 1, 2, 3, 4] which is sorted. In the second example, p = [ 6, 5, 1, 3, 2, 4] , m = 4 and the given swaps are [ ( 3, 1) , ( 2, 5) , ( 6, 3) , ( 6, 4) ] . One possible correct order of swaps is [ 4, 2, 1, 3] . Perform the swap 4 from the input i. e ( 6, 4) , p becomes [ 6, 5, 1, 4, 2, 3] . Perform the swap 2 from the input i. e ( 2, 5) , p becomes [ 6, 2, 1, 4, 5, 3] . Perform the swap 1 from the input i. e ( 3, 1) , p becomes [ 1, 2, 6, 4, 5, 3] . Perform the swap 3 from the input i. e ( 6, 3) and p becomes [ 1, 2, 3, 4, 5, 6] which is sorted. There can be other possible answers such as [ 1, 2, 4, 3] .",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs",
      "greedy",
      "math",
      "sortings",
      "trees"
    ]
  },
  {
    "title": "AND Sorting",
    "url": "https://codeforces.com/problemset/problem/1682/B",
    "history": "You are given a permutation p of integers from 0 to n- 1 ( each of them occurs exactly once) . Initially, the permutation is not sorted ( that is, p_ i> p_ i+ 1 for at least one 1 \u2264 i \u2264 n - 1 ) . The permutation is called X - sortable for some non- negative integer X if it is possible to sort the permutation by performing the operation below some finite number of times: Choose two indices i and j ( 1 \u2264 i j \u2264 n) such that p_ i & p_ j = X . Swap p_ i and p_ j . Here & denotes the bitwise AND operation. Find the maximum value of X such that p is X - sortable. It can be shown that there always exists some value of X such that p is X - sortable.",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4) \u2014 the number of test cases. Description of test cases follows. The first line of each test case contains a single integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5) \u2014 the length of the permutation. The second line of each test case contains n integers p_ 1, p_ 2, . . . , p_ n ( 0 \u2264 p_ i \u2264 n- 1 , all p_ i are distinct) \u2014 the elements of p . It is guaranteed that p is not sorted. It is guaranteed that the sum of n over all cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case output a single integer \u2014 the maximum value of X such that p is X - sortable.",
    "note": "In the first test case, the only X for which the permutation is X - sortable are X = 0 and X = 2 , maximum of which is 2 . Sorting using X = 0 : Swap p_ 1 and p_ 4 , p = [ 2, 1, 3, 0] . Swap p_ 3 and p_ 4 , p = [ 2, 1, 0, 3] . Swap p_ 1 and p_ 3 , p = [ 0, 1, 2, 3] . Sorting using X = 2 : Swap p_ 3 and p_ 4 , p = [ 0, 1, 2, 3] . In the second test case, we must swap p_ 1 and p_ 2 which is possible only with X = 0 .",
    "topics": [
      "bitmasks",
      "constructive algorithms",
      "sortings"
    ]
  },
  {
    "title": "Double Sort",
    "url": "https://codeforces.com/problemset/problem/1681/C",
    "history": "You are given two arrays a and b , both consisting of n integers. In one move, you can choose two indices i and j ( 1 \u2264 i, j \u2264 n ; i = \u0338 j ) and swap a_ i with a_ j and b_ i with b_ j . You have to perform the swap in both arrays. You are allowed to perform at most 10^ 4 moves ( possibly, zero) . Can you make both arrays sorted in a non- decreasing order at the end? If you can, print any sequence of moves that makes both arrays sorted.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of testcases. The first line of each testcase contains a single integer n ( 2 \u2264 n \u2264 100 ) \u2014 the number of elements in both arrays. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 the first array. The third line contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 n ) \u2014 the second array.",
    "output": "For each testcase, print the answer. If it' s impossible to make both arrays sorted in a non- decreasing order in at most 10^ 4 moves, print - 1. Otherwise, first, print the number of moves k ( 0 \u2264 k \u2264 10^ 4) . Then print i and j for each move ( 1 \u2264 i, j \u2264 n ; i = \u0338 j) . If there are multiple answers, then print any of them. You don' t have to minimize the number of moves.",
    "note": " ",
    "topics": [
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Maximum Crossings (Hard Version)",
    "url": "https://codeforces.com/problemset/problem/1676/H2",
    "history": "The only difference between the two versions is that in this version n \u2264 2 \u00b7 10^ 5 and the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 . A terminal is a row of n equal segments numbered 1 to n in order. There are two terminals, one above the other. You are given an array a of length n . For all i = 1, 2, . . . , n , there should be a straight wire from some point on segment i of the top terminal to some point on segment a_ i of the bottom terminal. You can' t select the endpoints of a segment. For example, the following pictures show two possible wirings if n= 7 and a= [ 4, 1, 4, 6, 7, 7, 5] . A crossing occurs when two wires share a point in common. In the picture above, crossings are circled in red. What is the maximum number of crossings there can be if you place the wires optimally?",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the array. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 the elements of the array. The sum of n across all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output a single integer \u2014 the maximum number of crossings there can be if you place the wires optimally.",
    "note": "The first test case is shown in the second picture in the statement. In the second test case, the only wiring possible has the two wires cross, so the answer is 1 . In the third test case, the only wiring possible has one wire, so the answer is 0 .",
    "topics": [
      "data structures",
      "divide and conquer",
      "sortings"
    ]
  },
  {
    "title": "Longest Strike",
    "url": "https://codeforces.com/problemset/problem/1676/F",
    "history": "Given an array a of length n and an integer k , you are tasked to find any two numbers l and r ( l \u2264 r ) such that: For each x ( l \u2264 x \u2264 r) , x appears in a at least k times ( i. e. k or more array elements are equal to x ) . The value r- l is maximized. If no numbers satisfy the conditions, output - 1. For example, if a= [ 11, 11, 12, 13, 13, 14, 14] and k= 2 , then: for l= 12 , r= 14 the first condition fails because 12 does not appear at least k= 2 times. for l= 13 , r= 14 the first condition holds, because 13 occurs at least k= 2 times in a and 14 occurs at least k= 2 times in a . for l= 11 , r= 11 the first condition holds, because 11 occurs at least k= 2 times in a . A pair of l and r for which the first condition holds and r- l is maximal is l = 13 , r = 14 .",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains the integers n and k ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 k \u2264 n ) \u2014 the length of the array a and the minimum amount of times each number in the range [ l, r] should appear respectively. Then a single line follows, containing n integers describing the array a ( 1 \u2264 a_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case output 2 numbers, l and r that satisfy the conditions, or \" - 1\" if no numbers satisfy the conditions. If multiple answers exist, you can output any.",
    "note": " ",
    "topics": [
      "data structures",
      "greedy",
      "implementation",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Eating Queries",
    "url": "https://codeforces.com/problemset/problem/1676/E",
    "history": "Timur has n candies. The i - th candy has a quantity of sugar equal to a_ i . So, by eating the i - th candy, Timur consumes a quantity of sugar equal to a_ i . Timur will ask you q queries regarding his candies. For the j - th query you have to answer what is the minimum number of candies he needs to eat in order to reach a quantity of sugar greater than or equal to x_ j or print - 1 if it' s not possible to obtain such a quantity. In other words, you should print the minimum possible k such that after eating k candies, Timur consumes a quantity of sugar of at least x_ j or say that no possible k exists. Note that he can' t eat the same candy twice and queries are independent of each other ( Timur can use the same candy in different queries) .",
    "input": "The first line of input contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The description of test cases follows. The first line contains 2 integers n and q ( 1 \u2264 n, q \u2264 1. 5\u00b710^ 5 ) \u2014 the number of candies Timur has and the number of queries you have to print an answer for respectively. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 4 ) \u2014 the quantity of sugar in each of the candies respectively. Then q lines follow. Each of the next q lines contains a single integer x_ j ( 1 \u2264 x_ j \u2264 2 \u00b7 10^ 9 ) \u2013 the quantity Timur wants to reach for the given query. It is guaranteed that the sum of n and the sum of q over all test cases do not exceed 1. 5 \u00b7 10^ 5 .",
    "output": "For each test case output q lines. For the j - th line output the number of candies Timur needs to eat in order to reach a quantity of sugar greater than or equal to x_ j or print - 1 if it' s not possible to obtain such a quantity.",
    "note": "For the first test case: For the first query, Timur can eat any candy, and he will reach the desired quantity. For the second query, Timur can reach a quantity of at least 10 by eating the 7 - th and the 8 - th candies, thus consuming a quantity of sugar equal to 14 . For the third query, there is no possible answer. For the fourth query, Timur can reach a quantity of at least 14 by eating the 7 - th and the 8 - th candies, thus consuming a quantity of sugar equal to 14 . For the second test case: For the only query of the second test case, we can choose the third candy from which Timur receives exactly 3 sugar. It' s also possible to obtain the same answer by choosing the fourth candy.",
    "topics": [
      "binary search",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Equal Candies",
    "url": "https://codeforces.com/problemset/problem/1676/B",
    "history": "There are n boxes with different quantities of candies in each of them. The i - th box has a_ i candies inside. You also have n friends that you want to give the candies to, so you decided to give each friend a box of candies. But, you don' t want any friends to get upset so you decided to eat some ( possibly none) candies from each box so that all boxes have the same quantity of candies in them. Note that you may eat a different number of candies from different boxes and you cannot add candies to any of the boxes. What' s the minimum total number of candies you have to eat to satisfy the requirements?",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 50 ) \u2014 the number of boxes you have. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 7 ) \u2014 the quantity of candies in each box.",
    "output": "For each test case, print a single integer denoting the minimum number of candies you have to eat to satisfy the requirements.",
    "note": "For the first test case, you can eat 1 candy from the second box, 2 candies from the third box, 3 candies from the fourth box and 4 candies from the fifth box. Now the boxes have [ 1, 1, 1, 1, 1] candies in them and you ate 0 + 1 + 2 + 3 + 4 = 10 candies in total so the answer is 10 . For the second test case, the best answer is obtained by making all boxes contain 5 candies in them, thus eating 995 + 995 + 0 + 995 + 995 + 995 = 4975 candies in total.",
    "topics": [
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "A-B-C Sort",
    "url": "https://codeforces.com/problemset/problem/1674/D",
    "history": "You are given three arrays a , b and c . Initially, array a consists of n elements, arrays b and c are empty. You are performing the following algorithm that consists of two steps: Step 1 : while a is not empty, you take the last element from a and move it in the middle of array b . If b currently has odd length, you can choose: place the element from a to the left or to the right of the middle element of b . As a result, a becomes empty and b consists of n elements. Step 2 : while b is not empty, you take the middle element from b and move it to the end of array c . If b currently has even length, you can choose which of two middle elements to take. As a result, b becomes empty and c now consists of n elements. Refer to the Note section for examples. Can you make array c sorted in non- decreasing order?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 4 ) \u2014 the number of test cases. Next t cases follow. The first line of each test case contains the single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of array a . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 6 ) \u2014 the array a itself. It' s guaranteed that the sum of n doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test, print YES ( case- insensitive) , if you can make array c sorted in non- decreasing order. Otherwise, print NO ( case- insensitive) .",
    "note": "In the first test case, we can do the following for a = [ 3, 1, 5, 3] : Step 1 : a [ 3, 1, 5, 3] \u21d2 [ 3, 1, 5] \u21d2 [ 3, 1] \u21d2 [ 3] \u21d2 [ ] b [ ] [ 3] [ 3, 5] [ 3, 1, 5] [ 3, 3, 1, 5] Step 2 : b [ 3, 3, 1, 5] \u21d2 [ 3, 3, 5] \u21d2 [ 3, 5] \u21d2 [ 5] \u21d2 [ ] c [ ] [ 1] [ 1, 3] [ 1, 3, 3] [ 1, 3, 3, 5] As a result, array c = [ 1, 3, 3, 5] and it' s sorted.",
    "topics": [
      "constructive algorithms",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Preorder",
    "url": "https://codeforces.com/problemset/problem/1671/E",
    "history": "You are given a rooted tree of 2^ n - 1 vertices. Every vertex of this tree has either 0 children, or 2 children. All leaves of this tree have the same distance from the root, and for every non- leaf vertex, one of its children is the left one, and the other child is the right one. Formally, you are given a perfect binary tree. The vertices of the tree are numbered in the following order: the root has index 1 ; if a vertex has index x , then its left child has index 2x , and its right child has index 2x+ 1 . Every vertex of the tree has a letter written on it, either A or B. Let' s define the character on the vertex x as s_ x . Let the preorder string of some vertex x be defined in the following way: if the vertex x is a leaf, then the preorder string of x be consisting of only one character s_ x ; otherwise, the preorder string of x is s_ x + f( l_ x) + f( r_ x) , where + operator defines concatenation of strings, f( l_ x) is the preorder string of the left child of x , and f( r_ x) is the preorder string of the right child of x . The preorder string of the tree is the preorder string of its root. Now, for the problem itself. . . You have to calculate the number of different strings that can be obtained as the preorder string of the given tree, if you are allowed to perform the following operation any number of times before constructing the preorder string of the tree: choose any non- leaf vertex x , and swap its children ( so, the left child becomes the right one, and vice versa) .",
    "input": "The first line contains one integer n ( 2 \u2264 n \u2264 18 ) . The second line contains a sequence of 2^ n- 1 characters s_ 1, s_ 2, . . . , s_ 2^ n- 1 . Each character is either A or B. The characters are not separated by spaces or anything else.",
    "output": "Print one integer \u2014 the number of different strings that can be obtained as the preorder string of the given tree, if you can apply any number of operations described in the statement. Since it can be very large, print it modulo 998244353 .",
    "note": " ",
    "topics": [
      "combinatorics",
      "divide and conquer",
      "dp",
      "dsu",
      "hashing",
      "sortings",
      "trees"
    ]
  },
  {
    "title": "Consecutive Points Segment",
    "url": "https://codeforces.com/problemset/problem/1671/B",
    "history": "You are given n points with integer coordinates on a coordinate axis OX . The coordinate of the i - th point is x_ i . All points' coordinates are distinct and given in strictly increasing order. For each point i , you can do the following operation no more than once: take this point and move it by 1 to the left or to the right ( i. . e. , you can change its coordinate x_ i to x_ i - 1 or to x_ i + 1 ) . In other words, for each point, you choose ( separately) its new coordinate. For the i - th point, it can be either x_ i - 1 , x_ i or x_ i + 1 . Your task is to determine if you can move some points as described above in such a way that the new set of points forms a consecutive segment of integers, i. e. for some integer l the coordinates of points should be equal to l, l + 1, . . . , l + n - 1 . Note that the resulting points should have distinct coordinates. You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of points in the set x . The second line of the test case contains n integers x_ 1 < x_ 2 < . . . < x_ n ( 1 \u2264 x_ i \u2264 10^ 6 ) , where x_ i is the coordinate of the i - th point. It is guaranteed that the points are given in strictly increasing order ( this also means that all coordinates are distinct) . It is also guaranteed that the sum of n does not exceed 2 \u00b7 10^ 5 ( \u2211 n \u2264 2 \u00b7 10^ 5 ) .",
    "output": "For each test case, print the answer \u2014 if the set of points from the test case can be moved to form a consecutive segment of integers, print YES, otherwise print NO.",
    "note": " ",
    "topics": [
      "brute force",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Prof. Slim",
    "url": "https://codeforces.com/problemset/problem/1670/A",
    "history": "One day Prof. Slim decided to leave the kingdom of the GUC to join the kingdom of the GIU. He was given an easy online assessment to solve before joining the GIU. Citizens of the GUC were happy sad to see the prof leaving, so they decided to hack into the system and change the online assessment into a harder one so that he stays at the GUC. After a long argument, they decided to change it into the following problem. Given an array of n integers a_ 1, a_ 2, . . . , a_ n , where a_ i= \u0338 0 , check if you can make this array sorted by using the following operation any number of times ( possibly zero) . An array is sorted if its elements are arranged in a non- decreasing order. select two indices i and j ( 1 \u2264 i, j \u2264 n ) such that a_ i and a_ j have different signs. In other words, one must be positive and one must be negative. swap the signs of a_ i and a_ j . For example if you select a_ i= 3 and a_ j= - 2 , then they will change to a_ i= - 3 and a_ j= 2 . Prof. Slim saw that the problem is still too easy and isn' t worth his time, so he decided to give it to you to solve.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of the array a . The next line contain n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9 \u2264 a_ i\u2264 10^ 9 , a_ i= \u0338 0 ) separated by spaces describing elements of the array a . It is guaranteed that the sum of n over all test cases doesn' t exceed 10^ 5 .",
    "output": "For each test case, print \" YES\" if the array can be sorted in the non- decreasing order, otherwise print \" NO\" . You can print each letter in any case ( upper or lower) .",
    "note": "In the first test case, there is no way to make the array sorted using the operation any number of times. In the second test case, the array is already sorted. In the third test case, we can swap the sign of the 1 - st element with the sign of the 5 - th element, and the sign of the 3 - rd element with the sign of the 6 - th element, this way the array will be sorted. In the fourth test case, there is no way to make the array sorted using the operation any number of times.",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Triple",
    "url": "https://codeforces.com/problemset/problem/1669/B",
    "history": "Given an array a of n elements, print any value that appears at least three times or print - 1 if there is no such value.",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 2\u00b710^ 5 ) \u2014 the length of the array. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 the elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 2\u00b710^ 5 .",
    "output": "For each test case, print any value that appears at least three times or print - 1 if there is no such value.",
    "note": "In the first test case there is just a single element, so it can' t occur at least three times and the answer is - 1. In the second test case, all three elements of the array are equal to 2 , so 2 occurs three times, and so the answer is 2 . For the third test case, 2 occurs four times, so the answer is 2 . For the fourth test case, 4 occurs three times, so the answer is 4 . For the fifth test case, 1 , 2 and 3 all occur at least three times, so they are all valid outputs. For the sixth test case, all elements are distinct, so none of them occurs at least three times and the answer is - 1.",
    "topics": [
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Social Distance",
    "url": "https://codeforces.com/problemset/problem/1668/B",
    "history": "m chairs are arranged in a circle sequentially. The chairs are numbered from 0 to m- 1 . n people want to sit in these chairs. The i - th of them wants at least a[ i] empty chairs both on his right and left side. More formally, if the i - th person sits in the j - th chair, then no one else should sit in the following chairs: ( j- a[ i] ) m , ( j- a[ i] + 1) m , . . . ( j+ a[ i] - 1) m , ( j+ a[ i] ) m . Decide if it is possible to sit down for all of them, under the given limitations.",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 5 \u00b7 10^ 4 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains two integers n and m ( 2 \u2264 n \u2264 10^ 5 , 1 \u2264 m \u2264 10^ 9 ) \u2014 the number of people and the number of chairs. The next line contains n integers, a_ 1 , a_ 2 , . . . a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the minimum number of empty chairs, on both sides of the i - th person. It is guaranteed that the sum of n over all test cases will not exceed 10^ 5 .",
    "output": "For each test case print \" YES\" ( without quotes) if it is possible for everyone to sit down and fulfil the restrictions, and \" NO\" ( without quotes) otherwise. You may print every letter in any case you want ( so, for example, the strings \" yEs\" , \" yes\" , \" Yes\" and \" YES\" will all be recognized as positive answers) .",
    "note": "Test case 1 : n> m , so they can not sit down. Test case 2 : the first person can sit 2 - nd and the second person can sit in the 0 - th chair. Both of them want at least 1 empty chair on both sides, chairs 1 and 3 are free, so this is a good solution. Test case 3 : if the second person sits down somewhere, he needs 2 empty chairs, both on his right and on his left side, so it is impossible to find a place for the first person, because there are only 5 chairs. Test case 4 : they can sit in the 1 - st, 4 - th, 7 - th chairs respectively.",
    "topics": [
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Tree Infection",
    "url": "https://codeforces.com/problemset/problem/1665/C",
    "history": "A tree is a connected graph without cycles. A rooted tree has a special vertex called the root. The parent of a vertex v ( different from root) is the previous to v vertex on the shortest path from the root to the vertex v . Children of the vertex v are all vertices for which v is the parent. You are given a rooted tree with n vertices. The vertex 1 is the root. Initially, all vertices are healthy. Each second you do two operations, the spreading operation and, after that, the injection operation: Spreading: for each vertex v , if at least one child of v is infected, you can spread the disease by infecting at most one other child of v of your choice. Injection: you can choose any healthy vertex and infect it. This process repeats each second until the whole tree is infected. You need to find the minimal number of seconds needed to infect the whole tree.",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains a single integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of the vertices in the given tree. The second line of each test case contains n - 1 integers p_ 2, p_ 3, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) , where p_ i is the ancestor of the i - th vertex in the tree. It is guaranteed that the given graph is a tree. It is guaranteed that the sum of n over all test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case you should output a single integer \u2014 the minimal number of seconds needed to infect the whole tree.",
    "note": "The image depicts the tree from the first test case during each second. A vertex is black if it is not infected. A vertex is blue if it is infected by injection during the previous second. A vertex is green if it is infected by spreading during the previous second. A vertex is red if it is infected earlier than the previous second. Note that you are able to choose which vertices are infected by spreading and by injections.",
    "topics": [
      "binary search",
      "greedy",
      "sortings",
      "trees"
    ]
  },
  {
    "title": "Array Cloning Technique",
    "url": "https://codeforces.com/problemset/problem/1665/B",
    "history": "You are given an array a of n integers. Initially there is only one copy of the given array. You can do operations of two types: Choose any array and clone it. After that there is one more copy of the chosen array. Swap two elements from any two copies ( maybe in the same copy) on any positions. You need to find the minimal number of operations needed to obtain a copy where all elements are equal.",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of the array a . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) \u2014 the elements of the array a . It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case output a single integer \u2014 the minimal number of operations needed to create at least one copy where all elements are equal.",
    "note": "In the first test case all elements in the array are already equal, that' s why the answer is 0 . In the second test case it is possible to create a copy of the given array. After that there will be two identical arrays: [ 0 1 3 3 7 0 ] and [ 0 1 3 3 7 0 ] After that we can swap elements in a way so all zeroes are in one array: [ 0 0 0 3 7 0 ] and [ 1 1 3 3 7 3 ] Now let' s create a copy of the first array: [ 0 0 0 3 7 0 ] , [ 0 0 0 3 7 0 ] and [ 1 1 3 3 7 3 ] Let' s swap elements in the first two copies: [ 0 0 0 0 0 0 ] , [ 3 7 0 3 7 0 ] and [ 1 1 3 3 7 3 ] . Finally, we made a copy where all elements are equal and made 6 operations. It can be proven that no fewer operations are enough.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Drone Photo",
    "url": "https://codeforces.com/problemset/problem/1662/N",
    "history": "Today, like every year at SWERC, the n^ 2 contestants have gathered outside the venue to take a drone photo. Jennifer, the social media manager for the event, has arranged them into an n\u00d7 n square. Being very good at her job, she knows that the contestant standing on the intersection of the i - th row with the j - th column is a_ i, j years old. Coincidentally, she notices that no two contestants have the same age, and that everyone is between 1 and n^ 2 years old. Jennifer is planning to have some contestants hold a banner with the ICPC logo parallel to the ground, so that it is clearly visible in the aerial picture. Here are the steps that she is going to follow in order to take the perfect SWERC drone photo. First of all, Jennifer is going to select four contestants standing on the vertices of an axis- aligned rectangle. Then, she will have the two younger contestants hold one of the poles, while the two older contestants will hold the other pole. Finally, she will unfold the banner, using the poles to support its two ends. Obviously, this can only be done if the two poles are parallel and do not cross, as shown in the pictures below. Being very indecisive, Jennifer would like to try out all possible arrangements for the banner, but she is worried that this may cause the contestants to be late for the competition. How many different ways are there to choose the four contestants holding the poles in order to take a perfect photo? Two choices are considered different if at least one contestant is included in one but not the other.",
    "input": "The first line contains a single integer n ( 2\u2264 n \u2264 1500 ) . The next n lines describe the ages of the contestants. Specifically, the i - th line contains the integers a_ i, 1, a_ i, 2, . . . , a_ i, n ( 1\u2264 a_ i, j\u2264 n^ 2 ) . It is guaranteed that a_ i, j= \u0338 a_ k, l if i= \u0338 k or j= \u0338 l .",
    "output": "Print the number of ways for Jennifer to choose the four contestants holding the poles.",
    "note": "In the first sample, there are 4 contestants, arranged as follows. There is only one way to choose four contestants, with one pole held by contestants aged 1 and 2 and the other one by contestants aged 3 and 4 . But then, as we can see in the picture, the poles cross. Since there is no valid way to choose four contestants, the answer is 0 . In the second sample, the 4 contestants are arranged as follows. Once again, there is only one way to choose four contestants, but this time the poles don' t cross. Therefore, the answer is 1 . In the third sample, the 9 contestants are arranged as follows. There are 6 ways of choosing four contestants so that the poles don' t cross, as shown in the following pictures.",
    "topics": [
      "combinatorics",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Ice Cream Shop",
    "url": "https://codeforces.com/problemset/problem/1662/I",
    "history": "On a beach there are n huts in a perfect line, hut 1 being at the left and hut i+ 1 being 100 meters to the right of hut i , for all 1 \u2264 i \u2264 n - 1 . In hut i there are p_ i people. There are m ice cream sellers, also aligned in a perfect line with all the huts. The i - th ice cream seller has their shop x_ i meters to the right of the first hut. All ice cream shops are at distinct locations, but they may be at the same location as a hut. You want to open a new ice cream shop and you wonder what the best location for your shop is. You can place your ice cream shop anywhere on the beach ( not necessarily at an integer distance from the first hut) as long as it is aligned with the huts and the other ice cream shops, even if there is already another ice cream shop or a hut at that location. You know that people would come to your shop only if it is strictly closer to their hut than any other ice cream shop. If every person living in the huts wants to buy exactly one ice cream, what is the maximum number of ice creams that you can sell if you place the shop optimally?",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 200 000 , 1 \u2264 m \u2264 200 000 ) \u2014 the number of huts and the number of ice cream sellers. The second line contains n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 10^ 9 ) \u2014 the number of people in each hut. The third line contains m integers x_ 1, x_ 2, . . . , x_ m ( 0 \u2264 x_ i \u2264 10^ 9 , x_ i x_ j for i j ) \u2014 the location of each ice cream shop.",
    "output": "Print the maximum number of ice creams that can be sold by choosing optimally the location of the new shop.",
    "note": "In the first sample, you can place the shop ( coloured orange in the picture below) 150 meters to the right of the first hut ( for example) so that it is the closest shop to the first two huts, which have 2 and 5 people, for a total of 7 sold ice creams. In the second sample, you can place the shop 170 meters to the right of the first hut ( for example) so that it is the closest shop to the last two huts, which have 7 and 8 people, for a total of 15 sold ice creams.",
    "topics": [
      "brute force",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Gojou and Matrix Game",
    "url": "https://codeforces.com/problemset/problem/1658/E",
    "history": "Marin feels exhausted after a long day of cosplay, so Gojou invites her to play a game! Marin and Gojou take turns to place one of their tokens on an n \u00d7 n grid with Marin starting first. There are some restrictions and allowances on where to place tokens: Apart from the first move, the token placed by a player must be more than Manhattan distance k away from the previous token placed on the matrix. In other words, if a player places a token at ( x_ 1, y_ 1) , then the token placed by the other player in the next move must be in a cell ( x_ 2, y_ 2) satisfying | x_ 2 - x_ 1| + | y_ 2 - y_ 1| > k . Apart from the previous restriction, a token can be placed anywhere on the matrix, including cells where tokens were previously placed by any player. Whenever a player places a token on cell ( x, y) , that player gets v_ x, y points. All values of v on the grid are distinct. You still get points from a cell even if tokens were already placed onto the cell. The game finishes when each player makes 10^ 100 moves. Marin and Gojou will play n^ 2 games. For each cell of the grid, there will be exactly one game where Marin places a token on that cell on her first move. Please answer for each game, if Marin and Gojou play optimally ( after Marin' s first move) , who will have more points at the end? Or will the game end in a draw ( both players have the same points at the end) ?",
    "input": "The first line contains two integers n , k ( 3 \u2264 n \u2264 2000 , 1 \u2264 k \u2264 n - 2 ) . Note that under these constraints it is always possible to make a move. The following n lines contains n integers each. The j - th integer in the i - th line is v_ i, j ( 1 \u2264 v_ i, j\u2264 n^ 2 ) . All elements in v are distinct.",
    "output": "You should print n lines. In the i - th line, print n characters, where the j - th character is the result of the game in which Marin places her first token in the cell ( i, j) . Print ' M' if Marin wins, ' G' if Gojou wins, and ' D' if the game ends in a draw. Do not print spaces between the characters in one line.",
    "note": " ",
    "topics": [
      "data structures",
      "dp",
      "games",
      "hashing",
      "implementation",
      "math",
      "number theory",
      "sortings"
    ]
  },
  {
    "title": "For Gamers. By Gamers.",
    "url": "https://codeforces.com/problemset/problem/1657/D",
    "history": "Monocarp is playing a strategy game. In the game, he recruits a squad to fight monsters. Before each battle, Monocarp has C coins to spend on his squad. Before each battle starts, his squad is empty. Monocarp chooses one type of units and recruits no more units of that type than he can recruit with C coins. There are n types of units. Every unit type has three parameters: c_ i \u2014 the cost of recruiting one unit of the i - th type; d_ i \u2014 the damage that one unit of the i - th type deals in a second; h_ i \u2014 the amount of health of one unit of the i - th type. Monocarp has to face m monsters. Every monster has two parameters: D_ j \u2014 the damage that the j - th monster deals in a second; H_ j \u2014 the amount of health the j - th monster has. Monocarp has to fight only the j - th monster during the j - th battle. He wants all his recruited units to stay alive. Both Monocarp' s squad and the monster attack continuously ( not once per second) and at the same time. Thus, Monocarp wins the battle if and only if his squad kills the monster strictly faster than the monster kills one of his units. The time is compared with no rounding. For each monster, Monocarp wants to know the minimum amount of coins he has to spend to kill that monster. If this amount is greater than C , then report that it' s impossible to kill that monster.",
    "input": "The first line contains two integers n and C ( 1 \u2264 n \u2264 3 \u00b7 10^ 5 ; 1 \u2264 C \u2264 10^ 6 ) \u2014 the number of types of units and the amount of coins Monocarp has before each battle. The i - th of the next n lines contains three integers c_ i, d_ i and h_ i ( 1 \u2264 c_ i \u2264 C ; 1 \u2264 d_ i, h_ i \u2264 10^ 6 ) . The next line contains a single integer m ( 1 \u2264 m \u2264 3 \u00b7 10^ 5 ) \u2014 the number of monsters that Monocarp has to face. The j - th of the next m lines contains two integers D_ j and H_ j ( 1 \u2264 D_ j \u2264 10^ 6 ; 1 \u2264 H_ j \u2264 10^ 12 ) .",
    "output": "Print m integers. For each monster, print the minimum amount of coins Monocarp has to spend to kill that monster. If this amount is greater than C , then print - 1 .",
    "note": "Consider the first monster of the first example. Monocarp can' t recruit one unit of the first type, because it will take both him and the monster 0. 75 seconds to kill each other. He can recruit two units for the cost of 6 coins and kill the monster in 0. 375 second. Monocarp can recruit one unit of the second type, because he kills the monster in 0. 6 seconds, and the monster kills him in 0. 625 seconds. The unit is faster. Thus, 5 coins is enough. Monocarp will need at least three units of the third type to kill the first monster, that will cost 30 coins. Monocarp will spend the least coins if he chooses the second type of units and recruits one unit of that type.",
    "topics": [
      "binary search",
      "brute force",
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Parametric MST",
    "url": "https://codeforces.com/problemset/problem/1656/F",
    "history": "You are given n integers a_ 1, a_ 2, . . . , a_ n . For any real number t , consider the complete weighted graph on n vertices K_ n( t) with weight of the edge between vertices i and j equal to w_ ij( t) = a_ i \u00b7 a_ j + t \u00b7 ( a_ i + a_ j) . Let f( t) be the cost of the minimum spanning tree of K_ n( t) . Determine whether f( t) is bounded above and, if so, output the maximum value it attains.",
    "input": "The input consists of multiple test cases. The first line contains a single integer T ( 1 \u2264 T \u2264 10^ 4 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains an integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of vertices of the graph. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 6 \u2264 a_ i \u2264 10^ 6 ) . The sum of n for all test cases is at most 2 \u00b7 10^ 5 .",
    "output": "For each test case, print a single line with the maximum value of f( t) ( it can be shown that it is an integer) , or INF if f( t) is not bounded above.",
    "note": " ",
    "topics": [
      "binary search",
      "constructive algorithms",
      "graphs",
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Make Equal With Mod",
    "url": "https://codeforces.com/problemset/problem/1656/C",
    "history": "You are given an array of n non- negative integers a_ 1, a_ 2, . . . , a_ n . You can make the following operation: choose an integer x \u2265 2 and replace each number of the array by the remainder when dividing that number by x , that is, for all 1 \u2264 i \u2264 n set a_ i to a_ i x . Determine if it is possible to make all the elements of the array equal by applying the operation zero or more times.",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of the array. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) where a_ i is the i - th element of the array. The sum of n for all test cases is at most 2 \u00b7 10^ 5 .",
    "output": "For each test case, print a line with YES if you can make all elements of the list equal by applying the operation. Otherwise, print NO. You may print each letter in any case ( for example, \" YES\" , \" Yes\" , \" yes\" , \" yEs\" will all be recognized as a positive answer) .",
    "note": "In the first test case, one can apply the operation with x = 3 to obtain the array [ 2, 2, 0, 2] , and then apply the operation with x = 2 to obtain [ 0, 0, 0, 0] . In the second test case, all numbers are already equal. In the fourth test case, applying the operation with x = 4 results in the array [ 1, 1, 1, 1] .",
    "topics": [
      "constructive algorithms",
      "math",
      "number theory",
      "sortings"
    ]
  },
  {
    "title": "Good Pairs",
    "url": "https://codeforces.com/problemset/problem/1656/A",
    "history": "You are given an array a_ 1, a_ 2, . . . , a_ n of positive integers. A good pair is a pair of indices ( i, j) with 1 \u2264 i, j \u2264 n such that, for all 1 \u2264 k \u2264 n , the following equality holds: | a_ i - a_ k| + | a_ k - a_ j| = | a_ i - a_ j| , where | x| denotes the absolute value of x . Find a good pair. Note that i can be equal to j .",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of the array. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) where a_ i is the i - th element of the array. The sum of n for all test cases is at most 2 \u00b7 10^ 5 .",
    "output": "For each test case, print a single line with two space- separated indices i and j which form a good pair of the array. The case i= j is allowed. It can be shown that such a pair always exists. If there are multiple good pairs, print any of them.",
    "note": "In the first case, for i = 2 and j = 3 the equality holds true for all k : k = 1 : | a_ 2 - a_ 1| + | a_ 1 - a_ 3| = | 2 - 5| + | 5 - 7| = 5 = | 2 - 7| = | a_ 2- a_ 3| , k = 2 : | a_ 2 - a_ 2| + | a_ 2 - a_ 3| = | 2 - 2| + | 2 - 7| = 5 = | 2 - 7| = | a_ 2- a_ 3| , k = 3 : | a_ 2 - a_ 3| + | a_ 3 - a_ 3| = | 2 - 7| + | 7 - 7| = 5 = | 2 - 7| = | a_ 2- a_ 3| .",
    "topics": [
      "math",
      "sortings"
    ]
  },
  {
    "title": "Minimal String Xoration",
    "url": "https://codeforces.com/problemset/problem/1654/F",
    "history": "You are given an integer n and a string s consisting of 2^ n lowercase letters of the English alphabet. The characters of the string s are s_ 0s_ 1s_ 2\u22ef s_ 2^ n- 1 . A string t of length 2^ n ( whose characters are denoted by t_ 0t_ 1t_ 2\u22ef t_ 2^ n- 1 ) is a xoration of s if there exists an integer j ( 0\u2264 j \u2264 2^ n- 1 ) such that, for each 0 \u2264 i \u2264 2^ n- 1 , t_ i = s_ i \u2295 j ( where \u2295 denotes the operation bitwise XOR) . Find the lexicographically minimal xoration of s . A string a is lexicographically smaller than a string b if and only if one of the following holds: a is a prefix of b , but a b ; in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b .",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 18 ) . The second line contains a string s consisting of 2^ n lowercase letters of the English alphabet.",
    "output": "Print a single line containing the lexicographically minimal xoration of s .",
    "note": "In the first test, the lexicographically minimal xoration t of s = \" acba\" is \" abca\" . It' s a xoration because, for j = 3 , t_ 0 = s_ 0 \u2295 j = s_ 3 = \" a\" ; t_ 1 = s_ 1 \u2295 j = s_ 2 = \" b\" ; t_ 2 = s_ 2 \u2295 j = s_ 1 = \" c\" ; t_ 3 = s_ 3 \u2295 j = s_ 0 = \" a\" . There isn' t any xoration of s lexicographically smaller than \" abca\" . In the second test, the minimal string xoration corresponds to choosing j = 4 in the definition of xoration. In the third test, the minimal string xoration corresponds to choosing j = 11 in the definition of xoration. In the fourth test, the minimal string xoration corresponds to choosing j = 10 in the definition of xoration. In the fifth test, the minimal string xoration corresponds to choosing either j = 0 or j = 1 in the definition of xoration.",
    "topics": [
      "bitmasks",
      "data structures",
      "divide and conquer",
      "greedy",
      "hashing",
      "sortings",
      "strings"
    ]
  },
  {
    "title": "Alice and the Cake",
    "url": "https://codeforces.com/problemset/problem/1654/C",
    "history": "Alice has a cake, and she is going to cut it. She will perform the following operation n- 1 times: choose a piece of the cake ( initially, the cake is all one piece) with weight w\u2265 2 and cut it into two smaller pieces of weight \u230aw/ 2\u230b and \u2308w/ 2\u2309 ( \u230a x \u230b and \u2308 x \u2309 denote floor and ceiling functions, respectively) . After cutting the cake in n pieces, she will line up these n pieces on a table in an arbitrary order. Let a_ i be the weight of the i - th piece in the line. You are given the array a . Determine whether there exists an initial weight and sequence of operations which results in a .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n for all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print a single line: print YES if the array a could have resulted from Alice' s operations, otherwise print NO. You may print each letter in any case ( for example, YES, Yes, yes, yEs will all be recognized as positive answer) .",
    "note": "In the first test case, it' s possible to get the array a by performing 0 operations on a cake with weight 327 . In the second test case, it' s not possible to get the array a . In the third test case, it' s possible to get the array a by performing 1 operation on a cake with weight 1 970 429 473 : Cut it in half, so that the weights are [ 985 214 736, 985 214 737] . Note that the starting weight can be greater than 10^ 9 . In the fourth test case, it' s possible to get the array a by performing 2 operations on a cake with weight 6 : Cut it in half, so that the weights are [ 3, 3] . Cut one of the two pieces with weight 3 , so that the new weights are [ 1, 2, 3] which is equivalent to [ 2, 3, 1] up to reordering.",
    "topics": [
      "data structures",
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Maximum Cake Tastiness",
    "url": "https://codeforces.com/problemset/problem/1654/A",
    "history": "There are n pieces of cake on a line. The i - th piece of cake has weight a_ i ( 1 \u2264 i \u2264 n ) . The tastiness of the cake is the maximum total weight of two adjacent pieces of cake ( i. e. , max( a_ 1+ a_ 2, a_ 2+ a_ 3, . . . , a_ n- 1 + a_ n) ) . You want to maximize the tastiness of the cake. You are allowed to do the following operation at most once ( doing more operations would ruin the cake) : Choose a contiguous subsegment a[ l, r] of pieces of cake ( 1 \u2264 l \u2264 r \u2264 n ) , and reverse it. The subsegment a[ l, r] of the array a is the sequence a_ l, a_ l+ 1, . . . , a_ r . If you reverse it, the array will become a_ 1, a_ 2, . . . , a_ l- 2, a_ l- 1, a_ r, a_ r- 1, . . . , a_ l+ 1, a_ l, a_ r+ 1, a_ r+ 2, . . . , a_ n- 1, a_ n . For example, if the weights are initially [ 5, 2, 1, 4, 7, 3] , you can reverse the subsegment a[ 2, 5] , getting [ 5, 7, 4, 1, 2, 3] . The tastiness of the cake is now 5 + 7 = 12 ( while before the operation the tastiness was 4+ 7= 11 ) . Find the maximum tastiness of the cake after doing the operation at most once.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 50 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 2 \u2264 n \u2264 1000 ) \u2014 the number of pieces of cake. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 a_ i is the weight of the i - th piece of cake.",
    "output": "For each test case, print a single integer: the maximum tastiness of the cake after doing the operation at most once.",
    "note": "In the first test case, after reversing the subsegment a[ 2, 5] , you get a cake with weights [ 5, 7, 4, 1, 2, 3] . The tastiness of the cake is now max( 5+ 7, 7+ 4, 4+ 1, 1+ 2, 2+ 3) = 12 . This is the maximum possible tastiness of the cake one can obtain by performing the operation at most once. In the second test case, it' s optimal not to do any operation. The tastiness is 78+ 78 = 156 . In the third test case, after reversing the subsegment a[ 1, 2] , you get a cake with weights [ 54, 69, 91] . The tastiness of the cake is now max( 54+ 69, 69+ 91) = 160 . There is no way to make the tastiness of the cake greater than 160 by performing at most one operation.",
    "topics": [
      "brute force",
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Rescheduling the Exam",
    "url": "https://codeforces.com/problemset/problem/1650/E",
    "history": "Now Dmitry has a session, and he has to pass n exams. The session starts on day 1 and lasts d days. The i th exam will take place on the day of a_ i ( 1 \u2264 a_ i \u2264 d ) , all a_ i \u2014 are different. Sample, where n= 3 , d= 12 , a= [ 3, 5, 9] . Orange \u2014 exam days. Before the first exam Dmitry will rest 2 days, before the second he will rest 1 day and before the third he will rest 3 days. For the session schedule, Dmitry considers a special value \u03bc \u2014 the smallest of the rest times before the exam for all exams. For example, for the image above, \u03bc= 1 . In other words, for the schedule, he counts exactly n numbers \u2014 how many days he rests between the exam i- 1 and i ( for i= 0 between the start of the session and the exam i ) . Then it finds \u03bc \u2014 the minimum among these n numbers. Dmitry believes that he can improve the schedule of the session. He may ask to change the date of one exam ( change one arbitrary value of a_ i ) . Help him change the date so that all a_ i remain different, and the value of \u03bc is as large as possible. For example, for the schedule above, it is most advantageous for Dmitry to move the second exam to the very end of the session. The new schedule will take the form: Now the rest periods before exams are equal to [ 2, 2, 5] . So, \u03bc= 2 . Dmitry can leave the proposed schedule unchanged ( if there is no way to move one exam so that it will lead to an improvement in the situation) .",
    "input": "The first line of input data contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of input test cases. The descriptions of test cases follow. An empty line is written in the test before each case. The first line of each test case contains two integers n and d ( 2 \u2264 n \u2264 2 \u00b7 10^ 5, 1 \u2264 d \u2264 10^ 9 ) \u2014 the number of exams and the length of the session, respectively. The second line of each test case contains n integers a_ i ( 1 \u2264 a_ i \u2264 d, a_ i < a_ i+ 1 ) , where the i - th number means the date of the i - th exam. It is guaranteed that the sum of n for all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output the maximum possible value of \u03bc if Dmitry can move any one exam to an arbitrary day. All values of a_ i should remain distinct.",
    "note": "The first sample is parsed in statement. One of the optimal schedule changes for the second sample: Initial schedule. New schedule. In the third sample, we need to move the exam from day 1 to any day from 4 to 100 . In the fourth sample, any change in the schedule will only reduce \u03bc , so the schedule should be left as it is. In the fifth sample, we need to move the exam from day 1 to any day from 100000000 to 300000000 . One of the optimal schedule changes for the sixth sample: Initial schedule. New schedule. In the seventh sample, every day is exam day, and it is impossible to rearrange the schedule.",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "implementation",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Weight of the System of Nested Segments",
    "url": "https://codeforces.com/problemset/problem/1650/C",
    "history": "On the number line there are m points, i - th of which has integer coordinate x_ i and integer weight w_ i . The coordinates of all points are different, and the points are numbered from 1 to m . A sequence of n segments [ l_ 1, r_ 1] , [ l_ 2, r_ 2] , . . . , [ l_ n, r_ n] is called system of nested segments if for each pair i, j ( 1 \u2264 i < j \u2264 n ) the condition l_ i < l_ j < r_ j < r_ i is satisfied. In other words, the second segment is strictly inside the first one, the third segment is strictly inside the second one, and so on. For a given number n , find a system of nested segments such that: both ends of each segment are one of m given points; the sum of the weights 2\u00b7 n of the points used as ends of the segments is minimal. For example, let m = 8 . The given points are marked in the picture, their weights are marked in red, their coordinates are marked in blue. Make a system of three nested segments: weight of the first segment: 1 + 1 = 2 weight of the second segment: 10 + ( - 1) = 9 weight of the third segment: 3 + ( - 2) = 1 sum of the weights of all the segments in the system: 2 + 9 + 1 = 12 System of three nested segments",
    "input": "The first line of input data contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014the number of input test cases. An empty line is written before each test case. The first line of each test case contains two positive integers n ( 1 \u2264 n \u2264 10^ 5 ) and m ( 2 \u00b7 n \u2264 m \u2264 2 \u00b7 10^ 5 ) . The next m lines contain pairs of integers x_ i ( - 10^ 9 \u2264 x_ i \u2264 10^ 9 ) and w_ i ( - 10^ 4 \u2264 w_ i \u2264 10^ 4 ) \u2014 coordinate and weight of point number i ( 1 \u2264 i \u2264 m ) respectively. All x_ i are different. It is guaranteed that the sum of m values over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output n + 1 lines: in the first of them, output the weight of the composed system, and in the next n lines output exactly two numbers \u2014 the indices of the points which are the endpoints of the i - th segment ( 1 \u2264 i \u2264 n ) . The order in which you output the endpoints of a segment is not important \u2014 you can output the index of the left endpoint first and then the number of the right endpoint, or the other way around. If there are several ways to make a system of nested segments with minimal weight, output any of them.",
    "note": "The first test case coincides with the example from the condition. It can be shown that the weight of the composed system is minimal. The second test case has only 6 points, so you need to use each of them to compose 3 segments.",
    "topics": [
      "greedy",
      "hashing",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Weird Sum",
    "url": "https://codeforces.com/problemset/problem/1648/A",
    "history": "Egor has a table of size n \u00d7 m , with lines numbered from 1 to n and columns numbered from 1 to m . Each cell has a color that can be presented as an integer from 1 to 10^ 5 . Let us denote the cell that lies in the intersection of the r - th row and the c - th column as ( r, c) . We define the manhattan distance between two cells ( r_ 1, c_ 1) and ( r_ 2, c_ 2) as the length of a shortest path between them where each consecutive cells in the path must have a common side. The path can go through cells of any color. For example, in the table 3 \u00d7 4 the manhattan distance between ( 1, 2) and ( 3, 3) is 3 , one of the shortest paths is the following: ( 1, 2) \u2192 ( 2, 2) \u2192 ( 2, 3) \u2192 ( 3, 3) . Egor decided to calculate the sum of manhattan distances between each pair of cells of the same color. Help him to calculate this sum.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 m , n \u00b7 m \u2264 100 000 ) \u2014 number of rows and columns in the table. Each of next n lines describes a row of the table. The i - th line contains m integers c_ i1, c_ i2, . . . , c_ im ( 1 \u2264 c_ ij\u2264 100 000 ) \u2014 colors of cells in the i - th row.",
    "output": "Print one integer \u2014 the the sum of manhattan distances between each pair of cells of the same color.",
    "note": "In the first sample there are three pairs of cells of same color: in cells ( 1, 1) and ( 2, 3) , in cells ( 1, 2) and ( 2, 2) , in cells ( 1, 3) and ( 2, 1) . The manhattan distances between them are 3 , 1 and 3 , the sum is 7 .",
    "topics": [
      "combinatorics",
      "data structures",
      "geometry",
      "math",
      "matrices",
      "sortings"
    ]
  },
  {
    "title": "Quality vs Quantity",
    "url": "https://codeforces.com/problemset/problem/1646/B",
    "history": "# 1# 1# 1# 1 RedBlue You are given a sequence of n non- negative integers a_ 1, a_ 2, . . . , a_ n . Initially, all the elements of the sequence are unpainted. You can paint each number or ( but not both) , or leave it unpainted. For a color c , Count( c) is the number of elements in the sequence painted with that color and Sum( c) is the sum of the elements in the sequence painted with that color. For example, if the given sequence is [ 2, 8, 6, 3, 1] and it is painted this way: [ 2, 8, 6, 3, 1] ( where 6 is painted red, 2 and 3 are painted blue, 1 and 8 are unpainted) then Sum( ) = 6 , Sum( ) = 2+ 3= 5 , Count( ) = 1 , and Count( ) = 2 . Determine if it is possible to paint the sequence so that Sum( ) > Sum( ) and Count( ) < Count( ) .",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 1000 ) . Description of the test cases follows. The first line of each test case contains an integer n ( 3\u2264 n\u2264 2\u00b7 10^ 5 ) \u2014 the length of the given sequence. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0\u2264 a_ i\u2264 10^ 9 ) \u2014 the given sequence. It is guaranteed that the sum of n over all test cases does not exceed 2\u00b7 10^ 5 .",
    "output": "For each test case, print YES if it is possible to paint the given sequence satisfying the above requirements, and NO otherwise. You can output YES and NO in any case ( for example, strings yEs, yes, Yes and YES will be recognized as a positive response) .",
    "note": "In the first test case, there is no possible way to paint the sequence. For example, if you paint the sequence this way: [ 1, 2, 3] ( where 3 is painted red, 1 and 2 are painted blue) then Count( ) = 1 < Count( ) = 2 , but Sum( ) = 3 > \u0338Sum( ) = 3 . So, this is not a possible way to paint the sequence. In the second test case, a possible way to paint the sequence is described in the statement. We can see that Sum( ) = 6 > Sum( ) = 5 and Count( ) = 1 < Count( ) = 2 . In the third test case, there is no possible way to paint the sequence. For example, if you paint the sequence this way: [ 3, 5, 4, 2] ( where 3 and 5 are painted red, 4 and 2 are painted blue) then Sum( ) = 8 > Sum( ) = 6 but Count( ) = 2 < \u0338Count( ) = 2 . So, this is not a possible way to paint the sequence. In the fourth test case, it can be proven that there is no possible way to paint the sequence satisfying sum and count constraints.",
    "topics": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Anonymity Is Important",
    "url": "https://codeforces.com/problemset/problem/1641/C",
    "history": "In the work of a doctor, it is important to maintain the anonymity of clients and the results of tests. The test results are sent to everyone personally by email, but people are very impatient and they want to know the results right away. That' s why in the testing lab \" De- vitro\" doctors came up with an experimental way to report the results. Let' s assume that n people took the tests in the order of the queue. Then the chief doctor Sam can make several statements, in each telling if there is a sick person among the people in the queue from l - th to r - th ( inclusive) , for some values l and r . During the process, Sam will check how well this scheme works and will be interested in whether it is possible to find out the test result of i - th person from the information he announced. And if it can be done, then is that patient sick or not. Help Sam to test his scheme.",
    "input": "The first line contains two integers n , q ( 1 \u2264 n, q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of people and the number of queries. In each of the next q lines, the description of the query is given. The first number in the line is t ( t = 0 or t = 1 ) \u2014 the type of the query. If t = 0 , the line contains three more integers l, r, x ( 1 \u2264 l \u2264 r \u2264 n , x = 0 or x = 1 ) . This query means that Sam tells that among the people in the queue from l - th to r - th ( inclusive) : there was at least one sick person, if x= 1 , there is no sick people, if x= 0 . If t = 1 , the line contains one more integer j ( 1 \u2264 j \u2264 n ) \u2014 the position of the patient in the queue, for which Sam wants to know the status. All queries are correct, that means that there always exists an example of the queue of length n for which all reported results ( statements from queries with t = 0 ) are true.",
    "output": "After each Sam question ( query with t = 1 ) print: \" NO\" , if the patient is definitely not sick, \" YES\" , if the patient is definitely sick. \" N/ A\" , if it is impossible to definitely identify the status of patient having the given information.",
    "note": "In the first test for the five first queries: Initially Sam tells that people 4 , 5 are not sick. In the next query Sam asks the status of the patient 5 . From the previous query, we know that the patient is definitely not sick. In the next query Sam asks the status of the patient 6 . We don' t know any information about that patient now. After that Sam tells that there exists a sick patient among 4 , 5 , 6 . In the next query Sam asks the status of the patient 6 . Now we can tell that this patient is definitely sick.",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "dsu",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Repetitions Decoding",
    "url": "https://codeforces.com/problemset/problem/1641/B",
    "history": "Olya has an array of integers a_ 1, a_ 2, . . . , a_ n . She wants to split it into tandem repeats. Since it' s rarely possible, before that she wants to perform the following operation several ( possibly, zero) number of times: insert a pair of equal numbers into an arbitrary position. Help her! More formally: A tandem repeat is a sequence x of even length 2k such that for each 1 \u2264 i \u2264 k the condition x_ i = x_ i + k is satisfied. An array a could be split into tandem repeats if you can split it into several parts, each being a subsegment of the array, such that each part is a tandem repeat. In one operation you can choose an arbitrary letter c and insert [ c, c] to any position in the array ( at the beginning, between any two integers, or at the end) . You are to perform several operations and split the array into tandem repeats or determine that it is impossible. Please note that you do not have to minimize the number of operations.",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 30 000 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 500 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the initial array. It is guaranteed that the sum of n^ 2 over all test cases does not exceed 250 000 .",
    "output": "For each test case print answer in the following format. If you cannot turn the array into a concatenation of tandem repeats, print a single integer - 1 . Otherwise print the number of operations q ( 0 \u2264 q \u2264 2 \u00b7 n^ 2 ) that you want to do. Then print the descriptions of operations. In each of the following q lines print two integers p and c ( 1 \u2264 c \u2264 10^ 9 ) , which mean that you insert the integer c twice after p elements of the array. If the length of the array is m before the operation, then the condition 0 \u2264 p \u2264 m should be satisfied. Then you should print any way to split the resulting array into tandem repeats. First, print a single integer d , and then print a sequence t_ 1, t_ 2, . . . , t_ d of even integers of size d ( d, t_ i \u2265 1 ) . These numbers are the lengths of the subsegments from left to right. Note that the size of the resulting array a is m = n + 2 \u00b7 q . The following statements must hold: m = \u2211_ i = 1^ dt_ i . For all integer i such that 1 \u2264 i \u2264 d , the sequence a_ l, a_ l+ 1, . . . , a_ r is a tandem repeat, where l = \u2211_ j = 1^ i - 1t_ j + 1 , r = l + t_ i - 1 . It can be shown that if the array can be turned into a concatenation of tandem repeats, then there exists a solution satisfying all constraints. If there are multiple answers, you can print any.",
    "note": "In the first test case, you cannot apply operations to the array to make it possible to split it into tandem repeats. In the second test case the array is already a tandem repeat [ 5, 5] = ( [ 5] + [ 5] ) _ t_ 1 = 2 , thus we can do no operations at all. In the third test case, initially, we have the following array: [ 1, 3, 1, 2, 2, 3] . After the first insertion with p = 1, c = 3 : [ 1, 3, 3, 3, 1, 2, 2, 3] . After the second insertion with p = 5, c = 3 : [ 1, 3, 3, 3, 1, 3, 3, 2, 2, 3] . After the third insertion with p = 5, c = 3 : [ 1, 3, 3, 3, 1, 3, 3, 3, 3, 2, 2, 3] . After the fourth insertion with p = 10, c = 3 : [ 1, 3, 3, 3, 1, 3, 3, 3, 3, 2, 3, 3, 2, 3] . The resulting array can be represented as a concatenation of tandem repeats: ( [ 1, 3, 3, 3] + [ 1, 3, 3, 3] ) _ t_ 1 = 8 + ( [ 3, 2, 3] + [ 3, 2, 3] ) _ t_ 2 = 6. In the fourth test case, initially, we have the following array: [ 3, 2, 1, 1, 2, 3] . After the first insertion with p = 0, c = 3 : [ 3, 3, 3, 2, 1, 1, 2, 3] . After the second insertion with p = 8, c = 3 : [ 3, 3, 3, 2, 1, 1, 2, 3, 3, 3] . After the third insertion with p = 5, c = 3 [ 3, 3, 3, 2, 1, 3, 3, 1, 2, 3, 3, 3] . After the fourth insertion with p = 6, c = 2 : [ 3, 3, 3, 2, 1, 3, 2, 2, 3, 1, 2, 3, 3, 3] . After the fifth insertion with p = 7, c = 1 : [ 3, 3, 3, 2, 1, 3, 2, 1, 1, 2, 3, 1, 2, 3, 3, 3] . The resulting array can be represented as a concatenation of tandem repeats: ( [ 3] + [ 3] ) _ t_ 1 = 2 + ( [ 3, 2, 1] + [ 3, 2, 1] ) _ t_ 2 = 6 + ( [ 1, 2, 3] + [ 1, 2, 3] ) _ t_ 3 = 6 + ( [ 3] + [ 3] ) _ t_ 4 = 2.",
    "topics": [
      "constructive algorithms",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Great Sequence",
    "url": "https://codeforces.com/problemset/problem/1641/A",
    "history": "A sequence of positive integers is called great for a positive integer x , if we can split it into pairs in such a way that in each pair the first number multiplied by x is equal to the second number. More formally, a sequence a of size n is great for a positive integer x , if n is even and there exists a permutation p of size n , such that for each i ( 1 \u2264 i \u2264n/ 2 ) a_ p_ 2i- 1\u00b7 x = a_ p_ 2i . Sam has a sequence a and a positive integer x . Help him to make the sequence great: find the minimum possible number of positive integers that should be added to the sequence a to make it great for the number x .",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 20 000 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains two integers n , x ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 2 \u2264 x \u2264 10^ 6 ) . The next line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case print a single integer \u2014 the minimum number of integers that can be added to the end of a to make it a great sequence for the number x .",
    "note": "In the first test case, Sam got lucky and the sequence is already great for the number 4 because you can divide it into such pairs: ( 1, 4) , ( 4, 16) . Thus we can add 0 numbers. In the second test case, you can add numbers 1 and 14 to the sequence, then you can divide all 8 integers into such pairs: ( 1, 2) , ( 1, 2) , ( 2, 4) , ( 7, 14) . It is impossible to add less than 2 integers to fix the sequence.",
    "topics": [
      "brute force",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Odd Swap Sort",
    "url": "https://codeforces.com/problemset/problem/1638/B",
    "history": "You are given an array a_ 1, a_ 2, . . . , a_ n . You can perform operations on the array. In each operation you can choose an integer i ( 1 \u2264 i < n ) , and swap elements a_ i and a_ i+ 1 of the array, if a_ i + a_ i+ 1 is odd. Determine whether it can be sorted in non- decreasing order using this operation any number of times.",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of the array. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print \" Yes\" or \" No\" depending on whether you can or can not sort the given array. You may print each letter in any case ( for example, \" YES\" , \" Yes\" , \" yes\" , \" yEs\" will all be recognized as positive answer) .",
    "note": "In the first test case, we can simply swap 31 and 14 ( 31 + 14 = 45 which is odd) and obtain the non- decreasing array [ 1, 6, 14, 31] . In the second test case, the only way we could sort the array is by swapping 4 and 2 , but this is impossible, since their sum 4 + 2 = 6 is even. In the third test case, there is no way to make the array non- decreasing. In the fourth test case, the array is already non- decreasing.",
    "topics": [
      "data structures",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Minimize Inversions Number",
    "url": "https://codeforces.com/problemset/problem/1637/H",
    "history": "You are given a permutation p of length n . You can choose any subsequence, remove it from the permutation, and insert it at the beginning of the permutation keeping the same order. For every k from 0 to n , find the minimal possible number of inversions in the permutation after you choose a subsequence of length exactly k .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 50 000 ) \u2014 the number of test cases. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 5 \u00b7 10^ 5 ) \u2014 the length of the permutation. The second line of each test case contains the permutation p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) . It is guaranteed that the total sum of n doesn' t exceed 5 \u00b7 10^ 5 .",
    "output": "For each test case output n + 1 integers. The i - th of them must be the answer for the subsequence length of i - 1 .",
    "note": "In the second test case: For the length 0 : [ 4, 2, 1, 3] \u2192 [ 4, 2, 1, 3] : 4 inversions. For the length 1 : [ 4, 2, 1, 3] \u2192 [ 1, 4, 2, 3] : 2 inversions. For the length 2 : [ 4, 2, 1, 3] \u2192 [ 2, 1, 4, 3] , or [ 4, 2, 1, 3] \u2192 [ 1, 3, 4, 2] : 2 inversions. For the length 3 : [ 4, 2, 1, 3] \u2192 [ 2, 1, 3, 4] : 1 inversion. For the length 4 : [ 4, 2, 1, 3] \u2192 [ 4, 2, 1, 3] : 4 inversions.",
    "topics": [
      "data structures",
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Sorting Parts",
    "url": "https://codeforces.com/problemset/problem/1637/A",
    "history": "You have an array a of length n . You can exactly once select an integer len between 1 and n - 1 inclusively, and then sort in non- decreasing order the prefix of the array of length len and the suffix of the array of length n - len independently. For example, if the array is a = [ 3, 1, 4, 5, 2] , and you choose len = 2 , then after that the array will be equal to [ 1, 3, 2, 4, 5] . Could it be that after performing this operation, the array will not be sorted in non- decreasing order?",
    "input": "There are several test cases in the input data. The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. This is followed by the test cases description. The first line of each test case contains one integer n ( 2 \u2264 n \u2264 10^ 4 ) \u2014 the length of the array. The second line of the test case contains a sequence of integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the array elements. It is guaranteed that the sum of n over all test cases does not exceed 10^ 4 .",
    "output": "For each test case of input data, output \" YES\" ( without quotes) , if the array may be not sorted in non- decreasing order, output \" NO\" ( without quotes) otherwise. You can output each letter in any case ( uppercase or lowercase) .",
    "note": "In the first test case, it' s possible to select len = 1 , then after operation, the array will not be sorted in non- decreasing order and will be equal to [ 2, 1, 2] . In the second test case, it' s possible to select len = 3 , then after operation, the array will not be sorted in non- decreasing order and will be equal to [ 1, 2, 3, 1] . In the third test case, the array will be sorted in non- decreasing order for every possible len .",
    "topics": [
      "brute force",
      "sortings"
    ]
  },
  {
    "title": "Cars ",
    "url": "https://codeforces.com/problemset/problem/1635/E",
    "history": "There are n cars on a coordinate axis OX . Each car is located at an integer point initially and no two cars are located at the same point. Also, each car is oriented either left or right, and they can move at any constant positive speed in that direction at any moment. More formally, we can describe the i - th car with a letter and an integer: its orientation ori_ i and its location x_ i . If ori_ i = L , then x_ i is decreasing at a constant rate with respect to time. Similarly, if ori_ i = R , then x_ i is increasing at a constant rate with respect to time. We call two cars irrelevant if they never end up in the same point regardless of their speed. In other words, they won' t share the same coordinate at any moment. We call two cars destined if they always end up in the same point regardless of their speed. In other words, they must share the same coordinate at some moment. Unfortunately, we lost all information about our cars, but we do remember m relationships. There are two types of relationships: 1 i j \u2014 i - th car and j - th car are irrelevant. 2 i j \u2014 i - th car and j - th car are destined. Restore the orientations and the locations of the cars satisfying the relationships, or report that it is impossible. If there are multiple solutions, you can output any. Note that if two cars share the same coordinate, they will intersect, but at the same moment they will continue their movement in their directions.",
    "input": "The first line contains two integers, n and m ( 2 \u2264 n \u2264 2 \u00b7 10^ 5; 1 \u2264 m \u2264 min( 2 \u00b7 10^ 5, n( n- 1) / 2) \u2014 the number of cars and the number of restrictions respectively. Each of the next m lines contains three integers, type , i , and j ( 1 \u2264 type \u2264 2; 1 \u2264 i, j \u2264 n; i= \u0338j) . If type = 1 , i - th car and j - th car are irrelevant. Otherwise, i - th car and j - th car are destined. It is guaranteed that for each pair of cars, there are at most 1 relationship between.",
    "output": "In the first line, print either \" YES\" or \" NO\" ( in any case) , whether it is possible to restore the orientations and the locations of the cars satisfying the relationships. If the answer is \" YES\" , print n lines each containing a symbol and an integer: ori_ i and x_ i ( ori_ i \u2208{ L, R} ; - 10^ 9 \u2264 x_ i \u2264 10^ 9) \u2014 representing the information of the i - th car. If the orientation is left, then ori_ i = L . Otherwise ori_ i = R . x_ i is the where the i - th car is located. Note that all x_ i should be distinct. We can prove that if there exists a solution, then there must be a solution satisfying the constraints on x_ i .",
    "note": " ",
    "topics": [
      "2-sat",
      "constructive algorithms",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Spanning Tree Queries",
    "url": "https://codeforces.com/problemset/problem/1633/E",
    "history": "You are given a connected weighted undirected graph, consisting of n vertices and m edges. You are asked k queries about it. Each query consists of a single integer x . For each query, you select a spanning tree in the graph. Let the weights of its edges be w_ 1, w_ 2, . . . , w_ n- 1 . The cost of a spanning tree is \u2211_ i= 1^ n- 1 | w_ i - x| ( the sum of absolute differences between the weights and x ) . The answer to a query is the lowest cost of a spanning tree. The queries are given in a compressed format. The first p ( 1 \u2264 p \u2264 k) queries q_ 1, q_ 2, . . . , q_ p are provided explicitly. For queries from p+ 1 to k , q_ j = ( q_ j- 1\u00b7 a + b) c . Print the xor of answers to all queries.",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 50 ; n - 1 \u2264 m \u2264 300 ) \u2014 the number of vertices and the number of edges in the graph. Each of the next m lines contains a description of an undirected edge: three integers v , u and w ( 1 \u2264 v, u \u2264 n ; v = \u0338 u ; 0 \u2264 w \u2264 10^ 8 ) \u2014 the vertices the edge connects and its weight. Note that there might be multiple edges between a pair of vertices. The edges form a connected graph. The next line contains five integers p, k, a, b and c ( 1 \u2264 p \u2264 10^ 5 ; p \u2264 k \u2264 10^ 7 ; 0 \u2264 a, b \u2264 10^ 8 ; 1 \u2264 c \u2264 10^ 8 ) \u2014 the number of queries provided explicitly, the total number of queries and parameters to generate the queries. The next line contains p integers q_ 1, q_ 2, . . . , q_ p ( 0 \u2264 q_ j < c ) \u2014 the first p queries.",
    "output": "Print a single integer \u2014 the xor of answers to all queries.",
    "note": "The queries in the first example are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 . The answers are 11, 9, 7, 3, 1, 5, 8, 7, 5, 7, 11 . The queries in the second example are 3, 0, 2, 1, 6, 0, 3, 5, 4, 1 . The answers are 14, 19, 15, 16, 11, 19, 14, 12, 13, 16 . The queries in the third example are 75, 0, 0, . . . . The answers are 50, 150, 150, . . . .",
    "topics": [
      "binary search",
      "data structures",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "math",
      "sortings",
      "trees"
    ]
  },
  {
    "title": "Paint the Middle",
    "url": "https://codeforces.com/problemset/problem/1630/C",
    "history": "You are given n elements numbered from 1 to n , the element i has value a_ i and color c_ i , initially, c_ i = 0 for all i . The following operation can be applied: Select three elements i , j and k ( 1 \u2264 i < j < k \u2264 n ) , such that c_ i , c_ j and c_ k are all equal to 0 and a_ i = a_ k , then set c_ j = 1 . Find the maximum value of \u2211_ i= 1^ nc_ i that can be obtained after applying the given operation any number of times.",
    "input": "The first line contains an integer n ( 3 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of elements. The second line consists of n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) , where a_ i is the value of the i - th element.",
    "output": "Print a single integer in a line \u2014 the maximum value of \u2211_ i= 1^ nc_ i that can be obtained after applying the given operation any number of times.",
    "note": "In the first test, it is possible to apply the following operations in order:",
    "topics": [
      "dp",
      "greedy",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Download More RAM",
    "url": "https://codeforces.com/problemset/problem/1629/A",
    "history": "Did you know you can download more RAM? There is a shop with n different pieces of software that increase your RAM. The i - th RAM increasing software takes a_ i GB of memory to run ( temporarily, once the program is done running, you get the RAM back) , and gives you an additional b_ i GB of RAM ( permanently) . Each software can only be used once. Your PC currently has k GB of RAM. Note that you can' t use a RAM- increasing software if it takes more GB of RAM to use than what you currently have. Since RAM is the most important thing in the world, you wonder, what is the maximum possible amount of RAM achievable?",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains the integers n and k ( 1 \u2264 n \u2264 100 , 1 \u2264 k \u2264 1000 ) . Then two lines follow, each containing n integers describing the arrays a and b ( 1 \u2264 a_ i, b_ i \u2264 1000 ) .",
    "output": "For each test case, output a single line containing the largest amount of RAM you can achieve.",
    "note": "In the first test case, you only have enough RAM to run the third software initially, but that increases your RAM to 20 GB, which allows you to use the first software, increasing your RAM to 29 GB. The only software left needs 30 GB of RAM, so you have to stop here. In the second test case, you can use the first, second, fourth and fifth software that need only 1 GB of RAM per software to run to increase your RAM to 5 GB, and then use the last remaining one to increase your RAM to 6 GB. In the third test case, all the software need more than 1 GB of RAM to run, so the amount of RAM you have stays at 1 GB.",
    "topics": [
      "brute force",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Spaceship Crisis Management",
    "url": "https://codeforces.com/problemset/problem/1628/F",
    "history": "NASA ( Norwegian Astronaut Stuff Association) is developing a new steering system for spaceships. But in its current state, it wouldn' t be very safe if the spaceship would end up in a bunch of space junk. To make the steering system safe, they need to answer the following: Given the target position t = ( 0, 0) , a set of n pieces of space junk l described by line segments l_ i = ( ( a_ ix, a_ iy) , ( b_ ix, b_ iy) ) , and a starting position s = ( s_ x, s_ y) , is there a direction such that floating in that direction from the starting position would lead to the target position? When the spaceship hits a piece of space junk, what happens depends on the absolute difference in angle between the floating direction and the line segment, \u03b8 : If \u03b8 < 45^ \u2218 , the spaceship slides along the piece of space junk in the direction that minimizes the change in angle, and when the spaceship slides off the end of the space junk, it continues floating in the direction it came in ( before hitting the space junk) . If \u03b8\u2265 45^ \u2218 , the spaceship stops, because there is too much friction to slide along the space junk. You are only given the set of pieces of space junk once, and the target position is always ( 0, 0) , but there are q queries, each with a starting position s_ j = ( s_ jx, s_ jy) . Answer the above question for each query.",
    "input": "The first line contains the the integer n ( 1 \u2264 n \u2264 1500 ) . Then follows n lines, the i - th of which containing the 4 integers a_ ix , a_ iy , b_ ix , and b_ iy ( | a_ ix| , | a_ iy| , | b_ ix| , | b_ iy| \u2264 1000 ) . Then follows a line containing the integer q ( 1 \u2264 q \u2264 1000 ) . Then follows q lines, the j - th of which containing the 2 integers s_ jx and s_ jy ( | s_ jx| , | s_ jy| \u2264 1000 ) . It is guaranteed that none of the segments in l cross or touch, that t is not on any segment in l , that s_ j is not on any segment in l , and that s = \u0338 t .",
    "output": "For each query s_ j print an answer. If there exists a direction such that floating from s_ j in that direction, possibly sliding along some pieces of space junk, leads to t , print \" YES\" . Otherwise, print \" NO\" ( case insensitive) .",
    "note": "The blue cross represents the target location, and the other blue line segments represent the space junk. Green dots represent starting locations where the answer is yes, and red dots represent starting locations where the answer is no. The yellow lines are possible paths to the target location for the 3 rd and 14 th queries. The black line is a possible path from the starting location in the 6 th query, but it barely misses the target location.",
    "topics": [
      "binary search",
      "data structures",
      "geometry",
      "sortings"
    ]
  },
  {
    "title": "Not Sitting",
    "url": "https://codeforces.com/problemset/problem/1627/B",
    "history": "Rahul and Tina are looking forward to starting their new year at college. As they enter their new classroom, they observe the seats of students are arranged in a n \u00d7 m grid. The seat in row r and column c is denoted by ( r, c) , and the distance between two seats ( a, b) and ( c, d) is | a- c| + | b- d| . As the class president, Tina has access to exactly k buckets of pink paint. The following process occurs. First, Tina chooses exactly k seats in the classroom to paint with pink paint. One bucket of paint can paint exactly one seat. After Tina has painted k seats in the previous step, Rahul chooses where he sits. He will not choose a seat that has been painted pink due to his hatred of the colour pink. After Rahul has chosen his seat, Tina chooses a seat for herself. She can choose any of the seats, painted or not, other than the one chosen by Rahul. Rahul wants to choose a seat such that he sits as close to Tina as possible. However, Tina wants to sit as far away from Rahul as possible due to some complicated relationship history that we couldn' t fit into the statement! Now, Rahul wonders for k = 0, 1, . . . , n \u00b7 m - 1 , if Tina has k buckets of paint, how close can Rahul sit to Tina, if both Rahul and Tina are aware of each other' s intentions and they both act as strategically as possible? Please help satisfy Rahul' s curiosity!",
    "input": "The input consists of multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 5 \u00b7 10^ 4 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains two integers n , m ( 2 \u2264 n \u00b7 m \u2264 10^ 5 ) \u2014 the number of rows and columns of seats in the classroom. The sum of n \u00b7 m across all test cases does not exceed 10^ 5 .",
    "output": "For each test case, output n \u00b7 m ordered integers \u2014 the distance between Rahul and Tina if both of them act optimally for every k \u2208 [ 0, n \u00b7 m - 1] .",
    "note": "One possible sequence of choices for the first testcase where Tina has k= 3 buckets of paints is as follows. Tina paints the seats at positions ( 1, 2) , ( 2, 2) , ( 3, 2) with pink paint. Rahul chooses the seat at ( 3, 1) after which Tina chooses to sit at ( 1, 3) . Therefore, the distance between Tina and Rahul is | 3- 1| + | 1- 3| = 4 , and we can prove that this is indeed the minimum possible distance under the given constraints. There may be other choices of seats which lead to the same answer as well. For k= 0 in the first test case, Rahul can decide to sit at ( 2, 2) and Tina can decide to sit at ( 4, 3) so the distance between them would be | 2 - 4| + | 2 - 3| = 3 . Below are pictorial representations of the k= 3 and k= 0 cases for the first test case. A possible seating arrangement for k= 3 . A possible seating arrangement for k= 0 .",
    "topics": [
      "games",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Equidistant Letters",
    "url": "https://codeforces.com/problemset/problem/1626/A",
    "history": "You are given a string s , consisting of lowercase Latin letters. Every letter appears in it no more than twice. Your task is to rearrange the letters in the string in such a way that for each pair of letters that appear exactly twice, the distance between the letters in the pair is the same. You are not allowed to add or remove letters. It can be shown that the answer always exists. If there are multiple answers, print any of them.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 3 ) \u2014 the number of testcases. Each testcase consists of a non- empty string s , consisting of lowercase Latin letters. Every letter appears in the string no more than twice. The length of the string doesn' t exceed 52 .",
    "output": "For each testcase, print a single string. Every letter should appear in it the same number of times as it appears in string s . For each pair of letters that appear exactly twice, the distance between the letters in the pair should be the same. If there are multiple answers, print any of them.",
    "note": "In the first testcase of the example, the only letter that appears exactly twice is letter ' l' . You can rearrange the letters arbitrarily, since there are no distances to compare. In the second testcase of the example, the letters that appear exactly twice are ' a' , ' b' and ' c' . Initially, letters ' a' are distance 6 apart, letters ' b' are distance 4 apart and letters ' c' are distance 2 apart. They are not the same, so we have to rearrange the letters. After rearrangement, letters ' a' are distance 2 apart, letters ' b' are distance 2 apart and letters ' c' are distance 2 apart. They are all the same, so the answer is valid. In the third testcase of the example, there are no letters that appear exactly twice. Thus, any rearrangement is valid. Including not changing the string at all.",
    "topics": [
      "constructive algorithms",
      "sortings"
    ]
  },
  {
    "title": "Binary Spiders",
    "url": "https://codeforces.com/problemset/problem/1625/D",
    "history": "Binary Spiders are species of spiders that live on Mars. These spiders weave their webs to defend themselves from enemies. To weave a web, spiders join in pairs. If the first spider in pair has x legs, and the second spider has y legs, then they weave a web with durability x \u2295 y . Here, \u2295 means bitwise XOR. Binary Spiders live in large groups. You observe a group of n spiders, and the i - th spider has a_ i legs. When the group is threatened, some of the spiders become defenders. Defenders are chosen in the following way. First, there must be at least two defenders. Second, any pair of defenders must be able to weave a web with durability at least k . Third, there must be as much defenders as possible. Scientists have researched the behaviour of Binary Spiders for a long time, and now they have a hypothesis that they can always choose the defenders in an optimal way, satisfying the conditions above. You need to verify this hypothesis on your group of spiders. So, you need to understand how many spiders must become defenders. You are not a Binary Spider, so you decided to use a computer to solve this problem.",
    "input": "The first line contains two integers n and k ( 2 \u2264 n \u2264 3\u00b710^ 5 , 0 \u2264 k \u2264 2^ 30 - 1 ) , the amount of spiders in the group and the minimal allowed durability of a web. The second line contains n integers a_ i ( 0 \u2264 a_ i \u2264 2^ 30- 1 ) \u2014 the number of legs the i - th spider has.",
    "output": "In the first line, print a single integer l ( 2 \u2264l\u2264 n ) , the maximum possible amount of defenders. In the second line, print l integers b_ i , separated by a single space ( 1 \u2264 b_ i \u2264 n ) \u2014 indices of spiders that will become defenders. If there exists more than one way to choose the defenders, print any of them. Unfortunately, it may appear that it' s impossible to choose the defenders. In this case, print a single integer - 1 .",
    "note": "Consider the examples above. In the first example, the group of spiders is illustrated on the picture below: We choose the two- legged, the ten- legged and the 16 - legged spiders. It' s not hard to see that each pair may weave a web with enough durability, as 2 \u2295 10 = 8 \u2265 8 , 2 \u2295 16 = 18 \u2265 8 and 10 \u2295 16 = 26 \u2265 8 . This is not the only way, as you can also choose, for example, the spiders with indices 3 , 4 , and 6 . In the second example, no pair of spiders can weave the web with durability 1024 or more, so the answer is - 1 .",
    "topics": [
      "bitmasks",
      "data structures",
      "implementation",
      "math",
      "sortings",
      "trees"
    ]
  },
  {
    "title": "Elementary Particles",
    "url": "https://codeforces.com/problemset/problem/1625/B",
    "history": "Martians are actively engaged in interplanetary trade. Olymp City, the Martian city known for its spaceport, has become a place where goods from all the corners of our Galaxy come. To deliver even more freight from faraway planets, Martians need fast spaceships. A group of scientists conducts experiments to build a fast engine for the new spaceship. In the current experiment, there are n elementary particles, the i - th of them has type a_ i . Denote a subsegment of the particle sequence ( a_ 1, a_ 2, . . . , a_ n ) as a sequence ( a_ l, a_ l+ 1, . . . , a_ r ) for some left bound l and right bound r ( 1 \u2264 l \u2264 r \u2264 n ) . For instance, the sequence ( 1 4 2 8 5 7) for l= 2 and r= 4 has the sequence ( 4 2 8) as a subsegment. Two subsegments are considered different if at least one bound of those subsegments differs. Note that the subsegments can be equal as sequences but still considered different. For example, consider the sequence ( 1 1 1 1 1) and two of its subsegments: one with l= 1 and r= 3 and another with l= 2 and r= 4 . Both subsegments are equal to ( 1 1 1) , but still considered different, as their left and right bounds differ. The scientists want to conduct a reaction to get two different subsegments of the same length. Denote this length k . The resulting pair of subsegments must be harmonious, i. e. for some i ( 1 \u2264 i \u2264 k ) it must be true that the types of particles on the i - th position are the same for these two subsegments. For example, the pair ( 1 7 3) and ( 4 7 8) is harmonious, as both subsegments have 7 on the second position. The pair ( 1 2 3) and ( 3 1 2) is not harmonious. The longer are harmonious subsegments, the more chances for the scientists to design a fast engine. So, they asked you to calculate the maximal possible length of harmonious pair made of different subsegments.",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The following are descriptions of the test cases. The first line contains an integer n ( 2 \u2264 n \u2264 150 000 ) \u2014 the amount of elementary particles in the sequence. The second line contains n integers a_ i ( 1 \u2264 a_ i \u2264 150 000 ) \u2014 types of elementary particles. It is guaranteed that the sum of n over all test cases does not exceed 3\u00b710^ 5 .",
    "output": "For each test, print a single integer, maximal possible length of harmonious pair made of different subsegments. If such pair does not exist, print - 1 instead.",
    "note": "The first test case is shown on the picture below: As you can see from it, you may choose the subsegments ( 2 1 3 4) and ( 3 1 5 2) , which are a harmonious pair. Their length is equal to 4 , so the answer is 4 . In the second test case, you need to take two subsegments: one with l= 1 and r= 5 , and one with l= 2 and r= 6 . It' s not hard to observe that these segments are a harmonious pair and considered different even though they are both equal to ( 1 1 1 1 1) . In the third test case, you cannot make a harmonious pair, so the answer is - 1 .",
    "topics": [
      "brute force",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Palindromes Coloring",
    "url": "https://codeforces.com/problemset/problem/1624/D",
    "history": "You have a string s consisting of lowercase Latin alphabet letters. You can color some letters in colors from 1 to k . It is not necessary to paint all the letters. But for each color, there must be a letter painted in that color. Then you can swap any two symbols painted in the same color as many times as you want. After that, k strings will be created, i - th of them will contain all the characters colored in the color i , written in the order of their sequence in the string s . Your task is to color the characters of the string so that all the resulting k strings are palindromes, and the length of the shortest of these k strings is as large as possible. Read the note for the first test case of the example if you need a clarification. Recall that a string is a palindrome if it reads the same way both from left to right and from right to left. For example, the strings abacaba, cccc, z and dxd are palindromes, but the strings abab and aaabaa \u2014 are not.",
    "input": "The first line of input data contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of input data sets in the test. The descriptions of the input data sets follow. The first line of the description of each input data set contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the string and the number of colors in which its letters can be painted. The second line of the description of each input data set contains a string s of length n consisting of lowercase letters of the Latin alphabet. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each set of input data, output a single integer \u2014 the maximum length of the shortest palindrome string that can be obtained.",
    "note": "In the first test case, s = \" bxyaxzay\" , k= 2 . We use indices in the string from 1 to 8 . The following coloring will work: bxyaxzay ( the letter z remained uncolored) . After painting: swap two red characters ( with the indices 1 and 4 ) , we get axybxzay ; swap two blue characters ( with the indices 5 and 8 ) , we get axybyzax . Now, for each of the two colors we write out the corresponding characters from left to right, we get two strings aba and xyyx . Both of them are palindromes, the length of the shortest is 3 . It can be shown that the greatest length of the shortest palindrome cannot be achieved. In the second set of input data, the following coloring is suitable: [ 1, 1, 2, 2, 3, 3] . There is no need to swap characters. Both received strings are equal to aa, they are palindromes and their length is 2 . In the third set of input data, you can color any character and take it into a string. In the fourth set of input data, you can color the i th character in the color i . In the fifth set of input data can be colored in each of the colors of one character. In the sixth set of input data, the following coloring is suitable: [ 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 0] . Rearrange the characters so as to get the palindromes abcba and acbca.",
    "topics": [
      "binary search",
      "greedy",
      "sortings",
      "strings"
    ]
  },
  {
    "title": "Game on Ranges",
    "url": "https://codeforces.com/problemset/problem/1623/B",
    "history": "Alice and Bob play the following game. Alice has a set S of disjoint ranges of integers, initially containing only one range [ 1, n] . In one turn, Alice picks a range [ l, r] from the set S and asks Bob to pick a number in the range. Bob chooses a number d ( l \u2264 d \u2264 r ) . Then Alice removes [ l, r] from S and puts into the set S the range [ l, d - 1] ( if l \u2264 d - 1 ) and the range [ d + 1, r] ( if d + 1 \u2264 r ) . The game ends when the set S is empty. We can show that the number of turns in each game is exactly n . After playing the game, Alice remembers all the ranges [ l, r] she picked from the set S , but Bob does not remember any of the numbers that he picked. But Bob is smart, and he knows he can find out his numbers d from Alice' s ranges, and so he asks you for help with your programming skill. Given the list of ranges that Alice has picked ( [ l, r] ) , for each range, help Bob find the number d that Bob has picked. We can show that there is always a unique way for Bob to choose his number for a list of valid ranges picked by Alice.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 1000 ) . Description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 1000 ) . Each of the next n lines contains two integers l and r ( 1 \u2264 l \u2264 r \u2264 n ) , denoting the range [ l, r] that Alice picked at some point. Note that the ranges are given in no particular order. It is guaranteed that the sum of n over all test cases does not exceed 1000 , and the ranges for each test case are from a valid game.",
    "output": "For each test case print n lines. Each line should contain three integers l , r , and d , denoting that for Alice' s range [ l, r] Bob picked the number d . You can print the lines in any order. We can show that the answer is unique. It is not required to print a new line after each test case. The new lines in the output of the example are for readability only.",
    "note": "In the first test case, there is only 1 range [ 1, 1] . There was only one range [ 1, 1] for Alice to pick, and there was only one number 1 for Bob to pick. In the second test case, n = 3 . Initially, the set contains only one range [ 1, 3] . Alice picked the range [ 1, 3] . Bob picked the number 1 . Then Alice put the range [ 2, 3] back to the set, which after this turn is the only range in the set. Alice picked the range [ 2, 3] . Bob picked the number 3 . Then Alice put the range [ 2, 2] back to the set. Alice picked the range [ 2, 2] . Bob picked the number 2 . The game ended. In the fourth test case, the game was played with n = 5 . Initially, the set contains only one range [ 1, 5] . The game' s turn is described in the following table. Game turnAlice' s picked rangeBob' s picked numberThe range set afterBefore the game start { [ 1, 5] } 1 [ 1, 5] 3 { [ 1, 2] , [ 4, 5] } 2 [ 1, 2] 1 { [ 2, 2] , [ 4, 5] } 3 [ 4, 5] 5 { [ 2, 2] , [ 4, 4] } 4 [ 2, 2] 2 { [ 4, 4] } 5 [ 4, 4] 4 { } ( empty set)",
    "topics": [
      "brute force",
      "dfs and similar",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Set or Decrease",
    "url": "https://codeforces.com/problemset/problem/1622/C",
    "history": "You are given an integer array a_ 1, a_ 2, . . . , a_ n and integer k . In one step you can either choose some index i and decrease a_ i by one ( make a_ i = a_ i - 1 ) ; or choose two indices i and j and set a_ i equal to a_ j ( make a_ i = a_ j ) . What is the minimum number of steps you need to make the sum of array \u2211_ i= 1^ na_ i\u2264 k ? ( You are allowed to make values of array negative) .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains two integers n and k ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ; 1 \u2264 k \u2264 10^ 15 ) \u2014 the size of array a and upper bound on its sum. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the array itself. It' s guaranteed that the sum of n over all test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print one integer \u2014 the minimum number of steps to make \u2211_ i= 1^ na_ i\u2264 k .",
    "note": "In the first test case, you should decrease a_ 1 10 times to get the sum lower or equal to k = 10 . In the second test case, the sum of array a is already less or equal to 69 , so you don' t need to change it. In the third test case, you can, for example: set a_ 4 = a_ 3 = 1 ; decrease a_ 4 by one, and get a_ 4 = 0 . As a result, you' ll get array [ 1, 2, 1, 0, 1, 2, 1] with sum less or equal to 8 in 1 + 1 = 2 steps. In the fourth test case, you can, for example: choose a_ 7 and decrease in by one 3 times; you' ll get a_ 7 = - 2 ; choose 4 elements a_ 6 , a_ 8 , a_ 9 and a_ 10 and them equal to a_ 7 = - 2 . As a result, you' ll get array [ 1, 2, 3, 1, 2, - 2, - 2, - 2, - 2, - 2] with sum less or equal to 1 in 3 + 4 = 7 steps.",
    "topics": [
      "binary search",
      "brute force",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Berland Music",
    "url": "https://codeforces.com/problemset/problem/1622/B",
    "history": "Berland Music is a music streaming service built specifically to support Berland local artist. Its developers are currently working on a song recommendation module. So imagine Monocarp got recommended n songs, numbered from 1 to n . The i - th song had its predicted rating equal to p_ i , where 1 \u2264 p_ i \u2264 n and every integer from 1 to n appears exactly once. In other words, p is a permutation. After listening to each of them, Monocarp pressed either a like or a dislike button. Let his vote sequence be represented with a string s , such that s_ i= 0 means that he disliked the i - th song, and s_ i= 1 means that he liked it. Now the service has to re- evaluate the song ratings in such a way that: the new ratings q_ 1, q_ 2, . . . , q_ n still form a permutation ( 1 \u2264 q_ i \u2264 n ; each integer from 1 to n appears exactly once) ; every song that Monocarp liked should have a greater rating than every song that Monocarp disliked ( formally, for all i, j such that s_ i= 1 and s_ j= 0 , q_ i> q_ j should hold) . Among all valid permutations q find the one that has the smallest value of \u2211_ i= 1^ n | p_ i- q_ i| , where | x| is an absolute value of x . Print the permutation q_ 1, q_ 2, . . . , q_ n . If there are multiple answers, you can print any of them.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of testcases. The first line of each testcase contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of songs. The second line of each testcase contains n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) \u2014 the permutation of the predicted ratings. The third line contains a single string s , consisting of n characters. Each character is either a 0 or a 1 . 0 means that Monocarp disliked the song, and 1 means that he liked it. The sum of n over all testcases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each testcase, print a permutation q \u2014 the re- evaluated ratings of the songs. If there are multiple answers such that \u2211_ i= 1^ n | p_ i- q_ i| is minimum possible, you can print any of them.",
    "note": "In the first testcase, there exists only one permutation q such that each liked song is rating higher than each disliked song: song 1 gets rating 2 and song 2 gets rating 1 . \u2211_ i= 1^ n | p_ i- q_ i| = | 1- 2| + | 2- 1| = 2 . In the second testcase, Monocarp liked all songs, so all permutations could work. The permutation with the minimum sum of absolute differences is the permutation equal to p . Its cost is 0 .",
    "topics": [
      "data structures",
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "New School",
    "url": "https://codeforces.com/problemset/problem/1621/E",
    "history": "You have decided to open a new school. You have already found n teachers and m groups of students. The i - th group of students consists of k_ i \u2265 2 students. You know age of each teacher and each student. The ages of teachers are a_ 1, a_ 2, . . . , a_ n and the ages of students of the i - th group are b_ i, 1, b_ i, 2, . . . , b_ i, k_ i . To start lessons you should assign the teacher to each group of students. Such assignment should satisfy the following requirements: To each group exactly one teacher assigned. To each teacher at most 1 group of students assigned. The average of students' ages in each group doesn' t exceed the age of the teacher assigned to this group. The average of set x_ 1, x_ 2, . . . , x_ k of k integers is x_ 1 + x_ 2 + . . . + x_ k/ k . Recently you have heard that one of the students will refuse to study in your school. After this, the size of one group will decrease by 1 while all other groups will remain unchanged. You don' t know who will refuse to study. For each student determine if you can start lessons in case of his refusal. Note, that it is not guaranteed that it is possible to start lessons before any refusal.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains two integers n and m ( 1 \u2264 m \u2264 n \u2264 10^ 5 ) \u2014 the number of teachers and the number of groups of students. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 5 ) \u2014 the ages of teachers. The next 2m lines contains descriptions of groups. The first line of description of group contains a single integer k_ i ( 2 \u2264 k_ i \u2264 10^ 5 ) \u2014 the number of students in this group. The second line of description of group contains k_ i integers b_ i, 1, b_ i, 2, . . . , b_ i, k_ i ( 1 \u2264 b_ i, j\u2264 10^ 5 ) \u2014 the ages of students of this group. It is guaranteed that the total sum of n over all test cases doesn' t exceed 10^ 5 and that the total sum of k_ 1 + k_ 2 + . . . + k_ m over all test cases doesn' t exceed 2 \u00b7 10^ 5",
    "output": "For each test case output string of symbols 0 and 1 of length k_ 1 + k_ 2 + . . . + k_ m . The i - th symbol of this string should be equals 1 if it is possible to start lessons in case of the i - th student refuse and it should be equals 0 otherwise. Students are numbered by integers from 1 to k_ 1 + k_ 2 + . . . + k_ m in the order they appear in the input. Thus, students of the 1 - st group are numbered by integers 1 , 2 , . . . , k_ 1 , students of the 2 - nd group are numbered by integers k_ 1 + 1 , k_ 1 + 2 , . . . , k_ 1 + k_ 2 and so on.",
    "note": "In the first test case there is one group of students with average age 25+ 16+ 37/ 3= 26 and one teacher with age 30 . There exists only one assignment that allows to start lessons. If the student with age 16 will refuse to study, the average age of students in this group will become 25+ 37/ 2= 31 so there won' t be any assignment that allows to start lessons. In the second test case it is impossible to start lessons initially. However, if the 3 - rd student with age 111 will refuse to study, the average ages of groups will become 4 + 5/ 2= 4. 5 and 11+ 11/ 2 = 11 correspondingly. Then it is possible to assing the first group to the first teacher and the second group to the third teacher.",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Unusual Minesweeper",
    "url": "https://codeforces.com/problemset/problem/1619/G",
    "history": "Polycarp is very fond of playing the game Minesweeper. Recently he found a similar game and there are such rules. There are mines on the field, for each the coordinates of its location are known ( x_ i, y_ i ) . Each mine has a lifetime in seconds, after which it will explode. After the explosion, the mine also detonates all mines vertically and horizontally at a distance of k ( two perpendicular lines) . As a result, we get an explosion on the field in the form of a \" plus\" symbol ( ' + ' ) . Thus, one explosion can cause new explosions, and so on. Also, Polycarp can detonate anyone mine every second, starting from zero seconds. After that, a chain reaction of explosions also takes place. Mines explode instantly and also instantly detonate other mines according to the rules described above. Polycarp wants to set a new record and asks you to help him calculate in what minimum number of seconds all mines can be detonated.",
    "input": "The first line of the input contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the test. An empty line is written in front of each test suite. Next comes a line that contains integers n and k ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 0 \u2264 k \u2264 10^ 9 ) \u2014 the number of mines and the distance that hit by mines during the explosion, respectively. Then n lines follow, the i - th of which describes the x and y coordinates of the i - th mine and the time until its explosion ( - 10^ 9 \u2264 x, y \u2264 10^ 9 , 0 \u2264 timer \u2264 10^ 9 ) . It is guaranteed that all mines have different coordinates. It is guaranteed that the sum of the values n over all test cases in the test does not exceed 2 \u00b7 10^ 5 .",
    "output": "Print t lines, each of the lines must contain the answer to the corresponding set of input data \u2014 the minimum number of seconds it takes to explode all the mines.",
    "note": "Picture from examples First example: 0 second: we explode a mine at the cell ( 2, 2) , it does not detonate any other mine since k= 0 . 1 second: we explode the mine at the cell ( 0, 1) , and the mine at the cell ( 0, 0) explodes itself. 2 second: we explode the mine at the cell ( 1, 1) , and the mine at the cell ( 1, 0) explodes itself. Second example: 0 second: we explode a mine at the cell ( 2, 2) we get: 1 second: the mine at coordinate ( 0, 0) explodes and since k= 2 the explosion detonates mines at the cells ( 0, 1) and ( 1, 0) , and their explosions detonate the mine at the cell ( 1, 1) and there are no mines left on the field.",
    "topics": [
      "binary search",
      "dfs and similar",
      "dsu",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "MEX and Increments",
    "url": "https://codeforces.com/problemset/problem/1619/E",
    "history": "Dmitry has an array of n non- negative integers a_ 1, a_ 2, . . . , a_ n . In one operation, Dmitry can choose any index j ( 1 \u2264 j \u2264 n ) and increase the value of the element a_ j by 1 . He can choose the same index j multiple times. For each i from 0 to n , determine whether Dmitry can make the MEX of the array equal to exactly i . If it is possible, then determine the minimum number of operations to do it. The MEX of the array is equal to the minimum non- negative integer that is not in the array. For example, the MEX of the array [ 3, 1, 0] is equal to 2 , and the array [ 3, 3, 1, 4] is equal to 0 .",
    "input": "The first line of input data contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the input. The descriptions of the test cases follow. The first line of the description of each test case contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the array a . The second line of the description of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 n ) \u2014 elements of the array a . It is guaranteed that the sum of the values n over all test cases in the test does not exceed 2\u00b710^ 5 .",
    "output": "For each test case, output n + 1 integer \u2014 i - th number is equal to the minimum number of operations for which you can make the array MEX equal to i ( 0 \u2264 i \u2264 n ) , or - 1 if this cannot be done.",
    "note": "In the first set of example inputs, n= 3 : to get MEX= 0 , it is enough to perform one increment: a_ 1 + + ; to get MEX= 1 , it is enough to perform one increment: a_ 2 + + ; MEX= 2 for a given array, so there is no need to perform increments; it is impossible to get MEX= 3 by performing increments.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "dp",
      "greedy",
      "implementation",
      "math",
      "sortings"
    ]
  },
  {
    "title": "New Year's Problem",
    "url": "https://codeforces.com/problemset/problem/1619/D",
    "history": "Vlad has n friends, for each of whom he wants to buy one gift for the New Year. There are m shops in the city, in each of which he can buy a gift for any of his friends. If the j - th friend ( 1 \u2264 j \u2264 n ) receives a gift bought in the shop with the number i ( 1 \u2264 i \u2264 m ) , then the friend receives p_ ij units of joy. The rectangular table p_ ij is given in the input. Vlad has time to visit at most n- 1 shops ( where n is the number of friends) . He chooses which shops he will visit and for which friends he will buy gifts in each of them. Let the j - th friend receive a_ j units of joy from Vlad' s gift. Let' s find the value \u03b1= min{ a_ 1, a_ 2, . . . , a_ n} . Vlad' s goal is to buy gifts so that the value of \u03b1 is as large as possible. In other words, Vlad wants to maximize the minimum of the joys of his friends. For example, let m = 2 , n = 2 . Let the joy from the gifts that we can buy in the first shop: p_ 11 = 1 , p_ 12= 2 , in the second shop: p_ 21 = 3 , p_ 22= 4 . Then it is enough for Vlad to go only to the second shop and buy a gift for the first friend, bringing joy 3 , and for the second \u2014 bringing joy 4 . In this case, the value \u03b1 will be equal to min{ 3, 4} = 3 Help Vlad choose gifts for his friends so that the value of \u03b1 is as high as possible. Please note that each friend must receive one gift. Vlad can visit at most n- 1 shops ( where n is the number of friends) . In the shop, he can buy any number of gifts.",
    "input": "The first line of the input contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the input. An empty line is written before each test case. Then there is a line containing integers m and n ( 2 \u2264 n , 2 \u2264 n \u00b7 m \u2264 10^ 5 ) separated by a space \u2014 the number of shops and the number of friends, where n \u00b7 m is the product of n and m . Then m lines follow, each containing n numbers. The number in the i - th row of the j - th column p_ ij ( 1 \u2264 p_ ij\u2264 10^ 9 ) is the joy of the product intended for friend number j in shop number i . It is guaranteed that the sum of the values n \u00b7 m over all test cases in the test does not exceed 10^ 5 .",
    "output": "Print t lines, each line must contain the answer to the corresponding test case \u2014 the maximum possible value of \u03b1 , where \u03b1 is the minimum of the joys from a gift for all of Vlad' s friends.",
    "note": " ",
    "topics": [
      "binary search",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Trader Problem",
    "url": "https://codeforces.com/problemset/problem/1618/G",
    "history": "Monocarp plays a computer game ( yet again! ) . This game has a unique trading mechanics. To trade with a character, Monocarp has to choose one of the items he possesses and trade it for some item the other character possesses. Each item has an integer price. If Monocarp' s chosen item has price x , then he can trade it for any item ( exactly one item) with price not greater than x+ k . Monocarp initially has n items, the price of the i - th item he has is a_ i . The character Monocarp is trading with has m items, the price of the i - th item they have is b_ i . Monocarp can trade with this character as many times as he wants ( possibly even zero times) , each time exchanging one of his items with one of the other character' s items according to the aforementioned constraints. Note that if Monocarp gets some item during an exchange, he can trade it for another item ( since now the item belongs to him) , and vice versa: if Monocarp trades one of his items for another item, he can get his item back by trading something for it. You have to answer q queries. Each query consists of one integer, which is the value of k , and asks you to calculate the maximum possible total cost of items Monocarp can have after some sequence of trades, assuming that he can trade an item of cost x for an item of cost not greater than x+ k during each trade. Note that the queries are independent: the trades do not actually occur, Monocarp only wants to calculate the maximum total cost he can get.",
    "input": "The first line contains three integers n , m and q ( 1 \u2264 n, m, q \u2264 2 \u00b7 10^ 5 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the prices of the items Monocarp has. The third line contains m integers b_ 1, b_ 2, . . . , b_ m ( 1 \u2264 b_ i \u2264 10^ 9 ) \u2014 the prices of the items the other character has. The fourth line contains q integers, where the i - th integer is the value of k for the i - th query ( 0 \u2264 k \u2264 10^ 9 ) .",
    "output": "For each query, print one integer \u2014 the maximum possible total cost of items Monocarp can have after some sequence of trades, given the value of k from the query.",
    "note": " ",
    "topics": [
      "data structures",
      "dsu",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Polycarp and Sums of Subsequences",
    "url": "https://codeforces.com/problemset/problem/1618/A",
    "history": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non- empty subsequences of this array, sorted them in non- decreasing order, and got an array b of 7 integers. For example, if a = { 1, 4, 3} , then Polycarp wrote out 1 , 4 , 3 , 1 + 4 = 5 , 1 + 3 = 4 , 4 + 3 = 7 , 1 + 4 + 3 = 8 . After sorting, he got an array b = { 1, 3, 4, 4, 5, 7, 8} . Unfortunately, Polycarp lost the array a . He only has the array b left. Help him to restore the array a .",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 5000 ) \u2014 the number of test cases. Each test case consists of one line which contains 7 integers b_ 1, b_ 2, . . . , b_ 7 ( 1 \u2264 b_ i \u2264 10^ 9 ; b_ i \u2264 b_ i+ 1 ) . Additional constraint on the input: there exists at least one array a which yields this array b as described in the statement.",
    "output": "For each test case, print 3 integers \u2014 a_ 1 , a_ 2 and a_ 3 . If there can be several answers, print any of them.",
    "note": "The subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements. Two subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don' t matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non- empty subsequences.",
    "topics": [
      "math",
      "sortings"
    ]
  },
  {
    "title": "Paprika and Permutation",
    "url": "https://codeforces.com/problemset/problem/1617/C",
    "history": "Paprika loves permutations. She has an array a_ 1, a_ 2, . . . , a_ n . She wants to make the array a permutation of integers 1 to n . In order to achieve this goal, she can perform operations on the array. In each operation she can choose two integers i ( 1 \u2264 i \u2264 n ) and x ( x > 0 ) , then perform a_ i : = a_ i x ( that is, replace a_ i by the remainder of a_ i divided by x ) . In different operations, the chosen i and x can be different. Determine the minimum number of operations needed to make the array a permutation of integers 1 to n . If it is impossible, output - 1 . A permutation is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [ 2, 3, 1, 5, 4] is a permutation, but [ 1, 2, 2] is not a permutation ( 2 appears twice in the array) and [ 1, 3, 4] is also not a permutation ( n= 3 but there is 4 in the array) .",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 10^ 5 ) . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n . ( 1 \u2264 a_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output the minimum number of operations needed to make the array a permutation of integers 1 to n , or - 1 if it is impossible.",
    "note": "For the first test, the only possible sequence of operations which minimizes the number of operations is: Choose i= 2 , x= 5 . Perform a_ 2 : = a_ 2 5 = 2 . For the second test, it is impossible to obtain a permutation of integers from 1 to n .",
    "topics": [
      "binary search",
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Forbidden Subsequence",
    "url": "https://codeforces.com/problemset/problem/1617/A",
    "history": "You are given strings S and T , consisting of lowercase English letters. It is guaranteed that T is a permutation of the string abc. Find string S' , the lexicographically smallest permutation of S such that T is not a subsequence of S' . String a is a permutation of string b if the number of occurrences of each distinct character is the same in both strings. A string a is a subsequence of a string b if a can be obtained from b by deletion of several ( possibly, zero or all) elements. A string a is lexicographically smaller than a string b if and only if one of the following holds: a is a prefix of b , but a b ; in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b .",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains a string S ( 1 \u2264 | S| \u2264 100 ) , consisting of lowercase English letters. The second line of each test case contains a string T that is a permutation of the string abc. ( Hence, | T| = 3 ) . Note that there is no limit on the sum of | S| across all test cases.",
    "output": "For each test case, output a single string S' , the lexicographically smallest permutation of S such that T is not a subsequence of S' .",
    "note": "In the first test case, both aaaabbc and aaaabcb are lexicographically smaller than aaaacbb, but they contain abc as a subsequence. In the second test case, abccc is the smallest permutation of cccba and does not contain acb as a subsequence. In the third test case, bcdis is the smallest permutation of dbsic and does not contain bac as a subsequence.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "sortings",
      "strings"
    ]
  },
  {
    "title": "Purple Crayon",
    "url": "https://codeforces.com/problemset/problem/1615/E",
    "history": "Two players, Red and Blue, are at it again, and this time they' re playing with crayons! The mischievous duo is now vandalizing a rooted tree, by coloring the nodes while playing their favorite game. The game works as follows: there is a tree of size n , rooted at node 1 , where each node is initially white. Red and Blue get one turn each. Red goes first. In Red' s turn, he can do the following operation any number of times: Pick any subtree of the rooted tree, and color every node in the subtree red. However, to make the game fair, Red is only allowed to color k nodes of the tree. In other words, after Red' s turn, at most k of the nodes can be colored red. Then, it' s Blue' s turn. Blue can do the following operation any number of times: Pick any subtree of the rooted tree, and color every node in the subtree blue. However, he' s not allowed to choose a subtree that contains a node already colored red, as that would make the node purple and no one likes purple crayon. Note: there' s no restriction on the number of nodes Blue can color, as long as he doesn' t color a node that Red has already colored. After the two turns, the score of the game is determined as follows: let w be the number of white nodes, r be the number of red nodes, and b be the number of blue nodes. The score of the game is w \u00b7 ( r - b) . Red wants to maximize this score, and Blue wants to minimize it. If both players play optimally, what will the final score of the game be?",
    "input": "The first line contains two integers n and k ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ; 1 \u2264 k \u2264 n ) \u2014 the number of vertices in the tree and the maximum number of red nodes. Next n - 1 lines contains description of edges. The i - th line contains two space separated integers u_ i and v_ i ( 1 \u2264 u_ i, v_ i \u2264 n ; u_ i = \u0338 v_ i ) \u2014 the i - th edge of the tree. It' s guaranteed that given edges form a tree.",
    "output": "Print one integer \u2014 the resulting score if both Red and Blue play optimally.",
    "note": "In the first test case, the optimal strategy is as follows: Red chooses to color the subtrees of nodes 2 and 3 . Blue chooses to color the subtree of node 4 . At the end of this process, nodes 2 and 3 are red, node 4 is blue, and node 1 is white. The score of the game is 1 \u00b7 ( 2 - 1) = 1 . In the second test case, the optimal strategy is as follows: Red chooses to color the subtree of node 4 . This colors both nodes 4 and 5 . Blue does not have any options, so nothing is colored blue. At the end of this process, nodes 4 and 5 are red, and nodes 1 , 2 and 3 are white. The score of the game is 3 \u00b7 ( 2 - 0) = 6 . For the third test case: The score of the game is 4 \u00b7 ( 2 - 1) = 4 .",
    "topics": [
      "data structures",
      "dfs and similar",
      "games",
      "graphs",
      "greedy",
      "math",
      "sortings",
      "trees"
    ]
  },
  {
    "title": "Divan and a New Project ",
    "url": "https://codeforces.com/problemset/problem/1614/B",
    "history": "The company \" Divan' s Sofas\" is planning to build n + 1 different buildings on a coordinate line so that: the coordinate of each building is an integer number; no two buildings stand at the same point. Let x_ i be the coordinate of the i - th building. To get from the building i to the building j , Divan spends | x_ i - x_ j| minutes, where | y| is the absolute value of y . All buildings that Divan is going to build can be numbered from 0 to n . The businessman will live in the building 0 , the new headquarters of \" Divan' s Sofas\" . In the first ten years after construction Divan will visit the i - th building a_ i times, each time spending 2 \u00b7 | x_ 0- x_ i| minutes for walking. Divan asks you to choose the coordinates for all n + 1 buildings so that over the next ten years the businessman will spend as little time for walking as possible.",
    "input": "Each test contains several test cases. The first line contains one integer number t ( 1 \u2264 t \u2264 10^ 3 ) \u2014 the number of test cases. The first line of each case contains an integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of buildings that \" Divan' s Sofas\" is going to build, apart from the headquarters. The second line contains the sequence a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 6 ) , where a_ i is the number of visits to the i - th building. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, on the first line print the number T \u2014 the minimum time Divan will spend walking. On the second line print the sequence x_ 0, x_ 1, . . . , x_ n of n + 1 integers, where x_ i ( - 10^ 6 \u2264 x_ i \u2264 10^ 6 ) is the selected coordinate of the i - th building. It can be shown that an optimal answer exists with coordinates not exceeding 10^ 6 . If there are multiple answers, print any of them.",
    "note": "Let' s look at the first example. Divan will visit the first building a_ 1 = 1 times, the second a_ 2 = 2 times and the third a_ 3 = 3 times. Then one of the optimal solution will be as follows: the headquarters is located in x_ 0 = 2 ; x_ 1 = 4 : Divan will spend 2 \u00b7 | x_ 0- x_ 1| \u00b7 a_ 1 = 2 \u00b7 | 2- 4| \u00b7 1 = 4 minutes walking to the first building; x_ 2 = 1 : Divan will spend 2 \u00b7 | x_ 0- x_ 2| \u00b7 a_ 2 = 2 \u00b7 | 2- 1| \u00b7 2 = 4 minutes walking to the second building; x_ 3 = 3 : Divan will spend 2 \u00b7 | x_ 0- x_ 3| \u00b7 a_ 3 = 2 \u00b7 | 2- 3| \u00b7 3 = 6 minutes walking to the third building. In total, Divan will spend 4 + 4 + 6 = 14 minutes. It can be shown that it is impossible to arrange buildings so that the businessman spends less time. Among others, x = [ 1, 3, 2, 0] , x = [ - 5, - 3, - 6, - 4] are also correct answers for the first example.",
    "topics": [
      "constructive algorithms",
      "sortings"
    ]
  },
  {
    "title": "Absent Remainder",
    "url": "https://codeforces.com/problemset/problem/1613/B",
    "history": "You are given a sequence a_ 1, a_ 2, . . . , a_ n consisting of n pairwise distinct positive integers. Find \u230an/ 2\u230b different pairs of integers x and y such that: x = \u0338 y ; x and y appear in a ; x mod y doesn' t appear in a . Note that some x or y can belong to multiple pairs. \u230a x \u230b denotes the floor function \u2014 the largest integer less than or equal to x . x mod y denotes the remainder from dividing x by y . If there are multiple solutions, print any of them. It can be shown that at least one solution always exists.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of testcases. The first line of each testcase contains a single integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the sequence. The second line of each testcase contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 6 ) . All numbers in the sequence are pairwise distinct. The sum of n over all testcases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "The answer for each testcase should contain \u230an/ 2\u230b different pairs of integers x and y such that x = \u0338 y , x and y appear in a and x mod y doesn' t appear in a . Print the pairs one after another. You can print the pairs in any order. However, the order of numbers in the pair should be exactly such that the first number is x and the second number is y . All pairs should be pairwise distinct. If there are multiple solutions, print any of them.",
    "note": "In the first testcase there are only two pairs: ( 1, 4) and ( 4, 1) . \u230a2/ 2\u230b= 1 , so we have to find one pair. 1 mod 4= 1 , and 1 appears in a , so that pair is invalid. Thus, the only possible answer is a pair ( 4, 1) . In the second testcase, we chose pairs 8 mod 2= 0 and 8 mod 4= 0 . 0 doesn' t appear in a , so that answer is valid. There are multiple possible answers for that testcase. In the third testcase, the chosen pairs are 9 mod 5= 4 and 7 mod 5= 2 . Neither 4 , nor 2 , appears in a , so that answer is valid.",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Max Sum Array",
    "url": "https://codeforces.com/problemset/problem/1612/G",
    "history": "You are given an array c = [ c_ 1, c_ 2, . . . , c_ m] . An array a = [ a_ 1, a_ 2, . . . , a_ n] is constructed in such a way that it consists of integers 1, 2, . . . , m , and for each i \u2208 [ 1, m] , there are exactly c_ i occurrences of integer i in a . So, the number of elements in a is exactly \u2211_ i= 1^ m c_ i . Let' s define for such array a the value f( a) as f( a) = \u2211_ 1 \u2264 i < j \u2264 n a_ i = a_ jj - i. In other words, f( a) is the total sum of distances between all pairs of equal elements. Your task is to calculate the maximum possible value of f( a) and the number of arrays yielding the maximum possible value of f( a) . Two arrays are considered different, if elements at some position differ.",
    "input": "The first line contains a single integer m ( 1 \u2264 m \u2264 5 \u00b7 10^ 5 ) \u2014 the size of the array c . The second line contains m integers c_ 1, c_ 2, . . . , c_ m ( 1 \u2264 c_ i \u2264 10^ 6 ) \u2014 the array c .",
    "output": "Print two integers \u2014 the maximum possible value of f( a) and the number of arrays a with such value. Since both answers may be too large, print them modulo 10^ 9 + 7 .",
    "note": "In the first example, all possible arrays a are permutations of [ 1, 2, 3, 4, 5, 6] . Since each array a will have f( a) = 0 , so maximum value is f( a) = 0 and there are 6! = 720 such arrays. In the second example, the only possible array consists of 10^ 6 ones and its f( a) = \u2211_ 1 \u2264 i < j \u2264 10^ 6j - i = 166 666 666 666 500 000 and 166 666 666 666 500 000 10^ 9 + 7 = 499 833 345 .",
    "topics": [
      "combinatorics",
      "constructive algorithms",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Messages",
    "url": "https://codeforces.com/problemset/problem/1612/E",
    "history": "Monocarp is a tutor of a group of n students. He communicates with them using a conference in a popular messenger. Today was a busy day for Monocarp \u2014 he was asked to forward a lot of posts and announcements to his group, that' s why he had to write a very large number of messages in the conference. Monocarp knows the students in the group he is tutoring quite well, so he understands which message should each student read: Monocarp wants the student i to read the message m_ i . Of course, no one' s going to read all the messages in the conference. That' s why Monocarp decided to pin some of them. Monocarp can pin any number of messages, and if he wants anyone to read some message, he should pin it \u2014 otherwise it will definitely be skipped by everyone. Unfortunately, even if a message is pinned, some students may skip it anyway. For each student i , Monocarp knows that they will read at most k_ i messages. Suppose Monocarp pins t messages; if t \u2264 k_ i , then the i - th student will read all the pinned messages; but if t > k_ i , the i - th student will choose exactly k_ i random pinned messages ( all possible subsets of pinned messages of size k_ i are equiprobable) and read only the chosen messages. Monocarp wants to maximize the expected number of students that read their respective messages ( i. e. the number of such indices i that student i reads the message m_ i ) . Help him to choose how many ( and which) messages should he pin!",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of students in the conference. Then n lines follow. The i - th line contains two integers m_ i and k_ i ( 1 \u2264 m_ i \u2264 2 \u00b7 10^ 5 ; 1 \u2264 k_ i \u2264 20 ) \u2014 the index of the message which Monocarp wants the i - th student to read and the maximum number of messages the i - th student will read, respectively.",
    "output": "In the first line, print one integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 5 ) \u2014 the number of messages Monocarp should pin. In the second line, print t distinct integers c_ 1 , c_ 2 , . . . , c_ t ( 1 \u2264 c_ i \u2264 2 \u00b7 10^ 5 ) \u2014 the indices of the messages Monocarp should pin. The messages can be listed in any order. If there are multiple answers, print any of them.",
    "note": "Let' s consider the examples from the statement. In the first example, Monocarp pins the messages 5 and 10 . if the first student reads the message 5 , the second student reads the messages 5 and 10 , and the third student reads the messages 5 and 10 , the number of students which have read their respective messages will be 2 ; if the first student reads the message 10 , the second student reads the messages 5 and 10 , and the third student reads the messages 5 and 10 , the number of students which have read their respective messages will be 3 . So, the expected number of students which will read their respective messages is 5/ 2 . In the second example, Monocarp pins the message 10 . if the first student reads the message 10 , the second student reads the message 10 , and the third student reads the message 10 , the number of students which have read their respective messages will be 2 . So, the expected number of students which will read their respective messages is 2 . If Monocarp had pinned both messages 5 and 10 , the expected number of students which read their respective messages would have been 2 as well. In the third example, the expected number of students which will read their respective messages is 8/ 3 . In the fourth example, the expected number of students which will read their respective messages is 2 .",
    "topics": [
      "brute force",
      "dp",
      "greedy",
      "probabilities",
      "sortings"
    ]
  },
  {
    "title": "The Cells on the Paper",
    "url": "https://codeforces.com/problemset/problem/1608/E",
    "history": "On an endless checkered sheet of paper, n cells are chosen and colored in three colors, where n is divisible by 3 . It turns out that there are exactly n/ 3 marked cells of each of three colors! Find the largest such k that it' s possible to choose k/ 3 cells of each color, remove all other marked cells, and then select three rectangles with sides parallel to the grid lines so that the following conditions hold: No two rectangles can intersect ( but they can share a part of the boundary) . In other words, the area of intersection of any two of these rectangles must be 0 . The i - th rectangle contains all the chosen cells of the i - th color and no chosen cells of other colors, for i = 1, 2, 3 .",
    "input": "The first line of the input contains a single integer n \u2014 the number of the marked cells ( 3 \u2264 n \u2264 10^ 5 , n is divisible by 3) . The i - th of the following n lines contains three integers x_ i , y_ i , c_ i ( | x_ i| , | y_ i| \u2264 10^ 9 ; 1 \u2264 c_ i \u2264 3 ) , where ( x_ i, y_ i) are the coordinates of the i - th marked cell and c_ i is its color. It' s guaranteed that all cells ( x_ i, y_ i) in the input are distinct, and that there are exactly n/ 3 cells of each color.",
    "output": "Output a single integer k \u2014 the largest number of cells you can leave.",
    "note": "In the first sample, it' s possible to leave 6 cells with indexes 1, 5, 6, 7, 8, 9 . In the second sample, it' s possible to leave 3 cells with indexes 1, 2, 3 .",
    "topics": [
      "binary search",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Banquet Preparations 2",
    "url": "https://codeforces.com/problemset/problem/1607/H",
    "history": "The chef has cooked n dishes yet again: the i - th dish consists of a_ i grams of fish and b_ i grams of meat. Banquet organizers consider two dishes i and j equal if a_ i= a_ j and b_ i= b_ j at the same time. The banquet organizers estimate the variety of n dishes as follows. The variety of a set of dishes is equal to the number of different dishes in it. The less variety is, the better. In order to reduce the variety, a taster was invited. He will eat exactly m_ i grams of food from each dish. For each dish, the taster determines separately how much fish and how much meat he will eat. The only condition is that he will eat exactly m_ i grams of the i - th dish in total. Determine how much of what type of food the taster should eat from each dish so that the value of variety is the minimum possible. If there are several correct answers, you may output any of them.",
    "input": "The first line of input data contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Each test case' s description is preceded by a blank line. Next comes a line that contains an integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of dishes. Then follows n lines, i - th of which contains three integers a_ i , b_ i and m_ i ( 0 \u2264 a_ i, b_ i \u2264 10^ 6 ; 0 \u2264 m_ i \u2264 a_ i+ b_ i ) \u2014 the mass of fish in i - th dish, the mass of meat in i - th dish and how many grams in total the taster should eat in i - th dish. The sum of all n values for all input data sets in the test does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print on the first line the minimum value of variety that can be achieved by eating exactly m_ i grams of food ( for all i from 1 to n ) from a dish i . Then print n lines that describe a way to do this: the i - th line should contain two integers x_ i and y_ i ( 0 \u2264 x_ i \u2264 a_ i ; 0 \u2264 y_ i \u2264 b_ i ; x_ i+ y_ i= m_ i ) , where x_ i is how many grams of fish the taster should eat from i - th dish, and y_ i is how many grams of meat. If there are several ways to achieve a minimum balance, print any of them.",
    "note": " ",
    "topics": [
      "greedy",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Blue-Red Permutation",
    "url": "https://codeforces.com/problemset/problem/1607/D",
    "history": "You are given an array of integers a of length n . The elements of the array can be either different or the same. Each element of the array is colored either blue or red. There are no unpainted elements in the array. One of the two operations described below can be applied to an array in a single step: either you can select any blue element and decrease its value by 1 ; or you can select any red element and increase its value by 1 . Situations in which there are no elements of some color at all are also possible. For example, if the whole array is colored blue or red, one of the operations becomes unavailable. Determine whether it is possible to make 0 or more steps such that the resulting array is a permutation of numbers from 1 to n ? In other words, check whether there exists a sequence of steps ( possibly empty) such that after applying it, the array a contains in some order all numbers from 1 to n ( inclusive) , each exactly once.",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of input data sets in the test. The description of each set of input data consists of three lines. The first line contains an integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the original array a . The second line contains n integers a_ 1 , a_ 2 , . . . , a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) \u2014 the array elements themselves. The third line has length n and consists exclusively of the letters ' B' and/ or ' R' : i th character is ' B' if a_ i is colored blue, and is ' R' if colored red. It is guaranteed that the sum of n over all input sets does not exceed 2 \u00b7 10^ 5 .",
    "output": "Print t lines, each of which contains the answer to the corresponding test case of the input. Print YES as an answer if the corresponding array can be transformed into a permutation, and NO otherwise. You can print the answer in any case ( for example, the strings yEs, yes, Yes, and YES will be recognized as a positive answer) .",
    "note": "In the first test case of the example, the following sequence of moves can be performed: choose i= 3 , element a_ 3= 5 is blue, so we decrease it, we get a= [ 1, 2, 4, 2] ; choose i= 2 , element a_ 2= 2 is red, so we increase it, we get a= [ 1, 3, 4, 2] ; choose i= 3 , element a_ 3= 4 is blue, so we decrease it, we get a= [ 1, 3, 3, 2] ; choose i= 2 , element a_ 2= 2 is red, so we increase it, we get a= [ 1, 4, 3, 2] . We got that a is a permutation. Hence the answer is YES.",
    "topics": [
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Minimum Extraction",
    "url": "https://codeforces.com/problemset/problem/1607/C",
    "history": "Yelisey has an array a of n integers. If a has length strictly greater than 1 , then Yelisei can apply an operation called minimum extraction to it: First, Yelisei finds the minimal number m in the array. If there are several identical minima, Yelisey can choose any of them. Then the selected minimal element is removed from the array. After that, m is subtracted from each remaining element. Thus, after each operation, the length of the array is reduced by 1 . For example, if a = [ 1, 6, - 4, - 2, - 4] , then the minimum element in it is a_ 3 = - 4 , which means that after this operation the array will be equal to a= [ 1 - ( - 4) , 6 - ( - 4) , - 2 - ( - 4) , - 4 - ( - 4) ] = [ 5, 10, 2, 0] . Since Yelisey likes big numbers, he wants the numbers in the array a to be as big as possible. Formally speaking, he wants to make the minimum of the numbers in array a to be maximal possible ( i. e. he want to maximize a minimum) . To do this, Yelisey can apply the minimum extraction operation to the array as many times as he wants ( possibly, zero) . Note that the operation cannot be applied to an array of length 1 . Help him find what maximal value can the minimal element of the array have after applying several ( possibly, zero) minimum extraction operations to the array.",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The next 2t lines contain descriptions of the test cases. In the description of each test case, the first line contains an integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the original length of the array a . The second line of the description lists n space- separated integers a_ i ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) \u2014 elements of the array a . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "Print t lines, each of them containing the answer to the corresponding test case. The answer to the test case is a single integer \u2014 the maximal possible minimum in a , which can be obtained by several applications of the described operation to it.",
    "note": "In the first example test case, the original length of the array n = 1 . Therefore minimum extraction cannot be applied to it. Thus, the array remains unchanged and the answer is a_ 1 = 10 . In the second set of input data, the array will always consist only of zeros. In the third set, the array will be changing as follows: [ - 1, 2, 0] \u2192 [ 3, 1] \u2192 [ 2] . The minimum elements are highlighted with blue . The maximal one is 2 . In the fourth set, the array will be modified as [ 2, 10, 1, 7] \u2192 [ 1, 9, 6] \u2192 [ 8, 5] \u2192 [ 3] . Similarly, the maximum of the minimum elements is 5 .",
    "topics": [
      "brute force",
      "sortings"
    ]
  },
  {
    "title": "Red-Blue Matrix",
    "url": "https://codeforces.com/problemset/problem/1606/D",
    "history": "You are given a matrix, consisting of n rows and m columns. The j - th cell of the i - th row contains an integer a_ ij . First, you have to color each row of the matrix either red or blue in such a way that at least one row is colored red and at least one row is colored blue. Then, you have to choose an integer k ( 1 \u2264 k < m ) and cut the colored matrix in such a way that the first k columns become a separate matrix ( the left matrix) and the last m- k columns become a separate matrix ( the right matrix) . The coloring and the cut are called perfect if two properties hold: every red cell in the left matrix contains an integer greater than every blue cell in the left matrix; every blue cell in the right matrix contains an integer greater than every red cell in the right matrix. Find any perfect coloring and cut, or report that there are none.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of testcases. Then the descriptions of t testcases follow. The first line of each testcase contains two integers n and m ( 2 \u2264 n, m \u2264 5 \u00b7 10^ 5 ; n \u00b7 m \u2264 10^ 6 ) \u2014 the number of rows and the number of columns in the matrix, respectively. The i - th of the next n lines contains m integers a_ i1, a_ i2, . . . , a_ im ( 1 \u2264 a_ ij\u2264 10^ 6 ) . The sum of n \u00b7 m over all testcases doesn' t exceed 10^ 6 .",
    "output": "For each testcase print an answer. If there are no perfect colorings and cuts in the matrix, then print \" NO\" . Otherwise, first, print \" YES\" . Then a string, consisting of n characters: the i - th character should be ' R' if the i - th row is colored red and ' B' if it' s colored blue. The string should contain at least one ' R' and at least one ' B' . Finally, print an integer k ( 1 \u2264 k < m ) \u2014 the number of columns from the left that are cut.",
    "note": "The coloring and the cut for the first testcase:",
    "topics": [
      "brute force",
      "constructive algorithms",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Array Equalizer",
    "url": "https://codeforces.com/problemset/problem/1605/E",
    "history": "Jeevan has two arrays a and b of size n . He is fond of performing weird operations on arrays. This time, he comes up with two types of operations: Choose any i ( 1 \u2264 i \u2264 n ) and increment a_ j by 1 for every j which is a multiple of i and 1 \u2264 j \u2264 n . Choose any i ( 1 \u2264 i \u2264 n ) and decrement a_ j by 1 for every j which is a multiple of i and 1 \u2264 j \u2264 n . He wants to convert array a into an array b using the minimum total number of operations. However, Jeevan seems to have forgotten the value of b_ 1 . So he makes some guesses. He will ask you q questions corresponding to his q guesses, the i - th of which is of the form: If b_ 1 = x_ i , what is the minimum number of operations required to convert a to b ? Help him by answering each question.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5) \u2014 the size of arrays a and b . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 6) . The third line contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 10^ 6 for i = \u0338 1 ; b_ 1 = - 1 , representing that the value of b_ 1 is unknown ) . The fourth line contains a single integer q ( 1 \u2264 q \u2264 2 \u00b7 10^ 5) \u2014 the number of questions. Each of the following q lines contains a single integer x_ i ( 1 \u2264 x_ i \u2264 10^ 6) \u2014 representing the i - th question.",
    "output": "Output q integers \u2014 the answers to each of his q questions.",
    "note": "Consider the first test case. b_ 1 = 1 : We need to convert [ 3, 7] \u2192 [ 1, 5] . We can perform the following operations: [ 3, 7] [ 2, 6] [ 1, 5] Hence the answer is 2 . b_ 1 = 4 : We need to convert [ 3, 7] \u2192 [ 4, 5] . We can perform the following operations: [ 3, 7] [ 3, 6] [ 3, 5] [ 4, 6] [ 4, 5] Hence the answer is 4 . b_ 1 = 3 : We need to convert [ 3, 7] \u2192 [ 3, 5] . We can perform the following operations: [ 3, 7] [ 3, 6] [ 3, 5] Hence the answer is 2 .",
    "topics": [
      "binary search",
      "greedy",
      "implementation",
      "math",
      "number theory",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Reverse Sort",
    "url": "https://codeforces.com/problemset/problem/1605/B",
    "history": "Ashish has a binary string s of length n that he wants to sort in non- decreasing order. He can perform the following operation: Choose a subsequence of any length such that its elements are in non- increasing order. Formally, choose any k such that 1 \u2264 k \u2264 n and any sequence of k indices 1 \u2264 i_ 1 i_ 2 . . . i_ k \u2264 n such that s_ i_ 1\u2265 s_ i_ 2\u2265. . . \u2265 s_ i_ k . Reverse this subsequence in- place. Formally, swap s_ i_ 1 with s_ i_ k , swap s_ i_ 2 with s_ i_ k- 1 , . . . and swap s_ i_ \u230a k/ 2 \u230b with s_ i_ \u2308 k/ 2 \u2309 + 1 ( Here \u230a x \u230b denotes the largest integer not exceeding x , and \u2308 x \u2309 denotes the smallest integer not less than x ) Find the minimum number of operations required to sort the string in non- decreasing order. It can be proven that it is always possible to sort the given binary string in at most n operations.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 1000) \u2014 the length of the binary string s . The second line of each test case contains a binary string s of length n containing only 0 s and 1 s. It is guaranteed that the sum of n over all test cases does not exceed 1000 .",
    "output": "For each test case output the following: The minimum number of operations m in the first line ( 0 \u2264 m \u2264 n ) . Each of the following m lines should be of the form: k i_ 1 i_ 2 . . . i_ k , where k is the length and i_ 1 i_ 2 . . . i_ k are the indices of the chosen subsequence. For them the conditions from the statement must hold.",
    "note": "In the first test case, the binary string is already sorted in non- decreasing order. In the second test case, we can perform the following operation: k = 4: choose the indices { 1, 3, 4, 5} 1 0 1 0 0 \u2192 0 0 0 1 1 In the third test case, we can perform the following operation: k = 3: choose the indices { 3, 5, 6} 0 0 1 0 0 0 \u2192 0 0 0 0 0 1",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Difficult Mountain",
    "url": "https://codeforces.com/problemset/problem/1601/D",
    "history": "A group of n alpinists has just reached the foot of the mountain. The initial difficulty of climbing this mountain can be described as an integer d . Each alpinist can be described by two integers s and a , where s is his skill of climbing mountains and a is his neatness. An alpinist of skill level s is able to climb a mountain of difficulty p only if p \u2264 s . As an alpinist climbs a mountain, they affect the path and thus may change mountain difficulty. Specifically, if an alpinist of neatness a climbs a mountain of difficulty p the difficulty of this mountain becomes max( p, a) . Alpinists will climb the mountain one by one. And before the start, they wonder, what is the maximum number of alpinists who will be able to climb the mountain if they choose the right order. As you are the only person in the group who does programming, you are to answer the question. Note that after the order is chosen, each alpinist who can climb the mountain, must climb the mountain at that time.",
    "input": "The first line contains two integers n and d ( 1 \u2264 n \u2264 500 000 ; 0 \u2264 d \u2264 10^ 9 ) \u2014 the number of alpinists and the initial difficulty of the mountain. Each of the next n lines contains two integers s_ i and a_ i ( 0 \u2264 s_ i, a_ i \u2264 10^ 9 ) that define the skill of climbing and the neatness of the i - th alpinist.",
    "output": "Print one integer equal to the maximum number of alpinists who can climb the mountain if they choose the right order to do so.",
    "note": "In the first example, alpinists 2 and 3 can climb the mountain if they go in this order. There is no other way to achieve the answer of 2 . In the second example, alpinist 1 is not able to climb because of the initial difficulty of the mountain, while alpinists 2 and 3 can go up in any order. In the third example, the mountain can be climbed by alpinists 5 , 3 and 4 in this particular order. There is no other way to achieve optimal answer.",
    "topics": [
      "data structures",
      "dp",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Optimal Insertion",
    "url": "https://codeforces.com/problemset/problem/1601/C",
    "history": "You are given two arrays of integers a_ 1, a_ 2, . . . , a_ n and b_ 1, b_ 2, . . . , b_ m . You need to insert all elements of b into a in an arbitrary way. As a result you will get an array c_ 1, c_ 2, . . . , c_ n+ m of size n + m . Note that you are not allowed to change the order of elements in a , while you can insert elements of b at arbitrary positions. They can be inserted at the beginning, between any elements of a , or at the end. Moreover, elements of b can appear in the resulting array in any order. What is the minimum possible number of inversions in the resulting array c ? Recall that an inversion is a pair of indices ( i, j) such that i < j and c_ i > c_ j .",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . Description of the test cases follows. The first line of each test case contains two integers n and m ( 1 \u2264 n, m \u2264 10^ 6 ) . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) . The third line of each test case contains m integers b_ 1, b_ 2, . . . , b_ m ( 1 \u2264 b_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n for all tests cases in one input doesn' t exceed 10^ 6 . The sum of m for all tests cases doesn' t exceed 10^ 6 as well.",
    "output": "For each test case, print one integer \u2014 the minimum possible number of inversions in the resulting array c .",
    "note": "Below is given the solution to get the optimal answer for each of the example test cases ( elements of a are underscored) . In the first test case, c = [ 1, 1, 2, 2, 3, 3, 4] . In the second test case, c = [ 1, 2, 3, 2, 1, 3] . In the third test case, c = [ 1, 1, 3, 3, 5, 3, 1, 4, 6] .",
    "topics": [
      "data structures",
      "divide and conquer",
      "dp",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Hemose Shopping",
    "url": "https://codeforces.com/problemset/problem/1592/B",
    "history": "Hemose was shopping with his friends Samez, AhmedZ, AshrafEzz, TheSawan and O_ E in Germany. As you know, Hemose and his friends are problem solvers, so they are very clever. Therefore, they will go to all discount markets in Germany. Hemose has an array of n integers. He wants Samez to sort the array in the non- decreasing order. Since it would be a too easy problem for Samez, Hemose allows Samez to use only the following operation: Choose indices i and j such that 1 \u2264 i, j \u2264 n , and | i - j | \u2265 x . Then, swap elements a_ i and a_ j . Can you tell Samez if there' s a way to sort the array in the non- decreasing order by using the operation written above some finite number of times ( possibly 0 ) ?",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 5) . Description of the test cases follows. The first line of each test case contains two integers n and x ( 1 \u2264 x \u2264 n \u2264 10^ 5) . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9) . It is guaranteed that the sum of n over all test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, you should output a single string. If Samez can sort the array in non- decreasing order using the operation written above, output \" YES\" ( without quotes) . Otherwise, output \" NO\" ( without quotes) . You can print each letter of \" YES\" and \" NO\" in any case ( upper or lower) .",
    "note": "In the first test case, you can' t do any operations. In the second test case, the array is already sorted. In the third test case, you can do the operations as follows: [ 5, 1, 2, 3, 4] , swap( a_ 1, a_ 3) [ 2, 1, 5, 3, 4] , swap( a_ 2, a_ 5) [ 2, 4, 5, 3, 1] , swap( a_ 2, a_ 4) [ 2, 3, 5, 4, 1] , swap( a_ 1, a_ 5) [ 1, 3, 5, 4, 2] , swap( a_ 2, a_ 5) [ 1, 2, 5, 4, 3] , swap( a_ 3, a_ 5) [ 1, 2, 3, 4, 5] ( Here swap( a_ i, a_ j) refers to swapping elements at positions i , j ) .",
    "topics": [
      "constructive algorithms",
      "dsu",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Gamer Hemose",
    "url": "https://codeforces.com/problemset/problem/1592/A",
    "history": "One day, Ahmed_ Hossam went to Hemose and said \" Let' s solve a gym contest! \" . Hemose didn' t want to do that, as he was playing Valorant, so he came up with a problem and told it to Ahmed to distract him. Sadly, Ahmed can' t solve it. . . Could you help him? There is an Agent in Valorant, and he has n weapons. The i - th weapon has a damage value a_ i , and the Agent will face an enemy whose health value is H . The Agent will perform one or more moves until the enemy dies. In one move, he will choose a weapon and decrease the enemy' s health by its damage value. The enemy will die when his health will become less than or equal to 0 . However, not everything is so easy: the Agent can' t choose the same weapon for 2 times in a row. What is the minimum number of times that the Agent will need to use the weapons to kill the enemy?",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 5) . Description of the test cases follows. The first line of each test case contains two integers n and H ( 2 \u2264 n \u2264 10^ 3, 1 \u2264 H \u2264 10^ 9) \u2014 the number of available weapons and the initial health value of the enemy. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9) \u2014 the damage values of the weapons. It' s guaranteed that the sum of n over all test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print a single integer \u2014 the minimum number of times that the Agent will have to use the weapons to kill the enemy.",
    "note": "In the first test case, the Agent can use the second weapon, making health value of the enemy equal to 4- 7= - 3 . - 3 \u2264 0 , so the enemy is dead, and using weapon 1 time was enough. In the second test case, the Agent can use the first weapon first, and then the second one. After this, the health of enemy will drop to 6- 4- 2 = 0 , meaning he would be killed after using weapons 2 times. In the third test case, the Agent can use the weapons in order ( third, first, third) , decreasing the health value of enemy to 11 - 7 - 2 - 7 = - 5 after using the weapons 3 times. Note that we can' t kill the enemy by using the third weapon twice, as even though 11- 7- 7< 0 , it' s not allowed to use the same weapon twice in a row.",
    "topics": [
      "binary search",
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Two Arrays",
    "url": "https://codeforces.com/problemset/problem/1584/C",
    "history": "You are given two arrays of integers a_ 1, a_ 2, . . . , a_ n and b_ 1, b_ 2, . . . , b_ n . Let' s define a transformation of the array a : Choose any non- negative integer k such that 0 \u2264 k \u2264 n . Choose k distinct array indices 1 \u2264 i_ 1 < i_ 2 < . . . < i_ k \u2264 n . Add 1 to each of a_ i_ 1, a_ i_ 2, . . . , a_ i_ k , all other elements of array a remain unchanged. Permute the elements of array a in any order. Is it possible to perform some transformation of the array a exactly once, so that the resulting array is equal to b ?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. Descriptions of test cases follow. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 100 ) \u2014 the size of arrays a and b . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( - 100 \u2264 a_ i \u2264 100 ) . The third line of each test case contains n integers b_ 1, b_ 2, . . . , b_ n ( - 100 \u2264 b_ i \u2264 100 ) .",
    "output": "For each test case, print \" YES\" ( without quotes) if it is possible to perform a transformation of the array a , so that the resulting array is equal to b . Print \" NO\" ( without quotes) otherwise. You can print each letter in any case ( upper or lower) .",
    "note": "In the first test case, we can make the following transformation: Choose k = 2 . Choose i_ 1 = 1 , i_ 2 = 2 . Add 1 to a_ 1 and a_ 2 . The resulting array is [ 0, 2, 0] . Swap the elements on the second and third positions. In the second test case there is no suitable transformation. In the third test case we choose k = 0 and do not change the order of elements.",
    "topics": [
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Omkar and Tours",
    "url": "https://codeforces.com/problemset/problem/1583/H",
    "history": "Omkar is hosting tours of his country, Omkarland! There are n cities in Omkarland, and, rather curiously, there are exactly n- 1 bidirectional roads connecting the cities to each other. It is guaranteed that you can reach any city from any other city through the road network. Every city has an enjoyment value e . Each road has a capacity c , denoting the maximum number of vehicles that can be on it, and an associated toll t . However, the toll system in Omkarland has an interesting quirk: if a vehicle travels on multiple roads on a single journey, they pay only the highest toll of any single road on which they traveled. ( In other words, they pay max t over all the roads on which they traveled. ) If a vehicle traverses no roads, they pay 0 toll. Omkar has decided to host q tour groups. Each tour group consists of v vehicles starting at city x . ( Keep in mind that a tour group with v vehicles can travel only on roads with capacity \u2265 v . ) Being the tour organizer, Omkar wants his groups to have as much fun as they possibly can, but also must reimburse his groups for the tolls that they have to pay. Thus, for each tour group, Omkar wants to know two things: first, what is the enjoyment value of the city y with maximum enjoyment value that the tour group can reach from their starting city, and second, how much per vehicle will Omkar have to pay to reimburse the entire group for their trip from x to y ? ( This trip from x to y will always be on the shortest path from x to y . ) In the case that there are multiple reachable cities with the maximum enjoyment value, Omkar will let his tour group choose which one they want to go to. Therefore, to prepare for all possible scenarios, he wants to know the amount of money per vehicle that he needs to guarantee that he can reimburse the group regardless of which city they choose.",
    "input": "The first line contains two integers n and q ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) , representing the number of cities and the number of groups, respectively. The next line contains n integers e_ 1, e_ 2, . . . , e_ n ( 1 \u2264 e_ i \u2264 10^ 9 ) , where e_ i represents the enjoyment value for city i . The next n- 1 lines each contain four integers a , b , c , and t ( 1 \u2264 a, b \u2264 n , 1 \u2264 c \u2264 10^ 9 , 1 \u2264 t \u2264 10^ 9 ) , representing an road between city a and city b with capacity c and toll t . The next q lines each contain two integers v and x ( 1 \u2264 v \u2264 10^ 9 , 1 \u2264 x \u2264 n ) , representing the number of vehicles in the tour group and the starting city, respectively.",
    "output": "Output q lines. The i - th line should contain two integers: the highest possible enjoyment value of a city reachable by the i - th tour group, and the amount of money per vehicle Omkar needs to guarantee that he can reimburse the i - th tour group.",
    "note": "A map of the first sample is shown below. For the nodes, unbolded numbers represent indices and bolded numbers represent enjoyment values. For the edges, unbolded numbers represent capacities and bolded numbers represent tolls. For the first query, a tour group of size 1 starting at city 3 can reach cities 1 , 2 , 3 , 4 , and 5 . Thus, the largest enjoyment value that they can reach is 3 . If the tour group chooses to go to city 4 , Omkar will have to pay 8 per vehicle, which is the maximum. For the second query, a tour group of size 9 starting at city 5 can reach only city 5 . Thus, the largest reachable enjoyment value is still 3 , and Omkar will pay 0 per vehicle. For the third query, a tour group of size 6 starting at city 2 can reach cities 2 and 4 . The largest reachable enjoyment value is again 3 . If the tour group chooses to go to city 4 , Omkar will have to pay 2 per vehicle, which is the maximum. A map of the second sample is shown below: For the first query, a tour group of size 5 starting at city 1 can only reach city 1 . Thus, their maximum enjoyment value is 1 and the cost Omkar will have to pay is 0 per vehicle. For the second query, a tour group of size 4 starting at city 1 can reach cities 1 and 2 . Thus, their maximum enjoyment value is 2 and Omkar will pay 1 per vehicle. For the third query, a tour group of size 3 starting at city 1 can reach cities 1 , 2 , and 3 . Thus, their maximum enjoyment value is 3 and Omkar will pay 1 per vehicle. For the fourth query, a tour group of size 2 starting at city 1 can reach cities 1 , 2 , 3 and 4 . Thus, their maximum enjoyment value is 4 and Omkar will pay 1 per vehicle. For the fifth query, a tour group of size 1 starting at city 1 can reach cities 1 , 2 , 3 , 4 , and 5 . Thus, their maximum enjoyment value is 5 and Omkar will pay 1 per vehicle.",
    "topics": [
      "data structures",
      "divide and conquer",
      "sortings",
      "trees"
    ]
  },
  {
    "title": "Shifting Sort",
    "url": "https://codeforces.com/problemset/problem/1579/B",
    "history": "The new generation external memory contains an array of integers a[ 1 . . . n] = [ a_ 1, a_ 2, . . . , a_ n] . This type of memory does not support changing the value of an arbitrary element. Instead, it allows you to cut out any segment of the given array, cyclically shift ( rotate) it by any offset and insert it back into the same place. Technically, each cyclic shift consists of two consecutive actions: You may select arbitrary indices l and r ( 1 \u2264 l < r \u2264 n ) as the boundaries of the segment. Then you replace the segment a[ l . . . r] with it' s cyclic shift to the left by an arbitrary offset d . The concept of a cyclic shift can be also explained by following relations: the sequence [ 1, 4, 1, 3] is a cyclic shift of the sequence [ 3, 1, 4, 1] to the left by the offset 1 and the sequence [ 4, 1, 3, 1] is a cyclic shift of the sequence [ 3, 1, 4, 1] to the left by the offset 2 . For example, if a = [ 1, 3, 2, 8, 5] , then choosing l = 2 , r = 4 and d = 2 yields a segment a[ 2 . . . 4] = [ 3, 2, 8] . This segment is then shifted by the offset d = 2 to the left, and you get a segment [ 8, 3, 2] which then takes the place of of the original elements of the segment. In the end you get a = [ 1, 8, 3, 2, 5] . Sort the given array a using no more than n cyclic shifts of any of its segments. Note that you don' t need to minimize the number of cyclic shifts. Any method that requires n or less cyclic shifts will be accepted.",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The next 2t lines contain the descriptions of the test cases. The first line of each test case description contains an integer n ( 2 \u2264 n \u2264 50 ) \u2014 the length of the array. The second line consists of space- separated elements of the array a_ i ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) . Elements of array a may repeat and don' t have to be unique.",
    "output": "Print t answers to all input test cases. The first line of the answer of each test case should contain an integer k ( 0 \u2264 k \u2264 n ) \u2014 the number of actions to sort the array. The next k lines should contain descriptions of the actions formatted as \" l r d \" ( without quotes) where l and r ( 1 \u2264 l < r \u2264 n ) are the boundaries of the segment being shifted, while d ( 1 \u2264 d \u2264 r - l ) is the offset value. Please remember that only the cyclic shifts to the left are considered so the chosen segment will be shifted by the offset d to the to the left. Note that you are not required to find the minimum number of cyclic shifts needed for sorting. Any sorting method where the number of shifts does not exceed n will be accepted. If the given array a is already sorted, one of the possible answers is k = 0 and an empty sequence of cyclic shifts. If there are several possible answers, you may print any of them.",
    "note": "Explanation of the fourth data set in the example: The segment a[ 2 . . . 4] is selected and is shifted to the left by 2 : [ 2, 5, 1, 4, 3] \u27f6 [ 2, 4, 5, 1, 3] The segment a[ 1 . . . 5] is then selected and is shifted to the left by 3 : [ 2, 4, 5, 1, 3] \u27f6 [ 1, 3, 2, 4, 5] After that the segment a[ 1 . . . 2] is selected and is shifted to the left by 1 : [ 1, 3, 2, 4, 5] \u27f6 [ 3, 1, 2, 4, 5] And in the end the segment a[ 1 . . . 3] is selected and is shifted to the left by 1 : [ 3, 1, 2, 4, 5] \u27f6 [ 1, 2, 3, 4, 5]",
    "topics": [
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Longest Array Deconstruction",
    "url": "https://codeforces.com/problemset/problem/1575/L",
    "history": "Mr. Chanek gives you a sequence a indexed from 1 to n . Define f( a) as the number of indices where a_ i = i . You can pick an element from the current sequence and remove it, then concatenate the remaining elements together. For example, if you remove the 3 - rd element from the sequence [ 4, 2, 3, 1] , the resulting sequence will be [ 4, 2, 1] . You want to remove some elements from a in order to maximize f( a) , using zero or more operations. Find the largest possible f( a) .",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the initial length of the sequence. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 2 \u00b7 10^ 5 ) \u2014 the initial sequence a .",
    "output": "Output an integer denoting the largest f( a) that can be obtained by doing zero or more operations.",
    "note": "In the first example, f( A) = 3 by doing the following operations. [ 2, 1, 4, 2, 5, 3, 7] \u2192 [ 2, 1, 2, 5, 3, 7] \u2192 [ 1, 2, 5, 3, 7] \u2192 [ 1, 2, 5, 3] \u2192 [ 1, 2, 3] In the second example, f( A) = 2 and no additional operation is needed.",
    "topics": [
      "data structures",
      "divide and conquer",
      "dp",
      "sortings"
    ]
  },
  {
    "title": "Another Sorting Problem",
    "url": "https://codeforces.com/problemset/problem/1575/A",
    "history": "Andi and Budi were given an assignment to tidy up their bookshelf of n books. Each book is represented by the book title \u2014 a string s_ i numbered from 1 to n , each with length m . Andi really wants to sort the book lexicographically ascending, while Budi wants to sort it lexicographically descending. Settling their fight, they decided to combine their idea and sort it asc- desc- endingly, where the odd- indexed characters will be compared ascendingly, and the even- indexed characters will be compared descendingly. A string a occurs before a string b in asc- desc- ending order if and only if in the first position where a and b differ, the following holds: if it is an odd position, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b ; if it is an even position, the string a has a letter that appears later in the alphabet than the corresponding letter in b .",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u00b7 m \u2264 10^ 6 ) . The i - th of the next n lines contains a string s_ i consisting of m uppercase Latin letters \u2014 the book title. The strings are pairwise distinct.",
    "output": "Output n integers \u2014 the indices of the strings after they are sorted asc- desc- endingly.",
    "note": "The following illustrates the first example.",
    "topics": [
      "data structures",
      "sortings",
      "strings"
    ]
  },
  {
    "title": "Slay the Dragon",
    "url": "https://codeforces.com/problemset/problem/1574/C",
    "history": "Recently, Petya learned about a new game \" Slay the Dragon\" . As the name suggests, the player will have to fight with dragons. To defeat a dragon, you have to kill it and defend your castle. To do this, the player has a squad of n heroes, the strength of the i - th hero is equal to a_ i . According to the rules of the game, exactly one hero should go kill the dragon, all the others will defend the castle. If the dragon' s defense is equal to x , then you have to send a hero with a strength of at least x to kill it. If the dragon' s attack power is y , then the total strength of the heroes defending the castle should be at least y . The player can increase the strength of any hero by 1 for one gold coin. This operation can be done any number of times. There are m dragons in the game, the i - th of them has defense equal to x_ i and attack power equal to y_ i . Petya was wondering what is the minimum number of coins he needs to spend to defeat the i - th dragon. Note that the task is solved independently for each dragon ( improvements are not saved) .",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 number of heroes. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 12 ) , where a_ i is the strength of the i - th hero. The third line contains a single integer m ( 1 \u2264 m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of dragons. The next m lines contain two integers each, x_ i and y_ i ( 1 \u2264 x_ i \u2264 10^ 12; 1 \u2264 y_ i \u2264 10^ 18 ) \u2014 defense and attack power of the i - th dragon.",
    "output": "Print m lines, i - th of which contains a single integer \u2014 the minimum number of coins that should be spent to defeat the i - th dragon.",
    "note": "To defeat the first dragon, you can increase the strength of the third hero by 1 , then the strength of the heroes will be equal to [ 3, 6, 3, 3] . To kill the dragon, you can choose the first hero. To defeat the second dragon, you can increase the forces of the second and third heroes by 1 , then the strength of the heroes will be equal to [ 3, 7, 3, 3] . To kill the dragon, you can choose a second hero. To defeat the third dragon, you can increase the strength of all the heroes by 1 , then the strength of the heroes will be equal to [ 4, 7, 3, 4] . To kill the dragon, you can choose a fourth hero. To defeat the fourth dragon, you don' t need to improve the heroes and choose a third hero to kill the dragon. To defeat the fifth dragon, you can increase the strength of the second hero by 2 , then the strength of the heroes will be equal to [ 3, 8, 2, 3] . To kill the dragon, you can choose a second hero.",
    "topics": [
      "binary search",
      "greedy",
      "sortings",
      "ternary search"
    ]
  },
  {
    "title": "Swaps",
    "url": "https://codeforces.com/problemset/problem/1573/B",
    "history": "You are given two arrays a and b of length n . Array a contains each odd integer from 1 to 2n in an arbitrary order, and array b contains each even integer from 1 to 2n in an arbitrary order. You can perform the following operation on those arrays: choose one of the two arrays pick an index i from 1 to n- 1 swap the i - th and the ( i+ 1) - th elements of the chosen array Compute the minimum number of operations needed to make array a lexicographically smaller than array b . For two different arrays x and y of the same length n , we say that x is lexicographically smaller than y if in the first position where x and y differ, the array x has a smaller element than the corresponding element in y .",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of the arrays. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 2n , all a_ i are odd and pairwise distinct) \u2014 array a . The third line of each test case contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 2n , all b_ i are even and pairwise distinct) \u2014 array b . It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, print one integer: the minimum number of operations needed to make array a lexicographically smaller than array b . We can show that an answer always exists.",
    "note": "In the first example, the array a is already lexicographically smaller than array b , so no operations are required. In the second example, we can swap 5 and 3 and then swap 2 and 4 , which results in [ 3, 5, 1] and [ 4, 2, 6] . Another correct way is to swap 3 and 1 and then swap 5 and 1 , which results in [ 1, 5, 3] and [ 2, 4, 6] . Yet another correct way is to swap 4 and 6 and then swap 2 and 6 , which results in [ 5, 3, 1] and [ 6, 2, 4] .",
    "topics": [
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Book",
    "url": "https://codeforces.com/problemset/problem/1572/A",
    "history": "You are given a book with n chapters. Each chapter has a specified list of other chapters that need to be understood in order to understand this chapter. To understand a chapter, you must read it after you understand every chapter on its required list. Currently you don' t understand any of the chapters. You are going to read the book from the beginning till the end repeatedly until you understand the whole book. Note that if you read a chapter at a moment when you don' t understand some of the required chapters, you don' t understand this chapter. Determine how many times you will read the book to understand every chapter, or determine that you will never understand every chapter no matter how many times you read the book.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 2\u00b710^ 4 ) . The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 2\u00b710^ 5 ) \u2014 number of chapters. Then n lines follow. The i - th line begins with an integer k_ i ( 0 \u2264 k_ i \u2264 n- 1 ) \u2014 number of chapters required to understand the i - th chapter. Then k_ i integers a_ i, 1, a_ i, 2, . . . , a_ i, k_ i ( 1 \u2264 a_ i, j\u2264 n, a_ i, j i, a_ i, j a_ i, l for j l ) follow \u2014 the chapters required to understand the i - th chapter. It is guaranteed that the sum of n and sum of k_ i over all testcases do not exceed 2\u00b710^ 5 .",
    "output": "For each test case, if the entire book can be understood, print how many times you will read it, otherwise print - 1 .",
    "note": "In the first example, we will understand chapters { 2, 4} in the first reading and chapters { 1, 3} in the second reading of the book. In the second example, every chapter requires the understanding of some other chapter, so it is impossible to understand the book. In the third example, every chapter requires only chapters that appear earlier in the book, so we can understand everything in one go. In the fourth example, we will understand chapters { 2, 3, 4} in the first reading and chapter 1 in the second reading of the book. In the fifth example, we will understand one chapter in every reading from 5 to 1 .",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "dp",
      "graphs",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Inconvenient Pairs",
    "url": "https://codeforces.com/problemset/problem/1569/D",
    "history": "There is a city that can be represented as a square grid with corner points in ( 0, 0) and ( 10^ 6, 10^ 6) . The city has n vertical and m horizontal streets that goes across the whole city, i. e. the i - th vertical streets goes from ( x_ i, 0) to ( x_ i, 10^ 6) and the j - th horizontal street goes from ( 0, y_ j) to ( 10^ 6, y_ j) . All streets are bidirectional. Borders of the city are streets as well. There are k persons staying on the streets: the p - th person at point ( x_ p, y_ p) ( so either x_ p equal to some x_ i or y_ p equal to some y_ j , or both) . Let' s say that a pair of persons form an inconvenient pair if the shortest path from one person to another going only by streets is strictly greater than the Manhattan distance between them. Calculate the number of inconvenient pairs of persons ( pairs ( x, y) and ( y, x) are the same pair) . Let' s recall that Manhattan distance between points ( x_ 1, y_ 1) and ( x_ 2, y_ 2) is | x_ 1 - x_ 2| + | y_ 1 - y_ 2| .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains three integers n , m and k ( 2 \u2264 n, m \u2264 2 \u00b7 10^ 5 ; 2 \u2264 k \u2264 3 \u00b7 10^ 5 ) \u2014 the number of vertical and horizontal streets and the number of persons. The second line of each test case contains n integers x_ 1, x_ 2, . . . , x_ n ( 0 = x_ 1 < x_ 2 < . . . < x_ n - 1 < x_ n = 10^ 6 ) \u2014 the x - coordinates of vertical streets. The third line contains m integers y_ 1, y_ 2, . . . , y_ m ( 0 = y_ 1 < y_ 2 < . . . < y_ m - 1 < y_ m = 10^ 6 ) \u2014 the y - coordinates of horizontal streets. Next k lines contains description of people. The p - th line contains two integers x_ p and y_ p ( 0 \u2264 x_ p, y_ p \u2264 10^ 6 ; x_ p \u2208{ x_ 1, . . . , x_ n} or y_ p \u2208{ y_ 1, . . . , y_ m} ) \u2014 the coordinates of the p - th person. All points are distinct. It guaranteed that sum of n doesn' t exceed 2 \u00b7 10^ 5 , sum of m doesn' t exceed 2 \u00b7 10^ 5 and sum of k doesn' t exceed 3 \u00b7 10^ 5 .",
    "output": "For each test case, print the number of inconvenient pairs.",
    "note": "The second test case is pictured below: For example, points 3 and 4 form an inconvenient pair, since the shortest path between them ( shown red and equal to 7 ) is greater than its Manhattan distance ( equal to 5 ) . Points 3 and 5 also form an inconvenient pair: the shortest path equal to 1000001 ( shown green) is greater than the Manhattan distance equal to 999999 . But points 5 and 9 don' t form an inconvenient pair, since the shortest path ( shown purple) is equal to its Manhattan distance.",
    "topics": [
      "binary search",
      "data structures",
      "implementation",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Points Movement",
    "url": "https://codeforces.com/problemset/problem/1566/F",
    "history": "There are n points and m segments on the coordinate line. The initial coordinate of the i - th point is a_ i . The endpoints of the j - th segment are l_ j and r_ j \u2014 left and right endpoints, respectively. You can move the points. In one move you can move any point from its current coordinate x to the coordinate x - 1 or the coordinate x + 1 . The cost of this move is 1 . You should move the points in such a way that each segment is visited by at least one point. A point visits the segment [ l, r] if there is a moment when its coordinate was on the segment [ l, r] ( including endpoints) . You should find the minimal possible total cost of all moves such that all segments are visited.",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains two integers n and m ( 1 \u2264 n, m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of points and segments respectively. The next line contains n distinct integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) \u2014 the initial coordinates of the points. Each of the next m lines contains two integers l_ j , r_ j ( - 10^ 9 \u2264 l_ j \u2264 r_ j \u2264 10^ 9 ) \u2014 the left and the right endpoints of the j - th segment. It' s guaranteed that the sum of n and the sum of m over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case print a single integer \u2014 the minimal total cost of all moves such that all segments are visited.",
    "note": "In the first test case the points can be moved as follows: Move the second point from the coordinate 6 to the coordinate 5 . Move the third point from the coordinate 14 to the coordinate 13 . Move the fourth point from the coordinate 18 to the coordinate 17 . Move the third point from the coordinate 13 to the coordinate 12 . Move the fourth point from the coordinate 17 to the coordinate 16 . The total cost of moves is 5 . It is easy to see, that all segments are visited by these movements. For example, the tenth segment ( [ 7, 13] ) is visited after the second move by the third point. Here is the image that describes the first test case:",
    "topics": [
      "data structures",
      "dp",
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Seating Arrangements (hard version) ",
    "url": "https://codeforces.com/problemset/problem/1566/D2",
    "history": "It is the hard version of the problem. The only difference is that in this version 1 \u2264 n \u2264 300 . In the cinema seats can be represented as the table with n rows and m columns. The rows are numbered with integers from 1 to n . The seats in each row are numbered with consecutive integers from left to right: in the k - th row from m ( k - 1) + 1 to m k for all rows 1 \u2264 k \u2264 n . 1 2 \u22ef m - 1 m m + 1 m + 2 \u22ef 2 m - 1 2 m 2m + 1 2m + 2 \u22ef 3 m - 1 3 m \u22ee \u22ee \u22f1 \u22ee \u22ee m ( n - 1) + 1 m ( n - 1) + 2 \u22ef n m - 1 n m The table with seats indices There are nm people who want to go to the cinema to watch a new film. They are numbered with integers from 1 to nm . You should give exactly one seat to each person. It is known, that in this cinema as lower seat index you have as better you can see everything happening on the screen. i - th person has the level of sight a_ i . Let' s define s_ i as the seat index, that will be given to i - th person. You want to give better places for people with lower sight levels, so for any two people i , j such that a_ i < a_ j it should be satisfied that s_ i < s_ j . After you will give seats to all people they will start coming to their seats. In the order from 1 to nm , each person will enter the hall and sit in their seat. To get to their place, the person will go to their seat' s row and start moving from the first seat in this row to theirs from left to right. While moving some places will be free, some will be occupied with people already seated. The inconvenience of the person is equal to the number of occupied seats he or she will go through. Let' s consider an example: m = 5 , the person has the seat 4 in the first row, the seats 1 , 3 , 5 in the first row are already occupied, the seats 2 and 4 are free. The inconvenience of this person will be 2 , because he will go through occupied seats 1 and 3 . Find the minimal total inconvenience ( the sum of inconveniences of all people) , that is possible to have by giving places for all people ( all conditions should be satisfied) .",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains two integers n and m ( 1 \u2264 n, m \u2264 300 ) \u2014 the number of rows and places in each row respectively. The second line of each test case contains n \u00b7 m integers a_ 1, a_ 2, . . . , a_ n \u00b7 m ( 1 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is the sight level of i - th person. It' s guaranteed that the sum of n \u00b7 m over all test cases does not exceed 10^ 5 .",
    "output": "For each test case print a single integer \u2014 the minimal total inconvenience that can be achieved.",
    "note": "In the first test case, there is a single way to give seats: the first person sits in the first place and the second person \u2014 in the second. The total inconvenience is 1 . In the second test case the optimal seating looks like this: In the third test case the optimal seating looks like this: The number in a cell is the person' s index that sits on this place.",
    "topics": [
      "data structures",
      "greedy",
      "implementation",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Seating Arrangements (easy version) ",
    "url": "https://codeforces.com/problemset/problem/1566/D1",
    "history": "It is the easy version of the problem. The only difference is that in this version n = 1 . In the cinema seats can be represented as the table with n rows and m columns. The rows are numbered with integers from 1 to n . The seats in each row are numbered with consecutive integers from left to right: in the k - th row from m ( k - 1) + 1 to m k for all rows 1 \u2264 k \u2264 n . 1 2 \u22ef m - 1 m m + 1 m + 2 \u22ef 2 m - 1 2 m 2m + 1 2m + 2 \u22ef 3 m - 1 3 m \u22ee \u22ee \u22f1 \u22ee \u22ee m ( n - 1) + 1 m ( n - 1) + 2 \u22ef n m - 1 n m The table with seats indices There are nm people who want to go to the cinema to watch a new film. They are numbered with integers from 1 to nm . You should give exactly one seat to each person. It is known, that in this cinema as lower seat index you have as better you can see everything happening on the screen. i - th person has the level of sight a_ i . Let' s define s_ i as the seat index, that will be given to i - th person. You want to give better places for people with lower sight levels, so for any two people i , j such that a_ i < a_ j it should be satisfied that s_ i < s_ j . After you will give seats to all people they will start coming to their seats. In the order from 1 to nm , each person will enter the hall and sit in their seat. To get to their place, the person will go to their seat' s row and start moving from the first seat in this row to theirs from left to right. While moving some places will be free, some will be occupied with people already seated. The inconvenience of the person is equal to the number of occupied seats he or she will go through. Let' s consider an example: m = 5 , the person has the seat 4 in the first row, the seats 1 , 3 , 5 in the first row are already occupied, the seats 2 and 4 are free. The inconvenience of this person will be 2 , because he will go through occupied seats 1 and 3 . Find the minimal total inconvenience ( the sum of inconveniences of all people) , that is possible to have by giving places for all people ( all conditions should be satisfied) .",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains two integers n and m ( n = 1 , 1 \u2264 m \u2264 300 ) \u2014 the number of rows and places in each row respectively. The second line of each test case contains n \u00b7 m integers a_ 1, a_ 2, . . . , a_ n \u00b7 m ( 1 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is the sight level of i - th person. It' s guaranteed that the sum of n \u00b7 m over all test cases does not exceed 10^ 5 .",
    "output": "For each test case print a single integer \u2014 the minimal total inconvenience that can be achieved.",
    "note": "In the first test case, there is a single way to arrange people, because all sight levels are distinct. The first person will sit on the first seat, the second person will sit on the second place, the third person will sit on the third place. So inconvenience of the first person will be 0 , inconvenience of the second person will be 1 and inconvenience of the third person will be 2 . The total inconvenience is 0 + 1 + 2 = 3 . In the second test case, people should sit as follows: s_ 1 = 2 , s_ 2 = 1 , s_ 3 = 5 , s_ 4 = 4 , s_ 5 = 3 . The total inconvenience will be 6 .",
    "topics": [
      "data structures",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Deep Down Below",
    "url": "https://codeforces.com/problemset/problem/1561/C",
    "history": "In a certain video game, the player controls a hero characterized by a single integer value: power. The hero will have to beat monsters that are also characterized by a single integer value: armor. On the current level, the hero is facing n caves. To pass the level, the hero must enter all the caves in some order, each cave exactly once, and exit every cave safe and sound. When the hero enters cave i , he will have to fight k_ i monsters in a row: first a monster with armor a_ i, 1 , then a monster with armor a_ i, 2 and so on, finally, a monster with armor a_ i, k_ i . The hero can beat a monster if and only if the hero' s power is strictly greater than the monster' s armor. If the hero can' t beat the monster he' s fighting, the game ends and the player loses. Note that once the hero enters a cave, he can' t exit it before he fights all the monsters in it, strictly in the given order. Each time the hero beats a monster, the hero' s power increases by 1 . Find the smallest possible power the hero must start the level with to be able to enter all the caves in some order and beat all the monsters.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 5 ) . Description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of caves. The i - th of the next n lines contains an integer k_ i ( 1 \u2264 k_ i \u2264 10^ 5 ) \u2014 the number of monsters in the i - th cave, followed by k_ i integers a_ i, 1, a_ i, 2, . . . , a_ i, k_ i ( 1 \u2264 a_ i, j\u2264 10^ 9 ) \u2014 armor levels of the monsters in cave i in order the hero has to fight them. It is guaranteed that the sum of k_ i over all test cases does not exceed 10^ 5 .",
    "output": "For each test case print a single integer \u2014 the smallest possible power the hero must start the level with to be able to enter all the caves in some order and beat all the monsters.",
    "note": "In the first test case, the hero has to beat a single monster with armor 42 , it' s enough to have power 43 to achieve that. In the second test case, the hero can pass the level with initial power 13 as follows: enter cave 2 : beat a monster with armor 12 , power increases to 14 ; beat a monster with armor 11 , power increases to 15 ; enter cave 1 : beat a monster with armor 10 , power increases to 16 ; beat a monster with armor 15 , power increases to 17 ; beat a monster with armor 8 , power increases to 18 .",
    "topics": [
      "binary search",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Simply Strange Sort",
    "url": "https://codeforces.com/problemset/problem/1561/A",
    "history": "You have a permutation: an array a = [ a_ 1, a_ 2, . . . , a_ n] of distinct integers from 1 to n . The length of the permutation n is odd. Consider the following algorithm of sorting the permutation in increasing order. A helper procedure of the algorithm, f( i) , takes a single argument i ( 1 \u2264 i \u2264 n- 1 ) and does the following. If a_ i > a_ i+ 1 , the values of a_ i and a_ i+ 1 are exchanged. Otherwise, the permutation doesn' t change. The algorithm consists of iterations, numbered with consecutive integers starting with 1 . On the i - th iteration, the algorithm does the following: if i is odd, call f( 1) , f( 3) , . . . , f( n - 2) ; if i is even, call f( 2) , f( 4) , . . . , f( n - 1) . It can be proven that after a finite number of iterations the permutation will be sorted in increasing order. After how many iterations will this happen for the first time?",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 100 ) . Description of the test cases follows. The first line of each test case contains a single integer n ( 3 \u2264 n \u2264 999 ; n is odd) \u2014 the length of the permutation. The second line contains n distinct integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 the permutation itself. It is guaranteed that the sum of n over all test cases does not exceed 999 .",
    "output": "For each test case print the number of iterations after which the permutation will become sorted in increasing order for the first time. If the given permutation is already sorted, print 0 .",
    "note": "In the first test case, the permutation will be changing as follows: after the 1 - st iteration: [ 2, 3, 1] ; after the 2 - nd iteration: [ 2, 1, 3] ; after the 3 - rd iteration: [ 1, 2, 3] . In the second test case, the permutation will be changing as follows: after the 1 - st iteration: [ 4, 5, 1, 7, 2, 3, 6] ; after the 2 - nd iteration: [ 4, 1, 5, 2, 7, 3, 6] ; after the 3 - rd iteration: [ 1, 4, 2, 5, 3, 7, 6] ; after the 4 - th iteration: [ 1, 2, 4, 3, 5, 6, 7] ; after the 5 - th iteration: [ 1, 2, 3, 4, 5, 6, 7] . In the third test case, the permutation is already sorted and the answer is 0 .",
    "topics": [
      "brute force",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Polycarp and String Transformation",
    "url": "https://codeforces.com/problemset/problem/1560/E",
    "history": "Polycarp has a string s . Polycarp performs the following actions until the string s is empty ( t is initially an empty string) : he adds to the right to the string t the string s , i. e. he does t = t + s , where t + s is a concatenation of the strings t and s ; he selects an arbitrary letter of s and removes from s all its occurrences ( the selected letter must occur in the string s at the moment of performing this action) . Polycarp performs this sequence of actions strictly in this order. Note that after Polycarp finishes the actions, the string s will be empty and the string t will be equal to some value ( that is undefined and depends on the order of removing) . E. g. consider s = \" abacaba\" so the actions may be performed as follows: t = \" abacaba\" , the letter ' b' is selected, then s = \" aacaa\" ; t = \" abacabaaacaa\" , the letter ' a' is selected, then s = \" c\" ; t = \" abacabaaacaac\" , the letter ' c' is selected, then s = \" \" ( the empty string) . You need to restore the initial value of the string s using only the final value of t and find the order of removing letters from s .",
    "input": "The first line contains one integer T ( 1 \u2264 T \u2264 10^ 4 ) \u2014 the number of test cases. Then T test cases follow. Each test case contains one string t consisting of lowercase letters of the Latin alphabet. The length of t doesn' t exceed 5 \u00b7 10^ 5 . The sum of lengths of all strings t in the test cases doesn' t exceed 5 \u00b7 10^ 5 .",
    "output": "For each test case output in a separate line: - 1 , if the answer doesn' t exist; two strings separated by spaces. The first one must contain a possible initial value of s . The second one must contain a sequence of letters \u2014 it' s in what order one needs to remove letters from s to make the string t . E. g. if the string \" bac\" is outputted, then, first, all occurrences of the letter ' b' were deleted, then all occurrences of ' a' , and then, finally, all occurrences of ' c' . If there are multiple solutions, print any one.",
    "note": "The first test case is considered in the statement.",
    "topics": [
      "binary search",
      "implementation",
      "sortings",
      "strings"
    ]
  },
  {
    "title": "Strange Sort",
    "url": "https://codeforces.com/problemset/problem/1558/F",
    "history": "You have a permutation: an array a = [ a_ 1, a_ 2, . . . , a_ n] of distinct integers from 1 to n . The length of the permutation n is odd. Consider the following algorithm of sorting the permutation in increasing order. A helper procedure of the algorithm, f( i) , takes a single argument i ( 1 \u2264 i \u2264 n- 1 ) and does the following. If a_ i > a_ i+ 1 , the values of a_ i and a_ i+ 1 are exchanged. Otherwise, the permutation doesn' t change. The algorithm consists of iterations, numbered with consecutive integers starting with 1 . On the i - th iteration, the algorithm does the following: if i is odd, call f( 1) , f( 3) , . . . , f( n - 2) ; if i is even, call f( 2) , f( 4) , . . . , f( n - 1) . It can be proven that after a finite number of iterations the permutation will be sorted in increasing order. After how many iterations will this happen for the first time?",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . Description of the test cases follows. The first line of each test case contains a single integer n ( 3 \u2264 n \u2264 2 \u00b7 10^ 5 - 1 ; n is odd) \u2014 the length of the permutation. The second line contains n distinct integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 the permutation itself. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 - 1 .",
    "output": "For each test case print the number of iterations after which the permutation will become sorted in increasing order for the first time. If the given permutation is already sorted, print 0 .",
    "note": "In the first test case, the permutation will be changing as follows: after the 1 - st iteration: [ 2, 3, 1] ; after the 2 - nd iteration: [ 2, 1, 3] ; after the 3 - rd iteration: [ 1, 2, 3] . In the second test case, the permutation will be changing as follows: after the 1 - st iteration: [ 4, 5, 1, 7, 2, 3, 6] ; after the 2 - nd iteration: [ 4, 1, 5, 2, 7, 3, 6] ; after the 3 - rd iteration: [ 1, 4, 2, 5, 3, 7, 6] ; after the 4 - th iteration: [ 1, 2, 4, 3, 5, 6, 7] ; after the 5 - th iteration: [ 1, 2, 3, 4, 5, 6, 7] . In the third test case, the permutation is already sorted and the answer is 0 .",
    "topics": [
      "data structures",
      "sortings"
    ]
  },
  {
    "title": "Moamen and k-subarrays",
    "url": "https://codeforces.com/problemset/problem/1557/B",
    "history": "Moamen has an array of n distinct integers. He wants to sort that array in non- decreasing order by doing the following operations in order exactly once: Split the array into exactly k non- empty subarrays such that each element belongs to exactly one subarray. Reorder these subarrays arbitrary. Merge the subarrays in their new order. A sequence a is a subarray of a sequence b if a can be obtained from b by deletion of several ( possibly, zero or all) elements from the beginning and several ( possibly, zero or all) elements from the end. Can you tell Moamen if there is a way to sort the array in non- decreasing order using the operations written above?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 3 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 10^ 5 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 | a_ i| \u2264 10^ 9 ) . It is guaranteed that all numbers are distinct. It is guaranteed that the sum of n over all test cases does not exceed 3\u00b710^ 5 .",
    "output": "For each test case, you should output a single string. If Moamen can sort the array in non- decreasing order, output \" YES\" ( without quotes) . Otherwise, output \" NO\" ( without quotes) . You can print each letter of \" YES\" and \" NO\" in any case ( upper or lower) .",
    "note": "In the first test case, a = [ 6, 3, 4, 2, 1] , and k = 4 , so we can do the operations as follows: Split a into { [ 6] , [ 3, 4] , [ 2] , [ 1] } . Reorder them: { [ 1] , [ 2] , [ 3, 4] , [ 6] } . Merge them: [ 1, 2, 3, 4, 6] , so now the array is sorted. In the second test case, there is no way to sort the array by splitting it into only 2 subarrays. As an example, if we split it into { [ 1, - 4] , [ 0, - 2] } , we can reorder them into { [ 1, - 4] , [ 0, - 2] } or { [ 0, - 2] , [ 1, - 4] } . However, after merging the subarrays, it is impossible to get a sorted array.",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Ezzat and Two Subsequences",
    "url": "https://codeforces.com/problemset/problem/1557/A",
    "history": "Ezzat has an array of n integers ( maybe negative) . He wants to split it into two non- empty subsequences a and b , such that every element from the array belongs to exactly one subsequence, and the value of f( a) + f( b) is the maximum possible value, where f( x) is the average of the subsequence x . A sequence x is a subsequence of a sequence y if x can be obtained from y by deletion of several ( possibly, zero or all) elements. The average of a subsequence is the sum of the numbers of this subsequence divided by the size of the subsequence. For example, the average of [ 1, 5, 6] is ( 1+ 5+ 6) / 3 = 12/ 3 = 4 , so f( [ 1, 5, 6] ) = 4 .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 3 ) \u2014 the number of test cases. Each test case consists of two lines. The first line contains a single integer n ( 2 \u2264 n \u2264 10^ 5 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n over all test cases does not exceed 3\u00b710^ 5 .",
    "output": "For each test case, print a single value \u2014 the maximum value that Ezzat can achieve. Your answer is considered correct if its absolute or relative error does not exceed 10^ - 6 . Formally, let your answer be a , and the jury' s answer be b . Your answer is accepted if and only if | a - b| / max( 1, | b| ) \u2264 10^ - 6 .",
    "note": "In the first test case, the array is [ 3, 1, 2] . These are all the possible ways to split this array: a = [ 3] , b = [ 1, 2] , so the value of f( a) + f( b) = 3 + 1. 5 = 4. 5 . a = [ 3, 1] , b = [ 2] , so the value of f( a) + f( b) = 2 + 2 = 4 . a = [ 3, 2] , b = [ 1] , so the value of f( a) + f( b) = 2. 5 + 1 = 3. 5 . Therefore, the maximum possible value 4. 5 . In the second test case, the array is [ - 7, - 6, - 6] . These are all the possible ways to split this array: a = [ - 7] , b = [ - 6, - 6] , so the value of f( a) + f( b) = ( - 7) + ( - 6) = - 13 . a = [ - 7, - 6] , b = [ - 6] , so the value of f( a) + f( b) = ( - 6. 5) + ( - 6) = - 12. 5 . Therefore, the maximum possible value - 12. 5 .",
    "topics": [
      "brute force",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Boring Segments",
    "url": "https://codeforces.com/problemset/problem/1555/E",
    "history": "You are given n segments on a number line, numbered from 1 to n . The i - th segments covers all integer points from l_ i to r_ i and has a value w_ i . You are asked to select a subset of these segments ( possibly, all of them) . Once the subset is selected, it' s possible to travel between two integer points if there exists a selected segment that covers both of them. A subset is good if it' s possible to reach point m starting from point 1 in arbitrary number of moves. The cost of the subset is the difference between the maximum and the minimum values of segments in it. Find the minimum cost of a good subset. In every test there exists at least one good subset.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 3 \u00b7 10^ 5 ; 2 \u2264 m \u2264 10^ 6 ) \u2014 the number of segments and the number of integer points. Each of the next n lines contains three integers l_ i , r_ i and w_ i ( 1 \u2264 l_ i < r_ i \u2264 m ; 1 \u2264 w_ i \u2264 10^ 6 ) \u2014 the description of the i - th segment. In every test there exists at least one good subset.",
    "output": "Print a single integer \u2014 the minimum cost of a good subset.",
    "note": " ",
    "topics": [
      "data structures",
      "sortings",
      "trees",
      "two pointers"
    ]
  },
  {
    "title": "A Serious Referee",
    "url": "https://codeforces.com/problemset/problem/1552/G",
    "history": "Andrea has come up with what he believes to be a novel sorting algorithm for arrays of length n . The algorithm works as follows. Initially there is an array of n integers a_ 1, a_ 2, . . . , a_ n . Then, k steps are executed. For each 1\u2264 i\u2264 k , during the i - th step the subsequence of the array a with indexes j_ i, 1< j_ i, 2< . . . < j_ i, q_ i is sorted, without changing the values with the remaining indexes. So, the subsequence a_ j_ i, 1, a_ j_ i, 2, . . . , a_ j_ i, q_ i is sorted and all other elements of a are left untouched. Andrea, being eager to share his discovery with the academic community, sent a short paper describing his algorithm to the journal \" Annals of Sorting Algorithms\" and you are the referee of the paper ( that is, the person who must judge the correctness of the paper) . You must decide whether Andrea' s algorithm is correct, that is, if it sorts any array a of n integers.",
    "input": "The first line contains two integers n and k ( 1\u2264 n\u2264 40 , 0\u2264 k\u2264 10 ) \u2014 the length of the arrays handled by Andrea' s algorithm and the number of steps of Andrea' s algorithm. Then k lines follow, each describing the subsequence considered in a step of Andrea' s algorithm. The i - th of these lines contains the integer q_ i ( 1\u2264 q_ i\u2264 n ) followed by q_ i integers j_ i, 1, j_ i, 2, . . . , j_ i, q_ i ( 1\u2264 j_ i, 1< j_ i, 2< \u22ef< j_ i, q_ i\u2264 n ) \u2014 the length of the subsequence considered in the i - th step and the indexes of the subsequence.",
    "output": "If Andrea' s algorithm is correct print ACCEPTED, otherwise print REJECTED.",
    "note": "Explanation of the first sample: The algorithm consists of 3 steps. The first one sorts the subsequence [ a_ 1, a_ 2, a_ 3] , the second one sorts the subsequence [ a_ 2, a_ 3, a_ 4] , the third one sorts the subsequence [ a_ 1, a_ 2] . For example, if initially a= [ 6, 5, 6, 3] , the algorithm transforms the array as follows ( the subsequence that gets sorted is highlighted in red) [ 6, 5, 6, 3] \u2192 [ 5, 6, 6, 3] \u2192 [ 5, 3, 6, 6] \u2192 [ 3, 5, 6, 6] . One can prove that, for any initial array a , at the end of the algorithm the array a will be sorted. Explanation of the second sample: The algorithm consists of 3 steps. The first one sorts the subsequence [ a_ 1, a_ 2, a_ 3] , the second one sorts the subsequence [ a_ 2, a_ 3, a_ 4] , the third one sorts the subsequence [ a_ 1, a_ 3, a_ 4] . For example, if initially a= [ 6, 5, 6, 3] , the algorithm transforms the array as follows ( the subsequence that gets sorted is highlighted in red) [ 6, 5, 6, 3] \u2192 [ 5, 6, 6, 3] \u2192 [ 5, 3, 6, 6] \u2192 [ 5, 3, 6, 6] . Notice that a= [ 6, 5, 6, 3] is an example of an array that is not sorted by the algorithm. Explanation of the third sample: The algorithm consists of 4 steps. The first 3 steps do nothing because they sort subsequences of length 1 , whereas the fourth step sorts the subsequence [ a_ 1, a_ 3] . For example, if initially a= [ 5, 6, 4] , the algorithm transforms the array as follows ( the subsequence that gets sorted is highlighted in red) [ 5, 6, 4] \u2192 [ 5, 6, 4] \u2192 [ 5, 6, 4] \u2192 [ 5, 6, 4] \u2192 [ 4, 6, 5] . Notice that a= [ 5, 6, 4] is an example of an array that is not sorted by the algorithm. Explanation of the fourth sample: The algorithm consists of 2 steps. The first step sorts the subsequences [ a_ 2, a_ 3, a_ 4] , the second step sorts the whole array [ a_ 1, a_ 2, a_ 3, a_ 4, a_ 5] . For example, if initially a= [ 9, 8, 1, 1, 1] , the algorithm transforms the array as follows ( the subsequence that gets sorted is highlighted in red) [ 9, 8, 1, 1, 1] \u2192 [ 9, 1, 1, 8, 1] \u2192 [ 1, 1, 1, 8, 9] . Since in the last step the whole array is sorted, it is clear that, for any initial array a , at the end of the algorithm the array a will be sorted.",
    "topics": [
      "bitmasks",
      "brute force",
      "dfs and similar",
      "sortings"
    ]
  },
  {
    "title": "Telepanting",
    "url": "https://codeforces.com/problemset/problem/1552/F",
    "history": "An ant moves on the real line with constant speed of 1 unit per second. It starts at 0 and always moves to the right ( so its position increases by 1 each second) . There are n portals, the i - th of which is located at position x_ i and teleports to position y_ i < x_ i . Each portal can be either active or inactive. The initial state of the i - th portal is determined by s_ i : if s_ i= 0 then the i - th portal is initially inactive, if s_ i= 1 then the i - th portal is initially active. When the ant travels through a portal ( i. e. , when its position coincides with the position of a portal) : if the portal is inactive, it becomes active ( in this case the path of the ant is not affected) ; if the portal is active, it becomes inactive and the ant is instantly teleported to the position y_ i , where it keeps on moving as normal. How long ( from the instant it starts moving) does it take for the ant to reach the position x_ n + 1 ? It can be shown that this happens in a finite amount of time. Since the answer may be very large, compute it modulo 998 244 353 .",
    "input": "The first line contains the integer n ( 1\u2264 n\u2264 2\u00b7 10^ 5 ) \u2014 the number of portals. The i - th of the next n lines contains three integers x_ i , y_ i and s_ i ( 1\u2264 y_ i < x_ i\u2264 10^ 9 , s_ i\u2208{ 0, 1} ) \u2014 the position of the i - th portal, the position where the ant is teleported when it travels through the i - th portal ( if it is active) , and the initial state of the i - th portal. The positions of the portals are strictly increasing, that is x_ 1< x_ 2< \u22ef< x_ n . It is guaranteed that the 2n integers x_ 1, x_ 2, . . . , x_ n, y_ 1, y_ 2, . . . , y_ n are all distinct.",
    "output": "Output the amount of time elapsed, in seconds, from the instant the ant starts moving to the instant it reaches the position x_ n+ 1 . Since the answer may be very large, output it modulo 998 244 353 .",
    "note": "Explanation of the first sample: The ant moves as follows ( a curvy arrow denotes a teleporting, a straight arrow denotes normal movement with speed 1 and the time spent during the movement is written above the arrow) . 0 6\u27f6 6 5 3\u27f6 8 1 2\u27f6 3 2 4\u27f6 6 5 2\u27f6 7 4 2\u27f6 6 5 4\u27f6 9 Notice that the total time is 6+ 3+ 2+ 4+ 2+ 2+ 4= 23 . Explanation of the second sample: The ant moves as follows ( a curvy arrow denotes a teleporting, a straight arrow denotes normal movement with speed 1 and the time spent during the movement is written above the arrow) . 0 454971987\u27f6 454971987 406874902 48097086\u27f6 454971988 Notice that the total time is 454971987+ 48097086= 503069073 . Explanation of the third sample: Since all portals are initially off, the ant will not be teleported and will go straight from 0 to x_ n+ 1= 899754846+ 1= 899754847 .",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "sortings"
    ]
  },
  {
    "title": "Colors and Intervals",
    "url": "https://codeforces.com/problemset/problem/1552/E",
    "history": "The numbers 1, 2, . . . , n \u00b7 k are colored with n colors. These colors are indexed by 1, 2, . . . , n . For each 1 \u2264 i \u2264 n , there are exactly k numbers colored with color i . Let [ a, b] denote the interval of integers between a and b inclusive, that is, the set { a, a + 1, . . . , b} . You must choose n intervals [ a_ 1, b_ 1] , [ a_ 2, b_ 2] , . . . , [ a_ n, b_ n] such that: for each 1 \u2264 i \u2264 n , it holds 1 \u2264 a_ i < b_ i \u2264 n \u00b7 k ; for each 1 \u2264 i \u2264 n , the numbers a_ i and b_ i are colored with color i ; each number 1 \u2264 x \u2264 n \u00b7 k belongs to at most \u2308n/ k - 1\u2309 intervals. One can show that such a family of intervals always exists under the given constraints.",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 100 , 2 \u2264 k \u2264 100 ) \u2014 the number of colors and the number of occurrences of each color. The second line contains n \u00b7 k integers c_ 1, c_ 2, . . . , c_ nk ( 1 \u2264 c_ j \u2264 n ) , where c_ j is the color of number j . It is guaranteed that, for each 1 \u2264 i \u2264 n , it holds c_ j = i for exactly k distinct indices j .",
    "output": "Output n lines. The i - th line should contain the two integers a_ i and b_ i . If there are multiple valid choices of the intervals, output any.",
    "note": "In the first sample, each number can be contained in at most \u23084/ 3 - 1\u2309 = 2 intervals. The output is described by the following picture: In the second sample, the only interval to be chosen is forced to be [ 1, 2] , and each number is indeed contained in at most \u23081/ 2 - 1\u2309 = 1 interval. In the third sample, each number can be contained in at most \u23083/ 3 - 1\u2309 = 2 intervals. The output is described by the following picture:",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Maximize the Intersections",
    "url": "https://codeforces.com/problemset/problem/1552/C",
    "history": "On a circle lie 2n distinct points, with the following property: however you choose 3 chords that connect 3 disjoint pairs of points, no point strictly inside the circle belongs to all 3 chords. The points are numbered 1, 2, . . . , 2n in clockwise order. Initially, k chords connect k pairs of points, in such a way that all the 2k endpoints of these chords are distinct. You want to draw n - k additional chords that connect the remaining 2( n - k) points ( each point must be an endpoint of exactly one chord) . In the end, let x be the total number of intersections among all n chords. Compute the maximum value that x can attain if you choose the n - k chords optimally. Note that the exact position of the 2n points is not relevant, as long as the property stated in the first paragraph holds.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. Then t test cases follow. The first line of each test case contains two integers n and k ( 1 \u2264 n \u2264 100 , 0 \u2264 k \u2264 n ) \u2014 half the number of points and the number of chords initially drawn. Then k lines follow. The i - th of them contains two integers x_ i and y_ i ( 1 \u2264 x_ i, y_ i \u2264 2n , x_ i y_ i ) \u2014 the endpoints of the i - th chord. It is guaranteed that the 2k numbers x_ 1, y_ 1, x_ 2, y_ 2, . . . , x_ k, y_ k are all distinct.",
    "output": "For each test case, output the maximum number of intersections that can be obtained by drawing n - k additional chords.",
    "note": "In the first test case, there are three ways to draw the 2 additional chords, shown below ( black chords are the ones initially drawn, while red chords are the new ones) : We see that the third way gives the maximum number of intersections, namely 4 . In the second test case, there are no more chords to draw. Of course, with only one chord present there are no intersections. In the third test case, we can make at most one intersection by drawing chords 1- 3 and 2- 4 , as shown below:",
    "topics": [
      "combinatorics",
      "constructive algorithms",
      "geometry",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Running for Gold",
    "url": "https://codeforces.com/problemset/problem/1552/B",
    "history": "The Olympic Games have just started and Federico is eager to watch the marathon race. There will be n athletes, numbered from 1 to n , competing in the marathon, and all of them have taken part in 5 important marathons, numbered from 1 to 5 , in the past. For each 1\u2264 i\u2264 n and 1\u2264 j\u2264 5 , Federico remembers that athlete i ranked r_ i, j - th in marathon j ( e. g. , r_ 2, 4= 3 means that athlete 2 was third in marathon 4 ) . Federico considers athlete x superior to athlete y if athlete x ranked better than athlete y in at least 3 past marathons, i. e. , r_ x, j< r_ y, j for at least 3 distinct values of j . Federico believes that an athlete is likely to get the gold medal at the Olympics if he is superior to all other athletes. Find any athlete who is likely to get the gold medal ( that is, an athlete who is superior to all other athletes) , or determine that there is no such athlete.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Then t test cases follow. The first line of each test case contains a single integer n ( 1\u2264 n\u2264 50 000 ) \u2014 the number of athletes. Then n lines follow, each describing the ranking positions of one athlete. The i - th of these lines contains the 5 integers r_ i, 1, r_ i, 2, r_ i, 3, r_ i, 4, r_ i, 5 ( 1\u2264 r_ i, j\u2264 50 000 ) \u2014 the ranking positions of athlete i in the past 5 marathons. It is guaranteed that, in each of the 5 past marathons, the n athletes have distinct ranking positions, i. e. , for each 1\u2264 j\u2264 5 , the n values r_ 1, j, r_ 2, j, . . . , r_ n, j are distinct. It is guaranteed that the sum of n over all test cases does not exceed 50 000 .",
    "output": "For each test case, print a single integer \u2014 the number of an athlete who is likely to get the gold medal ( that is, an athlete who is superior to all other athletes) . If there are no such athletes, print - 1 . If there is more than such one athlete, print any of them.",
    "note": "Explanation of the first test case: There is only one athlete, therefore he is superior to everyone else ( since there is no one else) , and thus he is likely to get the gold medal. Explanation of the second test case: There are n= 3 athletes. Athlete 1 is superior to athlete 2 . Indeed athlete 1 ranks better than athlete 2 in the marathons 1 , 2 and 3 . Athlete 2 is superior to athlete 3 . Indeed athlete 2 ranks better than athlete 3 in the marathons 1 , 2 , 4 and 5 . Athlete 3 is superior to athlete 1 . Indeed athlete 3 ranks better than athlete 1 in the marathons 3 , 4 and 5 . Explanation of the third test case: There are n= 3 athletes. Athlete 1 is superior to athletes 2 and 3 . Since he is superior to all other athletes, he is likely to get the gold medal. Athlete 2 is superior to athlete 3 . Athlete 3 is not superior to any other athlete. Explanation of the fourth test case: There are n= 6 athletes. Athlete 1 is superior to athletes 3 , 4 , 6 . Athlete 2 is superior to athletes 1 , 4 , 6 . Athlete 3 is superior to athletes 2 , 4 , 6 . Athlete 4 is not superior to any other athlete. Athlete 5 is superior to athletes 1 , 2 , 3 , 4 , 6 . Since he is superior to all other athletes, he is likely to get the gold medal. Athlete 6 is only superior to athlete 4 .",
    "topics": [
      "combinatorics",
      "graphs",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Subsequence Permutation",
    "url": "https://codeforces.com/problemset/problem/1552/A",
    "history": "A string s of length n , consisting of lowercase letters of the English alphabet, is given. You must choose some number k between 0 and n . Then, you select k characters of s and permute them however you want. In this process, the positions of the other n- k characters remain unchanged. You have to perform this operation exactly once. For example, if s= , you can choose the k= 4 characters and permute them into so that after the operation the string becomes . Determine the minimum k so that it is possible to sort s alphabetically ( that is, after the operation its characters appear in alphabetical order) .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Then t test cases follow. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 40 ) \u2014 the length of the string. The second line of each test case contains the string s . It is guaranteed that s contains only lowercase letters of the English alphabet.",
    "output": "For each test case, output the minimum k that allows you to obtain a string sorted alphabetically, through the operation described above.",
    "note": "In the first test case, we can choose the k= 2 characters and rearrange them as ( so the resulting string is ) . It is not possible to sort the string choosing strictly less than 2 characters. In the second test case, one possible way to sort s is to consider the k= 6 characters and rearrange them as ( so the resulting string is ) . One can show that it is not possible to sort the string choosing strictly less than 6 characters. In the third test case, string s is already sorted ( so we can choose k= 0 characters) . In the fourth test case, we can choose all k= 4 characters and reverse the whole string ( so the resulting string is ) .",
    "topics": [
      "sortings",
      "strings"
    ]
  },
  {
    "title": "Interesting Story",
    "url": "https://codeforces.com/problemset/problem/1551/C",
    "history": "Stephen Queen wants to write a story. He is a very unusual writer, he uses only letters ' a' , ' b' , ' c' , ' d' and ' e' ! To compose a story, Stephen wrote out n words consisting of the first 5 lowercase letters of the Latin alphabet. He wants to select the maximum number of words to make an interesting story. Let a story be a sequence of words that are not necessarily different. A story is called interesting if there exists a letter which occurs among all words of the story more times than all other letters together. For example, the story consisting of three words \" bac\" , \" aaada\" , \" e\" is interesting ( the letter ' a' occurs 5 times, all other letters occur 4 times in total) . But the story consisting of two words \" aba\" , \" abcde\" is not ( no such letter that it occurs more than all other letters in total) . You are given a sequence of n words consisting of letters ' a' , ' b' , ' c' , ' d' and ' e' . Your task is to choose the maximum number of them to make an interesting story. If there' s no way to make a non- empty story, output 0 .",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 5000 ) \u2014 the number of test cases. Then t test cases follow. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of the words in the sequence. Then n lines follow, each of them contains a word \u2014 a non- empty string consisting of lowercase letters of the Latin alphabet. The words in the sequence may be non- distinct ( i. e. duplicates are allowed) . Only the letters ' a' , ' b' , ' c' , ' d' and ' e' may occur in the words. It is guaranteed that the sum of n over all test cases doesn' t exceed 2 \u00b7 10^ 5 ; the sum of the lengths of all words over all test cases doesn' t exceed 4 \u00b7 10^ 5 .",
    "output": "For each test case, output the maximum number of words that compose an interesting story. Print 0 if there' s no way to make a non- empty interesting story.",
    "note": "In the first test case of the example, all 3 words can be used to make an interesting story. The interesting story is \" bac aaada e\" . In the second test case of the example, the 1 - st and the 3 - rd words can be used to make an interesting story. The interesting story is \" aba aba\" . Stephen can' t use all three words at the same time. In the third test case of the example, Stephen can' t make a non- empty interesting story. So the answer is 0 . In the fourth test case of the example, Stephen can use the 3 - rd and the 4 - th words to make an interesting story. The interesting story is \" c bc\" .",
    "topics": [
      "greedy",
      "sortings",
      "strings"
    ]
  },
  {
    "title": "Excellent Arrays",
    "url": "https://codeforces.com/problemset/problem/1550/D",
    "history": "Let' s call an integer array a_ 1, a_ 2, . . . , a_ n good if a_ i = \u0338 i for each i . Let F( a) be the number of pairs ( i, j) ( 1 \u2264 i < j \u2264 n ) such that a_ i + a_ j = i + j . Let' s say that an array a_ 1, a_ 2, . . . , a_ n is excellent if: a is good; l \u2264 a_ i \u2264 r for each i ; F( a) is the maximum possible among all good arrays of size n . Given n , l and r , calculate the number of excellent arrays modulo 10^ 9 + 7 .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first and only line of each test case contains three integers n , l , and r ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ; - 10^ 9 \u2264 l \u2264 1 ; n \u2264 r \u2264 10^ 9 ) . It' s guaranteed that the sum of n doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print the number of excellent arrays modulo 10^ 9 + 7 .",
    "note": "In the first test case, it can be proven that the maximum F( a) among all good arrays a is equal to 2 . The excellent arrays are: [ 2, 1, 2] ; [ 0, 3, 2] ; [ 2, 3, 2] ; [ 3, 0, 1] .",
    "topics": [
      "binary search",
      "combinatorics",
      "constructive algorithms",
      "implementation",
      "math",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Air Conditioners",
    "url": "https://codeforces.com/problemset/problem/1547/E",
    "history": "On a strip of land of length n there are k air conditioners: the i - th air conditioner is placed in cell a_ i ( 1 \u2264 a_ i \u2264 n ) . Two or more air conditioners cannot be placed in the same cell ( i. e. all a_ i are distinct) . Each air conditioner is characterized by one parameter: temperature. The i - th air conditioner is set to the temperature t_ i . Example of strip of length n= 6 , where k= 2 , a= [ 2, 5] and t= [ 14, 16] . For each cell i ( 1 \u2264 i \u2264 n ) find it' s temperature, that can be calculated by the formula min_ 1 \u2264 j \u2264 k( t_ j + | a_ j - i| ) , where | a_ j - i| denotes absolute value of the difference a_ j - i . In other words, the temperature in cell i is equal to the minimum among the temperatures of air conditioners, increased by the distance from it to the cell i . Let' s look at an example. Consider that n= 6, k= 2 , the first air conditioner is placed in cell a_ 1= 2 and is set to the temperature t_ 1= 14 and the second air conditioner is placed in cell a_ 2= 5 and is set to the temperature t_ 2= 16 . In that case temperatures in cells are: temperature in cell 1 is: min( 14 + | 2 - 1| , 16 + | 5 - 1| ) = min( 14 + 1, 16 + 4) = min( 15, 20) = 15 ; temperature in cell 2 is: min( 14 + | 2 - 2| , 16 + | 5 - 2| ) = min( 14 + 0, 16 + 3) = min( 14, 19) = 14 ; temperature in cell 3 is: min( 14 + | 2 - 3| , 16 + | 5 - 3| ) = min( 14 + 1, 16 + 2) = min( 15, 18) = 15 ; temperature in cell 4 is: min( 14 + | 2 - 4| , 16 + | 5 - 4| ) = min( 14 + 2, 16 + 1) = min( 16, 17) = 16 ; temperature in cell 5 is: min( 14 + | 2 - 5| , 16 + | 5 - 5| ) = min( 14 + 3, 16 + 0) = min( 17, 16) = 16 ; temperature in cell 6 is: min( 14 + | 2 - 6| , 16 + | 5 - 6| ) = min( 14 + 4, 16 + 1) = min( 18, 17) = 17 . For each cell from 1 to n find the temperature in it.",
    "input": "The first line contains one integer q ( 1 \u2264 q \u2264 10^ 4 ) \u2014 the number of test cases in the input. Then test cases follow. Before each test case, there is an empty line. Each test case contains three lines. The first line contains two integers n ( 1 \u2264 n \u2264 3 \u00b7 10^ 5 ) and k ( 1 \u2264 k \u2264 n ) \u2014 the length of the strip of land and the number of air conditioners respectively. The second line contains k integers a_ 1, a_ 2, . . . , a_ k ( 1 \u2264 a_ i \u2264 n ) \u2014 positions of air conditioners on the strip of land. The third line contains k integers t_ 1, t_ 2, . . . , t_ k ( 1 \u2264 t_ i \u2264 10^ 9 ) \u2014 temperatures of air conditioners. It is guaranteed that the sum of n over all test cases does not exceed 3 \u00b7 10^ 5 .",
    "output": "For each test case output n integers separated by space: temperatures of air in cells.",
    "note": " ",
    "topics": [
      "data structures",
      "dp",
      "implementation",
      "shortest paths",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "AquaMoon and Strange Sort",
    "url": "https://codeforces.com/problemset/problem/1545/A",
    "history": "AquaMoon has n friends. They stand in a row from left to right, and the i - th friend from the left wears a T- shirt with a number a_ i written on it. Each friend has a direction ( left or right) . In the beginning, the direction of each friend is right. AquaMoon can make some operations on friends. On each operation, AquaMoon can choose two adjacent friends and swap their positions. After each operation, the direction of both chosen friends will also be flipped: left to right and vice versa. AquaMoon hopes that after some operations, the numbers written on the T- shirt of n friends in the row, read from left to right, become non- decreasing. Also she wants, that all friends will have a direction of right at the end. Please find if it is possible.",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 50 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of Aquamoon' s friends. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 5 ) \u2014 the numbers, written on the T- shirts. It is guaranteed that the sum of n for all test cases does not exceed 10^ 5 .",
    "output": "For each test case, if there exists a possible sequence of operations, print \" YES\" ( without quotes) ; otherwise, print \" NO\" ( without quotes) . You can print each letter in any case ( upper or lower) .",
    "note": "The possible list of operations in the first test case: Swap a_ 1 and a_ 2 . The resulting sequence is 3, 4, 2, 5 . The directions are: left, left, right, right. Swap a_ 2 and a_ 3 . The resulting sequence is 3, 2, 4, 5 . The directions are: left, left, right, right. Swap a_ 1 and a_ 2 . The resulting sequence is 2, 3, 4, 5 . The directions are: right, right, right, right.",
    "topics": [
      "sortings"
    ]
  },
  {
    "title": "Great Graphs",
    "url": "https://codeforces.com/problemset/problem/1540/A",
    "history": "Farmer John has a farm that consists of n pastures connected by one- directional roads. Each road has a weight, representing the time it takes to go from the start to the end of the road. The roads could have negative weight, where the cows go so fast that they go back in time! However, Farmer John guarantees that it is impossible for the cows to get stuck in a time loop, where they can infinitely go back in time by traveling across a sequence of roads. Also, each pair of pastures is connected by at most one road in each direction. Unfortunately, Farmer John lost the map of the farm. All he remembers is an array d , where d_ i is the smallest amount of time it took the cows to reach the i - th pasture from pasture 1 using a sequence of roads. The cost of his farm is the sum of the weights of each of the roads, and Farmer John needs to know the minimal cost of a farm that is consistent with his memory.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t cases follow. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of pastures. The second line of each test case contains n space separated integers d_ 1, d_ 2, . . . , d_ n ( 0 \u2264 d_ i \u2264 10^ 9 ) \u2014 the array d . It is guaranteed that d_ 1 = 0 . It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, output the minimum possible cost of a farm that is consistent with Farmer John' s memory.",
    "note": "In the first test case, you can add roads from pasture 1 to pasture 2 with a time of 2 , from pasture 2 to pasture 3 with a time of 1 , from pasture 3 to pasture 1 with a time of - 3 , from pasture 3 to pasture 2 with a time of - 1 , from pasture 2 to pasture 1 with a time of - 2 . The total cost is 2 + 1 + - 3 + - 1 + - 2 = - 3 . In the second test case, you can add a road from pasture 1 to pasture 2 with cost 1000000000 and a road from pasture 2 to pasture 1 with cost - 1000000000 . The total cost is 1000000000 + - 1000000000 = 0 . In the third test case, you can' t add any roads. The total cost is 0 .",
    "topics": [
      "constructive algorithms",
      "graphs",
      "greedy",
      "shortest paths",
      "sortings"
    ]
  },
  {
    "title": "Strange Array",
    "url": "https://codeforces.com/problemset/problem/1539/F",
    "history": "Vasya has an array of n integers a_ 1, a_ 2, . . . , a_ n . Vasya thinks that all numbers in his array are strange for some reason. To calculate how strange the i - th number is, Vasya created the following algorithm. He chooses a subsegment a_ l, a_ l+ 1, . . . , a_ r , such that 1 \u2264 l \u2264 i \u2264 r \u2264 n , sort its elements in increasing order in his head ( he can arrange equal elements arbitrary) . After that he finds the center of the segment. The center of a segment is the element at position ( l + r) / 2 , if the length of the segment is odd, and at position ( l + r + 1) / 2 otherwise. Now Vasya finds the element that was at position i before the sorting, and calculates the distance between its current position and the center of the subsegment ( the distance between the elements with indices j and k is | j - k| ) . The strangeness of the number at position i is the maximum distance among all suitable choices of l and r . Vasya wants to calculate the strangeness of each number in his array. Help him to do it.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 200 000 ) \u2014 the size of the array. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 Vasya' s array.",
    "output": "Print a single line with n numbers. The i - th of them must be equal to the strangeness of the i - th element of the array.",
    "note": "In the first example: For the first position we choose the segment from 1 to 5 . After sorting, it looks like [ 1, 2, 3, 4, 5] , the center is 3 . The distance from the center to 5 is 2 . For the second position we choose the segment from 2 to 4 . For the third position we choose the segment from 3 to 5 . For the fourth position we choose the segment from 1 to 4 . After sorting, it looks like [ 2, 3, 4, 5] , the center is 4 . The distance from the center to 2 is 2 . For the fifth position we choose the segment from 1 to 5 .",
    "topics": [
      "data structures",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "PriceFixed",
    "url": "https://codeforces.com/problemset/problem/1539/D",
    "history": "Lena is the most economical girl in Moscow. So, when her dad asks her to buy some food for a trip to the country, she goes to the best store \u2014 \" PriceFixed\" . Here are some rules of that store: The store has an infinite number of items of every product. All products have the same price: 2 rubles per item. For every product i there is a discount for experienced buyers: if you buy b_ i items of products ( of any type, not necessarily type i ) , then for all future purchases of the i - th product there is a 50% discount ( so you can buy an item of the i - th product for 1 ruble! ) . Lena needs to buy n products: she must purchase at least a_ i items of the i - th product. Help Lena to calculate the minimum amount of money she needs to spend if she optimally chooses the order of purchasing. Note that if she wants, she can buy more items of some product than needed.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 100 000 ) \u2014 the number of products. Each of next n lines contains a product description. Each description consists of two integers a_ i and b_ i ( 1 \u2264 a_ i \u2264 10^ 14 , 1 \u2264 b_ i \u2264 10^ 14 ) \u2014 the required number of the i - th product and how many products you need to buy to get the discount on the i - th product. The sum of all a_ i does not exceed 10^ 14 .",
    "output": "Output the minimum sum that Lena needs to make all purchases.",
    "note": "In the first example, Lena can purchase the products in the following way: one item of product 3 for 2 rubles, one item of product 1 for 2 rubles, one item of product 1 for 2 rubles, one item of product 2 for 1 ruble ( she can use the discount because 3 items are already purchased) , one item of product 1 for 1 ruble ( she can use the discount because 4 items are already purchased) . In total, she spends 8 rubles. It can be proved that it is impossible to spend less. In the second example Lena can purchase the products in the following way: one item of product 1 for 2 rubles, two items of product 2 for 2 rubles for each, one item of product 5 for 2 rubles, one item of product 3 for 1 ruble, two items of product 4 for 1 ruble for each, one item of product 1 for 1 ruble. In total, she spends 12 rubles.",
    "topics": [
      "binary search",
      "greedy",
      "implementation",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Stable Groups",
    "url": "https://codeforces.com/problemset/problem/1539/C",
    "history": "There are n students numerated from 1 to n . The level of the i - th student is a_ i . You need to split the students into stable groups. A group of students is called stable, if in the sorted array of their levels no two neighboring elements differ by more than x . For example, if x = 4 , then the group with levels [ 1, 10, 8, 4, 4] is stable ( because 4 - 1 \u2264 x , 4 - 4 \u2264 x , 8 - 4 \u2264 x , 10 - 8 \u2264 x ) , while the group with levels [ 2, 10, 10, 7] is not stable ( 7 - 2 = 5 > x ) . Apart from the n given students, teachers can invite at most k additional students with arbitrary levels ( at teachers' choice) . Find the minimum number of stable groups teachers can form from all students ( including the newly invited) . For example, if there are two students with levels 1 and 5 ; x = 2 ; and k \u2265 1 , then you can invite a new student with level 3 and put all the students in one stable group.",
    "input": "The first line contains three integers n , k , x ( 1 \u2264 n \u2264 200 000 , 0 \u2264 k \u2264 10^ 18 , 1 \u2264 x \u2264 10^ 18 ) \u2014 the initial number of students, the number of students you can additionally invite, and the maximum allowed level difference. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 18 ) \u2014 the students levels.",
    "output": "In the only line print a single integer: the minimum number of stable groups you can split the students into.",
    "note": "In the first example you can invite two students with levels 2 and 11 . Then you can split the students into two stable groups: [ 1, 1, 2, 5, 8, 11, 12, 13] , [ 20, 22] . In the second example you are not allowed to invite new students, so you need 3 groups: [ 1, 1, 5, 5, 20, 20] [ 60, 70, 70, 70, 80, 90] [ 420]",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Array Reodering",
    "url": "https://codeforces.com/problemset/problem/1535/B",
    "history": "You are given an array a consisting of n integers. Let' s call a pair of indices i , j good if 1 \u2264 i < j \u2264 n and ( a_ i, 2a_ j) > 1 ( where ( x, y) is the greatest common divisor of x and y ) . Find the maximum number of good index pairs if you can reorder the array a in an arbitrary way.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of the test case contains a single integer n ( 2 \u2264 n \u2264 2000 ) \u2014 the number of elements in the array. The second line of the test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 5 ) . It is guaranteed that the sum of n over all test cases does not exceed 2000 .",
    "output": "For each test case, output a single integer \u2014 the maximum number of good index pairs if you can reorder the array a in an arbitrary way.",
    "note": "In the first example, the array elements can be rearranged as follows: [ 6, 3, 5, 3] . In the third example, the array elements can be rearranged as follows: [ 4, 4, 2, 1, 1] .",
    "topics": [
      "brute force",
      "greedy",
      "math",
      "number theory",
      "sortings"
    ]
  },
  {
    "title": "Lost Nodes",
    "url": "https://codeforces.com/problemset/problem/1534/H",
    "history": "This is an interactive problem. As he qualified for IOI this year, Little Ericyi was given a gift from all his friends: a tree of n nodes! On the flight to IOI Little Ericyi was very bored, so he decided to play a game with Little Yvonne with his new tree. First, Little Yvonne selects two ( not necessarily different) nodes a and b on the tree ( without telling Ericyi) , and then gives him a hint f ( which is some node on the path from a to b ) . Then, Little Ericyi is able to ask the following question repeatedly: If I rooted the tree at node r ( Ericyi gets to choose r ) , what would be the Lowest Common Ancestor of a and b ? Little Ericyi' s goal is to find the nodes a and b , and report them to Little Yvonne. However, Little Yvonne thought this game was too easy, so before he gives the hint f to Little Ericyi, he also wants him to first find the maximum number of queries required to determine a and b over all possibilities of a , b , and f assuming Little Ericyi plays optimally. Little Ericyi defines an optimal strategy as one that makes the minimum number of queries. Of course, once Little Ericyi replies with the maximum number of queries, Little Yvonne will only let him use that many queries in the game. The tree, a , b , and f are all fixed before the start of the game and do not change as queries are made. InteractionFirst read a line containing the integer n ( 1 \u2264 n \u2264 10^ 5 ) , the number of nodes in the tree. The next n\u22121 lines describe Little Ericyi' s tree. These lines contain two integers u and v ( 1 \u2264 u, v \u2264 n ) denoting an edge between u and v ( u = \u0338 v ) . It is guaranteed that these edges form a tree. After that you should output k , the maximum number of queries needed to determine a and b over all possibilities of a , b , and f assuming Little Ericyi plays optimally. You should output end of line and flush the output after printing k . After that read a line containing the integer f ( 1 \u2264 f \u2264 n ) \u2014 the hint: a node on the path from a to b , inclusive. After that, you can start making queries. You will be limited to making at most k queries, where k is the number you printed. Each query is made in the format \" ? r\" , where r is an integer 1 \u2264 r \u2264 n denoting the root node you want for the query. You will then receive an integer x ( 1 \u2264 x \u2264 n ) , the Lowest Common Ancestor of a and b if the tree was rooted at r . When your program has found the nodes a , b , report the answer in the following format: \" ! a b\" , where a and b are the two hidden nodes and terminate your program normally immediately after flushing the output stream. You may output a and b in any order. After printing a query do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use: fflush( stdout) or cout. flush( ) in C+ + ; System. out. flush( ) in Java; flush( output) in Pascal; stdout. flush( ) in Python; see documentation for other languages. If at any point you make an invalid output or make more than k queries, the interaction will terminate and you will receive a Wrong Answer verdict. An invalid output is defined as either an invalid query or a value of k less than 0 or greater than n . HacksTo hack a solution, use the following format: The first line contains the integer n ( 1 \u2264 n \u2264 10^ 5 ) . The next n\u22121 lines contain two integers u and v ( 1 \u2264 u, v \u2264 n ) denoting an edge between u and v ( u = \u0338 v ) . These n- 1 edges must form a tree. The next line of input contains the nodes a and b ( 1 \u2264 a, b \u2264 n ) , separated by a space. The final line of input contains the integer f ( 1 \u2264 f \u2264 n ) . Node f should be on the simple path from a to b ( inclusive) .",
    "input": " ",
    "output": " ",
    "note": "Here is the the tree from the first sample interaction. Nodes a and b are highlighted. Notice that a and b can be output in any order. Additionally, here are the answers to querying every single node 1, 2, . . . , n for your convenience: 1 : 1 2 : 2 3 : 2 4 : 4 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ Here is the the tree from the second sample interaction. Again, nodes a and b are highlighted. Lastly, here are the answers to querying every single node 1, 2, . . . , n ( in example 2 ) for your convenience: 1 : 1 2 : 4 3 : 1 4 : 4 5 : 4",
    "topics": [
      "constructive algorithms",
      "dp",
      "graphs",
      "interactive",
      "sortings",
      "trees"
    ]
  },
  {
    "title": "A New Beginning",
    "url": "https://codeforces.com/problemset/problem/1534/G",
    "history": "Annie has gotten bored of winning every coding contest and farming unlimited rating. Today, she is going to farm potatoes instead. Annie' s garden is an infinite 2D plane. She has n potatoes to plant, and the i - th potato must be planted at ( x_ i, y_ i) . Starting at the point ( 0, 0) , Annie begins walking, in one step she can travel one unit right or up ( increasing her x or y coordinate by 1 respectively) . At any point ( X, Y) during her walk she can plant some potatoes at arbitrary points using her potato gun, consuming max( | X- x| , | Y- y| ) units of energy in order to plant a potato at ( x, y) . Find the minimum total energy required to plant every potato. Note that Annie may plant any number of potatoes from any point.",
    "input": "The first line contains the integer n ( 1 \u2264 n \u2264 800 000 ) . The next n lines contain two integers x_ i and y_ i ( 0 \u2264 x_ i, y_ i \u2264 10^ 9 ) , representing the location of the i - th potato. It is possible that some potatoes should be planted in the same location.",
    "output": "Print the minimum total energy to plant all potatoes.",
    "note": "In example 1 , Annie can travel to each spot directly and plant a potato with no energy required. In example 2 , moving to ( 1, 0) , Annie plants the second potato using 1 energy. Next, she travels to ( 1, 1) and plants the first potato with 0 energy.",
    "topics": [
      "data structures",
      "dp",
      "geometry",
      "sortings"
    ]
  },
  {
    "title": "Teams Forming",
    "url": "https://codeforces.com/problemset/problem/1532/D",
    "history": "There are n students in a university. The number of students is even. The i - th student has programming skill equal to a_ i . The coach wants to form n/ 2 teams. Each team should consist of exactly two students, and each student should belong to exactly one team. Two students can form a team only if their skills are equal ( otherwise they cannot understand each other and cannot form a team) . Students can solve problems to increase their skill. One solved problem increases the skill by one. The coach wants to know the minimum total number of problems students should solve to form exactly n/ 2 teams ( i. e. each pair of students should form a team) . Your task is to find this number.",
    "input": "The first line of the input contains one integer n ( 2 \u2264 n \u2264 100 ) \u2014 the number of students. It is guaranteed that n is even. The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 100 ) , where a_ i is the skill of the i - th student.",
    "output": "Print one number \u2014 the minimum total number of problems students should solve to form exactly n/ 2 teams.",
    "note": "In the first example the optimal teams will be: ( 3, 4) , ( 1, 6) and ( 2, 5) , where numbers in brackets are indices of students. Then, to form the first team the third student should solve 1 problem, to form the second team nobody needs to solve problems and to form the third team the second student should solve 4 problems so the answer is 1 + 4 = 5 . In the second example the first student should solve 99 problems to form a team with the second one.",
    "topics": [
      "*special",
      "sortings"
    ]
  },
  {
    "title": "Pursuit",
    "url": "https://codeforces.com/problemset/problem/1530/C",
    "history": "You and your friend Ilya are participating in an individual programming contest consisting of multiple stages. A contestant can get between 0 and 100 points, inclusive, for each stage, independently of other contestants. Points received by contestants in different stages are used for forming overall contest results. Suppose that k stages of the contest are completed. For each contestant, k - \u230ak/ 4\u230b stages with the highest scores are selected, and these scores are added up. This sum is the overall result of the contestant. ( Here \u230a t \u230b denotes rounding t down. ) For example, suppose 9 stages are completed, and your scores are 50, 30, 50, 50, 100, 10, 30, 100, 50 . First, 7 stages with the highest scores are chosen \u2014 for example, all stages except for the 2 - nd and the 6 - th can be chosen. Then your overall result is equal to 50 + 50 + 50 + 100 + 30 + 100 + 50 = 430 . As of now, n stages are completed, and you know the points you and Ilya got for these stages. However, it is unknown how many more stages will be held. You wonder what the smallest number of additional stages is, after which your result might become greater than or equal to Ilya' s result, at least in theory. Find this number!",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 1000 ) . Description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of completed stages. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 100 ) \u2014 your points for the completed stages. The third line contains n integers b_ 1, b_ 2, . . . , b_ n ( 0 \u2264 b_ i \u2264 100 ) \u2014 Ilya' s points for the completed stages. It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case print a single integer \u2014 the smallest number of additional stages required for your result to be able to become greater than or equal to Ilya' s result. If your result is already not less than Ilya' s result, print 0 .",
    "note": "In the first test case, you have scored 100 points for the first stage, while Ilya has scored 0 . Thus, your overall result ( 100 ) is already not less than Ilya' s result ( 0 ) . In the second test case, you have scored 0 points for the first stage, while Ilya has scored 100 . A single stage with an opposite result is enough for both your and Ilya' s overall scores to become equal to 100 . In the third test case, your overall result is 30 + 40 + 50 = 120 , while Ilya' s result is 100 + 100 + 100 = 300 . After three additional stages your result might become equal to 420 , while Ilya' s result might become equal to 400 . In the fourth test case, your overall result after four additional stages might become equal to 470 , while Ilya' s result might become equal to 400 . Three stages are not enough.",
    "topics": [
      "binary search",
      "brute force",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Sifid and Strange Subsequences",
    "url": "https://codeforces.com/problemset/problem/1529/B",
    "history": "A sequence ( b_ 1, b_ 2, . . . , b_ k) is called strange, if the absolute difference between any pair of its elements is greater than or equal to the maximum element in the sequence. Formally speaking, it' s strange if for every pair ( i, j) with 1 \u2264 i< j \u2264 k , we have | a_ i- a_ j| \u2265 MAX , where MAX is the largest element of the sequence. In particular, any sequence of length at most 1 is strange. For example, the sequences ( - 2021, - 1, - 1, - 1) and ( - 1, 0, 1) are strange, but ( 3, 0, 1) is not, because | 0 - 1| < 3 . Sifid has an array a of n integers. Sifid likes everything big, so among all the strange subsequences of a , he wants to find the length of the longest one. Can you help him? A sequence c is a subsequence of an array d if c can be obtained from d by deletion of several ( possibly, zero or all) elements.",
    "input": "The first line contains an integer t ( 1\u2264 t\u2264 10^ 4) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains an integer n ( 1\u2264 n\u2264 10^ 5) \u2014 the length of the array a . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9\u2264 a_ i \u2264 10^ 9) \u2014 the elements of the array a . It is guaranteed that the sum of n over all test cases doesn' t exceed 10^ 5 .",
    "output": "For each test case output a single integer \u2014 the length of the longest strange subsequence of a .",
    "note": "In the first test case, one of the longest strange subsequences is ( a_ 1, a_ 2, a_ 3, a_ 4) In the second test case, one of the longest strange subsequences is ( a_ 1, a_ 3, a_ 4, a_ 5, a_ 7) . In the third test case, one of the longest strange subsequences is ( a_ 1, a_ 3, a_ 4, a_ 5) . In the fourth test case, one of the longest strange subsequences is ( a_ 2) . In the fifth test case, one of the longest strange subsequences is ( a_ 1, a_ 2, a_ 4) .",
    "topics": [
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Mean Inequality",
    "url": "https://codeforces.com/problemset/problem/1526/A",
    "history": "You are given an array a of 2n distinct integers. You want to arrange the elements of the array in a circle such that no element is equal to the the arithmetic mean of its 2 neighbours. More formally, find an array b , such that: b is a permutation of a . For every i from 1 to 2n , b_ i = \u0338b_ i- 1+ b_ i+ 1/ 2 , where b_ 0 = b_ 2n and b_ 2n+ 1 = b_ 1 . It can be proved that under the constraints of this problem, such array b always exists.",
    "input": "The first line of input contains a single integer t ( 1 \u2264 t \u2264 1000) \u2014 the number of testcases. The description of testcases follows. The first line of each testcase contains a single integer n ( 1 \u2264 n \u2264 25) . The second line of each testcase contains 2n integers a_ 1, a_ 2, . . . , a_ 2n ( 1 \u2264 a_ i \u2264 10^ 9) \u2014 elements of the array. Note that there is no limit to the sum of n over all testcases.",
    "output": "For each testcase, you should output 2n integers, b_ 1, b_ 2, . . . b_ 2n , for which the conditions from the statement are satisfied.",
    "note": "In the first testcase, array [ 3, 1, 4, 2, 5, 6] works, as it' s a permutation of [ 1, 2, 3, 4, 5, 6] , and 3+ 4/ 2= \u0338 1 , 1+ 2/ 2= \u0338 4 , 4+ 5/ 2= \u0338 2 , 2+ 6/ 2= \u0338 5 , 5+ 3/ 2= \u0338 6 , 6+ 1/ 2= \u0338 3 .",
    "topics": [
      "constructive algorithms",
      "sortings"
    ]
  },
  {
    "title": "Robot Collisions",
    "url": "https://codeforces.com/problemset/problem/1525/C",
    "history": "There are n robots driving along an OX axis. There are also two walls: one is at coordinate 0 and one is at coordinate m . The i - th robot starts at an integer coordinate x_ i ( 0 < x_ i < m) and moves either left ( towards the 0 ) or right with the speed of 1 unit per second. No two robots start at the same coordinate. Whenever a robot reaches a wall, it turns around instantly and continues his ride in the opposite direction with the same speed. Whenever several robots meet at the same integer coordinate, they collide and explode into dust. Once a robot has exploded, it doesn' t collide with any other robot. Note that if several robots meet at a non- integer coordinate, nothing happens. For each robot find out if it ever explodes and print the time of explosion if it happens and - 1 otherwise.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of testcases. Then the descriptions of t testcases follow. The first line of each testcase contains two integers n and m ( 1 \u2264 n \u2264 3 \u00b7 10^ 5 ; 2 \u2264 m \u2264 10^ 8 ) \u2014 the number of robots and the coordinate of the right wall. The second line of each testcase contains n integers x_ 1, x_ 2, . . . , x_ n ( 0 < x_ i < m ) \u2014 the starting coordinates of the robots. The third line of each testcase contains n space- separated characters ' L' or ' R' \u2014 the starting directions of the robots ( ' L' stands for left and ' R' stands for right) . All coordinates x_ i in the testcase are distinct. The sum of n over all testcases doesn' t exceed 3 \u00b7 10^ 5 .",
    "output": "For each testcase print n integers \u2014 for the i - th robot output the time it explodes at if it does and - 1 otherwise.",
    "note": "Here is the picture for the seconds 0, 1, 2 and 3 of the first testcase: Notice that robots 2 and 3 don' t collide because they meet at the same point 2. 5 , which is not integer. After second 3 robot 6 just drive infinitely because there' s no robot to collide with.",
    "topics": [
      "data structures",
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Off by One",
    "url": "https://codeforces.com/problemset/problem/1519/E",
    "history": "There are n points on an infinite plane. The i - th point has coordinates ( x_ i, y_ i) such that x_ i > 0 and y_ i > 0 . The coordinates are not necessarily integer. In one move you perform the following operations: choose two points a and b ( a = \u0338 b ) ; move point a from ( x_ a, y_ a) to either ( x_ a + 1, y_ a) or ( x_ a, y_ a + 1) ; move point b from ( x_ b, y_ b) to either ( x_ b + 1, y_ b) or ( x_ b, y_ b + 1) ; remove points a and b . However, the move can only be performed if there exists a line that passes through the new coordinates of a , new coordinates of b and ( 0, 0) . Otherwise, the move can' t be performed and the points stay at their original coordinates ( x_ a, y_ a) and ( x_ b, y_ b) , respectively. The numeration of points does not change after some points are removed. Once the points are removed, they can' t be chosen in any later moves. Note that you have to move both points during the move, you can' t leave them at their original coordinates. What is the maximum number of moves you can perform? What are these moves? If there are multiple answers, you can print any of them.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of points. The i - th of the next n lines contains four integers a_ i, b_ i, c_ i, d_ i ( 1 \u2264 a_ i, b_ i, c_ i, d_ i \u2264 10^ 9 ) . The coordinates of the i - th point are x_ i = a_ i/ b_ i and y_ i = c_ i/ d_ i .",
    "output": "In the first line print a single integer c \u2014 the maximum number of moves you can perform. Each of the next c lines should contain a description of a move: two integers a and b ( 1 \u2264 a, b \u2264 n , a = \u0338 b ) \u2014 the points that are removed during the current move. There should be a way to move points a and b according to the statement so that there' s a line that passes through the new coordinates of a , the new coordinates of b and ( 0, 0) . No removed point can be chosen in a later move. If there are multiple answers, you can print any of them. You can print the moves and the points in the move in the arbitrary order.",
    "note": "Here are the points and the moves for the ones that get chosen for the moves from the first example:",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "geometry",
      "graphs",
      "sortings",
      "trees"
    ]
  },
  {
    "title": "Berland Regional",
    "url": "https://codeforces.com/problemset/problem/1519/C",
    "history": "Polycarp is an organizer of a Berland ICPC regional event. There are n universities in Berland numbered from 1 to n . Polycarp knows all competitive programmers in the region. There are n students: the i - th student is enrolled at a university u_ i and has a programming skill s_ i . Polycarp has to decide on the rules now. In particular, the number of members in the team. Polycarp knows that if he chooses the size of the team to be some integer k , each university will send their k strongest ( with the highest programming skill s ) students in the first team, the next k strongest students in the second team and so on. If there are fewer than k students left, then the team can' t be formed. Note that there might be universities that send zero teams. The strength of the region is the total skill of the members of all present teams. If there are no teams present, then the strength is 0 . Help Polycarp to find the strength of the region for each choice of k from 1 to n .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of testcases. The first line of each testcase contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of universities and the number of students. The second line of each testcase contains n integers u_ 1, u_ 2, . . . , u_ n ( 1 \u2264 u_ i \u2264 n ) \u2014 the university the i - th student is enrolled at. The third line of each testcase contains n integers s_ 1, s_ 2, . . . , s_ n ( 1 \u2264 s_ i \u2264 10^ 9 ) \u2014 the programming skill of the i - th student. The sum of n over all testcases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each testcase print n integers: the strength of the region \u2014 the total skill of the members of the present teams \u2014 for each choice of team size k .",
    "note": "In the first testcase the teams from each university for each k are: k= 1 : university 1 : [ 6] , [ 5] , [ 5] , [ 3] ; university 2 : [ 8] , [ 1] , [ 1] ; k= 2 : university 1 : [ 6, 5] , [ 5, 3] ; university 2 : [ 8, 1] ; k= 3 : university 1 : [ 6, 5, 5] ; university 2 : [ 8, 1, 1] ; k= 4 : university 1 : [ 6, 5, 5, 3] ;",
    "topics": [
      "brute force",
      "data structures",
      "greedy",
      "number theory",
      "sortings"
    ]
  },
  {
    "title": "Morning Jogging",
    "url": "https://codeforces.com/problemset/problem/1517/B",
    "history": "The 2050 volunteers are organizing the \" Run! Chase the Rising Sun\" activity. Starting on Apr 25 at 7: 30 am, runners will complete the 6km trail around the Yunqi town. There are n+ 1 checkpoints on the trail. They are numbered by 0 , 1 , . . . , n . A runner must start at checkpoint 0 and finish at checkpoint n . No checkpoint is skippable \u2014 he must run from checkpoint 0 to checkpoint 1 , then from checkpoint 1 to checkpoint 2 and so on. Look at the picture in notes section for clarification. Between any two adjacent checkpoints, there are m different paths to choose. For any 1\u2264 i\u2264 n , to run from checkpoint i- 1 to checkpoint i , a runner can choose exactly one from the m possible paths. The length of the j - th path between checkpoint i- 1 and i is b_ i, j for any 1\u2264 j\u2264 m and 1\u2264 i\u2264 n . To test the trail, we have m runners. Each runner must run from the checkpoint 0 to the checkpoint n once, visiting all the checkpoints. Every path between every pair of adjacent checkpoints needs to be ran by exactly one runner. If a runner chooses the path of length l_ i between checkpoint i- 1 and i ( 1\u2264 i\u2264 n ) , his tiredness is min_ i= 1^ n l_ i, i. e. the minimum length of the paths he takes. Please arrange the paths of the m runners to minimize the sum of tiredness of them.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10 000 ) . Description of the test cases follows. The first line of each test case contains two integers n and m ( 1 \u2264 n, m \u2264 100 ) . The i - th of the next n lines contains m integers b_ i, 1 , b_ i, 2 , . . . , b_ i, m ( 1 \u2264 b_ i, j\u2264 10^ 9 ) . It is guaranteed that the sum of n\u00b7 m over all test cases does not exceed 10^ 4 .",
    "output": "For each test case, output n lines. The j - th number in the i - th line should contain the length of the path that runner j chooses to run from checkpoint i- 1 to checkpoint i . There should be exactly m integers in the i - th line and these integers should form a permuatation of b_ i, 1 , . . . , b_ i, m for all 1\u2264 i\u2264 n . If there are multiple answers, print any.",
    "note": "In the first case, the sum of tiredness is min( 2, 5) + min( 3, 3) + min( 4, 1) = 6 . In the second case, the sum of tiredness is min( 2, 4, 3) + min( 3, 1, 5) = 3 .",
    "topics": [
      "constructive algorithms",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Phoenix and Diamonds",
    "url": "https://codeforces.com/problemset/problem/1515/I",
    "history": "Phoenix wonders what it is like to rob diamonds from a jewelry store! There are n types of diamonds. The i - th type has weight w_ i and value v_ i . The store initially has a_ i diamonds of the i - th type. Each day, for q days, one of the following will happen: A new shipment of k_ i diamonds of type d_ i arrive. The store sells k_ i diamonds of type d_ i . Phoenix wonders what will happen if he robs the store using a bag that can fit diamonds with total weight not exceeding c_ i . If he greedily takes diamonds of the largest value that fit, how much value would be taken? If there are multiple diamonds with the largest value, he will take the one with minimum weight. If, of the diamonds with the largest value, there are multiple with the same minimum weight, he will take any of them. Of course, since Phoenix is a law- abiding citizen, this is all a thought experiment and he never actually robs any diamonds from the store. This means that queries of type 3 do not affect the diamonds in the store.",
    "input": "The first line contains two integers n and q ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ; 1 \u2264 q \u2264 10^ 5 ) \u2014 the number of types of diamonds and number of days, respectively. The next n lines describe each type of diamond. The i - th line will contain three integers a_ i , w_ i , and v_ i ( 0 \u2264 a_ i \u2264 10^ 5 ; 1 \u2264 w_ i, v_ i \u2264 10^ 5 ) \u2014 the initial number of diamonds of the i - th type, the weight of diamonds of the i - th type, and the value of diamonds of the i - th type, respectively. The next q lines contain the queries. For each query, the first integer of each line is t ( 1 \u2264 t \u2264 3 ) \u2014 the type of query. If t= 1 , then two integers k_ i , d_ i follow ( 1 \u2264 k_ i \u2264 10^ 5 ; 1 \u2264 d_ i \u2264 n ) . This means that a new shipment of k_ i diamonds arrived, each of type d_ i . If t= 2 , then two integers k_ i , d_ i follow ( 1 \u2264 k_ i \u2264 10^ 5 ; 1 \u2264 d_ i \u2264 n ) . This means that the store has sold k_ i diamonds, each of type d_ i . It is guaranteed that the store had the diamonds before they sold them. If t= 3 , an integer c_ i will follow ( 1 \u2264 c_ i \u2264 10^ 18 ) \u2014 the weight capacity of Phoenix' s bag. It is guaranteed that there is at least one query where t= 3 .",
    "output": "Print the answer for each query of the third type ( t= 3 ) .",
    "note": "For the first query where t= 3 , Phoenix can fit 2 diamonds of type 1 , with total weight 6 and value 8 . For the second query where t= 3 , Phoenix will first fit in 3 diamonds of type 3 , then one diamond of type 1 for a total weight of 9 and a value of 16 . Note that diamonds of type 3 are prioritized over type 1 because type 3 has equal value but less weight. For the final query where t= 3 , Phoenix can fit every diamond for a total value of 13 .",
    "topics": [
      "binary search",
      "data structures",
      "sortings"
    ]
  },
  {
    "title": "Phoenix and Bits",
    "url": "https://codeforces.com/problemset/problem/1515/H",
    "history": "Phoenix loves playing with bits \u2014 specifically, by using the bitwise operations AND, OR, and XOR. He has n integers a_ 1, a_ 2, . . . , a_ n , and will perform q of the following queries: replace all numbers a_ i where l \u2264 a_ i \u2264 r with a_ i AND x ; replace all numbers a_ i where l \u2264 a_ i \u2264 r with a_ i OR x ; replace all numbers a_ i where l \u2264 a_ i \u2264 r with a_ i XOR x ; output how many distinct integers a_ i where l \u2264 a_ i \u2264 r . For each query, Phoenix is given l , r , and x . Note that he is considering the values of the numbers, not their indices.",
    "input": "The first line contains two integers n and q ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ; 1 \u2264 q \u2264 10^ 5 ) \u2014 the number of integers and the number of queries, respectively. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i < 2^ 20 ) \u2014 the integers that Phoenix starts with. The next q lines contain the queries. For each query, the first integer of each line is t ( 1 \u2264 t \u2264 4 ) \u2014 the type of query. If t \u2208{ 1, 2, 3} , then three integers l_ i , r_ i , and x_ i will follow ( 0 \u2264 l_ i, r_ i, x_ i < 2^ 20 ; l_ i \u2264 r_ i ) . Otherwise, if t= 4 , two integers l_ i and r_ i will follow ( 0 \u2264 l_ i \u2264 r_ i < 2^ 20 ) . It is guaranteed that there is at least one query where t= 4 .",
    "output": "Print the answer for each query where t= 4 .",
    "note": "In the first example: For the first query, 2 is replaced by 2 AND 2 = 2 and 3 is replaced with 3 AND 2 = 2 . The set of numbers is { 1, 2, 4, 5} . For the second query, there are 3 distinct numbers between 2 and 5 : 2 , 4 , and 5 . For the third query, 2 is replaced by 2 XOR 3 = 1 , 4 is replaced by 4 XOR 3 = 7 , and 5 is replaced by 5 XOR 3 = 6 . The set of numbers is { 1, 6, 7} . For the fourth query, there are 2 distinct numbers between 1 and 6 : 1 and 6 . For the fifth query, 1 is replaced by 1 OR 8 = 9 . The set of numbers is { 6, 7, 9} . For the sixth query, there is one distinct number between 8 and 10 : 9 .",
    "topics": [
      "bitmasks",
      "brute force",
      "data structures",
      "sortings"
    ]
  },
  {
    "title": "Phoenix and Socks",
    "url": "https://codeforces.com/problemset/problem/1515/D",
    "history": "To satisfy his love of matching socks, Phoenix has brought his n socks ( n is even) to the sock store. Each of his socks has a color c_ i and is either a left sock or right sock. Phoenix can pay one dollar to the sock store to either: recolor a sock to any color c' ( 1 \u2264 c' \u2264 n) turn a left sock into a right sock turn a right sock into a left sock The sock store may perform each of these changes any number of times. Note that the color of a left sock doesn' t change when it turns into a right sock, and vice versa. A matching pair of socks is a left and right sock with the same color. What is the minimum cost for Phoenix to make n/ 2 matching pairs? Each sock must be included in exactly one matching pair.",
    "input": "The input consists of multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains three integers n , l , and r ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ; n is even; 0 \u2264 l, r \u2264 n ; l+ r= n ) \u2014 the total number of socks, and the number of left and right socks, respectively. The next line contains n integers c_ i ( 1 \u2264 c_ i \u2264 n ) \u2014 the colors of the socks. The first l socks are left socks, while the next r socks are right socks. It is guaranteed that the sum of n across all the test cases will not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print one integer \u2014 the minimum cost for Phoenix to make n/ 2 matching pairs. Each sock must be included in exactly one matching pair.",
    "note": "In the first test case, Phoenix can pay 2 dollars to: recolor sock 1 to color 2 recolor sock 3 to color 2 There are now 3 matching pairs. For example, pairs ( 1, 4) , ( 2, 5) , and ( 3, 6) are matching. In the second test case, Phoenix can pay 3 dollars to: turn sock 6 from a right sock to a left sock recolor sock 3 to color 1 recolor sock 4 to color 1 There are now 3 matching pairs. For example, pairs ( 1, 3) , ( 2, 4) , and ( 5, 6) are matching.",
    "topics": [
      "greedy",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Baby Ehab's Hyper Apartment",
    "url": "https://codeforces.com/problemset/problem/1514/E",
    "history": "This is an interactive problem. Baby Ehab loves crawling around his apartment. It has n rooms numbered from 0 to n- 1 . For every pair of rooms, a and b , there' s either a direct passage from room a to room b , or from room b to room a , but never both. Baby Ehab wants to go play with Baby Badawy. He wants to know if he could get to him. However, he doesn' t know anything about his apartment except the number of rooms. He can ask the baby sitter two types of questions: is the passage between room a and room b directed from a to b or the other way around? does room x have a passage towards any of the rooms s_ 1 , s_ 2 , . . . , s_ k ? He can ask at most 9n queries of the first type and at most 2n queries of the second type. After asking some questions, he wants to know for every pair of rooms a and b whether there' s a path from a to b or not. A path from a to b is a sequence of passages that starts from room a and ends at room b . InteractionTo ask a question of the first type, use the format: 1 a b ( 0 \u2264 a, b \u2264 n- 1 , a = \u0338 b ) . we will answer with 1 if the passage is from a to b , and 0 if it is from b to a . you can ask at most 9n questions of this type in each test case. To ask a question of the second type, use the format: 2 x k s_ 1 s_ 2 . . . s_ k ( 0 \u2264 x, s_ i \u2264 n- 1 , 0 \u2264 k < n , x = \u0338 s_ i , elements of s are pairwise distinct) . we will answer with 1 if there' s a passage from x to any of the rooms in s , and 0 otherwise. you can ask at most 2n questions of this type in each test case. If we answer with - 1 instead of a valid answer, that means you exceeded the number of queries or made an invalid query. Exit immediately after receiving - 1 and you will see Wrong answer verdict. Otherwise, you can get an arbitrary verdict because your solution will continue to read from a closed stream. After printing a query, do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use: fflush( stdout) or cout. flush( ) in C+ + ; System. out. flush( ) in Java; flush( output) in Pascal; stdout. flush( ) in Python; see the documentation for other languages. Hacks: The first line should contain an integer t \u2014 the number of test cases. The first line of each test case should contain an integer n ( 4 \u2264 n \u2264 100 ) \u2014 the number of rooms. Each of the next n lines should contain a binary string of length n . The j - th character of the i - th string should be 1 if there' s a passage from room i to room j , 0 otherwise. The i - th character of the i - th string should be 0 .",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 30 ) \u2014 the number of test cases you need to solve. Then each test case starts with an integer n ( 4 \u2264 n \u2264 100 ) \u2014 the number of rooms. The sum of n across the test cases doesn' t exceed 500 .",
    "output": "To print the answer for a test case, print a line containing \" 3\" , followed by n lines, each containing a binary string of length n . The j - th character of the i - th string should be 1 if there' s a path from room i to room j , and 0 if there isn' t. The i - th character of the i - th string should be 1 for each valid i . After printing the answer, we will respond with a single integer. If it' s 1 , you printed a correct answer and should keep solving the test cases ( or exit if it is the last one) . If it' s - 1 , you printed a wrong answer and should terminate to get Wrong answer verdict. Otherwise, you can get an arbitrary verdict because your solution will continue to read from a closed stream.",
    "note": "In the given example: The first query asks whether there' s a passage from room 3 to any of the other rooms. The second query asks about the direction of the passage between rooms 0 and 1 . After a couple other queries, we concluded that you can go from any room to any other room except if you start at room 3 , and you can' t get out of this room, so we printed the matrix: 1111111111110001The interactor answered with 1 , telling us the answer is correct.",
    "topics": [
      "binary search",
      "graphs",
      "interactive",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Cut and Stick",
    "url": "https://codeforces.com/problemset/problem/1514/D",
    "history": "Baby Ehab has a piece of Cut and Stick with an array a of length n written on it. He plans to grab a pair of scissors and do the following to it: pick a range ( l, r) and cut out every element a_ l , a_ l + 1 , . . . , a_ r in this range; stick some of the elements together in the same order they were in the array; end up with multiple pieces, where every piece contains some of the elements and every element belongs to some piece. More formally, he partitions the sequence a_ l , a_ l + 1 , . . . , a_ r into subsequences. He thinks a partitioning is beautiful if for every piece ( subsequence) it holds that, if it has length x , then no value occurs strictly more than \u2308x/ 2\u2309 times in it. He didn' t pick a range yet, so he' s wondering: for q ranges ( l, r) , what is the minimum number of pieces he needs to partition the elements a_ l , a_ l + 1 , . . . , a_ r into so that the partitioning is beautiful. A sequence b is a subsequence of an array a if b can be obtained from a by deleting some ( possibly zero) elements. Note that it does not have to be contiguous.",
    "input": "The first line contains two integers n and q ( 1 \u2264 n, q \u2264 3 \u00b7 10^ 5 ) \u2014 the length of the array a and the number of queries. The second line contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 the elements of the array a . Each of the next q lines contains two integers l and r ( 1 \u2264 l \u2264 r \u2264 n ) \u2014 the range of this query.",
    "output": "For each query, print the minimum number of subsequences you need to partition this range into so that the partitioning is beautiful. We can prove such partitioning always exists.",
    "note": "In the first query, you can just put the whole array in one subsequence, since its length is 6 , and no value occurs more than 3 times in it. In the second query, the elements of the query range are [ 3, 2, 3, 3] . You can' t put them all in one subsequence, since its length is 4 , and 3 occurs more than 2 times. However, you can partition it into two subsequences: [ 3] and [ 2, 3, 3] .",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Swapping Problem",
    "url": "https://codeforces.com/problemset/problem/1513/F",
    "history": "You are given 2 arrays a and b , both of size n . You can swap two elements in b at most once ( or leave it as it is) , and you are required to minimize the value \u2211_ i| a_ i- b_ i| . Find the minimum possible value of this sum.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u226410^ 9 ) . The third line contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u226410^ 9 ) .",
    "output": "Output the minimum value of \u2211_ i| a_ i- b_ i| .",
    "note": "In the first example, we can swap the first and fifth element in array b , so that it becomes [ 5, 2, 3, 4, 1 ] . Therefore, the minimum possible value of this sum would be | 5- 5| + | 4- 2| + | 3- 3| + | 2- 4| + | 1- 1| = 4 . In the second example, we can swap the first and second elements. So, our answer would be 2 .",
    "topics": [
      "brute force",
      "constructive algorithms",
      "data structures",
      "sortings"
    ]
  },
  {
    "title": "Cost Equilibrium",
    "url": "https://codeforces.com/problemset/problem/1513/E",
    "history": "An array is called beautiful if all the elements in the array are equal. You can transform an array using the following steps any number of times: Choose two indices i and j ( 1 \u2264 i, j \u2264 n ) , and an integer x ( 1 \u2264 x \u2264 a_ i ) . Let i be the source index and j be the sink index. Decrease the i - th element by x , and increase the j - th element by x . The resulting values at i - th and j - th index are a_ i- x and a_ j+ x respectively. The cost of this operation is x \u00b7 | j- i| . Now the i - th index can no longer be the sink and the j - th index can no longer be the source. The total cost of a transformation is the sum of all the costs in step 3 . For example, array [ 0, 2, 3, 3] can be transformed into a beautiful array [ 2, 2, 2, 2] with total cost 1 \u00b7 | 1- 3| + 1 \u00b7 | 1- 4| = 5 . An array is called balanced, if it can be transformed into a beautiful array, and the cost of such transformation is uniquely defined. In other words, the minimum cost of transformation into a beautiful array equals the maximum cost. You are given an array a_ 1, a_ 2, . . . , a_ n of length n , consisting of non- negative integers. Your task is to find the number of balanced arrays which are permutations of the given array. Two arrays are considered different, if elements at some position differ. Since the answer can be large, output it modulo 10^ 9 + 7 .",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the size of the array. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) .",
    "output": "Output a single integer \u2014 the number of balanced permutations modulo 10^ 9+ 7 .",
    "note": "In the first example, [ 1, 2, 3] is a valid permutation as we can consider the index with value 3 as the source and index with value 1 as the sink. Thus, after conversion we get a beautiful array [ 2, 2, 2] , and the total cost would be 2 . We can show that this is the only transformation of this array that leads to a beautiful array. Similarly, we can check for other permutations too. In the second example, [ 0, 0, 4, 4] and [ 4, 4, 0, 0] are balanced permutations. In the third example, all permutations are balanced.",
    "topics": [
      "combinatorics",
      "constructive algorithms",
      "math",
      "sortings"
    ]
  },
  {
    "title": "GCD and MST",
    "url": "https://codeforces.com/problemset/problem/1513/D",
    "history": "You are given an array a of n ( n \u2265 2 ) positive integers and an integer p . Consider an undirected weighted graph of n vertices numbered from 1 to n for which the edges between the vertices i and j ( i< j ) are added in the following manner: If gcd( a_ i, a_ i+ 1, a_ i+ 2, . . . , a_ j) = min( a_ i, a_ i+ 1, a_ i+ 2, . . . , a_ j) , then there is an edge of weight min( a_ i, a_ i+ 1, a_ i+ 2, . . . , a_ j) between i and j . If i+ 1= j , then there is an edge of weight p between i and j . Here gcd( x, y, . . . ) denotes the greatest common divisor ( GCD) of integers x , y , . . . . Note that there could be multiple edges between i and j if both of the above conditions are true, and if both the conditions fail for i and j , then there is no edge between these vertices. The goal is to find the weight of the minimum spanning tree of this graph.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains two integers n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) and p ( 1 \u2264 p \u2264 10^ 9 ) \u2014 the number of nodes and the parameter p . The second line contains n integers a_ 1, a_ 2, a_ 3, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "Output t lines. For each test case print the weight of the corresponding graph.",
    "note": "Here are the graphs for the four test cases of the example ( the edges of a possible MST of the graphs are marked pink) : For test case 1 For test case 2 For test case 3 For test case 4",
    "topics": [
      "constructive algorithms",
      "dsu",
      "graphs",
      "greedy",
      "number theory",
      "sortings"
    ]
  },
  {
    "title": "Tree Calendar",
    "url": "https://codeforces.com/problemset/problem/1508/E",
    "history": "Yuu Koito and Touko Nanami are newlyweds! On the wedding day, Yuu gifted Touko a directed tree with n nodes and rooted at 1 , and a labeling a which is some DFS order of the tree. Every edge in this tree is directed away from the root. After calling dfs( 1) the following algorithm returns a as a DFS order of a tree rooted at 1 : order : = 0a : = array of length n function dfs( u) : order : = order + 1 a[ u] : = order for all v such that there is a directed edge ( u - > v) : dfs( v) Note that there may be different DFS orders for a given tree. Touko likes the present so much she decided to play with it! On each day following the wedding day, Touko performs this procedure once: Among all directed edges u \u2192 v such that a_ u < a_ v , select the edge u' \u2192 v' with the lexicographically smallest pair ( a_ u' , a_ v' ) . Swap a_ u' and a_ v' . Days have passed since their wedding, and Touko has somehow forgotten which date the wedding was and what was the original labeling a ! Fearing that Yuu might get angry, Touko decided to ask you to derive these two pieces of information using the current labeling. Being her good friend, you need to find the number of days that have passed since the wedding, and the original labeling of the tree. However, there is a chance that Touko might have messed up her procedures, which result in the current labeling being impossible to obtain from some original labeling; in that case, please inform Touko as well.",
    "input": "The first line of the input contains an integer n ( 2 \u2264 n \u2264 3 \u00b7 10^ 5 ) \u2014 the number of nodes on the tree. The second line contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 1 \u2264 a_ i \u2264 n , all a_ i are distinct) \u2014 the current labeling of the tree. Each of the next n - 1 lines contains two integers u_ i and v_ i ( 1 \u2264 u, v \u2264 n , u = \u0338 v ) , describing an directed edge from u_ i to v_ i . The edges form a directed tree rooted at 1 .",
    "output": "If the current labeling is impossible to arrive at from any DFS order, print NO. Else, on the first line, print YES. On the second line, print a single integer denoting the number of days since the wedding. On the third line, print n numbers space- separated denoting the original labeling of the tree. If there are multiple correct outputs, print any. This means: you are allowed to output any pair ( DFS order, number of days) , such that we get the current configuration from the DFS order you provided in exactly the number of days you provided.",
    "note": "The following animation showcases the first sample test case. The white label inside the node represents the index of the node i , while the boxed orange label represents the value a_ i .",
    "topics": [
      "brute force",
      "constructive algorithms",
      "data structures",
      "dfs and similar",
      "sortings",
      "trees"
    ]
  },
  {
    "title": "Swap Pass",
    "url": "https://codeforces.com/problemset/problem/1508/D",
    "history": "Based on a peculiar incident at basketball practice, Akari came up with the following competitive programming problem! You are given n points on the plane, no three of which are collinear. The i - th point initially has a label a_ i , in such a way that the labels a_ 1, a_ 2, . . . , a_ n form a permutation of 1, 2, . . . , n . You are allowed to modify the labels through the following operation: Choose two distinct integers i and j between 1 and n . Swap the labels of points i and j , and finally Draw the segment between points i and j . A sequence of operations is valid if after applying all of the operations in the sequence in order, the k - th point ends up having the label k for all k between 1 and n inclusive, and the drawn segments don' t intersect each other internally. Formally, if two of the segments intersect, then they must do so at a common endpoint of both segments. In particular, all drawn segments must be distinct. Find any valid sequence of operations, or say that none exist.",
    "input": "The first line contains an integer n ( 3 \u2264 n \u2264 2000 ) \u2014 the number of points. The i - th of the following n lines contains three integers x_ i , y_ i , a_ i ( - 10^ 6 \u2264 x_ i, y_ i \u2264 10^ 6 , 1 \u2264 a_ i \u2264 n ) , representing that the i - th point has coordinates ( x_ i, y_ i) and initially has label a_ i . It is guaranteed that all points are distinct, no three points are collinear, and the labels a_ 1, a_ 2, . . . , a_ n form a permutation of 1, 2, . . . , n .",
    "output": "If it is impossible to perform a valid sequence of operations, print - 1 . Otherwise, print an integer k ( 0 \u2264 k \u2264n( n - 1) / 2 ) \u2014 the number of operations to perform, followed by k lines, each containing two integers i and j ( 1 \u2264 i, j \u2264 n , i= \u0338 j ) \u2014 the indices of the points chosen for the operation. Note that you are not required to minimize or maximize the value of k . If there are multiple possible answers, you may print any of them.",
    "note": "The following animation showcases the first sample test case. The black numbers represent the indices of the points, while the boxed orange numbers represent their labels. In the second test case, all labels are already in their correct positions, so no operations are necessary.",
    "topics": [
      "constructive algorithms",
      "geometry",
      "sortings"
    ]
  },
  {
    "title": "Triangular Paths",
    "url": "https://codeforces.com/problemset/problem/1506/F",
    "history": "Consider an infinite triangle made up of layers. Let' s number the layers, starting from one, from the top of the triangle ( from top to bottom) . The k - th layer of the triangle contains k points, numbered from left to right. Each point of an infinite triangle is described by a pair of numbers ( r, c) ( 1 \u2264 c \u2264 r ) , where r is the number of the layer, and c is the number of the point in the layer. From each point ( r, c) there are two directed edges to the points ( r+ 1, c) and ( r+ 1, c+ 1) , but only one of the edges is activated. If r + c is even, then the edge to the point ( r+ 1, c) is activated, otherwise the edge to the point ( r+ 1, c+ 1) is activated. Look at the picture for a better understanding. Activated edges are colored in black. Non- activated edges are colored in gray. From the point ( r_ 1, c_ 1) it is possible to reach the point ( r_ 2, c_ 2) , if there is a path between them only from activated edges. For example, in the picture above, there is a path from ( 1, 1) to ( 3, 2) , but there is no path from ( 2, 1) to ( 1, 1) . Initially, you are at the point ( 1, 1) . For each turn, you can: Replace activated edge for point ( r, c) . That is if the edge to the point ( r+ 1, c) is activated, then instead of it, the edge to the point ( r+ 1, c+ 1) becomes activated, otherwise if the edge to the point ( r+ 1, c+ 1) , then instead if it, the edge to the point ( r+ 1, c) becomes activated. This action increases the cost of the path by 1 ; Move from the current point to another by following the activated edge. This action does not increase the cost of the path. You are given a sequence of n points of an infinite triangle ( r_ 1, c_ 1) , ( r_ 2, c_ 2) , . . . , ( r_ n, c_ n) . Find the minimum cost path from ( 1, 1) , passing through all n points in arbitrary order.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) is the number of test cases. Then t test cases follow. Each test case begins with a line containing one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) is the number of points to visit. The second line contains n numbers r_ 1, r_ 2, . . . , r_ n ( 1 \u2264 r_ i \u2264 10^ 9 ) , where r_ i is the number of the layer in which i - th point is located. The third line contains n numbers c_ 1, c_ 2, . . . , c_ n ( 1 \u2264 c_ i \u2264 r_ i ) , where c_ i is the number of the i - th point in the r_ i layer. It is guaranteed that all n points are distinct. It is guaranteed that there is always at least one way to traverse all n points. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output the minimum cost of a path passing through all points in the corresponding test case.",
    "note": " ",
    "topics": [
      "constructive algorithms",
      "graphs",
      "math",
      "shortest paths",
      "sortings"
    ]
  },
  {
    "title": "Flip the Cards",
    "url": "https://codeforces.com/problemset/problem/1503/D",
    "history": "There is a deck of n cards. The i - th card has a number a_ i on the front and a number b_ i on the back. Every integer between 1 and 2n appears exactly once on the cards. A deck is called sorted if the front values are in increasing order and the back values are in decreasing order. That is, if a_ i< a_ i+ 1 and b_ i> b_ i+ 1 for all 1\u2264 i< n . To flip a card i means swapping the values of a_ i and b_ i . You must flip some subset of cards ( possibly, none) , then put all the cards in any order you like. What is the minimum number of cards you must flip in order to sort the deck?",
    "input": "The first line contains a single integer n ( 1\u2264 n\u2264 2\u00b7 10^ 5 ) \u2014 the number of cards. The next n lines describe the cards. The i - th of these lines contains two integers a_ i, b_ i ( 1\u2264 a_ i, b_ i\u2264 2n ) . Every integer between 1 and 2n appears exactly once.",
    "output": "If it is impossible to sort the deck, output \" - 1\" . Otherwise, output the minimum number of flips required to sort the deck.",
    "note": "In the first test case, we flip the cards ( 1, 9) and ( 2, 7) . The deck is then ordered ( 3, 10) , ( 5, 8) , ( 6, 4) , ( 7, 2) , ( 9, 1) . It is sorted because 3< 5< 6< 7< 9 and 10> 8> 4> 2> 1 . In the second test case, it is impossible to sort the deck.",
    "topics": [
      "2-sat",
      "constructive algorithms",
      "data structures",
      "greedy",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Travelling Salesman Problem",
    "url": "https://codeforces.com/problemset/problem/1503/C",
    "history": "There are n cities numbered from 1 to n , and city i has beauty a_ i . A salesman wants to start at city 1 , visit every city exactly once, and return to city 1 . For all i j , a flight from city i to city j costs max( c_ i, a_ j- a_ i) dollars, where c_ i is the price floor enforced by city i . Note that there is no absolute value. Find the minimum total cost for the salesman to complete his trip.",
    "input": "The first line contains a single integer n ( 2\u2264 n\u2264 10^ 5 ) \u2014 the number of cities. The i - th of the next n lines contains two integers a_ i , c_ i ( 0\u2264 a_ i, c_ i\u2264 10^ 9 ) \u2014 the beauty and price floor of the i - th city.",
    "output": "Output a single integer \u2014 the minimum total cost.",
    "note": "In the first test case, we can travel in order 1\u2192 3\u2192 2\u2192 1 . The flight 1\u2192 3 costs max( c_ 1, a_ 3- a_ 1) = max( 9, 4- 1) = 9 . The flight 3\u2192 2 costs max( c_ 3, a_ 2- a_ 3) = max( 1, 2- 4) = 1 . The flight 2\u2192 1 costs max( c_ 2, a_ 1- a_ 2) = max( 1, 1- 2) = 1 . The total cost is 11 , and we cannot do better.",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "greedy",
      "shortest paths",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Napoleon Cake",
    "url": "https://codeforces.com/problemset/problem/1501/B",
    "history": "This week Arkady wanted to cook some pancakes ( to follow ancient traditions) and make a problem about that. But then he remembered that one can' t make a problem about stacking pancakes without working at a specific IT company, so he decided to bake the Napoleon cake instead. To bake a Napoleon cake, one has to bake n dry layers first, and then put them on each other in one stack, adding some cream. Arkady started with an empty plate, and performed the following steps n times: place a new cake layer on the top of the stack; after the i - th layer is placed, pour a_ i units of cream on top of the stack. When x units of cream are poured on the top of the stack, top x layers of the cake get drenched in the cream. If there are less than x layers, all layers get drenched and the rest of the cream is wasted. If x = 0 , no layer gets drenched. The picture represents the first test case of the example. Help Arkady determine which layers of the cake eventually get drenched when the process is over, and which don' t.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 20 000 ) . Description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of layers in the cake. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 n ) \u2014 the amount of cream poured on the cake after adding each layer. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print a single line with n integers. The i - th of the integers should be equal to 1 if the i - th layer from the bottom gets drenched, and 0 otherwise.",
    "note": " ",
    "topics": [
      "dp",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Tiles for Bathroom",
    "url": "https://codeforces.com/problemset/problem/1500/D",
    "history": "Kostya is extremely busy: he is renovating his house! He needs to hand wallpaper, assemble furniture throw away trash. Kostya is buying tiles for bathroom today. He is standing in front of a large square stand with tiles in a shop. The stand is a square of n \u00d7 n cells, each cell of which contains a small tile with color c_ i, j . The shop sells tiles in packs: more specifically, you can only buy a subsquare of the initial square. A subsquare is any square part of the stand, i. e. any set S( i_ 0, j_ 0, k) = { c_ i, j | i_ 0 \u2264 i < i_ 0 + k, j_ 0 \u2264 j < j_ 0 + k} with 1 \u2264 i_ 0, j_ 0 \u2264 n - k + 1 . Kostya still does not know how many tiles he needs, so he considers the subsquares of all possible sizes. He doesn' t want his bathroom to be too colorful. Help Kostya to count for each k \u2264 n the number of subsquares of size k \u00d7 k that have at most q different colors of tiles. Two subsquares are considered different if their location on the stand is different.",
    "input": "The first line contains two integers n and q ( 1 \u2264 n \u2264 1500 , 1 \u2264 q \u2264 10 ) \u2014 the size of the stand and the limit on the number of distinct colors in a subsquare. Each of the next n lines contains n integers c_ i, j ( 1 \u2264 c_ i, j\u2264 n^ 2 ) : the j - th integer in the i - th line is the color of the tile in the cell ( i, j) .",
    "output": "For each k from 1 to n print a single integer \u2014 the number of subsquares of size k \u00d7 k with no more than q different colors.",
    "note": "In the first example all colors are distinct. Kostya doesn' t want the subsquare have more than 4 colors, so he can buy any subsquare of size 1 \u00d7 1 or 2 \u00d7 2 , but he can' t buy a subsquare of size 3 \u00d7 3 . In the second example there are colors that appear multiple times. Because q = 8 , Kostya can buy any subsquare of size 1 \u00d7 1 and 2 \u00d7 2 , and any subsquare 3 \u00d7 3 , because of such subsquare has 7 different colors. He can' t buy the whole stand 4 \u00d7 4 , because there are 9 colors.",
    "topics": [
      "data structures",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Two Houses",
    "url": "https://codeforces.com/problemset/problem/1498/E",
    "history": "This is an interactive problem. Remember to flush your output while communicating with the testing program. You may use fflush( stdout) in C+ + , system. out. flush( ) in Java, stdout. flush( ) in Python or flush( output) in Pascal to flush the output. If you use some other programming language, consult its documentation. You may also refer to the guide on interactive problems: https: / / codeforces. com/ blog/ entry/ 45307. There is a city in which Dixit lives. In the city, there are n houses. There is exactly one directed road between every pair of houses. For example, consider two houses A and B, then there is a directed road either from A to B or from B to A but not both. The number of roads leading to the i - th house is k_ i . Two houses A and B are bi- reachable if A is reachable from B and B is reachable from A. We say that house B is reachable from house A when there is a path from house A to house B. Dixit wants to buy two houses in the city, that is, one for living and one for studying. Of course, he would like to travel from one house to another. So, he wants to find a pair of bi- reachable houses A and B. Among all such pairs, he wants to choose one with the maximum value of | k_ A - k_ B| , where k_ i is the number of roads leading to the house i . If more than one optimal pair exists, any of them is suitable. Since Dixit is busy preparing CodeCraft, can you help him find the desired pair of houses, or tell him that no such houses exist? In the problem input, you are not given the direction of each road. You are given \u2014 for each house \u2014 only the number of incoming roads to that house ( k_ i ) . You are allowed to ask only one type of query from the judge: give two houses A and B, and the judge answers whether B is reachable from A. There is no upper limit on the number of queries. But, you cannot ask more queries after the judge answers \" Yes\" to any of your queries. Also, you cannot ask the same query twice. Once you have exhausted all your queries ( or the judge responds \" Yes\" to any of your queries) , your program must output its guess for the two houses and quit. See the Interaction section below for more details. InteractionTo ask a query, print \" ? A B\" ( 1 \u2264 A, B \u2264 N, A= \u0338 B) . The judge will respond \" Yes\" if house B is reachable from house A, or \" No\" otherwise. To output the final answer, print \" ! A B\" , where A and B are bi- reachable with the maximum possible value of | k_ A - k_ B| . If there does not exist such pair of houses A and B, output \" ! 0 0\" . After outputting the final answer, your program must terminate immediately, otherwise you will receive Wrong Answer verdict. You cannot ask the same query twice. There is no upper limit to the number of queries you ask, but, you cannot ask more queries after the judge answers \" Yes\" to any of your queries. Your program must now output the final answer ( \" ! A B\" or \" ! 0 0\" ) and terminate. If you ask a query in incorrect format or repeat a previous query, you will get Wrong Answer verdict. After printing a query do not forget to output the end of the line and flush the output. Otherwise, you will get the Idleness limit exceeded error. To do this, use: fflush( stdout) or cout. flush( ) in C+ + ; System. out. flush( ) in Java; flush( output) in Pascal; stdout. flush( ) in Python; see documentation for other languages.",
    "input": "The first line contains a single integer n ( 3 \u2264 n \u2264 500 ) denoting the number of houses in the city. The next line contains n space- separated integers k_ 1, k_ 2, . . . , k_ n ( 0 \u2264 k_ i \u2264 n - 1 ) , the i - th of them represents the number of incoming roads to the i - th house.",
    "output": " ",
    "note": "In the first sample input, we are given a city of three houses with one incoming road each. The user program asks one query: \" ? 1 2\" : asking whether we can reach from house 1 to house 2 . The judge responds with \" Yes\" . The user program now concludes that this is sufficient information to determine the correct answer. So, it outputs \" ! 1 2\" and quits. In the second sample input, the user program queries for six different pairs of houses, and finally answers \" ! 0 0\" as it is convinced that no two houses as desired in the question exist in this city.",
    "topics": [
      "brute force",
      "graphs",
      "greedy",
      "interactive",
      "sortings"
    ]
  },
  {
    "title": "Meximization",
    "url": "https://codeforces.com/problemset/problem/1497/A",
    "history": "You are given an integer n and an array a_ 1, a_ 2, . . . , a_ n . You should reorder the elements of the array a in such way that the sum of MEX on prefixes ( i - th prefix is a_ 1, a_ 2, . . . , a_ i ) is maximized. Formally, you should find an array b_ 1, b_ 2, . . . , b_ n , such that the sets of elements of arrays a and b are equal ( it is equivalent to array b can be found as an array a with some reordering of its elements) and \u2211_ i= 1^ nMEX( b_ 1, b_ 2, . . . , b_ i) is maximized. MEX of a set of nonnegative integers is the minimal nonnegative integer such that it is not in the set. For example, MEX( { 1, 2, 3} ) = 0 , MEX( { 0, 1, 2, 4, 5} ) = 3 .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 100) . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 100) .",
    "output": "For each test case print an array b_ 1, b_ 2, . . . , b_ n \u2014 the optimal reordering of a_ 1, a_ 2, . . . , a_ n , so the sum of MEX on its prefixes is maximized. If there exist multiple optimal answers you can find any.",
    "note": "In the first test case in the answer MEX for prefixes will be: MEX( { 0} ) = 1 MEX( { 0, 1} ) = 2 MEX( { 0, 1, 2} ) = 3 MEX( { 0, 1, 2, 3} ) = 4 MEX( { 0, 1, 2, 3, 4} ) = 5 MEX( { 0, 1, 2, 3, 4, 7} ) = 5 MEX( { 0, 1, 2, 3, 4, 7, 3} ) = 5 The sum of MEX = 1 + 2 + 3 + 4 + 5 + 5 + 5 = 25 . It can be proven, that it is a maximum possible sum of MEX on prefixes.",
    "topics": [
      "brute force",
      "data structures",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Diamond Miner",
    "url": "https://codeforces.com/problemset/problem/1495/A",
    "history": "Diamond Miner is a game that is similar to Gold Miner, but there are n miners instead of 1 in this game. The mining area can be described as a plane. The n miners can be regarded as n points on the y- axis. There are n diamond mines in the mining area. We can regard them as n points on the x- axis. For some reason, no miners or diamond mines can be at the origin ( point ( 0, 0) ) . Every miner should mine exactly one diamond mine. Every miner has a hook, which can be used to mine a diamond mine. If a miner at the point ( a, b) uses his hook to mine a diamond mine at the point ( c, d) , he will spend \u221a( ( a- c) ^ 2+ ( b- d) ^ 2) energy to mine it ( the distance between these points) . The miners can' t move or help each other. The object of this game is to minimize the sum of the energy that miners spend. Can you find this minimum?",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1\u2264 t\u2264 10 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of miners and mines. Each of the next 2n lines contains two space- separated integers x ( - 10^ 8 \u2264 x \u2264 10^ 8 ) and y ( - 10^ 8 \u2264 y \u2264 10^ 8 ) , which represent the point ( x, y) to describe a miner' s or a diamond mine' s position. Either x = 0 , meaning there is a miner at the point ( 0, y) , or y = 0 , meaning there is a diamond mine at the point ( x, 0) . There can be multiple miners or diamond mines at the same point. It is guaranteed that no point is at the origin. It is guaranteed that the number of points on the x- axis is equal to n and the number of points on the y- axis is equal to n . It' s guaranteed that the sum of n for all test cases does not exceed 10^ 5 .",
    "output": "For each test case, print a single real number \u2014 the minimal sum of energy that should be spent. Your answer is considered correct if its absolute or relative error does not exceed 10^ - 9 . Formally, let your answer be a , and the jury' s answer be b . Your answer is accepted if and only if | a - b| / max( 1, | b| ) \u2264 10^ - 9 .",
    "note": "In the first test case, the miners are at ( 0, 1) and ( 0, - 1) , while the diamond mines are at ( 1, 0) and ( - 2, 0) . If you arrange the miners to get the diamond mines in the way, shown in the picture, you can get the sum of the energy \u221a( 2) + \u221a( 5) .",
    "topics": [
      "geometry",
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Dogeforces",
    "url": "https://codeforces.com/problemset/problem/1494/D",
    "history": "The Dogeforces company has k employees. Each employee, except for lower- level employees, has at least 2 subordinates. Lower- level employees have no subordinates. Each employee, except for the head of the company, has exactly one direct supervisor. The head of the company is a direct or indirect supervisor of all employees. It is known that in Dogeforces, each supervisor receives a salary strictly more than all his subordinates. The full structure of the company is a secret, but you know the number of lower- level employees and for each pair of lower- level employees, the salary of their common supervisor is known ( if there are several such supervisors, then the supervisor with the minimum salary) . You have to restore the structure of the company.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 500 ) \u2014 the number of lower- level employees. This is followed by n lines, where i - th line contains n integers a_ i, 1, a_ i, 2, . . . , a_ i, n ( 1 \u2264 a_ i, j\u2264 5000 ) \u2014 salary of the common supervisor of employees with numbers i and j . It is guaranteed that a_ i, j = a_ j, i . Note that a_ i, i is equal to the salary of the i - th employee.",
    "output": "In the first line, print a single integer k \u2014 the number of employees in the company. In the second line, print k integers c_ 1, c_ 2, . . . , c_ k , where c_ i is the salary of the employee with the number i . In the third line, print a single integer r \u2014 the number of the employee who is the head of the company. In the following k- 1 lines, print two integers v and u ( 1 \u2264 v, u \u2264 k ) \u2014 the number of the employee and his direct supervisor. Note that the lower- level employees have numbers from 1 to n , and for the rest of the employees, you have to assign numbers from n+ 1 to k . If there are several correct company structures, you can print any of them.",
    "note": "One of the possible structures in the first example:",
    "topics": [
      "constructive algorithms",
      "data structures",
      "dfs and similar",
      "divide and conquer",
      "dsu",
      "greedy",
      "sortings",
      "trees"
    ]
  },
  {
    "title": "GCD of an Array",
    "url": "https://codeforces.com/problemset/problem/1493/D",
    "history": "You are given an array a of length n . You are asked to process q queries of the following format: given integers i and x , multiply a_ i by x . After processing each query you need to output the greatest common divisor ( GCD) of all elements of the array a . Since the answer can be too large, you are asked to output it modulo 10^ 9+ 7 .",
    "input": "The first line contains two integers \u2014 n and q ( 1 \u2264 n, q \u2264 2 \u00b7 10^ 5 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 2 \u00b7 10^ 5 ) \u2014 the elements of the array a before the changes. The next q lines contain queries in the following format: each line contains two integers i and x ( 1 \u2264 i \u2264 n , 1 \u2264 x \u2264 2 \u00b7 10^ 5 ) .",
    "output": "Print q lines: after processing each query output the GCD of all elements modulo 10^ 9+ 7 on a separate line.",
    "note": "After the first query the array is [ 12, 6, 8, 12] , gcd( 12, 6, 8, 12) = 2 . After the second query \u2014 [ 12, 18, 8, 12] , gcd( 12, 18, 8, 12) = 2 . After the third query \u2014 [ 12, 18, 24, 12] , gcd( 12, 18, 24, 12) = 6 . Here the gcd function denotes the greatest common divisor.",
    "topics": [
      "brute force",
      "data structures",
      "hashing",
      "implementation",
      "math",
      "number theory",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Equalize the Array",
    "url": "https://codeforces.com/problemset/problem/1490/F",
    "history": "Polycarp was gifted an array a of length n . Polycarp considers an array beautiful if there exists a number C , such that each number in the array occurs either zero or C times. Polycarp wants to remove some elements from the array a to make it beautiful. For example, if n= 6 and a = [ 1, 3, 2, 1, 4, 2] , then the following options are possible to make the array a array beautiful: Polycarp removes elements at positions 2 and 5 , array a becomes equal to [ 1, 2, 1, 2] ; Polycarp removes elements at positions 1 and 6 , array a becomes equal to [ 3, 2, 1, 4] ; Polycarp removes elements at positions 1, 2 and 6 , array a becomes equal to [ 2, 1, 4] ; Help Polycarp determine the minimum number of elements to remove from the array a to make it beautiful.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of each test case consists of one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the array a . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 array a . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output one integer \u2014 the minimum number of elements that Polycarp has to remove from the array a to make it beautiful.",
    "note": " ",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Cheap Dinner",
    "url": "https://codeforces.com/problemset/problem/1487/E",
    "history": "Ivan wants to have a good dinner. A good dinner should consist of a first course, a second course, a drink, and a dessert. There are n_ 1 different types of first courses Ivan can buy ( the i - th of them costs a_ i coins) , n_ 2 different types of second courses ( the i - th of them costs b_ i coins) , n_ 3 different types of drinks ( the i - th of them costs c_ i coins) and n_ 4 different types of desserts ( the i - th of them costs d_ i coins) . Some dishes don' t go well with each other. There are m_ 1 pairs of first courses and second courses that don' t go well with each other, m_ 2 pairs of second courses and drinks, and m_ 3 pairs of drinks and desserts that don' t go well with each other. Ivan wants to buy exactly one first course, one second course, one drink, and one dessert so that they go well with each other, and the total cost of the dinner is the minimum possible. Help him to find the cheapest dinner option!",
    "input": "The first line contains four integers n_ 1 , n_ 2 , n_ 3 and n_ 4 ( 1 \u2264 n_ i \u2264 150000 ) \u2014 the number of types of first courses, second courses, drinks and desserts, respectively. Then four lines follow. The first line contains n_ 1 integers a_ 1, a_ 2, . . . , a_ n_ 1 ( 1 \u2264 a_ i \u2264 10^ 8 ) , where a_ i is the cost of the i - th type of first course. Three next lines denote the costs of second courses, drinks, and desserts in the same way ( 1 \u2264 b_ i, c_ i, d_ i \u2264 10^ 8 ) . The next line contains one integer m_ 1 ( 0 \u2264 m_ 1 \u2264 200000 ) \u2014 the number of pairs of first and second courses that don' t go well with each other. Each of the next m_ 1 lines contains two integers x_ i and y_ i ( 1 \u2264 x_ i \u2264 n_ 1 ; 1 \u2264 y_ i \u2264 n_ 2 ) denoting that the first course number x_ i doesn' t go well with the second course number y_ i . All these pairs are different. The block of pairs of second dishes and drinks that don' t go well with each other is given in the same format. The same for pairs of drinks and desserts that don' t go well with each other ( 0 \u2264 m_ 2, m_ 3 \u2264 200000 ) .",
    "output": "If it' s impossible to choose a first course, a second course, a drink, and a dessert so that they go well with each other, print - 1 . Otherwise, print one integer \u2014 the minimum total cost of the dinner.",
    "note": "The best option in the first example is to take the first course 2 , the second course 1 , the drink 2 and the dessert 1 . In the second example, the only pair of the first course and the second course is bad, so it' s impossible to have dinner.",
    "topics": [
      "brute force",
      "data structures",
      "graphs",
      "greedy",
      "implementation",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Arena",
    "url": "https://codeforces.com/problemset/problem/1487/A",
    "history": "n heroes fight against each other in the Arena. Initially, the i - th hero has level a_ i . Each minute, a fight between two different heroes occurs. These heroes can be chosen arbitrarily ( it' s even possible that it is the same two heroes that were fighting during the last minute) . When two heroes of equal levels fight, nobody wins the fight. When two heroes of different levels fight, the one with the higher level wins, and his level increases by 1 . The winner of the tournament is the first hero that wins in at least 100^ 500 fights ( note that it' s possible that the tournament lasts forever if no hero wins this number of fights, then there is no winner) . A possible winner is a hero such that there exists a sequence of fights that this hero becomes the winner of the tournament. Calculate the number of possible winners among n heroes.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 500 ) \u2014 the number of test cases. Each test case consists of two lines. The first line contains one integer n ( 2 \u2264 n \u2264 100 ) \u2014 the number of heroes. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 100 ) , where a_ i is the initial level of the i - th hero.",
    "output": "For each test case, print one integer \u2014 the number of possible winners among the given n heroes.",
    "note": "In the first test case of the example, the only possible winner is the first hero. In the second test case of the example, each fight between the heroes results in nobody winning it, so the tournament lasts forever and there is no winner.",
    "topics": [
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Eastern Exhibition",
    "url": "https://codeforces.com/problemset/problem/1486/B",
    "history": "You and your friends live in n houses. Each house is located on a 2D plane, in a point with integer coordinates. There might be different houses located in the same point. The mayor of the city is asking you for places for the building of the Eastern exhibition. You have to find the number of places ( points with integer coordinates) , so that the summary distance from all the houses to the exhibition is minimal. The exhibition can be built in the same point as some house. The distance between two points ( x_ 1, y_ 1) and ( x_ 2, y_ 2) is | x_ 1 - x_ 2| + | y_ 1 - y_ 2| , where | x| is the absolute value of x .",
    "input": "First line contains a single integer t ( 1 \u2264 t \u2264 1000) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 1000) . Next n lines describe the positions of the houses ( x_ i, y_ i) ( 0 \u2264 x_ i, y_ i \u2264 10^ 9) . It' s guaranteed that the sum of all n does not exceed 1000 .",
    "output": "For each test case output a single integer - the number of different positions for the exhibition. The exhibition can be built in the same point as some house.",
    "note": "Here are the images for the example test cases. Blue dots stand for the houses, green \u2014 possible positions for the exhibition. First test case. Second test case. Third test case. Fourth test case. Fifth test case. Sixth test case. Here both houses are located at ( 0, 0) .",
    "topics": [
      "binary search",
      "geometry",
      "shortest paths",
      "sortings"
    ]
  },
  {
    "title": "Copy or Prefix Sum",
    "url": "https://codeforces.com/problemset/problem/1485/F",
    "history": "You are given an array of integers b_ 1, b_ 2, . . . , b_ n . An array a_ 1, a_ 2, . . . , a_ n of integers is hybrid if for each i ( 1 \u2264 i \u2264 n ) at least one of these conditions is true: b_ i = a_ i , or b_ i = \u2211_ j= 1^ i a_ j . Find the number of hybrid arrays a_ 1, a_ 2, . . . , a_ n . As the result can be very large, you should print the answer modulo 10^ 9 + 7 .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) . The second line of each test case contains n integers b_ 1, b_ 2, . . . , b_ n ( - 10^ 9 \u2264 b_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n for all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print a single integer: the number of hybrid arrays a_ 1, a_ 2, . . . , a_ n modulo 10^ 9 + 7 .",
    "note": "In the first test case, the hybrid arrays are [ 1, - 2, 1] , [ 1, - 2, 2] , [ 1, - 1, 1] . In the second test case, the hybrid arrays are [ 1, 1, 1, 1] , [ 1, 1, 1, 4] , [ 1, 1, 3, - 1] , [ 1, 1, 3, 4] , [ 1, 2, 0, 1] , [ 1, 2, 0, 4] , [ 1, 2, 3, - 2] , [ 1, 2, 3, 4] . In the fourth test case, the only hybrid array is [ 0, 0, 0, 1] .",
    "topics": [
      "combinatorics",
      "data structures",
      "dp",
      "sortings"
    ]
  },
  {
    "title": "The Great Hero",
    "url": "https://codeforces.com/problemset/problem/1480/B",
    "history": "The great hero guards the country where Homer lives. The hero has attack power A and initial health value B . There are n monsters in front of the hero. The i - th monster has attack power a_ i and initial health value b_ i . The hero or a monster is said to be living, if his or its health value is positive ( greater than or equal to 1 ) ; and he or it is said to be dead, if his or its health value is non- positive ( less than or equal to 0 ) . In order to protect people in the country, the hero will fight with monsters until either the hero is dead or all the monsters are dead. In each fight, the hero can select an arbitrary living monster and fight with it. Suppose the i - th monster is selected, and the health values of the hero and the i - th monster are x and y before the fight, respectively. After the fight, the health values of the hero and the i - th monster become x- a_ i and y- A , respectively. Note that the hero can fight the same monster more than once. For the safety of the people in the country, please tell them whether the great hero can kill all the monsters ( even if the great hero himself is dead after killing the last monster) .",
    "input": "Each test contains multiple test cases. The first line contains t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains three integers A ( 1 \u2264 A \u2264 10^ 6 ) , B ( 1 \u2264 B \u2264 10^ 6 ) and n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the attack power of the great hero, the initial health value of the great hero, and the number of monsters. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 6 ) , where a_ i denotes the attack power of the i - th monster. The third line of each test case contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 10^ 6 ) , where b_ i denotes the initial health value of the i - th monster. It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case print the answer: \" YES\" ( without quotes) if the great hero can kill all the monsters. Otherwise, print \" NO\" ( without quotes) .",
    "note": "In the first example: There will be 6 fights between the hero and the only monster. After that, the monster is dead and the health value of the hero becomes 17 - 6 \u00d7 2 = 5 > 0 . So the answer is \" YES\" , and moreover, the hero is still living. In the second example: After all monsters are dead, the health value of the hero will become 709 , regardless of the order of all fights. So the answer is \" YES\" . In the third example: A possible order is to fight with the 1 - st, 2 - nd, 3 - rd and 4 - th monsters. After all fights, the health value of the hero becomes - 400 . Unfortunately, the hero is dead, but all monsters are also dead. So the answer is \" YES\" . In the fourth example: The hero becomes dead but the monster is still living with health value 1000 - 999 = 1 . So the answer is \" NO\" .",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Nezzar and Symmetric Array",
    "url": "https://codeforces.com/problemset/problem/1478/C",
    "history": "Long time ago there was a symmetric array a_ 1, a_ 2, . . . , a_ 2n consisting of 2n distinct integers. Array a_ 1, a_ 2, . . . , a_ 2n is called symmetric if for each integer 1 \u2264 i \u2264 2n , there exists an integer 1 \u2264 j \u2264 2n such that a_ i = - a_ j . For each integer 1 \u2264 i \u2264 2n , Nezzar wrote down an integer d_ i equal to the sum of absolute differences from a_ i to all integers in a , i. e. d_ i = \u2211_ j = 1^ 2n| a_ i - a_ j| . Now a million years has passed and Nezzar can barely remember the array d and totally forget a . Nezzar wonders if there exists any symmetric array a consisting of 2n distinct integers that generates the array d .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) . The second line of each test case contains 2n integers d_ 1, d_ 2, . . . , d_ 2n ( 0 \u2264 d_ i \u2264 10^ 12 ) . It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, print \" YES\" in a single line if there exists a possible array a . Otherwise, print \" NO\" . You can print letters in any case ( upper or lower) .",
    "note": "In the first test case, a= [ 1, - 3, - 1, 3] is one possible symmetric array that generates the array d= [ 8, 12, 8, 12] . In the second test case, it can be shown that there is no symmetric array consisting of distinct integers that can generate array d .",
    "topics": [
      "implementation",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Nezzar and Nice Beatmap",
    "url": "https://codeforces.com/problemset/problem/1477/C",
    "history": "Nezzar loves the game osu! . osu! is played on beatmaps, which can be seen as an array consisting of distinct points on a plane. A beatmap is called nice if for any three consecutive points A, B, C listed in order, the angle between these three points, centered at B , is strictly less than 90 degrees. Points A, B, C on the left have angle less than 90 degrees, so they can be three consecutive points of a nice beatmap; Points A' , B' , C' on the right have angle greater or equal to 90 degrees, so they cannot be three consecutive points of a nice beatmap. Now Nezzar has a beatmap of n distinct points A_ 1, A_ 2, . . . , A_ n . Nezzar would like to reorder these n points so that the resulting beatmap is nice. Formally, you are required to find a permutation p_ 1, p_ 2, . . . , p_ n of integers from 1 to n , such that beatmap A_ p_ 1, A_ p_ 2, . . . , A_ p_ n is nice. If it is impossible, you should determine it.",
    "input": "The first line contains a single integer n ( 3 \u2264 n \u2264 5000 ) . Then n lines follow, i - th of them contains two integers x_ i , y_ i ( - 10^ 9 \u2264 x_ i, y_ i \u2264 10^ 9 ) \u2014 coordinates of point A_ i . It is guaranteed that all points are distinct.",
    "output": "If there is no solution, print - 1 . Otherwise, print n integers, representing a valid permutation p . If there are multiple possible answers, you can print any.",
    "note": "Here is the illustration for the first test: Please note that the angle between A_ 1 , A_ 2 and A_ 5 , centered at A_ 2 , is treated as 0 degrees. However, angle between A_ 1 , A_ 5 and A_ 2 , centered at A_ 5 , is treated as 180 degrees.",
    "topics": [
      "constructive algorithms",
      "geometry",
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Minimum Difference",
    "url": "https://codeforces.com/problemset/problem/1476/G",
    "history": "You are given an integer array a of size n . You have to perform m queries. Each query has one of two types: \" 1 l r k \" \u2014 calculate the minimum value dif such that there are exist k distinct integers x_ 1, x_ 2, . . . , x_ k such that cnt_ i > 0 ( for every i \u2208 [ 1, k] ) and | cnt_ i - cnt_ j| \u2264 dif ( for every i \u2208 [ 1, k] , j \u2208 [ 1, k] ) , where cnt_ i is the number of occurrences of x_ i in the subarray a[ l. . r] . If it is impossible to choose k integers, report it; \" 2 p x \" \u2014 assign a_ p : = x .",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 10^ 5 ) \u2014 the size of the array a and the number of queries. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 5 ) . Next m lines contain queries ( one per line) . Each query has one of two types: \" 1 l r k \" ( 1 \u2264 l \u2264 r \u2264 n; 1 \u2264 k \u2264 10^ 5 ) \" 2 p x \" ( 1 \u2264 p \u2264 n; 1 \u2264 x \u2264 10^ 5 ) . It' s guaranteed that there is at least one query of the first type.",
    "output": "For each query of the first type, print the minimum value of dif that satisfies all required conditions, or - 1 if it is impossible to choose k distinct integers.",
    "note": " ",
    "topics": [
      "data structures",
      "hashing",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Pattern Matching",
    "url": "https://codeforces.com/problemset/problem/1476/E",
    "history": "You are given n patterns p_ 1, p_ 2, . . . , p_ n and m strings s_ 1, s_ 2, . . . , s_ m . Each pattern p_ i consists of k characters that are either lowercase Latin letters or wildcard characters ( denoted by underscores) . All patterns are pairwise distinct. Each string s_ j consists of k lowercase Latin letters. A string a matches a pattern b if for each i from 1 to k either b_ i is a wildcard character or b_ i= a_ i . You are asked to rearrange the patterns in such a way that the first pattern the j - th string matches is p[ mt_ j] . You are allowed to leave the order of the patterns unchanged. Can you perform such a rearrangement? If you can, then print any valid order.",
    "input": "The first line contains three integers n , m and k ( 1 \u2264 n, m \u2264 10^ 5 , 1 \u2264 k \u2264 4 ) \u2014 the number of patterns, the number of strings and the length of each pattern and string. Each of the next n lines contains a pattern \u2014 k characters that are either lowercase Latin letters or underscores. All patterns are pairwise distinct. Each of the next m lines contains a string \u2014 k lowercase Latin letters, and an integer mt ( 1 \u2264 mt \u2264 n ) \u2014 the index of the first pattern the corresponding string should match.",
    "output": "Print \" NO\" if there is no way to rearrange the patterns in such a way that the first pattern that the j - th string matches is p[ mt_ j] . Otherwise, print \" YES\" in the first line. The second line should contain n distinct integers from 1 to n \u2014 the order of the patterns. If there are multiple answers, print any of them.",
    "note": "The order of patterns after the rearrangement in the first example is the following: aaaa _ _ b_ ab_ _ _ bcd _ b_ d Thus, the first string matches patterns ab_ _ , _ bcd, _ b_ d in that order, the first of them is ab_ _ , that is indeed p[ 4] . The second string matches _ _ b_ and ab_ _ , the first of them is _ _ b_ , that is p[ 2] . The last string matches _ bcd and _ b_ d, the first of them is _ bcd, that is p[ 5] . The answer to that test is not unique, other valid orders also exist. In the second example cba doesn' t match _ _ c, thus, no valid order exists. In the third example the order ( a_ , _ b) makes both strings match pattern 1 first and the order ( _ b, a_ ) makes both strings match pattern 2 first. Thus, there is no order that produces the result 1 and 2 .",
    "topics": [
      "bitmasks",
      "data structures",
      "dfs and similar",
      "graphs",
      "hashing",
      "sortings",
      "strings"
    ]
  },
  {
    "title": "Strange Beauty",
    "url": "https://codeforces.com/problemset/problem/1475/G",
    "history": "Polycarp found on the street an array a of n elements. Polycarp invented his criterion for the beauty of an array. He calls an array a beautiful if at least one of the following conditions must be met for each different pair of indices i j : a_ i is divisible by a_ j ; or a_ j is divisible by a_ i . For example, if: n= 5 and a= [ 7, 9, 3, 14, 63] , then the a array is not beautiful ( for i= 4 and j= 2 , none of the conditions above is met) ; n= 3 and a= [ 2, 14, 42] , then the a array is beautiful; n= 4 and a= [ 45, 9, 3, 18] , then the a array is not beautiful ( for i= 1 and j= 4 none of the conditions above is met) ; Ugly arrays upset Polycarp, so he wants to remove some elements from the array a so that it becomes beautiful. Help Polycarp determine the smallest number of elements to remove to make the array a beautiful.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10 ) \u2014 the number of test cases. Then t test cases follow. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the array a . The second line of each test case contains n numbers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 2 \u00b7 10^ 5 ) \u2014 elements of the array a .",
    "output": "For each test case output one integer \u2014 the minimum number of elements that must be removed to make the array a beautiful.",
    "note": "In the first test case, removing 7 and 14 will make array a beautiful. In the second test case, the array a is already beautiful. In the third test case, removing one of the elements 45 or 18 will make the array a beautiful. In the fourth test case, the array a is beautiful.",
    "topics": [
      "dp",
      "math",
      "number theory",
      "sortings"
    ]
  },
  {
    "title": "Advertising Agency",
    "url": "https://codeforces.com/problemset/problem/1475/E",
    "history": "Masha works in an advertising agency. In order to promote the new brand, she wants to conclude contracts with some bloggers. In total, Masha has connections of n different bloggers. Blogger numbered i has a_ i followers. Since Masha has a limited budget, she can only sign a contract with k different bloggers. Of course, Masha wants her ad to be seen by as many people as possible. Therefore, she must hire bloggers with the maximum total number of followers. Help her, find the number of ways to select k bloggers so that the total number of their followers is maximum possible. Two ways are considered different if there is at least one blogger in the first way, which is not in the second way. Masha believes that all bloggers have different followers ( that is, there is no follower who would follow two different bloggers) . For example, if n= 4 , k= 3 , a= [ 1, 3, 1, 2] , then Masha has two ways to select 3 bloggers with the maximum total number of followers: conclude contracts with bloggers with numbers 1 , 2 and 4 . In this case, the number of followers will be equal to a_ 1 + a_ 2 + a_ 4 = 6 . conclude contracts with bloggers with numbers 2 , 3 and 4 . In this case, the number of followers will be equal to a_ 2 + a_ 3 + a_ 4 = 6 . Since the answer can be quite large, output it modulo 10^ 9+ 7 .",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Then t test cases follow. The first line of each test case contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 1000 ) \u2014 the number of bloggers and how many of them you can sign a contract with. The second line of each test case contains n integers a_ 1, a_ 2, . . . a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 the number of followers of each blogger. It is guaranteed that the sum of n over all test cases does not exceed 1000 .",
    "output": "For each test case, on a separate line output one integer \u2014 the number of ways to select k bloggers so that the total number of their followers is maximum possible.",
    "note": "The test case is explained in the statements. In the second test case, the following ways are valid: conclude contracts with bloggers with numbers 1 and 2 . In this case, the number of followers will be equal to a_ 1 + a_ 2 = 2 ; conclude contracts with bloggers with numbers 1 and 3 . In this case, the number of followers will be equal to a_ 1 + a_ 3 = 2 ; conclude contracts with bloggers with numbers 1 and 4 . In this case, the number of followers will be equal to a_ 1 + a_ 4 = 2 ; conclude contracts with bloggers with numbers 2 and 3 . In this case, the number of followers will be equal to a_ 2 + a_ 3 = 2 ; conclude contracts with bloggers with numbers 2 and 4 . In this case, the number of followers will be equal to a_ 2 + a_ 4 = 2 ; conclude contracts with bloggers with numbers 3 and 4 . In this case, the number of followers will be equal to a_ 3 + a_ 4 = 2 . In the third test case, the following ways are valid: concludes a contract with a blogger with the number 2 . In this case, the number of followers will be equal to a_ 2 = 2 .",
    "topics": [
      "combinatorics",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Cleaning the Phone",
    "url": "https://codeforces.com/problemset/problem/1475/D",
    "history": "Polycarp often uses his smartphone. He has already installed n applications on it. Application with number i takes up a_ i units of memory. Polycarp wants to free at least m units of memory ( by removing some applications) . Of course, some applications are more important to Polycarp than others. He came up with the following scoring system \u2014 he assigned an integer b_ i to each application: b_ i = 1 \u2014 regular application; b_ i = 2 \u2014 important application. According to this rating system, his phone has b_ 1 + b_ 2 + . . . + b_ n convenience points. Polycarp believes that if he removes applications with numbers i_ 1, i_ 2, . . . , i_ k , then he will free a_ i_ 1 + a_ i_ 2 + . . . + a_ i_ k units of memory and lose b_ i_ 1 + b_ i_ 2 + . . . + b_ i_ k convenience points. For example, if n= 5 , m= 7 , a= [ 5, 3, 2, 1, 4] , b= [ 2, 1, 1, 2, 1] , then Polycarp can uninstall the following application sets ( not all options are listed below) : applications with numbers 1, 4 and 5 . In this case, it will free a_ 1+ a_ 4+ a_ 5= 10 units of memory and lose b_ 1+ b_ 4+ b_ 5= 5 convenience points; applications with numbers 1 and 3 . In this case, it will free a_ 1+ a_ 3= 7 units of memory and lose b_ 1+ b_ 3= 3 convenience points. applications with numbers 2 and 5 . In this case, it will free a_ 2+ a_ 5= 7 memory units and lose b_ 2+ b_ 5= 2 convenience points. Help Polycarp, choose a set of applications, such that if removing them will free at least m units of memory and lose the minimum number of convenience points, or indicate that such a set does not exist.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of each test case contains two integers n and m ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 m \u2264 10^ 9 ) \u2014 the number of applications on Polycarp' s phone and the number of memory units to be freed. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the number of memory units used by applications. The third line of each test case contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 2 ) \u2014 the convenience points of each application. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output on a separate line: - 1, if there is no set of applications, removing which will free at least m units of memory; the minimum number of convenience points that Polycarp will lose if such a set exists.",
    "note": "In the first test case, it is optimal to remove applications with numbers 2 and 5 , freeing 7 units of memory. b_ 2+ b_ 5= 2 . In the second test case, by removing the only application, Polycarp will be able to clear only 2 of memory units out of the 3 needed. In the third test case, it is optimal to remove applications with numbers 1 , 2 , 3 and 4 , freeing 10 units of memory. b_ 1+ b_ 2+ b_ 3+ b_ 4= 6 . In the fourth test case, it is optimal to remove applications with numbers 1 , 3 and 4 , freeing 12 units of memory. b_ 1+ b_ 3+ b_ 4= 4 . In the fifth test case, it is optimal to remove applications with numbers 1 and 2 , freeing 5 units of memory. b_ 1+ b_ 2= 3 .",
    "topics": [
      "binary search",
      "dp",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Array Destruction",
    "url": "https://codeforces.com/problemset/problem/1474/C",
    "history": "You found a useless array a of 2n positive integers. You have realized that you actually don' t need this array, so you decided to throw out all elements of a . It could have been an easy task, but it turned out that you should follow some rules: In the beginning, you select any positive integer x . Then you do the following operation n times: select two elements of array with sum equals x ; remove them from a and replace x with maximum of that two numbers. For example, if initially a = [ 3, 5, 1, 2] , you can select x = 6 . Then you can select the second and the third elements of a with sum 5 + 1 = 6 and throw them out. After this operation, x equals 5 and there are two elements in array: 3 and 2 . You can throw them out on the next operation. Note, that you choose x before the start and can' t change it as you want between the operations. Determine how should you behave to throw out all elements of a .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains the single integer n ( 1 \u2264 n \u2264 1000 ) . The second line of each test case contains 2n integers a_ 1, a_ 2, . . . , a_ 2n ( 1 \u2264 a_ i \u2264 10^ 6 ) \u2014 the initial array a . It is guaranteed that the total sum of n over all test cases doesn' t exceed 1000 .",
    "output": "For each test case in the first line print YES if it is possible to throw out all elements of the array and NO otherwise. If it is possible to throw out all elements, print the initial value of x you' ve chosen. Print description of n operations next. For each operation, print the pair of integers you remove.",
    "note": "The first test case was described in the statement. In the second and third test cases, we can show that it is impossible to throw out all elements of array a .",
    "topics": [
      "brute force",
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Replacing Elements",
    "url": "https://codeforces.com/problemset/problem/1473/A",
    "history": "You have an array a_ 1, a_ 2, . . . , a_ n . All a_ i are positive integers. In one step you can choose three distinct indices i , j , and k ( i = \u0338 j ; i = \u0338 k ; j = \u0338 k ) and assign the sum of a_ j and a_ k to a_ i , i. e. make a_ i = a_ j + a_ k . Can you make all a_ i lower or equal to d using the operation above any number of times ( possibly, zero) ?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 2000 ) \u2014 the number of test cases. The first line of each test case contains two integers n and d ( 3 \u2264 n \u2264 100 ; 1 \u2264 d \u2264 100 ) \u2014 the number of elements in the array a and the value d . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 100 ) \u2014 the array a .",
    "output": "For each test case, print YES, if it' s possible to make all elements a_ i less or equal than d using the operation above. Otherwise, print NO. You may print each letter in any case ( for example, YES, Yes, yes, yEs will all be recognized as positive answer) .",
    "note": "In the first test case, we can prove that we can' t make all a_ i \u2264 3 . In the second test case, all a_ i are already less or equal than d = 4 . In the third test case, we can, for example, choose i = 5 , j = 1 , k = 2 and make a_ 5 = a_ 1 + a_ 2 = 2 + 1 = 3 . Array a will become [ 2, 1, 5, 3, 3] . After that we can make a_ 3 = a_ 5 + a_ 2 = 3 + 1 = 4 . Array will become [ 2, 1, 4, 3, 3] and all elements are less or equal than d = 4 .",
    "topics": [
      "greedy",
      "implementation",
      "math",
      "sortings"
    ]
  },
  {
    "title": "New Year's Puzzle",
    "url": "https://codeforces.com/problemset/problem/1472/F",
    "history": "Every year Santa Claus gives gifts to all children. However, each country has its own traditions, and this process takes place in different ways. For example, in Berland you need to solve the New Year' s puzzle. Polycarp got the following problem: given a grid strip of size 2 \u00d7 n , some cells of it are blocked. You need to check if it is possible to tile all free cells using the 2 \u00d7 1 and 1 \u00d7 2 tiles ( dominoes) . For example, if n = 5 and the strip looks like this ( black cells are blocked) : Then it can be tiled, for example, using two vertical and two horizontal tiles, as in the picture below ( different tiles are marked by different colors) . And if n = 3 and the strip looks like this: It is impossible to tile free cells. Polycarp easily solved this task and received his New Year' s gift. Can you solve it?",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. Each test case is preceded by an empty line. The first line of each test case contains two integers n and m ( 1 \u2264 n \u2264 10^ 9 , 1 \u2264 m \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the strip and the number of blocked cells on it. Each of the next m lines contains two integers r_ i, c_ i ( 1 \u2264 r_ i \u2264 2, 1 \u2264 c_ i \u2264 n ) \u2014 numbers of rows and columns of blocked cells. It is guaranteed that all blocked cells are different, i. e. ( r_ i, c_ i) ( r_ j, c_ j) , i j . It is guaranteed that the sum of m over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print on a separate line: \" YES\" , if it is possible to tile all unblocked squares with the 2 \u00d7 1 and 1 \u00d7 2 tiles; \" NO\" otherwise. You can output \" YES\" and \" NO\" in any case ( for example, the strings yEs, yes, Yes and YES will be recognized as positive) .",
    "note": "The first two test cases are explained in the statement. In the third test case the strip looks like this: It is easy to check that the unblocked squares on it can not be tiled.",
    "topics": [
      "brute force",
      "dp",
      "graph matchings",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Correct Placement",
    "url": "https://codeforces.com/problemset/problem/1472/E",
    "history": "Polycarp has invited n friends to celebrate the New Year. During the celebration, he decided to take a group photo of all his friends. Each friend can stand or lie on the side. Each friend is characterized by two values h_ i ( their height) and w_ i ( their width) . On the photo the i - th friend will occupy a rectangle h_ i \u00d7 w_ i ( if they are standing) or w_ i \u00d7 h_ i ( if they are lying on the side) . The j - th friend can be placed in front of the i - th friend on the photo if his rectangle is lower and narrower than the rectangle of the i - th friend. Formally, at least one of the following conditions must be fulfilled: h_ j < h_ i and w_ j < w_ i ( both friends are standing or both are lying) ; w_ j < h_ i and h_ j < w_ i ( one of the friends is standing and the other is lying) . For example, if n = 3 , h= [ 3, 5, 3] and w= [ 4, 4, 3] , then: the first friend can be placed in front of the second: w_ 1 < h_ 2 and h_ 1 < w_ 2 ( one of the them is standing and the other one is lying) ; the third friend can be placed in front of the second: h_ 3 < h_ 2 and w_ 3 < w_ 2 ( both friends are standing or both are lying) . In other cases, the person in the foreground will overlap the person in the background. Help Polycarp for each i find any j , such that the j - th friend can be located in front of the i - th friend ( i. e. at least one of the conditions above is fulfilled) . Please note that you do not need to find the arrangement of all people for a group photo. You just need to find for each friend i any other friend j who can be located in front of him. Think about it as you need to solve n separate independent subproblems.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of friends. This is followed by n lines, each of which contains a description of the corresponding friend. Each friend is described by two integers h_ i and w_ i ( 1 \u2264 h_ i, w_ i \u2264 10^ 9 ) \u2014 height and width of the i - th friend, respectively. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case output n integers on a separate line, where the i - th number is the index of a friend that can be placed in front of the i - th. If there is no such friend, then output - 1. If there are several answers, output any.",
    "note": "The first test case is described in the statement. In the third test case, the following answers are also correct: [ - 1, - 1, 1, 2] ; [ - 1, - 1, 1, 1] ; [ - 1, - 1, 2, 1] .",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Even-Odd Game",
    "url": "https://codeforces.com/problemset/problem/1472/D",
    "history": "During their New Year holidays, Alice and Bob play the following game using an array a of n integers: Players take turns, Alice moves first. Each turn a player chooses any element and removes it from the array. If Alice chooses even value, then she adds it to her score. If the chosen value is odd, Alice' s score does not change. Similarly, if Bob chooses odd value, then he adds it to his score. If the chosen value is even, then Bob' s score does not change. If there are no numbers left in the array, then the game ends. The player with the highest score wins. If the scores of the players are equal, then a draw is declared. For example, if n = 4 and a = [ 5, 2, 7, 3] , then the game could go as follows ( there are other options) : On the first move, Alice chooses 2 and get two points. Her score is now 2 . The array a is now [ 5, 7, 3] . On the second move, Bob chooses 5 and get five points. His score is now 5 . The array a is now [ 7, 3] . On the third move, Alice chooses 7 and get no points. Her score is now 2 . The array a is now [ 3] . On the last move, Bob chooses 3 and get three points. His score is now 8 . The array a is empty now. Since Bob has more points at the end of the game, he is the winner. You want to find out who will win if both players play optimally. Note that there may be duplicate numbers in the array.",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of elements in the array a . The next line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the array a used to play the game. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output on a separate line: \" Alice\" if Alice wins with the optimal play; \" Bob\" if Bob wins with the optimal play; \" Tie\" , if a tie is declared during the optimal play.",
    "note": " ",
    "topics": [
      "dp",
      "games",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Strange Birthday Party",
    "url": "https://codeforces.com/problemset/problem/1470/A",
    "history": "Petya organized a strange birthday party. He invited n friends and assigned an integer k_ i to the i - th of them. Now Petya would like to give a present to each of them. In the nearby shop there are m unique presents available, the j - th present costs c_ j dollars ( 1 \u2264 c_ 1 \u2264 c_ 2 \u2264. . . \u2264 c_ m ) . It' s not allowed to buy a single present more than once. For the i - th friend Petya can either buy them a present j \u2264 k_ i , which costs c_ j dollars, or just give them c_ k_ i dollars directly. Help Petya determine the minimum total cost of hosting his party.",
    "input": "The first input line contains a single integer t ( 1 \u2264 t \u2264 10^ 3 ) \u2014 the number of test cases. The first line of each test case contains two integers n and m ( 1 \u2264 n, m \u2264 3 \u00b7 10^ 5 ) \u2014 the number of friends, and the number of unique presents available. The following line contains n integers k_ 1, k_ 2, . . . , k_ n ( 1 \u2264 k_ i \u2264 m ) , assigned by Petya to his friends. The next line contains m integers c_ 1, c_ 2, . . . , c_ m ( 1 \u2264 c_ 1 \u2264 c_ 2 \u2264. . . \u2264 c_ m \u2264 10^ 9 ) \u2014 the prices of the presents. It is guaranteed that sum of values n over all test cases does not exceed 3 \u00b7 10^ 5 , and the sum of values m over all test cases does not exceed 3 \u00b7 10^ 5 .",
    "output": "For each test case output a single integer \u2014 the minimum cost of the party.",
    "note": "In the first example, there are two test cases. In the first one, Petya has 5 friends and 4 available presents. Petya can spend only 30 dollars if he gives 5 dollars to the first friend. A present that costs 12 dollars to the second friend. A present that costs 5 dollars to the third friend. A present that costs 3 dollars to the fourth friend. 5 dollars to the fifth friend. In the second one, Petya has 5 and 5 available presents. Petya can spend only 190 dollars if he gives A present that costs 10 dollars to the first friend. A present that costs 40 dollars to the second friend. 90 dollars to the third friend. 40 dollars to the fourth friend. 10 dollars to the fifth friend.",
    "topics": [
      "binary search",
      "dp",
      "greedy",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Firecrackers",
    "url": "https://codeforces.com/problemset/problem/1468/D",
    "history": "Consider a long corridor which can be divided into n square cells of size 1 \u00d7 1 . These cells are numbered from 1 to n from left to right. There are two people in this corridor, a hooligan and a security guard. Initially, the hooligan is in the a - th cell, the guard is in the b - th cell ( a b ) . One of the possible situations. The corridor consists of 7 cells, the hooligan is in the 3 - rd cell, the guard is in the 6 - th ( n = 7 , a = 3 , b = 6 ) . There are m firecrackers in the hooligan' s pocket, the i - th firecracker explodes in s_ i seconds after being lit. The following events happen each second ( sequentially, exactly in the following order) : firstly, the hooligan either moves into an adjacent cell ( from the cell i , he can move to the cell ( i + 1) or to the cell ( i - 1) , and he cannot leave the corridor) or stays in the cell he is currently. If the hooligan doesn' t move, he can light one of his firecrackers and drop it. The hooligan can' t move into the cell where the guard is; secondly, some firecrackers that were already dropped may explode. Formally, if the firecracker j is dropped on the T - th second, then it will explode on the ( T + s_ j) - th second ( for example, if a firecracker with s_ j = 2 is dropped on the 4 - th second, it explodes on the 6 - th second) ; finally, the guard moves one cell closer to the hooligan. If the guard moves to the cell where the hooligan is, the hooligan is caught. Obviously, the hooligan will be caught sooner or later, since the corridor is finite. His goal is to see the maximum number of firecrackers explode before he is caught; that is, he will act in order to maximize the number of firecrackers that explodes before he is caught. Your task is to calculate the number of such firecrackers, if the hooligan acts optimally.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Each test case consists of two lines. The first line contains four integers n , m , a and b ( 2 \u2264 n \u2264 10^ 9 ; 1 \u2264 m \u2264 2 \u00b7 10^ 5 ; 1 \u2264 a, b \u2264 n ; a b ) \u2014 the size of the corridor, the number of firecrackers, the initial location of the hooligan and the initial location of the guard, respectively. The second line contains m integers s_ 1 , s_ 2 , . . . , s_ m ( 1 \u2264 s_ i \u2264 10^ 9 ) , where s_ i is the time it takes the i - th firecracker to explode after it is lit. It is guaranteed that the sum of m over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print one integer \u2014 the maximum number of firecrackers that the hooligan can explode before he is caught.",
    "note": "In the first test case, the hooligan should act, for example, as follows: second 1: drop the second firecracker, so it will explode on the 5 - th second. The guard moves to the cell 5 ; second 2: move to the cell 2 . The guard moves to the cell 4 ; second 3: drop the first firecracker, so it will explode on the 4 - th second. The guard moves to the cell 3 ; second 4: move to the cell 1 . The first firecracker explodes. The guard moves to the cell 2 ; second 5: stay in the cell 1 . The second firecracker explodes. The guard moves to the cell 1 and catches the hooligan.",
    "topics": [
      "binary search",
      "sortings"
    ]
  },
  {
    "title": "Euclid's nightmare",
    "url": "https://codeforces.com/problemset/problem/1466/F",
    "history": "You may know that Euclid was a mathematician. Well, as it turns out, Morpheus knew it too. So when he wanted to play a mean trick on Euclid, he sent him an appropriate nightmare. In his bad dream Euclid has a set S of n m - dimensional vectors over the Z_ 2 field and can perform vector addition on them. In other words he has vectors with m coordinates, each one equal either 0 or 1 . Vector addition is defined as follows: let u+ v = w , then w_ i = ( u_ i + v_ i) 2 . Euclid can sum any subset of S and archive another m - dimensional vector over Z_ 2 . In particular, he can sum together an empty subset; in such a case, the resulting vector has all coordinates equal 0 . Let T be the set of all the vectors that can be written as a sum of some vectors from S . Now Euclid wonders the size of T and whether he can use only a subset S' of S to obtain all the vectors from T . As it is usually the case in such scenarios, he will not wake up until he figures this out. So far, things are looking rather grim for the philosopher. But there is hope, as he noticed that all vectors in S have at most 2 coordinates equal 1 . Help Euclid and calculate | T| , the number of m - dimensional vectors over Z_ 2 that can be written as a sum of some vectors from S . As it can be quite large, calculate it modulo 10^ 9+ 7 . You should also find S' , the smallest such subset of S , that all vectors in T can be written as a sum of vectors from S' . In case there are multiple such sets with a minimal number of elements, output the lexicographically smallest one with respect to the order in which their elements are given in the input. Consider sets A and B such that | A| = | B| . Let a_ 1, a_ 2, . . . a_ | A| and b_ 1, b_ 2, . . . b_ | B| be increasing arrays of indices elements of A and B correspondingly. A is lexicographically smaller than B iff there exists such i that a_ j = b_ j for all j < i and a_ i < b_ i .",
    "input": "In the first line of input, there are two integers n , m ( 1 \u2264 n, m \u2264 5 \u00b7 10^ 5 ) denoting the number of vectors in S and the number of dimensions. Next n lines contain the description of the vectors in S . In each of them there is an integer k ( 1 \u2264 k \u2264 2 ) and then follow k distinct integers x_ 1, . . . x_ k ( 1 \u2264 x_ i \u2264 m ) . This encodes an m - dimensional vector having 1 s on coordinates x_ 1, . . . x_ k and 0 s on the rest of them. Among the n vectors, no two are the same.",
    "output": "In the first line, output two integers: remainder modulo 10^ 9+ 7 of | T| and | S' | . In the second line, output | S' | numbers, indices of the elements of S' in ascending order. The elements of S are numbered from 1 in the order they are given in the input.",
    "note": "In the first example we are given three vectors: 10 01 11 It turns out that we can represent all vectors from our 2 - dimensional space using these vectors: 00 is a sum of the empty subset of above vectors; 01 = 11 + 10 , is a sum of the first and third vector; 10 = 10 , is just the first vector; 11 = 10 + 01 , is a sum of the first and the second vector. Hence, T = { 00, 01, 10, 11} . We can choose any two of the three vectors from S and still be able to obtain all the vectors in T . In such a case, we choose the two vectors which appear first in the input. Since we cannot obtain all vectors in T using only a single vector from S , | S' | = 2 and S' = { 10, 01} ( indices 1 and 2 ) , as set { 1, 2 } is lexicographically the smallest. We can represent all vectors from T , using only vectors from S' , as shown below: 00 is a sum of the empty subset; 01 = 01 is just the second vector; 10 = 10 is just the first vector; 11 = 10 + 01 is a sum of the first and the second vector.",
    "topics": [
      "bitmasks",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "13th Labour of Heracles",
    "url": "https://codeforces.com/problemset/problem/1466/D",
    "history": "You' ve probably heard about the twelve labors of Heracles, but do you have any idea about the thirteenth? It is commonly assumed it took him a dozen years to complete the twelve feats, so on average, a year to accomplish every one of them. As time flows faster these days, you have minutes rather than months to solve this task. But will you manage? In this problem, you are given a tree with n weighted vertices. A tree is a connected graph with n - 1 edges. Let us define its k - coloring as an assignment of k colors to the edges so that each edge has exactly one color assigned to it. Note that you don' t have to use all k colors. A subgraph of color x consists of these edges from the original tree, which are assigned color x , and only those vertices that are adjacent to at least one such edge. So there are no vertices of degree 0 in such a subgraph. The value of a connected component is the sum of weights of its vertices. Let us define the value of a subgraph as a maximum of values of its connected components. We will assume that the value of an empty subgraph equals 0 . There is also a value of a k - coloring, which equals the sum of values of subgraphs of all k colors. Given a tree, for each k from 1 to n - 1 calculate the maximal value of a k - coloring.",
    "input": "In the first line of input, there is a single integer t ( 1 \u2264 t \u2264 10^ 5 ) denoting the number of test cases. Then t test cases follow. First line of each test case contains a single integer n ( 2 \u2264 n \u2264 10^ 5 ) . The second line consists of n integers w_ 1, w_ 2, . . . , w_ n ( 0 \u2264 w_ i \u2264 10^ 9 ) , w_ i equals the weight of i - th vertex. In each of the following n - 1 lines, there are two integers u , v ( 1 \u2264 u, v \u2264 n ) describing an edge between vertices u and v . It is guaranteed that these edges form a tree. The sum of n in all test cases will not exceed 2 \u00b7 10^ 5 .",
    "output": "For every test case, your program should print one line containing n - 1 integers separated with a single space. The i - th number in a line should be the maximal value of a i - coloring of the tree.",
    "note": "The optimal k - colorings from the first test case are the following: In the 1 - coloring all edges are given the same color. The subgraph of color 1 contains all the edges and vertices from the original graph. Hence, its value equals 3 + 5 + 4 + 6 = 18 . In an optimal 2 - coloring edges ( 2, 1) and ( 3, 1) are assigned color 1 . Edge ( 4, 3) is of color 2 . Hence the subgraph of color 1 consists of a single connected component ( vertices 1, 2, 3 ) and its value equals 3 + 5 + 4 = 12 . The subgraph of color 2 contains two vertices and one edge. Its value equals 4 + 6 = 10 . In an optimal 3 - coloring all edges are assigned distinct colors. Hence subgraphs of each color consist of a single edge. They values are as follows: 3 + 4 = 7 , 4 + 6 = 10 , 3 + 5 = 8 .",
    "topics": [
      "data structures",
      "greedy",
      "sortings",
      "trees"
    ]
  },
  {
    "title": "Plan of Lectures",
    "url": "https://codeforces.com/problemset/problem/1463/E",
    "history": "Ivan is a programming teacher. During the academic year, he plans to give n lectures on n different topics. Each topic should be used in exactly one lecture. Ivan wants to choose which topic will he explain during the 1 - st, 2 - nd, . . . , n - th lecture \u2014 formally, he wants to choose some permutation of integers from 1 to n ( let' s call this permutation q ) . q_ i is the index of the topic Ivan will explain during the i - th lecture. For each topic ( except exactly one) , there exists a prerequisite topic ( for the topic i , the prerequisite topic is p_ i ) . Ivan cannot give a lecture on a topic before giving a lecture on its prerequisite topic. There exists at least one valid ordering of topics according to these prerequisite constraints. Ordering the topics correctly can help students understand the lectures better. Ivan has k special pairs of topics ( x_ i, y_ i) such that he knows that the students will understand the y_ i - th topic better if the lecture on it is conducted right after the lecture on the x_ i - th topic. Ivan wants to satisfy the constraints on every such pair, that is, for every i \u2208 [ 1, k] , there should exist some j \u2208 [ 1, n - 1] such that q_ j = x_ i and q_ j + 1 = y_ i . Now Ivan wants to know if there exists an ordering of topics that satisfies all these constraints, and if at least one exists, find any of them.",
    "input": "The first line contains two integers n and k ( 2 \u2264 n \u2264 3 \u00b7 10^ 5 , 1 \u2264 k \u2264 n - 1 ) \u2014 the number of topics and the number of special pairs of topics, respectively. The second line contains n integers p_ 1 , p_ 2 , . . . , p_ n ( 0 \u2264 p_ i \u2264 n ) , where p_ i is the prerequisite topic for the topic i ( or p_ i = 0 if the i - th topic has no prerequisite topics) . Exactly one of these integers is 0 . At least one ordering of topics such that for every i the p_ i - th topic is placed before the i - th topic exists. Then k lines follow, the i - th line contains two integers x_ i and y_ i ( 1 \u2264 x_ i, y_ i \u2264 n ; x_ i y_ i ) \u2014 the topics from the i - th special pair. All values of x_ i are pairwise distinct; similarly, all valus of y_ i are pairwise distinct.",
    "output": "If there is no ordering of topics meeting all the constraints, print 0 . Otherwise, print n pairwise distinct integers q_ 1 , q_ 2 , . . . , q_ n ( 1 \u2264 q_ i \u2264 n ) \u2014 the ordering of topics meeting all of the constraints. If there are multiple answers, print any of them.",
    "note": " ",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "dsu",
      "graphs",
      "implementation",
      "sortings",
      "trees"
    ]
  },
  {
    "title": "Close Tuples (hard version)",
    "url": "https://codeforces.com/problemset/problem/1462/E2",
    "history": "This is the hard version of this problem. The only difference between the easy and hard versions is the constraints on k and m . In this version of the problem, you need to output the answer by modulo 10^ 9+ 7 . You are given a sequence a of length n consisting of integers from 1 to n . The sequence may contain duplicates ( i. e. some elements can be equal) . Find the number of tuples of m elements such that the maximum number in the tuple differs from the minimum by no more than k . Formally, you need to find the number of tuples of m indices i_ 1 < i_ 2 < . . . < i_ m , such that max( a_ i_ 1, a_ i_ 2, . . . , a_ i_ m) - min( a_ i_ 1, a_ i_ 2, . . . , a_ i_ m) \u2264 k. For example, if n= 4 , m= 3 , k= 2 , a= [ 1, 2, 4, 3] , then there are two such triples ( i= 1, j= 2, z= 4 and i= 2, j= 3, z= 4 ) . If n= 4 , m= 2 , k= 1 , a= [ 1, 1, 1, 1] , then all six possible pairs are suitable. As the result can be very large, you should print the value modulo 10^ 9 + 7 ( the remainder when divided by 10^ 9 + 7 ) .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 5 ) \u2014 the number of test cases. Then t test cases follow. The first line of each test case contains three integers n , m , k ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 m \u2264 100 , 1 \u2264 k \u2264 n ) \u2014 the length of the sequence a , number of elements in the tuples and the maximum difference of elements in the tuple. The next line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 the sequence a . It is guaranteed that the sum of n for all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "Output t answers to the given test cases. Each answer is the required number of tuples of m elements modulo 10^ 9 + 7 , such that the maximum value in the tuple differs from the minimum by no more than k .",
    "note": " ",
    "topics": [
      "binary search",
      "combinatorics",
      "implementation",
      "math",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Close Tuples (easy version)",
    "url": "https://codeforces.com/problemset/problem/1462/E1",
    "history": "This is the easy version of this problem. The only difference between easy and hard versions is the constraints on k and m ( in this version k= 2 and m= 3 ) . Also, in this version of the problem, you DON' T NEED to output the answer by modulo. You are given a sequence a of length n consisting of integers from 1 to n . The sequence may contain duplicates ( i. e. some elements can be equal) . Find the number of tuples of m = 3 elements such that the maximum number in the tuple differs from the minimum by no more than k = 2 . Formally, you need to find the number of triples of indices i < j < z such that max( a_ i, a_ j, a_ z) - min( a_ i, a_ j, a_ z) \u2264 2. For example, if n= 4 and a= [ 1, 2, 4, 3] , then there are two such triples ( i= 1, j= 2, z= 4 and i= 2, j= 3, z= 4 ) . If n= 4 and a= [ 1, 1, 1, 1] , then all four possible triples are suitable.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 5 ) \u2014 the number of test cases. Then t test cases follow. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the sequence a . The next line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 the sequence a . It is guaranteed that the sum of n for all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "Output t answers to the given test cases. Each answer is the required number of triples of elements, such that the maximum value in the triple differs from the minimum by no more than 2 . Note that in difference to the hard version of the problem, you don' t need to output the answer by modulo. You must output the exact value of the answer.",
    "note": " ",
    "topics": [
      "binary search",
      "combinatorics",
      "math",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Divide and Summarize",
    "url": "https://codeforces.com/problemset/problem/1461/D",
    "history": "Mike received an array a of length n as a birthday present and decided to test how pretty it is. An array would pass the i - th prettiness test if there is a way to get an array with a sum of elements totaling s_ i , using some number ( possibly zero) of slicing operations. An array slicing operation is conducted in the following way: assume mid = \u230amax( array) + min( array) / 2\u230b , where max and min \u2014 are functions that find the maximum and the minimum array elements. In other words, mid is the sum of the maximum and the minimum element of array divided by 2 rounded down. Then the array is split into two parts left and right . The left array contains all elements which are less than or equal mid , and the right array contains all elements which are greater than mid . Elements in left and right keep their relative order from array . During the third step we choose which of the left and right arrays we want to keep. The chosen array replaces the current one and the other is permanently discarded. You need to help Mike find out the results of q prettiness tests. Note that you test the prettiness of the array a , so you start each prettiness test with the primordial ( initial) array a . Thus, the first slice ( if required) is always performed on the array a .",
    "input": "Each test contains one or more test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 100 ) . The first line of each test case contains two integers n and q ( 1 \u2264 n, q \u2264 10^ 5) \u2014 the length of the array a and the total number of prettiness tests. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 6) \u2014 the contents of the array a . Next q lines of each test case contain a single integer s_ i ( 1 \u2264 s_ i \u2264 10^ 9) \u2014 the sum of elements which Mike wants to get in the i - th test. It is guaranteed that the sum of n and the sum of q does not exceed 10^ 5 ( \u2211 n, \u2211 q \u2264 10^ 5 ) .",
    "output": "Print q lines, each containing either a \" Yes\" if the corresponding prettiness test is passed and \" No\" in the opposite case.",
    "note": "Explanation of the first test case: We can get an array with the sum s_ 1 = 1 in the following way: 1. 1 a = [ 1, 2, 3, 4, 5] , mid = 1+ 5/ 2 = 3 , left = [ 1, 2, 3] , right = [ 4, 5] . We choose to keep the left array. 1. 2 a = [ 1, 2, 3] , mid = 1+ 3/ 2 = 2 , left = [ 1, 2] , right = [ 3] . We choose to keep the left array. 1. 3 a = [ 1, 2] , mid = 1+ 2/ 2 = 1 , left = [ 1] , right = [ 2] . We choose to keep the left array with the sum equalling 1 . It can be demonstrated that an array with the sum s_ 2 = 8 is impossible to generate. An array with the sum s_ 3 = 9 can be generated in the following way: 3. 1 a = [ 1, 2, 3, 4, 5] , mid = 1+ 5/ 2 = 3 , left = [ 1, 2, 3] , right = [ 4, 5] . We choose to keep the right array with the sum equalling 9 . It can be demonstrated that an array with the sum s_ 4 = 12 is impossible to generate. We can get an array with the sum s_ 5 = 6 in the following way: 5. 1 a = [ 1, 2, 3, 4, 5] , mid = 1+ 5/ 2 = 3 , left = [ 1, 2, 3] , right = [ 4, 5] . We choose to keep the left with the sum equalling 6 . Explanation of the second test case: It can be demonstrated that an array with the sum s_ 1 = 1 is imposssible to generate. We can get an array with the sum s_ 2 = 2 in the following way: 2. 1 a = [ 3, 1, 3, 1, 3] , mid = 1+ 3/ 2 = 2 , left = [ 1, 1] , right = [ 3, 3, 3] . We choose to keep the left array with the sum equalling 2 . It can be demonstrated that an array with the sum s_ 3 = 3 is imposssible to generate. We can get an array with the sum s_ 4 = 9 in the following way: 4. 1 a = [ 3, 1, 3, 1, 3] , mid = 1+ 3/ 2 = 2 , left = [ 1, 1] , right = [ 3, 3, 3] . We choose to keep the right array with the sum equalling 9 . We can get an array with the sum s_ 5 = 11 with zero slicing operations, because array sum is equal to 11 .",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "divide and conquer",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Sequence and Swaps",
    "url": "https://codeforces.com/problemset/problem/1455/D",
    "history": "You are given a sequence a consisting of n integers a_ 1, a_ 2, . . . , a_ n , and an integer x . Your task is to make the sequence a sorted ( it is considered sorted if the condition a_ 1 \u2264 a_ 2 \u2264 a_ 3 \u2264. . . \u2264 a_ n holds) . To make the sequence sorted, you may perform the following operation any number of times you want ( possibly zero) : choose an integer i such that 1 \u2264 i \u2264 n and a_ i > x , and swap the values of a_ i and x . For example, if a = [ 0, 2, 3, 5, 4] , x = 1 , the following sequence of operations is possible: choose i = 2 ( it is possible since a_ 2 > x ) , then a = [ 0, 1, 3, 5, 4] , x = 2 ; choose i = 3 ( it is possible since a_ 3 > x ) , then a = [ 0, 1, 2, 5, 4] , x = 3 ; choose i = 4 ( it is possible since a_ 4 > x ) , then a = [ 0, 1, 2, 3, 4] , x = 5 . Calculate the minimum number of operations you have to perform so that a becomes sorted, or report that it is impossible.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 500 ) \u2014 the number of test cases. Each test case consists of two lines. The first line contains two integers n and x ( 1 \u2264 n \u2264 500 , 0 \u2264 x \u2264 500 ) \u2014 the number of elements in the sequence and the initial value of x . The second line contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 0 \u2264 a_ i \u2264 500 ) . The sum of values of n over all test cases in the input does not exceed 500 .",
    "output": "For each test case, print one integer \u2014 the minimum number of operations you have to perform to make a sorted, or - 1 , if it is impossible.",
    "note": " ",
    "topics": [
      "dp",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Two Editorials",
    "url": "https://codeforces.com/problemset/problem/1452/E",
    "history": "Berland regional ICPC contest has just ended. There were m participants numbered from 1 to m , who competed on a problemset of n problems numbered from 1 to n . Now the editorial is about to take place. There are two problem authors, each of them is going to tell the tutorial to exactly k consecutive tasks of the problemset. The authors choose the segment of k consecutive tasks for themselves independently of each other. The segments can coincide, intersect or not intersect at all. The i - th participant is interested in listening to the tutorial of all consecutive tasks from l_ i to r_ i . Each participant always chooses to listen to only the problem author that tells the tutorials to the maximum number of tasks he is interested in. Let this maximum number be a_ i . No participant can listen to both of the authors, even if their segments don' t intersect. The authors want to choose the segments of k consecutive tasks for themselves in such a way that the sum of a_ i over all participants is maximized.",
    "input": "The first line contains three integers n, m and k ( 1 \u2264 n, m \u2264 2000 , 1 \u2264 k \u2264 n ) \u2014 the number of problems, the number of participants and the length of the segment of tasks each of the problem authors plans to tell the tutorial to. The i - th of the next m lines contains two integers l_ i and r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 n ) \u2014 the segment of tasks the i - th participant is interested in listening to the tutorial to.",
    "output": "Print a single integer \u2014 the maximum sum of a_ i over all participants.",
    "note": "In the first example the first author can tell the tutorial to problems from 1 to 3 and the second one \u2014 from 6 to 8 . That way the sequence of a_ i will be [ 3, 2, 3, 3, 3] . Notice that the last participant can' t listen to both author, he only chooses the one that tells the maximum number of problems he' s interested in. In the second example the first one can tell problems 2 to 4 , the second one \u2014 4 to 6 . In the third example the first one can tell problems 1 to 1 , the second one \u2014 2 to 2 . Or 4 to 4 and 3 to 3 . Every pair of different problems will get the same sum of 2 . In the fourth example the first one can tell problems 1 to 5 , the second one \u2014 1 to 5 as well.",
    "topics": [
      "brute force",
      "dp",
      "greedy",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Toy Blocks",
    "url": "https://codeforces.com/problemset/problem/1452/B",
    "history": "You are asked to watch your nephew who likes to play with toy blocks in a strange way. He has n boxes and the i - th box has a_ i blocks. His game consists of two steps: he chooses an arbitrary box i ; he tries to move all blocks from the i - th box to other boxes. If he can make the same number of blocks in each of n - 1 other boxes then he will be happy, otherwise, will be sad. Note that your nephew can only move the blocks from the chosen box to the other boxes; he cannot move blocks from the other boxes. You don' t want to make your nephew sad, so you decided to put several extra blocks into some boxes in such a way that no matter which box i he chooses he won' t be sad. What is the minimum number of extra blocks you need to put?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains the integer n ( 2 \u2264 n \u2264 10^ 5 ) \u2014 the number of boxes. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) \u2014 the number of blocks in each box. It' s guaranteed that the sum of n over test cases doesn' t exceed 10^ 5 .",
    "output": "For each test case, print a single integer \u2014 the minimum number of blocks you need to put. It can be proved that the answer always exists, i. e. the number of blocks is finite.",
    "note": "In the first test case, you can, for example, put one extra block into the first box and make a = [ 4, 2, 2] . If your nephew chooses the box with 4 blocks, then we will move two blocks to the second box and two blocks to the third box. If he chooses the box with 2 blocks then he will move these two blocks to the other box with 2 blocks. In the second test case, you don' t need to put any extra blocks, since no matter which box your nephew chooses, he can always make other boxes equal. In the third test case, you should put 3 extra blocks. For example, you can put 2 blocks in the first box and 1 block in the third box. You' ll get array a = [ 2, 3, 1] .",
    "topics": [
      "binary search",
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Avoid Trygub",
    "url": "https://codeforces.com/problemset/problem/1450/A",
    "history": "A string b is a subsequence of a string a if b can be obtained from a by deletion of several ( possibly, zero or all) characters. For example, \" xy\" is a subsequence of \" xzyw\" and \" xy\" , but not \" yx\" . You are given a string a . Your task is to reorder the characters of a so that \" trygub\" is not a subsequence of the resulting string. In other words, you should find a string b which is a permutation of symbols of the string a and \" trygub\" is not a subsequence of b . We have a truly marvelous proof that any string can be arranged not to contain \" trygub\" as a subsequence, but this problem statement is too short to contain it.",
    "input": "The first line contains a single integer t ( 1\u2264 t\u2264 100 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1\u2264 n\u2264 200 ) \u2014 the length of a . The next line contains the string a of length n , consisting of lowercase English letters.",
    "output": "For each test case, output a string b of length n which is a permutation of characters of the string a , and such that \" trygub\" is not a subsequence of it. If there exist multiple possible strings b , you can print any.",
    "note": "In the first test case, \" bugyrtnotna\" does not contain \" trygub\" as a subsequence. It does contain the letters of \" trygub\" , but not in the correct order, so it is not a subsequence. In the second test case, we did not change the order of characters because it is not needed. In the third test case, \" bruhtrywatchinggura\" does contain \" trygu\" as a subsequence, but not \" trygub\" .",
    "topics": [
      "constructive algorithms",
      "sortings"
    ]
  },
  {
    "title": "Knapsack",
    "url": "https://codeforces.com/problemset/problem/1446/A",
    "history": "You have a knapsack with the capacity of W . There are also n items, the i - th one has weight w_ i . You want to put some of these items into the knapsack in such a way that their total weight C is at least half of its size, but ( obviously) does not exceed it. Formally, C should satisfy: \u2308W/ 2\u2309\u2264 C \u2264 W . Output the list of items you will put into the knapsack or determine that fulfilling the conditions is impossible. If there are several possible lists of items satisfying the conditions, you can output any. Note that you don' t have to maximize the sum of weights of items in the knapsack.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . Description of the test cases follows. The first line of each test case contains integers n and W ( 1 \u2264 n \u2264 200 000 , 1\u2264 W \u2264 10^ 18 ) . The second line of each test case contains n integers w_ 1, w_ 2, . . . , w_ n ( 1 \u2264 w_ i \u2264 10^ 9 ) \u2014 weights of the items. The sum of n over all test cases does not exceed 200 000 .",
    "output": "For each test case, if there is no solution, print a single integer - 1 . If there exists a solution consisting of m items, print m in the first line of the output and m integers j_ 1 , j_ 2 , . . . , j_ m ( 1 \u2264 j_ i \u2264 n , all j_ i are distinct) in the second line of the output \u2014 indices of the items you would like to pack into the knapsack. If there are several possible lists of items satisfying the conditions, you can output any. Note that you don' t have to maximize the sum of weights items in the knapsack.",
    "note": "In the first test case, you can take the item of weight 3 and fill the knapsack just right. In the second test case, all the items are larger than the knapsack' s capacity. Therefore, the answer is - 1 . In the third test case, you fill the knapsack exactly in half.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Array Rearrangment",
    "url": "https://codeforces.com/problemset/problem/1445/A",
    "history": "You are given two arrays a and b , each consisting of n positive integers, and an integer x . Please determine if one can rearrange the elements of b so that a_ i + b_ i \u2264 x holds for each i ( 1 \u2264 i \u2264 n ) .",
    "input": "The first line of input contains one integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. t blocks follow, each describing an individual test case. The first line of each test case contains two integers n and x ( 1 \u2264 n \u2264 50 ; 1 \u2264 x \u2264 1000 ) \u2014 the length of arrays a and b , and the parameter x , described in the problem statement. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ 1 \u2264 a_ 2 \u2264. . . \u2264 a_ n \u2264 x ) \u2014 the elements of array a in non- descending order. The third line of each test case contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ 1 \u2264 b_ 2 \u2264. . . \u2264 b_ n \u2264 x ) \u2014 the elements of array b in non- descending order. Test cases are separated by a blank line.",
    "output": "For each test case print Yes if one can rearrange the corresponding array b so that a_ i + b_ i \u2264 x holds for each i ( 1 \u2264 i \u2264 n ) or No otherwise. Each character can be printed in any case.",
    "note": "In the first test case, one can rearrange b so it' ll look like [ 1, 2, 1] . In this case, 1 + 1 \u2264 4 ; 2 + 2 \u2264 4 ; 3 + 1 \u2264 4 . In the second test case, one can set b to [ 5, 2] , then 1 + 5 \u2264 6 ; 4 + 2 \u2264 6 . In the third test case, no matter how one shuffles array b , a_ 4 + b_ 4 = 4 + b_ 4 > 4 . In the fourth test case, there is only one rearrangement of array b and it doesn' t satisfy the condition since 5 + 5 > 5 .",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Divide and Sum",
    "url": "https://codeforces.com/problemset/problem/1444/B",
    "history": "You are given an array a of length 2n . Consider a partition of array a into two subsequences p and q of length n each ( each element of array a should be in exactly one subsequence: either in p or in q ) . Let' s sort p in non- decreasing order, and q in non- increasing order, we can denote the sorted versions by x and y , respectively. Then the cost of a partition is defined as f( p, q) = \u2211_ i = 1^ n | x_ i - y_ i| . Find the sum of f( p, q) over all correct partitions of array a . Since the answer might be too big, print its remainder modulo 998244353 .",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 150 000 ) . The second line contains 2n integers a_ 1, a_ 2, . . . , a_ 2n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 elements of array a .",
    "output": "Print one integer \u2014 the answer to the problem, modulo 998244353 .",
    "note": "Two partitions of an array are considered different if the sets of indices of elements included in the subsequence p are different. In the first example, there are two correct partitions of the array a : p = [ 1] , q = [ 4] , then x = [ 1] , y = [ 4] , f( p, q) = | 1 - 4| = 3 ; p = [ 4] , q = [ 1] , then x = [ 4] , y = [ 1] , f( p, q) = | 4 - 1| = 3 . In the second example, there are six valid partitions of the array a : p = [ 2, 1] , q = [ 2, 1] ( elements with indices 1 and 2 in the original array are selected in the subsequence p ) ; p = [ 2, 2] , q = [ 1, 1] ; p = [ 2, 1] , q = [ 1, 2] ( elements with indices 1 and 4 are selected in the subsequence p ) ; p = [ 1, 2] , q = [ 2, 1] ; p = [ 1, 1] , q = [ 2, 2] ; p = [ 2, 1] , q = [ 2, 1] ( elements with indices 3 and 4 are selected in the subsequence p ) .",
    "topics": [
      "combinatorics",
      "math",
      "sortings"
    ]
  },
  {
    "title": "The Delivery Dilemma",
    "url": "https://codeforces.com/problemset/problem/1443/C",
    "history": "Petya is preparing for his birthday. He decided that there would be n different dishes on the dinner table, numbered from 1 to n . Since Petya doesn' t like to cook, he wants to order these dishes in restaurants. Unfortunately, all dishes are prepared in different restaurants and therefore Petya needs to pick up his orders from n different places. To speed up this process, he wants to order courier delivery at some restaurants. Thus, for each dish, there are two options for Petya how he can get it: the dish will be delivered by a courier from the restaurant i , in this case the courier will arrive in a_ i minutes, Petya goes to the restaurant i on his own and picks up the dish, he will spend b_ i minutes on this. Each restaurant has its own couriers and they start delivering the order at the moment Petya leaves the house. In other words, all couriers work in parallel. Petya must visit all restaurants in which he has not chosen delivery, he does this consistently. For example, if Petya wants to order n = 4 dishes and a = [ 3, 7, 4, 5] , and b = [ 2, 1, 2, 4] , then he can order delivery from the first and the fourth restaurant, and go to the second and third on your own. Then the courier of the first restaurant will bring the order in 3 minutes, the courier of the fourth restaurant will bring the order in 5 minutes, and Petya will pick up the remaining dishes in 1 + 2 = 3 minutes. Thus, in 5 minutes all the dishes will be at Petya' s house. Find the minimum time after which all the dishes can be at Petya' s home.",
    "input": "The first line contains one positive integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 5 ) \u2014 the number of test cases. Then t test cases follow. Each test case begins with a line containing one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of dishes that Petya wants to order. The second line of each test case contains n integers a_ 1 . . . a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the time of courier delivery of the dish with the number i . The third line of each test case contains n integers b_ 1 . . . b_ n ( 1 \u2264 b_ i \u2264 10^ 9 ) \u2014 the time during which Petya will pick up the dish with the number i . The sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case output one integer \u2014 the minimum time after which all dishes can be at Petya' s home.",
    "note": " ",
    "topics": [
      "binary search",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Saving the City",
    "url": "https://codeforces.com/problemset/problem/1443/B",
    "history": "Bertown is a city with n buildings in a straight line. The city' s security service discovered that some buildings were mined. A map was compiled, which is a string of length n , where the i - th character is \" 1\" if there is a mine under the building number i and \" 0\" otherwise. Bertown' s best sapper knows how to activate mines so that the buildings above them are not damaged. When a mine under the building numbered x is activated, it explodes and activates two adjacent mines under the buildings numbered x- 1 and x+ 1 ( if there were no mines under the building, then nothing happens) . Thus, it is enough to activate any one mine on a continuous segment of mines to activate all the mines of this segment. For manual activation of one mine, the sapper takes a coins. He can repeat this operation as many times as you want. Also, a sapper can place a mine under a building if it wasn' t there. For such an operation, he takes b coins. He can also repeat this operation as many times as you want. The sapper can carry out operations in any order. You want to blow up all the mines in the city to make it safe. Find the minimum number of coins that the sapper will have to pay so that after his actions there are no mines left in the city.",
    "input": "The first line contains one positive integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. Then t test cases follow. Each test case begins with a line containing two integers a and b ( 1 \u2264 a, b \u2264 1000 ) \u2014 the cost of activating and placing one mine, respectively. The next line contains a map of mines in the city \u2014 a string consisting of zeros and ones. The sum of the string lengths for all test cases does not exceed 10^ 5 .",
    "output": "For each test case, output one integer \u2014 the minimum number of coins that the sapper will have to pay.",
    "note": "In the second test case, if we place a mine under the fourth building and then activate it, then all mines on the field are activated. The cost of such operations is six, b= 1 coin for placing a mine and a= 5 coins for activating.",
    "topics": [
      "dp",
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Valerii Against Everyone",
    "url": "https://codeforces.com/problemset/problem/1438/B",
    "history": "You' re given an array b of length n . Let' s define another array a , also of length n , for which a_ i = 2^ b_ i ( 1 \u2264 i \u2264 n ) . Valerii says that every two non- intersecting subarrays of a have different sums of elements. You want to determine if he is wrong. More formally, you need to determine if there exist four integers l_ 1, r_ 1, l_ 2, r_ 2 that satisfy the following conditions: 1 \u2264 l_ 1 \u2264 r_ 1 l_ 2 \u2264 r_ 2 \u2264 n ; a_ l_ 1+ a_ l_ 1+ 1+ . . . + a_ r_ 1- 1+ a_ r_ 1 = a_ l_ 2+ a_ l_ 2+ 1+ . . . + a_ r_ 2- 1+ a_ r_ 2 . If such four integers exist, you will prove Valerii wrong. Do they exist? An array c is a subarray of an array d if c can be obtained from d by deletion of several ( possibly, zero or all) elements from the beginning and several ( possibly, zero or all) elements from the end.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 100 ) . Description of the test cases follows. The first line of every test case contains a single integer n ( 2 \u2264 n \u2264 1000 ) . The second line of every test case contains n integers b_ 1, b_ 2, . . . , b_ n ( 0 \u2264 b_ i \u2264 10^ 9 ) .",
    "output": "For every test case, if there exist two non- intersecting subarrays in a that have the same sum, output YES on a separate line. Otherwise, output NO on a separate line. Also, note that each letter can be in any case.",
    "note": "In the first case, a = [ 16, 8, 1, 2, 4, 1] . Choosing l_ 1 = 1 , r_ 1 = 1 , l_ 2 = 2 and r_ 2 = 6 works because 16 = ( 8+ 1+ 2+ 4+ 1) . In the second case, you can verify that there is no way to select to such subarrays.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Chef Monocarp",
    "url": "https://codeforces.com/problemset/problem/1437/C",
    "history": "Chef Monocarp has just put n dishes into an oven. He knows that the i - th dish has its optimal cooking time equal to t_ i minutes. At any positive integer minute T Monocarp can put no more than one dish out of the oven. If the i - th dish is put out at some minute T , then its unpleasant value is | T - t_ i| \u2014 the absolute difference between T and t_ i . Once the dish is out of the oven, it can' t go back in. Monocarp should put all the dishes out of the oven. What is the minimum total unpleasant value Monocarp can obtain?",
    "input": "The first line contains a single integer q ( 1 \u2264 q \u2264 200 ) \u2014 the number of testcases. Then q testcases follow. The first line of the testcase contains a single integer n ( 1 \u2264 n \u2264 200 ) \u2014 the number of dishes in the oven. The second line of the testcase contains n integers t_ 1, t_ 2, . . . , t_ n ( 1 \u2264 t_ i \u2264 n ) \u2014 the optimal cooking time for each dish. The sum of n over all q testcases doesn' t exceed 200 .",
    "output": "Print a single integer for each testcase \u2014 the minimum total unpleasant value Monocarp can obtain when he puts out all the dishes out of the oven. Remember that Monocarp can only put the dishes out at positive integer minutes and no more than one dish at any minute.",
    "note": "In the first example Monocarp can put out the dishes at minutes 3, 1, 5, 4, 6, 2 . That way the total unpleasant value will be | 4 - 3| + | 2 - 1| + | 4 - 5| + | 4 - 4| + | 6 - 5| + | 2 - 2| = 4 . In the second example Monocarp can put out the dishes at minutes 4, 5, 6, 7, 8, 9, 10 . In the third example Monocarp can put out the dish at minute 1 . In the fourth example Monocarp can put out the dishes at minutes 5, 1, 2, 4, 3 . In the fifth example Monocarp can put out the dishes at minutes 1, 3, 4, 5 .",
    "topics": [
      "dp",
      "flows",
      "graph matchings",
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Barrels",
    "url": "https://codeforces.com/problemset/problem/1430/B",
    "history": "You have n barrels lined up in a row, numbered from left to right from one. Initially, the i - th barrel contains a_ i liters of water. You can pour water from one barrel to another. In one act of pouring, you can choose two different barrels x and y ( the x - th barrel shouldn' t be empty) and pour any possible amount of water from barrel x to barrel y ( possibly, all water) . You may assume that barrels have infinite capacity, so you can pour any amount of water in each of them. Calculate the maximum possible difference between the maximum and the minimum amount of water in the barrels, if you can pour water at most k times. Some examples: if you have four barrels, each containing 5 liters of water, and k = 1 , you may pour 5 liters from the second barrel into the fourth, so the amounts of water in the barrels are [ 5, 0, 5, 10] , and the difference between the maximum and the minimum is 10 ; if all barrels are empty, you can' t make any operation, so the difference between the maximum and the minimum amount is still 0 .",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains two integers n and k ( 1 \u2264 k < n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of barrels and the number of pourings you can make. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is the initial amount of water the i - th barrel has. It' s guaranteed that the total sum of n over test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print the maximum possible difference between the maximum and the minimum amount of water in the barrels, if you can pour water at most k times.",
    "note": " ",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Carrots for Rabbits",
    "url": "https://codeforces.com/problemset/problem/1428/E",
    "history": "There are some rabbits in Singapore Zoo. To feed them, Zookeeper bought n carrots with lengths a_ 1, a_ 2, a_ 3, . . . , a_ n . However, rabbits are very fertile and multiply very quickly. Zookeeper now has k rabbits and does not have enough carrots to feed all of them. To solve this problem, Zookeeper decided to cut the carrots into k pieces. For some reason, all resulting carrot lengths must be positive integers. Big carrots are very difficult for rabbits to handle and eat, so the time needed to eat a carrot of size x is x^ 2 . Help Zookeeper split his carrots while minimizing the sum of time taken for rabbits to eat the carrots.",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 k \u2264 10^ 5) : the initial number of carrots and the number of rabbits. The next line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 6) : lengths of carrots. It is guaranteed that the sum of a_ i is at least k .",
    "output": "Output one integer: the minimum sum of time taken for rabbits to eat carrots.",
    "note": "For the first test, the optimal sizes of carrots are { 1, 1, 1, 2, 2, 2} . The time taken is 1^ 2+ 1^ 2+ 1^ 2+ 2^ 2+ 2^ 2+ 2^ 2= 15 For the second test, the optimal sizes of carrots are { 4, 5, 5, 5} . The time taken is 4^ 2+ 5^ 2+ 5^ 2+ 5^ 2= 91 .",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Chess Cheater",
    "url": "https://codeforces.com/problemset/problem/1427/B",
    "history": "You like playing chess tournaments online. In your last tournament you played n games. For the sake of this problem, each chess game is either won or lost ( no draws) . When you lose a game you get 0 points. When you win you get 1 or 2 points: if you have won also the previous game you get 2 points, otherwise you get 1 point. If you win the very first game of the tournament you get 1 point ( since there is not a \" previous game\" ) . The outcomes of the n games are represented by a string s of length n : the i - th character of s is W if you have won the i - th game, while it is L if you have lost the i - th game. After the tournament, you notice a bug on the website that allows you to change the outcome of at most k of your games ( meaning that at most k times you can change some symbol L to W, or W to L) . Since your only goal is to improve your chess rating, you decide to cheat and use the bug. Compute the maximum score you can get by cheating in the optimal way.",
    "input": "Each test contains multiple test cases. The first line contains an integer t ( 1\u2264 t \u2264 20, 000 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each testcase contains two integers n, k ( 1\u2264 n\u2264 100, 000 , 0\u2264 k\u2264 n ) \u2013 the number of games played and the number of outcomes that you can change. The second line contains a string s of length n containing only the characters W and L. If you have won the i - th game then s_ i= W, if you have lost the i - th game then s_ i= L. It is guaranteed that the sum of n over all testcases does not exceed 200, 000 .",
    "output": "For each testcase, print a single integer \u2013 the maximum score you can get by cheating in the optimal way.",
    "note": "Explanation of the first testcase. Before changing any outcome, the score is 2 . Indeed, you won the first game, so you got 1 point, and you won also the third, so you got another 1 point ( and not 2 because you lost the second game) . An optimal way to cheat is to change the outcomes of the second and fourth game. Doing so, you end up winning the first four games ( the string of the outcomes becomes WWWWL) . Hence, the new score is 7= 1+ 2+ 2+ 2 : 1 point for the first game and 2 points for the second, third and fourth game. Explanation of the second testcase. Before changing any outcome, the score is 3 . Indeed, you won the fourth game, so you got 1 point, and you won also the fifth game, so you got 2 more points ( since you won also the previous game) . An optimal way to cheat is to change the outcomes of the first, second, third and sixth game. Doing so, you end up winning all games ( the string of the outcomes becomes WWWWWW) . Hence, the new score is 11 = 1+ 2+ 2+ 2+ 2+ 2 : 1 point for the first game and 2 points for all the other games.",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Avoiding Zero",
    "url": "https://codeforces.com/problemset/problem/1427/A",
    "history": "You are given an array of n integers a_ 1, a_ 2, . . . , a_ n . You have to create an array of n integers b_ 1, b_ 2, . . . , b_ n such that: The array b is a rearrangement of the array a , that is, it contains the same values and each value appears the same number of times in the two arrays. In other words, the multisets { a_ 1, a_ 2, . . . , a_ n} and { b_ 1, b_ 2, . . . , b_ n} are equal. For example, if a= [ 1, - 1, 0, 1] , then b= [ - 1, 1, 1, 0] and b= [ 0, 1, - 1, 1] are rearrangements of a , but b= [ 1, - 1, - 1, 0] and b= [ 1, 0, 2, - 3] are not rearrangements of a . For all k= 1, 2, . . . , n the sum of the first k elements of b is nonzero. Formally, for all k= 1, 2, . . . , n , it must hold b_ 1+ b_ 2+ \u22ef+ b_ k= \u03380 . If an array b_ 1, b_ 2, . . . , b_ n with the required properties does not exist, you have to print NO.",
    "input": "Each test contains multiple test cases. The first line contains an integer t ( 1\u2264 t \u2264 1000 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each testcase contains one integer n ( 1\u2264 n\u2264 50 ) \u2014 the length of the array a . The second line of each testcase contains n integers a_ 1, a_ 2, . . . , a_ n ( - 50\u2264 a_ i\u2264 50 ) \u2014 the elements of a .",
    "output": "For each testcase, if there is not an array b_ 1, b_ 2, . . . , b_ n with the required properties, print a single line with the word NO. Otherwise print a line with the word YES, followed by a line with the n integers b_ 1, b_ 2, . . . , b_ n . If there is more than one array b_ 1, b_ 2, . . . , b_ n satisfying the required properties, you can print any of them.",
    "note": "Explanation of the first testcase: An array with the desired properties is b= [ 1, - 2, 3, - 4] . For this array, it holds: The first element of b is 1 . The sum of the first two elements of b is - 1 . The sum of the first three elements of b is 2 . The sum of the first four elements of b is - 2 . Explanation of the second testcase: Since all values in a are 0 , any rearrangement b of a will have all elements equal to 0 and therefore it clearly cannot satisfy the second property described in the statement ( for example because b_ 1= 0 ) . Hence in this case the answer is NO. Explanation of the third testcase: An array with the desired properties is b= [ 1, 1, - 1, 1, - 1] . For this array, it holds: The first element of b is 1 . The sum of the first two elements of b is 2 . The sum of the first three elements of b is 1 . The sum of the first four elements of b is 2 . The sum of the first five elements of b is 1 . Explanation of the fourth testcase: An array with the desired properties is b= [ - 40, 13, 40, 0, - 9, - 31] . For this array, it holds: The first element of b is - 40 . The sum of the first two elements of b is - 27 . The sum of the first three elements of b is 13 . The sum of the first four elements of b is 13 . The sum of the first five elements of b is 4 . The sum of the first six elements of b is - 27 .",
    "topics": [
      "math",
      "sortings"
    ]
  },
  {
    "title": "Non-zero Segments",
    "url": "https://codeforces.com/problemset/problem/1426/D",
    "history": "Kolya got an integer array a_ 1, a_ 2, . . . , a_ n . The array can contain both positive and negative integers, but Kolya doesn' t like 0 , so the array doesn' t contain any zeros. Kolya doesn' t like that the sum of some subsegments of his array can be 0 . The subsegment is some consecutive segment of elements of the array. You have to help Kolya and change his array in such a way that it doesn' t contain any subsegments with the sum 0 . To reach this goal, you can insert any integers between any pair of adjacent elements of the array ( integers can be really any: positive, negative, 0 , any by absolute value, even such a huge that they can' t be represented in most standard programming languages) . Your task is to find the minimum number of integers you have to insert into Kolya' s array in such a way that the resulting array doesn' t contain any subsegments with the sum 0 .",
    "input": "The first line of the input contains one integer n ( 2 \u2264 n \u2264 200 000 ) \u2014 the number of elements in Kolya' s array. The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9\u2264 a_ i \u2264 10^ 9, a_ i = \u0338 0 ) \u2014 the description of Kolya' s array.",
    "output": "Print the minimum number of integers you have to insert into Kolya' s array in such a way that the resulting array doesn' t contain any subsegments with the sum 0 .",
    "note": "Consider the first example. There is only one subsegment with the sum 0 . It starts in the second element and ends in the fourth element. It' s enough to insert one element so the array doesn' t contain any subsegments with the sum equal to zero. For example, it is possible to insert the integer 1 between second and third elements of the array. There are no subsegments having sum 0 in the second example so you don' t need to do anything.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Ancient Language",
    "url": "https://codeforces.com/problemset/problem/1424/M",
    "history": "While exploring the old caves, researchers found a book, or more precisely, a stash of mixed pages from a book. Luckily, all of the original pages are present and each page contains its number. Therefore, the researchers can reconstruct the book. After taking a deeper look into the contents of these pages, linguists think that this may be some kind of dictionary. What' s interesting is that this ancient civilization used an alphabet which is a subset of the English alphabet, however, the order of these letters in the alphabet is not like the one in the English language. Given the contents of pages that researchers have found, your task is to reconstruct the alphabet of this ancient civilization using the provided pages from the dictionary.",
    "input": "First- line contains two integers: n and k ( 1 \u2264 n, k \u2264 10^ 3 ) \u2014 the number of pages that scientists have found and the number of words present at each page. Following n groups contain a line with a single integer p_ i ( 0 \u2264 n 10^ 3 ) \u2014 the number of i - th page, as well as k lines, each line containing one of the strings ( up to 100 characters) written on the page numbered p_ i .",
    "output": "Output a string representing the reconstructed alphabet of this ancient civilization. If the book found is not a dictionary, output \" IMPOSSIBLE\" without quotes. In case there are multiple solutions, output any of them.",
    "note": " ",
    "topics": [
      "graphs",
      "sortings"
    ]
  },
  {
    "title": "Years",
    "url": "https://codeforces.com/problemset/problem/1424/G",
    "history": "During one of the space missions, humans have found an evidence of previous life at one of the planets. They were lucky enough to find a book with birth and death years of each individual that had been living at this planet. What' s interesting is that these years are in the range ( 1, 10^ 9) ! Therefore, the planet was named Longlifer. In order to learn more about Longlifer' s previous population, scientists need to determine the year with maximum number of individuals that were alive, as well as the number of alive individuals in that year. Your task is to help scientists solve this problem!",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of people. Each of the following n lines contain two integers b and d ( 1 \u2264 b d \u2264 10^ 9 ) representing birth and death year ( respectively) of each individual.",
    "output": "Print two integer numbers separated by blank character, y \u2014 the year with a maximum number of people alive and k \u2014 the number of people alive in year y . In the case of multiple possible solutions, print the solution with minimum year.",
    "note": "You can assume that an individual living from b to d has been born at the beginning of b and died at the beginning of d , and therefore living for d - b years.",
    "topics": [
      "data structures",
      "sortings"
    ]
  },
  {
    "title": "Returning Home",
    "url": "https://codeforces.com/problemset/problem/1422/D",
    "history": "Yura has been walking for some time already and is planning to return home. He needs to get home as fast as possible. To do this, Yura can use the instant- movement locations around the city. Let' s represent the city as an area of n \u00d7 n square blocks. Yura needs to move from the block with coordinates ( s_ x, s_ y) to the block with coordinates ( f_ x, f_ y) . In one minute Yura can move to any neighboring by side block; in other words, he can move in four directions. Also, there are m instant- movement locations in the city. Their coordinates are known to you and Yura. Yura can move to an instant- movement location in no time if he is located in a block with the same coordinate x or with the same coordinate y as the location. Help Yura to find the smallest time needed to get home.",
    "input": "The first line contains two integers n and m \u2014 the size of the city and the number of instant- movement locations ( 1 \u2264 n \u2264 10^ 9 , 0 \u2264 m \u2264 10^ 5 ) . The next line contains four integers s_ x s_ y f_ x f_ y \u2014 the coordinates of Yura' s initial position and the coordinates of his home ( 1 \u2264 s_ x, s_ y, f_ x, f_ y \u2264 n ) . Each of the next m lines contains two integers x_ i y_ i \u2014 coordinates of the i - th instant- movement location ( 1 \u2264 x_ i, y_ i \u2264 n ) .",
    "output": "In the only line print the minimum time required to get home.",
    "note": "In the first example Yura needs to reach ( 5, 5) from ( 1, 1) . He can do that in 5 minutes by first using the second instant- movement location ( because its y coordinate is equal to Yura' s y coordinate) , and then walking ( 4, 1) \u2192 ( 4, 2) \u2192 ( 4, 3) \u2192 ( 5, 3) \u2192 ( 5, 4) \u2192 ( 5, 5) .",
    "topics": [
      "graphs",
      "shortest paths",
      "sortings"
    ]
  },
  {
    "title": "Rescue Nibel!",
    "url": "https://codeforces.com/problemset/problem/1420/D",
    "history": "Ori and Sein have overcome many difficult challenges. They finally lit the Shrouded Lantern and found Gumon Seal, the key to the Forlorn Ruins. When they tried to open the door to the ruins. . . nothing happened. Ori was very surprised, but Sein gave the explanation quickly: clever Gumon decided to make an additional defence for the door. There are n lamps with Spirit Tree' s light. Sein knows the time of turning on and off for the i - th lamp \u2014 l_ i and r_ i respectively. To open the door you have to choose k lamps in such a way that there will be a moment of time when they all will be turned on. While Sein decides which of the k lamps to pick, Ori is interested: how many ways there are to pick such k lamps that the door will open? It may happen that Sein may be wrong and there are no such k lamps. The answer might be large, so print it modulo 998 244 353 .",
    "input": "First line contains two integers n and k ( 1 \u2264 n \u2264 3 \u00b7 10^ 5 , 1 \u2264 k \u2264 n ) \u2014 total number of lamps and the number of lamps that must be turned on simultaneously. Next n lines contain two integers l_ i ans r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 10^ 9 ) \u2014 period of time when i - th lamp is turned on.",
    "output": "Print one integer \u2014 the answer to the task modulo 998 244 353 .",
    "note": "In first test case there are nine sets of k lamps: ( 1, 2, 3) , ( 1, 2, 4) , ( 1, 2, 5) , ( 1, 2, 6) , ( 1, 3, 6) , ( 1, 4, 6) , ( 2, 3, 6) , ( 2, 4, 6) , ( 2, 6, 7) . In second test case k= 1 , so the answer is 3. In third test case there are no such pairs of lamps. In forth test case all lamps are turned on in a time 3 , so the answer is 1. In fifth test case there are seven sets of k lamps: ( 1, 2) , ( 1, 3) , ( 2, 3) , ( 2, 4) , ( 3, 4) , ( 3, 5) , ( 4, 5) .",
    "topics": [
      "combinatorics",
      "data structures",
      "sortings"
    ]
  },
  {
    "title": "Cubes Sorting",
    "url": "https://codeforces.com/problemset/problem/1420/A",
    "history": "For god' s sake, you' re boxes with legs! It is literally your only purpose! Walking onto buttons! How can you not do the one thing you were designed for? Oh, that' s funny, is it? Oh it' s funny? Because we' ve been at this for twelve hours and you haven' t solved it either, so I don' t know why you' re laughing. You' ve got one hour! Solve it! Wheatley decided to try to make a test chamber. He made a nice test chamber, but there was only one detail absent \u2014 cubes. For completing the chamber Wheatley needs n cubes. i - th cube has a volume a_ i . Wheatley has to place cubes in such a way that they would be sorted in a non- decreasing order by their volume. Formally, for each i> 1 , a_ i- 1\u2264 a_ i must hold. To achieve his goal, Wheatley can exchange two neighbouring cubes. It means that for any i> 1 you can exchange cubes on positions i- 1 and i . But there is a problem: Wheatley is very impatient. If Wheatley needs more than n \u00b7 ( n- 1) / 2- 1 exchange operations, he won' t do this boring work. Wheatly wants to know: can cubes be sorted under this conditions?",
    "input": "Each test contains multiple test cases. The first line contains one positive integer t ( 1 \u2264 t \u2264 1000 ) , denoting the number of test cases. Description of the test cases follows. The first line of each test case contains one positive integer n ( 2 \u2264 n \u2264 5 \u00b7 10^ 4 ) \u2014 number of cubes. The second line contains n positive integers a_ i ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 volumes of cubes. It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, print a word in a single line: \" YES\" ( without quotation marks) if the cubes can be sorted and \" NO\" ( without quotation marks) otherwise.",
    "note": "In the first test case it is possible to sort all the cubes in 7 exchanges. In the second test case the cubes are already sorted. In the third test case we can make 0 exchanges, but the cubes are not sorted yet, so the answer is \" NO\" .",
    "topics": [
      "math",
      "sortings"
    ]
  },
  {
    "title": "Sage's Birthday (hard version)",
    "url": "https://codeforces.com/problemset/problem/1419/D2",
    "history": "This is the hard version of the problem. The difference between the versions is that in the easy version all prices a_ i are different. You can make hacks if and only if you solved both versions of the problem. Today is Sage' s birthday, and she will go shopping to buy ice spheres. All n ice spheres are placed in a row and they are numbered from 1 to n from left to right. Each ice sphere has a positive integer price. In this version, some prices can be equal. An ice sphere is cheap if it costs strictly less than two neighboring ice spheres: the nearest to the left and the nearest to the right. The leftmost and the rightmost ice spheres are not cheap. Sage will choose all cheap ice spheres and then buy only them. You can visit the shop before Sage and reorder the ice spheres as you wish. Find out the maximum number of ice spheres that Sage can buy, and show how the ice spheres should be reordered.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 5) \u2014 the number of ice spheres in the shop. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9) \u2014 the prices of ice spheres.",
    "output": "In the first line print the maximum number of ice spheres that Sage can buy. In the second line print the prices of ice spheres in the optimal order. If there are several correct answers, you can print any of them.",
    "note": "In the sample it' s not possible to place the ice spheres in any order so that Sage would buy 4 of them. If the spheres are placed in the order ( 3, 1, 4, 2, 4, 2, 5) , then Sage will buy one sphere for 1 and two spheres for 2 each.",
    "topics": [
      "binary search",
      "brute force",
      "constructive algorithms",
      "greedy",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Sage's Birthday (easy version)",
    "url": "https://codeforces.com/problemset/problem/1419/D1",
    "history": "This is the easy version of the problem. The difference between the versions is that in the easy version all prices a_ i are different. You can make hacks if and only if you solved both versions of the problem. Today is Sage' s birthday, and she will go shopping to buy ice spheres. All n ice spheres are placed in a row and they are numbered from 1 to n from left to right. Each ice sphere has a positive integer price. In this version all prices are different. An ice sphere is cheap if it costs strictly less than two neighboring ice spheres: the nearest to the left and the nearest to the right. The leftmost and the rightmost ice spheres are not cheap. Sage will choose all cheap ice spheres and then buy only them. You can visit the shop before Sage and reorder the ice spheres as you wish. Find out the maximum number of ice spheres that Sage can buy, and show how the ice spheres should be reordered.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 5) \u2014 the number of ice spheres in the shop. The second line contains n different integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9) \u2014 the prices of ice spheres.",
    "output": "In the first line print the maximum number of ice spheres that Sage can buy. In the second line print the prices of ice spheres in the optimal order. If there are several correct answers, you can print any of them.",
    "note": "In the example it' s not possible to place ice spheres in any order so that Sage would buy 3 of them. If the ice spheres are placed like this ( 3, 1, 4, 2, 5) , then Sage will buy two spheres: one for 1 and one for 2 , because they are cheap.",
    "topics": [
      "binary search",
      "constructive algorithms",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Negative Prefixes",
    "url": "https://codeforces.com/problemset/problem/1418/B",
    "history": "You are given an array a , consisting of n integers. Each position i ( 1 \u2264 i \u2264 n ) of the array is either locked or unlocked. You can take the values on the unlocked positions, rearrange them in any order and place them back into the unlocked positions. You are not allowed to remove any values, add the new ones or rearrange the values on the locked positions. You are allowed to leave the values in the same order as they were. For example, let a = [ - 1, 1, 3, 2, - 2, 1, - 4, 0] , the underlined positions are locked. You can obtain the following arrays: [ - 1, 1, 3, 2, - 2, 1, - 4, 0] ; [ - 4, - 1, 3, 2, - 2, 1, 1, 0] ; [ 1, - 1, 3, 2, - 2, 1, - 4, 0] ; [ 1, 2, 3, - 1, - 2, - 4, 1, 0] ; and some others. Let p be a sequence of prefix sums of the array a after the rearrangement. So p_ 1 = a_ 1 , p_ 2 = a_ 1 + a_ 2 , p_ 3 = a_ 1 + a_ 2 + a_ 3 , . . . , p_ n = a_ 1 + a_ 2 + . . . + a_ n . Let k be the maximum j ( 1 \u2264 j \u2264 n ) such that p_ j < 0 . If there are no j such that p_ j < 0 , then k = 0 . Your goal is to rearrange the values in such a way that k is minimum possible. Output the array a after the rearrangement such that the value k for it is minimum possible. If there are multiple answers then print any of them.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of testcases. Then t testcases follow. The first line of each testcase contains a single integer n ( 1 \u2264 n \u2264 100 ) \u2014 the number of elements in the array a . The second line of each testcase contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 5 \u2264 a_ i \u2264 10^ 5 ) \u2014 the initial array a . The third line of each testcase contains n integers l_ 1, l_ 2, . . . , l_ n ( 0 \u2264 l_ i \u2264 1 ) , where l_ i = 0 means that the position i is unlocked and l_ i = 1 means that the position i is locked.",
    "output": "Print n integers \u2014 the array a after the rearrangement. Value k ( the maximum j such that p_ j < 0 ( or 0 if there are no such j ) ) should be minimum possible. For each locked position the printed value should be equal to the initial one. The values on the unlocked positions should be an arrangement of the initial ones. If there are multiple answers then print any of them.",
    "note": "In the first testcase you can rearrange all values however you want but any arrangement will result in k = 0 . For example, for an arrangement [ 1, 2, 3] , p= [ 1, 3, 6] , so there are no j such that p_ j < 0 . Thus, k = 0 . In the second testcase you are not allowed to rearrange any elements. Thus, the printed array should be exactly the same as the initial one. In the third testcase the prefix sums for the printed array are p = [ - 8, - 14, - 13, - 9, - 5, 2, 0] . The maximum j is 5 , thus k = 5 . There are no arrangements such that k < 5 . In the fourth testcase p = [ - 4, - 4, - 3, 3, 6] . In the fifth testcase p = [ - 1, 3, 10, 2, 12, 11] .",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Two Arrays",
    "url": "https://codeforces.com/problemset/problem/1417/B",
    "history": "RedDreamer has an array a consisting of n non- negative integers, and an unlucky integer T . Let' s denote the misfortune of array b having length m as f( b) \u2014 the number of pairs of integers ( i, j) such that 1 \u2264 i < j \u2264 m and b_ i + b_ j = T . RedDreamer has to paint each element of a into one of two colors, white and black ( for each element, the color is chosen independently) , and then create two arrays c and d so that all white elements belong to c , and all black elements belong to d ( it is possible that one of these two arrays becomes empty) . RedDreamer wants to paint the elements in such a way that f( c) + f( d) is minimum possible. For example: if n = 6 , T = 7 and a = [ 1, 2, 3, 4, 5, 6] , it is possible to paint the 1 - st, the 4 - th and the 5 - th elements white, and all other elements black. So c = [ 1, 4, 5] , d = [ 2, 3, 6] , and f( c) + f( d) = 0 + 0 = 0 ; if n = 3 , T = 6 and a = [ 3, 3, 3] , it is possible to paint the 1 - st element white, and all other elements black. So c = [ 3] , d = [ 3, 3] , and f( c) + f( d) = 0 + 1 = 1 . Help RedDreamer to paint the array optimally!",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Then t test cases follow. The first line of each test case contains two integers n and T ( 1 \u2264 n \u2264 10^ 5 , 0 \u2264 T \u2264 10^ 9 ) \u2014 the number of elements in the array and the unlucky integer, respectively. The second line contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) \u2014 the elements of the array. The sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case print n integers: p_ 1 , p_ 2 , . . . , p_ n ( each p_ i is either 0 or 1 ) denoting the colors. If p_ i is 0 , then a_ i is white and belongs to the array c , otherwise it is black and belongs to the array d . If there are multiple answers that minimize the value of f( c) + f( d) , print any of them.",
    "note": " ",
    "topics": [
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "XOR Inverse",
    "url": "https://codeforces.com/problemset/problem/1416/C",
    "history": "You are given an array a consisting of n non- negative integers. You have to choose a non- negative integer x and form a new array b of size n according to the following rule: for all i from 1 to n , b_ i = a_ i \u2295 x ( \u2295 denotes the operation bitwise XOR) . An inversion in the b array is a pair of integers i and j such that 1 \u2264 i < j \u2264 n and b_ i > b_ j . You should choose x in such a way that the number of inversions in b is minimized. If there are several options for x \u2014 output the smallest one.",
    "input": "First line contains a single integer n ( 1 \u2264 n \u2264 3 \u00b7 10^ 5 ) \u2014 the number of elements in a . Second line contains n space- separated integers a_ 1 , a_ 2 , . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is the i - th element of a .",
    "output": "Output two integers: the minimum possible number of inversions in b , and the minimum possible value of x , which achieves those number of inversions.",
    "note": "In the first sample it is optimal to leave the array as it is by choosing x = 0 . In the second sample the selection of x = 14 results in b : [ 4, 9, 7, 4, 9, 11, 11, 13, 11] . It has 4 inversions: i = 2 , j = 3 ; i = 2 , j = 4 ; i = 3 , j = 4 ; i = 8 , j = 9 . In the third sample the selection of x = 8 results in b : [ 0, 2, 11] . It has no inversions.",
    "topics": [
      "bitmasks",
      "data structures",
      "divide and conquer",
      "dp",
      "greedy",
      "math",
      "sortings",
      "strings",
      "trees"
    ]
  },
  {
    "title": "Perform Easily",
    "url": "https://codeforces.com/problemset/problem/1413/C",
    "history": "After battling Shikamaru, Tayuya decided that her flute is too predictable, and replaced it with a guitar. The guitar has 6 strings and an infinite number of frets numbered from 1 . Fretting the fret number j on the i - th string produces the note a_ i + j . Tayuya wants to play a melody of n notes. Each note can be played on different string- fret combination. The easiness of performance depends on the difference between the maximal and the minimal indices of used frets. The less this difference is, the easier it is to perform the technique. Please determine the minimal possible difference. For example, if a = [ 1, 1, 2, 2, 3, 3] , and the sequence of notes is 4, 11, 11, 12, 12, 13, 13 ( corresponding to the second example) , we can play the first note on the first string, and all the other notes on the sixth string. Then the maximal fret will be 10 , the minimal one will be 3 , and the answer is 10 - 3 = 7 , as shown on the picture.",
    "input": "The first line contains 6 space- separated numbers a_ 1 , a_ 2 , . . . , a_ 6 ( 1 \u2264 a_ i\u2264 10^ 9 ) which describe the Tayuya' s strings. The second line contains the only integer n ( 1 \u2264 n \u2264 100 000 ) standing for the number of notes in the melody. The third line consists of n integers b_ 1 , b_ 2 , . . . , b_ n ( 1 \u2264 b_ i\u2264 10^ 9 ) , separated by space. They describe the notes to be played. It' s guaranteed that b_ i > a_ j for all 1\u2264 i\u2264 n and 1\u2264 j\u2264 6 , in other words, you can play each note on any string.",
    "output": "Print the minimal possible difference of the maximal and the minimal indices of used frets.",
    "note": "In the first sample test it is optimal to play the first note on the first string, the second note on the second string, the third note on the sixth string, the fourth note on the fourth string, the fifth note on the fifth string, and the sixth note on the third string. In this case the 100 - th fret is used each time, so the difference is 100 - 100 = 0 . In the second test it' s optimal, for example, to play the second note on the first string, and all the other notes on the sixth string. Then the maximal fret will be 10 , the minimal one will be 3 , and the answer is 10 - 3 = 7 .",
    "topics": [
      "binary search",
      "brute force",
      "dp",
      "implementation",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Two Platforms",
    "url": "https://codeforces.com/problemset/problem/1409/E",
    "history": "There are n points on a plane. The i - th point has coordinates ( x_ i, y_ i) . You have two horizontal platforms, both of length k . Each platform can be placed anywhere on a plane but it should be placed horizontally ( on the same y - coordinate) and have integer borders. If the left border of the platform is ( x, y) then the right border is ( x + k, y) and all points between borders ( including borders) belong to the platform. Note that platforms can share common points ( overlap) and it is not necessary to place both platforms on the same y - coordinate. When you place both platforms on a plane, all points start falling down decreasing their y - coordinate. If a point collides with some platform at some moment, the point stops and is saved. Points which never collide with any platform are lost. Your task is to find the maximum number of points you can save if you place both platforms optimally. You have to answer t independent test cases. For better understanding, please read the Note section below to see a picture for the first test case.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains two integers n and k ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ; 1 \u2264 k \u2264 10^ 9 ) \u2014 the number of points and the length of each platform, respectively. The second line of the test case contains n integers x_ 1, x_ 2, . . . , x_ n ( 1 \u2264 x_ i \u2264 10^ 9 ) , where x_ i is x - coordinate of the i - th point. The third line of the input contains n integers y_ 1, y_ 2, . . . , y_ n ( 1 \u2264 y_ i \u2264 10^ 9 ) , where y_ i is y - coordinate of the i - th point. All points are distinct ( there is no pair 1 \u2264 i < j \u2264 n such that x_ i = x_ j and y_ i = y_ j ) . It is guaranteed that the sum of n does not exceed 2 \u00b7 10^ 5 ( \u2211 n \u2264 2 \u00b7 10^ 5 ) .",
    "output": "For each test case, print the answer: the maximum number of points you can save if you place both platforms optimally.",
    "note": "The picture corresponding to the first test case of the example: Blue dots represent the points, red segments represent the platforms. One of the possible ways is to place the first platform between points ( 1, - 1) and ( 2, - 1) and the second one between points ( 4, 3) and ( 5, 3) . Vectors represent how the points will fall down. As you can see, the only point we can' t save is the point ( 3, 7) so it falls down infinitely and will be lost. It can be proven that we can' t achieve better answer here. Also note that the point ( 5, 3) doesn' t fall at all because it is already on the platform.",
    "topics": [
      "binary search",
      "dp",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Avoid Rainbow Cycles",
    "url": "https://codeforces.com/problemset/problem/1408/E",
    "history": "You are given m sets of integers A_ 1, A_ 2, . . . , A_ m ; elements of these sets are integers between 1 and n , inclusive. There are two arrays of positive integers a_ 1, a_ 2, . . . , a_ m and b_ 1, b_ 2, . . . , b_ n . In one operation you can delete an element j from the set A_ i and pay a_ i + b_ j coins for that. You can make several ( maybe none) operations ( some sets can become empty) . After that, you will make an edge- colored undirected graph consisting of n vertices. For each set A_ i you will add an edge ( x, y) with color i for all x, y \u2208 A_ i and x < y . Some pairs of vertices can be connected with more than one edge, but such edges have different colors. You call a cycle i_ 1 \u2192 e_ 1 \u2192 i_ 2 \u2192 e_ 2 \u2192. . . \u2192 i_ k \u2192 e_ k \u2192 i_ 1 ( e_ j is some edge connecting vertices i_ j and i_ j+ 1 in this graph) rainbow if all edges on it have different colors. Find the minimum number of coins you should pay to get a graph without rainbow cycles.",
    "input": "The first line contains two integers m and n ( 1 \u2264 m, n \u2264 10^ 5 ) , the number of sets and the number of vertices in the graph. The second line contains m integers a_ 1, a_ 2, . . . , a_ m ( 1 \u2264 a_ i \u2264 10^ 9 ) . The third line contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 10^ 9 ) . In the each of the next of m lines there are descriptions of sets. In the i - th line the first integer s_ i ( 1 \u2264 s_ i \u2264 n ) is equal to the size of A_ i . Then s_ i integers follow: the elements of the set A_ i . These integers are from 1 to n and distinct. It is guaranteed that the sum of s_ i for all 1 \u2264 i \u2264 m does not exceed 2 \u00b7 10^ 5 .",
    "output": "Print one integer: the minimum number of coins you should pay for operations to avoid rainbow cycles in the obtained graph.",
    "note": "In the first test, you can make such operations: Delete element 1 from set 1 . You should pay a_ 1 + b_ 1 = 5 coins for that. Delete element 1 from set 2 . You should pay a_ 2 + b_ 1 = 6 coins for that. You pay 11 coins in total. After these operations, the first and the second sets will be equal to { 2} and the third set will be equal to { 1, 2} . So, the graph will consist of one edge ( 1, 2) of color 3 . In the second test, you can make such operations: Delete element 1 from set 1 . You should pay a_ 1 + b_ 1 = 11 coins for that. Delete element 4 from set 2 . You should pay a_ 2 + b_ 4 = 13 coins for that. Delete element 7 from set 3 . You should pay a_ 3 + b_ 7 = 13 coins for that. Delete element 4 from set 4 . You should pay a_ 4 + b_ 4 = 16 coins for that. Delete element 7 from set 6 . You should pay a_ 6 + b_ 7 = 13 coins for that. You pay 66 coins in total. After these operations, the sets will be: { 2, 3} ; { 1} ; { 1, 3} ; { 3} ; { 3, 4, 5, 6, 7} ; { 5} ; { 8} . We will get the graph: There are no rainbow cycles in it.",
    "topics": [
      "data structures",
      "dsu",
      "graphs",
      "greedy",
      "sortings",
      "trees"
    ]
  },
  {
    "title": "Searchlights",
    "url": "https://codeforces.com/problemset/problem/1408/D",
    "history": "There are n robbers at coordinates ( a_ 1, b_ 1) , ( a_ 2, b_ 2) , . . . , ( a_ n, b_ n) and m searchlight at coordinates ( c_ 1, d_ 1) , ( c_ 2, d_ 2) , . . . , ( c_ m, d_ m) . In one move you can move each robber to the right ( increase a_ i of each robber by one) or move each robber up ( increase b_ i of each robber by one) . Note that you should either increase all a_ i or all b_ i , you can' t increase a_ i for some points and b_ i for some other points. Searchlight j can see a robber i if a_ i \u2264 c_ j and b_ i \u2264 d_ j . A configuration of robbers is safe if no searchlight can see a robber ( i. e. if there is no pair i, j such that searchlight j can see a robber i ) . What is the minimum number of moves you need to perform to reach a safe configuration?",
    "input": "The first line of input contains two integers n and m ( 1 \u2264 n, m \u2264 2000 ) : the number of robbers and the number of searchlight. Each of the next n lines contains two integers a_ i , b_ i ( 0 \u2264 a_ i, b_ i \u2264 10^ 6 ) , coordinates of robbers. Each of the next m lines contains two integers c_ i , d_ i ( 0 \u2264 c_ i, d_ i \u2264 10^ 6 ) , coordinates of searchlights.",
    "output": "Print one integer: the minimum number of moves you need to perform to reach a safe configuration.",
    "note": "In the first test, you can move each robber to the right three times. After that there will be one robber in the coordinates ( 3, 0) . The configuration of the robbers is safe, because the only searchlight can' t see the robber, because it is in the coordinates ( 2, 3) and 3 > 2 . In the second test, you can move each robber to the right two times and two times up. After that robbers will be in the coordinates ( 3, 8) , ( 8, 3) . It' s easy the see that the configuration of the robbers is safe. It can be proved that you can' t reach a safe configuration using no more than 3 moves.",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "dp",
      "implementation",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Maximum Product",
    "url": "https://codeforces.com/problemset/problem/1406/B",
    "history": "You are given an array of integers a_ 1, a_ 2, . . . , a_ n . Find the maximum possible value of a_ ia_ ja_ ka_ la_ t among all five indices ( i, j, k, l, t) ( i< j< k< l< t ) .",
    "input": "The input consists of multiple test cases. The first line contains an integer t ( 1\u2264 t\u2264 2 \u00b7 10^ 4 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n ( 5\u2264 n\u2264 10^ 5 ) \u2014 the size of the array. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( - 3\u00d7 10^ 3\u2264 a_ i\u2264 3\u00d7 10^ 3 ) \u2014 given array. It' s guaranteed that the sum of n over all test cases does not exceed 2\u00b7 10^ 5 .",
    "output": "For each test case, print one integer \u2014 the answer to the problem.",
    "note": "In the first test case, choosing a_ 1, a_ 2, a_ 3, a_ 4, a_ 5 is a best choice: ( - 1) \u00b7 ( - 2) \u00b7 ( - 3) \u00b7 ( - 4) \u00b7 ( - 5) = - 120 . In the second test case, choosing a_ 1, a_ 2, a_ 3, a_ 5, a_ 6 is a best choice: ( - 1) \u00b7 ( - 2) \u00b7 ( - 3) \u00b7 2\u00b7 ( - 1) = 12 . In the third test case, choosing a_ 1, a_ 2, a_ 3, a_ 4, a_ 5 is a best choice: ( - 1) \u00b7 0\u00b7 0\u00b7 0\u00b7 ( - 1) = 0 . In the fourth test case, choosing a_ 1, a_ 2, a_ 3, a_ 4, a_ 6 is a best choice: ( - 9) \u00b7 ( - 7) \u00b7 ( - 5) \u00b7 ( - 3) \u00b7 1= 945 .",
    "topics": [
      "brute force",
      "dp",
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "The Potion of Great Power",
    "url": "https://codeforces.com/problemset/problem/1403/A",
    "history": "Once upon a time, in the Land of the Shamans, everyone lived on the Sky- High Beanstalk. Each shaman had a unique identifying number i between 0 and N- 1 , and an altitude value H_ i , representing how high he lived above ground level. The distance between two altitudes is the absolute value of their difference. All shamans lived together in peace, until one of them stole the formula of the world- famous Potion of Great Power. To cover his/ her tracks, the Thief has put a Curse on the land: most inhabitants could no longer trust each other. . . Despite the very difficult circumstances, the Order of Good Investigators have gained the following information about the Curse: When the Curse first takes effect, everyone stops trusting each other. The Curse is unstable: at the end of each day ( exactly at midnight) , one pair of shamans will start or stop trusting each other. Unfortunately, each shaman will only ever trust at most D others at any given time. They have also reconstructed a log of who trusted whom: for each night they know which pair of shamans started/ stopped trusting each other. They believe the Thief has whispered the formula to an Evil Shaman. To avoid detection, both of them visited the home of one of their ( respective) trusted friends. During the visit, the Thief whispered the formula to the Evil Shaman through the window. ( Note: this trusted friend did not have to be home at the time. In fact, it' s even possible that they visited each other' s houses \u2013 shamans are weird. ) Fortunately, whispers only travel short distances, so the Order knows the two trusted friends visited ( by the Thief and the Evil Shaman) must live very close to each other. They ask you to help with their investigation. They would like to test their suspicions: what if the Thief was x , the Evil Shaman was y , and the formula was whispered on day v ? What is the smallest distance the whispered formula had to travel? That is, what is the minimum distance between the apartments of some shamans x' and y' ( i. e. min( | H_ x' - H_ y' | ) ) , such that x' was a trusted friend of x and y' was a trusted friend of y on day v ? They will share all their information with you, then ask you a number of questions. You need to answer each question immediately, before receiving the next one. InteractionThe interaction will begin with a line containing N , D , U and Q ( 2 \u2264 N \u2264 100000 , 1 \u2264 D \u2264 500 , 0 \u2264 U \u2264 200000 , 1 \u2264 Q \u2264 50000) \u2013 the number of shamans, the maximum number of trusted friends a shaman can have at any given point, the number of days, and the number of questions. On the next line N space separated integers will follow, the i th ( 1\u2264 i \u2264 N) of which being H_ i- 1 ( 0\u2264 H_ i- 1\u2264 10^ 9) , the altitude of shaman i- 1 . On the next U lines there will be two integers each, on the i th ( 1 \u2264 i \u2264 U ) A_ i and B_ i ( 0 \u2264 A_ i, B_ i < N and A_ i = \u0338 B_ i) , which represents a pair of shamans who started or stopped trusting each other at the end of day i- 1 . That is, if A_ i and B_ i trusted each other on day i- 1 , they did not trust each other on day i , or vice versa. Read all of these integers. The interactor now will ask you Q question, so the following interaction should happen Q times: Read 3 integers describing the current query: x, y and v ( x = \u0338 y , 0 \u2264 x, y < N and 0 \u2264 v \u2264 U ) , where x is the suspected Thief, y is the suspected Evil Shaman, and v is the suspected day. . Then print the answer to this query on a single line, i. e. you should print the minimum distance the whispered formula had to travel from some trusted friend x' of x to a trusted friend y' of y . In case someone trusted both x and y ( i. e. x' = y' ) , you should print 0 . If x or y had no trusted friends, print 10^ 9 . After printing each line do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use: fflush( stdout) or cout. flush( ) in C+ + ; System. out. flush( ) in Java; flush( output) in Pascal; stdout. flush( ) in Python; see documentation for other languages. Scoring [ Subtask Points Constraints; 1 0 samples; 2 17 Q, U \u2264 1000; 3 14 v= U for all questions; 4 18 H_ i \u2208{ 0, 1} for all shamans i; 5 21 U, N \u2264 10000; 6 30 no additional constraints; ]",
    "input": " ",
    "output": " ",
    "note": "Example queries: Evolution of friendships:",
    "topics": [
      "*special",
      "2-sat",
      "binary search",
      "data structures",
      "graphs",
      "interactive",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Roads",
    "url": "https://codeforces.com/problemset/problem/1402/B",
    "history": "The government of Treeland wants to build a new road network. There are 2N cities in Treeland. The unfinished plan of the road network already contains N road segments, each of which connects two cities with a straight line. No two road segments have a common point ( including their endpoints) . Your task is to determine N- 1 additional road segments satisfying the following conditions: Every new road segment must connect two cities with a straight line. If two segments ( new or old) have a common point, then this point must be an endpoint of both segments. The road network connects all cities: for each pair of cities there is a path consisting of segments that connects the two cities. Scoring [ Subtask Points Constraints; 1 0 samples; 2 15 all input segments are vertical. ; 3 15 each pair of input segments are parallel. ; 4 15 each input segment is either horizontal or vertical. ; 5 15 N \u2264 10 000; 6 40 no additional constraints; ]",
    "input": "The first line of the standard input contains N ( 2 \u2264 N \u2264 10^ 5 ) \u2013 the number of existing road segments. Each of the following N lines contains four integers: x_ 1, y_ 1, x_ 2, y_ 2 , where ( x_ 1, y_ 1) and ( x_ 2, y_ 2) are the coordinates of the endpoints of the segment ( - 10^ 7 \u2264 x_ i, y_ i\u2264 10^ 7) .",
    "output": "The standard output must contain N- 1 lines, each of them containing four integers, x_ 1, y_ 1, x_ 2, y_ 2 , where ( x_ 1, y_ 1) and ( x_ 2, y_ 2) are the coordinates of the cities that are the endpoints of a new road segment. If there are multiple solutions, your program may output any of them.",
    "note": "",
    "topics": [
      "*special",
      "geometry",
      "sortings"
    ]
  },
  {
    "title": "Fancy Fence",
    "url": "https://codeforces.com/problemset/problem/1402/A",
    "history": "Everybody knows that Bala\u0301zs has the fanciest fence in the whole town. It' s built up from N fancy sections. The sections are rectangles standing closely next to each other on the ground. The i th section has integer height h_ i and integer width w_ i . We are looking for fancy rectangles on this fancy fence. A rectangle is fancy if: its sides are either horizontal or vertical and have integer lengths the distance between the rectangle and the ground is integer the distance between the rectangle and the left side of the first section is integer it' s lying completely on sections What is the number of fancy rectangles? This number can be very big, so we are interested in it modulo 10^ 9+ 7 . Scoring [ Subtask Points Constraints; 1 0 sample; 2 12 N \u2264 50 and h_ i \u2264 50 and w_ i = 1 for all i; 3 13 h_ i = 1 or h_ i = 2 for all i; 4 15 all h_ i are equal; 5 15 h_ i \u2264 h_ i+ 1 for all i \u2264 N- 1; 6 18 N \u2264 1000; 7 27 no additional constraints; ]",
    "input": "The first line contains N ( 1\u2264 N \u2264 10^ 5 ) \u2013 the number of sections. The second line contains N space- separated integers, the i th number is h_ i ( 1 \u2264 h_ i \u2264 10^ 9 ) . The third line contains N space- separated integers, the i th number is w_ i ( 1 \u2264 w_ i \u2264 10^ 9 ) .",
    "output": "You should print a single integer, the number of fancy rectangles modulo 10^ 9+ 7 . So the output range is 0, 1, 2, . . . , 10^ 9+ 6 .",
    "note": "The fence looks like this: There are 5 fancy rectangles of shape: There are 3 fancy rectangles of shape: There is 1 fancy rectangle of shape: There are 2 fancy rectangles of shape: There is 1 fancy rectangle of shape:",
    "topics": [
      "*special",
      "data structures",
      "dsu",
      "implementation",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Divide Square",
    "url": "https://codeforces.com/problemset/problem/1401/E",
    "history": "There is a square of size 10^ 6 \u00d7 10^ 6 on the coordinate plane with four points ( 0, 0) , ( 0, 10^ 6) , ( 10^ 6, 0) , and ( 10^ 6, 10^ 6) as its vertices. You are going to draw segments on the plane. All segments are either horizontal or vertical and intersect with at least one side of the square. Now you are wondering how many pieces this square divides into after drawing all segments. Write a program calculating the number of pieces of the square.",
    "input": "The first line contains two integers n and m ( 0 \u2264 n, m \u2264 10^ 5 ) \u2014 the number of horizontal segments and the number of vertical segments. The next n lines contain descriptions of the horizontal segments. The i - th line contains three integers y_ i , lx_ i and rx_ i ( 0 < y_ i < 10^ 6 ; 0 \u2264 lx_ i < rx_ i \u2264 10^ 6 ) , which means the segment connects ( lx_ i, y_ i) and ( rx_ i, y_ i) . The next m lines contain descriptions of the vertical segments. The i - th line contains three integers x_ i , ly_ i and ry_ i ( 0 < x_ i < 10^ 6 ; 0 \u2264 ly_ i < ry_ i \u2264 10^ 6 ) , which means the segment connects ( x_ i, ly_ i) and ( x_ i, ry_ i) . It' s guaranteed that there are no two segments on the same line, and each segment intersects with at least one of square' s sides.",
    "output": "Print the number of pieces the square is divided into after drawing all the segments.",
    "note": "The sample is like this:",
    "topics": [
      "data structures",
      "geometry",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Maximum Distributed Tree",
    "url": "https://codeforces.com/problemset/problem/1401/D",
    "history": "You are given a tree that consists of n nodes. You should label each of its n- 1 edges with an integer in such way that satisfies the following conditions: each integer must be greater than 0 ; the product of all n- 1 numbers should be equal to k ; the number of 1 - s among all n- 1 integers must be minimum possible. Let' s define f( u, v) as the sum of the numbers on the simple path from node u to node v . Also, let \u2211_ i= 1^ n- 1\u2211_ j= i+ 1^ n f( i, j) be a distribution index of the tree. Find the maximum possible distribution index you can get. Since answer can be too large, print it modulo 10^ 9 + 7 . In this problem, since the number k can be large, the result of the prime factorization of k is given instead.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 2 \u2264 n \u2264 10^ 5 ) \u2014 the number of nodes in the tree. Each of the next n- 1 lines describes an edge: the i - th line contains two integers u_ i and v_ i ( 1 \u2264 u_ i, v_ i \u2264 n ; u_ i v_ i ) \u2014 indices of vertices connected by the i - th edge. Next line contains a single integer m ( 1 \u2264 m \u2264 6 \u00b7 10^ 4 ) \u2014 the number of prime factors of k . Next line contains m prime numbers p_ 1, p_ 2, . . . , p_ m ( 2 \u2264 p_ i < 6 \u00b7 10^ 4 ) such that k = p_ 1 \u00b7 p_ 2 \u00b7. . . \u00b7 p_ m . It is guaranteed that the sum of n over all test cases doesn' t exceed 10^ 5 , the sum of m over all test cases doesn' t exceed 6 \u00b7 10^ 4 , and the given edges for each test cases form a tree.",
    "output": "Print the maximum distribution index you can get. Since answer can be too large, print it modulo 10^ 9+ 7 .",
    "note": "In the first test case, one of the optimal ways is on the following image: In this case, f( 1, 2) = 1 , f( 1, 3) = 3 , f( 1, 4) = 5 , f( 2, 3) = 2 , f( 2, 4) = 4 , f( 3, 4) = 2 , so the sum of these 6 numbers is 17 . In the second test case, one of the optimal ways is on the following image: In this case, f( 1, 2) = 3 , f( 1, 3) = 1 , f( 1, 4) = 4 , f( 2, 3) = 2 , f( 2, 4) = 5 , f( 3, 4) = 3 , so the sum of these 6 numbers is 18 .",
    "topics": [
      "dfs and similar",
      "dp",
      "greedy",
      "implementation",
      "math",
      "number theory",
      "sortings",
      "trees"
    ]
  },
  {
    "title": "Mere Array",
    "url": "https://codeforces.com/problemset/problem/1401/C",
    "history": "You are given an array a_ 1, a_ 2, . . . , a_ n where all a_ i are integers and greater than 0 . In one operation, you can choose two different indices i and j ( 1 \u2264 i, j \u2264 n ) . If gcd( a_ i, a_ j) is equal to the minimum element of the whole array a , you can swap a_ i and a_ j . gcd( x, y) denotes the greatest common divisor ( GCD) of integers x and y . Now you' d like to make a non- decreasing using the operation any number of times ( possibly zero) . Determine if you can do this. An array a is non- decreasing if and only if a_ 1 \u2264 a_ 2 \u2264. . . \u2264 a_ n .",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of array a . The second line of each test case contains n positive integers a_ 1, a_ 2, . . . a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the array itself. It is guaranteed that the sum of n over all test cases doesn' t exceed 10^ 5 .",
    "output": "For each test case, output \" YES\" if it is possible to make the array a non- decreasing using the described operation, or \" NO\" if it is impossible to do so.",
    "note": "In the first and third sample, the array is already non- decreasing. In the second sample, we can swap a_ 1 and a_ 3 first, and swap a_ 1 and a_ 5 second to make the array non- decreasing. In the forth sample, we cannot the array non- decreasing using the operation.",
    "topics": [
      "constructive algorithms",
      "math",
      "number theory",
      "sortings"
    ]
  },
  {
    "title": "Yet Another Segments Subset",
    "url": "https://codeforces.com/problemset/problem/1399/F",
    "history": "You are given n segments on a coordinate axis OX . The i - th segment has borders [ l_ i; r_ i] . All points x , for which l_ i \u2264 x \u2264 r_ i holds, belong to the i - th segment. Your task is to choose the maximum by size ( the number of segments) subset of the given set of segments such that each pair of segments in this subset either non- intersecting or one of them lies inside the other one. Two segments [ l_ i; r_ i] and [ l_ j; r_ j] are non- intersecting if they have no common points. For example, segments [ 1; 2] and [ 3; 4] , [ 1; 3] and [ 5; 5] are non- intersecting, while segments [ 1; 2] and [ 2; 3] , [ 1; 2] and [ 2; 2] are intersecting. The segment [ l_ i; r_ i] lies inside the segment [ l_ j; r_ j] if l_ j \u2264 l_ i and r_ i \u2264 r_ j . For example, segments [ 2; 2] , [ 2, 3] , [ 3; 4] and [ 2; 4] lie inside the segment [ 2; 4] , while [ 2; 5] and [ 1; 4] are not. You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains one integer n ( 1 \u2264 n \u2264 3000 ) \u2014 the number of segments. The next n lines describe segments. The i - th segment is given as two integers l_ i and r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 2 \u00b7 10^ 5 ) , where l_ i is the left border of the i - th segment and r_ i is the right border of the i - th segment. Additional constraint on the input: there are no duplicates in the list of segments. It is guaranteed that the sum of n does not exceed 3000 ( \u2211 n \u2264 3000 ) .",
    "output": "For each test case, print the answer: the maximum possible size of the subset of the given set of segments such that each pair of segments in this subset either non- intersecting or one of them lies inside the other one.",
    "note": " ",
    "topics": [
      "data structures",
      "dp",
      "graphs",
      "sortings"
    ]
  },
  {
    "title": "Weights Division (hard version)",
    "url": "https://codeforces.com/problemset/problem/1399/E2",
    "history": "Easy and hard versions are actually different problems, so we advise you to read both statements carefully. You are given a weighted rooted tree, vertex 1 is the root of this tree. Also, each edge has its own cost. A tree is a connected graph without cycles. A rooted tree has a special vertex called the root. A parent of a vertex v is the last different from v vertex on the path from the root to the vertex v . Children of vertex v are all vertices for which v is the parent. A vertex is a leaf if it has no children. The weighted tree is such a tree that each edge of this tree has some weight. The weight of the path is the sum of edges weights on this path. The weight of the path from the vertex to itself is 0 . You can make a sequence of zero or more moves. On each move, you select an edge and divide its weight by 2 rounding down. More formally, during one move, you choose some edge i and divide its weight by 2 rounding down ( w_ i : = \u230aw_ i/ 2\u230b ) . Each edge i has an associated cost c_ i which is either 1 or 2 coins. Each move with edge i costs c_ i coins. Your task is to find the minimum total cost to make the sum of weights of paths from the root to each leaf at most S . In other words, if w( i, j) is the weight of the path from the vertex i to the vertex j , then you have to make \u2211_ v \u2208 leaves w( root, v) \u2264 S , where leaves is the list of all leaves. You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains two integers n and S ( 2 \u2264 n \u2264 10^ 5; 1 \u2264 S \u2264 10^ 16 ) \u2014 the number of vertices in the tree and the maximum possible sum of weights you have to obtain. The next n- 1 lines describe edges of the tree. The edge i is described as four integers v_ i , u_ i , w_ i and c_ i ( 1 \u2264 v_ i, u_ i \u2264 n; 1 \u2264 w_ i \u2264 10^ 6; 1 \u2264 c_ i \u2264 2 ) , where v_ i and u_ i are vertices the edge i connects, w_ i is the weight of this edge and c_ i is the cost of this edge. It is guaranteed that the sum of n does not exceed 10^ 5 ( \u2211 n \u2264 10^ 5 ) .",
    "output": "For each test case, print the answer: the minimum total cost required to make the sum of weights paths from the root to each leaf at most S .",
    "note": " ",
    "topics": [
      "binary search",
      "dfs and similar",
      "greedy",
      "sortings",
      "trees",
      "two pointers"
    ]
  },
  {
    "title": "Remove Smallest",
    "url": "https://codeforces.com/problemset/problem/1399/A",
    "history": "You are given the array a consisting of n positive ( greater than zero) integers. In one move, you can choose two indices i and j ( i j ) such that the absolute difference between a_ i and a_ j is no more than one ( | a_ i - a_ j| \u2264 1 ) and remove the smallest of these two elements. If two elements are equal, you can remove any of them ( but exactly one) . Your task is to find if it is possible to obtain the array consisting of only one element using several ( possibly, zero) such moves or not. You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains one integer n ( 1 \u2264 n \u2264 50 ) \u2014 the length of a . The second line of the test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 100 ) , where a_ i is the i - th element of a .",
    "output": "For each test case, print the answer: \" YES\" if it is possible to obtain the array consisting of only one element using several ( possibly, zero) moves described in the problem statement, or \" NO\" otherwise.",
    "note": "In the first test case of the example, we can perform the following sequence of moves: choose i= 1 and j= 3 and remove a_ i ( so a becomes [ 2; 2] ) ; choose i= 1 and j= 2 and remove a_ j ( so a becomes [ 2] ) . In the second test case of the example, we can choose any possible i and j any move and it doesn' t matter which element we remove. In the third test case of the example, there is no way to get rid of 2 and 4 .",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Two Types of Spells",
    "url": "https://codeforces.com/problemset/problem/1398/E",
    "history": "Polycarp plays a computer game ( yet again) . In this game, he fights monsters using magic spells. There are two types of spells: fire spell of power x deals x damage to the monster, and lightning spell of power y deals y damage to the monster and doubles the damage of the next spell Polycarp casts. Each spell can be cast only once per battle, but Polycarp can cast them in any order. For example, suppose that Polycarp knows three spells: a fire spell of power 5 , a lightning spell of power 1 , and a lightning spell of power 8 . There are 6 ways to choose the order in which he casts the spells: first, second, third. This order deals 5 + 1 + 2 \u00b7 8 = 22 damage; first, third, second. This order deals 5 + 8 + 2 \u00b7 1 = 15 damage; second, first, third. This order deals 1 + 2 \u00b7 5 + 8 = 19 damage; second, third, first. This order deals 1 + 2 \u00b7 8 + 2 \u00b7 5 = 27 damage; third, first, second. This order deals 8 + 2 \u00b7 5 + 1 = 19 damage; third, second, first. This order deals 8 + 2 \u00b7 1 + 2 \u00b7 5 = 20 damage. Initially, Polycarp knows 0 spells. His spell set changes n times, each time he either learns a new spell or forgets an already known one. After each change, calculate the maximum possible damage Polycarp may deal using the spells he knows.",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of changes to the spell set. Each of the next n lines contains two integers tp and d ( 0 \u2264 tp_ i \u2264 1 ; - 10^ 9 \u2264 d \u2264 10^ 9 ; d_ i = \u0338 0 ) \u2014 the description of the change. If tp_ i if equal to 0 , then Polycarp learns ( or forgets) a fire spell, otherwise he learns ( or forgets) a lightning spell. If d_ i > 0 , then Polycarp learns a spell of power d_ i . Otherwise, Polycarp forgets a spell with power - d_ i , and it is guaranteed that he knew that spell before the change. It is guaranteed that the powers of all spells Polycarp knows after each change are different ( Polycarp never knows two spells with the same power) .",
    "output": "After each change, print the maximum damage Polycarp can deal with his current set of spells.",
    "note": " ",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "implementation",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Colored Rectangles",
    "url": "https://codeforces.com/problemset/problem/1398/D",
    "history": "You are given three multisets of pairs of colored sticks: R pairs of red sticks, the first pair has length r_ 1 , the second pair has length r_ 2 , . . . , the R - th pair has length r_ R ; G pairs of green sticks, the first pair has length g_ 1 , the second pair has length g_ 2 , . . . , the G - th pair has length g_ G ; B pairs of blue sticks, the first pair has length b_ 1 , the second pair has length b_ 2 , . . . , the B - th pair has length b_ B ; You are constructing rectangles from these pairs of sticks with the following process: take a pair of sticks of one color; take a pair of sticks of another color different from the first one; add the area of the resulting rectangle to the total area. Thus, you get such rectangles that their opposite sides are the same color and their adjacent sides are not the same color. Each pair of sticks can be used at most once, some pairs can be left unused. You are not allowed to split a pair into independent sticks. What is the maximum area you can achieve?",
    "input": "The first line contains three integers R , G , B ( 1 \u2264 R, G, B \u2264 200 ) \u2014 the number of pairs of red sticks, the number of pairs of green sticks and the number of pairs of blue sticks. The second line contains R integers r_ 1, r_ 2, . . . , r_ R ( 1 \u2264 r_ i \u2264 2000 ) \u2014 the lengths of sticks in each pair of red sticks. The third line contains G integers g_ 1, g_ 2, . . . , g_ G ( 1 \u2264 g_ i \u2264 2000 ) \u2014 the lengths of sticks in each pair of green sticks. The fourth line contains B integers b_ 1, b_ 2, . . . , b_ B ( 1 \u2264 b_ i \u2264 2000 ) \u2014 the lengths of sticks in each pair of blue sticks.",
    "output": "Print the maximum possible total area of the constructed rectangles.",
    "note": "In the first example you can construct one of these rectangles: red and green with sides 3 and 5 , red and blue with sides 3 and 4 and green and blue with sides 5 and 4 . The best area of them is 4 \u00d7 5 = 20 . In the second example the best rectangles are: red/ blue 9 \u00d7 8 , red/ blue 5 \u00d7 5 , green/ blue 2 \u00d7 1 . So the total area is 72 + 25 + 2 = 99 . In the third example the best rectangles are: red/ green 19 \u00d7 8 and red/ blue 20 \u00d7 11 . The total area is 152 + 220 = 372 . Note that you can' t construct more rectangles because you are not allowed to have both pairs taken to be the same color.",
    "topics": [
      "dp",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Substring Removal Game",
    "url": "https://codeforces.com/problemset/problem/1398/B",
    "history": "Alice and Bob play a game. They have a binary string s ( a string such that each character in it is either 0 or 1 ) . Alice moves first, then Bob, then Alice again, and so on. During their move, the player can choose any number ( not less than one) of consecutive equal characters in s and delete them. For example, if the string is 10110 , there are 6 possible moves ( deleted characters are bold) : 10110 \u2192 0110 ; 10110 \u2192 1110 ; 10110 \u2192 1010 ; 10110 \u2192 1010 ; 10110 \u2192 100 ; 10110\u2192 1011 . After the characters are removed, the characters to the left and to the right of the removed block become adjacent. I. e. the following sequence of moves is valid: 10110 \u2192 100\u2192 1 . The game ends when the string becomes empty, and the score of each player is the number of 1 - characters deleted by them. Each player wants to maximize their score. Calculate the resulting score of Alice.",
    "input": "The first line contains one integer T ( 1 \u2264 T \u2264 500 ) \u2014 the number of test cases. Each test case contains exactly one line containing a binary string s ( 1 \u2264 | s| \u2264 100 ) .",
    "output": "For each test case, print one integer \u2014 the resulting score of Alice ( the number of 1 - characters deleted by her) .",
    "note": "Questions about the optimal strategy will be ignored.",
    "topics": [
      "games",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Power Sequence",
    "url": "https://codeforces.com/problemset/problem/1397/B",
    "history": "Let' s call a list of positive integers a_ 0, a_ 1, . . . , a_ n- 1 a power sequence if there is a positive integer c , so that for every 0 \u2264 i \u2264 n- 1 then a_ i = c^ i . Given a list of n positive integers a_ 0, a_ 1, . . . , a_ n- 1 , you are allowed to: Reorder the list ( i. e. pick a permutation p of { 0, 1, . . . , n - 1} and change a_ i to a_ p_ i ) , then Do the following operation any number of times: pick an index i and change a_ i to a_ i - 1 or a_ i + 1 ( i. e. increment or decrement a_ i by 1 ) with a cost of 1 . Find the minimum cost to transform a_ 0, a_ 1, . . . , a_ n- 1 into a power sequence.",
    "input": "The first line contains an integer n ( 3 \u2264 n \u2264 10^ 5 ) . The second line contains n integers a_ 0, a_ 1, . . . , a_ n- 1 ( 1 \u2264 a_ i \u2264 10^ 9 ) .",
    "output": "Print the minimum cost to transform a_ 0, a_ 1, . . . , a_ n- 1 into a power sequence.",
    "note": "In the first example, we first reorder { 1, 3, 2} into { 1, 2, 3} , then increment a_ 2 to 4 with cost 1 to get a power sequence { 1, 2, 4} .",
    "topics": [
      "brute force",
      "math",
      "number theory",
      "sortings"
    ]
  },
  {
    "title": "Rainbow Rectangles",
    "url": "https://codeforces.com/problemset/problem/1396/D",
    "history": "Shrimpy Duc is a fat and greedy boy who is always hungry. After a while of searching for food to satisfy his never- ending hunger, Shrimpy Duc finds M M candies lying unguarded on a L \u00d7 L grid. There are n M M candies on the grid, the i - th M M is currently located at ( x_ i + 0. 5, y_ i + 0. 5) , and has color c_ i out of a total of k colors ( the size of M Ms are insignificant) . Shrimpy Duc wants to steal a rectangle of M Ms, specifically, he wants to select a rectangle with integer coordinates within the grid and steal all candies within the rectangle. Shrimpy Duc doesn' t need to steal every single candy, however, he would like to steal at least one candy for each color. In other words, he wants to select a rectangle whose sides are parallel to the coordinate axes and whose left- bottom vertex ( X_ 1, Y_ 1) and right- top vertex ( X_ 2, Y_ 2) are points with integer coordinates satisfying 0 \u2264 X_ 1 < X_ 2 \u2264 L and 0 \u2264 Y_ 1 < Y_ 2 \u2264 L , so that for every color 1 \u2264 c \u2264 k there is at least one M M with color c that lies within that rectangle. How many such rectangles are there? This number may be large, so you only need to find it modulo 10^ 9 + 7 .",
    "input": "The first line contains three positive integers n, k, L ( 1 \u2264 k \u2264 n \u2264 2 \u00b7 10^ 3, 1 \u2264 L \u2264 10^ 9 ) \u2014 the number of M Ms, the number of colors and the length of the grid respectively. The following n points describe the M Ms. Each line contains three integers x_ i, y_ i, c_ i ( 0 \u2264 x_ i, y_ i < L, 1 \u2264 c_ i \u2264 k) \u2014 the coordinates and color of the i - th M M respectively. Different M Ms have different coordinates ( x_ i x_ j or y_ i y_ j for every i j ) , and for every 1 \u2264 c \u2264 k there is at least one M M with color c .",
    "output": "Output a single integer \u2014 the number of rectangles satisfying Shrimpy Duc' s conditions, modulo 10^ 9 + 7 .",
    "note": "Grid for the first sample:",
    "topics": [
      "data structures",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Boboniu and Jianghu",
    "url": "https://codeforces.com/problemset/problem/1394/D",
    "history": "Since Boboniu finished building his Jianghu, he has been doing Kungfu on these mountains every day. Boboniu designs a map for his n mountains. He uses n- 1 roads to connect all n mountains. Every pair of mountains is connected via roads. For the i - th mountain, Boboniu estimated the tiredness of doing Kungfu on the top of it as t_ i . He also estimated the height of each mountain as h_ i . A path is a sequence of mountains M such that for each i ( 1 \u2264 i < | M| ) , there exists a road between M_ i and M_ i+ 1 . Boboniu would regard the path as a challenge if for each i ( 1\u2264 i< | M| ) , h_ M_ i\u2264 h_ M_ i+ 1 . Boboniu wants to divide all n- 1 roads into several challenges. Note that each road must appear in exactly one challenge, but a mountain may appear in several challenges. Boboniu wants to minimize the total tiredness to do all the challenges. The tiredness of a challenge M is the sum of tiredness of all mountains in it, i. e. \u2211_ i= 1^ | M| t_ M_ i . He asked you to find the minimum total tiredness. As a reward for your work, you' ll become a guardian in his Jianghu.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) , denoting the number of the mountains. The second line contains n integers t_ 1, t_ 2, . . . , t_ n ( 1 \u2264 t_ i \u2264 10^ 6 ) , denoting the tiredness for Boboniu to do Kungfu on each mountain. The third line contains n integers h_ 1, h_ 2, . . . , h_ n ( 1 \u2264 h_ i \u2264 10^ 6 ) , denoting the height of each mountain. Each of the following n - 1 lines contains two integers u_ i , v_ i ( 1 \u2264 u_ i, v_ i \u2264 n, u_ i = \u0338 v_ i ) , denoting the ends of the road. It' s guaranteed that all mountains are connected via roads.",
    "output": "Print one integer: the smallest sum of tiredness of all challenges.",
    "note": "For the first example: In the picture, the lighter a point is, the higher the mountain it represents. One of the best divisions is: Challenge 1 : 3 \u2192 1 \u2192 2 Challenge 2 : 5 \u2192 2 \u2192 4 The total tiredness of Boboniu is ( 30 + 40 + 10) + ( 20 + 10 + 50) = 160 . It can be shown that this is the minimum total tiredness.",
    "topics": [
      "dp",
      "greedy",
      "sortings",
      "trees"
    ]
  },
  {
    "title": "Boboniu Chats with Du",
    "url": "https://codeforces.com/problemset/problem/1394/A",
    "history": "Have you ever used the chat application QQ? Well, in a chat group of QQ, administrators can muzzle a user for days. In Boboniu' s chat group, there' s a person called Du Yi who likes to make fun of Boboniu every day. Du will chat in the group for n days. On the i - th day: If Du can speak, he' ll make fun of Boboniu with fun factor a_ i . But after that, he may be muzzled depending on Boboniu' s mood. Otherwise, Du won' t do anything. Boboniu' s mood is a constant m . On the i - th day: If Du can speak and a_ i> m , then Boboniu will be angry and muzzle him for d days, which means that Du won' t be able to speak on the i+ 1, i+ 2, \u22ef, min( i+ d, n) - th days. Otherwise, Boboniu won' t do anything. The total fun factor is the sum of the fun factors on the days when Du can speak. Du asked you to find the maximum total fun factor among all possible permutations of a .",
    "input": "The first line contains three integers n , d and m ( 1\u2264 d\u2264 n\u2264 10^ 5, 0\u2264 m\u2264 10^ 9 ) . The next line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0\u2264 a_ i\u2264 10^ 9 ) .",
    "output": "Print one integer: the maximum total fun factor among all permutations of a .",
    "note": "In the first example, you can set a' = [ 15, 5, 8, 10, 23] . Then Du' s chatting record will be: Make fun of Boboniu with fun factor 15 . Be muzzled. Be muzzled. Make fun of Boboniu with fun factor 10 . Make fun of Boboniu with fun factor 23 . Thus the total fun factor is 48 .",
    "topics": [
      "dp",
      "greedy",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Pinkie Pie Eats Patty-cakes",
    "url": "https://codeforces.com/problemset/problem/1393/C",
    "history": "Pinkie Pie has bought a bag of patty- cakes with different fillings! But it appeared that not all patty- cakes differ from one another with filling. In other words, the bag contains some patty- cakes with the same filling. Pinkie Pie eats the patty- cakes one- by- one. She likes having fun so she decided not to simply eat the patty- cakes but to try not to eat the patty- cakes with the same filling way too often. To achieve this she wants the minimum distance between the eaten with the same filling to be the largest possible. Herein Pinkie Pie called the distance between two patty- cakes the number of eaten patty- cakes strictly between them. Pinkie Pie can eat the patty- cakes in any order. She is impatient about eating all the patty- cakes up so she asks you to help her to count the greatest minimum distance between the eaten patty- cakes with the same filling amongst all possible orders of eating! Pinkie Pie is going to buy more bags of patty- cakes so she asks you to solve this problem for several bags!",
    "input": "The first line contains a single integer T ( 1 \u2264 T \u2264 100 ) : the number of bags for which you need to solve the problem. The first line of each bag description contains a single integer n ( 2 \u2264 n \u2264 10^ 5 ) : the number of patty- cakes in it. The second line of the bag description contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) : the information of patty- cakes' fillings: same fillings are defined as same integers, different fillings are defined as different integers. It is guaranteed that each bag contains at least two patty- cakes with the same filling. It is guaranteed that the sum of n over all bags does not exceed 10^ 5 .",
    "output": "For each bag print in separate line one single integer: the largest minimum distance between the eaten patty- cakes with the same filling amongst all possible orders of eating for that bag.",
    "note": "For the first bag Pinkie Pie can eat the patty- cakes in the following order ( by fillings) : 1 , 6 , 4 , 7 , 1 , 6 , 4 ( in this way, the minimum distance is equal to 3 ) . For the second bag Pinkie Pie can eat the patty- cakes in the following order ( by fillings) : 1 , 4 , 6 , 7 , 4 , 1 , 6 , 4 ( in this way, the minimum distance is equal to 2 ) .",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Bicolored Segments",
    "url": "https://codeforces.com/problemset/problem/1389/F",
    "history": "You are given n segments [ l_ 1, r_ 1] , [ l_ 2, r_ 2] , . . . , [ l_ n, r_ n] . Each segment has one of two colors: the i - th segment' s color is t_ i . Let' s call a pair of segments i and j bad if the following two conditions are met: t_ i t_ j ; the segments [ l_ i, r_ i] and [ l_ j, r_ j] intersect, embed or touch, i. e. there exists an integer x such that x \u2208 [ l_ i, r_ i] and x \u2208 [ l_ j, r_ j] . Calculate the maximum number of segments that can be selected from the given ones, so that there is no bad pair among the selected ones.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 number of segments. The next n lines contains three integers l_ i, r_ i, t_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 10^ 9; t_ i \u2208{ 1, 2} ) \u2014 description of the i - th segment.",
    "output": "Print the maximum number of segments that can be selected, so that there is no bad pair among the selected segments.",
    "note": " ",
    "topics": [
      "data structures",
      "dp",
      "graph matchings",
      "sortings"
    ]
  },
  {
    "title": "Uncle Bogdan and Projections",
    "url": "https://codeforces.com/problemset/problem/1388/E",
    "history": "After returning to shore, uncle Bogdan usually visits the computer club \" The Rock\" , to solve tasks in a pleasant company. One day, uncle Bogdan met his good old friend who told him one unusual task. . . There are n non- intersecting horizontal segments with ends in integers points on the plane with the standard cartesian coordinate system. All segments are strictly above the OX axis. You can choose an arbitrary vector ( a , b ) , where b < 0 and coordinates are real numbers, and project all segments to OX axis along this vector. The projections shouldn' t intersect but may touch each other. Find the minimum possible difference between x coordinate of the right end of the rightmost projection and x coordinate of the left end of the leftmost projection.",
    "input": "The first line contains the single integer n ( 1 \u2264 n \u2264 2000 ) \u2014 the number of segments. The i - th of the next n lines contains three integers xl_ i , xr_ i and y_ i ( - 10^ 6 \u2264 xl_ i < xr_ i \u2264 10^ 6 ; 1 \u2264 y_ i \u2264 10^ 6 ) \u2014 coordinates of the corresponding segment. It' s guaranteed that the segments don' t intersect or touch.",
    "output": "Print the minimum possible difference you can get. Your answer will be considered correct if its absolute or relative error doesn' t exceed 10^ - 6 . Formally, if your answer is a and jury' s answer is b then your answer will be considered correct if | a - b| / max( 1, | b| ) \u2264 10^ - 6 .",
    "note": "In the first example if we project segments along the vector ( 1, - 1) then we get an answer 12- 3= 9 and ( it can be proven) it is impossible to get less. It is optimal to project along the vector ( 1, - 3) in the second example. The answer is 82/ 3- 21/ 3= 61/ 3",
    "topics": [
      "data structures",
      "geometry",
      "sortings"
    ]
  },
  {
    "title": "Mixture",
    "url": "https://codeforces.com/problemset/problem/1386/B",
    "history": "Serge, the chef of the famous restaurant \" Salt, Pepper Garlic\" is trying to obtain his first Michelin star. He has been informed that a secret expert plans to visit his restaurant this evening. Even though the expert' s name hasn' t been disclosed, Serge is certain he knows which dish from the menu will be ordered as well as what the taste preferences of the expert are. Namely, the expert requires an extremely precise proportion of salt, pepper and garlic powder in his dish. Serge keeps a set of bottles with mixtures of salt, pepper and garlic powder on a special shelf in the kitchen. For each bottle, he knows the exact amount of each of the ingredients in kilograms. Serge can combine any number of bottled mixtures ( or just use one of them directly) to get a mixture of particular proportions needed for a certain dish. Luckily, the absolute amount of a mixture that needs to be added to a dish is so small that you can assume that the amounts in the bottles will always be sufficient. However, the numeric values describing the proportions may be quite large. Serge would like to know whether it is possible to obtain the expert' s favourite mixture from the available bottles, and if so\u2014what is the smallest possible number of bottles needed to achieve that. Furthermore, the set of bottles on the shelf may change over time as Serge receives new ones or lends his to other chefs. So he would like to answer this question after each such change. For example, assume that expert' s favorite mixture is 1: 1: 1 and there are three bottles of mixtures on the shelf: [ Mixture Salt Pepper Garlic powder; 1 10 20 30; 2 300 200 100; 3 12 15 27; ] Amount of ingredient in the bottle, kg To obtain the desired mixture it is enough to use an equivalent amount of mixtures from bottles 1 and 2. If bottle 2 is removed, then it is no longer possible to obtain it. Write a program that helps Serge to solve this task! ScoringSubtasks: ( 13 points) N \u2264 50 , 0 < S_ i+ P_ i+ G_ i \u2264 10^ 2 ( 17 points) N \u2264 500 , 0 < S_ i+ P_ i+ G_ i \u2264 10^ 3 ( 30 points) N \u2264 5000 , 0 < S_ i+ P_ i+ G_ i \u2264 10^ 4 ( 40 points) No further constraints",
    "input": "The first row contains three non- negative integers S_ f , P_ f and G_ f ( 0 \u2264 S_ f, P_ f, G_ f ; 0 < S_ f+ P_ f+ G_ f \u2264 10^ 6 ) describing the amount of salt, pepper and garlic powder in the expert' s favourite mixture. For any real \u03b1> 0 , ( \u03b1S_ f, \u03b1P_ f, \u03b1G_ f) also is an expert' s favourite mixture. In the second row, there is a positive integer N ( number of changes on the shelf, N \u2264 100 000 ) . You should assume that initially the shelf is empty. Each of the next N rows describes a single change on the shelf: If a new bottle is added, the row contains capital letter A followed by three non- negative integers S_ i , P_ i and G_ i ( 0 \u2264 S_ i, P_ i, G_ i ; 0 < S_ i+ P_ i+ G_ i \u2264 10^ 6 ) describing the amount of salt, pepper and garlic powder in the added bottle. Added bottles are numbered consecutively by unique integers starting from 1 , that is, the i - th bottle corresponds to the i - th added bottle in the input data. If a particular bottle is removed from the shelf, the row contains capital letter R followed by the integer\u2014the bottle number r_ i . All values r_ i in the removals are unique, r_ i never exceeds total number of bottles added thus far.",
    "output": "Output N rows. The j - th row ( 1 \u2264 j \u2264 N ) should contain the number x_ j , the smallest number of bottles needed to prepare a mixture with the expert' s favourite proportions of salt, pepper and garlic powder using the bottles available after the first j changes on the shelf, or 0 if it is not possible.",
    "note": "Pay attention that in the example, bottles 1 and 3 contain the same proportions of salt, pepper and garlic powder.",
    "topics": [
      "*special",
      "data structures",
      "geometry",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Rearrange",
    "url": "https://codeforces.com/problemset/problem/1383/D",
    "history": "Koa the Koala has a matrix A of n rows and m columns. Elements of this matrix are distinct integers from 1 to n \u00b7 m ( each number from 1 to n \u00b7 m appears exactly once in the matrix) . For any matrix M of n rows and m columns let' s define the following: The i - th row of M is defined as R_ i( M) = [ M_ i1, M_ i2, . . . , M_ im ] for all i ( 1 \u2264 i \u2264 n ) . The j - th column of M is defined as C_ j( M) = [ M_ 1j, M_ 2j, . . . , M_ nj ] for all j ( 1 \u2264 j \u2264 m ) . Koa defines S( A) = ( X, Y) as the spectrum of A , where X is the set of the maximum values in rows of A and Y is the set of the maximum values in columns of A . More formally: X = { max( R_ 1( A) ) , max( R_ 2( A) ) , . . . , max( R_ n( A) ) } Y = { max( C_ 1( A) ) , max( C_ 2( A) ) , . . . , max( C_ m( A) ) } Koa asks you to find some matrix A' of n rows and m columns, such that each number from 1 to n \u00b7 m appears exactly once in the matrix, and the following conditions hold: S( A' ) = S( A) R_ i( A' ) is bitonic for all i ( 1 \u2264 i \u2264 n ) C_ j( A' ) is bitonic for all j ( 1 \u2264 j \u2264 m ) An array t ( t_ 1, t_ 2, . . . , t_ k ) is called bitonic if it first increases and then decreases. More formally: t is bitonic if there exists some position p ( 1 \u2264 p \u2264 k ) such that: t_ 1 < t_ 2 < . . . < t_ p > t_ p+ 1 > . . . > t_ k . Help Koa to find such matrix or to determine that it doesn' t exist.",
    "input": "The first line of the input contains two integers n and m ( 1 \u2264 n, m \u2264 250 ) \u2014 the number of rows and columns of A . Each of the ollowing n lines contains m integers. The j - th integer in the i - th line denotes element A_ ij ( 1 \u2264 A_ ij\u2264 n \u00b7 m ) of matrix A . It is guaranteed that every number from 1 to n \u00b7 m appears exactly once among elements of the matrix.",
    "output": "If such matrix doesn' t exist, print - 1 on a single line. Otherwise, the output must consist of n lines, each one consisting of m space separated integers \u2014 a description of A' . The j - th number in the i - th line represents the element A' _ ij . Every integer from 1 to n \u00b7 m should appear exactly once in A' , every row and column in A' must be bitonic and S( A) = S( A' ) must hold. If there are many answers print any.",
    "note": "Let' s analyze the first sample: For matrix A we have: Rows: R_ 1( A) = [ 3, 5, 6] ; max( R_ 1( A) ) = 6 R_ 2( A) = [ 1, 7, 9] ; max( R_ 2( A) ) = 9 R_ 3( A) = [ 4, 8, 2] ; max( R_ 3( A) ) = 8 Columns: C_ 1( A) = [ 3, 1, 4] ; max( C_ 1( A) ) = 4 C_ 2( A) = [ 5, 7, 8] ; max( C_ 2( A) ) = 8 C_ 3( A) = [ 6, 9, 2] ; max( C_ 3( A) ) = 9 X = { max( R_ 1( A) ) , max( R_ 2( A) ) , max( R_ 3( A) ) } = { 6, 9, 8 } Y = { max( C_ 1( A) ) , max( C_ 2( A) ) , max( C_ 3( A) ) } = { 4, 8, 9 } So S( A) = ( X, Y) = ( { 6, 9, 8 } , { 4, 8, 9 } ) For matrix A' we have: Rows: R_ 1( A' ) = [ 9, 5, 1] ; max( R_ 1( A' ) ) = 9 R_ 2( A' ) = [ 7, 8, 2] ; max( R_ 2( A' ) ) = 8 R_ 3( A' ) = [ 3, 6, 4] ; max( R_ 3( A' ) ) = 6 Columns: C_ 1( A' ) = [ 9, 7, 3] ; max( C_ 1( A' ) ) = 9 C_ 2( A' ) = [ 5, 8, 6] ; max( C_ 2( A' ) ) = 8 C_ 3( A' ) = [ 1, 2, 4] ; max( C_ 3( A' ) ) = 4 Note that each of this arrays are bitonic. X = { max( R_ 1( A' ) ) , max( R_ 2( A' ) ) , max( R_ 3( A' ) ) } = { 9, 8, 6 } Y = { max( C_ 1( A' ) ) , max( C_ 2( A' ) ) , max( C_ 3( A' ) ) } = { 9, 8, 4 } So S( A' ) = ( X, Y) = ( { 9, 8, 6 } , { 9, 8, 4 } )",
    "topics": [
      "brute force",
      "constructive algorithms",
      "graphs",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "String Transformation 1",
    "url": "https://codeforces.com/problemset/problem/1383/A",
    "history": "Note that the only difference between String Transformation 1 and String Transformation 2 is in the move Koa does. In this version the letter y Koa selects must be strictly greater alphabetically than x ( read statement for better understanding) . You can make hacks in these problems independently. Koa the Koala has two strings A and B of the same length n ( | A| = | B| = n ) consisting of the first 20 lowercase English alphabet letters ( ie. from a to t) . In one move Koa: selects some subset of positions p_ 1, p_ 2, . . . , p_ k ( k \u2265 1; 1 \u2264 p_ i \u2264 n; p_ i = \u0338 p_ j if i = \u0338 j ) of A such that A_ p_ 1 = A_ p_ 2 = . . . = A_ p_ k = x ( ie. all letters on this positions are equal to some letter x ) . selects a letter y ( from the first 20 lowercase letters in English alphabet) such that y> x ( ie. letter y is strictly greater alphabetically than x ) . sets each letter in positions p_ 1, p_ 2, . . . , p_ k to letter y . More formally: for each i ( 1 \u2264 i \u2264 k ) Koa sets A_ p_ i = y . Note that you can only modify letters in string A . Koa wants to know the smallest number of moves she has to do to make strings equal to each other ( A = B ) or to determine that there is no way to make them equal. Help her!",
    "input": "Each test contains multiple test cases. The first line contains t ( 1 \u2264 t \u2264 10 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of strings A and B . The second line of each test case contains string A ( | A| = n ) . The third line of each test case contains string B ( | B| = n ) . Both strings consists of the first 20 lowercase English alphabet letters ( ie. from a to t) . It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case: Print on a single line the smallest number of moves she has to do to make strings equal to each other ( A = B ) or - 1 if there is no way to make them equal.",
    "note": "In the 1 - st test case Koa: selects positions 1 and 2 and sets A_ 1 = A_ 2 = b ( aab \u2192bbb ) . selects positions 2 and 3 and sets A_ 2 = A_ 3 = c ( bbb\u2192 bcc ) . In the 2 - nd test case Koa has no way to make string A equal B . In the 3 - rd test case Koa: selects position 1 and sets A_ 1 = t ( abc \u2192tbc ) . selects position 2 and sets A_ 2 = s ( tbc \u2192 tsc ) . selects position 3 and sets A_ 3 = r ( tsc\u2192 tsr ) .",
    "topics": [
      "dsu",
      "graphs",
      "greedy",
      "sortings",
      "strings",
      "trees",
      "two pointers"
    ]
  },
  {
    "title": "Origami",
    "url": "https://codeforces.com/problemset/problem/1381/E",
    "history": "After being discouraged by 13 time- limit- exceeded verdicts on an ugly geometry problem, you decided to take a relaxing break for arts and crafts. There is a piece of paper in the shape of a simple polygon with n vertices. The polygon may be non- convex, but we all know that proper origami paper has the property that any horizontal line intersects the boundary of the polygon in at most two points. If you fold the paper along the vertical line x= f , what will be the area of the resulting shape? When you fold, the part of the paper to the left of the line is symmetrically reflected on the right side. Your task is to answer q independent queries for values f_ 1, . . . , f_ q .",
    "input": "The first line contains two integers n , q ( 3\u2264 n\u2264 10^ 5, 1\u2264 q\u2264 10^ 5 ) \u2014 the number of polygon vertices and queries, respectively. Each of the next n lines contains two integers x_ i , y_ i ( | x_ i| , | y_ i| \u2264 10^ 5 ) \u2014 the coordinates of the i - th point of the polygon. The polygon has an edge connecting each pair of adjacent points in the input, and also an edge between ( x_ 1, y_ 1) and ( x_ n, y_ n) . It is guaranteed that the polygon is non- degenerate and that any horizontal line intersects the boundary of the polygon in at most two points. In particular, no boundary edge is strictly horizontal. Two adjacent sides may be collinear. Each of the next q lines contains a single integer f_ i ( min_ j= 1^ n( x_ j) < f_ i< max_ j= 1^ n( x_ j) ) \u2014 the x - coordinate of the i - th fold query. It is guaranteed that all f_ i are distinct.",
    "output": "For each query, output the area A_ i of the paper if you fold it along the line x= f_ i . Your answer is considered correct if its absolute or relative error does not exceed 10^ - 4 . Formally, let your answer be a , and the jury' s answer be b . Your answer is accepted if and only if | a - b| / max( 1, | b| ) \u2264 10^ - 4 .",
    "note": "The first test, with the fold f= - 5 : The second test, with the fold f= 1 : The third test, with the fold f= - 1 :",
    "topics": [
      "geometry",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Mastermind",
    "url": "https://codeforces.com/problemset/problem/1381/C",
    "history": "In the game of Mastermind, there are two players \u2014 Alice and Bob. Alice has a secret code, which Bob tries to guess. Here, a code is defined as a sequence of n colors. There are exactly n+ 1 colors in the entire universe, numbered from 1 to n+ 1 inclusive. When Bob guesses a code, Alice tells him some information about how good of a guess it is, in the form of two integers x and y . The first integer x is the number of indices where Bob' s guess correctly matches Alice' s code. The second integer y is the size of the intersection of the two codes as multisets. That is, if Bob were to change the order of the colors in his guess, y is the maximum number of indices he could get correct. For example, suppose n= 5 , Alice' s code is [ 3, 1, 6, 1, 2] , and Bob' s guess is [ 3, 1, 1, 2, 5] . At indices 1 and 2 colors are equal, while in the other indices they are not equal. So x= 2 . And the two codes have the four colors 1, 1, 2, 3 in common, so y= 4 . Solid lines denote a matched color for the same index. Dashed lines denote a matched color at a different index. x is the number of solid lines, and y is the total number of lines. You are given Bob' s guess and two values x and y . Can you find one possibility of Alice' s code so that the values of x and y are correct?",
    "input": "The first line contains a single integer t ( 1\u2264 t\u2264 1000 ) \u2014 the number of test cases. Next 2t lines contain descriptions of test cases. The first line of each test case contains three integers n, x, y ( 1\u2264 n\u2264 10^ 5, 0\u2264 x\u2264 y\u2264 n ) \u2014 the length of the codes, and two values Alice responds with. The second line of each test case contains n integers b_ 1, . . . , b_ n ( 1\u2264 b_ i\u2264 n+ 1 ) \u2014 Bob' s guess, where b_ i is the i - th color of the guess. It is guaranteed that the sum of n across all test cases does not exceed 10^ 5 .",
    "output": "For each test case, on the first line, output \" YES\" if there is a solution, or \" NO\" if there is no possible secret code consistent with the described situation. You can print each character in any case ( upper or lower) . If the answer is \" YES\" , on the next line output n integers a_ 1, . . . , a_ n ( 1\u2264 a_ i\u2264 n+ 1 ) \u2014 Alice' s secret code, where a_ i is the i - th color of the code. If there are multiple solutions, output any.",
    "note": "The first test case is described in the statement. In the second test case, x= 3 because the colors are equal at indices 2, 4, 5 . And y= 4 because they share the colors 1, 1, 1, 2 . In the third test case, x= 0 because there is no index where the colors are the same. But y= 4 because they share the colors 3, 3, 5, 5 . In the fourth test case, it can be proved that no solution exists.",
    "topics": [
      "constructive algorithms",
      "graph matchings",
      "greedy",
      "implementation",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Create The Teams",
    "url": "https://codeforces.com/problemset/problem/1380/C",
    "history": "There are n programmers that you want to split into several non- empty teams. The skill of the i - th programmer is a_ i . You want to assemble the maximum number of teams from them. There is a restriction for each team: the number of programmers in the team multiplied by the minimum skill among all programmers in the team must be at least x . Each programmer should belong to at most one team. Some programmers may be left without a team. Calculate the maximum number of teams that you can assemble.",
    "input": "The first line contains the integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains two integers n and x ( 1 \u2264 n \u2264 10^ 5; 1 \u2264 x \u2264 10^ 9 ) \u2014 the number of programmers and the restriction of team skill respectively. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is the skill of the i - th programmer. The sum of n over all inputs does not exceed 10^ 5 .",
    "output": "For each test case print one integer \u2014 the maximum number of teams that you can assemble.",
    "note": " ",
    "topics": [
      "brute force",
      "dp",
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "New Passenger Trams",
    "url": "https://codeforces.com/problemset/problem/1379/D",
    "history": "There are many freight trains departing from Kirnes planet every day. One day on that planet consists of h hours, and each hour consists of m minutes, where m is an even number. Currently, there are n freight trains, and they depart every day at the same time: i - th train departs at h_ i hours and m_ i minutes. The government decided to add passenger trams as well: they plan to add a regular tram service with half- hour intervals. It means that the first tram of the day must depart at 0 hours and t minutes, where 0 \u2264 t < m 2 , the second tram departs m 2 minutes after the first one and so on. This schedule allows exactly two passenger trams per hour, which is a great improvement. To allow passengers to board the tram safely, the tram must arrive k minutes before. During the time when passengers are boarding the tram, no freight train can depart from the planet. However, freight trains are allowed to depart at the very moment when the boarding starts, as well as at the moment when the passenger tram departs. Note that, if the first passenger tram departs at 0 hours and t minutes, where t < k , then the freight trains can not depart during the last k - t minutes of the day. A schematic picture of the correct way to run passenger trams. Here h= 2 ( therefore, the number of passenger trams is 2h= 4 ) , the number of freight trains is n= 6 . The passenger trams are marked in red ( note that the spaces between them are the same) . The freight trains are marked in blue. Time segments of length k before each passenger tram are highlighted in red. Note that there are no freight trains inside these segments. Unfortunately, it might not be possible to satisfy the requirements of the government without canceling some of the freight trains. Please help the government find the optimal value of t to minimize the number of canceled freight trains in case all passenger trams depart according to schedule.",
    "input": "The first line of input contains four integers n , h , m , k ( 1 \u2264 n \u2264 100 000 , 1 \u2264 h \u2264 10^ 9 , 2 \u2264 m \u2264 10^ 9 , m is even, 1 \u2264 k \u2264m 2 ) \u2014 the number of freight trains per day, the number of hours and minutes on the planet, and the boarding time for each passenger tram. n lines follow, each contains two integers h_ i and m_ i ( 0 \u2264 h_ i < h , 0 \u2264 m_ i < m ) \u2014 the time when i - th freight train departs. It is guaranteed that no freight trains depart at the same time.",
    "output": "The first line of output should contain two integers: the minimum number of trains that need to be canceled, and the optimal starting time t . Second line of output should contain freight trains that need to be canceled.",
    "note": "In the first test case of the example the first tram can depart at 0 hours and 0 minutes. Then the freight train at 16 hours and 0 minutes can depart at the same time as the passenger tram, and the freight train at 17 hours and 15 minutes can depart at the same time as the boarding starts for the upcoming passenger tram. In the second test case of the example it is not possible to design the passenger tram schedule without cancelling any of the freight trains: if t \u2208 [ 1, 15] , then the freight train at 16 hours and 0 minutes is not able to depart ( since boarding time is 16 minutes) . If t = 0 or t \u2208 [ 16, 29] , then the freight train departing at 17 hours 15 minutes is not able to depart. However, if the second freight train is canceled, one can choose t = 0 . Another possible option is to cancel the first train and choose t = 13 .",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Choosing flowers",
    "url": "https://codeforces.com/problemset/problem/1379/C",
    "history": "Vladimir would like to prepare a present for his wife: they have an anniversary! He decided to buy her exactly n flowers. Vladimir went to a flower shop, and he was amazed to see that there are m types of flowers being sold there, and there is unlimited supply of flowers of each type. Vladimir wants to choose flowers to maximize the happiness of his wife. He knows that after receiving the first flower of the i - th type happiness of his wife increases by a_ i and after receiving each consecutive flower of this type her happiness increases by b_ i . That is, if among the chosen flowers there are x_ i > 0 flowers of type i , his wife gets a_ i + ( x_ i - 1) \u00b7 b_ i additional happiness ( and if there are no flowers of type i , she gets nothing for this particular type) . Please help Vladimir to choose exactly n flowers to maximize the total happiness of his wife.",
    "input": "The first line contains the only integer t ( 1 \u2264 t \u2264 10 000 ) , the number of test cases. It is followed by t descriptions of the test cases. Each test case description starts with two integers n and m ( 1 \u2264 n \u2264 10^ 9 , 1 \u2264 m \u2264 100 000 ) , the number of flowers Vladimir needs to choose and the number of types of available flowers. The following m lines describe the types of flowers: each line contains integers a_ i and b_ i ( 0 \u2264 a_ i, b_ i \u2264 10^ 9 ) for i - th available type of flowers. The test cases are separated by a blank line. It is guaranteed that the sum of values m among all test cases does not exceed 100 000 .",
    "output": "For each test case output a single integer: the maximum total happiness of Vladimir' s wife after choosing exactly n flowers optimally.",
    "note": "In the first example case Vladimir can pick 1 flower of the first type and 3 flowers of the second type, in this case the total happiness equals 5 + ( 1 + 2 \u00b7 4) = 14 . In the second example Vladimir can pick 2 flowers of the first type, 2 flowers of the second type, and 1 flower of the third type, in this case the total happiness equals ( 5 + 1 \u00b7 2) + ( 4 + 1 \u00b7 2) + 3 = 16 .",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "dfs and similar",
      "dp",
      "greedy",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Inversion SwapSort",
    "url": "https://codeforces.com/problemset/problem/1375/E",
    "history": "Madeline has an array a of n integers. A pair ( u, v) of integers forms an inversion in a if: 1 \u2264 u < v \u2264 n . a_ u > a_ v . Madeline recently found a magical paper, which allows her to write two indices u and v and swap the values a_ u and a_ v . Being bored, she decided to write a list of pairs ( u_ i, v_ i) with the following conditions: all the pairs in the list are distinct and form an inversion in a . all the pairs that form an inversion in a are in the list. Starting from the given array, if you swap the values at indices u_ 1 and v_ 1 , then the values at indices u_ 2 and v_ 2 and so on, then after all pairs are processed, the array a will be sorted in non- decreasing order. Construct such a list or determine that no such list exists. If there are multiple possible answers, you may find any of them.",
    "input": "The first line of the input contains a single integer n ( 1 \u2264 n \u2264 1000 ) \u2014 the length of the array. Next line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9) \u2014 elements of the array.",
    "output": "Print - 1 if no such list exists. Otherwise in the first line you should print a single integer m ( 0 \u2264 m \u2264n( n- 1) 2 ) \u2014 number of pairs in the list. The i - th of the following m lines should contain two integers u_ i, v_ i ( 1 \u2264 u_ i < v_ i\u2264 n ) . If there are multiple possible answers, you may find any of them.",
    "note": "In the first sample test case the array will change in this order [ 3, 1, 2] \u2192 [ 2, 1, 3] \u2192 [ 1, 2, 3] . In the second sample test case it will be [ 1, 8, 1, 6] \u2192 [ 1, 6, 1, 8] \u2192 [ 1, 1, 6, 8] . In the third sample test case the array is already sorted.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Replace by MEX",
    "url": "https://codeforces.com/problemset/problem/1375/D",
    "history": "You' re given an array of n integers between 0 and n inclusive. In one operation, you can choose any element of the array and replace it by the MEX of the elements of the array ( which may change after the operation) . For example, if the current array is [ 0, 2, 2, 1, 4] , you can choose the second element and replace it by the MEX of the present elements \u2014 3 . Array will become [ 0, 3, 2, 1, 4] . You must make the array non- decreasing, using at most 2n operations. It can be proven that it is always possible. Please note that you do not have to minimize the number of operations. If there are many solutions, you can print any of them. \u2013An array b[ 1 . . . n] is non- decreasing if and only if b_ 1 \u2264 b_ 2 \u2264. . . \u2264 b_ n . The MEX ( minimum excluded) of an array is the smallest non- negative integer that does not belong to the array. For instance: The MEX of [ 2, 2, 1] is 0 , because 0 does not belong to the array. The MEX of [ 3, 1, 0, 1] is 2 , because 0 and 1 belong to the array, but 2 does not. The MEX of [ 0, 3, 1, 2] is 4 because 0 , 1 , 2 and 3 belong to the array, but 4 does not. It' s worth mentioning that the MEX of an array of length n is always between 0 and n inclusive.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 200 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n ( 3 \u2264 n \u2264 1000 ) \u2014 length of the array. The second line of each test case contains n integers a_ 1, . . . , a_ n ( 0 \u2264 a_ i \u2264 n ) \u2014 elements of the array. Note that they don' t have to be distinct. It is guaranteed that the sum of n over all test cases doesn' t exceed 1000 .",
    "output": "For each test case, you must output two lines: The first line must contain a single integer k ( 0 \u2264 k \u2264 2n ) \u2014 the number of operations you perform. The second line must contain k integers x_ 1, . . . , x_ k ( 1 \u2264 x_ i \u2264 n ) , where x_ i is the index chosen for the i - th operation. If there are many solutions, you can find any of them. Please remember that it is not required to minimize k .",
    "note": "In the first test case, the array is already non- decreasing ( 2 \u2264 2 \u2264 3 ) . Explanation of the second test case ( the element modified by each operation is colored in red) : a = [ 2, 1, 0] ; the initial MEX is 3 . a = [ 2, 1, 3] ; the new MEX is 0 . a = [ 0, 1, 3] ; the new MEX is 2 . The final array is non- decreasing: 0 \u2264 1 \u2264 3 . Explanation of the third test case: a = [ 0, 7, 3, 1, 3, 7, 7] ; the initial MEX is 2 . a = [ 0, 2, 3, 1, 3, 7, 7] ; the new MEX is 4 . a = [ 0, 2, 3, 1, 4, 7, 7] ; the new MEX is 5 . a = [ 0, 2, 3, 1, 5, 7, 7] ; the new MEX is 4 . a = [ 0, 2, 3, 4, 5, 7, 7] ; the new MEX is 1 . The final array is non- decreasing: 0 \u2264 2 \u2264 3 \u2264 4 \u2264 5 \u2264 7 \u2264 7 .",
    "topics": [
      "brute force",
      "constructive algorithms",
      "sortings"
    ]
  },
  {
    "title": "Cyclic Shifts Sorting",
    "url": "https://codeforces.com/problemset/problem/1374/F",
    "history": "You are given an array a consisting of n integers. In one move, you can choose some index i ( 1 \u2264 i \u2264 n - 2 ) and shift the segment [ a_ i, a_ i + 1, a_ i + 2] cyclically to the right ( i. e. replace the segment [ a_ i, a_ i + 1, a_ i + 2] with [ a_ i + 2, a_ i, a_ i + 1] ) . Your task is to sort the initial array by no more than n^ 2 such operations or say that it is impossible to do that. You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains one integer n ( 3 \u2264 n \u2264 500 ) \u2014 the length of a . The second line of the test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 500 ) , where a_ i is the i - th element a . It is guaranteed that the sum of n does not exceed 500 .",
    "output": "For each test case, print the answer: - 1 on the only line if it is impossible to sort the given array using operations described in the problem statement, or the number of operations ans on the first line and ans integers idx_ 1, idx_ 2, . . . , idx_ ans ( 1 \u2264 idx_ i \u2264 n - 2 ) , where idx_ i is the index of left border of the segment for the i - th operation. You should print indices in order of performing operations.",
    "note": " ",
    "topics": [
      "brute force",
      "constructive algorithms",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Reading Books (hard version)",
    "url": "https://codeforces.com/problemset/problem/1374/E2",
    "history": "Easy and hard versions are actually different problems, so read statements of both problems completely and carefully. Summer vacation has started so Alice and Bob want to play and joy, but. . . Their mom doesn' t think so. She says that they have to read exactly m books before all entertainments. Alice and Bob will read each book together to end this exercise faster. There are n books in the family library. The i - th book is described by three integers: t_ i \u2014 the amount of time Alice and Bob need to spend to read it, a_ i ( equals 1 if Alice likes the i - th book and 0 if not) , and b_ i ( equals 1 if Bob likes the i - th book and 0 if not) . So they need to choose exactly m books from the given n books in such a way that: Alice likes at least k books from the chosen set and Bob likes at least k books from the chosen set; the total reading time of these m books is minimized ( they are children and want to play and joy as soon a possible) . The set they choose is the same for both Alice an Bob ( it' s shared between them) and they read all books together, so the total reading time is the sum of t_ i over all books that are in the chosen set. Your task is to help them and find any suitable set of books or determine that it is impossible to find such a set.",
    "input": "The first line of the input contains three integers n , m and k ( 1 \u2264 k \u2264 m \u2264 n \u2264 2 \u00b7 10^ 5 ) . The next n lines contain descriptions of books, one description per line: the i - th line contains three integers t_ i , a_ i and b_ i ( 1 \u2264 t_ i \u2264 10^ 4 , 0 \u2264 a_ i, b_ i \u2264 1 ) , where: t_ i \u2014 the amount of time required for reading the i - th book; a_ i equals 1 if Alice likes the i - th book and 0 otherwise; b_ i equals 1 if Bob likes the i - th book and 0 otherwise.",
    "output": "If there is no solution, print only one integer - 1. If the solution exists, print T in the first line \u2014 the minimum total reading time of the suitable set of books. In the second line print m distinct integers from 1 to n in any order \u2014 indices of books which are in the set you found. If there are several answers, print any of them.",
    "note": " ",
    "topics": [
      "data structures",
      "greedy",
      "implementation",
      "sortings",
      "ternary search",
      "two pointers"
    ]
  },
  {
    "title": "Reading Books (easy version)",
    "url": "https://codeforces.com/problemset/problem/1374/E1",
    "history": "Easy and hard versions are actually different problems, so read statements of both problems completely and carefully. Summer vacation has started so Alice and Bob want to play and joy, but. . . Their mom doesn' t think so. She says that they have to read some amount of books before all entertainments. Alice and Bob will read each book together to end this exercise faster. There are n books in the family library. The i - th book is described by three integers: t_ i \u2014 the amount of time Alice and Bob need to spend to read it, a_ i ( equals 1 if Alice likes the i - th book and 0 if not) , and b_ i ( equals 1 if Bob likes the i - th book and 0 if not) . So they need to choose some books from the given n books in such a way that: Alice likes at least k books from the chosen set and Bob likes at least k books from the chosen set; the total reading time of these books is minimized ( they are children and want to play and joy as soon a possible) . The set they choose is the same for both Alice an Bob ( it' s shared between them) and they read all books together, so the total reading time is the sum of t_ i over all books that are in the chosen set. Your task is to help them and find any suitable set of books or determine that it is impossible to find such a set.",
    "input": "The first line of the input contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 2 \u00b7 10^ 5 ) . The next n lines contain descriptions of books, one description per line: the i - th line contains three integers t_ i , a_ i and b_ i ( 1 \u2264 t_ i \u2264 10^ 4 , 0 \u2264 a_ i, b_ i \u2264 1 ) , where: t_ i \u2014 the amount of time required for reading the i - th book; a_ i equals 1 if Alice likes the i - th book and 0 otherwise; b_ i equals 1 if Bob likes the i - th book and 0 otherwise.",
    "output": "If there is no solution, print only one integer - 1. Otherwise print one integer T \u2014 the minimum total reading time of the suitable set of books.",
    "note": " ",
    "topics": [
      "data structures",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Zero Remainder Array",
    "url": "https://codeforces.com/problemset/problem/1374/D",
    "history": "You are given an array a consisting of n positive integers. Initially, you have an integer x = 0 . During one move, you can do one of the following two operations: Choose exactly one i from 1 to n and increase a_ i by x ( a_ i : = a_ i + x ) , then increase x by 1 ( x : = x + 1 ) . Just increase x by 1 ( x : = x + 1 ) . The first operation can be applied no more than once to each i from 1 to n . Your task is to find the minimum number of moves required to obtain such an array that each its element is divisible by k ( the value k is given) . You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains two integers n and k ( 1 \u2264 n \u2264 2 \u00b7 10^ 5; 1 \u2264 k \u2264 10^ 9 ) \u2014 the length of a and the required divisior. The second line of the test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is the i - th element of a . It is guaranteed that the sum of n does not exceed 2 \u00b7 10^ 5 ( \u2211 n \u2264 2 \u00b7 10^ 5 ) .",
    "output": "For each test case, print the answer \u2014 the minimum number of moves required to obtain such an array that each its element is divisible by k .",
    "note": "Consider the first test case of the example: x= 0 , a = [ 1, 2, 1, 3] . Just increase x ; x= 1 , a = [ 1, 2, 1, 3] . Add x to the second element and increase x ; x= 2 , a = [ 1, 3, 1, 3] . Add x to the third element and increase x ; x= 3 , a = [ 1, 3, 3, 3] . Add x to the fourth element and increase x ; x= 4 , a = [ 1, 3, 3, 6] . Just increase x ; x= 5 , a = [ 1, 3, 3, 6] . Add x to the first element and increase x ; x= 6 , a = [ 6, 3, 3, 6] . We obtained the required array. Note that you can' t add x to the same element more than once.",
    "topics": [
      "math",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Asterism (Hard Version)",
    "url": "https://codeforces.com/problemset/problem/1371/E2",
    "history": "This is the hard version of the problem. The difference between versions is the constraints on n and a_ i . You can make hacks only if all versions of the problem are solved. First, Aoi came up with the following idea for the competitive programming problem: Yuzu is a girl who collecting candies. Originally, she has x candies. There are also n enemies numbered with integers from 1 to n . Enemy i has a_ i candies. Yuzu is going to determine a permutation P . A permutation is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, { 2, 3, 1, 5, 4} is a permutation, but { 1, 2, 2} is not a permutation ( 2 appears twice in the array) and { 1, 3, 4} is also not a permutation ( because n= 3 but there is the number 4 in the array) . After that, she will do n duels with the enemies with the following rules: If Yuzu has equal or more number of candies than enemy P_ i , she wins the duel and gets 1 candy. Otherwise, she loses the duel and gets nothing. The candy which Yuzu gets will be used in the next duels. Yuzu wants to win all duels. How many valid permutations P exist? This problem was easy and wasn' t interesting for Akari, who is a friend of Aoi. And Akari made the following problem from the above idea: Let' s define f( x) as the number of valid permutations for the integer x . You are given n , a and a prime number p \u2264 n . Let' s call a positive integer x good, if the value f( x) is not divisible by p . Find all good integers x . Your task is to solve this problem made by Akari.",
    "input": "The first line contains two integers n , p ( 2 \u2264 p \u2264 n \u2264 10^ 5) . It is guaranteed, that the number p is prime ( it has exactly two divisors 1 and p ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9) .",
    "output": "In the first line, print the number of good integers x . In the second line, output all good integers x in the ascending order. It is guaranteed that the number of good integers x does not exceed 10^ 5 .",
    "note": "In the first test, p= 2 . If x \u2264 2 , there are no valid permutations for Yuzu. So f( x) = 0 for all x \u2264 2 . The number 0 is divisible by 2 , so all integers x \u2264 2 are not good. If x = 3 , { 1, 2, 3} is the only valid permutation for Yuzu. So f( 3) = 1 , so the number 3 is good. If x = 4 , { 1, 2, 3} , { 1, 3, 2} , { 2, 1, 3} , { 2, 3, 1} are all valid permutations for Yuzu. So f( 4) = 4 , so the number 4 is not good. If x \u2265 5 , all 6 permutations are valid for Yuzu. So f( x) = 6 for all x \u2265 5 , so all integers x \u2265 5 are not good. So, the only good number is 3 . In the third test, for all positive integers x the value f( x) is divisible by p = 3 .",
    "topics": [
      "binary search",
      "combinatorics",
      "dp",
      "math",
      "number theory",
      "sortings"
    ]
  },
  {
    "title": "Asterism (Easy Version)",
    "url": "https://codeforces.com/problemset/problem/1371/E1",
    "history": "This is the easy version of the problem. The difference between versions is the constraints on n and a_ i . You can make hacks only if all versions of the problem are solved. First, Aoi came up with the following idea for the competitive programming problem: Yuzu is a girl who collecting candies. Originally, she has x candies. There are also n enemies numbered with integers from 1 to n . Enemy i has a_ i candies. Yuzu is going to determine a permutation P . A permutation is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, { 2, 3, 1, 5, 4} is a permutation, but { 1, 2, 2} is not a permutation ( 2 appears twice in the array) and { 1, 3, 4} is also not a permutation ( because n= 3 but there is the number 4 in the array) . After that, she will do n duels with the enemies with the following rules: If Yuzu has equal or more number of candies than enemy P_ i , she wins the duel and gets 1 candy. Otherwise, she loses the duel and gets nothing. The candy which Yuzu gets will be used in the next duels. Yuzu wants to win all duels. How many valid permutations P exist? This problem was easy and wasn' t interesting for Akari, who is a friend of Aoi. And Akari made the following problem from the above idea: Let' s define f( x) as the number of valid permutations for the integer x . You are given n , a and a prime number p \u2264 n . Let' s call a positive integer x good, if the value f( x) is not divisible by p . Find all good integers x . Your task is to solve this problem made by Akari.",
    "input": "The first line contains two integers n , p ( 2 \u2264 p \u2264 n \u2264 2000) . It is guaranteed, that the number p is prime ( it has exactly two divisors 1 and p ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 2000) .",
    "output": "In the first line, print the number of good integers x . In the second line, output all good integers x in the ascending order. It is guaranteed that the number of good integers x does not exceed 10^ 5 .",
    "note": "In the first test, p= 2 . If x \u2264 2 , there are no valid permutations for Yuzu. So f( x) = 0 for all x \u2264 2 . The number 0 is divisible by 2 , so all integers x \u2264 2 are not good. If x = 3 , { 1, 2, 3} is the only valid permutation for Yuzu. So f( 3) = 1 , so the number 3 is good. If x = 4 , { 1, 2, 3} , { 1, 3, 2} , { 2, 1, 3} , { 2, 3, 1} are all valid permutations for Yuzu. So f( 4) = 4 , so the number 4 is not good. If x \u2265 5 , all 6 permutations are valid for Yuzu. So f( x) = 6 for all x \u2265 5 , so all integers x \u2265 5 are not good. So, the only good number is 3 . In the third test, for all positive integers x the value f( x) is divisible by p = 3 .",
    "topics": [
      "binary search",
      "brute force",
      "combinatorics",
      "math",
      "number theory",
      "sortings"
    ]
  },
  {
    "title": "DeadLee",
    "url": "https://codeforces.com/problemset/problem/1369/E",
    "history": "Lee bought some food for dinner time, but Lee' s friends eat dinner in a deadly way. Lee is so scared, he doesn' t want to die, at least not before seeing Online IOI 2020. . . There are n different types of food and m Lee' s best friends. Lee has w_ i plates of the i - th type of food and each friend has two different favorite types of food: the i - th friend' s favorite types of food are x_ i and y_ i ( x_ i y_ i ) . Lee will start calling his friends one by one. Whoever is called will go to the kitchen and will try to eat one plate of each of his favorite food types. Each of the friends will go to the kitchen exactly once. The only problem is the following: if a friend will eat at least one plate of food ( in total) then he will be harmless. But if there is nothing left for him to eat ( neither x_ i nor y_ i ) , he will eat Lee instead \u00d7_ \u00d7 . Lee can choose the order of friends to call, so he' d like to determine if he can survive dinner or not. Also, he' d like to know the order itself.",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 10^ 5 ; 1 \u2264 m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of different food types and the number of Lee' s friends. The second line contains n integers w_ 1, w_ 2, . . . , w_ n ( 0 \u2264 w_ i \u2264 10^ 6 ) \u2014 the number of plates of each food type. The i - th line of the next m lines contains two integers x_ i and y_ i ( 1 \u2264 x_ i, y_ i \u2264 n ; x_ i y_ i ) \u2014 the favorite types of food of the i - th friend.",
    "output": "If Lee can survive the dinner then print ALIVE ( case insensitive) , otherwise print DEAD ( case insensitive) . Also, if he can survive the dinner, print the order Lee should call friends. If there are multiple valid orders, print any of them.",
    "note": "In the first example, any of the following orders of friends are correct : [ 1, 3, 2] , [ 3, 1, 2] , [ 2, 3, 1] , [ 3, 2, 1] . In the second example, Lee should call the second friend first ( the friend will eat a plate of food 1 ) and then call the first friend ( the friend will eat a plate of food 2 ) . If he calls the first friend sooner than the second one, then the first friend will eat one plate of food 1 and food 2 and there will be no food left for the second friend to eat.",
    "topics": [
      "data structures",
      "dfs and similar",
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "RationalLee",
    "url": "https://codeforces.com/problemset/problem/1369/C",
    "history": "Lee just became Master in Codeforces, and so, he went out to buy some gifts for his friends. He bought n integers, now it' s time to distribute them between his friends rationally. . . Lee has n integers a_ 1, a_ 2, . . . , a_ n in his backpack and he has k friends. Lee would like to distribute all integers in his backpack between his friends, such that the i - th friend will get exactly w_ i integers and each integer will be handed over to exactly one friend. Let' s define the happiness of a friend as the sum of the maximum and the minimum integer he' ll get. Lee would like to make his friends as happy as possible, in other words, he' d like to maximize the sum of friends' happiness. Now he asks you to calculate the maximum sum of friends' happiness.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Next 3t lines contain test cases \u2014 one per three lines. The first line of each test case contains two integers n and k ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ; 1 \u2264 k \u2264 n ) \u2014 the number of integers Lee has and the number of Lee' s friends. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) \u2014 the integers Lee has. The third line contains k integers w_ 1, w_ 2, . . . , w_ k ( 1 \u2264 w_ i \u2264 n ; w_ 1 + w_ 2 + . . . + w_ k = n ) \u2014 the number of integers Lee wants to give to each friend. It' s guaranteed that the sum of n over test cases is less than or equal to 2 \u00b7 10^ 5 .",
    "output": "For each test case, print a single integer \u2014 the maximum sum of happiness Lee can achieve.",
    "note": "In the first test case, Lee should give the greatest integer to the first friend ( his happiness will be 17 + 17 ) and remaining integers to the second friend ( his happiness will be 13 + 1 ) . In the second test case, Lee should give { 10, 10, 11} to the first friend and to the second friend, so the total happiness will be equal to ( 11 + 10) + ( 11 + 10) In the third test case, Lee has four friends and four integers, it doesn' t matter how he distributes the integers between his friends.",
    "topics": [
      "greedy",
      "math",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Flying Sort (Hard Version)",
    "url": "https://codeforces.com/problemset/problem/1367/F2",
    "history": "This is a hard version of the problem. In this version, the given array can contain equal elements and the constraints on n are greater than in the easy version of the problem. You are given an array a of n integers ( the given array can contain equal elements) . You can perform the following operations on array elements: choose any index i ( 1 \u2264 i \u2264 n ) and move the element a[ i] to the begin of the array; choose any index i ( 1 \u2264 i \u2264 n ) and move the element a[ i] to the end of the array. For example, if n = 5 , a = [ 4, 7, 2, 2, 9] , then the following sequence of operations can be performed: after performing the operation of the first type to the second element, the array a will become [ 7, 4, 2, 2, 9] ; after performing the operation of the second type to the second element, the array a will become [ 7, 2, 2, 9, 4] . You can perform operations of any type any number of times in any order. Find the minimum total number of operations of the first and second type that will make the a array sorted in non- decreasing order. In other words, what is the minimum number of operations must be performed so the array satisfies the inequalities a[ 1] \u2264 a[ 2] \u2264. . . \u2264 a[ n] .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the test. Then t test cases follow. Each test case starts with a line containing an integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the size of the array a . Then follow n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) \u2014 an array that needs to be sorted by the given operations. The given array can contain equal elements. The sum of n for all test cases in one test does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case output one integer \u2014 the minimum total number of operations of the first and second type, which will make the array sorted in non- decreasing order.",
    "note": "In the first test case, you first need to move two 2, to the beginning of the array. Therefore, the desired sequence of operations: [ 4, 7, 2, 2, 9] \u2192 [ 2, 4, 7, 2, 9] \u2192 [ 2, 2, 4, 7, 9] . In the second test case, you need to move the 1 to the beginning of the array, and the 8 \u2014 to the end. Therefore, the desired sequence of operations: [ 3, 5, 8, 1, 7] \u2192 [ 1, 3, 5, 8, 7] \u2192 [ 1, 3, 5, 7, 8] . In the third test case, the array is already sorted.",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "greedy",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Task On The Board",
    "url": "https://codeforces.com/problemset/problem/1367/D",
    "history": "Polycarp wrote on the board a string s containing only lowercase Latin letters ( ' a' - ' z' ) . This string is known for you and given in the input. After that, he erased some letters from the string s , and he rewrote the remaining letters in any order. As a result, he got some new string t . You have to find it with some additional information. Suppose that the string t has length m and the characters are numbered from left to right from 1 to m . You are given a sequence of m integers: b_ 1, b_ 2, . . . , b_ m , where b_ i is the sum of the distances | i- j| from the index i to all such indices j that t_ j > t_ i ( consider that ' a' < ' b' < . . . < ' z' ) . In other words, to calculate b_ i , Polycarp finds all such indices j that the index j contains a letter that is later in the alphabet than t_ i and sums all the values | i- j| . For example, if t = \" abzb\" , then: since t_ 1 = ' a' , all other indices contain letters which are later in the alphabet, that is: b_ 1= | 1- 2| + | 1- 3| + | 1- 4| = 1+ 2+ 3= 6 ; since t_ 2 = ' b' , only the index j= 3 contains the letter, which is later in the alphabet, that is: b_ 2= | 2- 3| = 1 ; since t_ 3 = ' z' , then there are no indexes j such that t_ j> t_ i , thus b_ 3= 0 ; since t_ 4 = ' b' , only the index j= 3 contains the letter, which is later in the alphabet, that is: b_ 4= | 4- 3| = 1 . Thus, if t = \" abzb\" , then b= [ 6, 1, 0, 1] . Given the string s and the array b , find any possible string t for which the following two requirements are fulfilled simultaneously: t is obtained from s by erasing some letters ( possibly zero) and then writing the rest in any order; the array, constructed from the string t according to the rules above, equals to the array b specified in the input data.",
    "input": "The first line contains an integer q ( 1 \u2264 q \u2264 100 ) \u2014 the number of test cases in the test. Then q test cases follow. Each test case consists of three lines: the first line contains string s , which has a length from 1 to 50 and consists of lowercase English letters; the second line contains positive integer m ( 1 \u2264 m \u2264 | s| ) , where | s| is the length of the string s , and m is the length of the array b ; the third line contains the integers b_ 1, b_ 2, . . . , b_ m ( 0 \u2264 b_ i \u2264 1225 ) . It is guaranteed that in each test case an answer exists.",
    "output": "Output q lines: the k - th of them should contain the answer ( string t ) to the k - th test case. It is guaranteed that an answer to each test case exists. If there are several answers, output any.",
    "note": "In the first test case, such strings t are suitable: \" aac' , \" aab\" . In the second test case, such trings t are suitable: \" a\" , \" b\" , \" c\" . In the third test case, only the string t equals to \" aba\" is suitable, but the character ' b' can be from the second or third position.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Swaps Again",
    "url": "https://codeforces.com/problemset/problem/1365/F",
    "history": "Ayush, Ashish and Vivek are busy preparing a new problem for the next Codeforces round and need help checking if their test cases are valid. Each test case consists of an integer n and two arrays a and b , of size n . If after some ( possibly zero) operations described below, array a can be transformed into array b , the input is said to be valid. Otherwise, it is invalid. An operation on array a is: select an integer k ( 1 \u2264 k \u2264\u230an/ 2\u230b) swap the prefix of length k with the suffix of length k For example, if array a initially is { 1, 2, 3, 4, 5, 6} , after performing an operation with k = 2 , it is transformed into { 5, 6, 3, 4, 1, 2} . Given the set of test cases, help them determine if each one is valid or invalid.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 500) \u2014 the number of test cases. The description of each test case is as follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 500) \u2014 the size of the arrays. The second line of each test case contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9) \u2014 elements of array a . The third line of each test case contains n integers b_ 1 , b_ 2 , . . . , b_ n ( 1 \u2264 b_ i \u2264 10^ 9) \u2014 elements of array b .",
    "output": "For each test case, print \" Yes\" if the given input is valid. Otherwise print \" No\" . You may print the answer in any case.",
    "note": "For the first test case, we can swap prefix a[ 1: 1] with suffix a[ 2: 2] to get a= [ 2, 1] . For the second test case, a is already equal to b . For the third test case, it is impossible since we cannot obtain 3 in a . For the fourth test case, we can first swap prefix a[ 1: 1] with suffix a[ 4: 4] to obtain a= [ 2, 2, 3, 1] . Now we can swap prefix a[ 1: 2] with suffix a[ 3: 4] to obtain a= [ 3, 1, 2, 2] . For the fifth test case, it is impossible to convert a to b .",
    "topics": [
      "constructive algorithms",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Johnny and Grandmaster",
    "url": "https://codeforces.com/problemset/problem/1361/B",
    "history": "Johnny has just found the new, great tutorial: \" How to become a grandmaster? \" . The tutorial tells many strange and unexpected for Johnny things, such as you have to be patient or that very important is solving many harder and harder problems. The boy has found an online judge with tasks divided by topics they cover. He has picked p^ k_ i problems from i - th category ( p is his favorite number) . He wants to solve them in two weeks ( the patience condition is too hard for Johnny, so for simplicity, he looks only at easy tasks, which can be solved in such a period) . Now our future grandmaster has to decide which topics to cover first and which the second week. Help him assign topics in such a way, that workload is balanced. Formally, given n numbers p^ k_ i , the boy wants to divide them into two disjoint sets, minimizing the absolute difference between sums of numbers in each set. Find the minimal absolute difference. Output the result modulo 10^ 9+ 7 .",
    "input": "Input consists of multiple test cases. The first line contains one integer t ( 1 \u2264 t \u2264 10^ 5) \u2014 the number of test cases. Each test case is described as follows: The first line contains two integers n and p ( 1 \u2264 n, p \u2264 10^ 6) . The second line contains n integers k_ i ( 0 \u2264 k_ i \u2264 10^ 6) . The sum of n over all test cases doesn' t exceed 10^ 6 .",
    "output": "Output one integer \u2014 the reminder of division the answer by 1 000 000 007 .",
    "note": "You have to minimize the difference, not it' s remainder. For example, if the minimum difference is equal to 2 , but there is also a distribution where the difference is 10^ 9 + 8 , then the answer is 2 , not 1 . In the first test case of the example, there' re the following numbers: 4 , 8 , 16 , 16 , and 8 . We can divide them into such two sets: 4, 8, 16 and 8, 16 . Then the difference between the sums of numbers in sets would be 4 .",
    "topics": [
      "greedy",
      "implementation",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Johnny and Contribution",
    "url": "https://codeforces.com/problemset/problem/1361/A",
    "history": "Today Johnny wants to increase his contribution. His plan assumes writing n blogs. One blog covers one topic, but one topic can be covered by many blogs. Moreover, some blogs have references to each other. Each pair of blogs that are connected by a reference has to cover different topics because otherwise, the readers can notice that they are split just for more contribution. Set of blogs and bidirectional references between some pairs of them is called blogs network. There are n different topics, numbered from 1 to n sorted by Johnny' s knowledge. The structure of the blogs network is already prepared. Now Johnny has to write the blogs in some order. He is lazy, so each time before writing a blog, he looks at it' s already written neighbors ( the blogs referenced to current one) and chooses the topic with the smallest number which is not covered by neighbors. It' s easy to see that this strategy will always allow him to choose a topic because there are at most n - 1 neighbors. For example, if already written neighbors of the current blog have topics number 1 , 3 , 1 , 5 , and 2 , Johnny will choose the topic number 4 for the current blog, because topics number 1 , 2 and 3 are already covered by neighbors and topic number 4 isn' t covered. As a good friend, you have done some research and predicted the best topic for each blog. Can you tell Johnny, in which order he has to write the blogs, so that his strategy produces the topic assignment chosen by you?",
    "input": "The first line contains two integers n ( 1 \u2264 n \u2264 5 \u00b7 10^ 5) and m ( 0 \u2264 m \u2264 5 \u00b7 10^ 5) \u2014 the number of blogs and references, respectively. Each of the following m lines contains two integers a and b ( a = \u0338 b ; 1 \u2264 a, b \u2264 n ) , which mean that there is a reference between blogs a and b . It' s guaranteed that the graph doesn' t contain multiple edges. The last line contains n integers t_ 1, t_ 2, . . . , t_ n , i - th of them denotes desired topic number of the i - th blog ( 1 \u2264 t_ i \u2264 n ) .",
    "output": "If the solution does not exist, then write - 1 . Otherwise, output n distinct integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n) , which describe the numbers of blogs in order which Johnny should write them. If there are multiple answers, print any.",
    "note": "In the first example, Johnny starts with writing blog number 2 , there are no already written neighbors yet, so it receives the first topic. Later he writes blog number 1 , it has reference to the already written second blog, so it receives the second topic. In the end, he writes blog number 3 , it has references to blogs number 1 and 2 so it receives the third topic. Second example: There does not exist any permutation fulfilling given conditions. Third example: First Johnny writes blog 2 , it receives the topic 1 . Then he writes blog 5 , it receives the topic 1 too because it doesn' t have reference to single already written blog 2 . Then he writes blog number 1 , it has reference to blog number 2 with topic 1 , so it receives the topic 2 . Then he writes blog number 3 which has reference to blog 2 , so it receives the topic 2 . Then he ends with writing blog number 4 which has reference to blog 5 and receives the topic 2 .",
    "topics": [
      "constructive algorithms",
      "graphs",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Similar Pairs",
    "url": "https://codeforces.com/problemset/problem/1360/C",
    "history": "We call two numbers x and y similar if they have the same parity ( the same remainder when divided by 2 ) , or if | x- y| = 1 . For example, in each of the pairs ( 2, 6) , ( 4, 3) , ( 11, 7) , the numbers are similar to each other, and in the pairs ( 1, 4) , ( 3, 12) , they are not. You are given an array a of n ( n is even) positive integers. Check if there is such a partition of the array into pairs that each element of the array belongs to exactly one pair and the numbers in each pair are similar to each other. For example, for the array a = [ 11, 14, 16, 12] , there is a partition into pairs ( 11, 12) and ( 14, 16) . The numbers in the first pair are similar because they differ by one, and in the second pair because they are both even.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Then t test cases follow. Each test case consists of two lines. The first line contains an even positive integer n ( 2 \u2264 n \u2264 50 ) \u2014 length of array a . The second line contains n positive integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 100 ) .",
    "output": "For each test case print: YES if the such a partition exists, NO otherwise. The letters in the words YES and NO can be displayed in any case.",
    "note": "The first test case was explained in the statement. In the second test case, the two given numbers are not similar. In the third test case, any partition is suitable.",
    "topics": [
      "constructive algorithms",
      "graph matchings",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Honest Coach",
    "url": "https://codeforces.com/problemset/problem/1360/B",
    "history": "There are n athletes in front of you. Athletes are numbered from 1 to n from left to right. You know the strength of each athlete \u2014 the athlete number i has the strength s_ i . You want to split all athletes into two teams. Each team must have at least one athlete, and each athlete must be exactly in one team. You want the strongest athlete from the first team to differ as little as possible from the weakest athlete from the second team. Formally, you want to split the athletes into two teams A and B so that the value | max( A) - min( B) | is as small as possible, where max( A) is the maximum strength of an athlete from team A , and min( B) is the minimum strength of an athlete from team B . For example, if n= 5 and the strength of the athletes is s= [ 3, 1, 2, 6, 4] , then one of the possible split into teams is: first team: A = [ 1, 2, 4] , second team: B = [ 3, 6] . In this case, the value | max( A) - min( B) | will be equal to | 4- 3| = 1 . This example illustrates one of the ways of optimal split into two teams. Print the minimum value | max( A) - min( B) | .",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases in the input. Then t test cases follow. Each test case consists of two lines. The first line contains positive integer n ( 2 \u2264 n \u2264 50 ) \u2014 number of athletes. The second line contains n positive integers s_ 1, s_ 2, . . . , s_ n ( 1 \u2264 s_ i \u2264 1000 ) , where s_ i \u2014 is the strength of the i - th athlete. Please note that s values may not be distinct.",
    "output": "For each test case print one integer \u2014 the minimum value of | max( A) - min( B) | with the optimal split of all athletes into two teams. Each of the athletes must be a member of exactly one of the two teams.",
    "note": "The first test case was explained in the statement. In the second test case, one of the optimal splits is A= [ 2, 1] , B= [ 3, 2, 4, 3] , so the answer is | 2- 2| = 0 .",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Maria Breaks the Self-isolation",
    "url": "https://codeforces.com/problemset/problem/1358/B",
    "history": "Maria is the most active old lady in her house. She was tired of sitting at home. She decided to organize a ceremony against the coronavirus. She has n friends who are also grannies ( Maria is not included in this number) . The i - th granny is ready to attend the ceremony, provided that at the time of her appearance in the courtyard there will be at least a_ i other grannies there. Note that grannies can come into the courtyard at the same time. Formally, the granny i agrees to come if the number of other grannies who came earlier or at the same time with her is greater than or equal to a_ i . Grannies gather in the courtyard like that. Initially, only Maria is in the courtyard ( that is, the initial number of grannies in the courtyard is 1 ) . All the remaining n grannies are still sitting at home. On each step Maria selects a subset of grannies, none of whom have yet to enter the courtyard. She promises each of them that at the time of her appearance there will be at least a_ i other grannies ( including Maria) in the courtyard. Maria can call several grannies at once. In this case, the selected grannies will go out into the courtyard at the same moment of time. She cannot deceive grannies, that is, the situation when the i - th granny in the moment of appearing in the courtyard, finds that now there are strictly less than a_ i other grannies ( except herself, but including Maria) , is prohibited. Please note that if several grannies appeared in the yard at the same time, then each of them sees others at the time of appearance. Your task is to find what maximum number of grannies ( including herself) Maria can collect in the courtyard for the ceremony. After all, the more people in one place during quarantine, the more effective the ceremony! Consider an example: if n= 6 and a= [ 1, 5, 4, 5, 1, 9] , then: at the first step Maria can call grannies with numbers 1 and 5 , each of them will see two grannies at the moment of going out into the yard ( note that a_ 1= 1 \u2264 2 and a_ 5= 1 \u2264 2 ) ; at the second step, Maria can call grannies with numbers 2 , 3 and 4 , each of them will see five grannies at the moment of going out into the yard ( note that a_ 2= 5 \u2264 5 , a_ 3= 4 \u2264 5 and a_ 4= 5 \u2264 5 ) ; the 6 - th granny cannot be called into the yard \u2014 therefore, the answer is 6 ( Maria herself and another 5 grannies) .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the input. Then test cases follow. The first line of a test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of grannies ( Maria is not included in this number) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 2\u00b710^ 5 ) . It is guaranteed that the sum of the values n over all test cases of the input does not exceed 10^ 5 .",
    "output": "For each test case, print a single integer k ( 1 \u2264 k \u2264 n + 1 ) \u2014 the maximum possible number of grannies in the courtyard.",
    "note": "In the first test case in the example, on the first step Maria can call all the grannies. Then each of them will see five grannies when they come out. Therefore, Maria and five other grannies will be in the yard. In the second test case in the example, no one can be in the yard, so Maria will remain there alone. The third test case in the example is described in the details above. In the fourth test case in the example, on the first step Maria can call grannies with numbers 1 , 2 and 3 . If on the second step Maria calls 4 or 5 ( one of them) , then when a granny appears in the yard, she will see only four grannies ( but it is forbidden) . It means that Maria can' t call the 4 - th granny or the 5 - th granny separately ( one of them) . If she calls both: 4 and 5 , then when they appear, they will see 4+ 1= 5 grannies. Despite the fact that it is enough for the 4 - th granny, the 5 - th granny is not satisfied. So, Maria cannot call both the 4 - th granny and the 5 - th granny at the same time. That is, Maria and three grannies from the first step will be in the yard in total.",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Restorer Distance",
    "url": "https://codeforces.com/problemset/problem/1355/E",
    "history": "You have to restore the wall. The wall consists of N pillars of bricks, the height of the i - th pillar is initially equal to h_ i , the height is measured in number of bricks. After the restoration all the N pillars should have equal heights. You are allowed the following operations: put a brick on top of one pillar, the cost of this operation is A ; remove a brick from the top of one non- empty pillar, the cost of this operation is R ; move a brick from the top of one non- empty pillar to the top of another pillar, the cost of this operation is M . You cannot create additional pillars or ignore some of pre- existing pillars even if their height becomes 0 . What is the minimal total cost of restoration, in other words, what is the minimal total cost to make all the pillars of equal height?",
    "input": "The first line of input contains four integers N , A , R , M ( 1 \u2264 N \u2264 10^ 5 , 0 \u2264 A, R, M \u2264 10^ 4 ) \u2014 the number of pillars and the costs of operations. The second line contains N integers h_ i ( 0 \u2264 h_ i\u2264 10^ 9 ) \u2014 initial heights of pillars.",
    "output": "Print one integer \u2014 the minimal cost of restoration.",
    "note": " ",
    "topics": [
      "binary search",
      "greedy",
      "math",
      "sortings",
      "ternary search"
    ]
  },
  {
    "title": "Young Explorers",
    "url": "https://codeforces.com/problemset/problem/1355/B",
    "history": "Young wilderness explorers set off to their first expedition led by senior explorer Russell. Explorers went into a forest, set up a camp and decided to split into groups to explore as much interesting locations as possible. Russell was trying to form groups, but ran into some difficulties. . . Most of the young explorers are inexperienced, and sending them alone would be a mistake. Even Russell himself became senior explorer not long ago. Each of young explorers has a positive integer parameter e_ i \u2014 his inexperience. Russell decided that an explorer with inexperience e can only join the group of e or more people. Now Russell needs to figure out how many groups he can organize. It' s not necessary to include every explorer in one of the groups: some can stay in the camp. Russell is worried about this expedition, so he asked you to help him.",
    "input": "The first line contains the number of independent test cases T ( 1 \u2264 T \u2264 2 \u00b7 10^ 5 ) . Next 2T lines contain description of test cases. The first line of description of each test case contains the number of young explorers N ( 1 \u2264 N \u2264 2 \u00b7 10^ 5 ) . The second line contains N integers e_ 1, e_ 2, . . . , e_ N ( 1 \u2264 e_ i \u2264 N ) , where e_ i is the inexperience of the i - th explorer. It' s guaranteed that sum of all N doesn' t exceed 3 \u00b7 10^ 5 .",
    "output": "Print T numbers, each number on a separate line. In i - th line print the maximum number of groups Russell can form in i - th test case.",
    "note": "In the first example we can organize three groups. There will be only one explorer in each group. It' s correct because inexperience of each explorer equals to 1 , so it' s not less than the size of his group. In the second example we can organize two groups. Explorers with inexperience 1 , 2 and 3 will form the first group, and the other two explorers with inexperience equal to 2 will form the second group. This solution is not unique. For example, we can form the first group using the three explorers with inexperience equal to 2 , and the second group using only one explorer with inexperience equal to 1 . In this case the young explorer with inexperience equal to 3 will not be included in any group.",
    "topics": [
      "dp",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Summoning Minions",
    "url": "https://codeforces.com/problemset/problem/1354/F",
    "history": "Polycarp plays a computer game. In this game, the players summon armies of magical minions, which then fight each other. Polycarp can summon n different minions. The initial power level of the i - th minion is a_ i , and when it is summoned, all previously summoned minions' power levels are increased by b_ i . The minions can be summoned in any order. Unfortunately, Polycarp cannot have more than k minions under his control. To get rid of unwanted minions after summoning them, he may destroy them. Each minion can be summoned ( and destroyed) only once. Polycarp' s goal is to summon the strongest possible army. Formally, he wants to maximize the sum of power levels of all minions under his control ( those which are summoned and not destroyed) . Help Polycarp to make up a plan of actions to summon the strongest possible army!",
    "input": "The first line contains one integer T ( 1 \u2264 T \u2264 75 ) \u2014 the number of test cases. Each test case begins with a line containing two integers n and k ( 1 \u2264 k \u2264 n \u2264 75 ) \u2014 the number of minions availible for summoning, and the maximum number of minions that can be controlled by Polycarp, respectively. Then n lines follow, the i - th line contains 2 integers a_ i and b_ i ( 1 \u2264 a_ i \u2264 10^ 5 , 0 \u2264 b_ i \u2264 10^ 5 ) \u2014 the parameters of the i - th minion.",
    "output": "For each test case print the optimal sequence of actions as follows: Firstly, print m \u2014 the number of actions which Polycarp has to perform ( 0 \u2264 m \u2264 2n ) . Then print m integers o_ 1 , o_ 2 , . . . , o_ m , where o_ i denotes the i - th action as follows: if the i - th action is to summon the minion x , then o_ i = x , and if the i - th action is to destroy the minion x , then o_ i = - x . Each minion can be summoned at most once and cannot be destroyed before being summoned ( and, obviously, cannot be destroyed more than once) . The number of minions in Polycarp' s army should be not greater than k after every action. If there are multiple optimal sequences, print any of them.",
    "note": "Consider the example test. In the first test case, Polycarp can summon the minion 2 with power level 7 , then summon the minion 1 , which will increase the power level of the previous minion by 3 , then destroy the minion 1 , and finally, summon the minion 5 . After this, Polycarp will have two minions with power levels of 10 . In the second test case, Polycarp can control only one minion, so he should choose the strongest of them and summon it. In the third test case, Polycarp is able to summon and control all five minions.",
    "topics": [
      "constructive algorithms",
      "dp",
      "flows",
      "graph matchings",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Constructing the Array",
    "url": "https://codeforces.com/problemset/problem/1353/D",
    "history": "You are given an array a of length n consisting of zeros. You perform n actions with this array: during the i - th action, the following sequence of operations appears: Choose the maximum by length subarray ( continuous subsegment) consisting only of zeros, among all such segments choose the leftmost one; Let this segment be [ l; r] . If r- l+ 1 is odd ( not divisible by 2 ) then assign ( set) a[ l+ r/ 2] : = i ( where i is the number of the current action) , otherwise ( if r- l+ 1 is even) assign ( set) a[ l+ r- 1/ 2] : = i . Consider the array a of length 5 ( initially a= [ 0, 0, 0, 0, 0] ) . Then it changes as follows: Firstly, we choose the segment [ 1; 5] and assign a[ 3] : = 1 , so a becomes [ 0, 0, 1, 0, 0] ; then we choose the segment [ 1; 2] and assign a[ 1] : = 2 , so a becomes [ 2, 0, 1, 0, 0] ; then we choose the segment [ 4; 5] and assign a[ 4] : = 3 , so a becomes [ 2, 0, 1, 3, 0] ; then we choose the segment [ 2; 2] and assign a[ 2] : = 4 , so a becomes [ 2, 4, 1, 3, 0] ; and at last we choose the segment [ 5; 5] and assign a[ 5] : = 5 , so a becomes [ 2, 4, 1, 3, 5] . Your task is to find the array a of length n after performing all n actions. Note that the answer exists and unique. You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The only line of the test case contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of a . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 ( \u2211 n \u2264 2 \u00b7 10^ 5 ) .",
    "output": "For each test case, print the answer \u2014 the array a of length n after performing n actions described in the problem statement. Note that the answer exists and unique.",
    "note": " ",
    "topics": [
      "constructive algorithms",
      "data structures",
      "sortings"
    ]
  },
  {
    "title": "Two Arrays And Swaps",
    "url": "https://codeforces.com/problemset/problem/1353/B",
    "history": "You are given two arrays a and b both consisting of n positive ( greater than zero) integers. You are also given an integer k . In one move, you can choose two indices i and j ( 1 \u2264 i, j \u2264 n ) and swap a_ i and b_ j ( i. e. a_ i becomes b_ j and vice versa) . Note that i and j can be equal or different ( in particular, swap a_ 2 with b_ 2 or swap a_ 3 and b_ 9 both are acceptable moves) . Your task is to find the maximum possible sum you can obtain in the array a if you can do no more than ( i. e. at most) k such moves ( swaps) . You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 200 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains two integers n and k ( 1 \u2264 n \u2264 30; 0 \u2264 k \u2264 n ) \u2014 the number of elements in a and b and the maximum number of moves you can do. The second line of the test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 30 ) , where a_ i is the i - th element of a . The third line of the test case contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 30 ) , where b_ i is the i - th element of b .",
    "output": "For each test case, print the answer \u2014 the maximum possible sum you can obtain in the array a if you can do no more than ( i. e. at most) k swaps.",
    "note": "In the first test case of the example, you can swap a_ 1 = 1 and b_ 2 = 4 , so a= [ 4, 2] and b= [ 3, 1] . In the second test case of the example, you don' t need to swap anything. In the third test case of the example, you can swap a_ 1 = 1 and b_ 1 = 10 , a_ 3 = 3 and b_ 3 = 10 and a_ 2 = 2 and b_ 4 = 10 , so a= [ 10, 10, 10, 4, 5] and b= [ 1, 9, 3, 2, 9] . In the fourth test case of the example, you cannot swap anything. In the fifth test case of the example, you can swap arrays a and b , so a= [ 4, 4, 5, 4] and b= [ 1, 2, 2, 1] .",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Phoenix and Distribution",
    "url": "https://codeforces.com/problemset/problem/1348/C",
    "history": "Phoenix has a string s consisting of lowercase Latin letters. He wants to distribute all the letters of his string into k non- empty strings a_ 1, a_ 2, . . . , a_ k such that every letter of s goes to exactly one of the strings a_ i . The strings a_ i do not need to be substrings of s . Phoenix can distribute letters of s and rearrange the letters within each string a_ i however he wants. For example, if s = baba and k= 2 , Phoenix may distribute the letters of his string in many ways, such as: ba and ba a and abb ab and ab aa and bb But these ways are invalid: baa and ba b and ba baba and empty string ( a_ i should be non- empty) Phoenix wants to distribute the letters of his string s into k strings a_ 1, a_ 2, . . . , a_ k to minimize the lexicographically maximum string among them, i. e. minimize max( a_ 1, a_ 2, . . . , a_ k) . Help him find the optimal distribution and print the minimal possible value of max( a_ 1, a_ 2, . . . , a_ k) . String x is lexicographically less than string y if either x is a prefix of y and x y , or there exists an index i ( 1 \u2264 i \u2264 min( | x| , | y| ) ) such that x_ i < y_ i and for every j ( 1 \u2264 j < i) x_ j = y_ j . Here | x| denotes the length of the string x .",
    "input": "The input consists of multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Each test case consists of two lines. The first line of each test case consists of two integers n and k ( 1 \u2264 k \u2264 n \u2264 10^ 5 ) \u2014 the length of string s and the number of non- empty strings, into which Phoenix wants to distribute letters of s , respectively. The second line of each test case contains a string s of length n consisting only of lowercase Latin letters. It is guaranteed that the sum of n over all test cases is \u2264 10^ 5 .",
    "output": "Print t answers \u2014 one per test case. The i - th answer should be the minimal possible value of max( a_ 1, a_ 2, . . . , a_ k) in the i - th test case.",
    "note": "In the first test case, one optimal solution is to distribute baba into ab and ab. In the second test case, one optimal solution is to distribute baacb into abbc and a. In the third test case, one optimal solution is to distribute baacb into ac, ab, and b. In the fourth test case, one optimal solution is to distribute aaaaa into aa, aa, and a. In the fifth test case, one optimal solution is to distribute aaxxzz into az, az, x, and x. In the sixth test case, one optimal solution is to distribute phoenix into ehinopx.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "sortings",
      "strings"
    ]
  },
  {
    "title": "Phoenix and Beauty",
    "url": "https://codeforces.com/problemset/problem/1348/B",
    "history": "Phoenix loves beautiful arrays. An array is beautiful if all its subarrays of length k have the same sum. A subarray of an array is any sequence of consecutive elements. Phoenix currently has an array a of length n . He wants to insert some number of integers, possibly zero, into his array such that it becomes beautiful. The inserted integers must be between 1 and n inclusive. Integers may be inserted anywhere ( even before the first or after the last element) , and he is not trying to minimize the number of inserted integers.",
    "input": "The input consists of multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 50 ) \u2014 the number of test cases. The first line of each test case contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 100 ) . The second line of each test case contains n space- separated integers ( 1 \u2264 a_ i \u2264 n ) \u2014 the array that Phoenix currently has. This array may or may not be already beautiful.",
    "output": "For each test case, if it is impossible to create a beautiful array, print - 1. Otherwise, print two lines. The first line should contain the length of the beautiful array m ( n \u2264 m \u2264 10^ 4 ) . You don' t need to minimize m . The second line should contain m space- separated integers ( 1 \u2264 b_ i \u2264 n ) \u2014 a beautiful array that Phoenix can obtain after inserting some, possibly zero, integers into his array a . You may print integers that weren' t originally in array a . If there are multiple solutions, print any. It' s guaranteed that if we can make array a beautiful, we can always make it with resulting length no more than 10^ 4 .",
    "note": "In the first test case, we can make array a beautiful by inserting the integer 1 at index 3 ( in between the two existing 2 s) . Now, all subarrays of length k= 2 have the same sum 3 . There exists many other possible solutions, for example: 2, 1, 2, 1, 2, 1 1, 2, 1, 2, 1, 2 In the second test case, the array is already beautiful: all subarrays of length k= 3 have the same sum 5 . In the third test case, it can be shown that we cannot insert numbers to make array a beautiful. In the fourth test case, the array b shown is beautiful and all subarrays of length k= 4 have the same sum 10 . There exist other solutions also.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Spring Cleaning",
    "url": "https://codeforces.com/problemset/problem/1346/C",
    "history": "Tanya wants to organize her bookcase. There are n bookshelves in the bookcase, the i - th bookshelf contains a_ i books on it. Tanya will be satisfied if each bookshelf contains no more than k books. Tanya can do one of the two following operations to achieve her goal: Choose exactly one bookshelf and put all the books from it in the storage room ( i. e. choose some i and assign a_ i : = 0 ) . During this operation she spends x seconds. Take all books from all n bookshelves and distribute them between all n bookshelves evenly ( the definition of the term is given below) . During this operation she spends y seconds. Consider the sequence a of n integers. Then its even distribution is such a sequence b of n integers that the sum of b equals the sum of a and the value max( b) - min( b) is the minimum possible. For example, if the array a= [ 5, 4, 3] then its even distribution is b= [ 4, 4, 4] . If a= [ 1, 2, 3, 4] then its even distribution is b= [ 2, 3, 3, 2] ( or any permutation of this array) . Your task is to find the minimum number of seconds Tanya has to spend to obtain the bookcase with no more than k books on each bookshelf.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains four integers n, k, x and y ( 1 \u2264 k \u2264 n \u2264 2 \u00b7 10^ 5; 1 \u2264 x, y \u2264 10^ 4 ) \u2014 the number of bookshelves, the maximum required number of books on each bookshelf and the number of seconds Tanya spends during the first and the second operation respectively. The second line of the test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) , where a_ i is the number of books on the i - th bookshelf. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 ( \u2211 n \u2264 2 \u00b7 10^ 5 ) .",
    "output": "For each test case, print the answer \u2014 the minimum number of seconds Tanya has to spend to obtain the bookcase with no more than k books on each bookshelf.",
    "note": "In the first test case of the example, it' s optimal to use the first operation on the fifth bookshelf. So the array a becomes [ 1, 2, 2, 3, 5] \u2192 [ 1, 2, 2, 3, 0] . In the second test case of the example, it' s optimal to use the first operation on the second bookshelf and then use the second operation. So the array a becomes [ 1, 5, 1, 5, 5] \u2192 [ 1, 0, 1, 5, 5] \u2192 [ 2, 2, 3, 3, 2] . In the third test case of the example, it' s optimal to use the second operation. So the array a becomes [ 1, 2, 5, 3, 5] \u2192 [ 4, 3, 3, 3, 3] . In the fourth test case of the example, it' s optimal to use the first operation on the first and the second bookshelves. So the array a becomes [ 4, 4, 1, 1] \u2192 [ 0, 0, 1, 1] . In the fifth test case of the example, it' s optimal to use the second operation. So the array a becomes [ 4, 4, 1, 1] \u2192 [ 2, 3, 2, 3] .",
    "topics": [
      "*special",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Hilbert's Hotel",
    "url": "https://codeforces.com/problemset/problem/1344/A",
    "history": "Hilbert' s Hotel is a very unusual hotel since the number of rooms is infinite! In fact, there is exactly one room for every integer, including zero and negative integers. Even stranger, the hotel is currently at full capacity, meaning there is exactly one guest in every room. The hotel' s manager, David Hilbert himself, decides he wants to shuffle the guests around because he thinks this will create a vacancy ( a room without a guest) . For any integer k and positive integer n , let k n denote the remainder when k is divided by n . More formally, r= k n is the smallest non- negative integer such that k- r is divisible by n . It always holds that 0\u2264 k n\u2264 n- 1 . For example, 100 12= 4 and ( - 1337) 3= 1 . Then the shuffling works as follows. There is an array of n integers a_ 0, a_ 1, . . . , a_ n- 1 . Then for each integer k , the guest in room k is moved to room number k+ a_ k n . After this shuffling process, determine if there is still exactly one guest assigned to each room. That is, there are no vacancies or rooms with multiple guests.",
    "input": "Each test consists of multiple test cases. The first line contains a single integer t ( 1\u2264 t\u2264 10^ 4 ) \u2014 the number of test cases. Next 2t lines contain descriptions of test cases. The first line of each test case contains a single integer n ( 1\u2264 n\u2264 2\u00b7 10^ 5 ) \u2014 the length of the array. The second line of each test case contains n integers a_ 0, a_ 1, . . . , a_ n- 1 ( - 10^ 9\u2264 a_ i\u2264 10^ 9 ) . It is guaranteed that the sum of n over all test cases does not exceed 2\u00b7 10^ 5 .",
    "output": "For each test case, output a single line containing \" YES\" if there is exactly one guest assigned to each room after the shuffling process, or \" NO\" otherwise. You can print each letter in any case ( upper or lower) .",
    "note": "In the first test case, every guest is shifted by 14 rooms, so the assignment is still unique. In the second test case, even guests move to the right by 1 room, and odd guests move to the left by 1 room. We can show that the assignment is still unique. In the third test case, every fourth guest moves to the right by 1 room, and the other guests move to the right by 5 rooms. We can show that the assignment is still unique. In the fourth test case, guests 0 and 1 are both assigned to room 3 . In the fifth test case, guests 1 and 2 are both assigned to room 2 .",
    "topics": [
      "math",
      "number theory",
      "sortings"
    ]
  },
  {
    "title": "Weights Distributing",
    "url": "https://codeforces.com/problemset/problem/1343/E",
    "history": "You are given an undirected unweighted graph consisting of n vertices and m edges ( which represents the map of Bertown) and the array of prices p of length m . It is guaranteed that there is a path between each pair of vertices ( districts) . Mike has planned a trip from the vertex ( district) a to the vertex ( district) b and then from the vertex ( district) b to the vertex ( district) c . He can visit the same district twice or more. But there is one issue: authorities of the city want to set a price for using the road so if someone goes along the road then he should pay the price corresponding to this road ( he pays each time he goes along the road) . The list of prices that will be used p is ready and they just want to distribute it between all roads in the town in such a way that each price from the array corresponds to exactly one road. You are a good friend of Mike ( and suddenly a mayor of Bertown) and want to help him to make his trip as cheap as possible. So, your task is to distribute prices between roads in such a way that if Mike chooses the optimal path then the price of the trip is the minimum possible. Note that you cannot rearrange prices after the start of the trip. You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains five integers n, m, a, b and c ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 , n- 1 \u2264 m \u2264 min( n( n- 1) / 2, 2 \u00b7 10^ 5) , 1 \u2264 a, b, c \u2264 n ) \u2014 the number of vertices, the number of edges and districts in Mike' s trip. The second line of the test case contains m integers p_ 1, p_ 2, . . . , p_ m ( 1 \u2264 p_ i \u2264 10^ 9 ) , where p_ i is the i - th price from the array. The following m lines of the test case denote edges: edge i is represented by a pair of integers v_ i , u_ i ( 1 \u2264 v_ i, u_ i \u2264 n , u_ i v_ i ) , which are the indices of vertices connected by the edge. There are no loops or multiple edges in the given graph, i. e. for each pair ( v_ i, u_ i ) there are no other pairs ( v_ i, u_ i ) or ( u_ i, v_ i ) in the array of edges, and for each pair ( v_ i, u_ i) the condition v_ i u_ i is satisfied. It is guaranteed that the given graph is connected. It is guaranteed that the sum of n ( as well as the sum of m ) does not exceed 2 \u00b7 10^ 5 ( \u2211 n \u2264 2 \u00b7 10^ 5 , \u2211 m \u2264 2 \u00b7 10^ 5 ) .",
    "output": "For each test case, print the answer \u2014 the minimum possible price of Mike' s trip if you distribute prices between edges optimally.",
    "note": "One of the possible solution to the first test case of the example: One of the possible solution to the second test case of the example:",
    "topics": [
      "brute force",
      "graphs",
      "greedy",
      "shortest paths",
      "sortings"
    ]
  },
  {
    "title": "Multiple Testcases",
    "url": "https://codeforces.com/problemset/problem/1342/D",
    "history": "So you decided to hold a contest on Codeforces. You prepared the problems: statements, solutions, checkers, validators, tests. . . Suddenly, your coordinator asks you to change all your tests to multiple testcases in the easiest problem! Initially, each test in that problem is just an array. The maximum size of an array is k . For simplicity, the contents of arrays don' t matter. You have n tests \u2014 the i - th test is an array of size m_ i ( 1 \u2264 m_ i \u2264 k ) . Your coordinator asks you to distribute all of your arrays into multiple testcases. Each testcase can include multiple arrays. However, each testcase should include no more than c_ 1 arrays of size greater than or equal to 1 ( \u2265 1 ) , no more than c_ 2 arrays of size greater than or equal to 2 , . . . , no more than c_ k arrays of size greater than or equal to k . Also, c_ 1 \u2265 c_ 2 \u2265. . . \u2265 c_ k . So now your goal is to create the new testcases in such a way that: each of the initial arrays appears in exactly one testcase; for each testcase the given conditions hold; the number of testcases is minimum possible. Print the minimum possible number of testcases you can achieve and the sizes of arrays included in each testcase.",
    "input": "The first line contains two integers n and k ( 1 \u2264 n, k \u2264 2 \u00b7 10^ 5 ) \u2014 the number of initial tests and the limit for the size of each array. The second line contains n integers m_ 1, m_ 2, . . . , m_ n ( 1 \u2264 m_ i \u2264 k ) \u2014 the sizes of the arrays in the original tests. The third line contains k integers c_ 1, c_ 2, . . . , c_ k ( n \u2265 c_ 1 \u2265 c_ 2 \u2265. . . \u2265 c_ k \u2265 1 ) ; c_ i is the maximum number of arrays of size greater than or equal to i you can have in a single testcase.",
    "output": "In the first line print a single integer ans ( 1 \u2264 ans \u2264 n ) \u2014 the minimum number of testcases you can achieve. Each of the next ans lines should contain the description of a testcase in the following format: t a_ 1 a_ 2 . . . a_ t ( 1 \u2264 t\u2264 n ) \u2014 the testcase includes t arrays, a_ i is the size of the i - th array in that testcase. Each of the initial arrays should appear in exactly one testcase. In particular, it implies that the sum of t over all ans testcases should be equal to n . Note that the answer always exists due to c_ k \u2265 1 ( and therefore c_ 1 \u2265 1 ) . If there are multiple answers, you can output any one of them.",
    "note": "In the first example there is no way to distribute the tests into less than 3 testcases. The given answer satisfies the conditions: each of the testcases includes no more than 4 arrays of size greater than or equal to 1 and no more than 1 array of sizes greater than or equal to 2 and 3 . Note that there are multiple valid answers for this test. For example, testcases with sizes [ [ 2] , [ 1, 2] , [ 3] ] would also be correct. However, testcases with sizes [ [ 1, 2] , [ 2, 3] ] would be incorrect because there are 2 arrays of size greater than or equal to 2 in the second testcase. Note the difference between the third and the fourth examples. You can include up to 5 arrays of size greater than or equal to 1 in the third example, so you can put all arrays into a single testcase. And you can have only up to 1 array in the fourth example. Thus, every array should be included in a separate testcase.",
    "topics": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "greedy",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Sorted Adjacent Differences",
    "url": "https://codeforces.com/problemset/problem/1339/B",
    "history": "You have array of n numbers a_ 1, a_ 2, . . . , a_ n . Rearrange these numbers to satisfy | a_ 1 - a_ 2| \u2264 | a_ 2 - a_ 3| \u2264. . . \u2264 | a_ n- 1 - a_ n| , where | x| denotes absolute value of x . It' s always possible to find such rearrangement. Note that all numbers in a are not necessarily different. In other words, some numbers of a may be same. You have to answer independent t test cases.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains single integer n ( 3 \u2264 n \u2264 10^ 5 ) \u2014 the length of array a . It is guaranteed that the sum of values of n over all test cases in the input does not exceed 10^ 5 . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9\u2264 a_ i\u2264 10^ 9 ) .",
    "output": "For each test case, print the rearranged version of array a which satisfies given condition. If there are multiple valid rearrangements, print any of them.",
    "note": "In the first test case, after given rearrangement, | a_ 1 - a_ 2| = 0 \u2264 | a_ 2 - a_ 3| = 1 \u2264 | a_ 3 - a_ 4| = 2 \u2264 | a_ 4 - a_ 5| = 2 \u2264 | a_ 5 - a_ 6| = 10 . There are other possible answers like \" 5 4 5 6 - 2 8\" . In the second test case, after given rearrangement, | a_ 1 - a_ 2| = 1 \u2264 | a_ 2 - a_ 3| = 2 \u2264 | a_ 3 - a_ 4| = 4 . There are other possible answers like \" 2 4 8 1\" .",
    "topics": [
      "constructive algorithms",
      "sortings"
    ]
  },
  {
    "title": "Xenia and Colorful Gems",
    "url": "https://codeforces.com/problemset/problem/1336/B",
    "history": "Xenia is a girl being born a noble. Due to the inflexibility and harshness of her family, Xenia has to find some ways to amuse herself. Recently Xenia has bought n_ r red gems, n_ g green gems and n_ b blue gems. Each of the gems has a weight. Now, she is going to pick three gems. Xenia loves colorful things, so she will pick exactly one gem of each color. Xenia loves balance, so she will try to pick gems with little difference in weight. Specifically, supposing the weights of the picked gems are x , y and z , Xenia wants to find the minimum value of ( x- y) ^ 2+ ( y- z) ^ 2+ ( z- x) ^ 2 . As her dear friend, can you help her?",
    "input": "The first line contains a single integer t ( 1\u2264 t \u2264 100 ) \u2014 the number of test cases. Then t test cases follow. The first line of each test case contains three integers n_ r, n_ g, n_ b ( 1\u2264 n_ r, n_ g, n_ b\u2264 10^ 5 ) \u2014 the number of red gems, green gems and blue gems respectively. The second line of each test case contains n_ r integers r_ 1, r_ 2, . . . , r_ n_ r ( 1\u2264 r_ i \u2264 10^ 9 ) \u2014 r_ i is the weight of the i - th red gem. The third line of each test case contains n_ g integers g_ 1, g_ 2, . . . , g_ n_ g ( 1\u2264 g_ i \u2264 10^ 9 ) \u2014 g_ i is the weight of the i - th green gem. The fourth line of each test case contains n_ b integers b_ 1, b_ 2, . . . , b_ n_ b ( 1\u2264 b_ i \u2264 10^ 9 ) \u2014 b_ i is the weight of the i - th blue gem. It is guaranteed that \u2211 n_ r \u2264 10^ 5 , \u2211 n_ g \u2264 10^ 5 , \u2211 n_ b \u2264 10^ 5 ( the sum for all test cases) .",
    "output": "For each test case, print a line contains one integer \u2014 the minimum value which Xenia wants to find.",
    "note": "In the first test case, Xenia has the following gems: If she picks the red gem with weight 7 , the green gem with weight 6 , and the blue gem with weight 4 , she will achieve the most balanced selection with ( x- y) ^ 2+ ( y- z) ^ 2+ ( z- x) ^ 2= ( 7- 6) ^ 2+ ( 6- 4) ^ 2+ ( 4- 7) ^ 2= 14 .",
    "topics": [
      "binary search",
      "greedy",
      "math",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Linova and Kingdom",
    "url": "https://codeforces.com/problemset/problem/1336/A",
    "history": "Writing light novels is the most important thing in Linova' s life. Last night, Linova dreamed about a fantastic kingdom. She began to write a light novel for the kingdom as soon as she woke up, and of course, she is the queen of it. There are n cities and n- 1 two- way roads connecting pairs of cities in the kingdom. From any city, you can reach any other city by walking through some roads. The cities are numbered from 1 to n , and the city 1 is the capital of the kingdom. So, the kingdom has a tree structure. As the queen, Linova plans to choose exactly k cities developing industry, while the other cities will develop tourism. The capital also can be either industrial or tourism city. A meeting is held in the capital once a year. To attend the meeting, each industry city sends an envoy. All envoys will follow the shortest path from the departure city to the capital ( which is unique) . Traveling in tourism cities is pleasant. For each envoy, his happiness is equal to the number of tourism cities on his path. In order to be a queen loved by people, Linova wants to choose k cities which can maximize the sum of happinesses of all envoys. Can you calculate the maximum sum for her?",
    "input": "The first line contains two integers n and k ( 2\u2264 n\u2264 2 \u00b7 10^ 5 , 1\u2264 k< n ) \u2014 the number of cities and industry cities respectively. Each of the next n- 1 lines contains two integers u and v ( 1\u2264 u, v\u2264 n ) , denoting there is a road connecting city u and city v . It is guaranteed that from any city, you can reach any other city by the roads.",
    "output": "Print the only line containing a single integer \u2014 the maximum possible sum of happinesses of all envoys.",
    "note": "In the first example, Linova can choose cities 2 , 5 , 6 , 7 to develop industry, then the happiness of the envoy from city 2 is 1 , the happiness of envoys from cities 5 , 6 , 7 is 2 . The sum of happinesses is 7 , and it can be proved to be the maximum one. In the second example, choosing cities 3 , 4 developing industry can reach a sum of 3 , but remember that Linova plans to choose exactly k cities developing industry, then the maximum sum is 2 .",
    "topics": [
      "dfs and similar",
      "dp",
      "greedy",
      "sortings",
      "trees"
    ]
  },
  {
    "title": "Two Teams Composing",
    "url": "https://codeforces.com/problemset/problem/1335/C",
    "history": "You have n students under your control and you have to compose exactly two teams consisting of some subset of your students. Each student had his own skill, the i - th student skill is denoted by an integer a_ i ( different students can have the same skills) . So, about the teams. Firstly, these two teams should have the same size. Two more constraints: The first team should consist of students with distinct skills ( i. e. all skills in the first team are unique) . The second team should consist of students with the same skills ( i. e. all skills in the second team are equal) . Note that it is permissible that some student of the first team has the same skill as a student of the second team. Consider some examples ( skills are given) : [ 1, 2, 3] , [ 4, 4] is not a good pair of teams because sizes should be the same; [ 1, 1, 2] , [ 3, 3, 3] is not a good pair of teams because the first team should not contain students with the same skills; [ 1, 2, 3] , [ 3, 4, 4] is not a good pair of teams because the second team should contain students with the same skills; [ 1, 2, 3] , [ 3, 3, 3] is a good pair of teams; [ 5] , [ 6] is a good pair of teams. Your task is to find the maximum possible size x for which it is possible to compose a valid pair of teams, where each team size is x ( skills in the first team needed to be unique, skills in the second team should be the same between them) . A student cannot be part of more than one team. You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of students. The second line of the test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) , where a_ i is the skill of the i - th student. Different students can have the same skills. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 ( \u2211 n \u2264 2 \u00b7 10^ 5 ) .",
    "output": "For each test case, print the answer \u2014 the maximum possible size x for which it is possible to compose a valid pair of teams, where each team size is x .",
    "note": "In the first test case of the example, it is possible to construct two teams of size 3 : the first team is [ 1, 2, 4] and the second team is [ 4, 4, 4] . Note, that there are some other ways to construct two valid teams of size 3 .",
    "topics": [
      "binary search",
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Middle Class",
    "url": "https://codeforces.com/problemset/problem/1334/B",
    "history": "Many years ago Berland was a small country where only n people lived. Each person had some savings: the i - th one had a_ i burles. The government considered a person as wealthy if he had at least x burles. To increase the number of wealthy people Berland decided to carry out several reforms. Each reform looked like that: the government chooses some subset of people ( maybe all of them) ; the government takes all savings from the chosen people and redistributes the savings among the chosen people equally. For example, consider the savings as list [ 5, 1, 2, 1] : if the government chose the 1 - st and the 3 - rd persons then it, at first, will take all 5 + 2 = 7 burles and after that will return 3. 5 burles to the chosen people. As a result, the savings will become [ 3. 5, 1, 3. 5, 1] . A lot of data was lost from that time, so we don' t know how many reforms were implemented and to whom. All we can do is ask you to calculate the maximum possible number of wealthy people after several ( maybe zero) reforms.",
    "input": "The first line contains single integer T ( 1 \u2264 T \u2264 1000 ) \u2014 the number of test cases. Next 2T lines contain the test cases \u2014 two lines per test case. The first line contains two integers n and x ( 1 \u2264 n \u2264 10^ 5 , 1 \u2264 x \u2264 10^ 9 ) \u2014 the number of people and the minimum amount of money to be considered as wealthy. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the initial savings of each person. It' s guaranteed that the total sum of n doesn' t exceed 10^ 5 .",
    "output": "Print T integers \u2014 one per test case. For each test case print the maximum possible number of wealthy people after several ( maybe zero) reforms.",
    "note": "The first test case is described in the statement. In the second test case, the government, for example, could carry out two reforms: [ 11, 9, 11, 9] \u2192 [ 10, 10, 11, 9] \u2192 [ 10, 10, 10, 10] . In the third test case, the government couldn' t make even one person wealthy. In the fourth test case, the government could choose all people to carry out a reform: [ 9, 4, 9] \u2192 [ 71/ 3, 71/ 3, 71/ 3] .",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Kate and imperfection",
    "url": "https://codeforces.com/problemset/problem/1333/F",
    "history": "Kate has a set S of n integers { 1, . . . , n} . She thinks that imperfection of a subset M \u2286 S is equal to the maximum of gcd( a, b) over all pairs ( a, b) such that both a and b are in M and a = \u0338 b . Kate is a very neat girl and for each k \u2208{ 2, . . . , n} she wants to find a subset that has the smallest imperfection among all subsets in S of size k . There can be more than one subset with the smallest imperfection and the same size, but you don' t need to worry about it. Kate wants to find all the subsets herself, but she needs your help to find the smallest possible imperfection for each size k , will name it I_ k . Please, help Kate to find I_ 2 , I_ 3 , . . . , I_ n .",
    "input": "The first and only line in the input consists of only one integer n ( 2\u2264 n \u2264 5 \u00b7 10^ 5 ) \u2014 the size of the given set S .",
    "output": "Output contains only one line that includes n - 1 integers: I_ 2 , I_ 3 , . . . , I_ n .",
    "note": "First sample: answer is 1, because gcd( 1, 2) = 1 . Second sample: there are subsets of S with sizes 2, 3 with imperfection equal to 1. For example, { 2, 3} and { 1, 2, 3} .",
    "topics": [
      "greedy",
      "implementation",
      "math",
      "number theory",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Challenges in school \u211641",
    "url": "https://codeforces.com/problemset/problem/1333/D",
    "history": "There are n children, who study at the school No41. It is well- known that they are good mathematicians. Once at a break, they arranged a challenge for themselves. All children arranged in a row and turned heads either to the left or to the right. Children can do the following: in one second several pairs of neighboring children who are looking at each other can simultaneously turn the head in the opposite direction. For instance, the one who was looking at the right neighbor turns left and vice versa for the second child. Moreover, every second at least one pair of neighboring children performs such action. They are going to finish when there is no pair of neighboring children who are looking at each other. You are given the number n , the initial arrangement of children and the number k . You have to find a way for the children to act if they want to finish the process in exactly k seconds. More formally, for each of the k moves, you need to output the numbers of the children who turn left during this move. For instance, for the configuration shown below and k = 2 children can do the following steps: At the beginning, two pairs make move: ( 1, 2) and ( 3, 4) . After that, we receive the following configuration: At the second move pair ( 2, 3) makes the move. The final configuration is reached. Good job. It is guaranteed that if the solution exists, it takes not more than n^ 2 \" headturns\" .",
    "input": "The first line of input contains two integers n and k ( 2 \u2264 n \u2264 3000 , 1 \u2264 k \u2264 3000000 ) \u2014 the number of children and required number of moves. The next line contains a string of length n and consists only of characters L and R, where L means that the child looks to the left and R means that the child looks to the right.",
    "output": "If there is no solution, print a single line with number - 1 . Otherwise, output k lines. Each line has to start with a number n_ i ( 1\u2264 n_ i \u2264n/ 2 ) \u2014 the number of pairs of children, who turn at this move. After that print n_ i distinct integers \u2014 the numbers of the children who will turn left during this move. After performing all \" headturns\" , there can' t be a pair of two neighboring children looking at each other. If there are many solutions, print any of them.",
    "note": "The first sample contains a pair of children who look at each other. After one move, they can finish the process. In the second sample, children can' t make any move. As a result, they can' t end in k> 0 moves. The third configuration is described in the statement.",
    "topics": [
      "brute force",
      "constructive algorithms",
      "games",
      "graphs",
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Pair of Topics",
    "url": "https://codeforces.com/problemset/problem/1324/D",
    "history": "The next lecture in a high school requires two topics to be discussed. The i - th topic is interesting by a_ i units for the teacher and by b_ i units for the students. The pair of topics i and j ( i < j ) is called good if a_ i + a_ j > b_ i + b_ j ( i. e. it is more interesting for the teacher) . Your task is to find the number of good pairs of topics.",
    "input": "The first line of the input contains one integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of topics. The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is the interestingness of the i - th topic for the teacher. The third line of the input contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 10^ 9 ) , where b_ i is the interestingness of the i - th topic for the students.",
    "output": "Print one integer \u2014 the number of good pairs of topic.",
    "note": " ",
    "topics": [
      "binary search",
      "data structures",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Present",
    "url": "https://codeforces.com/problemset/problem/1322/B",
    "history": "Catherine received an array of integers as a gift for March 8. Eventually she grew bored with it, and she started calculated various useless characteristics for it. She succeeded to do it for each one she came up with. But when she came up with another one \u2014 xor of all pairwise sums of elements in the array, she realized that she couldn' t compute it for a very large array, thus she asked for your help. Can you do it? Formally, you need to compute ( a_ 1 + a_ 2) \u2295 ( a_ 1 + a_ 3) \u2295. . . \u2295 ( a_ 1 + a_ n) \u2295 ( a_ 2 + a_ 3) \u2295. . . \u2295 ( a_ 2 + a_ n) . . . \u2295 ( a_ n- 1 + a_ n) Here x \u2295 y is a bitwise XOR operation ( i. e. x ^ y in many modern programming languages) . You can read about it in Wikipedia: https: / / en. wikipedia. org/ wiki/ Exclusive_ or# Bitwise_ operation.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 400 000 ) \u2014 the number of integers in the array. The second line contains integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 7 ) .",
    "output": "Print a single integer \u2014 xor of all pairwise sums of integers in the given array.",
    "note": "In the first sample case there is only one sum 1 + 2 = 3 . In the second sample case there are three sums: 1 + 2 = 3 , 1 + 3 = 4 , 2 + 3 = 5 . In binary they are represented as 011_ 2 \u2295 100_ 2 \u2295 101_ 2 = 010_ 2 , thus the answer is 2. \u2295 is the bitwise xor operation. To define x \u2295 y , consider binary representations of integers x and y . We put the i - th bit of the result to be 1 when exactly one of the i - th bits of x and y is 1. Otherwise, the i - th bit of the result is put to be 0. For example, 0101_ 2 \u2295 0011_ 2 = 0110_ 2 .",
    "topics": [
      "binary search",
      "bitmasks",
      "constructive algorithms",
      "data structures",
      "math",
      "sortings"
    ]
  },
  {
    "title": "World of Darkraft: Battle for Azathoth",
    "url": "https://codeforces.com/problemset/problem/1320/C",
    "history": "Roma is playing a new expansion for his favorite game World of Darkraft. He made a new character and is going for his first grind. Roma has a choice to buy exactly one of n different weapons and exactly one of m different armor sets. Weapon i has attack modifier a_ i and is worth ca_ i coins, and armor set j has defense modifier b_ j and is worth cb_ j coins. After choosing his equipment Roma can proceed to defeat some monsters. There are p monsters he can try to defeat. Monster k has defense x_ k , attack y_ k and possesses z_ k coins. Roma can defeat a monster if his weapon' s attack modifier is larger than the monster' s defense, and his armor set' s defense modifier is larger than the monster' s attack. That is, a monster k can be defeated with a weapon i and an armor set j if a_ i > x_ k and b_ j > y_ k . After defeating the monster, Roma takes all the coins from them. During the grind, Roma can defeat as many monsters as he likes. Monsters do not respawn, thus each monster can be defeated at most one. Thanks to Roma' s excessive donations, we can assume that he has an infinite amount of in- game currency and can afford any of the weapons and armor sets. Still, he wants to maximize the profit of the grind. The profit is defined as the total coins obtained from all defeated monsters minus the cost of his equipment. Note that Roma must purchase a weapon and an armor set even if he can not cover their cost with obtained coins. Help Roma find the maximum profit of the grind.",
    "input": "The first line contains three integers n , m , and p ( 1 \u2264 n, m, p \u2264 2 \u00b7 10^ 5 ) \u2014 the number of available weapons, armor sets and monsters respectively. The following n lines describe available weapons. The i - th of these lines contains two integers a_ i and ca_ i ( 1 \u2264 a_ i \u2264 10^ 6 , 1 \u2264 ca_ i \u2264 10^ 9 ) \u2014 the attack modifier and the cost of the weapon i . The following m lines describe available armor sets. The j - th of these lines contains two integers b_ j and cb_ j ( 1 \u2264 b_ j \u2264 10^ 6 , 1 \u2264 cb_ j \u2264 10^ 9 ) \u2014 the defense modifier and the cost of the armor set j . The following p lines describe monsters. The k - th of these lines contains three integers x_ k, y_ k, z_ k ( 1 \u2264 x_ k, y_ k \u2264 10^ 6 , 1 \u2264 z_ k \u2264 10^ 3 ) \u2014 defense, attack and the number of coins of the monster k .",
    "output": "Print a single integer \u2014 the maximum profit of the grind.",
    "note": " ",
    "topics": [
      "brute force",
      "data structures",
      "sortings"
    ]
  },
  {
    "title": "Journey Planning",
    "url": "https://codeforces.com/problemset/problem/1320/A",
    "history": "Tanya wants to go on a journey across the cities of Berland. There are n cities situated along the main railroad line of Berland, and these cities are numbered from 1 to n . Tanya plans her journey as follows. First of all, she will choose some city c_ 1 to start her journey. She will visit it, and after that go to some other city c_ 2 > c_ 1 , then to some other city c_ 3 > c_ 2 , and so on, until she chooses to end her journey in some city c_ k > c_ k - 1 . So, the sequence of visited cities [ c_ 1, c_ 2, . . . , c_ k] should be strictly increasing. There are some additional constraints on the sequence of cities Tanya visits. Each city i has a beauty value b_ i associated with it. If there is only one city in Tanya' s journey, these beauty values imply no additional constraints. But if there are multiple cities in the sequence, then for any pair of adjacent cities c_ i and c_ i + 1 , the condition c_ i + 1 - c_ i = b_ c_ i + 1 - b_ c_ i must hold. For example, if n = 8 and b = [ 3, 4, 4, 6, 6, 7, 8, 9] , there are several three possible ways to plan a journey: c = [ 1, 2, 4] ; c = [ 3, 5, 6, 8] ; c = [ 7] ( a journey consisting of one city is also valid) . There are some additional ways to plan a journey that are not listed above. Tanya wants her journey to be as beautiful as possible. The beauty value of the whole journey is the sum of beauty values over all visited cities. Can you help her to choose the optimal plan, that is, to maximize the beauty value of the journey?",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of cities in Berland. The second line contains n integers b_ 1 , b_ 2 , . . . , b_ n ( 1 \u2264 b_ i \u2264 4 \u00b7 10^ 5 ) , where b_ i is the beauty value of the i - th city.",
    "output": "Print one integer \u2014 the maximum beauty of a journey Tanya can choose.",
    "note": "The optimal journey plan in the first example is c = [ 2, 4, 5] . The optimal journey plan in the second example is c = [ 1] . The optimal journey plan in the third example is c = [ 3, 6] .",
    "topics": [
      "data structures",
      "dp",
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Team Building",
    "url": "https://codeforces.com/problemset/problem/1316/E",
    "history": "Alice, the president of club FCB, wants to build a team for the new volleyball tournament. The team should consist of p players playing in p different positions. She also recognizes the importance of audience support, so she wants to select k people as part of the audience. There are n people in Byteland. Alice needs to select exactly p players, one for each position, and exactly k members of the audience from this pool of n people. Her ultimate goal is to maximize the total strength of the club. The i - th of the n persons has an integer a_ i associated with him \u2014 the strength he adds to the club if he is selected as a member of the audience. For each person i and for each position j , Alice knows s_ i, j \u2014 the strength added by the i - th person to the club if he is selected to play in the j - th position. Each person can be selected at most once as a player or a member of the audience. You have to choose exactly one player for each position. Since Alice is busy, she needs you to help her find the maximum possible strength of the club that can be achieved by an optimal choice of players and the audience.",
    "input": "The first line contains 3 integers n, p, k ( 2 \u2264 n \u2264 10^ 5, 1 \u2264 p \u2264 7, 1 \u2264 k, p+ k \u2264 n ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n . ( 1 \u2264 a_ i\u2264 10^ 9 ) . The i - th of the next n lines contains p integers s_ i, 1, s_ i, 2, . . . , s_ i, p . ( 1 \u2264 s_ i, j\u2264 10^ 9 )",
    "output": "Print a single integer res \u2014 the maximum possible strength of the club.",
    "note": "In the first sample, we can select person 1 to play in the 1 - st position and persons 2 and 3 as audience members. Then the total strength of the club will be equal to a_ 2+ a_ 3+ s_ 1, 1 .",
    "topics": [
      "bitmasks",
      "dp",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "String Modification",
    "url": "https://codeforces.com/problemset/problem/1316/B",
    "history": "Vasya has a string s of length n . He decides to make the following modification to the string: Pick an integer k , ( 1 \u2264 k \u2264 n ) . For i from 1 to n- k+ 1 , reverse the substring s[ i: i+ k- 1] of s . For example, if string s is qwer and k = 2 , below is the series of transformations the string goes through: qwer ( original string) wqer ( after reversing the first substring of length 2 ) weqr ( after reversing the second substring of length 2 ) werq ( after reversing the last substring of length 2 ) Hence, the resulting string after modifying s with k = 2 is werq. Vasya wants to choose a k such that the string obtained after the above- mentioned modification is lexicographically smallest possible among all choices of k . Among all such k , he wants to choose the smallest one. Since he is busy attending Felicity 2020, he asks for your help. A string a is lexicographically smaller than a string b if and only if one of the following holds: a is a prefix of b , but a b ; in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b .",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 5000 ) . The description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 5000 ) \u2014 the length of the string s . The second line of each test case contains the string s of n lowercase latin letters. It is guaranteed that the sum of n over all test cases does not exceed 5000 .",
    "output": "For each testcase output two lines: In the first line output the lexicographically smallest string s' achievable after the above- mentioned modification. In the second line output the appropriate value of k ( 1 \u2264 k \u2264 n ) that you chose for performing the modification. If there are multiple values of k that give the lexicographically smallest string, output the smallest value of k among them.",
    "note": "In the first testcase of the first sample, the string modification results for the sample abab are as follows : for k = 1 : abab for k = 2 : baba for k = 3 : abab for k = 4 : babaThe lexicographically smallest string achievable through modification is abab for k = 1 and 3 . Smallest value of k needed to achieve is hence 1 .",
    "topics": [
      "brute force",
      "constructive algorithms",
      "implementation",
      "sortings",
      "strings"
    ]
  },
  {
    "title": "Bogosort",
    "url": "https://codeforces.com/problemset/problem/1312/B",
    "history": "You are given an array a_ 1, a_ 2, . . . , a_ n . Array is good if for each pair of indexes i < j the condition j - a_ j i - a_ i holds. Can you shuffle this array so that it becomes good? To shuffle an array means to reorder its elements arbitrarily ( leaving the initial order is also an option) . For example, if a = [ 1, 1, 3, 5] , then shuffled arrays [ 1, 3, 5, 1] , [ 3, 5, 1, 1] and [ 5, 3, 1, 1] are good, but shuffled arrays [ 3, 1, 5, 1] , [ 1, 1, 3, 5] and [ 1, 1, 5, 3] aren' t. It' s guaranteed that it' s always possible to shuffle an array to meet this condition.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 100 ) \u2014 the length of array a . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 100 ) .",
    "output": "For each test case print the shuffled version of the array a which is good.",
    "note": " ",
    "topics": [
      "constructive algorithms",
      "sortings"
    ]
  },
  {
    "title": "Moving Points",
    "url": "https://codeforces.com/problemset/problem/1311/F",
    "history": "There are n points on a coordinate axis OX . The i - th point is located at the integer point x_ i and has a speed v_ i . It is guaranteed that no two points occupy the same coordinate. All n points move with the constant speed, the coordinate of the i - th point at the moment t ( t can be non- integer) is calculated as x_ i + t \u00b7 v_ i . Consider two points i and j . Let d( i, j) be the minimum possible distance between these two points over any possible moments of time ( even non- integer) . It means that if two points i and j coincide at some moment, the value d( i, j) will be 0 . Your task is to calculate the value \u2211_ 1 \u2264 i < j \u2264 n d( i, j) ( the sum of minimum distances over all pairs of points) .",
    "input": "The first line of the input contains one integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of points. The second line of the input contains n integers x_ 1, x_ 2, . . . , x_ n ( 1 \u2264 x_ i \u2264 10^ 8 ) , where x_ i is the initial coordinate of the i - th point. It is guaranteed that all x_ i are distinct. The third line of the input contains n integers v_ 1, v_ 2, . . . , v_ n ( - 10^ 8 \u2264 v_ i \u2264 10^ 8 ) , where v_ i is the speed of the i - th point.",
    "output": "Print one integer \u2014 the value \u2211_ 1 \u2264 i < j \u2264 n d( i, j) ( the sum of minimum distances over all pairs of points) .",
    "note": " ",
    "topics": [
      "data structures",
      "divide and conquer",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "WeirdSort",
    "url": "https://codeforces.com/problemset/problem/1311/B",
    "history": "You are given an array a of length n . You are also given a set of distinct positions p_ 1, p_ 2, . . . , p_ m , where 1 \u2264 p_ i < n . The position p_ i means that you can swap elements a[ p_ i] and a[ p_ i + 1] . You can apply this operation any number of times for each of the given positions. Your task is to determine if it is possible to sort the initial array in non- decreasing order ( a_ 1 \u2264 a_ 2 \u2264. . . \u2264 a_ n ) using only allowed swaps. For example, if a = [ 3, 2, 1] and p = [ 1, 2] , then we can first swap elements a[ 2] and a[ 3] ( because position 2 is contained in the given set p ) . We get the array a = [ 3, 1, 2] . Then we swap a[ 1] and a[ 2] ( position 1 is also contained in p ) . We get the array a = [ 1, 3, 2] . Finally, we swap a[ 2] and a[ 3] again and get the array a = [ 1, 2, 3] , sorted in non- decreasing order. You can see that if a = [ 4, 1, 2, 3] and p = [ 3, 2] then you cannot sort the array. You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. Then t test cases follow. The first line of each test case contains two integers n and m ( 1 \u2264 m < n \u2264 100 ) \u2014 the number of elements in a and the number of elements in p . The second line of the test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 100 ) . The third line of the test case contains m integers p_ 1, p_ 2, . . . , p_ m ( 1 \u2264 p_ i < n , all p_ i are distinct) \u2014 the set of positions described in the problem statement.",
    "output": "For each test case, print the answer \u2014 \" YES\" ( without quotes) if you can sort the initial array in non- decreasing order ( a_ 1 \u2264 a_ 2 \u2264. . . \u2264 a_ n ) using only allowed swaps. Otherwise, print \" NO\" .",
    "note": " ",
    "topics": [
      "dfs and similar",
      "sortings"
    ]
  },
  {
    "title": "Recommendations",
    "url": "https://codeforces.com/problemset/problem/1310/A",
    "history": "VK news recommendation system daily selects interesting publications of one of n disjoint categories for each user. Each publication belongs to exactly one category. For each category i batch algorithm selects a_ i publications. The latest A/ B test suggests that users are reading recommended publications more actively if each category has a different number of publications within daily recommendations. The targeted algorithm can find a single interesting publication of i - th category within t_ i seconds. What is the minimum total time necessary to add publications to the result of batch algorithm execution, so all categories have a different number of publications? You can' t remove publications recommended by the batch algorithm.",
    "input": "The first line of input consists of single integer n \u2014 the number of news categories ( 1 \u2264 n \u2264 200 000 ) . The second line of input consists of n integers a_ i \u2014 the number of publications of i - th category selected by the batch algorithm ( 1 \u2264 a_ i \u2264 10^ 9 ) . The third line of input consists of n integers t_ i \u2014 time it takes for targeted algorithm to find one new publication of category i ( 1 \u2264 t_ i \u2264 10^ 5) .",
    "output": "Print one integer \u2014 the minimal required time for the targeted algorithm to get rid of categories with the same size.",
    "note": "In the first example, it is possible to find three publications of the second type, which will take 6 seconds. In the second example, all news categories contain a different number of publications.",
    "topics": [
      "data structures",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Cow and Fields",
    "url": "https://codeforces.com/problemset/problem/1307/D",
    "history": "Bessie is out grazing on the farm, which consists of n fields connected by m bidirectional roads. She is currently at field 1 , and will return to her home at field n at the end of the day. The Cowfederation of Barns has ordered Farmer John to install one extra bidirectional road. The farm has k special fields and he has decided to install the road between two different special fields. He may add the road between two special fields that already had a road directly connecting them. After the road is added, Bessie will return home on the shortest path from field 1 to field n . Since Bessie needs more exercise, Farmer John must maximize the length of this shortest path. Help him!",
    "input": "The first line contains integers n , m , and k ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 , n- 1 \u2264 m \u2264 2 \u00b7 10^ 5 , 2 \u2264 k \u2264 n ) \u2014 the number of fields on the farm, the number of roads, and the number of special fields. The second line contains k integers a_ 1, a_ 2, . . . , a_ k ( 1 \u2264 a_ i \u2264 n ) \u2014 the special fields. All a_ i are distinct. The i - th of the following m lines contains integers x_ i and y_ i ( 1 \u2264 x_ i, y_ i \u2264 n , x_ i y_ i ) , representing a bidirectional road between fields x_ i and y_ i . It is guaranteed that one can reach any field from every other field. It is also guaranteed that for any pair of fields there is at most one road connecting them.",
    "output": "Output one integer, the maximum possible length of the shortest path from field 1 to n after Farmer John installs one road optimally.",
    "note": "The graph for the first example is shown below. The special fields are denoted by red. It is optimal for Farmer John to add a road between fields 3 and 5 , and the resulting shortest path from 1 to 5 is length 3 . The graph for the second example is shown below. Farmer John must add a road between fields 2 and 4 , and the resulting shortest path from 1 to 5 is length 3 .",
    "topics": [
      "binary search",
      "data structures",
      "dfs and similar",
      "graphs",
      "greedy",
      "shortest paths",
      "sortings"
    ]
  },
  {
    "title": "Kuroni and the Gifts",
    "url": "https://codeforces.com/problemset/problem/1305/A",
    "history": "Kuroni has n daughters. As gifts for them, he bought n necklaces and n bracelets: the i - th necklace has a brightness a_ i , where all the a_ i are pairwise distinct ( i. e. all a_ i are different) , the i - th bracelet has a brightness b_ i , where all the b_ i are pairwise distinct ( i. e. all b_ i are different) . Kuroni wants to give exactly one necklace and exactly one bracelet to each of his daughters. To make sure that all of them look unique, the total brightnesses of the gifts given to each daughter should be pairwise distinct. Formally, if the i - th daughter receives a necklace with brightness x_ i and a bracelet with brightness y_ i , then the sums x_ i + y_ i should be pairwise distinct. Help Kuroni to distribute the gifts. For example, if the brightnesses are a = [ 1, 7, 5] and b = [ 6, 1, 2] , then we may distribute the gifts as follows: Give the third necklace and the first bracelet to the first daughter, for a total brightness of a_ 3 + b_ 1 = 11 . Give the first necklace and the third bracelet to the second daughter, for a total brightness of a_ 1 + b_ 3 = 3 . Give the second necklace and the second bracelet to the third daughter, for a total brightness of a_ 2 + b_ 2 = 8 . Here is an example of an invalid distribution: Give the first necklace and the first bracelet to the first daughter, for a total brightness of a_ 1 + b_ 1 = 7 . Give the second necklace and the second bracelet to the second daughter, for a total brightness of a_ 2 + b_ 2 = 8 . Give the third necklace and the third bracelet to the third daughter, for a total brightness of a_ 3 + b_ 3 = 7 . This distribution is invalid, as the total brightnesses of the gifts received by the first and the third daughter are the same. Don' t make them this upset!",
    "input": "The input consists of multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 100 ) \u2014 the number of daughters, necklaces and bracelets. The second line of each test case contains n distinct integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 1000 ) \u2014 the brightnesses of the necklaces. The third line of each test case contains n distinct integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 1000 ) \u2014 the brightnesses of the bracelets.",
    "output": "For each test case, print a line containing n integers x_ 1, x_ 2, . . . , x_ n , representing that the i - th daughter receives a necklace with brightness x_ i . In the next line print n integers y_ 1, y_ 2, . . . , y_ n , representing that the i - th daughter receives a bracelet with brightness y_ i . The sums x_ 1 + y_ 1, x_ 2 + y_ 2, . . . , x_ n + y_ n should all be distinct. The numbers x_ 1, . . . , x_ n should be equal to the numbers a_ 1, . . . , a_ n in some order, and the numbers y_ 1, . . . , y_ n should be equal to the numbers b_ 1, . . . , b_ n in some order. It can be shown that an answer always exists. If there are multiple possible answers, you may print any of them.",
    "note": "In the first test case, it is enough to give the i - th necklace and the i - th bracelet to the i - th daughter. The corresponding sums are 1 + 8 = 9 , 8 + 4 = 12 , and 5 + 5 = 10 . The second test case is described in the statement.",
    "topics": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Air Conditioner",
    "url": "https://codeforces.com/problemset/problem/1304/C",
    "history": "Gildong owns a bulgogi restaurant. The restaurant has a lot of customers, so many of them like to make a reservation before visiting it. Gildong tries so hard to satisfy the customers that he even memorized all customers' preferred temperature ranges! Looking through the reservation list, he wants to satisfy all customers by controlling the temperature of the restaurant. The restaurant has an air conditioner that has 3 states: off, heating, and cooling. When it' s off, the restaurant' s temperature remains the same. When it' s heating, the temperature increases by 1 in one minute. Lastly, when it' s cooling, the temperature decreases by 1 in one minute. Gildong can change the state as many times as he wants, at any integer minutes. The air conditioner is off initially. Each customer is characterized by three values: t_ i \u2014 the time ( in minutes) when the i - th customer visits the restaurant, l_ i \u2014 the lower bound of their preferred temperature range, and h_ i \u2014 the upper bound of their preferred temperature range. A customer is satisfied if the temperature is within the preferred range at the instant they visit the restaurant. Formally, the i - th customer is satisfied if and only if the temperature is between l_ i and h_ i ( inclusive) in the t_ i - th minute. Given the initial temperature, the list of reserved customers' visit times and their preferred temperature ranges, you' re going to help him find if it' s possible to satisfy all customers.",
    "input": "Each test contains one or more test cases. The first line contains the number of test cases q ( 1 \u2264 q \u2264 500 ) . Description of the test cases follows. The first line of each test case contains two integers n and m ( 1 \u2264 n \u2264 100 , - 10^ 9 \u2264 m \u2264 10^ 9 ) , where n is the number of reserved customers and m is the initial temperature of the restaurant. Next, n lines follow. The i - th line of them contains three integers t_ i , l_ i , and h_ i ( 1 \u2264 t_ i \u2264 10^ 9 , - 10^ 9 \u2264 l_ i \u2264 h_ i \u2264 10^ 9 ) , where t_ i is the time when the i - th customer visits, l_ i is the lower bound of their preferred temperature range, and h_ i is the upper bound of their preferred temperature range. The preferred temperature ranges are inclusive. The customers are given in non- decreasing order of their visit time, and the current time is 0 .",
    "output": "For each test case, print \" YES\" if it is possible to satisfy all customers. Otherwise, print \" NO\" . You can print each letter in any case ( upper or lower) .",
    "note": "In the first case, Gildong can control the air conditioner to satisfy all customers in the following way: At 0 - th minute, change the state to heating ( the temperature is 0) . At 2 - nd minute, change the state to off ( the temperature is 2) . At 5 - th minute, change the state to heating ( the temperature is 2, the 1 - st customer is satisfied) . At 6 - th minute, change the state to off ( the temperature is 3) . At 7 - th minute, change the state to cooling ( the temperature is 3, the 2 - nd customer is satisfied) . At 10 - th minute, the temperature will be 0, which satisfies the last customer. In the third case, Gildong can change the state to heating at 0 - th minute and leave it be. Then all customers will be satisfied. Note that the 1 - st customer' s visit time equals the 2 - nd customer' s visit time. In the second and the fourth case, Gildong has to make at least one customer unsatisfied.",
    "topics": [
      "dp",
      "greedy",
      "implementation",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Assigning to Classes",
    "url": "https://codeforces.com/problemset/problem/1300/B",
    "history": "Reminder: the median of the array [ a_ 1, a_ 2, . . . , a_ 2k+ 1] of odd number of elements is defined as follows: let [ b_ 1, b_ 2, . . . , b_ 2k+ 1] be the elements of the array in the sorted order. Then median of this array is equal to b_ k+ 1 . There are 2n students, the i - th student has skill level a_ i . It' s not guaranteed that all skill levels are distinct. Let' s define skill level of a class as the median of skill levels of students of the class. As a principal of the school, you would like to assign each student to one of the 2 classes such that each class has odd number of students ( not divisible by 2 ) . The number of students in the classes may be equal or different, by your choice. Every student has to be assigned to exactly one class. Among such partitions, you want to choose one in which the absolute difference between skill levels of the classes is minimized. What is the minimum possible absolute difference you can achieve?",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . The description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of students halved. The second line of each test case contains 2n integers a_ 1, a_ 2, . . . , a_ 2 n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 skill levels of students. It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, output a single integer, the minimum possible absolute difference between skill levels of two classes of odd sizes.",
    "note": "In the first test, there is only one way to partition students \u2014 one in each class. The absolute difference of the skill levels will be | 1 - 1| = 0 . In the second test, one of the possible partitions is to make the first class of students with skill levels [ 6, 4, 2] , so that the skill level of the first class will be 4 , and second with [ 5, 1, 3] , so that the skill level of the second class will be 3 . Absolute difference will be | 4 - 3| = 1 . Note that you can' t assign like [ 2, 3] , [ 6, 5, 4, 1] or [ ] , [ 6, 5, 4, 1, 2, 3] because classes have even number of students. [ 2] , [ 1, 3, 4] is also not possible because students with skills 5 and 6 aren' t assigned to a class. In the third test you can assign the students in the following way: [ 3, 4, 13, 13, 20] , [ 2, 5, 8, 16, 17] or [ 3, 8, 17] , [ 2, 4, 5, 13, 13, 16, 20] . Both divisions give minimal possible absolute difference.",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Movie Fan",
    "url": "https://codeforces.com/problemset/problem/1297/F",
    "history": "Recently, Polycarp has been a fan of cinema novelties and is trying not to miss them! In the near future, n new movies will be released: the i - th of them will be airing from the day a_ i and to the day b_ i . This means that if Polycarp wants to watch the i - th movie in the cinema, he must do so in the period from a_ i to b_ i inclusive. If perhaps Polycarp will not have the opportunity to watch a movie in a cinema, he can then do it after day b_ i by watching it using an online service. Of course, this is an undesirable outcome for Polycarp because the whole world will have time to discuss this movie on social networks! Polycarp can watch no more than m movies per day. Help Polycarp find a movie- watching schedule such that every movie will be watched in the cinema. If such a schedule does not exist, then Polycarp wants to watch movies so that: for each movie that he doesn' t have time to watch in the cinema, we will find the number of days between the end of its airing and the day when Polycarpus watches the movie, the maximum of the values from the previous point should be as small as possible.",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the input. The following are descriptions of the t test cases. The first line of each test case contains two integers n and m ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 m \u2264 10^ 9 ) \u2014 the number of movies and the maximum number of movies that Polycarp can view per day. In the next n lines, the movies themselves are described, one per line, by a pair of integers a_ i , b_ i ( 1 \u2264 a_ i \u2264 b_ i \u2264 10^ 9 ) \u2014 the first and last airing days for the i - th movie. It is guaranteed that the sum of the values n for all test cases in the input does not exceed 2 \u00b7 10^ 5 .",
    "output": "Print t answers to given test cases in the order in which they appear in the input: the i - th answer should consist of two lines. Print the integer d in the first line of each test case answer: d= 0 , if there is a schedule such that all movies are watched during airing, d> 0 , if such a schedule does not exist \u2014 in this case, d is equal to the minimum value of maximum among all the watching \" delays\" after the end of airing. In the second line of the answer to each test case, print n positive integers t_ 1, t_ 2, . . . , t_ n , where t_ i is the number of the day when Polycarp needs to watch the i - th movie in the optimal schedule. If there are several answers, print any of them.",
    "note": " ",
    "topics": [
      "*special",
      "data structures",
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Bonus Distribution ",
    "url": "https://codeforces.com/problemset/problem/1297/D",
    "history": "For the first time, Polycarp' s startup ended the year with a profit! Now he is about to distribute k burles as a bonus among n employees. It is known that the current salary of the i - th employee is a_ i and all the values of a_ i in the company are different. Polycarp wants to distribute the k burles between n employees so this month the i - th employee will be paid not a_ i , but a_ i+ d_ i ( d_ i \u2265 0 , d_ i is an integer) , where d_ i is the bonus for the i - th employee. Of course, d_ 1+ d_ 2+ . . . + d_ n= k . Polycarp will follow two rules for choosing the values d_ i : the relative order of the salaries should not be changed: the employee with originally the highest salary ( a_ i is the maximum) should have the highest total payment after receiving their bonus ( a_ i+ d_ i is also the maximum) , the employee whose salary was originally the second- largest should receive the second- largest total payment after receiving their bonus and so on. to emphasize that annual profit is a group effort, Polycarp wants to minimize the maximum total payment to an employee ( i. e minimize the maximum value of a_ i+ d_ i ) . Help Polycarp decide the non- negative integer bonuses d_ i such that: their sum is k , for each employee, the number of those who receive strictly more than them remains unchanged ( that is, if you sort employees by a_ i and by a_ i+ d_ i , you get the same order of employees) , all a_ i + d_ i are different, the maximum of the values a_ i+ d_ i is the minimum possible. Help Polycarp and print any of the possible answers d_ 1, d_ 2, . . . , d_ n .",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the input. Then t test cases follow. The first line of each test case contains two integers n and k ( 1 \u2264 n \u2264 10^ 5 , 1 \u2264 k \u2264 10^ 9 ) \u2014 the number of employees and the total bonus. The second line of each test case contains n different integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is the current salary of the i - th employee. It is guaranteed that the sum of all n values in the input does not exceed 10^ 5 .",
    "output": "Print the answers to t test cases in the order they appear in the input. Print each answer as a sequence of non- negative integers d_ 1, d_ 2, . . . , d_ n . If there are several answers, print any of them.",
    "note": " ",
    "topics": [
      "*special",
      "binary search",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Cartoons",
    "url": "https://codeforces.com/problemset/problem/1297/B",
    "history": "Tanya likes cartoons. She knows that n new cartoons will be released in his favorite cinema: the i - th of them will be airing from the day a_ i to the day b_ i ( 1 \u2264 a_ i \u2264 b_ i \u2264 10^ 9 ) . The cinema has a special offer: there is a huge discount every day when only one cartoon is airing. Tanya doesn' t care which cartoon she will watch but she' d like to save some money. That' s why she asks you to find any day x when only one cartoon will be airing. Formally: find x such that there is exactly one i ( 1 \u2264 i \u2264 n ) with a_ i \u2264 x \u2264 b_ i . If there are several possible answers, print any of them. If there is no such day, print - 1.",
    "input": "The first line contains single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The following are descriptions of the t test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 2000 ) \u2014 the number of cartoons. In the next n lines, the cartoons themselves are described, one per line, by a pair of integers a_ i , b_ i ( 1 \u2264 a_ i \u2264 b_ i \u2264 10^ 9 ) \u2014 the first and last airing days for the i - th cartoon. It is guaranteed that the sum of the values n for all test cases in the input does not exceed 2000 .",
    "output": "Print t answers to given test cases in the order in which they appear in the input: the i - th answer is such x , that only one cartoon will be airing on day x or - 1 if there are no such days.",
    "note": "In the third test case: at day 1 and 2 , first and third cartoons will be airing, and days 3 and 4 , second and third cartoons will be airing. So, there is no day when only one cartoon will be airing. In the fourth test case, 11 is also a possible answer.",
    "topics": [
      "*special",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Berland Beauty",
    "url": "https://codeforces.com/problemset/problem/1296/F",
    "history": "There are n railway stations in Berland. They are connected to each other by n- 1 railway sections. The railway network is connected, i. e. can be represented as an undirected tree. You have a map of that network, so for each railway section you know which stations it connects. Each of the n- 1 sections has some integer value of the scenery beauty. However, these values are not marked on the map and you don' t know them. All these values are from 1 to 10^ 6 inclusive. You asked m passengers some questions: the j - th one told you three values: his departure station a_ j ; his arrival station b_ j ; minimum scenery beauty along the path from a_ j to b_ j ( the train is moving along the shortest path from a_ j to b_ j ) . You are planning to update the map and set some value f_ i on each railway section \u2014 the scenery beauty. The passengers' answers should be consistent with these values. Print any valid set of values f_ 1, f_ 2, . . . , f_ n- 1 , which the passengers' answer is consistent with or report that it doesn' t exist.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 5000 ) \u2014 the number of railway stations in Berland. The next n- 1 lines contain descriptions of the railway sections: the i - th section description is two integers x_ i and y_ i ( 1 \u2264 x_ i, y_ i \u2264 n, x_ i y_ i ) , where x_ i and y_ i are the indices of the stations which are connected by the i - th railway section. All the railway sections are bidirected. Each station can be reached from any other station by the railway. The next line contains a single integer m ( 1 \u2264 m \u2264 5000 ) \u2014 the number of passengers which were asked questions. Then m lines follow, the j - th line contains three integers a_ j , b_ j and g_ j ( 1 \u2264 a_ j, b_ j \u2264 n ; a_ j b_ j ; 1 \u2264 g_ j \u2264 10^ 6 ) \u2014 the departure station, the arrival station and the minimum scenery beauty along his path.",
    "output": "If there is no answer then print a single integer - 1. Otherwise, print n- 1 integers f_ 1, f_ 2, . . . , f_ n- 1 ( 1 \u2264 f_ i \u2264 10^ 6 ) , where f_ i is some valid scenery beauty along the i - th railway section. If there are multiple answers, you can print any of them.",
    "note": " ",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "greedy",
      "sortings",
      "trees"
    ]
  },
  {
    "title": "String Coloring (easy version)",
    "url": "https://codeforces.com/problemset/problem/1296/E1",
    "history": "This is an easy version of the problem. The actual problems are different, but the easy version is almost a subtask of the hard version. Note that the constraints and the output format are different. You are given a string s consisting of n lowercase Latin letters. You have to color all its characters one of the two colors ( each character to exactly one color, the same letters can be colored the same or different colors, i. e. you can choose exactly one color for each index in s ) . After coloring, you can swap any two neighboring characters of the string that are colored different colors. You can perform such an operation arbitrary ( possibly, zero) number of times. The goal is to make the string sorted, i. e. all characters should be in alphabetical order. Your task is to say if it is possible to color the given string so that after coloring it can become sorted by some sequence of swaps. Note that you have to restore only coloring, not the sequence of swaps.",
    "input": "The first line of the input contains one integer n ( 1 \u2264 n \u2264 200 ) \u2014 the length of s . The second line of the input contains the string s consisting of exactly n lowercase Latin letters.",
    "output": "If it is impossible to color the given string so that after coloring it can become sorted by some sequence of swaps, print \" NO\" ( without quotes) in the first line. Otherwise, print \" YES\" in the first line and any correct coloring in the second line ( the coloring is the string consisting of n characters, the i - th character should be ' 0' if the i - th character is colored the first color and ' 1' otherwise) .",
    "note": " ",
    "topics": [
      "constructive algorithms",
      "dp",
      "graphs",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Fight with Monsters",
    "url": "https://codeforces.com/problemset/problem/1296/D",
    "history": "There are n monsters standing in a row numbered from 1 to n . The i - th monster has h_ i health points ( hp) . You have your attack power equal to a hp and your opponent has his attack power equal to b hp. You and your opponent are fighting these monsters. Firstly, you and your opponent go to the first monster and fight it till his death, then you and your opponent go the second monster and fight it till his death, and so on. A monster is considered dead if its hp is less than or equal to 0 . The fight with a monster happens in turns. You hit the monster by a hp. If it is dead after your hit, you gain one point and you both proceed to the next monster. Your opponent hits the monster by b hp. If it is dead after his hit, nobody gains a point and you both proceed to the next monster. You have some secret technique to force your opponent to skip his turn. You can use this technique at most k times in total ( for example, if there are two monsters and k= 4 , then you can use the technique 2 times on the first monster and 1 time on the second monster, but not 2 times on the first monster and 3 times on the second monster) . Your task is to determine the maximum number of points you can gain if you use the secret technique optimally.",
    "input": "The first line of the input contains four integers n, a, b and k ( 1 \u2264 n \u2264 2 \u00b7 10^ 5, 1 \u2264 a, b, k \u2264 10^ 9 ) \u2014 the number of monsters, your attack power, the opponent' s attack power and the number of times you can use the secret technique. The second line of the input contains n integers h_ 1, h_ 2, . . . , h_ n ( 1 \u2264 h_ i \u2264 10^ 9 ) , where h_ i is the health points of the i - th monster.",
    "output": "Print one integer \u2014 the maximum number of points you can gain if you use the secret technique optimally.",
    "note": " ",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Collecting Packages",
    "url": "https://codeforces.com/problemset/problem/1294/B",
    "history": "There is a robot in a warehouse and n packages he wants to collect. The warehouse can be represented as a coordinate grid. Initially, the robot stays at the point ( 0, 0) . The i - th package is at the point ( x_ i, y_ i) . It is guaranteed that there are no two packages at the same point. It is also guaranteed that the point ( 0, 0) doesn' t contain a package. The robot is semi- broken and only can move up ( ' U' ) and right ( ' R' ) . In other words, in one move the robot can go from the point ( x, y) to the point ( x + 1, y ) or to the point ( x, y + 1) . As we say above, the robot wants to collect all n packages ( in arbitrary order) . He wants to do it with the minimum possible number of moves. If there are several possible traversals, the robot wants to choose the lexicographically smallest path. The string s of length n is lexicographically less than the string t of length n if there is some index 1 \u2264 j \u2264 n that for all i from 1 to j- 1 s_ i = t_ i and s_ j < t_ j . It is the standard comparison of string, like in a dictionary. Most programming languages compare strings in this way.",
    "input": "The first line of the input contains an integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. Then test cases follow. The first line of a test case contains one integer n ( 1 \u2264 n \u2264 1000 ) \u2014 the number of packages. The next n lines contain descriptions of packages. The i - th package is given as two integers x_ i and y_ i ( 0 \u2264 x_ i, y_ i \u2264 1000 ) \u2014 the x - coordinate of the package and the y - coordinate of the package. It is guaranteed that there are no two packages at the same point. It is also guaranteed that the point ( 0, 0) doesn' t contain a package. The sum of all values n over test cases in the test doesn' t exceed 1000 .",
    "output": "Print the answer for each test case. If it is impossible to collect all n packages in some order starting from ( 0, 0 ) , print \" NO\" on the first line. Otherwise, print \" YES\" in the first line. Then print the shortest path \u2014 a string consisting of characters ' R' and ' U' . Among all such paths choose the lexicographically smallest path. Note that in this problem \" YES\" and \" NO\" can be only uppercase words, i. e. \" Yes\" , \" no\" and \" YeS\" are not acceptable.",
    "note": "For the first test case in the example the optimal path RUUURRRRUU is shown below:",
    "topics": [
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Garland",
    "url": "https://codeforces.com/problemset/problem/1286/A",
    "history": "Vadim loves decorating the Christmas tree, so he got a beautiful garland as a present. It consists of n light bulbs in a single row. Each bulb has a number from 1 to n ( in arbitrary order) , such that all the numbers are distinct. While Vadim was solving problems, his home Carp removed some light bulbs from the garland. Now Vadim wants to put them back on. Vadim wants to put all bulb back on the garland. Vadim defines complexity of a garland to be the number of pairs of adjacent bulbs with numbers with different parity ( remainder of the division by 2 ) . For example, the complexity of 1 4 2 3 5 is 2 and the complexity of 1 3 5 7 6 4 2 is 1 . No one likes complexity, so Vadim wants to minimize the number of such pairs. Find the way to put all bulbs back on the garland, such that the complexity is as small as possible.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 100 ) \u2014 the number of light bulbs on the garland. The second line contains n integers p_ 1, p_ 2, . . . , p_ n ( 0 \u2264 p_ i \u2264 n ) \u2014 the number on the i - th bulb, or 0 if it was removed.",
    "output": "Output a single number \u2014 the minimum complexity of the garland.",
    "note": "In the first example, one should place light bulbs as 1 5 4 2 3. In that case, the complexity would be equal to 2, because only ( 5, 4) and ( 2, 3) are the pairs of adjacent bulbs that have different parity. In the second case, one of the correct answers is 1 7 3 5 6 4 2.",
    "topics": [
      "dp",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Delete a Segment",
    "url": "https://codeforces.com/problemset/problem/1285/E",
    "history": "There are n segments on a Ox axis [ l_ 1, r_ 1] , [ l_ 2, r_ 2] , . . . , [ l_ n, r_ n] . Segment [ l, r] covers all points from l to r inclusive, so all x such that l \u2264 x \u2264 r . Segments can be placed arbitrarily \u2014 be inside each other, coincide and so on. Segments can degenerate into points, that is l_ i= r_ i is possible. Union of the set of segments is such a set of segments which covers exactly the same set of points as the original set. For example: if n= 3 and there are segments [ 3, 6] , [ 100, 100] , [ 5, 8] then their union is 2 segments: [ 3, 8] and [ 100, 100] ; if n= 5 and there are segments [ 1, 2] , [ 2, 3] , [ 4, 5] , [ 4, 6] , [ 6, 6] then their union is 2 segments: [ 1, 3] and [ 4, 6] . Obviously, a union is a set of pairwise non- intersecting segments. You are asked to erase exactly one segment of the given n so that the number of segments in the union of the rest n- 1 segments is maximum possible. For example, if n= 4 and there are segments [ 1, 4] , [ 2, 3] , [ 3, 6] , [ 5, 7] , then: erasing the first segment will lead to [ 2, 3] , [ 3, 6] , [ 5, 7] remaining, which have 1 segment in their union; erasing the second segment will lead to [ 1, 4] , [ 3, 6] , [ 5, 7] remaining, which have 1 segment in their union; erasing the third segment will lead to [ 1, 4] , [ 2, 3] , [ 5, 7] remaining, which have 2 segments in their union; erasing the fourth segment will lead to [ 1, 4] , [ 2, 3] , [ 3, 6] remaining, which have 1 segment in their union. Thus, you are required to erase the third segment to get answer 2 . Write a program that will find the maximum number of segments in the union of n- 1 segments if you erase any of the given n segments. Note that if there are multiple equal segments in the given set, then you can erase only one of them anyway. So the set after erasing will have exactly n- 1 segments.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the test. Then the descriptions of t test cases follow. The first of each test case contains a single integer n ( 2 \u2264 n \u2264 2\u00b710^ 5 ) \u2014 the number of segments in the given set. Then n lines follow, each contains a description of a segment \u2014 a pair of integers l_ i , r_ i ( - 10^ 9 \u2264 l_ i \u2264 r_ i \u2264 10^ 9 ) , where l_ i and r_ i are the coordinates of the left and right borders of the i - th segment, respectively. The segments are given in an arbitrary order. It is guaranteed that the sum of n over all test cases does not exceed 2\u00b710^ 5 .",
    "output": "Print t integers \u2014 the answers to the t given test cases in the order of input. The answer is the maximum number of segments in the union of n- 1 segments if you erase any of the given n segments.",
    "note": " ",
    "topics": [
      "brute force",
      "constructive algorithms",
      "data structures",
      "dp",
      "graphs",
      "sortings",
      "trees",
      "two pointers"
    ]
  },
  {
    "title": "New Year and Castle Construction",
    "url": "https://codeforces.com/problemset/problem/1284/E",
    "history": "Kiwon' s favorite video game is now holding a new year event to motivate the users! The game is about building and defending a castle, which led Kiwon to think about the following puzzle. In a 2- dimension plane, you have a set s = { ( x_ 1, y_ 1) , ( x_ 2, y_ 2) , . . . , ( x_ n, y_ n) } consisting of n distinct points. In the set s , no three distinct points lie on a single line. For a point p \u2208 s , we can protect this point by building a castle. A castle is a simple quadrilateral ( polygon with 4 vertices) that strictly encloses the point p ( i. e. the point p is strictly inside a quadrilateral) . Kiwon is interested in the number of 4 - point subsets of s that can be used to build a castle protecting p . Note that, if a single subset can be connected in more than one way to enclose a point, it is counted only once. Let f( p) be the number of 4 - point subsets that can enclose the point p . Please compute the sum of f( p) for all points p \u2208 s .",
    "input": "The first line contains a single integer n ( 5 \u2264 n \u2264 2 500 ) . In the next n lines, two integers x_ i and y_ i ( - 10^ 9 \u2264 x_ i, y_ i \u2264 10^ 9 ) denoting the position of points are given. It is guaranteed that all points are distinct, and there are no three collinear points.",
    "output": "Print the sum of f( p) for all points p \u2208 s .",
    "note": " ",
    "topics": [
      "combinatorics",
      "geometry",
      "math",
      "sortings"
    ]
  },
  {
    "title": "New Year and Conference",
    "url": "https://codeforces.com/problemset/problem/1284/D",
    "history": "Filled with optimism, Hyunuk will host a conference about how great this new year will be! The conference will have n lectures. Hyunuk has two candidate venues a and b . For each of the n lectures, the speaker specified two time intervals [ sa_ i, ea_ i] ( sa_ i \u2264 ea_ i ) and [ sb_ i, eb_ i] ( sb_ i \u2264 eb_ i ) . If the conference is situated in venue a , the lecture will be held from sa_ i to ea_ i , and if the conference is situated in venue b , the lecture will be held from sb_ i to eb_ i . Hyunuk will choose one of these venues and all lectures will be held at that venue. Two lectures are said to overlap if they share any point in time in common. Formally, a lecture held in interval [ x, y] overlaps with a lecture held in interval [ u, v] if and only if max( x, u) \u2264min( y, v) . We say that a participant can attend a subset s of the lectures if the lectures in s do not pairwise overlap ( i. e. no two lectures overlap) . Note that the possibility of attending may depend on whether Hyunuk selected venue a or venue b to hold the conference. A subset of lectures s is said to be venue- sensitive if, for one of the venues, the participant can attend s , but for the other venue, the participant cannot attend s . A venue- sensitive set is problematic for a participant who is interested in attending the lectures in s because the participant cannot be sure whether the lecture times will overlap. Hyunuk will be happy if and only if there are no venue- sensitive sets. Determine whether Hyunuk will be happy.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 100 000 ) , the number of lectures held in the conference. Each of the next n lines contains four integers sa_ i , ea_ i , sb_ i , eb_ i ( 1 \u2264 sa_ i, ea_ i, sb_ i, eb_ i \u2264 10^ 9 , sa_ i \u2264 ea_ i, sb_ i \u2264 eb_ i ) .",
    "output": "Print \" YES\" if Hyunuk will be happy. Print \" NO\" otherwise. You can print each letter in any case ( upper or lower) .",
    "note": "In second example, lecture set { 1, 3} is venue- sensitive. Because participant can' t attend this lectures in venue a , but can attend in venue b . In first and third example, venue- sensitive set does not exist.",
    "topics": [
      "binary search",
      "data structures",
      "hashing",
      "sortings"
    ]
  },
  {
    "title": "New Year and Ascent Sequence",
    "url": "https://codeforces.com/problemset/problem/1284/B",
    "history": "A sequence a = [ a_ 1, a_ 2, . . . , a_ l] of length l has an ascent if there exists a pair of indices ( i, j) such that 1 \u2264 i < j \u2264 l and a_ i < a_ j . For example, the sequence [ 0, 2, 0, 2, 0] has an ascent because of the pair ( 1, 4) , but the sequence [ 4, 3, 3, 3, 1] doesn' t have an ascent. Let' s call a concatenation of sequences p and q the sequence that is obtained by writing down sequences p and q one right after another without changing the order. For example, the concatenation of the [ 0, 2, 0, 2, 0] and [ 4, 3, 3, 3, 1] is the sequence [ 0, 2, 0, 2, 0, 4, 3, 3, 3, 1] . The concatenation of sequences p and q is denoted as p+ q . Gyeonggeun thinks that sequences with ascents bring luck. Therefore, he wants to make many such sequences for the new year. Gyeonggeun has n sequences s_ 1, s_ 2, . . . , s_ n which may have different lengths. Gyeonggeun will consider all n^ 2 pairs of sequences s_ x and s_ y ( 1 \u2264 x, y \u2264 n ) , and will check if its concatenation s_ x + s_ y has an ascent. Note that he may select the same sequence twice, and the order of selection matters. Please count the number of pairs ( x, y ) of sequences s_ 1, s_ 2, . . . , s_ n whose concatenation s_ x + s_ y contains an ascent.",
    "input": "The first line contains the number n ( 1 \u2264 n \u2264 100 000 ) denoting the number of sequences. The next n lines contain the number l_ i ( 1 \u2264 l_ i ) denoting the length of s_ i , followed by l_ i integers s_ i, 1, s_ i, 2, . . . , s_ i, l_ i ( 0 \u2264 s_ i, j\u2264 10^ 6 ) denoting the sequence s_ i . It is guaranteed that the sum of all l_ i does not exceed 100 000 .",
    "output": "Print a single integer, the number of pairs of sequences whose concatenation has an ascent.",
    "note": "For the first example, the following 9 arrays have an ascent: [ 1, 2] , [ 1, 2] , [ 1, 3] , [ 1, 3] , [ 1, 4] , [ 1, 4] , [ 2, 3] , [ 2, 4] , [ 3, 4] . Arrays with the same contents are counted as their occurences.",
    "topics": [
      "binary search",
      "combinatorics",
      "data structures",
      "dp",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Petya and Exam",
    "url": "https://codeforces.com/problemset/problem/1282/C",
    "history": "Petya has come to the math exam and wants to solve as many problems as possible. He prepared and carefully studied the rules by which the exam passes. The exam consists of n problems that can be solved in T minutes. Thus, the exam begins at time 0 and ends at time T . Petya can leave the exam at any integer time from 0 to T , inclusive. All problems are divided into two types: easy problems \u2014 Petya takes exactly a minutes to solve any easy problem; hard problems \u2014 Petya takes exactly b minutes ( b > a ) to solve any hard problem. Thus, if Petya starts solving an easy problem at time x , then it will be solved at time x+ a . Similarly, if at a time x Petya starts to solve a hard problem, then it will be solved at time x+ b . For every problem, Petya knows if it is easy or hard. Also, for each problem is determined time t_ i ( 0 \u2264 t_ i \u2264 T ) at which it will become mandatory ( required) . If Petya leaves the exam at time s and there is such a problem i that t_ i \u2264 s and he didn' t solve it, then he will receive 0 points for the whole exam. Otherwise ( i. e if he has solved all such problems for which t_ i \u2264 s ) he will receive a number of points equal to the number of solved problems. Note that leaving at time s Petya can have both \" mandatory\" and \" non- mandatory\" problems solved. For example, if n= 2 , T= 5 , a= 2 , b= 3 , the first problem is hard and t_ 1= 3 and the second problem is easy and t_ 2= 2 . Then: if he leaves at time s= 0 , then he will receive 0 points since he will not have time to solve any problems; if he leaves at time s= 1 , he will receive 0 points since he will not have time to solve any problems; if he leaves at time s= 2 , then he can get a 1 point by solving the problem with the number 2 ( it must be solved in the range from 0 to 2 ) ; if he leaves at time s= 3 , then he will receive 0 points since at this moment both problems will be mandatory, but he will not be able to solve both of them; if he leaves at time s= 4 , then he will receive 0 points since at this moment both problems will be mandatory, but he will not be able to solve both of them; if he leaves at time s= 5 , then he can get 2 points by solving all problems. Thus, the answer to this test is 2 . Help Petya to determine the maximal number of points that he can receive, before leaving the exam.",
    "input": "The first line contains the integer m ( 1 \u2264 m \u2264 10^ 4 ) \u2014 the number of test cases in the test. The next lines contain a description of m test cases. The first line of each test case contains four integers n, T, a, b ( 2 \u2264 n \u2264 2\u00b710^ 5 , 1 \u2264 T \u2264 10^ 9 , 1 \u2264 a < b \u2264 10^ 9 ) \u2014 the number of problems, minutes given for the exam and the time to solve an easy and hard problem, respectively. The second line of each test case contains n numbers 0 or 1 , separated by single space: the i - th number means the type of the i - th problem. A value of 0 means that the problem is easy, and a value of 1 that the problem is hard. The third line of each test case contains n integers t_ i ( 0 \u2264 t_ i \u2264 T ) , where the i - th number means the time at which the i - th problem will become mandatory. It is guaranteed that the sum of n for all test cases does not exceed 2\u00b710^ 5 .",
    "output": "Print the answers to m test cases. For each set, print a single integer \u2014 maximal number of points that he can receive, before leaving the exam.",
    "note": " ",
    "topics": [
      "greedy",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "K for the Price of One (Hard Version)",
    "url": "https://codeforces.com/problemset/problem/1282/B2",
    "history": "This is the hard version of this problem. The only difference is the constraint on k \u2014 the number of gifts in the offer. In this version: 2 \u2264 k \u2264 n . Vasya came to the store to buy goods for his friends for the New Year. It turned out that he was very lucky \u2014 today the offer \" k of goods for the price of one\" is held in store. Using this offer, Vasya can buy exactly k of any goods, paying only for the most expensive of them. Vasya decided to take this opportunity and buy as many goods as possible for his friends with the money he has. More formally, for each good, its price is determined by a_ i \u2014 the number of coins it costs. Initially, Vasya has p coins. He wants to buy the maximum number of goods. Vasya can perform one of the following operations as many times as necessary: Vasya can buy one good with the index i if he currently has enough coins ( i. e p \u2265 a_ i ) . After buying this good, the number of Vasya' s coins will decrease by a_ i , ( i. e it becomes p : = p - a_ i ) . Vasya can buy a good with the index i , and also choose exactly k- 1 goods, the price of which does not exceed a_ i , if he currently has enough coins ( i. e p \u2265 a_ i ) . Thus, he buys all these k goods, and his number of coins decreases by a_ i ( i. e it becomes p : = p - a_ i ) . Please note that each good can be bought no more than once. For example, if the store now has n= 5 goods worth a_ 1= 2, a_ 2= 4, a_ 3= 3, a_ 4= 5, a_ 5= 7 , respectively, k= 2 , and Vasya has 6 coins, then he can buy 3 goods. A good with the index 1 will be bought by Vasya without using the offer and he will pay 2 coins. Goods with the indices 2 and 3 Vasya will buy using the offer and he will pay 4 coins. It can be proved that Vasya can not buy more goods with six coins. Help Vasya to find out the maximum number of goods he can buy.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the test. The next lines contain a description of t test cases. The first line of each test case contains three integers n, p, k ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 p \u2264 2\u00b710^ 9 , 2 \u2264 k \u2264 n ) \u2014 the number of goods in the store, the number of coins Vasya has and the number of goods that can be bought by the price of the most expensive of them. The second line of each test case contains n integers a_ i ( 1 \u2264 a_ i \u2264 10^ 4 ) \u2014 the prices of goods. It is guaranteed that the sum of n for all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case in a separate line print one integer m \u2014 the maximum number of goods that Vasya can buy.",
    "note": " ",
    "topics": [
      "dp",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "K for the Price of One (Easy Version)",
    "url": "https://codeforces.com/problemset/problem/1282/B1",
    "history": "This is the easy version of this problem. The only difference is the constraint on k \u2014 the number of gifts in the offer. In this version: k= 2 . Vasya came to the store to buy goods for his friends for the New Year. It turned out that he was very lucky \u2014 today the offer \" k of goods for the price of one\" is held in store. Remember, that in this problem k= 2 . Using this offer, Vasya can buy exactly k of any goods, paying only for the most expensive of them. Vasya decided to take this opportunity and buy as many goods as possible for his friends with the money he has. More formally, for each good, its price is determined by a_ i \u2014 the number of coins it costs. Initially, Vasya has p coins. He wants to buy the maximum number of goods. Vasya can perform one of the following operations as many times as necessary: Vasya can buy one good with the index i if he currently has enough coins ( i. e p \u2265 a_ i ) . After buying this good, the number of Vasya' s coins will decrease by a_ i , ( i. e it becomes p : = p - a_ i ) . Vasya can buy a good with the index i , and also choose exactly k- 1 goods, the price of which does not exceed a_ i , if he currently has enough coins ( i. e p \u2265 a_ i ) . Thus, he buys all these k goods, and his number of coins decreases by a_ i ( i. e it becomes p : = p - a_ i ) . Please note that each good can be bought no more than once. For example, if the store now has n= 5 goods worth a_ 1= 2, a_ 2= 4, a_ 3= 3, a_ 4= 5, a_ 5= 7 , respectively, k= 2 , and Vasya has 6 coins, then he can buy 3 goods. A good with the index 1 will be bought by Vasya without using the offer and he will pay 2 coins. Goods with the indices 2 and 3 Vasya will buy using the offer and he will pay 4 coins. It can be proved that Vasya can not buy more goods with six coins. Help Vasya to find out the maximum number of goods he can buy.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the test. The next lines contain a description of t test cases. The first line of each test case contains three integers n, p, k ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 p \u2264 2\u00b710^ 9 , k= 2 ) \u2014 the number of goods in the store, the number of coins Vasya has and the number of goods that can be bought by the price of the most expensive of them. The second line of each test case contains n integers a_ i ( 1 \u2264 a_ i \u2264 10^ 4 ) \u2014 the prices of goods. It is guaranteed that the sum of n for all test cases does not exceed 2 \u00b7 10^ 5 . It is guaranteed that in this version of the problem k= 2 for all test cases.",
    "output": "For each test case in a separate line print one integer m \u2014 the maximum number of goods that Vasya can buy.",
    "note": " ",
    "topics": [
      "dp",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Three Friends",
    "url": "https://codeforces.com/problemset/problem/1272/A",
    "history": "Three friends are going to meet each other. Initially, the first friend stays at the position x = a , the second friend stays at the position x = b and the third friend stays at the position x = c on the coordinate axis Ox . In one minute each friend independently from other friends can change the position x by 1 to the left or by 1 to the right ( i. e. set x : = x - 1 or x : = x + 1 ) or even don' t change it. Let' s introduce the total pairwise distance \u2014 the sum of distances between each pair of friends. Let a' , b' and c' be the final positions of the first, the second and the third friend, correspondingly. Then the total pairwise distance is | a' - b' | + | a' - c' | + | b' - c' | , where | x| is the absolute value of x . Friends are interested in the minimum total pairwise distance they can reach if they will move optimally. Each friend will move no more than once. So, more formally, they want to know the minimum total pairwise distance they can reach after one minute. You have to answer q independent test cases.",
    "input": "The first line of the input contains one integer q ( 1 \u2264 q \u2264 1000 ) \u2014 the number of test cases. The next q lines describe test cases. The i - th test case is given as three integers a, b and c ( 1 \u2264 a, b, c \u2264 10^ 9 ) \u2014 initial positions of the first, second and third friend correspondingly. The positions of friends can be equal.",
    "output": "For each test case print the answer on it \u2014 the minimum total pairwise distance ( the minimum sum of distances between each pair of friends) if friends change their positions optimally. Each friend will move no more than once. So, more formally, you have to find the minimum total pairwise distance they can reach after one minute.",
    "note": " ",
    "topics": [
      "brute force",
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Portals",
    "url": "https://codeforces.com/problemset/problem/1271/D",
    "history": "You play a strategic video game ( yeah, we ran out of good problem legends) . In this game you control a large army, and your goal is to conquer n castles of your opponent. Let' s describe the game process in detail. Initially you control an army of k warriors. Your enemy controls n castles; to conquer the i - th castle, you need at least a_ i warriors ( you are so good at this game that you don' t lose any warriors while taking over a castle, so your army stays the same after the fight) . After you take control over a castle, you recruit new warriors into your army \u2014 formally, after you capture the i - th castle, b_ i warriors join your army. Furthermore, after capturing a castle ( or later) you can defend it: if you leave at least one warrior in a castle, this castle is considered defended. Each castle has an importance parameter c_ i , and your total score is the sum of importance values over all defended castles. There are two ways to defend a castle: if you are currently in the castle i , you may leave one warrior to defend castle i ; there are m one- way portals connecting the castles. Each portal is characterised by two numbers of castles u and v ( for each portal holds u > v ) . A portal can be used as follows: if you are currently in the castle u , you may send one warrior to defend castle v . Obviously, when you order your warrior to defend some castle, he leaves your army. You capture the castles in fixed order: you have to capture the first one, then the second one, and so on. After you capture the castle i ( but only before capturing castle i + 1 ) you may recruit new warriors from castle i , leave a warrior to defend castle i , and use any number of portals leading from castle i to other castles having smaller numbers. As soon as you capture the next castle, these actions for castle i won' t be available to you. If, during some moment in the game, you don' t have enough warriors to capture the next castle, you lose. Your goal is to maximize the sum of importance values over all defended castles ( note that you may hire new warriors in the last castle, defend it and use portals leading from it even after you capture it \u2014 your score will be calculated afterwards) . Can you determine an optimal strategy of capturing and defending the castles?",
    "input": "The first line contains three integers n , m and k ( 1 \u2264 n \u2264 5000 , 0 \u2264 m \u2264min( n( n - 1) / 2, 3 \u00b7 10^ 5) , 0 \u2264 k \u2264 5000 ) \u2014 the number of castles, the number of portals and initial size of your army, respectively. Then n lines follow. The i - th line describes the i - th castle with three integers a_ i , b_ i and c_ i ( 0 \u2264 a_ i, b_ i, c_ i \u2264 5000 ) \u2014 the number of warriors required to capture the i - th castle, the number of warriors available for hire in this castle and its importance value. Then m lines follow. The i - th line describes the i - th portal with two integers u_ i and v_ i ( 1 \u2264 v_ i < u_ i \u2264 n ) , meaning that the portal leads from the castle u_ i to the castle v_ i . There are no two same portals listed. It is guaranteed that the size of your army won' t exceed 5000 under any circumstances ( i. e. k + \u2211_ i = 1^ n b_ i \u2264 5000 ) .",
    "output": "If it' s impossible to capture all the castles, print one integer - 1 . Otherwise, print one integer equal to the maximum sum of importance values of defended castles.",
    "note": "The best course of action in the first example is as follows: capture the first castle; hire warriors from the first castle, your army has 11 warriors now; capture the second castle; capture the third castle; hire warriors from the third castle, your army has 13 warriors now; capture the fourth castle; leave one warrior to protect the fourth castle, your army has 12 warriors now. This course of action ( and several other ones) gives 5 as your total score. The best course of action in the second example is as follows: capture the first castle; hire warriors from the first castle, your army has 11 warriors now; capture the second castle; capture the third castle; hire warriors from the third castle, your army has 13 warriors now; capture the fourth castle; leave one warrior to protect the fourth castle, your army has 12 warriors now; send one warrior to protect the first castle through the third portal, your army has 11 warriors now. This course of action ( and several other ones) gives 22 as your total score. In the third example it' s impossible to capture the last castle: you need 14 warriors to do so, but you can accumulate no more than 13 without capturing it.",
    "topics": [
      "data structures",
      "dp",
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Strange Device",
    "url": "https://codeforces.com/problemset/problem/1270/D",
    "history": "This problem is interactive. We have hidden an array a of n pairwise different numbers ( this means that no two numbers are equal) . You can get some information about this array using a new device you just ordered on Amazon. This device can answer queries of the following form: in response to the positions of k different elements of the array, it will return the position and value of the m - th among them in the ascending order. Unfortunately, the instruction for the device was lost during delivery. However, you remember k , but don' t remember m . Your task is to find m using queries to this device. You can ask not more than n queries. Note that the array a and number m are fixed before the start of the interaction and don' t depend on your queries. In other words, interactor is not adaptive. Note that you don' t have to minimize the number of queries, and you don' t need to guess array a . You just have to guess m . InteractionYou begin the interaction by reading n and k . To ask a question about elements on positions x_ 1, x_ 2, . . . , x_ k , in a separate line output ? x_ 1 x_ 2 x_ 3 . . . x_ k Numbers in the query have to satisfy 1 \u2264 x_ i \u2264 n , and all x_ i have to be different. Don' t forget to ' flush' , to get the answer. In response, you will receive two integers pos and a_ pos \u2014 the position in the array a of the m - th in ascending order element among a_ x_ 1, a_ x_ 2, . . . , a_ x_ k , and the element on this position. In case your query is invalid or you asked more than n queries, the program will print - 1 and will finish interaction. You will receive a Wrong answer verdict. Make sure to exit immediately to avoid getting other verdicts. When you determine m , output ! m After printing a query do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use: fflush( stdout) or cout. flush( ) in C+ + ; System. out. flush( ) in Java; flush( output) in Pascal; stdout. flush( ) in Python; see documentation for other languages. Hack formatFor the hacks use the following format: The first line has to contain three integers n, k, m ( 1 \u2264 m \u2264 k < n \u2264 500 ) \u2014 the length of the array, number of elements in the query, and which in the ascending order number the device returns. In the next line output n integers a_ 1, a_ 2, . . . , a_ n ( 0\u2264 a_ i \u2264 10^ 9 ) \u2014 the elements of the array. They have to be pairwise different.",
    "input": "The first line contains two integers n and k ( 1\u2264 k < n \u2264 500 ) \u2014 the length of the array and the number of the elements in the query. It is guaranteed that number m satisfies 1\u2264 m \u2264 k , elements a_ 1, a_ 2, . . . , a_ n of the array satisfy 0\u2264 a_ i \u2264 10^ 9 , and all of them are different.",
    "output": " ",
    "note": "In the example, n = 4 , k = 3 , m = 3 , a = [ 2, 0, 1, 9] .",
    "topics": [
      "constructive algorithms",
      "interactive",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Modulo Equality",
    "url": "https://codeforces.com/problemset/problem/1269/B",
    "history": "You are given a positive integer m and two integer sequence: a= [ a_ 1, a_ 2, . . . , a_ n] and b= [ b_ 1, b_ 2, . . . , b_ n] . Both of these sequence have a length n . Permutation is a sequence of n different positive integers from 1 to n . For example, these sequences are permutations: [ 1] , [ 1, 2] , [ 2, 1] , [ 6, 7, 3, 4, 1, 2, 5] . These are not: [ 0] , [ 1, 1] , [ 2, 3] . You need to find the non- negative integer x , and increase all elements of a_ i by x , modulo m ( i. e. you want to change a_ i to ( a_ i + x) m ) , so it would be possible to rearrange elements of a to make it equal b , among them you need to find the smallest possible x . In other words, you need to find the smallest non- negative integer x , for which it is possible to find some permutation p= [ p_ 1, p_ 2, . . . , p_ n] , such that for all 1 \u2264 i \u2264 n , ( a_ i + x) m = b_ p_ i , where y m \u2014 remainder of division of y by m . For example, if m= 3 , a = [ 0, 0, 2, 1] , b = [ 2, 0, 1, 1] , you can choose x= 1 , and a will be equal to [ 1, 1, 0, 2] and you can rearrange it to make it equal [ 2, 0, 1, 1] , which is equal to b .",
    "input": "The first line contains two integers n, m ( 1 \u2264 n \u2264 2000, 1 \u2264 m \u2264 10^ 9 ) : number of elemens in arrays and m . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i < m ) . The third line contains n integers b_ 1, b_ 2, . . . , b_ n ( 0 \u2264 b_ i < m ) . It is guaranteed that there exists some non- negative integer x , such that it would be possible to find some permutation p_ 1, p_ 2, . . . , p_ n such that ( a_ i + x) m = b_ p_ i .",
    "output": "Print one integer, the smallest non- negative integer x , such that it would be possible to find some permutation p_ 1, p_ 2, . . . , p_ n such that ( a_ i + x) m = b_ p_ i for all 1 \u2264 i \u2264 n .",
    "note": " ",
    "topics": [
      "brute force",
      "sortings"
    ]
  },
  {
    "title": "Intriguing Selection",
    "url": "https://codeforces.com/problemset/problem/1267/I",
    "history": "This is an interactive problem. You are the head coach of a chess club. The club has 2n players, each player has some strength which can be represented by a number, and all those numbers are distinct. The strengths of the players are not known to you. You need to select n players who would represent your club in the upcoming championship. Naturally, you want to select n players with the highest strengths. You can organize matches between the players to do that. In every match, you pick two players, they play some games, and you learn which one of the two has higher strength. You can wait for the outcome of a match before deciding who will participate in the next one. However, you do not want to know exactly how those n players compare between themselves, as that would make the championship itself less intriguing. More formally, you must reach a state where there is exactly one way to choose n players with the highest strengths that is consistent with the outcomes of the matches you organized, but there must be at least two possible orderings of those n players by strength that are consistent with the outcomes of the matches you organized. InteractionYour program has to process multiple test cases in one run. First, it should read the integer t ( t \u2265 1 ) \u2014 the number of test cases. Then, it should process the test cases one by one. In each test case, your program should start by reading the integer n ( 3 \u2264 n \u2264 100 ) \u2014 the number of players to select out of 2n players. The sum of squares of the values of n over all test cases does not exceed 10 000 . Then your program can organize matches zero or more times. To organize a match, your program should print a match description formatted as ? i j \u2014 a question mark followed by two distinct numbers of players participating in the match. The players are numbered from 1 to 2n , inclusive. Remember to flush the output after printing the match description. Then your program should read the match outcome \u2014 it will be either the greater- than character ( > ) , if the first player in the match description has higher strength, or the less- than character ( < ) , if the second player in the match description has higher strength. Your program can organize at most 4n^ 2 matches. After it is done organizing matches, it should print the exclamation mark ( ! ) and continue to the next test case, or exit gracefully if this was the last test case. Remember to flush the output after printing the exclamation mark. There must be exactly one way to choose n players with the highest strength that is consistent with the outcomes of the matches you organized, but there must be at least two possible orderings of those n players by their strength that are consistent with the outcomes of the matches you organized. The judging program picks some distinct numbers as the strengths of all players before your program starts organizing matches and uses them to answer the requests.",
    "input": " ",
    "output": " ",
    "note": "In the example, the players in the first test case are sorted by strength in decreasing order. From the matches in the example output, we can deduce that players 1, 2, and 3 have the highest strength, but we do not know how the player 1 compares to the player 2.",
    "topics": [
      "brute force",
      "constructive algorithms",
      "implementation",
      "interactive",
      "sortings"
    ]
  },
  {
    "title": "A Game with Traps",
    "url": "https://codeforces.com/problemset/problem/1260/D",
    "history": "You are playing a computer game, where you lead a party of m soldiers. Each soldier is characterised by his agility a_ i . The level you are trying to get through can be represented as a straight line segment from point 0 ( where you and your squad is initially located) to point n + 1 ( where the boss is located) . The level is filled with k traps. Each trap is represented by three numbers l_ i , r_ i and d_ i . l_ i is the location of the trap, and d_ i is the danger level of the trap: whenever a soldier with agility lower than d_ i steps on a trap ( that is, moves to the point l_ i ) , he gets instantly killed. Fortunately, you can disarm traps: if you move to the point r_ i , you disarm this trap, and it no longer poses any danger to your soldiers. Traps don' t affect you, only your soldiers. You have t seconds to complete the level \u2014 that is, to bring some soldiers from your squad to the boss. Before the level starts, you choose which soldiers will be coming with you, and which soldiers won' t be. After that, you have to bring all of the chosen soldiers to the boss. To do so, you may perform the following actions: if your location is x , you may move to x + 1 or x - 1 . This action consumes one second; if your location is x and the location of your squad is x , you may move to x + 1 or to x - 1 with your squad in one second. You may not perform this action if it puts some soldier in danger ( i. e. the point your squad is moving into contains a non- disarmed trap with d_ i greater than agility of some soldier from the squad) . This action consumes one second; if your location is x and there is a trap i with r_ i = x , you may disarm this trap. This action is done instantly ( it consumes no time) . Note that after each action both your coordinate and the coordinate of your squad should be integers. You have to choose the maximum number of soldiers such that they all can be brought from the point 0 to the point n + 1 ( where the boss waits) in no more than t seconds.",
    "input": "The first line contains four integers m , n , k and t ( 1 \u2264 m, n, k, t \u2264 2 \u00b7 10^ 5 , n < t ) \u2014 the number of soldiers, the number of integer points between the squad and the boss, the number of traps and the maximum number of seconds you may spend to bring the squad to the boss, respectively. The second line contains m integers a_ 1 , a_ 2 , . . . , a_ m ( 1 \u2264 a_ i \u2264 2 \u00b7 10^ 5 ) , where a_ i is the agility of the i - th soldier. Then k lines follow, containing the descriptions of traps. Each line contains three numbers l_ i , r_ i and d_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 n , 1 \u2264 d_ i \u2264 2 \u00b7 10^ 5 ) \u2014 the location of the trap, the location where the trap can be disarmed, and its danger level, respectively.",
    "output": "Print one integer \u2014 the maximum number of soldiers you may choose so that you may bring them all to the boss in no more than t seconds.",
    "note": "In the first example you may take soldiers with agility 3 , 4 and 5 with you. The course of action is as follows: go to 2 without your squad; disarm the trap 2 ; go to 3 without your squad; disartm the trap 3 ; go to 0 without your squad; go to 7 with your squad. The whole plan can be executed in 13 seconds.",
    "topics": [
      "binary search",
      "dp",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Yet Another Monster Killing Problem",
    "url": "https://codeforces.com/problemset/problem/1257/D",
    "history": "You play a computer game. In this game, you lead a party of m heroes, and you have to clear a dungeon with n monsters. Each monster is characterized by its power a_ i . Each hero is characterized by his power p_ i and endurance s_ i . The heroes clear the dungeon day by day. In the beginning of each day, you choose a hero ( exactly one) who is going to enter the dungeon this day. When the hero enters the dungeon, he is challenged by the first monster which was not defeated during the previous days ( so, if the heroes have already defeated k monsters, the hero fights with the monster k + 1 ) . When the hero fights the monster, there are two possible outcomes: if the monster' s power is strictly greater than the hero' s power, the hero retreats from the dungeon. The current day ends; otherwise, the monster is defeated. After defeating a monster, the hero either continues fighting with the next monster or leaves the dungeon. He leaves the dungeon either if he has already defeated the number of monsters equal to his endurance during this day ( so, the i - th hero cannot defeat more than s_ i monsters during each day) , or if all monsters are defeated \u2014 otherwise, he fights with the next monster. When the hero leaves the dungeon, the current day ends. Your goal is to defeat the last monster. What is the minimum number of days that you need to achieve your goal? Each day you have to use exactly one hero; it is possible that some heroes don' t fight the monsters at all. Each hero can be used arbitrary number of times.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. Then the test cases follow. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of monsters in the dungeon. The second line contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is the power of the i - th monster. The third line contains one integer m ( 1 \u2264 m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of heroes in your party. Then m lines follow, each describing a hero. Each line contains two integers p_ i and s_ i ( 1 \u2264 p_ i \u2264 10^ 9 , 1 \u2264 s_ i \u2264 n ) \u2014 the power and the endurance of the i - th hero. It is guaranteed that the sum of n + m over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case print one integer \u2014 the minimum number of days you have to spend to defeat all of the monsters ( or - 1 if it is impossible) .",
    "note": " ",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "greedy",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Dominated Subarray",
    "url": "https://codeforces.com/problemset/problem/1257/C",
    "history": "Let' s call an array t dominated by value v in the next situation. At first, array t should have at least 2 elements. Now, let' s calculate number of occurrences of each number num in t and define it as occ( num) . Then t is dominated ( by v ) if ( and only if) occ( v) > occ( v' ) for any other number v' . For example, arrays [ 1, 2, 3, 4, 5, 2] , [ 11, 11] and [ 3, 2, 3, 2, 3] are dominated ( by 2 , 11 and 3 respectevitely) but arrays [ 3] , [ 1, 2] and [ 3, 3, 2, 2, 1] are not. Small remark: since any array can be dominated only by one number, we can not specify this number and just say that array is either dominated or not. You are given array a_ 1, a_ 2, . . . , a_ n . Calculate its shortest dominated subarray or say that there are no such subarrays. The subarray of a is a contiguous part of the array a , i. e. the array a_ i, a_ i + 1, . . . , a_ j for some 1 \u2264 i \u2264 j \u2264 n .",
    "input": "The first line contains single integer T ( 1 \u2264 T \u2264 1000 ) \u2014 the number of test cases. Each test case consists of two lines. The first line contains single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the array a . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 the corresponding values of the array a . It' s guaranteed that the total length of all arrays in one test doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "Print T integers \u2014 one per test case. For each test case print the only integer \u2014 the length of the shortest dominated subarray, or - 1 if there are no such subarrays.",
    "note": "In the first test case, there are no subarrays of length at least 2 , so the answer is - 1 . In the second test case, the whole array is dominated ( by 1 ) and it' s the only dominated subarray. In the third test case, the subarray a_ 4, a_ 5, a_ 6 is the shortest dominated subarray. In the fourth test case, all subarrays of length more than one are dominated.",
    "topics": [
      "greedy",
      "implementation",
      "sortings",
      "strings",
      "two pointers"
    ]
  },
  {
    "title": "Equalizing Two Strings",
    "url": "https://codeforces.com/problemset/problem/1256/F",
    "history": "You are given two strings s and t both of length n and both consisting of lowercase Latin letters. In one move, you can choose any length len from 1 to n and perform the following operation: Choose any contiguous substring of the string s of length len and reverse it; at the same time choose any contiguous substring of the string t of length len and reverse it as well. Note that during one move you reverse exactly one substring of the string s and exactly one substring of the string t . Also note that borders of substrings you reverse in s and in t can be different, the only restriction is that you reverse the substrings of equal length. For example, if len= 3 and n= 5 , you can reverse s[ 1 . . . 3] and t[ 3 . . . 5] , s[ 2 . . . 4] and t[ 2 . . . 4] , but not s[ 1 . . . 3] and t[ 1 . . . 2] . Your task is to say if it is possible to make strings s and t equal after some ( possibly, empty) sequence of moves. You have to answer q independent test cases.",
    "input": "The first line of the input contains one integer q ( 1 \u2264 q \u2264 10^ 4 ) \u2014 the number of test cases. Then q test cases follow. The first line of the test case contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of s and t . The second line of the test case contains one string s consisting of n lowercase Latin letters. The third line of the test case contains one string t consisting of n lowercase Latin letters. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 ( \u2211 n \u2264 2 \u00b7 10^ 5 ) .",
    "output": "For each test case, print the answer on it \u2014 \" YES\" ( without quotes) if it is possible to make strings s and t equal after some ( possibly, empty) sequence of moves and \" NO\" otherwise.",
    "note": " ",
    "topics": [
      "constructive algorithms",
      "sortings",
      "strings"
    ]
  },
  {
    "title": "Yet Another Division Into Teams",
    "url": "https://codeforces.com/problemset/problem/1256/E",
    "history": "There are n students at your university. The programming skill of the i - th student is a_ i . As a coach, you want to divide them into teams to prepare them for the upcoming ICPC finals. Just imagine how good this university is if it has 2 \u00b7 10^ 5 students ready for the finals! Each team should consist of at least three students. Each student should belong to exactly one team. The diversity of a team is the difference between the maximum programming skill of some student that belongs to this team and the minimum programming skill of some student that belongs to this team ( in other words, if the team consists of k students with programming skills a[ i_ 1] , a[ i_ 2] , . . . , a[ i_ k] , then the diversity of this team is max_ j= 1^ k a[ i_ j] - min_ j= 1^ k a[ i_ j] ) . The total diversity is the sum of diversities of all teams formed. Your task is to minimize the total diversity of the division of students and find the optimal way to divide the students.",
    "input": "The first line of the input contains one integer n ( 3 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of students. The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is the programming skill of the i - th student.",
    "output": "In the first line print two integers res and k \u2014 the minimum total diversity of the division of students and the number of teams in your division, correspondingly. In the second line print n integers t_ 1, t_ 2, . . . , t_ n ( 1 \u2264 t_ i \u2264 k ) , where t_ i is the number of team to which the i - th student belong. If there are multiple answers, you can print any. Note that you don' t need to minimize the number of teams. Each team should consist of at least three students.",
    "note": "In the first example, there is only one team with skills [ 1, 1, 2, 3, 4] so the answer is 3 . It can be shown that you cannot achieve a better answer. In the second example, there are two teams with skills [ 1, 2, 5] and [ 12, 13, 15] so the answer is 4 + 3 = 7 . In the third example, there are three teams with skills [ 1, 2, 5] , [ 129, 185, 581, 1041] and [ 1580, 1909, 8150] so the answer is 4 + 912 + 6570 = 7486 .",
    "topics": [
      "dp",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Antenna Coverage",
    "url": "https://codeforces.com/problemset/problem/1253/E",
    "history": "The mayor of the Central Town wants to modernize Central Street, represented in this problem by the ( Ox) axis. On this street, there are n antennas, numbered from 1 to n . The i - th antenna lies on the position x_ i and has an initial scope of s_ i : it covers all integer positions inside the interval [ x_ i - s_ i; x_ i + s_ i] . It is possible to increment the scope of any antenna by 1 , this operation costs 1 coin. We can do this operation as much as we want ( multiple times on the same antenna if we want) . To modernize the street, we need to make all integer positions from 1 to m inclusive covered by at least one antenna. Note that it is authorized to cover positions outside [ 1; m] , even if it' s not required. What is the minimum amount of coins needed to achieve this modernization?",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 80 and n \u2264 m \u2264 100 000 ) . The i - th of the next n lines contains two integers x_ i and s_ i ( 1 \u2264 x_ i \u2264 m and 0 \u2264 s_ i \u2264 m ) . On each position, there is at most one antenna ( values x_ i are pairwise distinct) .",
    "output": "You have to output a single integer: the minimum amount of coins required to make all integer positions from 1 to m inclusive covered by at least one antenna.",
    "note": "In the first example, here is a possible strategy: Increase the scope of the first antenna by 40 , so that it becomes 2 + 40 = 42 . This antenna will cover interval [ 43 - 42; 43 + 42] which is [ 1; 85] Increase the scope of the second antenna by 210 , so that it becomes 4 + 210 = 214 . This antenna will cover interval [ 300 - 214; 300 + 214] , which is [ 86; 514] Increase the scope of the third antenna by 31 , so that it becomes 10 + 31 = 41 . This antenna will cover interval [ 554 - 41; 554 + 41] , which is [ 513; 595] Total cost is 40 + 210 + 31 = 281 . We can prove that it' s the minimum cost required to make all positions from 1 to 595 covered by at least one antenna. Note that positions 513 and 514 are in this solution covered by two different antennas, but it' s not important. \u2014In the second example, the first antenna already covers an interval [ 0; 2] so we have nothing to do. Note that the only position that we needed to cover was position 1 ; positions 0 and 2 are covered, but it' s not important.",
    "topics": [
      "data structures",
      "dp",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Harmonious Graph",
    "url": "https://codeforces.com/problemset/problem/1253/D",
    "history": "You' re given an undirected graph with n nodes and m edges. Nodes are numbered from 1 to n . The graph is considered harmonious if and only if the following property holds: For every triple of integers ( l, m, r) such that 1 \u2264 l < m < r \u2264 n , if there exists a path going from node l to node r , then there exists a path going from node l to node m . In other words, in a harmonious graph, if from a node l we can reach a node r through edges ( l < r ) , then we should able to reach nodes ( l+ 1) , ( l+ 2) , . . . , ( r- 1) too. What is the minimum number of edges we need to add to make the graph harmonious?",
    "input": "The first line contains two integers n and m ( 3 \u2264 n \u2264 200 000 and 1 \u2264 m \u2264 200 000 ) . The i - th of the next m lines contains two integers u_ i and v_ i ( 1 \u2264 u_ i, v_ i \u2264 n , u_ i = \u0338 v_ i ) , that mean that there' s an edge between nodes u and v . It is guaranteed that the given graph is simple ( there is no self- loop, and there is at most one edge between every pair of nodes) .",
    "output": "Print the minimum number of edges we have to add to the graph to make it harmonious.",
    "note": "In the first example, the given graph is not harmonious ( for instance, 1 < 6 < 7 , node 1 can reach node 7 through the path 1 \u2192 2 \u2192 7 , but node 1 can' t reach node 6 ) . However adding the edge ( 2, 4) is sufficient to make it harmonious. In the second example, the given graph is already harmonious.",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Sweets Eating",
    "url": "https://codeforces.com/problemset/problem/1253/C",
    "history": "Tsumugi brought n delicious sweets to the Light Music Club. They are numbered from 1 to n , where the i - th sweet has a sugar concentration described by an integer a_ i . Yui loves sweets, but she can eat at most m sweets each day for health reasons. Days are 1 - indexed ( numbered 1, 2, 3, . . . ) . Eating the sweet i at the d - th day will cause a sugar penalty of ( d \u00b7 a_ i) , as sweets become more sugary with time. A sweet can be eaten at most once. The total sugar penalty will be the sum of the individual penalties of each sweet eaten. Suppose that Yui chooses exactly k sweets, and eats them in any order she wants. What is the minimum total sugar penalty she can get? Since Yui is an undecided girl, she wants you to answer this question for every value of k between 1 and n .",
    "input": "The first line contains two integers n and m ( 1 \u2264 m \u2264 n \u2264 200 000 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 200 000 ) .",
    "output": "You have to output n integers x_ 1, x_ 2, . . . , x_ n on a single line, separed by spaces, where x_ k is the minimum total sugar penalty Yui can get if she eats exactly k sweets.",
    "note": "Let' s analyze the answer for k = 5 in the first example. Here is one of the possible ways to eat 5 sweets that minimize total sugar penalty: Day 1 : sweets 1 and 4 Day 2 : sweets 5 and 3 Day 3 : sweet 6 Total penalty is 1 \u00b7 a_ 1 + 1 \u00b7 a_ 4 + 2 \u00b7 a_ 5 + 2 \u00b7 a_ 3 + 3 \u00b7 a_ 6 = 6 + 4 + 8 + 6 + 6 = 30 . We can prove that it' s the minimum total sugar penalty Yui can achieve if she eats 5 sweets, hence x_ 5 = 30 .",
    "topics": [
      "dp",
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Salary Changing",
    "url": "https://codeforces.com/problemset/problem/1251/D",
    "history": "You are the head of a large enterprise. n people work at you, and n is odd ( i. e. n is not divisible by 2 ) . You have to distribute salaries to your employees. Initially, you have s dollars for it, and the i - th employee should get a salary from l_ i to r_ i dollars. You have to distribute salaries in such a way that the median salary is maximum possible. To find the median of a sequence of odd length, you have to sort it and take the element in the middle position after sorting. For example: the median of the sequence [ 5, 1, 10, 17, 6] is 6 , the median of the sequence [ 1, 2, 1] is 1 . It is guaranteed that you have enough money to pay the minimum salary, i. e l_ 1 + l_ 2 + . . . + l_ n \u2264 s . Note that you don' t have to spend all your s dollars on salaries. You have to answer t test cases.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 5 ) \u2014 the number of test cases. The first line of each query contains two integers n and s ( 1 \u2264 n < 2 \u00b7 10^ 5 , 1 \u2264 s \u2264 2 \u00b7 10^ 14 ) \u2014 the number of employees and the amount of money you have. The value n is not divisible by 2 . The following n lines of each query contain the information about employees. The i - th line contains two integers l_ i and r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 10^ 9 ) . It is guaranteed that the sum of all n over all queries does not exceed 2 \u00b7 10^ 5 . It is also guaranteed that you have enough money to pay the minimum salary to each employee, i. e. \u2211_ i= 1^ n l_ i \u2264 s .",
    "output": "For each test case print one integer \u2014 the maximum median salary that you can obtain.",
    "note": "In the first test case, you can distribute salaries as follows: sal_ 1 = 12, sal_ 2 = 2, sal_ 3 = 11 ( sal_ i is the salary of the i - th employee) . Then the median salary is 11 . In the second test case, you have to pay 1337 dollars to the only employee. In the third test case, you can distribute salaries as follows: sal_ 1 = 4, sal_ 2 = 3, sal_ 3 = 6, sal_ 4 = 6, sal_ 5 = 7 . Then the median salary is 6 .",
    "topics": [
      "binary search",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Too Many Segments (hard version)",
    "url": "https://codeforces.com/problemset/problem/1249/D2",
    "history": "The only difference between easy and hard versions is constraints. You are given n segments on the coordinate axis OX . Segments can intersect, lie inside each other and even coincide. The i - th segment is [ l_ i; r_ i] ( l_ i \u2264 r_ i ) and it covers all integer points j such that l_ i \u2264 j \u2264 r_ i . The integer point is called bad if it is covered by strictly more than k segments. Your task is to remove the minimum number of segments so that there are no bad points at all.",
    "input": "The first line of the input contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of segments and the maximum number of segments by which each integer point can be covered. The next n lines contain segments. The i - th line contains two integers l_ i and r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 2 \u00b7 10^ 5 ) \u2014 the endpoints of the i - th segment.",
    "output": "In the first line print one integer m ( 0 \u2264 m \u2264 n ) \u2014 the minimum number of segments you need to remove so that there are no bad points. In the second line print m distinct integers p_ 1, p_ 2, . . . , p_ m ( 1 \u2264 p_ i \u2264 n ) \u2014 indices of segments you remove in any order. If there are multiple answers, you can print any of them.",
    "note": " ",
    "topics": [
      "data structures",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Grow The Tree",
    "url": "https://codeforces.com/problemset/problem/1248/B",
    "history": "Gardener Alexey teaches competitive programming to high school students. To congratulate Alexey on the Teacher' s Day, the students have gifted him a collection of wooden sticks, where every stick has an integer length. Now Alexey wants to grow a tree from them. The tree looks like a polyline on the plane, consisting of all sticks. The polyline starts at the point ( 0, 0) . While constructing the polyline, Alexey will attach sticks to it one by one in arbitrary order. Each stick must be either vertical or horizontal ( that is, parallel to OX or OY axis) . It is not allowed for two consecutive sticks to be aligned simultaneously horizontally or simultaneously vertically. See the images below for clarification. Alexey wants to make a polyline in such a way that its end is as far as possible from ( 0, 0) . Please help him to grow the tree this way. Note that the polyline defining the form of the tree may have self- intersections and self- touches, but it can be proved that the optimal answer does not contain any self- intersections or self- touches.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 100 000 ) \u2014 the number of sticks Alexey got as a present. The second line contains n integers a_ 1, . . . , a_ n ( 1 \u2264 a_ i \u2264 10 000 ) \u2014 the lengths of the sticks.",
    "output": "Print one integer \u2014 the square of the largest possible distance from ( 0, 0) to the tree end.",
    "note": "The following pictures show optimal trees for example tests. The squared distance in the first example equals 5 \u00b7 5 + 1 \u00b7 1 = 26 , and in the second example 4 \u00b7 4 + 2 \u00b7 2 = 20 .",
    "topics": [
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Minimizing Difference",
    "url": "https://codeforces.com/problemset/problem/1244/E",
    "history": "You are given a sequence a_ 1, a_ 2, . . . , a_ n consisting of n integers. You may perform the following operation on this sequence: choose any element and either increase or decrease it by one. Calculate the minimum possible difference between the maximum element and the minimum element in the sequence, if you can perform the aforementioned operation no more than k times.",
    "input": "The first line contains two integers n and k ( 2 \u2264 n \u2264 10^ 5, 1 \u2264 k \u2264 10^ 14) \u2014 the number of elements in the sequence and the maximum number of times you can perform the operation, respectively. The second line contains a sequence of integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9) .",
    "output": "Print the minimum possible difference between the maximum element and the minimum element in the sequence, if you can perform the aforementioned operation no more than k times.",
    "note": "In the first example you can increase the first element twice and decrease the third element twice, so the sequence becomes [ 3, 3, 5, 5] , and the difference between maximum and minimum is 2 . You still can perform one operation after that, but it' s useless since you can' t make the answer less than 2 . In the second example all elements are already equal, so you may get 0 as the answer even without applying any operations.",
    "topics": [
      "binary search",
      "constructive algorithms",
      "greedy",
      "sortings",
      "ternary search",
      "two pointers"
    ]
  },
  {
    "title": "0-1 MST",
    "url": "https://codeforces.com/problemset/problem/1242/B",
    "history": "Ujan has a lot of useless stuff in his drawers, a considerable part of which are his math notebooks: it is time to sort them out. This time he found an old dusty graph theory notebook with a description of a graph. It is an undirected weighted graph on n vertices. It is a complete graph: each pair of vertices is connected by an edge. The weight of each edge is either 0 or 1 ; exactly m edges have weight 1 , and all others have weight 0 . Since Ujan doesn' t really want to organize his notes, he decided to find the weight of the minimum spanning tree of the graph. ( The weight of a spanning tree is the sum of all its edges. ) Can you find the answer for Ujan so he stops procrastinating?",
    "input": "The first line of the input contains two integers n and m ( 1 \u2264 n \u2264 10^ 5 , 0 \u2264 m \u2264min( n( n- 1) / 2, 10^ 5) ) , the number of vertices and the number of edges of weight 1 in the graph. The i - th of the next m lines contains two integers a_ i and b_ i ( 1 \u2264 a_ i, b_ i \u2264 n , a_ i = \u0338 b_ i ) , the endpoints of the i - th edge of weight 1 . It is guaranteed that no edge appears twice in the input.",
    "output": "Output a single integer, the weight of the minimum spanning tree of the graph.",
    "note": "The graph from the first sample is shown below. Dashed edges have weight 0 , other edges have weight 1 . One of the minimum spanning trees is highlighted in orange and has total weight 2 . In the second sample, all edges have weight 0 so any spanning tree has total weight 0 .",
    "topics": [
      "dfs and similar",
      "dsu",
      "graphs",
      "sortings"
    ]
  },
  {
    "title": "Adilbek and the Watering System",
    "url": "https://codeforces.com/problemset/problem/1238/G",
    "history": "Adilbek has to water his garden. He is going to do it with the help of a complex watering system: he only has to deliver water to it, and the mechanisms will do all the remaining job. The watering system consumes one liter of water per minute ( if there is no water, it is not working) . It can hold no more than c liters. Adilbek has already poured c_ 0 liters of water into the system. He is going to start watering the garden right now and water it for m minutes, and the watering system should contain at least one liter of water at the beginning of the i - th minute ( for every i from 0 to m - 1 ) . Now Adilbek wonders what he will do if the watering system runs out of water. He called n his friends and asked them if they are going to bring some water. The i - th friend answered that he can bring no more than a_ i liters of water; he will arrive at the beginning of the t_ i - th minute and pour all the water he has into the system ( if the system cannot hold such amount of water, the excess water is poured out) ; and then he will ask Adilbek to pay b_ i dollars for each liter of water he has brought. You may assume that if a friend arrives at the beginning of the t_ i - th minute and the system runs out of water at the beginning of the same minute, the friend pours his water fast enough so that the system does not stop working. Of course, Adilbek does not want to pay his friends, but he has to water the garden. So he has to tell his friends how much water should they bring. Formally, Adilbek wants to choose n integers k_ 1 , k_ 2 , . . . , k_ n in such a way that: if each friend i brings exactly k_ i liters of water, then the watering system works during the whole time required to water the garden; the sum \u2211_ i = 1^ n k_ i b_ i is minimum possible. Help Adilbek to determine the minimum amount he has to pay his friends or determine that Adilbek not able to water the garden for m minutes. You have to answer q independent queries.",
    "input": "The first line contains one integer q ( 1 \u2264 q \u2264 5 \u00b7 10^ 5 ) \u2013 the number of queries. The first line of each query contains four integers n, m, c and c_ 0 ( 0 \u2264 n \u2264 5 \u00b7 10^ 5, 2 \u2264 m \u2264 10^ 9, 1 \u2264 c_ 0 \u2264 c \u2264 10^ 9 ) \u2014 the number of friends, the number of minutes of watering, the capacity of the watering system and the number of liters poured by Adilbek. Each of the next n lines contains three integers t_ i, a_ i, b_ i ( 0 < t_ i < m, 1 \u2264 a_ i \u2264 c, 1 \u2264 b_ i \u2264 10^ 9 ) \u2014 the i - th friend' s arrival time, the maximum amount of water i - th friend can bring and the cost of 1 liter from i - th friend. It is guaranteed that sum of all n over all queries does not exceed 5 \u00b7 10^ 5 .",
    "output": "For each query print one integer \u2014 the minimum amount Adilbek has to pay his friends, or - 1 if Adilbek is not able to water the garden for m minutes.",
    "note": " ",
    "topics": [
      "data structures",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Kill `Em All",
    "url": "https://codeforces.com/problemset/problem/1238/B",
    "history": "Ivan plays an old action game called Heretic. He' s stuck on one of the final levels of this game, so he needs some help with killing the monsters. The main part of the level is a large corridor ( so large and narrow that it can be represented as an infinite coordinate line) . The corridor is divided into two parts; let' s assume that the point x = 0 is where these parts meet. The right part of the corridor is filled with n monsters \u2014 for each monster, its initial coordinate x_ i is given ( and since all monsters are in the right part, every x_ i is positive) . The left part of the corridor is filled with crusher traps. If some monster enters the left part of the corridor or the origin ( so, its current coordinate becomes less than or equal to 0 ) , it gets instantly killed by a trap. The main weapon Ivan uses to kill the monsters is the Phoenix Rod. It can launch a missile that explodes upon impact, obliterating every monster caught in the explosion and throwing all other monsters away from the epicenter. Formally, suppose that Ivan launches a missile so that it explodes in the point c . Then every monster is either killed by explosion or pushed away. Let some monster' s current coordinate be y , then: if c = y , then the monster is killed; if y < c , then the monster is pushed r units to the left, so its current coordinate becomes y - r ; if y > c , then the monster is pushed r units to the right, so its current coordinate becomes y + r . Ivan is going to kill the monsters as follows: choose some integer point d and launch a missile into that point, then wait until it explodes and all the monsters which are pushed to the left part of the corridor are killed by crusher traps, then, if at least one monster is still alive, choose another integer point ( probably the one that was already used) and launch a missile there, and so on. What is the minimum number of missiles Ivan has to launch in order to kill all of the monsters? You may assume that every time Ivan fires the Phoenix Rod, he chooses the impact point optimally. You have to answer q independent queries.",
    "input": "The first line contains one integer q ( 1 \u2264 q \u2264 10^ 5 ) \u2014 the number of queries. The first line of each query contains two integers n and r ( 1 \u2264 n, r \u2264 10^ 5 ) \u2014 the number of enemies and the distance that the enemies are thrown away from the epicenter of the explosion. The second line of each query contains n integers x_ i ( 1 \u2264 x_ i \u2264 10^ 5 ) \u2014 the initial positions of the monsters. It is guaranteed that sum of all n over all queries does not exceed 10^ 5 .",
    "output": "For each query print one integer \u2014 the minimum number of shots from the Phoenix Rod required to kill all monsters.",
    "note": "In the first test case, Ivan acts as follows: choose the point 3 , the first monster dies from a crusher trap at the point - 1 , the second monster dies from the explosion, the third monster is pushed to the point 7 ; choose the point 7 , the third monster dies from the explosion. In the second test case, Ivan acts as follows: choose the point 5 , the first and fourth monsters die from the explosion, the second monster is pushed to the point 1 , the third monster is pushed to the point 2 ; choose the point 2 , the first monster dies from a crusher trap at the point 0 , the second monster dies from the explosion.",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Balanced Removals (Harder)",
    "url": "https://codeforces.com/problemset/problem/1237/C2",
    "history": "This is a harder version of the problem. In this version, n \u2264 50 000 . There are n distinct points in three- dimensional space numbered from 1 to n . The i - th point has coordinates ( x_ i, y_ i, z_ i) . The number of points n is even. You' d like to remove all n points using a sequence of n/ 2 snaps. In one snap, you can remove any two points a and b that have not been removed yet and form a perfectly balanced pair. A pair of points a and b is perfectly balanced if no other point c ( that has not been removed yet) lies within the axis- aligned minimum bounding box of points a and b . Formally, point c lies within the axis- aligned minimum bounding box of points a and b if and only if min( x_ a, x_ b) \u2264 x_ c \u2264max( x_ a, x_ b) , min( y_ a, y_ b) \u2264 y_ c \u2264max( y_ a, y_ b) , and min( z_ a, z_ b) \u2264 z_ c \u2264max( z_ a, z_ b) . Note that the bounding box might be degenerate. Find a way to remove all points in n/ 2 snaps.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 50 000 ; n is even) , denoting the number of points. Each of the next n lines contains three integers x_ i , y_ i , z_ i ( - 10^ 8 \u2264 x_ i, y_ i, z_ i \u2264 10^ 8 ) , denoting the coordinates of the i - th point. No two points coincide.",
    "output": "Output n/ 2 pairs of integers a_ i, b_ i ( 1 \u2264 a_ i, b_ i \u2264 n ) , denoting the indices of points removed on snap i . Every integer between 1 and n , inclusive, must appear in your output exactly once. We can show that it is always possible to remove all points. If there are many solutions, output any of them.",
    "note": "In the first example, here is what points and their corresponding bounding boxes look like ( drawn in two dimensions for simplicity, as all points lie on z = 0 plane) . Note that order of removing matters: for example, points 5 and 1 don' t form a perfectly balanced pair initially, but they do after point 3 is removed.",
    "topics": [
      "binary search",
      "constructive algorithms",
      "divide and conquer",
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Balanced Tunnel",
    "url": "https://codeforces.com/problemset/problem/1237/B",
    "history": "Consider a tunnel on a one- way road. During a particular day, n cars numbered from 1 to n entered and exited the tunnel exactly once. All the cars passed through the tunnel at constant speeds. A traffic enforcement camera is mounted at the tunnel entrance. Another traffic enforcement camera is mounted at the tunnel exit. Perfectly balanced. Thanks to the cameras, the order in which the cars entered and exited the tunnel is known. No two cars entered or exited at the same time. Traffic regulations prohibit overtaking inside the tunnel. If car i overtakes any other car j inside the tunnel, car i must be fined. However, each car can be fined at most once. Formally, let' s say that car i definitely overtook car j if car i entered the tunnel later than car j and exited the tunnel earlier than car j . Then, car i must be fined if and only if it definitely overtook at least one other car. Find the number of cars that must be fined.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 10^ 5 ) , denoting the number of cars. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) , denoting the ids of cars in order of entering the tunnel. All a_ i are pairwise distinct. The third line contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 n ) , denoting the ids of cars in order of exiting the tunnel. All b_ i are pairwise distinct.",
    "output": "Output the number of cars to be fined.",
    "note": "The first example is depicted below: Car 2 definitely overtook car 5 , while car 4 definitely overtook cars 1 , 2 , 3 and 5 . Cars 2 and 4 must be fined. In the second example car 5 was definitely overtaken by all other cars. In the third example no car must be fined.",
    "topics": [
      "data structures",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Paint the Tree",
    "url": "https://codeforces.com/problemset/problem/1223/E",
    "history": "You are given a weighted tree consisting of n vertices. Recall that a tree is a connected graph without cycles. Vertices u_ i and v_ i are connected by an edge with weight w_ i . Let' s define the k - coloring of the tree as an assignment of exactly k colors to each vertex, so that each color is used no more than two times. You can assume that you have infinitely many colors available. We say that an edge is saturated in the given k - coloring if its endpoints share at least one color ( i. e. there exists a color that is assigned to both endpoints) . Let' s also define the value of a k - coloring as the sum of weights of saturated edges. Please calculate the maximum possible value of a k - coloring of the given tree. You have to answer q independent queries.",
    "input": "The first line contains one integer q ( 1 \u2264 q \u2264 5 \u00b7 10^ 5 ) \u2013 the number of queries. The first line of each query contains two integers n and k ( 1 \u2264 n, k \u2264 5 \u00b7 10^ 5 ) \u2014 the number of vertices in the tree and the number of colors to assign to each vertex, respectively. Each of the next n - 1 lines describes an edge of the tree. Edge i is denoted by three integers u_ i , v_ i and w_ i ( 1 \u2264 u_ i, v_ i \u2264 n , u_ i v_ i , 1 \u2264 w_ i \u2264 10^ 5 ) \u2014 the labels of vertices it connects and the weight of the edge. It is guaranteed that the given edges form a tree. It is guaranteed that sum of all n over all queries does not exceed 5 \u00b7 10^ 5 .",
    "output": "For each query print one integer \u2014 the maximum value of a k - coloring of the given tree.",
    "note": "The tree corresponding to the first query in the example: One of the possible k - colorings in the first example: ( 1) , ( 1) , ( 2) , ( 2) , then the 1 - st and the 3 - rd edges are saturated and the sum of their weights is 8 . The tree corresponding to the second query in the example: One of the possible k - colorings in the second example: ( 1, 2) , ( 1, 3) , ( 2, 4) , ( 5, 6) , ( 7, 8) , ( 3, 4) , ( 5, 6) , then the 1 - st, 2 - nd, 5 - th and 6 - th edges are saturated and the sum of their weights is 14 .",
    "topics": [
      "dp",
      "sortings",
      "trees"
    ]
  },
  {
    "title": "Choose a Square",
    "url": "https://codeforces.com/problemset/problem/1221/F",
    "history": "Petya recently found a game \" Choose a Square\" . In this game, there are n points numbered from 1 to n on an infinite field. The i - th point has coordinates ( x_ i, y_ i) and cost c_ i . You have to choose a square such that its sides are parallel to coordinate axes, the lower left and upper right corners belong to the line y = x , and all corners have integer coordinates. The score you get is the sum of costs of the points covered by the selected square minus the length of the side of the square. Note that the length of the side can be zero. Petya asks you to calculate the maximum possible score in the game that can be achieved by placing exactly one square.",
    "input": "The first line of the input contains one integer n ( 1 \u2264 n \u2264 5 \u00b7 10^ 5 ) \u2014 the number of points on the field. Each of the following n lines contains three integers x_ i, y_ i, c_ i ( 0 \u2264 x_ i, y_ i \u2264 10^ 9, - 10^ 6 \u2264 c_ i \u2264 10^ 6 ) \u2014 coordinates of the i - th point and its cost, respectively.",
    "output": "In the first line print the maximum score Petya can achieve. In the second line print four integers x_ 1, y_ 1, x_ 2, y_ 2 ( 0 \u2264 x_ 1, y_ 1, x_ 2, y_ 2 \u2264 2 \u00b7 10^ 9, x_ 1 = y_ 1, x_ 2 = y_ 2, x_ 1 \u2264 x_ 2 ) separated by spaces \u2014 the coordinates of the lower left and upper right corners of the square which Petya has to select in order to achieve the maximum score.",
    "note": "The field corresponding to the first example:",
    "topics": [
      "binary search",
      "data structures",
      "sortings"
    ]
  },
  {
    "title": "Cards",
    "url": "https://codeforces.com/problemset/problem/1220/A",
    "history": "When Serezha was three years old, he was given a set of cards with letters for his birthday. They were arranged into words in the way which formed the boy' s mother favorite number in binary notation. Serezha started playing with them immediately and shuffled them because he wasn' t yet able to read. His father decided to rearrange them. Help him restore the original number, on condition that it was the maximum possible one.",
    "input": "The first line contains a single integer n ( 1 \u2a7d n \u2a7d 10^ 5 ) \u2014 the length of the string. The second line contains a string consisting of English lowercase letters: ' z' , ' e' , ' r' , ' o' and ' n' . It is guaranteed that it is possible to rearrange the letters in such a way that they form a sequence of words, each being either \" zero\" which corresponds to the digit 0 or \" one\" which corresponds to the digit 1 .",
    "output": "Print the maximum possible number in binary notation. Print binary digits separated by a space. The leading zeroes are allowed.",
    "note": "In the first example, the correct initial ordering is \" zero\" . In the second example, the correct initial ordering is \" oneonezero\" .",
    "topics": [
      "implementation",
      "sortings",
      "strings"
    ]
  },
  {
    "title": "Shooting",
    "url": "https://codeforces.com/problemset/problem/1216/B",
    "history": "Recently Vasya decided to improve his pistol shooting skills. Today his coach offered him the following exercise. He placed n cans in a row on a table. Cans are numbered from left to right from 1 to n . Vasya has to knock down each can exactly once to finish the exercise. He is allowed to choose the order in which he will knock the cans down. Vasya knows that the durability of the i - th can is a_ i . It means that if Vasya has already knocked x cans down and is now about to start shooting the i - th one, he will need ( a_ i \u00b7 x + 1) shots to knock it down. You can assume that if Vasya starts shooting the i - th can, he will be shooting it until he knocks it down. Your task is to choose such an order of shooting so that the number of shots required to knock each of the n given cans down exactly once is minimum possible.",
    "input": "The first line of the input contains one integer n ( 2 \u2264 n \u2264 1 000) \u2014 the number of cans. The second line of the input contains the sequence a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 1 000) , where a_ i is the durability of the i - th can.",
    "output": "In the first line print the minimum number of shots required to knock each of the n given cans down exactly once. In the second line print the sequence consisting of n distinct integers from 1 to n \u2014 the order of indices of cans that minimizes the number of shots required. If there are several answers, you can print any of them.",
    "note": "In the first example Vasya can start shooting from the first can. He knocks it down with the first shot because he haven' t knocked any other cans down before. After that he has to shoot the third can. To knock it down he shoots 20 \u00b7 1 + 1 = 21 times. After that only second can remains. To knock it down Vasya shoots 10 \u00b7 2 + 1 = 21 times. So the total number of shots is 1 + 21 + 21 = 43 . In the second example the order of shooting does not matter because all cans have the same durability.",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Employment",
    "url": "https://codeforces.com/problemset/problem/1214/F",
    "history": "Two large companies \" Cecsi\" and \" Poca Pola\" are fighting against each other for a long time. In order to overcome their competitor, \" Poca Pola\" started a super secret project, for which it has total n vacancies in all of their offices. After many tests and interviews n candidates were selected and the only thing left was their employment. Because all candidates have the same skills, it doesn' t matter where each of them will work. That is why the company decided to distribute candidates between workplaces so that the total distance between home and workplace over all candidates is minimal. It is well known that Earth is round, so it can be described as a circle, and all m cities on Earth can be described as points on this circle. All cities are enumerated from 1 to m so that for each i ( 1 \u2264 i \u2264 m - 1 ) cities with indexes i and i + 1 are neighbors and cities with indexes 1 and m are neighbors as well. People can move only along the circle. The distance between any two cities equals to minimal number of transitions between neighboring cities you have to perform to get from one city to another. In particular, the distance between the city and itself equals 0 . The \" Poca Pola\" vacancies are located at offices in cities a_ 1, a_ 2, . . . , a_ n . The candidates live in cities b_ 1, b_ 2, . . . , b_ n . It is possible that some vacancies are located in the same cities and some candidates live in the same cities. The \" Poca Pola\" managers are too busy with super secret project, so you were asked to help \" Poca Pola\" to distribute candidates between workplaces, so that the sum of the distance between home and workplace over all candidates is minimum possible.",
    "input": "The first line contains two integers m and n ( 1 \u2264 m \u2264 10^ 9 , 1 \u2264 n \u2264 200 000 ) \u2014 the number of cities on Earth and the number of vacancies. The second line contains n integers a_ 1, a_ 2, a_ 3, . . . , a_ n ( 1 \u2264 a_ i \u2264 m ) \u2014 the cities where vacancies are located. The third line contains n integers b_ 1, b_ 2, b_ 3, . . . , b_ n ( 1 \u2264 b_ i \u2264 m ) \u2014 the cities where the candidates live.",
    "output": "The first line should contain the minimum total distance between home and workplace over all candidates. The second line should contain n different integers from 1 to n . The i - th of them should be the index of candidate that should work at i - th workplace.",
    "note": "In the first example, the distance between each candidate and his workplace equals to 1 ( from 1 to 10 , from 4 to 5 and from 6 to 5 ) . In the second example: The second candidate works at first workplace, the distance between cities 3 and 1 equals to 2 . The third candidate works at second workplace, the distance between cities 6 and 4 equals to 2 . The first candidate works at third workplace, the distance between cities 8 and 8 equals to 0 .",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Petya and Construction Set",
    "url": "https://codeforces.com/problemset/problem/1214/E",
    "history": "It' s Petya' s birthday party and his friends have presented him a brand new \" Electrician- n \" construction set, which they are sure he will enjoy as he always does with weird puzzles they give him. Construction set \" Electrician- n \" consists of 2n - 1 wires and 2n light bulbs. Each bulb has its own unique index that is an integer from 1 to 2n , while all wires look the same and are indistinguishable. In order to complete this construction set one has to use each of the wires to connect two distinct bulbs. We define a chain in a completed construction set as a sequence of distinct bulbs of length at least two, such that every two consecutive bulbs in this sequence are directly connected by a wire. Completed construction set configuration is said to be correct if a resulting network of bulbs and wires has a tree structure, i. e. any two distinct bulbs are the endpoints of some chain. Petya was assembling different configurations for several days, and he noticed that sometimes some of the bulbs turn on. After a series of experiments he came up with a conclusion that bulbs indexed 2i and 2i - 1 turn on if the chain connecting them consists of exactly d_ i wires. Moreover, the following important condition holds: the value of d_ i is never greater than n . Petya did his best but was not able to find a configuration that makes all bulbs to turn on, so he seeks your assistance. Please, find out a configuration that makes all bulbs shine. It is guaranteed that such configuration always exists.",
    "input": "The first line of the input contains a single integer n ( 1 \u2264 n \u2264 100 000 ) \u2014 the parameter of a construction set that defines the number of bulbs and the number of wires. Next line contains n integers d_ 1, d_ 2, . . . , d_ n ( 1 \u2264 d_ i \u2264 n ) , where d_ i stands for the number of wires the chain between bulbs 2i and 2i - 1 should consist of.",
    "output": "Print 2n - 1 lines. The i - th of them should contain two distinct integers a_ i and b_ i ( 1 \u2264 a_ i, b_ i \u2264 2n , a_ i b_ i ) \u2014 indices of bulbs connected by a wire. If there are several possible valid answer you can print any of them.",
    "note": "Answer for the first sample test. Answer for the second sample test.",
    "topics": [
      "constructive algorithms",
      "graphs",
      "math",
      "sortings",
      "trees"
    ]
  },
  {
    "title": "Path Queries",
    "url": "https://codeforces.com/problemset/problem/1213/G",
    "history": "You are given a weighted tree consisting of n vertices. Recall that a tree is a connected graph without cycles. Vertices u_ i and v_ i are connected by an edge with weight w_ i . You are given m queries. The i - th query is given as an integer q_ i . In this query you need to calculate the number of pairs of vertices ( u, v) ( u < v ) such that the maximum weight of an edge on a simple path between u and v doesn' t exceed q_ i .",
    "input": "The first line of the input contains two integers n and m ( 1 \u2264 n, m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of vertices in the tree and the number of queries. Each of the next n - 1 lines describes an edge of the tree. Edge i is denoted by three integers u_ i , v_ i and w_ i \u2014 the labels of vertices it connects ( 1 \u2264 u_ i, v_ i \u2264 n , u_ i v_ i ) and the weight of the edge ( 1 \u2264 w_ i \u2264 2 \u00b7 10^ 5 ) . It is guaranteed that the given edges form a tree. The last line of the input contains m integers q_ 1, q_ 2, . . . , q_ m ( 1 \u2264 q_ i \u2264 2 \u00b7 10^ 5 ) , where q_ i is the maximum weight of an edge in the i - th query.",
    "output": "Print m integers \u2014 the answers to the queries. The i - th value should be equal to the number of pairs of vertices ( u, v) ( u < v ) such that the maximum weight of an edge on a simple path between u and v doesn' t exceed q_ i . Queries are numbered from 1 to m in the order of the input.",
    "note": "The picture shows the tree from the first example:",
    "topics": [
      "divide and conquer",
      "dsu",
      "graphs",
      "sortings",
      "trees"
    ]
  },
  {
    "title": "Equalizing by Division (hard version)",
    "url": "https://codeforces.com/problemset/problem/1213/D2",
    "history": "The only difference between easy and hard versions is the number of elements in the array. You are given an array a consisting of n integers. In one move you can choose any a_ i and divide it by 2 rounding down ( in other words, in one move you can set a_ i : = \u230aa_ i/ 2\u230b ) . You can perform such an operation any ( possibly, zero) number of times with any a_ i . Your task is to calculate the minimum possible number of operations required to obtain at least k equal numbers in the array. Don' t forget that it is possible to have a_ i = 0 after some operations, thus the answer always exists.",
    "input": "The first line of the input contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of elements in the array and the number of equal numbers required. The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 2 \u00b7 10^ 5 ) , where a_ i is the i - th element of a .",
    "output": "Print one integer \u2014 the minimum possible number of operations required to obtain at least k equal numbers in the array.",
    "note": " ",
    "topics": [
      "brute force",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Ice Cream",
    "url": "https://codeforces.com/problemset/problem/1211/C",
    "history": "Summer in Berland lasts n days, the price of one portion of ice cream on the i - th day is c_ i . Over the summer, Tanya wants to eat exactly k portions of ice cream. At the same time, on the i - th day, she decided that she would eat at least a_ i portions, but not more than b_ i ( a_ i \u2264 b_ i ) portions. In other words, let d_ i be equal to the number of portions that she eats on the i - th day. Then d_ 1+ d_ 2+ . . . + d_ n= k and a_ i \u2264 d_ i \u2264 b_ i for each i . Given that portions of ice cream can only be eaten on the day of purchase, find the minimum amount of money that Tanya can spend on ice cream in the summer.",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 2\u00b710^ 5 , 0 \u2264 k \u2264 10^ 9 ) \u2014 the number of days and the total number of servings of ice cream that Tanya will eat in the summer. The following n lines contain descriptions of the days, one description per line. Each description consists of three integers a_ i, b_ i, c_ i ( 0 \u2264 a_ i \u2264 b_ i \u2264 10^ 9 , 1 \u2264 c_ i \u2264 10^ 6 ) .",
    "output": "Print the minimum amount of money that Tanya can spend on ice cream in the summer. If there is no way for Tanya to buy and satisfy all the requirements, then print - 1.",
    "note": "In the first example, Tanya needs to eat 3 portions of ice cream on the first day, 1 portions of ice cream on the second day and 3 portions of ice cream on the third day. In this case, the amount of money spent is 3\u00b76+ 1\u00b74+ 3\u00b73= 31 . It can be shown that any other valid way to eat exactly 7 portions of ice cream costs more.",
    "topics": [
      "*special",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Rotate Columns (hard version)",
    "url": "https://codeforces.com/problemset/problem/1209/E2",
    "history": "This is a harder version of the problem. The difference is only in constraints. You are given a rectangular n \u00d7 m matrix a . In one move you can choose any column and cyclically shift elements in this column. You can perform this operation as many times as you want ( possibly zero) . You can perform this operation to a column multiple times. After you are done with cyclical shifts, you compute for every row the maximal value in it. Suppose that for i - th row it is equal r_ i . What is the maximal possible value of r_ 1+ r_ 2+ . . . + r_ n ?",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 40 ) , the number of test cases in the input. The first line of each test case contains integers n and m ( 1 \u2264 n \u2264 12 , 1 \u2264 m \u2264 2000 ) \u2014 the number of rows and the number of columns in the given matrix a . Each of the following n lines contains m integers, the elements of a ( 1 \u2264 a_ i, j\u2264 10^ 5 ) .",
    "output": "Print t integers: answers for all test cases in the order they are given in the input.",
    "note": "In the first test case you can shift the third column down by one, this way there will be r_ 1 = 5 and r_ 2 = 7 . In the second case you can don' t rotate anything at all, this way there will be r_ 1 = r_ 2 = 10 and r_ 3 = 9 .",
    "topics": [
      "bitmasks",
      "dp",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Rotate Columns (easy version)",
    "url": "https://codeforces.com/problemset/problem/1209/E1",
    "history": "This is an easier version of the next problem. The difference is only in constraints. You are given a rectangular n \u00d7 m matrix a . In one move you can choose any column and cyclically shift elements in this column. You can perform this operation as many times as you want ( possibly zero) . You can perform this operation to a column multiple times. After you are done with cyclical shifts, you compute for every row the maximal value in it. Suppose that for i - th row it is equal r_ i . What is the maximal possible value of r_ 1+ r_ 2+ . . . + r_ n ?",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 40 ) , the number of test cases in the input. The first line of each test case contains integers n and m ( 1 \u2264 n \u2264 4 , 1 \u2264 m \u2264 100 ) \u2014 the number of rows and the number of columns in the given matrix a . Each of the following n lines contains m integers, the elements of a ( 1 \u2264 a_ i, j\u2264 10^ 5 ) .",
    "output": "Print t integers: answers for all test cases in the order they are given in the input.",
    "note": "In the first test case, you can shift the third column down by one, this way there will be r_ 1 = 5 and r_ 2 = 7 . In the second case you can don' t rotate anything at all, this way there will be r_ 1 = r_ 2 = 10 and r_ 3 = 9 .",
    "topics": [
      "bitmasks",
      "brute force",
      "dp",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Choose Two Numbers",
    "url": "https://codeforces.com/problemset/problem/1206/A",
    "history": "You are given an array A , consisting of n positive integers a_ 1, a_ 2, . . . , a_ n , and an array B , consisting of m positive integers b_ 1, b_ 2, . . . , b_ m . Choose some element a of A and some element b of B such that a+ b doesn' t belong to A and doesn' t belong to B . For example, if A = [ 2, 1, 7] and B = [ 1, 3, 4] , we can choose 1 from A and 4 from B , as number 5 = 1 + 4 doesn' t belong to A and doesn' t belong to B . However, we can' t choose 2 from A and 1 from B , as 3 = 2 + 1 belongs to B . It can be shown that such a pair exists. If there are multiple answers, print any. Choose and print any such two numbers.",
    "input": "The first line contains one integer n ( 1\u2264 n \u2264 100 ) \u2014 the number of elements of A . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 200 ) \u2014 the elements of A . The third line contains one integer m ( 1\u2264 m \u2264 100 ) \u2014 the number of elements of B . The fourth line contains m different integers b_ 1, b_ 2, . . . , b_ m ( 1 \u2264 b_ i \u2264 200 ) \u2014 the elements of B . It can be shown that the answer always exists.",
    "output": "Output two numbers a and b such that a belongs to A , b belongs to B , but a+ b doesn' t belong to nor A neither B . If there are multiple answers, print any.",
    "note": "In the first example, we can choose 20 from array [ 20] and 20 from array [ 10, 20] . Number 40 = 20 + 20 doesn' t belong to any of those arrays. However, it is possible to choose 10 from the second array too. In the second example, we can choose 3 from array [ 3, 2, 2] and 1 from array [ 1, 5, 7, 7, 9] . Number 4 = 3 + 1 doesn' t belong to any of those arrays. In the third example, we can choose 1 from array [ 1, 3, 5, 7] and 1 from array [ 7, 5, 3, 1] . Number 2 = 1 + 1 doesn' t belong to any of those arrays.",
    "topics": [
      "math",
      "sortings"
    ]
  },
  {
    "title": "Boxers",
    "url": "https://codeforces.com/problemset/problem/1203/E",
    "history": "There are n boxers, the weight of the i - th boxer is a_ i . Each of them can change the weight by no more than 1 before the competition ( the weight cannot become equal to zero, that is, it must remain positive) . Weight is always an integer number. It is necessary to choose the largest boxing team in terms of the number of people, that all the boxers' weights in the team are different ( i. e. unique) . Write a program that for given current values \u200b a_ i will find the maximum possible number of boxers in a team. It is possible that after some change the weight of some boxer is 150001 ( but no more) .",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 150000 ) \u2014 the number of boxers. The next line contains n integers a_ 1, a_ 2, . . . , a_ n , where a_ i ( 1 \u2264 a_ i \u2264 150000 ) is the weight of the i - th boxer.",
    "output": "Print a single integer \u2014 the maximum possible number of people in a team.",
    "note": "In the first example, boxers should not change their weights \u2014 you can just make a team out of all of them. In the second example, one boxer with a weight of 1 can be increased by one ( get the weight of 2 ) , one boxer with a weight of 4 can be reduced by one, and the other can be increased by one ( resulting the boxers with a weight of 3 and 5 , respectively) . Thus, you can get a team consisting of boxers with weights of 5, 4, 3, 2, 1 .",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Maximum Median",
    "url": "https://codeforces.com/problemset/problem/1201/C",
    "history": "You are given an array a of n integers, where n is odd. You can make the following operation with it: Choose one of the elements of the array ( for example a_ i ) and increase it by 1 ( that is, replace it with a_ i + 1 ) . You want to make the median of the array the largest possible using at most k operations. The median of the odd- sized array is the middle element after the array is sorted in non- decreasing order. For example, the median of the array [ 1, 5, 2, 3, 5] is 3 .",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , n is odd, 1 \u2264 k \u2264 10^ 9 ) \u2014 the number of elements in the array and the largest number of operations you can make. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) .",
    "output": "Print a single integer \u2014 the maximum possible median after the operations.",
    "note": "In the first example, you can increase the second element twice. Than array will be [ 1, 5, 5] and it' s median is 5 . In the second example, it is optimal to increase the second number and than increase third and fifth. This way the answer is 3 . In the third example, you can make four operations: increase first, fourth, sixth, seventh element. This way the array will be [ 5, 1, 2, 5, 3, 5, 5] and the median will be 5 .",
    "topics": [
      "binary search",
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Matching vs  Independent Set",
    "url": "https://codeforces.com/problemset/problem/1198/C",
    "history": "You are given a graph with 3 \u00b7 n vertices and m edges. You are to find a matching of n edges, or an independent set of n vertices. A set of edges is called a matching if no two edges share an endpoint. A set of vertices is called an independent set if no two vertices are connected with an edge.",
    "input": "The first line contains a single integer T \u2265 1 \u2014 the number of graphs you need to process. The description of T graphs follows. The first line of description of a single graph contains two integers n and m , where 3 \u00b7 n is the number of vertices, and m is the number of edges in the graph ( 1 \u2264 n \u2264 10^ 5 , 0 \u2264 m \u2264 5 \u00b7 10^ 5 ) . Each of the next m lines contains two integers v_ i and u_ i ( 1 \u2264 v_ i, u_ i \u2264 3 \u00b7 n ) , meaning that there is an edge between vertices v_ i and u_ i . It is guaranteed that there are no self- loops and no multiple edges in the graph. It is guaranteed that the sum of all n over all graphs in a single test does not exceed 10^ 5 , and the sum of all m over all graphs in a single test does not exceed 5 \u00b7 10^ 5 .",
    "output": "Print your answer for each of the T graphs. Output your answer for a single graph in the following format. If you found a matching of size n , on the first line print \" Matching\" ( without quotes) , and on the second line print n integers \u2014 the indices of the edges in the matching. The edges are numbered from 1 to m in the input order. If you found an independent set of size n , on the first line print \" IndSet\" ( without quotes) , and on the second line print n integers \u2014 the indices of the vertices in the independent set. If there is no matching and no independent set of the specified size, print \" Impossible\" ( without quotes) . You can print edges and vertices in any order. If there are several solutions, print any. In particular, if there are both a matching of size n , and an independent set of size n , then you should print exactly one of such matchings or exactly one of such independent sets.",
    "note": "The first two graphs are same, and there are both a matching of size 1 and an independent set of size 1. Any of these matchings and independent sets is a correct answer. The third graph does not have a matching of size 2, however, there is an independent set of size 2. Moreover, there is an independent set of size 5: 2 3 4 5 6. However such answer is not correct, because you are asked to find an independent set ( or matching) of size exactly n . The fourth graph does not have an independent set of size 2, but there is a matching of size 2.",
    "topics": [
      "constructive algorithms",
      "graphs",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Welfare State",
    "url": "https://codeforces.com/problemset/problem/1198/B",
    "history": "There is a country with n citizens. The i - th of them initially has a_ i money. The government strictly controls the wealth of its citizens. Whenever a citizen makes a purchase or earns some money, they must send a receipt to the social services mentioning the amount of money they currently have. Sometimes the government makes payouts to the poor: all citizens who have strictly less money than x are paid accordingly so that after the payout they have exactly x money. In this case the citizens don' t send a receipt. You know the initial wealth of every citizen and the log of all events: receipts and payouts. Restore the amount of money each citizen has after all events.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the numer of citizens. The next line contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 0 \u2264 a_ i\u2264 10^ 9 ) \u2014 the initial balances of citizens. The next line contains a single integer q ( 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of events. Each of the next q lines contains a single event. The events are given in chronological order. Each event is described as either 1 p x ( 1 \u2264 p \u2264 n , 0 \u2264 x \u2264 10^ 9 ) , or 2 x ( 0 \u2264 x \u2264 10^ 9 ) . In the first case we have a receipt that the balance of the p - th person becomes equal to x . In the second case we have a payoff with parameter x .",
    "output": "Print n integers \u2014 the balances of all citizens after all events.",
    "note": "In the first example the balances change as follows: 1 2 3 4 \u2192 3 3 3 4 \u2192 3 2 3 4 \u2192 3 2 3 4In the second example the balances change as follows: 3 50 2 1 10 \u2192 3 0 2 1 10 \u2192 8 8 8 8 10 \u2192 8 8 20 8 10",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "sortings"
    ]
  },
  {
    "title": "MP3",
    "url": "https://codeforces.com/problemset/problem/1198/A",
    "history": "One common way of digitalizing sound is to record sound intensity at particular time moments. For each time moment intensity is recorded as a non- negative integer. Thus we can represent a sound file as an array of n non- negative integers. If there are exactly K distinct values in the array, then we need k = \u2308log_ 2 K \u2309 bits to store each value. It then takes nk bits to store the whole file. To reduce the memory consumption we need to apply some compression. One common way is to reduce the number of possible intensity values. We choose two integers l \u2264 r , and after that all intensity values are changed in the following way: if the intensity value is within the range [ l; r] , we don' t change it. If it is less than l , we change it to l ; if it is greater than r , we change it to r . You can see that we lose some low and some high intensities. Your task is to apply this compression in such a way that the file fits onto a disk of size I bytes, and the number of changed elements in the array is minimal possible. We remind you that 1 byte contains 8 bits. k = \u2308 log_ 2 K \u2309 is the smallest integer such that K \u2264 2^ k . In particular, if K = 1 , then k = 0 .",
    "input": "The first line contains two integers n and I ( 1 \u2264 n \u2264 4 \u00b7 10^ 5 , 1 \u2264 I \u2264 10^ 8 ) \u2014 the length of the array and the size of the disk in bytes, respectively. The next line contains n integers a_ i ( 0 \u2264 a_ i\u2264 10^ 9 ) \u2014 the array denoting the sound file.",
    "output": "Print a single integer \u2014 the minimal possible number of changed elements.",
    "note": "In the first example we can choose l= 2, r= 3 . The array becomes 2 2 2 3 3 3, the number of distinct elements is K= 2 , and the sound file fits onto the disk. Only two values are changed. In the second example the disk is larger, so the initial file fits it and no changes are required. In the third example we have to change both 1s or both 3s.",
    "topics": [
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Culture Code",
    "url": "https://codeforces.com/problemset/problem/1197/E",
    "history": "There are famous Russian nesting dolls named matryoshkas sold in one of the souvenir stores nearby, and you' d like to buy several of them. The store has n different matryoshkas. Any matryoshka is a figure of volume out_ i with an empty space inside of volume in_ i ( of course, out_ i > in_ i ) . You don' t have much free space inside your bag, but, fortunately, you know that matryoshkas can be nested one inside another. Formally, let' s call a set of matryoshkas nested if we can rearrange dolls in such a way, that the first doll can be nested inside the second one, the second doll \u2014 inside the third one and so on. Matryoshka i can be nested inside matryoshka j if out_ i \u2264 in_ j . So only the last doll will take space inside your bag. Let' s call extra space of a nested set of dolls as a total volume of empty space inside this structure. Obviously, it' s equal to in_ i_ 1 + ( in_ i_ 2 - out_ i_ 1) + ( in_ i_ 3 - out_ i_ 2) + . . . + ( in_ i_ k - out_ i_ k- 1) , where i_ 1 , i_ 2 , . . . , i_ k are the indices of the chosen dolls in the order they are nested in each other. Finally, let' s call a nested subset of the given sequence as big enough if there isn' t any doll from the sequence that can be added to the nested subset without breaking its nested property. You want to buy many matryoshkas, so you should choose a big enough nested subset to buy it. But you will be disappointed if too much space in your bag will be wasted, so you want to choose a big enough subset so that its extra space is minimum possible among all big enough subsets. Now you wonder, how many different nested subsets meet these conditions ( they are big enough, and there is no big enough subset such that its extra space is less than the extra space of the chosen subset) . Two subsets are considered different if there exists at least one index i such that one of the subsets contains the i - th doll, and another subset doesn' t. Since the answer can be large, print it modulo 10^ 9 + 7 .",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of matryoshkas. The next n lines contain a description of each doll: two integers out_ i and in_ i ( 1 \u2264 in_ i < out_ i \u2264 10^ 9 ) \u2014 the outer and inners volumes of the i - th matryoshka.",
    "output": "Print one integer \u2014 the number of big enough nested subsets such that extra space of each of these subsets is minimum possible. Since the answer can be large, print it modulo 10^ 9 + 7 .",
    "note": "There are 6 big enough nested subsets with minimum possible extra space in the example: { 1, 5} : we can' t add any other matryoshka and keep it nested; it' s extra space is 1 ; { 1, 6} ; { 2, 4, 5} ; { 2, 4, 6} ; { 3, 4, 5} ; { 3, 4, 6} . There are no more \" good\" subsets because, for example, subset { 6, 7} is not big enough ( we can add the 4 - th matryoshka to it) or subset { 4, 6, 7} has extra space equal to 2 .",
    "topics": [
      "binary search",
      "combinatorics",
      "data structures",
      "dp",
      "shortest paths",
      "sortings"
    ]
  },
  {
    "title": "Array Splitting",
    "url": "https://codeforces.com/problemset/problem/1197/C",
    "history": "You are given a sorted array a_ 1, a_ 2, . . . , a_ n ( for each index i > 1 condition a_ i \u2265 a_ i- 1 holds) and an integer k . You are asked to divide this array into k non- empty consecutive subarrays. Every element in the array should be included in exactly one subarray. Let max( i) be equal to the maximum in the i - th subarray, and min( i) be equal to the minimum in the i - th subarray. The cost of division is equal to \u2211_ i= 1^ k ( max( i) - min( i) ) . For example, if a = [ 2, 4, 5, 5, 8, 11, 19] and we divide it into 3 subarrays in the following way: [ 2, 4] , [ 5, 5] , [ 8, 11, 19] , then the cost of division is equal to ( 4 - 2) + ( 5 - 5) + ( 19 - 8) = 13 . Calculate the minimum cost you can obtain by dividing the array a into k non- empty consecutive subarrays.",
    "input": "The first line contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 3 \u00b7 10^ 5 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 , a_ i \u2265 a_ i- 1 ) .",
    "output": "Print the minimum cost you can obtain by dividing the array a into k nonempty consecutive subarrays.",
    "note": "In the first test we can divide array a in the following way: [ 4, 8, 15, 16] , [ 23] , [ 42] .",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "DIY Wooden Ladder",
    "url": "https://codeforces.com/problemset/problem/1197/A",
    "history": "Let' s denote a k - step ladder as the following structure: exactly k + 2 wooden planks, of which two planks of length at least k+ 1 \u2014 the base of the ladder; k planks of length at least 1 \u2014 the steps of the ladder; Note that neither the base planks, nor the steps planks are required to be equal. For example, ladders 1 and 3 are correct 2 - step ladders and ladder 2 is a correct 1 - step ladder. On the first picture the lengths of planks are [ 3, 3] for the base and [ 1] for the step. On the second picture lengths are [ 3, 3] for the base and [ 2] for the step. On the third picture lengths are [ 3, 4] for the base and [ 2, 3] for the steps. You have n planks. The length of the i - th planks is a_ i . You don' t have a saw, so you can' t cut the planks you have. Though you have a hammer and nails, so you can assemble the improvised \" ladder\" from the planks. The question is: what is the maximum number k such that you can choose some subset of the given planks and assemble a k - step ladder using them?",
    "input": "The first line contains a single integer T ( 1 \u2264 T \u2264 100 ) \u2014 the number of queries. The queries are independent. Each query consists of two lines. The first line contains a single integer n ( 2 \u2264 n \u2264 10^ 5 ) \u2014 the number of planks you have. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 5 ) \u2014 the lengths of the corresponding planks. It' s guaranteed that the total number of planks from all queries doesn' t exceed 10^ 5 .",
    "output": "Print T integers \u2014 one per query. The i - th integer is the maximum number k , such that you can choose some subset of the planks given in the i - th query and assemble a k - step ladder using them. Print 0 if you can' t make even 1 - step ladder from the given set of planks.",
    "note": "Examples for the queries 1- 3 are shown at the image in the legend section. The Russian meme to express the quality of the ladders:",
    "topics": [
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "K-th Path",
    "url": "https://codeforces.com/problemset/problem/1196/F",
    "history": "You are given a connected undirected weighted graph consisting of n vertices and m edges. You need to print the k - th smallest shortest path in this graph ( paths from the vertex to itself are not counted, paths from i to j and from j to i are counted as one) . More formally, if d is the matrix of shortest paths, where d_ i, j is the length of the shortest path between vertices i and j ( 1 \u2264 i < j \u2264 n ) , then you need to print the k - th element in the sorted array consisting of all d_ i, j , where 1 \u2264 i < j \u2264 n .",
    "input": "The first line of the input contains three integers n, m and k ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 , n - 1 \u2264 m \u2264min( n( n- 1) / 2, 2 \u00b7 10^ 5) , 1 \u2264 k \u2264min( n( n- 1) / 2, 400) \u2014 the number of vertices in the graph, the number of edges in the graph and the value of k , correspondingly. Then m lines follow, each containing three integers x , y and w ( 1 \u2264 x, y \u2264 n , 1 \u2264 w \u2264 10^ 9 , x y ) denoting an edge between vertices x and y of weight w . It is guaranteed that the given graph is connected ( there is a path between any pair of vertices) , there are no self- loops ( edges connecting the vertex with itself) and multiple edges ( for each pair of vertices x and y , there is at most one edge between this pair of vertices in the graph) .",
    "output": "Print one integer \u2014 the length of the k - th smallest shortest path in the given graph ( paths from the vertex to itself are not counted, paths from i to j and from j to i are counted as one) .",
    "note": " ",
    "topics": [
      "brute force",
      "constructive algorithms",
      "shortest paths",
      "sortings"
    ]
  },
  {
    "title": "Geometers Anonymous Club",
    "url": "https://codeforces.com/problemset/problem/1195/F",
    "history": "Denis holds a Geometers Anonymous Club meeting in SIS. He has prepared n convex polygons numbered from 1 to n for the club. He plans to offer members of the club to calculate Minkowski sums of these polygons. More precisely, he plans to give q tasks, the i - th of them asks to calculate the sum of Minkowski of polygons with indices from l_ i to r_ i inclusive. The sum of Minkowski of two sets A and B is the set C = { a + b : a \u2208 A, b \u2208 B} . It can be proven that if A and B are convex polygons then C will also be a convex polygon. Sum of two convex polygons To calculate the sum of Minkowski of p polygons ( p > 2 ) , you need to calculate the sum of Minkowski of the first p - 1 polygons, and then calculate the sum of Minkowski of the resulting polygon and the p - th polygon. For the convenience of checking answers, Denis has decided to prepare and calculate the number of vertices in the sum of Minkowski for each task he prepared. Help him to do it.",
    "input": "The first line of the input contains one integer n \u2014 the number of convex polygons Denis prepared ( 1 \u2264 n \u2264 100 000 ) . Then n convex polygons follow. The description of the i - th polygon starts with one integer k_ i \u2014 the number of vertices in the i - th polygon ( 3 \u2264 k_ i ) . The next k_ i lines contain two integers x_ ij , y_ ij each \u2014 coordinates of vertices of the i - th polygon in counterclockwise order ( | x_ ij| , | y_ ij| \u2264 10 ^ 9 ) . It is guaranteed, that there are no three consecutive vertices lying on the same line. The total number of vertices over all polygons does not exceed 300 000 . The following line contains one integer q \u2014 the number of tasks ( 1 \u2264 q \u2264 100 000 ) . The next q lines contain descriptions of tasks. Description of the i - th task contains two integers l_ i and r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 n ) .",
    "output": "For each task print a single integer \u2014 the number of vertices in the sum of Minkowski of polygons with indices from l_ i to r_ i .",
    "note": "Description of the example: First, second and third polygons from the example Minkowski sums of the first and second, the second and third and all polygons correspondingly",
    "topics": [
      "data structures",
      "geometry",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Count The Rectangles",
    "url": "https://codeforces.com/problemset/problem/1194/E",
    "history": "There are n segments drawn on a plane; the i - th segment connects two points ( x_ i, 1 , y_ i, 1 ) and ( x_ i, 2 , y_ i, 2 ) . Each segment is non- degenerate, and is either horizontal or vertical \u2014 formally, for every i \u2208 [ 1, n] either x_ i, 1 = x_ i, 2 or y_ i, 1 = y_ i, 2 ( but only one of these conditions holds) . Only segments of different types may intersect: no pair of horizontal segments shares any common points, and no pair of vertical segments shares any common points. We say that four segments having indices h_ 1 , h_ 2 , v_ 1 and v_ 2 such that h_ 1 < h_ 2 and v_ 1 < v_ 2 form a rectangle if the following conditions hold: segments h_ 1 and h_ 2 are horizontal; segments v_ 1 and v_ 2 are vertical; segment h_ 1 intersects with segment v_ 1 ; segment h_ 2 intersects with segment v_ 1 ; segment h_ 1 intersects with segment v_ 2 ; segment h_ 2 intersects with segment v_ 2 . Please calculate the number of ways to choose four segments so they form a rectangle. Note that the conditions h_ 1 < h_ 2 and v_ 1 < v_ 2 should hold.",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 5000 ) \u2014 the number of segments. Then n lines follow. The i - th line contains four integers x_ i, 1 , y_ i, 1 , x_ i, 2 and y_ i, 2 denoting the endpoints of the i - th segment. All coordinates of the endpoints are in the range [ - 5000, 5000] . It is guaranteed that each segment is non- degenerate and is either horizontal or vertical. Furthermore, if two segments share a common point, one of these segments is horizontal, and another one is vertical.",
    "output": "Print one integer \u2014 the number of ways to choose four segments so they form a rectangle.",
    "note": "The following pictures represent sample cases:",
    "topics": [
      "bitmasks",
      "brute force",
      "data structures",
      "geometry",
      "sortings"
    ]
  },
  {
    "title": "Tokitsukaze and Strange Rectangle",
    "url": "https://codeforces.com/problemset/problem/1190/D",
    "history": "There are n points on the plane, the i - th of which is at ( x_ i, y_ i) . Tokitsukaze wants to draw a strange rectangular area and pick all the points in the area. The strange area is enclosed by three lines, x = l , y = a and x = r , as its left side, its bottom side and its right side respectively, where l , r and a can be any real numbers satisfying that l < r . The upper side of the area is boundless, which you can regard as a line parallel to the x - axis at infinity. The following figure shows a strange rectangular area. A point ( x_ i, y_ i) is in the strange rectangular area if and only if l < x_ i < r and y_ i > a . For example, in the above figure, p_ 1 is in the area while p_ 2 is not. Tokitsukaze wants to know how many different non- empty sets she can obtain by picking all the points in a strange rectangular area, where we think two sets are different if there exists at least one point in one set of them but not in the other.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2 \u00d7 10^ 5 ) \u2014 the number of points on the plane. The i - th of the next n lines contains two integers x_ i , y_ i ( 1 \u2264 x_ i, y_ i \u2264 10^ 9 ) \u2014 the coordinates of the i - th point. All points are distinct.",
    "output": "Print a single integer \u2014 the number of different non- empty sets of points she can obtain.",
    "note": "For the first example, there is exactly one set having k points for k = 1, 2, 3 , so the total number is 3 . For the second example, the numbers of sets having k points for k = 1, 2, 3 are 3 , 2 , 1 respectively, and their sum is 6 . For the third example, as the following figure shows, there are 2 sets having one point; 3 sets having two points; 1 set having four points. Therefore, the number of different non- empty sets in this example is 2 + 3 + 0 + 1 = 6 .",
    "topics": [
      "data structures",
      "divide and conquer",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Number Circle",
    "url": "https://codeforces.com/problemset/problem/1189/B",
    "history": "You are given n numbers a_ 1, a_ 2, . . . , a_ n . Is it possible to arrange them in a circle in such a way that every number is strictly less than the sum of its neighbors? For example, for the array [ 1, 4, 5, 6, 7, 8] , the arrangement on the left is valid, while arrangement on the right is not, as 5\u2265 4 + 1 and 8> 1 + 6 .",
    "input": "The first line contains a single integer n ( 3\u2264 n \u2264 10^ 5 ) \u2014 the number of numbers. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the numbers. The given numbers are not necessarily distinct ( i. e. duplicates are allowed) .",
    "output": "If there is no solution, output \" NO\" in the first line. If there is a solution, output \" YES\" in the first line. In the second line output n numbers \u2014 elements of the array in the order they will stay in the circle. The first and the last element you output are considered neighbors in the circle. If there are multiple solutions, output any of them. You can print the circle starting with any element.",
    "note": "One of the possible arrangements is shown in the first example: 4< 2 + 3 ; 2 < 4 + 3 ; 3< 4 + 2 . One of the possible arrangements is shown in the second example. No matter how we arrange 13, 8, 5 in a circle in the third example, 13 will have 8 and 5 as neighbors, but 13\u2265 8 + 5 . There is no solution in the fourth example.",
    "topics": [
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Subarray Sorting",
    "url": "https://codeforces.com/problemset/problem/1187/D",
    "history": "You are given an array a_ 1, a_ 2, . . . , a_ n and an array b_ 1, b_ 2, . . . , b_ n . For one operation you can sort in non- decreasing order any subarray a[ l . . . r] of the array a . For example, if a = [ 4, 2, 2, 1, 3, 1] and you choose subbarray a[ 2 . . . 5] , then the array turns into [ 4, 1, 2, 2, 3, 1] . You are asked to determine whether it is possible to obtain the array b by applying this operation any number of times ( possibly zero) to the array a .",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 3 \u00b7 10^ 5 ) \u2014 the number of queries. The first line of each query contains one integer n ( 1 \u2264 n \u2264 3 \u00b7 10^ 5 ) . The second line of each query contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) . The third line of each query contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 n ) . It is guaranteed that \u2211 n \u2264 3 \u00b7 10^ 5 over all queries in a test.",
    "output": "For each query print YES ( in any letter case) if it is possible to obtain an array b and NO ( in any letter case) otherwise.",
    "note": "In first test case the can sort subarray a_ 1 . . . a_ 5 , then a will turn into [ 1, 1, 4, 4, 7, 5, 6] , and then sort subarray a_ 5 . . . a_ 6 .",
    "topics": [
      "data structures",
      "sortings"
    ]
  },
  {
    "title": "Exam in BerSU (easy version)",
    "url": "https://codeforces.com/problemset/problem/1185/C1",
    "history": "The only difference between easy and hard versions is constraints. A session has begun at Beland State University. Many students are taking exams. Polygraph Poligrafovich is going to examine a group of n students. Students will take the exam one- by- one in order from 1 - th to n - th. Rules of the exam are following: The i - th student randomly chooses a ticket. if this ticket is too hard to the student, he doesn' t answer and goes home immediately ( this process is so fast that it' s considered no time elapses) . This student fails the exam. if the student finds the ticket easy, he spends exactly t_ i minutes to pass the exam. After it, he immediately gets a mark and goes home. Students take the exam in the fixed order, one- by- one, without any interruption. At any moment of time, Polygraph Poligrafovich takes the answer from one student. The duration of the whole exam for all students is M minutes ( max t_ i \u2264 M ) , so students at the end of the list have a greater possibility to run out of time to pass the exam. For each student i , you should count the minimum possible number of students who need to fail the exam so the i - th student has enough time to pass the exam. For each student i , find the answer independently. That is, if when finding the answer for the student i_ 1 some student j should leave, then while finding the answer for i_ 2 ( i_ 2> i_ 1 ) the student j student does not have to go home.",
    "input": "The first line of the input contains two integers n and M ( 1 \u2264 n \u2264 100 , 1 \u2264 M \u2264 100 ) \u2014 the number of students and the total duration of the exam in minutes, respectively. The second line of the input contains n integers t_ i ( 1 \u2264 t_ i \u2264 100 ) \u2014 time in minutes that i - th student spends to answer to a ticket. It' s guaranteed that all values of t_ i are not greater than M .",
    "output": "Print n numbers: the i - th number must be equal to the minimum number of students who have to leave the exam in order to i - th student has enough time to pass the exam.",
    "note": "The explanation for the example 1. Please note that the sum of the first five exam times does not exceed M= 15 ( the sum is 1+ 2+ 3+ 4+ 5= 15 ) . Thus, the first five students can pass the exam even if all the students before them also pass the exam. In other words, the first five numbers in the answer are 0 . In order for the 6 - th student to pass the exam, it is necessary that at least 2 students must fail it before ( for example, the 3 - rd and 4 - th, then the 6 - th will finish its exam in 1+ 2+ 5+ 6= 14 minutes, which does not exceed M ) . In order for the 7 - th student to pass the exam, it is necessary that at least 3 students must fail it before ( for example, the 2 - nd, 5 - th and 6 - th, then the 7 - th will finish its exam in 1+ 3+ 4+ 7= 15 minutes, which does not exceed M ) .",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "The Doctor Meets Vader (Medium)",
    "url": "https://codeforces.com/problemset/problem/1184/B2",
    "history": "Thanks to the Doctor' s help, the rebels managed to steal enough gold to launch a full- scale attack on the Empire! However, Darth Vader is looking for revenge and wants to take back his gold. The rebels have hidden the gold in various bases throughout the galaxy. Darth Vader and the Empire are looking to send out their spaceships to attack these bases. The galaxy can be represented as an undirected graph with n planets ( nodes) and m wormholes ( edges) , each connecting two planets. A total of s empire spaceships and b rebel bases are located at different planets in the galaxy. Each spaceship is given a location x , denoting the index of the planet on which it is located, an attacking strength a , and a certain amount of fuel f . Each base is given a location x , and a defensive strength d . A spaceship can attack a base if both of these conditions hold: the spaceship' s attacking strength is greater or equal than the defensive strength of the base the spaceship' s fuel is greater or equal to the shortest distance, computed as the number of wormholes, between the spaceship' s planet and the base' s planet Vader is very particular about his attacking formations. He requires that each spaceship is to attack at most one base and that each base is to be attacked by at most one spaceship. Vader knows that the rebels have hidden k gold in each base, so he will assign the spaceships to attack bases in such a way that maximizes the number of bases attacked. Therefore, for each base that is attacked, the rebels lose k gold. However, the rebels have the ability to create any number of dummy bases. With the Doctor' s help, these bases would exist beyond space and time, so all spaceship can reach them and attack them. Moreover, a dummy base is designed to seem irresistible: that is, it will always be attacked by some spaceship. Of course, dummy bases do not contain any gold, but creating such a dummy base costs h gold. What is the minimum gold the rebels can lose if they create an optimal number of dummy bases?",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 100 , 0 \u2264 m \u2264 10000 ) , the number of nodes and the number of edges, respectively. The next m lines contain two integers u and v ( 1 \u2264 u , v \u2264 n ) denoting an undirected edge between the two nodes. The next line contains four integers s , b , k and h ( 1 \u2264 s , b \u2264 1000 , 0 \u2264 k , h \u2264 10^ 9 ) , the number of spaceships, the number of bases, the cost of having a base attacked, and the cost of creating a dummy base, respectively. The next s lines contain three integers x , a , f ( 1 \u2264 x \u2264 n , 0 \u2264 a , f \u2264 10^ 9 ) , denoting the location, attack, and fuel of the spaceship. The next b lines contain two integers x , d ( 1 \u2264 x \u2264 n , 0 \u2264 d \u2264 10^ 9 ) , denoting the location and defence of the base.",
    "output": "Print a single integer, the minimum cost in terms of gold.",
    "note": "One way to minimize the cost is to build 4 dummy bases, for a total cost of 4 \u00d7 3 = 12 . One empire spaceship will be assigned to attack each of these dummy bases, resulting in zero actual bases attacked.",
    "topics": [
      "flows",
      "graph matchings",
      "graphs",
      "shortest paths",
      "sortings"
    ]
  },
  {
    "title": "The Doctor Meets Vader (Easy)",
    "url": "https://codeforces.com/problemset/problem/1184/B1",
    "history": "Heidi and Doctor Who hopped out of the TARDIS and found themselves at EPFL in 2018. They were surrounded by stormtroopers and Darth Vader was approaching. Miraculously, they managed to escape to a nearby rebel base but the Doctor was very confused. Heidi reminded him that last year' s HC2 theme was Star Wars. Now he understood, and he' s ready to face the evils of the Empire! The rebels have s spaceships, each with a certain attacking power a . They want to send their spaceships to destroy the empire bases and steal enough gold and supplies in order to keep the rebellion alive. The empire has b bases, each with a certain defensive power d , and a certain amount of gold g . A spaceship can attack all the bases which have a defensive power less than or equal to its attacking power. If a spaceship attacks a base, it steals all the gold in that base. The rebels are still undecided which spaceship to send out first, so they asked for the Doctor' s help. They would like to know, for each spaceship, the maximum amount of gold it can steal.",
    "input": "The first line contains integers s and b ( 1 \u2264 s, b \u2264 10^ 5 ) , the number of spaceships and the number of bases, respectively. The second line contains s integers a ( 0 \u2264 a \u2264 10^ 9 ) , the attacking power of each spaceship. The next b lines contain integers d, g ( 0 \u2264 d \u2264 10^ 9 , 0 \u2264 g \u2264 10^ 4 ) , the defensive power and the gold of each base, respectively.",
    "output": "Print s integers, the maximum amount of gold each spaceship can steal, in the same order as the spaceships are given in the input.",
    "note": "The first spaceship can only attack the first base. The second spaceship can attack the first and third bases. The third spaceship can attack the first, second and third bases.",
    "topics": [
      "binary search",
      "sortings"
    ]
  },
  {
    "title": "Candy Box (hard version)",
    "url": "https://codeforces.com/problemset/problem/1183/G",
    "history": "This problem is a version of problem D from the same contest with some additional constraints and tasks. There are n candies in a candy box. The type of the i - th candy is a_ i ( 1 \u2264 a_ i \u2264 n ) . You have to prepare a gift using some of these candies with the following restriction: the numbers of candies of each type presented in a gift should be all distinct ( i. e. for example, a gift having two candies of type 1 and two candies of type 2 is bad) . It is possible that multiple types of candies are completely absent from the gift. It is also possible that not all candies of some types will be taken to a gift. You really like some of the candies and don' t want to include them into the gift, but you want to eat them yourself instead. For each candy, a number f_ i is given, which is equal to 0 if you really want to keep i - th candy for yourself, or 1 if you don' t mind including it into your gift. It is possible that two candies of the same type have different values of f_ i . You want your gift to be as large as possible, but you don' t want to include too many of the candies you want to eat into the gift. So, you want to calculate the maximum possible number of candies that can be included into a gift, and among all ways to choose maximum number of candies, you want to maximize the number of candies having f_ i = 1 in your gift. You have to answer q independent queries. If you are Python programmer, consider using PyPy instead of Python when you submit your code.",
    "input": "The first line of the input contains one integer q ( 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of queries. The first line of each query contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of candies. Then n lines follow, each containing two integers a_ i and f_ i ( 1 \u2264 a_ i \u2264 n , 0 \u2264 f_ i \u2264 1 ) , where a_ i is the type of the i - th candy, and f_ i denotes whether you want to keep the i - th candy for yourself ( 0 if you want to keep it, 1 if you don' t mind giving it away) . It is guaranteed that the sum of n over all queries does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each query print two integers: the maximum number of candies in a gift you can compose, according to the constraints in the statement; the maximum number of candies having f_ i = 1 in a gift you can compose that contains the maximum possible number of candies.",
    "note": "In the first query, you can include two candies of type 4 and one candy of type 5 . All of them have f_ i = 1 and you don' t mind giving them away as part of the gift.",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Topforces Strikes Back",
    "url": "https://codeforces.com/problemset/problem/1183/F",
    "history": "One important contest will take place on the most famous programming platform ( Topforces) very soon! The authors have a pool of n problems and should choose at most three of them into this contest. The prettiness of the i - th problem is a_ i . The authors have to compose the most pretty contest ( in other words, the cumulative prettinesses of chosen problems should be maximum possible) . But there is one important thing in the contest preparation: because of some superstitions of authors, the prettinesses of problems cannot divide each other. In other words, if the prettinesses of chosen problems are x, y, z , then x should be divisible by neither y , nor z , y should be divisible by neither x , nor z and z should be divisible by neither x , nor y . If the prettinesses of chosen problems are x and y then neither x should be divisible by y nor y should be divisible by x . Any contest composed from one problem is considered good. Your task is to find out the maximum possible total prettiness of the contest composed of at most three problems from the given pool. You have to answer q independent queries. If you are Python programmer, consider using PyPy instead of Python when you submit your code.",
    "input": "The first line of the input contains one integer q ( 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of queries. The first line of the query contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of problems. The second line of the query contains n integers a_ 1, a_ 2, . . . , a_ n ( 2 \u2264 a_ i \u2264 2 \u00b7 10^ 5 ) , where a_ i is the prettiness of the i - th problem. It is guaranteed that the sum of n over all queries does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each query print one integer \u2014 the maximum possible cumulative prettiness of the contest composed of at most three problems from the given pool of problems in the query.",
    "note": " ",
    "topics": [
      "brute force",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Candy Box (easy version)",
    "url": "https://codeforces.com/problemset/problem/1183/D",
    "history": "This problem is actually a subproblem of problem G from the same contest. There are n candies in a candy box. The type of the i - th candy is a_ i ( 1 \u2264 a_ i \u2264 n ) . You have to prepare a gift using some of these candies with the following restriction: the numbers of candies of each type presented in a gift should be all distinct ( i. e. for example, a gift having two candies of type 1 and two candies of type 2 is bad) . It is possible that multiple types of candies are completely absent from the gift. It is also possible that not all candies of some types will be taken to a gift. Your task is to find out the maximum possible size of the single gift you can prepare using the candies you have. You have to answer q independent queries. If you are Python programmer, consider using PyPy instead of Python when you submit your code.",
    "input": "The first line of the input contains one integer q ( 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of queries. Each query is represented by two lines. The first line of each query contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of candies. The second line of each query contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) , where a_ i is the type of the i - th candy in the box. It is guaranteed that the sum of n over all queries does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each query print one integer \u2014 the maximum possible size of the single gift you can compose using candies you got in this query with the restriction described in the problem statement.",
    "note": "In the first query, you can prepare a gift with two candies of type 8 and one candy of type 5 , totalling to 3 candies. Note that this is not the only possible solution \u2014 taking two candies of type 4 and one candy of type 6 is also valid.",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "A Story of One Country (Hard)",
    "url": "https://codeforces.com/problemset/problem/1181/E2",
    "history": "This problem differs from the previous problem only in constraints. Petya decided to visit Byteland during the summer holidays. It turned out that the history of this country is quite unusual. Initially, there were n different countries on the land that is now Berland. Each country had its own territory that was represented as a rectangle on the map. The sides of the rectangle were parallel to the axes, and the corners were located at points with integer coordinates. Territories of no two countries intersected, but it was possible that some territories touched each other. As time passed, sometimes two countries merged into one. It only happened if the union of their territories was also a rectangle. In the end only one country remained \u2014 Byteland. Initially, each country had a rectangular castle inside its territory. Its sides were parallel to the axes and its corners had integer coordinates. Some castles might touch the border of the corresponding country and sides or other castles. Miraculously, after all the unions the castles are still intact. Unfortunately, their locations are the only information we have to restore the initial territories of the countries. The possible formation of Byteland. The castles are shown in blue. Petya wonders why no information about the initial countries remained. He suspected that the whole story is a fake. You were recommended to him as a smart person. Please check whether or not there exists a possible set of initial territories that could make the story true.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 100 000 ) \u2014 the number of countries and castles. Each of the next n lines contains four integers a_ i, b_ i, c_ i, d_ i ( 0 \u2264 a_ i < c_ i \u2264 10^ 9 , 0 \u2264 b_ i < d_ i \u2264 10^ 9 ) \u2014 the coordinates of the i - th castle, where ( a_ i, b_ i) are the coordinates of the lower left corner and ( c_ i, d_ i) are the coordinates of the upper right corner. It is guaranteed that no two castles intersect, however, they may touch.",
    "output": "If there exists a possible set of territories that satisfies the story, print \" YES\" , otherwise print \" NO\" . You can print each letter in any case ( upper or lower) .",
    "note": "The castles in the first and second examples are shown on the pictures below.",
    "topics": [
      "brute force",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "A Story of One Country (Easy)",
    "url": "https://codeforces.com/problemset/problem/1181/E1",
    "history": "This problem differs from the next problem only in constraints. Petya decided to visit Byteland during the summer holidays. It turned out that the history of this country is quite unusual. Initially, there were n different countries on the land that is now Berland. Each country had its own territory that was represented as a rectangle on the map. The sides of the rectangle were parallel to the axes, and the corners were located at points with integer coordinates. Territories of no two countries intersected, but it was possible that some territories touched each other. As time passed, sometimes two countries merged into one. It only happened if the union of their territories was also a rectangle. In the end only one country remained \u2014 Byteland. Initially, each country had a rectangular castle inside its territory. Its sides were parallel to the axes and its corners had integer coordinates. Some castles might touch the border of the corresponding country and sides or other castles. Miraculously, after all the unions the castles are still intact. Unfortunately, their locations are the only information we have to restore the initial territories of the countries. The possible formation of Byteland. The castles are shown in blue. Petya wonders why no information about the initial countries remained. He suspected that the whole story is a fake. You were recommended to him as a smart person. Please check whether or not there exists a possible set of initial territories that could make the story true.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 1000 ) \u2014 the number of countries and castles. Each of the next n lines contains four integers a_ i, b_ i, c_ i, d_ i ( 0 \u2264 a_ i < c_ i \u2264 10^ 9 , 0 \u2264 b_ i < d_ i \u2264 10^ 9 ) \u2014 the coordinates of the i - th castle, where ( a_ i, b_ i) are the coordinates of the lower left corner and ( c_ i, d_ i) are the coordinates of the upper right corner. It is guaranteed, that no two castles intersect, however, they may touch.",
    "output": "If there exists a possible set of territories that satisfies the story, print \" YES\" , otherwise print \" NO\" . You can print each letter in any case ( upper or lower) .",
    "note": "The castles in the first and second examples are shown on the pictures below.",
    "topics": [
      "brute force",
      "divide and conquer",
      "sortings"
    ]
  },
  {
    "title": "Irrigation",
    "url": "https://codeforces.com/problemset/problem/1181/D",
    "history": "Misha was interested in water delivery from childhood. That' s why his mother sent him to the annual Innovative Olympiad in Irrigation ( IOI) . Pupils from all Berland compete there demonstrating their skills in watering. It is extremely expensive to host such an olympiad, so after the first n olympiads the organizers introduced the following rule of the host city selection. The host cities of the olympiads are selected in the following way. There are m cities in Berland wishing to host the olympiad, they are numbered from 1 to m . The host city of each next olympiad is determined as the city that hosted the olympiad the smallest number of times before. If there are several such cities, the city with the smallest index is selected among them. Misha' s mother is interested where the olympiad will be held in some specific years. The only information she knows is the above selection rule and the host cities of the first n olympiads. Help her and if you succeed, she will ask Misha to avoid flooding your house.",
    "input": "The first line contains three integers n , m and q ( 1 \u2264 n, m, q \u2264 500 000 ) \u2014 the number of olympiads before the rule was introduced, the number of cities in Berland wishing to host the olympiad, and the number of years Misha' s mother is interested in, respectively. The next line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 m ) , where a_ i denotes the city which hosted the olympiad in the i - th year. Note that before the rule was introduced the host city was chosen arbitrarily. Each of the next q lines contains an integer k_ i ( n + 1 \u2264 k_ i \u2264 10^ 18 ) \u2014 the year number Misha' s mother is interested in host city in.",
    "output": "Print q integers. The i - th of them should be the city the olympiad will be hosted in the year k_ i .",
    "note": "In the first example Misha' s mother is interested in the first 10 years after the rule was introduced. The host cities these years are 4, 3, 4, 2, 3, 4, 1, 2, 3, 4. In the second example the host cities after the new city is introduced are 2, 3, 1, 2, 3, 5, 1, 2, 3, 4, 5, 1.",
    "topics": [
      "binary search",
      "data structures",
      "implementation",
      "sortings",
      "trees",
      "two pointers"
    ]
  },
  {
    "title": "Destroy it!",
    "url": "https://codeforces.com/problemset/problem/1176/F",
    "history": "You are playing a computer card game called Splay the Sire. Currently you are struggling to defeat the final boss of the game. The boss battle consists of n turns. During each turn, you will get several cards. Each card has two parameters: its cost c_ i and damage d_ i . You may play some of your cards during each turn in some sequence ( you choose the cards and the exact order they are played) , as long as the total cost of the cards you play during the turn does not exceed 3 . After playing some ( possibly zero) cards, you end your turn, and all cards you didn' t play are discarded. Note that you can use each card at most once. Your character has also found an artifact that boosts the damage of some of your actions: every 10 - th card you play deals double damage. What is the maximum possible damage you can deal during n turns?",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of turns. Then n blocks of input follow, the i - th block representing the cards you get during the i - th turn. Each block begins with a line containing one integer k_ i ( 1 \u2264 k_ i \u2264 2 \u00b7 10^ 5 ) \u2014 the number of cards you get during i - th turn. Then k_ i lines follow, each containing two integers c_ j and d_ j ( 1 \u2264 c_ j \u2264 3 , 1 \u2264 d_ j \u2264 10^ 9 ) \u2014 the parameters of the corresponding card. It is guaranteed that \u2211_ i = 1^ n k_ i \u2264 2 \u00b7 10^ 5 .",
    "output": "Print one integer \u2014 the maximum damage you may deal.",
    "note": "In the example test the best course of action is as follows: During the first turn, play all three cards in any order and deal 18 damage. During the second turn, play both cards and deal 7 damage. During the third turn, play the first and the third card and deal 13 damage. During the fourth turn, play the first and the third card and deal 25 damage. During the fifth turn, play the only card, which will deal double damage ( 200 ) .",
    "topics": [
      "dp",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Recover it!",
    "url": "https://codeforces.com/problemset/problem/1176/D",
    "history": "Authors guessed an array a consisting of n integers; each integer is not less than 2 and not greater than 2 \u00b7 10^ 5 . You don' t know the array a , but you know the array b which is formed from it with the following sequence of operations: Firstly, let the array b be equal to the array a ; Secondly, for each i from 1 to n : if a_ i is a prime number, then one integer p_ a_ i is appended to array b , where p is an infinite sequence of prime numbers ( 2, 3, 5, . . . ) ; otherwise ( if a_ i is not a prime number) , the greatest divisor of a_ i which is not equal to a_ i is appended to b ; Then the obtained array of length 2n is shuffled and given to you in the input. Here p_ a_ i means the a_ i - th prime number. The first prime p_ 1 = 2 , the second one is p_ 2 = 3 , and so on. Your task is to recover any suitable array a that forms the given array b . It is guaranteed that the answer exists ( so the array b is obtained from some suitable array a ) . If there are multiple answers, you can print any.",
    "input": "The first line of the input contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of elements in a . The second line of the input contains 2n integers b_ 1, b_ 2, . . . , b_ 2n ( 2 \u2264 b_ i \u2264 2750131 ) , where b_ i is the i - th element of b . 2750131 is the 199999 - th prime number.",
    "output": "In the only line of the output print n integers a_ 1, a_ 2, . . . , a_ n ( 2 \u2264 a_ i \u2264 2 \u00b7 10^ 5 ) in any order \u2014 the array a from which the array b can be obtained using the sequence of moves given in the problem statement. If there are multiple answers, you can print any.",
    "note": " ",
    "topics": [
      "dfs and similar",
      "graphs",
      "greedy",
      "number theory",
      "sortings"
    ]
  },
  {
    "title": "Array Splitting",
    "url": "https://codeforces.com/problemset/problem/1175/D",
    "history": "You are given an array a_ 1, a_ 2, . . . , a_ n and an integer k . You are asked to divide this array into k non- empty consecutive subarrays. Every element in the array should be included in exactly one subarray. Let f( i) be the index of subarray the i - th element belongs to. Subarrays are numbered from left to right and from 1 to k . Let the cost of division be equal to \u2211_ i= 1^ n ( a_ i \u00b7 f( i) ) . For example, if a = [ 1, - 2, - 3, 4, - 5, 6, - 7] and we divide it into 3 subbarays in the following way: [ 1, - 2, - 3] , [ 4, - 5] , [ 6, - 7] , then the cost of division is equal to 1 \u00b7 1 - 2 \u00b7 1 - 3 \u00b7 1 + 4 \u00b7 2 - 5 \u00b7 2 + 6 \u00b7 3 - 7 \u00b7 3 = - 9 . Calculate the maximum cost you can obtain by dividing the array a into k non- empty consecutive subarrays.",
    "input": "The first line contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 3 \u00b7 10^ 5 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( | a_ i| \u2264 10^ 6 ) .",
    "output": "Print the maximum cost you can obtain by dividing the array a into k nonempty consecutive subarrays.",
    "note": " ",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Ehab Is an Odd Person",
    "url": "https://codeforces.com/problemset/problem/1174/B",
    "history": "You' re given an array a of length n . You can perform the following operation on it as many times as you want: Pick two integers i and j ( 1 \u2264 i, j \u2264 n) such that a_ i+ a_ j is odd, then swap a_ i and a_ j . What is lexicographically the smallest array you can obtain? An array x is lexicographically smaller than an array y if there exists an index i such that x_ i< y_ i , and x_ j= y_ j for all 1 \u2264 j < i . Less formally, at the first index i in which they differ, x_ i< y_ i",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of elements in the array a . The second line contains n space- separated integers a_ 1 , a_ 2 , . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the elements of the array a .",
    "output": "The only line contains n space- separated integers, the lexicographically smallest array you can obtain.",
    "note": "In the first example, we can swap 1 and 4 since 1+ 4= 5 , which is odd.",
    "topics": [
      "sortings"
    ]
  },
  {
    "title": "Ehab Fails to Be Thanos",
    "url": "https://codeforces.com/problemset/problem/1174/A",
    "history": "You' re given an array a of length 2n . Is it possible to reorder it in such way so that the sum of the first n elements isn' t equal to the sum of the last n elements?",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 1000 ) , where 2n is the number of elements in the array a . The second line contains 2n space- separated integers a_ 1 , a_ 2 , . . . , a_ 2n ( 1 \u2264 a_ i \u2264 10^ 6 ) \u2014 the elements of the array a .",
    "output": "If there' s no solution, print \" - 1\" ( without quotes) . Otherwise, print a single line containing 2n space- separated integers. They must form a reordering of a . You are allowed to not change the order.",
    "note": "In the first example, the first n elements have sum 2+ 1+ 3= 6 while the last n elements have sum 1+ 1+ 2= 4 . The sums aren' t equal. In the second example, there' s no solution.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Scalar Queries",
    "url": "https://codeforces.com/problemset/problem/1167/F",
    "history": "You are given an array a_ 1, a_ 2, . . . , a_ n . All a_ i are pairwise distinct. Let' s define function f( l, r) as follows: let' s define array b_ 1, b_ 2, . . . , b_ r - l + 1 , where b_ i = a_ l - 1 + i ; sort array b in increasing order; result of the function f( l, r) is \u2211_ i = 1^ r - l + 1b_ i \u00b7 i . Calculate ( \u2211_ 1 \u2264 l \u2264 r \u2264 nf( l, r) ) ( 10^ 9+ 7) , i. e. total sum of f for all subsegments of a modulo 10^ 9+ 7 .",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 5 \u00b7 10^ 5 ) \u2014 the length of array a . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 , a_ i = \u0338 a_ j for i = \u0338 j ) \u2014 array a .",
    "output": "Print one integer \u2014 the total sum of f for all subsegments of a modulo 10^ 9+ 7",
    "note": "Description of the first example: f( 1, 1) = 5 \u00b7 1 = 5 ; f( 1, 2) = 2 \u00b7 1 + 5 \u00b7 2 = 12 ; f( 1, 3) = 2 \u00b7 1 + 4 \u00b7 2 + 5 \u00b7 3 = 25 ; f( 1, 4) = 2 \u00b7 1 + 4 \u00b7 2 + 5 \u00b7 3 + 7 \u00b7 4 = 53 ; f( 2, 2) = 2 \u00b7 1 = 2 ; f( 2, 3) = 2 \u00b7 1 + 4 \u00b7 2 = 10 ; f( 2, 4) = 2 \u00b7 1 + 4 \u00b7 2 + 7 \u00b7 3 = 31 ; f( 3, 3) = 4 \u00b7 1 = 4 ; f( 3, 4) = 4 \u00b7 1 + 7 \u00b7 2 = 18 ; f( 4, 4) = 7 \u00b7 1 = 7 ;",
    "topics": [
      "combinatorics",
      "data structures",
      "math",
      "sortings"
    ]
  },
  {
    "title": "A Tale of Two Lands",
    "url": "https://codeforces.com/problemset/problem/1166/C",
    "history": "The legend of the foundation of Vectorland talks of two integers x and y . Centuries ago, the array king placed two markers at points | x| and | y| on the number line and conquered all the land in between ( including the endpoints) , which he declared to be Arrayland. Many years later, the vector king placed markers at points | x - y| and | x + y| and conquered all the land in between ( including the endpoints) , which he declared to be Vectorland. He did so in such a way that the land of Arrayland was completely inside ( including the endpoints) the land of Vectorland. Here | z| denotes the absolute value of z . Now, Jose is stuck on a question of his history exam: \" What are the values of x and y ? \" Jose doesn' t know the answer, but he believes he has narrowed the possible answers down to n integers a_ 1, a_ 2, . . . , a_ n . Now, he wants to know the number of unordered pairs formed by two different elements from these n integers such that the legend could be true if x and y were equal to these two values. Note that it is possible that Jose is wrong, and that no pairs could possibly make the legend true.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of choices. The second line contains n pairwise distinct integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) \u2014 the choices Jose is considering.",
    "output": "Print a single integer number \u2014 the number of unordered pairs { x, y} formed by different numbers from Jose' s choices that could make the legend true.",
    "note": "Consider the first sample. For the pair { 2, 5} , the situation looks as follows, with the Arrayland markers at | 2| = 2 and | 5| = 5 , while the Vectorland markers are located at | 2 - 5| = 3 and | 2 + 5| = 7 : The legend is not true in this case, because the interval [ 2, 3] is not conquered by Vectorland. For the pair { 5, - 3} the situation looks as follows, with Arrayland consisting of the interval [ 3, 5] and Vectorland consisting of the interval [ 2, 8] : As Vectorland completely contains Arrayland, the legend is true. It can also be shown that the legend is true for the pair { 2, - 3} , for a total of two pairs. In the second sample, the only pair is { 3, 6} , and the situation looks as follows: Note that even though Arrayland and Vectorland share 3 as endpoint, we still consider Arrayland to be completely inside of Vectorland.",
    "topics": [
      "binary search",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Two Arrays and Sum of Functions",
    "url": "https://codeforces.com/problemset/problem/1165/E",
    "history": "You are given two arrays a and b , both of length n . Let' s define a function f( l, r) = \u2211_ l \u2264 i \u2264 r a_ i \u00b7 b_ i . Your task is to reorder the elements ( choose an arbitrary order of elements) of the array b to minimize the value of \u2211_ 1 \u2264 l \u2264 r \u2264 n f( l, r) . Since the answer can be very large, you have to print it modulo 998244353 . Note that you should minimize the answer but not its remainder.",
    "input": "The first line of the input contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of elements in a and b . The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 6 ) , where a_ i is the i - th element of a . The third line of the input contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ j \u2264 10^ 6 ) , where b_ j is the j - th element of b .",
    "output": "Print one integer \u2014 the minimum possible value of \u2211_ 1 \u2264 l \u2264 r \u2264 n f( l, r) after rearranging elements of b , taken modulo 998244353 . Note that you should minimize the answer but not its remainder.",
    "note": " ",
    "topics": [
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Polycarp Training",
    "url": "https://codeforces.com/problemset/problem/1165/B",
    "history": "Polycarp wants to train before another programming competition. During the first day of his training he should solve exactly 1 problem, during the second day \u2014 exactly 2 problems, during the third day \u2014 exactly 3 problems, and so on. During the k - th day he should solve k problems. Polycarp has a list of n contests, the i - th contest consists of a_ i problems. During each day Polycarp has to choose exactly one of the contests he didn' t solve yet and solve it. He solves exactly k problems from this contest. Other problems are discarded from it. If there are no contests consisting of at least k problems that Polycarp didn' t solve yet during the k - th day, then Polycarp stops his training. How many days Polycarp can train if he chooses the contests optimally?",
    "input": "The first line of the input contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of contests. The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 2 \u00b7 10^ 5 ) \u2014 the number of problems in the i - th contest.",
    "output": "Print one integer \u2014 the maximum number of days Polycarp can train if he chooses the contests optimally.",
    "note": " ",
    "topics": [
      "data structures",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Permutation recovery",
    "url": "https://codeforces.com/problemset/problem/1158/C",
    "history": "Vasya has written some permutation p_ 1, p_ 2, . . . , p_ n of integers from 1 to n , so for all 1 \u2264 i \u2264 n it is true that 1 \u2264 p_ i \u2264 n and all p_ 1, p_ 2, . . . , p_ n are different. After that he wrote n numbers next_ 1, next_ 2, . . . , next_ n . The number next_ i is equal to the minimal index i < j \u2264 n , such that p_ j > p_ i . If there is no such j let' s let' s define as next_ i = n + 1 . In the evening Vasya went home from school and due to rain, his notebook got wet. Now it is impossible to read some written numbers. Permutation and some values next_ i are completely lost! If for some i the value next_ i is lost, let' s say that next_ i = - 1 . You are given numbers next_ 1, next_ 2, . . . , next_ n ( maybe some of them are equal to - 1 ) . Help Vasya to find such permutation p_ 1, p_ 2, . . . , p_ n of integers from 1 to n , that he can write it to the notebook and all numbers next_ i , which are not equal to - 1 , will be correct.",
    "input": "The first line contains one integer t \u2014 the number of test cases ( 1 \u2264 t \u2264 100 000 ) . Next 2 \u00b7 t lines contains the description of test cases, two lines for each. The first line contains one integer n \u2014 the length of the permutation, written by Vasya ( 1 \u2264 n \u2264 500 000 ) . The second line contains n integers next_ 1, next_ 2, . . . , next_ n , separated by spaces ( next_ i = - 1 or i < next_ i \u2264 n + 1 ) . It is guaranteed, that the sum of n in all test cases doesn' t exceed 500 000 . In hacks you can only use one test case, so T = 1 .",
    "output": "Print T lines, in i - th of them answer to the i - th test case. If there is no such permutations p_ 1, p_ 2, . . . , p_ n of integers from 1 to n , that Vasya could write, print the only number - 1 . In the other case print n different integers p_ 1, p_ 2, . . . , p_ n , separated by spaces ( 1 \u2264 p_ i \u2264 n ) . All defined values of next_ i which are not equal to - 1 should be computed correctly p_ 1, p_ 2, . . . , p_ n using defenition given in the statement of the problem. If there exists more than one solution you can find any of them.",
    "note": "In the first test case for permutation p = [ 1, 2, 3] Vasya should write next = [ 2, 3, 4] , because each number in permutation is less than next. It' s easy to see, that it is the only satisfying permutation. In the third test case, any permutation can be the answer because all numbers next_ i are lost. In the fourth test case, there is no satisfying permutation, so the answer is - 1 .",
    "topics": [
      "constructive algorithms",
      "data structures",
      "dfs and similar",
      "graphs",
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "The Party and Sweets",
    "url": "https://codeforces.com/problemset/problem/1158/A",
    "history": "n boys and m girls came to the party. Each boy presented each girl some integer number of sweets ( possibly zero) . All boys are numbered with integers from 1 to n and all girls are numbered with integers from 1 to m . For all 1 \u2264 i \u2264 n the minimal number of sweets, which i - th boy presented to some girl is equal to b_ i and for all 1 \u2264 j \u2264 m the maximal number of sweets, which j - th girl received from some boy is equal to g_ j . More formally, let a_ i, j be the number of sweets which the i - th boy give to the j - th girl. Then b_ i is equal exactly to the minimum among values a_ i, 1, a_ i, 2, . . . , a_ i, m and g_ j is equal exactly to the maximum among values b_ 1, j, b_ 2, j, . . . , b_ n, j . You are interested in the minimum total number of sweets that boys could present, so you need to minimize the sum of a_ i, j for all ( i, j) such that 1 \u2264 i \u2264 n and 1 \u2264 j \u2264 m . You are given the numbers b_ 1, . . . , b_ n and g_ 1, . . . , g_ m , determine this number.",
    "input": "The first line contains two integers n and m , separated with space \u2014 the number of boys and girls, respectively ( 2 \u2264 n, m \u2264 100 000 ) . The second line contains n integers b_ 1, . . . , b_ n , separated by spaces \u2014 b_ i is equal to the minimal number of sweets, which i - th boy presented to some girl ( 0 \u2264 b_ i \u2264 10^ 8 ) . The third line contains m integers g_ 1, . . . , g_ m , separated by spaces \u2014 g_ j is equal to the maximal number of sweets, which j - th girl received from some boy ( 0 \u2264 g_ j \u2264 10^ 8 ) .",
    "output": "If the described situation is impossible, print - 1 . In another case, print the minimal total number of sweets, which boys could have presented and all conditions could have satisfied.",
    "note": "In the first test, the minimal total number of sweets, which boys could have presented is equal to 12 . This can be possible, for example, if the first boy presented 1 and 4 sweets, the second boy presented 3 and 2 sweets and the third boy presented 1 and 1 sweets for the first and the second girl, respectively. It' s easy to see, that all conditions are satisfied and the total number of sweets is equal to 12 . In the second test, the boys couldn' t have presented sweets in such way, that all statements satisfied. In the third test, the minimal total number of sweets, which boys could have presented is equal to 4 . This can be possible, for example, if the first boy presented 1 , 1 , 2 sweets for the first, second, third girl, respectively and the second boy didn' t present sweets for each girl. It' s easy to see, that all conditions are satisfied and the total number of sweets is equal to 4 .",
    "topics": [
      "binary search",
      "constructive algorithms",
      "greedy",
      "implementation",
      "math",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Match Points",
    "url": "https://codeforces.com/problemset/problem/1156/C",
    "history": "You are given a set of points x_ 1 , x_ 2 , . . . , x_ n on the number line. Two points i and j can be matched with each other if the following conditions hold: neither i nor j is matched with any other point; | x_ i - x_ j| \u2265 z . What is the maximum number of pairs of points you can match with each other?",
    "input": "The first line contains two integers n and z ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 z \u2264 10^ 9 ) \u2014 the number of points and the constraint on the distance between matched points, respectively. The second line contains n integers x_ 1 , x_ 2 , . . . , x_ n ( 1 \u2264 x_ i \u2264 10^ 9 ) .",
    "output": "Print one integer \u2014 the maximum number of pairs of points you can match with each other.",
    "note": "In the first example, you may match point 1 with point 2 ( | 3 - 1| \u2265 2 ) , and point 3 with point 4 ( | 7 - 3| \u2265 2 ) . In the second example, you may match point 1 with point 3 ( | 5 - 10| \u2265 5 ) .",
    "topics": [
      "binary search",
      "greedy",
      "sortings",
      "ternary search",
      "two pointers"
    ]
  },
  {
    "title": "Ugly Pairs",
    "url": "https://codeforces.com/problemset/problem/1156/B",
    "history": "You are given a string, consisting of lowercase Latin letters. A pair of neighbouring letters in a string is considered ugly if these letters are also neighbouring in a alphabet. For example, string \" abaca\" contains ugly pairs at positions ( 1, 2) \u2014 \" ab\" and ( 2, 3) \u2014 \" ba\" . Letters ' a' and ' z' aren' t considered neighbouring in a alphabet. Can you rearrange the letters of a given string so that there are no ugly pairs? You can choose any order of the letters of the given string but you can' t add any new letters or remove the existing ones. You can also leave the order the same. If there are multiple answers, print any of them. You also have to answer T separate queries.",
    "input": "The first line contains a single integer T ( 1 \u2264 T \u2264 100 ) \u2014 the number of queries. Each of the next T lines contains string s ( 1 \u2264 | s| \u2264 100) \u2014 the string for the next query. It is guaranteed that it contains only lowercase Latin letters. Note that in hacks you have to set T = 1 .",
    "output": "Print T lines. The i - th line should contain the answer to the i - th query. If the answer for the i - th query exists, then print such a rearrangment of letters of the given string that it contains no ugly pairs. You can choose any order of the letters of the given string but you can' t add any new letters or remove the existing ones. You can also leave the order the same. If there are multiple answers, print any of them. Otherwise print \" No answer\" for that query.",
    "note": "In the first example answer \" bdac\" is also correct. The second example showcases the fact that only neighbouring in alphabet letters are not allowed. The same letter is ok. There are lots of valid answers for the third example.",
    "topics": [
      "dfs and similar",
      "greedy",
      "implementation",
      "sortings",
      "strings"
    ]
  },
  {
    "title": "Reverse a Substring",
    "url": "https://codeforces.com/problemset/problem/1155/A",
    "history": "You are given a string s consisting of n lowercase Latin letters. Let' s define a substring as a contiguous subsegment of a string. For example, \" acab\" is a substring of \" abacaba\" ( it starts in position 3 and ends in position 6 ) , but \" aa\" or \" d\" aren' t substrings of this string. So the substring of the string s from position l to position r is s[ l; r] = s_ l s_ l + 1. . . s_ r . You have to choose exactly one of the substrings of the given string and reverse it ( i. e. make s[ l; r] = s_ r s_ r - 1. . . s_ l ) to obtain a string that is less lexicographically. Note that it is not necessary to obtain the minimum possible string. If it is impossible to reverse some substring of the given string to obtain a string that is less, print \" NO\" . Otherwise print \" YES\" and any suitable substring. String x is lexicographically less than string y , if either x is a prefix of y ( and x y ) , or there exists such i ( 1 \u2264 i \u2264 min( | x| , | y| ) ) , that x_ i < y_ i , and for any j ( 1 \u2264 j < i ) x_ j = y_ j . Here | a| denotes the length of the string a . The lexicographic comparison of strings is implemented by operator < in modern programming languages\u200b\u200b.",
    "input": "The first line of the input contains one integer n ( 2 \u2264 n \u2264 3 \u00b7 10^ 5 ) \u2014 the length of s . The second line of the input contains the string s of length n consisting only of lowercase Latin letters.",
    "output": "If it is impossible to reverse some substring of the given string to obtain a string which is lexicographically less, print \" NO\" . Otherwise print \" YES\" and two indices l and r ( 1 \u2264 l < r \u2264 n ) denoting the substring you have to reverse. If there are multiple answers, you can print any.",
    "note": "In the first testcase the resulting string is \" aacabba\" .",
    "topics": [
      "implementation",
      "sortings",
      "strings"
    ]
  },
  {
    "title": "Shovels Shop",
    "url": "https://codeforces.com/problemset/problem/1154/F",
    "history": "There are n shovels in the nearby shop. The i - th shovel costs a_ i bourles. Misha has to buy exactly k shovels. Each shovel can be bought no more than once. Misha can buy shovels by several purchases. During one purchase he can choose any subset of remaining ( non- bought) shovels and buy this subset. There are also m special offers in the shop. The j - th of them is given as a pair ( x_ j, y_ j) , and it means that if Misha buys exactly x_ j shovels during one purchase then y_ j most cheapest of them are for free ( i. e. he will not pay for y_ j most cheapest shovels during the current purchase) . Misha can use any offer any ( possibly, zero) number of times, but he cannot use more than one offer during one purchase ( but he can buy shovels without using any offers) . Your task is to calculate the minimum cost of buying k shovels, if Misha buys them optimally.",
    "input": "The first line of the input contains three integers n, m and k ( 1 \u2264 n, m \u2264 2 \u00b7 10^ 5, 1 \u2264 k \u2264 min( n, 2000) ) \u2014 the number of shovels in the shop, the number of special offers and the number of shovels Misha has to buy, correspondingly. The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 2 \u00b7 10^ 5 ) , where a_ i is the cost of the i - th shovel. The next m lines contain special offers. The j - th of them is given as a pair of integers ( x_ i, y_ i) ( 1 \u2264 y_ i \u2264 x_ i \u2264 n ) and means that if Misha buys exactly x_ i shovels during some purchase, then he can take y_ i most cheapest of them for free.",
    "output": "Print one integer \u2014 the minimum cost of buying k shovels if Misha buys them optimally.",
    "note": "In the first example Misha can buy shovels on positions 1 and 4 ( both with costs 2 ) during the first purchase and get one of them for free using the first or the third special offer. And then he can buy shovels on positions 3 and 6 ( with costs 4 and 3 ) during the second purchase and get the second one for free using the first or the third special offer. Then he can buy the shovel on a position 7 with cost 1 . So the total cost is 4 + 2 + 1 = 7 . In the second example Misha can buy shovels on positions 1 , 2 , 3 , 4 and 8 ( costs are 6 , 8 , 5 , 1 and 2 ) and get three cheapest ( with costs 5 , 1 and 2 ) for free. And then he can buy shovels on positions 6 , 7 and 9 ( all with costs 1 ) without using any special offers. So the total cost is 6 + 8 + 1 + 1 + 1 = 17 . In the third example Misha can buy four cheapest shovels without using any special offers and get the total cost 17 .",
    "topics": [
      "dp",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Two Teams",
    "url": "https://codeforces.com/problemset/problem/1154/E",
    "history": "There are n students standing in a row. Two coaches are forming two teams \u2014 the first coach chooses the first team and the second coach chooses the second team. The i - th student has integer programming skill a_ i . All programming skills are distinct and between 1 and n , inclusive. Firstly, the first coach will choose the student with maximum programming skill among all students not taken into any team, and k closest students to the left of him and k closest students to the right of him ( if there are less than k students to the left or to the right, all of them will be chosen) . All students that are chosen leave the row and join the first team. Secondly, the second coach will make the same move ( but all students chosen by him join the second team) . Then again the first coach will make such move, and so on. This repeats until the row becomes empty ( i. e. the process ends when each student becomes to some team) . Your problem is to determine which students will be taken into the first team and which students will be taken into the second team.",
    "input": "The first line of the input contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of students and the value determining the range of chosen students during each move, respectively. The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) , where a_ i is the programming skill of the i - th student. It is guaranteed that all programming skills are distinct.",
    "output": "Print a string of n characters; i - th character should be 1 if i - th student joins the first team, or 2 otherwise.",
    "note": "In the first example the first coach chooses the student on a position 3 , and the row becomes empty ( all students join the first team) . In the second example the first coach chooses the student on position 4 , and the row becomes [ 2, 1] ( students with programming skills [ 3, 4, 5] join the first team) . Then the second coach chooses the student on position 1 , and the row becomes empty ( and students with programming skills [ 1, 2] join the second team) . In the third example the first coach chooses the student on position 1 , and the row becomes [ 1, 3, 5, 4, 6] ( students with programming skills [ 2, 7] join the first team) . Then the second coach chooses the student on position 5 , and the row becomes [ 1, 3, 5] ( students with programming skills [ 4, 6] join the second team) . Then the first coach chooses the student on position 3 , and the row becomes [ 1] ( students with programming skills [ 3, 5] join the first team) . And then the second coach chooses the remaining student ( and the student with programming skill 1 joins the second team) . In the fourth example the first coach chooses the student on position 3 , and the row becomes [ 2, 1] ( students with programming skills [ 3, 4, 5] join the first team) . Then the second coach chooses the student on position 1 , and the row becomes empty ( and students with programming skills [ 1, 2] join the second team) .",
    "topics": [
      "data structures",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Stas and the Queue at the Buffet",
    "url": "https://codeforces.com/problemset/problem/1151/D",
    "history": "During a break in the buffet of the scientific lyceum of the Kingdom of Kremland, there was formed a queue of n high school students numbered from 1 to n . Initially, each student i is on position i . Each student i is characterized by two numbers \u2014 a_ i and b_ i . Dissatisfaction of the person i equals the product of a_ i by the number of people standing to the left of his position, add the product b_ i by the number of people standing to the right of his position. Formally, the dissatisfaction of the student i , which is on the position j , equals a_ i \u00b7 ( j- 1) + b_ i \u00b7 ( n- j) . The director entrusted Stas with the task: rearrange the people in the queue so that minimize the total dissatisfaction. Although Stas is able to solve such problems, this was not given to him. He turned for help to you.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of people in the queue. Each of the following n lines contains two integers a_ i and b_ i ( 1 \u2264 a_ i, b_ i \u2264 10^ 8 ) \u2014 the characteristic of the student i , initially on the position i .",
    "output": "Output one integer \u2014 minimum total dissatisfaction which can be achieved by rearranging people in the queue.",
    "note": "In the first example it is optimal to put people in this order: ( 3, 1, 2 ) . The first person is in the position of 2 , then his dissatisfaction will be equal to 4 \u00b7 1+ 2 \u00b7 1= 6 . The second person is in the position of 3 , his dissatisfaction will be equal to 2 \u00b7 2+ 3 \u00b7 0= 4 . The third person is in the position of 1 , his dissatisfaction will be equal to 6 \u00b7 0+ 1 \u00b7 2= 2 . The total dissatisfaction will be 12 . In the second example, you need to put people in this order: ( 3, 2, 4, 1 ) . The total dissatisfaction will be 25 .",
    "topics": [
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Earth Wind and Fire",
    "url": "https://codeforces.com/problemset/problem/1148/E",
    "history": "There are n stones arranged on an axis. Initially the i - th stone is located at the coordinate s_ i . There may be more than one stone in a single place. You can perform zero or more operations of the following type: take two stones with indices i and j so that s_ i \u2264 s_ j , choose an integer d ( 0 \u2264 2 \u00b7 d \u2264 s_ j - s_ i ) , and replace the coordinate s_ i with ( s_ i + d) and replace coordinate s_ j with ( s_ j - d) . In other words, draw stones closer to each other. You want to move the stones so that they are located at positions t_ 1, t_ 2, . . . , t_ n . The order of the stones is not important \u2014 you just want for the multiset of the stones resulting positions to be the same as the multiset of t_ 1, t_ 2, . . . , t_ n . Detect whether it is possible to move the stones this way, and if yes, construct a way to do so. You don' t need to minimize the number of moves.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 3 \u00b7 10^ 5 ) \u2013 the number of stones. The second line contains integers s_ 1, s_ 2, . . . , s_ n ( 1 \u2264 s_ i \u2264 10^ 9 ) \u2014 the initial positions of the stones. The second line contains integers t_ 1, t_ 2, . . . , t_ n ( 1 \u2264 t_ i \u2264 10^ 9 ) \u2014 the target positions of the stones.",
    "output": "If it is impossible to move the stones this way, print \" NO\" . Otherwise, on the first line print \" YES\" , on the second line print the number of operations m ( 0 \u2264 m \u2264 5 \u00b7 n ) required. You don' t have to minimize the number of operations. Then print m lines, each containing integers i, j, d ( 1 \u2264 i, j \u2264 n , s_ i \u2264 s_ j , 0 \u2264 2 \u00b7 d \u2264 s_ j - s_ i ) , defining the operations. One can show that if an answer exists, there is an answer requiring no more than 5 \u00b7 n operations.",
    "note": "Consider the first example. After the first move the locations of stones is [ 2, 2, 6, 5, 9] . After the second move the locations of stones is [ 2, 3, 5, 5, 9] . After the third move the locations of stones is [ 2, 5, 5, 5, 7] . After the last move the locations of stones is [ 4, 5, 5, 5, 5] .",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Dirty Deeds Done Dirt Cheap",
    "url": "https://codeforces.com/problemset/problem/1148/D",
    "history": "You are given n pairs of integers ( a_ 1, b_ 1) , ( a_ 2, b_ 2) , . . . , ( a_ n, b_ n) . All of the integers in the pairs are distinct and are in the range from 1 to 2 \u00b7 n inclusive. Let' s call a sequence of integers x_ 1, x_ 2, . . . , x_ 2k good if either x_ 1 < x_ 2 > x_ 3 < . . . < x_ 2k- 2 > x_ 2k- 1 < x_ 2k , or x_ 1 > x_ 2 < x_ 3 > . . . > x_ 2k- 2 < x_ 2k- 1 > x_ 2k . You need to choose a subset of distinct indices i_ 1, i_ 2, . . . , i_ t and their order in a way that if you write down all numbers from the pairs in a single sequence ( the sequence would be a_ i_ 1, b_ i_ 1, a_ i_ 2, b_ i_ 2, . . . , a_ i_ t, b_ i_ t ) , this sequence is good. What is the largest subset of indices you can choose? You also need to construct the corresponding index sequence i_ 1, i_ 2, . . . , i_ t .",
    "input": "The first line contains single integer n ( 2 \u2264 n \u2264 3 \u00b7 10^ 5 ) \u2014 the number of pairs. Each of the next n lines contain two numbers \u2014 a_ i and b_ i ( 1 \u2264 a_ i, b_ i \u2264 2 \u00b7 n ) \u2014 the elements of the pairs. It is guaranteed that all integers in the pairs are distinct, that is, every integer from 1 to 2 \u00b7 n is mentioned exactly once.",
    "output": "In the first line print a single integer t \u2014 the number of pairs in the answer. Then print t distinct integers i_ 1, i_ 2, . . . , i_ t \u2014 the indexes of pairs in the corresponding order.",
    "note": "The final sequence in the first example is 1 < 7 > 3 < 5 > 2 < 10 . The final sequence in the second example is 6 > 1 < 3 > 2 < 5 > 4 .",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Crazy Diamond",
    "url": "https://codeforces.com/problemset/problem/1148/C",
    "history": "You are given a permutation p of integers from 1 to n , where n is an even number. Your goal is to sort the permutation. To do so, you can perform zero or more operations of the following type: take two indices i and j such that 2 \u00b7 | i - j| \u2265 n and swap p_ i and p_ j . There is no need to minimize the number of operations, however you should use no more than 5 \u00b7 n operations. One can show that it is always possible to do that.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 3 \u00b7 10^ 5 , n is even) \u2014 the length of the permutation. The second line contains n distinct integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) \u2014 the given permutation.",
    "output": "On the first line print m ( 0 \u2264 m \u2264 5 \u00b7 n ) \u2014 the number of swaps to perform. Each of the following m lines should contain integers a_ i, b_ i ( 1 \u2264 a_ i, b_ i \u2264 n , | a_ i - b_ i| \u2265n/ 2 ) \u2014 the indices that should be swapped in the corresponding swap. Note that there is no need to minimize the number of operations. We can show that an answer always exists.",
    "note": "In the first example, when one swap elements on positions 1 and 2 , the array becomes sorted. In the second example, pay attention that there is no need to minimize number of swaps. In the third example, after swapping elements on positions 1 and 5 the array becomes: [ 4, 5, 3, 1, 2, 6] . After swapping elements on positions 2 and 5 the array becomes [ 4, 2, 3, 1, 5, 6] and finally after swapping elements on positions 1 and 4 the array becomes sorted: [ 1, 2, 3, 4, 5, 6] .",
    "topics": [
      "constructive algorithms",
      "sortings"
    ]
  },
  {
    "title": "Two Shuffled Sequences",
    "url": "https://codeforces.com/problemset/problem/1144/C",
    "history": "Two integer sequences existed initially \u2014 one of them was strictly increasing, and the other one \u2014 strictly decreasing. Strictly increasing sequence is a sequence of integers [ x_ 1 < x_ 2 < . . . < x_ k] . And strictly decreasing sequence is a sequence of integers [ y_ 1 > y_ 2 > . . . > y_ l] . Note that the empty sequence and the sequence consisting of one element can be considered as increasing or decreasing. They were merged into one sequence a . After that sequence a got shuffled. For example, some of the possible resulting sequences a for an increasing sequence [ 1, 3, 4] and a decreasing sequence [ 10, 4, 2] are sequences [ 1, 2, 3, 4, 4, 10] or [ 4, 2, 1, 10, 4, 3] . This shuffled sequence a is given in the input. Your task is to find any two suitable initial sequences. One of them should be strictly increasing and the other one \u2014 strictly decreasing. Note that the empty sequence and the sequence consisting of one element can be considered as increasing or decreasing. If there is a contradiction in the input and it is impossible to split the given sequence a to increasing and decreasing sequences, print \" NO\" .",
    "input": "The first line of the input contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of elements in a . The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 2 \u00b7 10^ 5 ) , where a_ i is the i - th element of a .",
    "output": "If there is a contradiction in the input and it is impossible to split the given sequence a to increasing and decreasing sequences, print \" NO\" in the first line. Otherwise print \" YES\" in the first line and any two suitable sequences. Note that the empty sequence and the sequence consisting of one element can be considered as increasing or decreasing. In the second line print n_ i \u2014 the number of elements in the strictly increasing sequence. n_ i can be zero, in this case the increasing sequence is empty. In the third line print n_ i integers inc_ 1, inc_ 2, . . . , inc_ n_ i in the increasing order of its values ( inc_ 1 < inc_ 2 < . . . < inc_ n_ i ) \u2014 the strictly increasing sequence itself. You can keep this line empty if n_ i = 0 ( or just print the empty line) . In the fourth line print n_ d \u2014 the number of elements in the strictly decreasing sequence. n_ d can be zero, in this case the decreasing sequence is empty. In the fifth line print n_ d integers dec_ 1, dec_ 2, . . . , dec_ n_ d in the decreasing order of its values ( dec_ 1 > dec_ 2 > . . . > dec_ n_ d ) \u2014 the strictly decreasing sequence itself. You can keep this line empty if n_ d = 0 ( or just print the empty line) . n_ i + n_ d should be equal to n and the union of printed sequences should be a permutation of the given sequence ( in case of \" YES\" answer) .",
    "note": " ",
    "topics": [
      "constructive algorithms",
      "sortings"
    ]
  },
  {
    "title": "Parity Alternated Deletions",
    "url": "https://codeforces.com/problemset/problem/1144/B",
    "history": "Polycarp has an array a consisting of n integers. He wants to play a game with this array. The game consists of several moves. On the first move he chooses any element and deletes it ( after the first move the array contains n- 1 elements) . For each of the next moves he chooses any element with the only restriction: its parity should differ from the parity of the element deleted on the previous move. In other words, he alternates parities ( even- odd- even- odd- . . . or odd- even- odd- even- . . . ) of the removed elements. Polycarp stops if he can' t make a move. Formally: If it is the first move, he chooses any element and deletes it; If it is the second or any next move: if the last deleted element was odd, Polycarp chooses any even element and deletes it; if the last deleted element was even, Polycarp chooses any odd element and deletes it. If after some move Polycarp cannot make a move, the game ends. Polycarp' s goal is to minimize the sum of non- deleted elements of the array after end of the game. If Polycarp can delete the whole array, then the sum of non- deleted elements is zero. Help Polycarp find this value.",
    "input": "The first line of the input contains one integer n ( 1 \u2264 n \u2264 2000 ) \u2014 the number of elements of a . The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 6 ) , where a_ i is the i - th element of a .",
    "output": "Print one integer \u2014 the minimum possible sum of non- deleted elements of the array after end of the game.",
    "note": " ",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Playlist",
    "url": "https://codeforces.com/problemset/problem/1140/C",
    "history": "You have a playlist consisting of n songs. The i - th song is characterized by two numbers t_ i and b_ i \u2014 its length and beauty respectively. The pleasure of listening to set of songs is equal to the total length of the songs in the set multiplied by the minimum beauty among them. For example, the pleasure of listening to a set of 3 songs having lengths [ 5, 7, 4] and beauty values [ 11, 14, 6] is equal to ( 5 + 7 + 4) \u00b7 6 = 96 . You need to choose at most k songs from your playlist, so the pleasure of listening to the set of these songs them is maximum possible.",
    "input": "The first line contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 3 \u00b7 10^ 5 ) \u2013 the number of songs in the playlist and the maximum number of songs you can choose, respectively. Each of the next n lines contains two integers t_ i and b_ i ( 1 \u2264 t_ i, b_ i \u2264 10^ 6 ) \u2014 the length and beauty of i - th song.",
    "output": "Print one integer \u2014 the maximum pleasure you can get.",
    "note": "In the first test case we can choose songs 1, 3, 4 , so the total pleasure is ( 4 + 3 + 6) \u00b7 6 = 78 . In the second test case we can choose song 3 . The total pleasure will be equal to 100 \u00b7 100 = 10000 .",
    "topics": [
      "brute force",
      "data structures",
      "sortings"
    ]
  },
  {
    "title": "Skyscrapers",
    "url": "https://codeforces.com/problemset/problem/1137/A",
    "history": "Dora loves adventures quite a lot. During some journey she encountered an amazing city, which is formed by n streets along the Eastern direction and m streets across the Southern direction. Naturally, this city has nm intersections. At any intersection of i - th Eastern street and j - th Southern street there is a monumental skyscraper. Dora instantly became curious and decided to explore the heights of the city buildings. When Dora passes through the intersection of the i - th Eastern and j - th Southern street she examines those two streets. After Dora learns the heights of all the skyscrapers on those two streets she wonders: how one should reassign heights to the skyscrapers on those two streets, so that the maximum height would be as small as possible and the result of comparing the heights of any two skyscrapers on one street wouldn' t change. Formally, on every of nm intersections Dora solves an independent problem. She sees n + m - 1 skyscrapers and for each of them she knows its real height. Moreover, any two heights can be compared to get a result \" greater\" , \" smaller\" or \" equal\" . Now Dora wants to select some integer x and assign every skyscraper a height from 1 to x . When assigning heights, Dora wants to preserve the relative order of the skyscrapers in both streets. That is, the result of any comparison of heights of two skyscrapers in the current Eastern street shouldn' t change and the result of any comparison of heights of two skyscrapers in current Southern street shouldn' t change as well. Note that skyscrapers located on the Southern street are not compared with skyscrapers located on the Eastern street only. However, the skyscraper located at the streets intersection can be compared with both Southern and Eastern skyscrapers. For every intersection Dora wants to independently calculate the minimum possible x . For example, if the intersection and the two streets corresponding to it look as follows: Then it is optimal to replace the heights of the skyscrapers as follows ( note that all comparisons \" less\" , \" equal\" , \" greater\" inside the Eastern street and inside the Southern street are preserved) The largest used number is 5 , hence the answer for this intersection would be 5 . Help Dora to compute the answers for each intersection.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 1000 ) \u2014 the number of streets going in the Eastern direction and the number of the streets going in Southern direction. Each of the following n lines contains m integers a_ i, 1 , a_ i, 2 , . . . , a_ i, m ( 1 \u2264 a_ i, j\u2264 10^ 9 ) . The integer a_ i, j , located on j - th position in the i - th line denotes the height of the skyscraper at the intersection of the i - th Eastern street and j - th Southern direction.",
    "output": "Print n lines containing m integers each. The integer x_ i, j , located on j - th position inside the i - th line is an answer for the problem at the intersection of i - th Eastern street and j - th Southern street.",
    "note": "In the first example, it' s not possible to decrease the maximum used height for the problem at any intersection, hence we don' t have to change any heights. In the second example, the answers are as follows: For the intersection of the first line and the first column For the intersection of the first line and the second column For the intersection of the second line and the first column For the intersection of the second line and the second column",
    "topics": [
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Nastya Is Transposing Matrices",
    "url": "https://codeforces.com/problemset/problem/1136/C",
    "history": "Nastya came to her informatics lesson, and her teacher who is, by the way, a little bit famous here gave her the following task. Two matrices A and B are given, each of them has size n \u00d7 m . Nastya can perform the following operation to matrix A unlimited number of times: take any square square submatrix of A and transpose it ( i. e. the element of the submatrix which was in the i - th row and j - th column of the submatrix will be in the j - th row and i - th column after transposing, and the transposed submatrix itself will keep its place in the matrix A ) . Nastya' s task is to check whether it is possible to transform the matrix A to the matrix B . Example of the operation As it may require a lot of operations, you are asked to answer this question for Nastya. A square submatrix of matrix M is a matrix which consist of all elements which comes from one of the rows with indeces x, x+ 1, . . . , x+ k- 1 of matrix M and comes from one of the columns with indeces y, y+ 1, . . . , y+ k- 1 of matrix M . k is the size of square submatrix. In other words, square submatrix is the set of elements of source matrix which form a solid square ( i. e. without holes) .",
    "input": "The first line contains two integers n and m separated by space ( 1 \u2264 n, m \u2264 500 ) \u2014 the numbers of rows and columns in A and B respectively. Each of the next n lines contains m integers, the j - th number in the i - th of these lines denotes the j - th element of the i - th row of the matrix A ( 1 \u2264 A_ ij\u2264 10^ 9 ) . Each of the next n lines contains m integers, the j - th number in the i - th of these lines denotes the j - th element of the i - th row of the matrix B ( 1 \u2264 B_ ij\u2264 10^ 9 ) .",
    "output": "Print \" YES\" ( without quotes) if it is possible to transform A to B and \" NO\" ( without quotes) otherwise. You can print each letter in any case ( upper or lower) .",
    "note": "Consider the third example. The matrix A initially looks as follows. [ 1 2 3; 4 5 6; 7 8 9 ] Then we choose the whole matrix as transposed submatrix and it becomes [ 1 4 7; 2 5 8; 3 6 9 ] Then we transpose the submatrix with corners in cells ( 2, 2) and ( 3, 3) . [ 1 4 7; 2 5 8; 3 6 9 ] So matrix becomes [ 1 4 7; 2 5 6; 3 8 9 ] and it is B .",
    "topics": [
      "constructive algorithms",
      "sortings"
    ]
  },
  {
    "title": "K Balanced Teams",
    "url": "https://codeforces.com/problemset/problem/1133/E",
    "history": "You are a coach at your local university. There are n students under your supervision, the programming skill of the i - th student is a_ i . You have to form k teams for yet another new programming competition. As you know, the more students are involved in competition the more probable the victory of your university is! So you have to form no more than k ( and at least one) non- empty teams so that the total number of students in them is maximized. But you also know that each team should be balanced. It means that the programming skill of each pair of students in each team should differ by no more than 5 . Teams are independent from one another ( it means that the difference between programming skills of two students from two different teams does not matter) . It is possible that some students not be included in any team at all. Your task is to report the maximum possible total number of students in no more than k ( and at least one) non- empty balanced teams. If you are Python programmer, consider using PyPy instead of Python when you submit your code.",
    "input": "The first line of the input contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 5000 ) \u2014 the number of students and the maximum number of teams, correspondingly. The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is a programming skill of the i - th student.",
    "output": "Print one integer \u2014 the maximum possible total number of students in no more than k ( and at least one) non- empty balanced teams.",
    "note": " ",
    "topics": [
      "dp",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Balanced Team",
    "url": "https://codeforces.com/problemset/problem/1133/C",
    "history": "You are a coach at your local university. There are n students under your supervision, the programming skill of the i - th student is a_ i . You have to create a team for a new programming competition. As you know, the more students some team has the more probable its victory is! So you have to create a team with the maximum number of students. But you also know that a team should be balanced. It means that the programming skill of each pair of students in a created team should differ by no more than 5 . Your task is to report the maximum possible number of students in a balanced team.",
    "input": "The first line of the input contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of students. The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is a programming skill of the i - th student.",
    "output": "Print one integer \u2014 the maximum possible number of students in a balanced team.",
    "note": "In the first example you can create a team with skills [ 12, 17, 15] . In the second example you can take all students in a team because their programming skills are equal. In the third example you can create a team consisting of a single student ( and you cannot create a team consisting of at least two students) .",
    "topics": [
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Discounts",
    "url": "https://codeforces.com/problemset/problem/1132/B",
    "history": "You came to a local shop and want to buy some chocolate bars. There are n bars in the shop, i - th of them costs a_ i coins ( and you want to buy all of them) . You have m different coupons that allow you to buy chocolate bars. i - th coupon allows you to buy q_ i chocolate bars while you have to pay only for the q_ i - 1 most expensive ones ( so, the cheapest bar of those q_ i bars is for free) . You can use only one coupon; if you use coupon i , you have to choose q_ i bars and buy them using the coupon, and buy all the remaining n - q_ i bars without any discounts. To decide which coupon to choose, you want to know what will be the minimum total amount of money you have to pay if you use one of the coupons optimally.",
    "input": "The first line contains one integer n ( 2 \u2264 n \u2264 3 \u00b7 10^ 5 ) \u2014 the number of chocolate bars in the shop. The second line contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is the cost of i - th chocolate bar. The third line contains one integer m ( 1 \u2264 m \u2264 n - 1 ) \u2014 the number of coupons you have. The fourth line contains m integers q_ 1 , q_ 2 , . . . , q_ m ( 2 \u2264 q_ i \u2264 n ) , where q_ i is the number of chocolate bars you have to buy using i - th coupon so that the least expensive of them will be for free. All values of q_ i are pairwise distinct.",
    "output": "Print m integers, i - th of them should be the minimum amount of money you have to pay if you buy q_ i bars with i - th coupon, and all the remaining bars one by one for their full price.",
    "note": "Consider the first example. If we use the first coupon, we may choose chocolate bars having indices 1 , 6 and 7 , and we pay 18 coins for them and 9 coins for all other bars. If we use the second coupon, we may choose chocolate bars having indices 1 , 5 , 6 and 7 , and we pay 25 coins for them and 5 coins for all other bars.",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Birthday",
    "url": "https://codeforces.com/problemset/problem/1131/C",
    "history": "Cowboy Vlad has a birthday today! There are n children who came to the celebration. In order to greet Vlad, the children decided to form a circle around him. Among the children who came, there are both tall and low, so if they stand in a circle arbitrarily, it may turn out, that there is a tall and low child standing next to each other, and it will be difficult for them to hold hands. Therefore, children want to stand in a circle so that the maximum difference between the growth of two neighboring children would be minimal possible. Formally, let' s number children from 1 to n in a circle order, that is, for every i child with number i will stand next to the child with number i+ 1 , also the child with number 1 stands next to the child with number n . Then we will call the discomfort of the circle the maximum absolute difference of heights of the children, who stand next to each other. Please help children to find out how they should reorder themselves, so that the resulting discomfort is smallest possible.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 100 ) \u2014 the number of the children who came to the cowboy Vlad' s birthday. The second line contains integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) denoting heights of every child.",
    "output": "Print exactly n integers \u2014 heights of the children in the order in which they should stand in a circle. You can start printing a circle with any child. If there are multiple possible answers, print any of them.",
    "note": "In the first example, the discomfort of the circle is equal to 1 , since the corresponding absolute differences are 1 , 1 , 1 and 0 . Note, that sequences [ 2, 3, 2, 1, 1] and [ 3, 2, 1, 1, 2] form the same circles and differ only by the selection of the starting point. In the second example, the discomfort of the circle is equal to 20 , since the absolute difference of 10 and 30 is equal to 20 .",
    "topics": [
      "binary search",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Morse Code",
    "url": "https://codeforces.com/problemset/problem/1129/C",
    "history": "In Morse code, an letter of English alphabet is represented as a string of some length from 1 to 4 . Moreover, each Morse code representation of an English letter contains only dots and dashes. In this task, we will represent a dot with a \" 0\" and a dash with a \" 1\" . Because there are 2^ 1+ 2^ 2+ 2^ 3+ 2^ 4 = 30 strings with length 1 to 4 containing only \" 0\" and/ or \" 1\" , not all of them correspond to one of the 26 English letters. In particular, each string of \" 0\" and/ or \" 1\" of length at most 4 translates into a distinct English letter, except the following four strings that do not correspond to any English alphabet: \" 0011\" , \" 0101\" , \" 1110\" , and \" 1111\" . You will work with a string S , which is initially empty. For m times, either a dot or a dash will be appended to S , one at a time. Your task is to find and report, after each of these modifications to string S , the number of non- empty sequences of English letters that are represented with some substring of S in Morse code. Since the answers can be incredibly tremendous, print them modulo 10^ 9 + 7 .",
    "input": "The first line contains an integer m ( 1 \u2264 m \u2264 3 000 ) \u2014 the number of modifications to S . Each of the next m lines contains either a \" 0\" ( representing a dot) or a \" 1\" ( representing a dash) , specifying which character should be appended to S .",
    "output": "Print m lines, the i - th of which being the answer after the i - th modification to S .",
    "note": "Let us consider the first sample after all characters have been appended to S , so S is \" 111\" . As you can see, \" 1\" , \" 11\" , and \" 111\" all correspond to some distinct English letter. In fact, they are translated into a ' T' , an ' M' , and an ' O' , respectively. All non- empty sequences of English letters that are represented with some substring of S in Morse code, therefore, are as follows. \" T\" ( translates into \" 1\" ) \" M\" ( translates into \" 11\" ) \" O\" ( translates into \" 111\" ) \" TT\" ( translates into \" 11\" ) \" TM\" ( translates into \" 111\" ) \" MT\" ( translates into \" 111\" ) \" TTT\" ( translates into \" 111\" ) Although unnecessary for this task, a conversion table from English alphabets into Morse code can be found here.",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "hashing",
      "sortings",
      "string suffix structures",
      "strings"
    ]
  },
  {
    "title": "Technogoblet of Fire",
    "url": "https://codeforces.com/problemset/problem/1121/A",
    "history": "Everybody knows that the m - coder Tournament will happen soon. m schools participate in the tournament, and only one student from each school participates. There are a total of n students in those schools. Before the tournament, all students put their names and the names of their schools into the Technogoblet of Fire. After that, Technogoblet selects the strongest student from each school to participate. Arkady is a hacker who wants to have k Chosen Ones selected by the Technogoblet. Unfortunately, not all of them are the strongest in their schools, but Arkady can make up some new school names and replace some names from Technogoblet with those. You can' t use each made- up name more than once. In that case, Technogoblet would select the strongest student in those made- up schools too. You know the power of each student and schools they study in. Calculate the minimal number of schools Arkady has to make up so that k Chosen Ones would be selected by the Technogoblet.",
    "input": "The first line contains three integers n , m and k ( 1 \u2264 n \u2264 100 , 1 \u2264 m, k \u2264 n ) \u2014 the total number of students, the number of schools and the number of the Chosen Ones. The second line contains n different integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) , where p_ i denotes the power of i - th student. The bigger the power, the stronger the student. The third line contains n integers s_ 1, s_ 2, . . . , s_ n ( 1 \u2264 s_ i \u2264 m ) , where s_ i denotes the school the i - th student goes to. At least one student studies in each of the schools. The fourth line contains k different integers c_ 1, c_ 2, . . . , c_ k ( 1 \u2264 c_ i \u2264 n ) \u2014 the id' s of the Chosen Ones.",
    "output": "Output a single integer \u2014 the minimal number of schools to be made up by Arkady so that k Chosen Ones would be selected by the Technogoblet.",
    "note": "In the first example there' s just a single Chosen One with id 3 . His power is equal to 3 , but in the same school 1 , there' s a student with id 5 and power 6 , and that means inaction would not lead to the latter being chosen. If we, however, make up a new school ( let its id be 4 ) for the Chosen One, Technogoblet would select students with ids 2 ( strongest in 3 ) , 5 ( strongest in 1 ) , 6 ( strongest in 2 ) and 3 ( strongest in 4 ) . In the second example, you can change the school of student 3 to the made- up 5 and the school of student 4 to the made- up 6 . It will cause the Technogoblet to choose students 8 , 7 , 6 , 5 , 3 and 4 .",
    "topics": [
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Frets On Fire",
    "url": "https://codeforces.com/problemset/problem/1119/D",
    "history": "Miyako came to the flea kingdom with a ukulele. She became good friends with local flea residents and played beautiful music for them every day. In return, the fleas made a bigger ukulele for her: it has n strings, and each string has ( 10^ 18 + 1) frets numerated from 0 to 10^ 18 . The fleas use the array s_ 1, s_ 2, . . . , s_ n to describe the ukulele' s tuning, that is, the pitch of the j - th fret on the i - th string is the integer s_ i + j . Miyako is about to leave the kingdom, but the fleas hope that Miyako will answer some last questions for them. Each question is in the form of: \" How many different pitches are there, if we consider frets between l and r ( inclusive) on all strings? \" Miyako is about to visit the cricket kingdom and has no time to answer all the questions. Please help her with this task! Formally, you are given a matrix with n rows and ( 10^ 18+ 1) columns, where the cell in the i - th row and j - th column ( 0 \u2264 j \u2264 10^ 18 ) contains the integer s_ i + j . You are to answer q queries, in the k - th query you have to answer the number of distinct integers in the matrix from the l_ k - th to the r_ k - th columns, inclusive.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 100 000 ) \u2014 the number of strings. The second line contains n integers s_ 1, s_ 2, . . . , s_ n ( 0 \u2264 s_ i \u2264 10^ 18 ) \u2014 the tuning of the ukulele. The third line contains an integer q ( 1 \u2264 q \u2264 100 000 ) \u2014 the number of questions. The k - th among the following q lines contains two integers l_ k , r_ k ( 0 \u2264 l_ k \u2264 r_ k \u2264 10^ 18 ) \u2014 a question from the fleas.",
    "output": "Output one number for each question, separated by spaces \u2014 the number of different pitches.",
    "note": "For the first example, the pitches on the 6 strings are as follows. Fret 0 1 2 3 4 5 6 7 . . . s_ 1: 3 4 5 6 7 8 9 10 . . . s_ 2: 1 2 3 4 5 6 7 8 . . . s_ 3: 4 5 6 7 8 9 10 11 . . . s_ 4: 1 2 3 4 5 6 7 8 . . . s_ 5: 5 6 7 8 9 10 11 12 . . . s_ 6: 9 10 11 12 13 14 15 16 . . . There are 5 different pitches on fret 7 \u2014 8, 10, 11, 12, 16 . There are 10 different pitches on frets 0, 1, 2 \u2014 1, 2, 3, 4, 5, 6, 7, 9, 10, 11 .",
    "topics": [
      "binary search",
      "sortings"
    ]
  },
  {
    "title": "Alyona and a Narrow Fridge",
    "url": "https://codeforces.com/problemset/problem/1119/B",
    "history": "Alyona has recently bought a miniature fridge that can be represented as a matrix with h rows and 2 columns. Initially there is only one shelf at the bottom of the fridge, but Alyona can install arbitrary number of shelves inside the fridge between any two rows. A shelf is two cells wide, does not occupy any space but separates the inside of the fridge to the lower and upper part. An example of a fridge with h = 7 and two shelves. The shelves are shown in black. The picture corresponds to the first example. Alyona has n bottles of milk that she wants to put in the fridge. The i - th bottle is a_ i cells tall and 1 cell wide. She can put a bottle on some shelf if the corresponding space above the shelf is at least as tall as the bottle. She can not put a bottle on top of another bottle ( if there is no shelf between them) . Two bottles can not share a cell. Alyona is interested in the largest integer k such that she can put bottles 1 , 2 , . . . , k in the fridge at the same time. Find this largest k .",
    "input": "The first line contains two integers n and h ( 1 \u2264 n \u2264 10^ 3 , 1 \u2264 h \u2264 10^ 9 ) \u2014 the number of bottles and the height of the fridge. The second line contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 1 \u2264 a_ i \u2264 h ) \u2014 the heights of the bottles.",
    "output": "Print the single integer k \u2014 the maximum integer such that Alyona can put the bottles 1 , 2 , . . . , k in the fridge at the same time. If Alyona can put all bottles in the fridge, print n . It is easy to see that Alyona can always put at least one bottle in the fridge.",
    "note": "One of optimal locations in the first example is shown on the picture in the statement. One of optimal locations in the second example is shown on the picture below. One of optimal locations in the third example is shown on the picture below.",
    "topics": [
      "binary search",
      "flows",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Emotes",
    "url": "https://codeforces.com/problemset/problem/1117/B",
    "history": "There are n emotes in very popular digital collectible card game ( the game is pretty famous so we won' t say its name) . The i - th emote increases the opponent' s happiness by a_ i units ( we all know that emotes in this game are used to make opponents happy) . You have time to use some emotes only m times. You are allowed to use any emotion once, more than once, or not use it at all. The only restriction is that you cannot use the same emote more than k times in a row ( otherwise the opponent will think that you' re trolling him) . Note that two emotes i and j ( i j ) such that a_ i = a_ j are considered different. You have to make your opponent as happy as possible. Find the maximum possible opponent' s happiness.",
    "input": "The first line of the input contains three integers n, m and k ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 k \u2264 m \u2264 2 \u00b7 10^ 9 ) \u2014 the number of emotes, the number of times you can use emotes and the maximum number of times you may use the same emote in a row. The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is value of the happiness of the i - th emote.",
    "output": "Print one integer \u2014 the maximum opponent' s happiness if you use emotes in a way satisfying the problem statement.",
    "note": "In the first example you may use emotes in the following sequence: 4, 4, 5, 4, 4, 5, 4, 4, 5 .",
    "topics": [
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Yet Another Array Partitioning Task",
    "url": "https://codeforces.com/problemset/problem/1114/B",
    "history": "An array b is called to be a subarray of a if it forms a continuous subsequence of a , that is, if it is equal to a_ l , a_ l + 1 , . . . , a_ r for some l, r . Suppose m is some known constant. For any array, having m or more elements, let' s define it' s beauty as the sum of m largest elements of that array. For example: For array x = [ 4, 3, 1, 5, 2] and m = 3 , the 3 largest elements of x are 5 , 4 and 3 , so the beauty of x is 5 + 4 + 3 = 12 . For array x = [ 10, 10, 10] and m = 2 , the beauty of x is 10 + 10 = 20 . You are given an array a_ 1, a_ 2, . . . , a_ n , the value of the said constant m and an integer k . Your need to split the array a into exactly k subarrays such that: Each element from a belongs to exactly one subarray. Each subarray has at least m elements. The sum of all beauties of k subarrays is maximum possible.",
    "input": "The first line contains three integers n , m and k ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 m , 2 \u2264 k , m \u00b7 k \u2264 n ) \u2014 the number of elements in a , the constant m in the definition of beauty and the number of subarrays to split to. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) .",
    "output": "In the first line, print the maximum possible sum of the beauties of the subarrays in the optimal partition. In the second line, print k- 1 integers p_ 1, p_ 2, . . . , p_ k- 1 ( 1 \u2264 p_ 1 < p_ 2 < . . . < p_ k- 1 < n ) representing the partition of the array, in which: All elements with indices from 1 to p_ 1 belong to the first subarray. All elements with indices from p_ 1 + 1 to p_ 2 belong to the second subarray. . . . . All elements with indices from p_ k- 1 + 1 to n belong to the last, k - th subarray. If there are several optimal partitions, print any of them.",
    "note": "In the first example, one of the optimal partitions is [ 5, 2, 5] , [ 2, 4] , [ 1, 1, 3, 2] . The beauty of the subarray [ 5, 2, 5] is 5 + 5 = 10 . The beauty of the subarray [ 2, 4] is 2 + 4 = 6 . The beauty of the subarray [ 1, 1, 3, 2] is 3 + 2 = 5 . The sum of their beauties is 10 + 6 + 5 = 21 . In the second example, one optimal partition is [ 4] , [ 1, 3] , [ 2, 2] , [ 3] .",
    "topics": [
      "constructive algorithms",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Magic Stones",
    "url": "https://codeforces.com/problemset/problem/1110/E",
    "history": "Grigory has n magic stones, conveniently numbered from 1 to n . The charge of the i - th stone is equal to c_ i . Sometimes Grigory gets bored and selects some inner stone ( that is, some stone with index i , where 2 \u2264 i \u2264 n - 1 ) , and after that synchronizes it with neighboring stones. After that, the chosen stone loses its own charge, but acquires the charges from neighboring stones. In other words, its charge c_ i changes to c_ i' = c_ i + 1 + c_ i - 1 - c_ i . Andrew, Grigory' s friend, also has n stones with charges t_ i . Grigory is curious, whether there exists a sequence of zero or more synchronization operations, which transforms charges of Grigory' s stones into charges of corresponding Andrew' s stones, that is, changes c_ i into t_ i for all i ?",
    "input": "The first line contains one integer n ( 2 \u2264 n \u2264 10^ 5 ) \u2014 the number of magic stones. The second line contains integers c_ 1, c_ 2, . . . , c_ n ( 0 \u2264 c_ i \u2264 2 \u00b7 10^ 9 ) \u2014 the charges of Grigory' s stones. The second line contains integers t_ 1, t_ 2, . . . , t_ n ( 0 \u2264 t_ i \u2264 2 \u00b7 10^ 9 ) \u2014 the charges of Andrew' s stones.",
    "output": "If there exists a ( possibly empty) sequence of synchronization operations, which changes all charges to the required ones, print \" Yes\" . Otherwise, print \" No\" .",
    "note": "In the first example, we can perform the following synchronizations ( 1 - indexed) : First, synchronize the third stone [ 7, 2, 4, 12] \u2192 [ 7, 2, 10, 12] . Then synchronize the second stone: [ 7, 2, 10, 12] \u2192 [ 7, 15, 10, 12] . In the second example, any operation with the second stone will not change its charge.",
    "topics": [
      "constructive algorithms",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Tape",
    "url": "https://codeforces.com/problemset/problem/1110/B",
    "history": "You have a long stick, consisting of m segments enumerated from 1 to m . Each segment is 1 centimeter long. Sadly, some segments are broken and need to be repaired. You have an infinitely long repair tape. You want to cut some pieces from the tape and use them to cover all of the broken segments. To be precise, a piece of tape of integer length t placed at some position s will cover segments s, s+ 1, . . . , s+ t- 1 . You are allowed to cover non- broken segments; it is also possible that some pieces of tape will overlap. Time is money, so you want to cut at most k continuous pieces of tape to cover all the broken segments. What is the minimum total length of these pieces?",
    "input": "The first line contains three integers n , m and k ( 1 \u2264 n \u2264 10^ 5 , n \u2264 m \u2264 10^ 9 , 1 \u2264 k \u2264 n ) \u2014 the number of broken segments, the length of the stick and the maximum number of pieces you can use. The second line contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 m ) \u2014 the positions of the broken segments. These integers are given in increasing order, that is, b_ 1 < b_ 2 < . . . < b_ n .",
    "output": "Print the minimum total length of the pieces.",
    "note": "In the first example, you can use a piece of length 11 to cover the broken segments 20 and 30 , and another piece of length 6 to cover 75 and 80 , for a total length of 17 . In the second example, you can use a piece of length 4 to cover broken segments 1 , 2 and 4 , and two pieces of length 1 to cover broken segments 60 and 87 .",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Vasya and Endless Credits",
    "url": "https://codeforces.com/problemset/problem/1107/F",
    "history": "Vasya wants to buy himself a nice new car. Unfortunately, he lacks some money. Currently he has exactly 0 burles. However, the local bank has n credit offers. Each offer can be described with three numbers a_ i , b_ i and k_ i . Offers are numbered from 1 to n . If Vasya takes the i - th offer, then the bank gives him a_ i burles at the beginning of the month and then Vasya pays bank b_ i burles at the end of each month for the next k_ i months ( including the month he activated the offer) . Vasya can take the offers any order he wants. Each month Vasya can take no more than one credit offer. Also each credit offer can not be used more than once. Several credits can be active at the same time. It implies that Vasya pays bank the sum of b_ i over all the i of active credits at the end of each month. Vasya wants to buy a car in the middle of some month. He just takes all the money he currently has and buys the car of that exact price. Vasya don' t really care what he' ll have to pay the bank back after he buys a car. He just goes out of the country on his car so that the bank can' t find him anymore. What is the maximum price that car can have?",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 500 ) \u2014 the number of credit offers. Each of the next n lines contains three integers a_ i , b_ i and k_ i ( 1 \u2264 a_ i, b_ i, k_ i \u2264 10^ 9 ) .",
    "output": "Print one integer \u2014 the maximum price of the car.",
    "note": "In the first example, the following sequence of offers taken is optimal: 4 \u2192 3. The amount of burles Vasya has changes the following way: 5 \u2192 32 \u2192 - 86 \u2192 . . . . He takes the money he has in the middle of the second month ( 32 burles) and buys the car. The negative amount of money means that Vasya has to pay the bank that amount of burles. In the second example, the following sequence of offers taken is optimal: 3 \u2192 1 \u2192 2. The amount of burles Vasya has changes the following way: 0 \u2192 300 \u2192 338 \u2192 1337 \u2192 236 \u2192 - 866 \u2192 . . . .",
    "topics": [
      "dp",
      "flows",
      "graph matchings",
      "graphs",
      "sortings"
    ]
  },
  {
    "title": "Brutality",
    "url": "https://codeforces.com/problemset/problem/1107/C",
    "history": "You are playing a new famous fighting game: Kortal Mombat XII. You have to perform a brutality on your opponent' s character. You are playing the game on the new generation console so your gamepad have 26 buttons. Each button has a single lowercase Latin letter from ' a' to ' z' written on it. All the letters on buttons are pairwise distinct. You are given a sequence of hits, the i - th hit deals a_ i units of damage to the opponent' s character. To perform the i - th hit you have to press the button s_ i on your gamepad. Hits are numbered from 1 to n . You know that if you press some button more than k times in a row then it' ll break. You cherish your gamepad and don' t want to break any of its buttons. To perform a brutality you have to land some of the hits of the given sequence. You are allowed to skip any of them, however changing the initial order of the sequence is prohibited. The total damage dealt is the sum of a_ i over all i for the hits which weren' t skipped. Note that if you skip the hit then the counter of consecutive presses the button won' t reset. Your task is to skip some hits to deal the maximum possible total damage to the opponent' s character and not break your gamepad buttons.",
    "input": "The first line of the input contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of hits and the maximum number of times you can push the same button in a row. The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is the damage of the i - th hit. The third line of the input contains the string s consisting of exactly n lowercase Latin letters \u2014 the sequence of hits ( each character is the letter on the button you need to press to perform the corresponding hit) .",
    "output": "Print one integer dmg \u2014 the maximum possible damage to the opponent' s character you can deal without breaking your gamepad buttons.",
    "note": "In the first example you can choose hits with numbers [ 1, 3, 4, 5, 6, 7] with the total damage 1 + 16 + 18 + 7 + 2 + 10 = 54 . In the second example you can choose all hits so the total damage is 2 + 4 + 1 + 3 + 1000 = 1010 . In the third example you can choose all hits expect the third one so the total damage is 2 + 4 + 3 + 1000 = 1009 . In the fourth example you can choose hits with numbers [ 2, 3, 6, 8] . Only this way you can reach the maximum total damage 15 + 2 + 8 + 16 = 41 . In the fifth example you can choose only hits with numbers [ 2, 4, 6] with the total damage 18 + 19 + 15 = 52 . In the sixth example you can change either first hit or the second hit ( it does not matter) with the total damage 10 .",
    "topics": [
      "greedy",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Lunar New Year and Number Division",
    "url": "https://codeforces.com/problemset/problem/1106/C",
    "history": "Lunar New Year is approaching, and Bob is struggling with his homework \u2013 a number division problem. There are n positive integers a_ 1, a_ 2, . . . , a_ n on Bob' s homework paper, where n is always an even number. Bob is asked to divide those numbers into groups, where each group must contain at least 2 numbers. Suppose the numbers are divided into m groups, and the sum of the numbers in the j - th group is s_ j . Bob' s aim is to minimize the sum of the square of s_ j , that is \u2211_ j = 1^ m s_ j^ 2. Bob is puzzled by this hard problem. Could you please help him solve it?",
    "input": "The first line contains an even integer n ( 2 \u2264 n \u2264 3 \u00b7 10^ 5 ) , denoting that there are n integers on Bob' s homework paper. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 4 ) , describing the numbers you need to deal with.",
    "output": "A single line containing one integer, denoting the minimum of the sum of the square of s_ j , which is \u2211_ i = j^ m s_ j^ 2, where m is the number of groups.",
    "note": "In the first sample, one of the optimal solutions is to divide those 4 numbers into 2 groups { 2, 8} , { 5, 3} . Thus the answer is ( 2 + 8) ^ 2 + ( 5 + 3) ^ 2 = 164 . In the second sample, one of the optimal solutions is to divide those 6 numbers into 3 groups { 1, 2} , { 1, 2} , { 1, 2} . Thus the answer is ( 1 + 2) ^ 2 + ( 1 + 2) ^ 2 + ( 1 + 2) ^ 2 = 27 .",
    "topics": [
      "greedy",
      "implementation",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Monotonic Renumeration",
    "url": "https://codeforces.com/problemset/problem/1102/E",
    "history": "You are given an array a consisting of n integers. Let' s denote monotonic renumeration of array a as an array b consisting of n integers such that all of the following conditions are met: b_ 1 = 0 ; for every pair of indices i and j such that 1 \u2264 i, j \u2264 n , if a_ i = a_ j , then b_ i = b_ j ( note that if a_ i a_ j , it is still possible that b_ i = b_ j ) ; for every index i \u2208 [ 1, n - 1] either b_ i = b_ i + 1 or b_ i + 1 = b_ i + 1 . For example, if a = [ 1, 2, 1, 2, 3] , then two possible monotonic renumerations of a are b = [ 0, 0, 0, 0, 0] and b = [ 0, 0, 0, 0, 1] . Your task is to calculate the number of different monotonic renumerations of a . The answer may be large, so print it modulo 998244353 .",
    "input": "The first line contains one integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of elements in a . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) .",
    "output": "Print one integer \u2014 the number of different monotonic renumerations of a , taken modulo 998244353 .",
    "note": " ",
    "topics": [
      "combinatorics",
      "sortings"
    ]
  },
  {
    "title": "Array K-Coloring",
    "url": "https://codeforces.com/problemset/problem/1102/B",
    "history": "You are given an array a consisting of n integer numbers. You have to color this array in k colors in such a way that: Each element of the array should be colored in some color; For each i from 1 to k there should be at least one element colored in the i - th color in the array; For each i from 1 to k all elements colored in the i - th color should be distinct. Obviously, such coloring might be impossible. In this case, print \" NO\" . Otherwise print \" YES\" and any coloring ( i. e. numbers c_ 1, c_ 2, . . . c_ n , where 1 \u2264 c_ i \u2264 k and c_ i is the color of the i - th element of the given array) satisfying the conditions above. If there are multiple answers, you can print any.",
    "input": "The first line of the input contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 5000 ) \u2014 the length of the array a and the number of colors, respectively. The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 5000 ) \u2014 elements of the array a .",
    "output": "If there is no answer, print \" NO\" . Otherwise print \" YES\" and any coloring ( i. e. numbers c_ 1, c_ 2, . . . c_ n , where 1 \u2264 c_ i \u2264 k and c_ i is the color of the i - th element of the given array) satisfying the conditions described in the problem statement. If there are multiple answers, you can print any.",
    "note": "In the first example the answer 2 1 2 1 is also acceptable. In the second example the answer 1 1 1 2 2 is also acceptable. There exist other acceptable answers for both examples.",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Division and Union",
    "url": "https://codeforces.com/problemset/problem/1101/C",
    "history": "There are n segments [ l_ i, r_ i] for 1 \u2264 i \u2264 n . You should divide all segments into two non- empty groups in such way that there is no pair of segments from different groups which have at least one common point, or say that it' s impossible to do it. Each segment should belong to exactly one group. To optimize testing process you will be given multitest.",
    "input": "The first line contains one integer T ( 1 \u2264 T \u2264 50000 ) \u2014 the number of queries. Each query contains description of the set of segments. Queries are independent. First line of each query contains single integer n ( 2 \u2264 n \u2264 10^ 5 ) \u2014 number of segments. It is guaranteed that \u2211n over all queries does not exceed 10^ 5 . The next n lines contains two integers l_ i , r_ i per line ( 1 \u2264 l_ i \u2264 r_ i \u2264 2 \u00b7 10^ 5 ) \u2014 the i - th segment.",
    "output": "For each query print n integers t_ 1, t_ 2, . . . , t_ n ( t_ i \u2208{ 1, 2} ) \u2014 for each segment ( in the same order as in the input) t_ i equals 1 if the i - th segment will belongs to the first group and 2 otherwise. If there are multiple answers, you can print any of them. If there is no answer, print - 1 .",
    "note": "In the first query the first and the second segments should be in different groups, but exact numbers don' t matter. In the second query the third segment intersects with the first and the second segments, so they should be in the same group, but then the other group becomes empty, so answer is - 1 . In the third query we can distribute segments in any way that makes groups non- empty, so any answer of 6 possible is correct.",
    "topics": [
      "sortings"
    ]
  },
  {
    "title": "Letters Rearranging",
    "url": "https://codeforces.com/problemset/problem/1093/B",
    "history": "You are given a string s consisting only of lowercase Latin letters. You can rearrange all letters of this string as you wish. Your task is to obtain a good string by rearranging the letters of the given string or report that it is impossible to do it. Let' s call a string good if it is not a palindrome. Palindrome is a string which is read from left to right the same as from right to left. For example, strings \" abacaba\" , \" aa\" and \" z\" are palindromes and strings \" bba\" , \" xd\" are not. You have to answer t independent queries.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 100 ) \u2014 number of queries. Each of the next t lines contains one string. The i - th line contains a string s_ i consisting only of lowercase Latin letter. It is guaranteed that the length of s_ i is from 1 to 1000 ( inclusive) .",
    "output": "Print t lines. In the i - th line print the answer to the i - th query: - 1 if it is impossible to obtain a good string by rearranging the letters of s_ i and any good string which can be obtained from the given one ( by rearranging the letters) otherwise.",
    "note": "In the first query we cannot rearrange letters to obtain a good string. Other examples ( not all) of correct answers to the second query: \" ababaca\" , \" abcabaa\" , \" baacaba\" . In the third query we can do nothing to obtain a good string.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "sortings",
      "strings"
    ]
  },
  {
    "title": "Teams Forming",
    "url": "https://codeforces.com/problemset/problem/1092/B",
    "history": "There are n students in a university. The number of students is even. The i - th student has programming skill equal to a_ i . The coach wants to form n/ 2 teams. Each team should consist of exactly two students, and each student should belong to exactly one team. Two students can form a team only if their skills are equal ( otherwise they cannot understand each other and cannot form a team) . Students can solve problems to increase their skill. One solved problem increases the skill by one. The coach wants to know the minimum total number of problems students should solve to form exactly n/ 2 teams ( i. e. each pair of students should form a team) . Your task is to find this number.",
    "input": "The first line of the input contains one integer n ( 2 \u2264 n \u2264 100 ) \u2014 the number of students. It is guaranteed that n is even. The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 100 ) , where a_ i is the skill of the i - th student.",
    "output": "Print one number \u2014 the minimum total number of problems students should solve to form exactly n/ 2 teams.",
    "note": "In the first example the optimal teams will be: ( 3, 4) , ( 1, 6) and ( 2, 5) , where numbers in brackets are indices of students. Then, to form the first team the third student should solve 1 problem, to form the second team nobody needs to solve problems and to form the third team the second student should solve 4 problems so the answer is 1 + 4 = 5 . In the second example the first student should solve 99 problems to form a team with the second one.",
    "topics": [
      "sortings"
    ]
  },
  {
    "title": "New Year and the Acquaintance Estimation",
    "url": "https://codeforces.com/problemset/problem/1091/E",
    "history": "Bob is an active user of the social network Faithbug. On this network, people are able to engage in a mutual friendship. That is, if a is a friend of b , then b is also a friend of a . Each user thus has a non- negative amount of friends. This morning, somebody anonymously sent Bob the following link: graph realization problem and Bob wants to know who that was. In order to do that, he first needs to know how the social network looks like. He investigated the profile of every other person on the network and noted down the number of his friends. However, he neglected to note down the number of his friends. Help him find out how many friends he has. Since there may be many possible answers, print all of them.",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 5 \u00b7 10^ 5 ) , the number of people on the network excluding Bob. The second line contains n numbers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 n ) , with a_ i being the number of people that person i is a friend of.",
    "output": "Print all possible values of a_ n+ 1 \u2014 the amount of people that Bob can be friend of, in increasing order. If no solution exists, output - 1 .",
    "note": "In the first test case, the only solution is that everyone is friends with everyone. That is why Bob should have 3 friends. In the second test case, there are three possible solutions ( apart from symmetries) : a is friend of b , c is friend of d , and Bob has no friends, or a is a friend of b and both c and d are friends with Bob, or Bob is friends of everyone. The third case is impossible to solve, as the second person needs to be a friend with everybody, but the first one is a complete stranger.",
    "topics": [
      "binary search",
      "data structures",
      "graphs",
      "greedy",
      "implementation",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Ehab and subtraction",
    "url": "https://codeforces.com/problemset/problem/1088/B",
    "history": "You' re given an array a . You should repeat the following operation k times: find the minimum non- zero element in the array, print it, and then subtract it from all the non- zero elements of the array. If all the elements are 0s, just print 0.",
    "input": "The first line contains integers n and k ( 1 \u2264 n, k \u2264 10^ 5) , the length of the array and the number of operations you should perform. The second line contains n space- separated integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9) , the elements of the array.",
    "output": "Print the minimum non- zero element before each operation in a new line.",
    "note": "In the first sample: In the first step: the array is [ 1, 2, 3] , so the minimum non- zero element is 1. In the second step: the array is [ 0, 1, 2] , so the minimum non- zero element is 1. In the third step: the array is [ 0, 0, 1] , so the minimum non- zero element is 1. In the fourth and fifth step: the array is [ 0, 0, 0] , so we printed 0. In the second sample: In the first step: the array is [ 10, 3, 5, 3] , so the minimum non- zero element is 3. In the second step: the array is [ 7, 0, 2, 0] , so the minimum non- zero element is 2.",
    "topics": [
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Multi-Subject Competition",
    "url": "https://codeforces.com/problemset/problem/1082/C",
    "history": "A multi- subject competition is coming! The competition has m different subjects participants can choose from. That' s why Alex ( the coach) should form a competition delegation among his students. He has n candidates. For the i - th person he knows subject s_ i the candidate specializes in and r_ i \u2014 a skill level in his specialization ( this level can be negative! ) . The rules of the competition require each delegation to choose some subset of subjects they will participate in. The only restriction is that the number of students from the team participating in each of the chosen subjects should be the same. Alex decided that each candidate would participate only in the subject he specializes in. Now Alex wonders whom he has to choose to maximize the total sum of skill levels of all delegates, or just skip the competition this year if every valid non- empty delegation has negative sum. ( Of course, Alex doesn' t have any spare money so each delegate he chooses must participate in the competition) .",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 10^ 5 , 1 \u2264 m \u2264 10^ 5 ) \u2014 the number of candidates and the number of subjects. The next n lines contains two integers per line: s_ i and r_ i ( 1 \u2264 s_ i \u2264 m , - 10^ 4 \u2264 r_ i \u2264 10^ 4 ) \u2014 the subject of specialization and the skill level of the i - th candidate.",
    "output": "Print the single integer \u2014 the maximum total sum of skills of delegates who form a valid delegation ( according to rules above) or 0 if every valid non- empty delegation has negative sum.",
    "note": "In the first example it' s optimal to choose candidates 1 , 2 , 3 , 4 , so two of them specialize in the 2 - nd subject and other two in the 3 - rd. The total sum is 6 + 6 + 5 + 5 = 22 . In the second example it' s optimal to choose candidates 1 , 2 and 5 . One person in each subject and the total sum is 6 + 6 + 11 = 23 . In the third example it' s impossible to obtain a non- negative sum.",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Maximum Distance",
    "url": "https://codeforces.com/problemset/problem/1081/D",
    "history": "Chouti was tired of the tedious homework, so he opened up an old programming problem he created years ago. You are given a connected undirected graph with n vertices and m weighted edges. There are k special vertices: x_ 1, x_ 2, . . . , x_ k . Let' s define the cost of the path as the maximum weight of the edges in it. And the distance between two vertexes as the minimum cost of the paths connecting them. For each special vertex, find another special vertex which is farthest from it ( in terms of the previous paragraph, i. e. the corresponding distance is maximum possible) and output the distance between them. The original constraints are really small so he thought the problem was boring. Now, he raises the constraints and hopes you can solve it for him.",
    "input": "The first line contains three integers n , m and k ( 2 \u2264 k \u2264 n \u2264 10^ 5 , n- 1 \u2264 m \u2264 10^ 5 ) \u2014 the number of vertices, the number of edges and the number of special vertices. The second line contains k distinct integers x_ 1, x_ 2, . . . , x_ k ( 1 \u2264 x_ i \u2264 n ) . Each of the following m lines contains three integers u , v and w ( 1 \u2264 u, v \u2264 n, 1 \u2264 w \u2264 10^ 9 ) , denoting there is an edge between u and v of weight w . The given graph is undirected, so an edge ( u, v) can be used in the both directions. The graph may have multiple edges and self- loops. It is guaranteed, that the graph is connected.",
    "output": "The first and only line should contain k integers. The i - th integer is the distance between x_ i and the farthest special vertex from it.",
    "note": "In the first example, the distance between vertex 1 and 2 equals to 2 because one can walk through the edge of weight 2 connecting them. So the distance to the farthest node for both 1 and 2 equals to 2 . In the second example, one can find that distance between 1 and 2 , distance between 1 and 3 are both 3 and the distance between 2 and 3 is 2 . The graph may have multiple edges between and self- loops, as in the first example.",
    "topics": [
      "dsu",
      "graphs",
      "shortest paths",
      "sortings"
    ]
  },
  {
    "title": "Katya and Segments Sets",
    "url": "https://codeforces.com/problemset/problem/1080/F",
    "history": "It is a very important day for Katya. She has a test in a programming class. As always, she was given an interesting problem that she solved very fast. Can you solve that problem? You are given n ordered segments sets. Each segment can be represented as a pair of two integers [ l, r] where l\u2264 r . Each set can contain an arbitrary number of segments ( even 0 ) . It is possible that some segments are equal. You are also given m queries, each of them can be represented as four numbers: a, b, x, y . For each segment, find out whether it is true that each set p ( a\u2264 p\u2264 b ) contains at least one segment [ l, r] that lies entirely on the segment [ x, y] , that is x\u2264 l\u2264 r\u2264 y . Find out the answer to each query. Note that you need to solve this problem online. That is, you will get a new query only after you print the answer for the previous query. InteractionAfter printing a query, do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use: fflush( stdout) or cout. flush( ) in C+ + ; System. out. flush( ) in Java; flush( output) in Pascal; stdout. flush( ) in Python; see documentation for other languages.",
    "input": "The first line contains three integers n , m , and k ( 1\u2264 n, m\u2264 10^ 5, 1\u2264 k\u2264 3\u00b710^ 5) \u2014 the number of sets, queries, and segments respectively. Each of the next k lines contains three integers l , r , and p ( 1\u2264 l\u2264 r\u2264 10^ 9, 1\u2264 p\u2264 n) \u2014 the limits of the segment and the index of a set, to which this segment belongs. Each of the next m lines contains four integers a, b, x, y ( 1\u2264 a\u2264 b\u2264 n, 1\u2264 x\u2264 y\u2264 10^ 9) \u2014 the description of the query.",
    "output": "For each query, print \" yes\" or \" no\" in a new line.",
    "note": "For the first query, the answer is negative since the second set does not contain a segment that lies on the segment [ 2, 3] . In the second query, the first set contains [ 2, 3] , and the second set contains [ 2, 4] . In the third query, the first set contains [ 2, 3] , the second set contains [ 2, 4] , and the third set contains [ 2, 5] . In the fourth query, the second set does not contain a segment that lies on the segment [ 3, 6] . In the fifth query, the second set contains [ 2, 4] , the third set contains [ 2, 5] , and the fourth contains [ 7, 9] .",
    "topics": [
      "data structures",
      "interactive",
      "sortings"
    ]
  },
  {
    "title": "Thematic Contests",
    "url": "https://codeforces.com/problemset/problem/1077/E",
    "history": "Polycarp has prepared n competitive programming problems. The topic of the i - th problem is a_ i , and some problems' topics may coincide. Polycarp has to host several thematic contests. All problems in each contest should have the same topic, and all contests should have pairwise distinct topics. He may not use all the problems. It is possible that there are no contests for some topics. Polycarp wants to host competitions on consecutive days, one contest per day. Polycarp wants to host a set of contests in such a way that: number of problems in each contest is exactly twice as much as in the previous contest ( one day ago) , the first contest can contain arbitrary number of problems; the total number of problems in all the contests should be maximized. Your task is to calculate the maximum number of problems in the set of thematic contests. Note, that you should not maximize the number of contests.",
    "input": "The first line of the input contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of problems Polycarp has prepared. The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) where a_ i is the topic of the i - th problem.",
    "output": "Print one integer \u2014 the maximum number of problems in the set of thematic contests.",
    "note": "In the first example the optimal sequence of contests is: 2 problems of the topic 1 , 4 problems of the topic 2 , 8 problems of the topic 10 . In the second example the optimal sequence of contests is: 3 problems of the topic 3 , 6 problems of the topic 6 . In the third example you can take all the problems with the topic 1337 ( the number of such problems is 3 so the answer is 3 ) and host a single contest.",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Cutting Out",
    "url": "https://codeforces.com/problemset/problem/1077/D",
    "history": "You are given an array s consisting of n integers. You have to find any array t of length k such that you can cut out maximum number of copies of array t from array s . Cutting out the copy of t means that for each element t_ i of array t you have to find t_ i in s and remove it from s . If for some t_ i you cannot find such element in s , then you cannot cut out one more copy of t . The both arrays can contain duplicate elements. For example, if s = [ 1, 2, 3, 2, 4, 3, 1] and k = 3 then one of the possible answers is t = [ 1, 2, 3] . This array t can be cut out 2 times. To cut out the first copy of t you can use the elements [ 1, 2, 3, 2, 4, 3, 1] ( use the highlighted elements) . After cutting out the first copy of t the array s can look like [ 1, 3, 2, 4] . To cut out the second copy of t you can use the elements [ 1, 3, 2, 4] . After cutting out the second copy of t the array s will be [ 4] . Your task is to find such array t that you can cut out the copy of t from s maximum number of times. If there are multiple answers, you may choose any of them.",
    "input": "The first line of the input contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of elements in s and the desired number of elements in t , respectively. The second line of the input contains exactly n integers s_ 1, s_ 2, . . . , s_ n ( 1 \u2264 s_ i \u2264 2 \u00b7 10^ 5 ) .",
    "output": "Print k integers \u2014 the elements of array t such that you can cut out maximum possible number of copies of this array from s . If there are multiple answers, print any of them. The required array t can contain duplicate elements. All the elements of t ( t_ 1, t_ 2, . . . , t_ k ) should satisfy the following condition: 1 \u2264 t_ i \u2264 2 \u00b7 10^ 5 .",
    "note": "The first example is described in the problem statement. In the second example the only answer is [ 7, 3, 1, 3] and any its permutations. It can be shown that you cannot choose any other array such that the maximum number of copies you can cut out would be equal to 2 . In the third example the array t can be cut out 5 times.",
    "topics": [
      "binary search",
      "sortings"
    ]
  },
  {
    "title": "Taxi drivers and Lyft",
    "url": "https://codeforces.com/problemset/problem/1075/B",
    "history": "Palo Alto is an unusual city because it is an endless coordinate line. It is also known for the office of Lyft Level 5. Lyft has become so popular so that it is now used by all m taxi drivers in the city, who every day transport the rest of the city residents \u2014 n riders. Each resident ( including taxi drivers) of Palo- Alto lives in its unique location ( there is no such pair of residents that their coordinates are the same) . The Lyft system is very clever: when a rider calls a taxi, his call does not go to all taxi drivers, but only to the one that is the closest to that person. If there are multiple ones with the same distance, then to taxi driver with a smaller coordinate is selected. But one morning the taxi drivers wondered: how many riders are there that would call the given taxi driver if they were the first to order a taxi on that day? In other words, you need to find for each taxi driver i the number a_ i \u2014 the number of riders that would call the i - th taxi driver when all drivers and riders are at their home? The taxi driver can neither transport himself nor other taxi drivers.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 10^ 5 ) \u2014 number of riders and taxi drivers. The second line contains n + m integers x_ 1, x_ 2, . . . , x_ n+ m ( 1 \u2264 x_ 1 < x_ 2 < . . . < x_ n+ m\u2264 10^ 9 ) , where x_ i is the coordinate where the i - th resident lives. The third line contains n + m integers t_ 1, t_ 2, . . . , t_ n+ m ( 0 \u2264 t_ i \u2264 1 ) . If t_ i = 1 , then the i - th resident is a taxi driver, otherwise t_ i = 0 . It is guaranteed that the number of i such that t_ i = 1 is equal to m .",
    "output": "Print m integers a_ 1, a_ 2, . . . , a_ m , where a_ i is the answer for the i - th taxi driver. The taxi driver has the number i if among all the taxi drivers he lives in the i - th smallest coordinate ( see examples for better understanding) .",
    "note": "In the first example, we have only one taxi driver, which means an order from any of n riders will go to him. In the second example, the first taxi driver lives at the point with the coordinate 2 , and the second one lives at the point with the coordinate 6 . Obviously, the nearest taxi driver to the rider who lives on the 3 coordinate is the first one, and to the rider who lives on the coordinate 5 is the second one. The rider who lives on the 4 coordinate has the same distance to the first and the second taxi drivers, but since the first taxi driver has a smaller coordinate, the call from this rider will go to the first taxi driver. In the third example, we have one rider and the taxi driver nearest to him is the fourth one.",
    "topics": [
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "TV Shows",
    "url": "https://codeforces.com/problemset/problem/1061/D",
    "history": "There are n TV shows you want to watch. Suppose the whole time is split into equal parts called \" minutes\" . The i - th of the shows is going from l_ i - th to r_ i - th minute, both ends inclusive. You need a TV to watch a TV show and you can' t watch two TV shows which air at the same time on the same TV, so it is possible you will need multiple TVs in some minutes. For example, if segments [ l_ i, r_ i] and [ l_ j, r_ j] intersect, then shows i and j can' t be watched simultaneously on one TV. Once you start watching a show on some TV it is not possible to \" move\" it to another TV ( since it would be too distracting) , or to watch another show on the same TV until this show ends. There is a TV Rental shop near you. It rents a TV for x rupees, and charges y ( y < x ) rupees for every extra minute you keep the TV. So in order to rent a TV for minutes [ a; b] you will need to pay x + y \u00b7 ( b - a) . You can assume, that taking and returning of the TV doesn' t take any time and doesn' t distract from watching other TV shows. Find the minimum possible cost to view all shows. Since this value could be too large, print it modulo 10^ 9 + 7 .",
    "input": "The first line contains integers n , x and y ( 1 \u2264 n \u2264 10^ 5 , 1 \u2264 y < x \u2264 10^ 9 ) \u2014 the number of TV shows, the cost to rent a TV for the first minute and the cost to rent a TV for every subsequent minute. Each of the next n lines contains two integers l_ i and r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 10^ 9 ) denoting the start and the end minute of the i - th TV show.",
    "output": "Print exactly one integer \u2014 the minimum cost to view all the shows taken modulo 10^ 9 + 7 .",
    "note": "In the first example, the optimal strategy would be to rent 3 TVs to watch: Show [ 1, 2] on the first TV, Show [ 4, 10] on the second TV, Shows [ 2, 4] , [ 5, 9] , [ 10, 11] on the third TV. This way the cost for the first TV is 4 + 3 \u00b7 ( 2 - 1) = 7 , for the second is 4 + 3 \u00b7 ( 10 - 4) = 22 and for the third is 4 + 3 \u00b7 ( 11 - 2) = 31 , which gives 60 int total. In the second example, it is optimal watch each show on a new TV. In third example, it is optimal to watch both shows on a new TV. Note that the answer is to be printed modulo 10^ 9 + 7 .",
    "topics": [
      "data structures",
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Views Matter",
    "url": "https://codeforces.com/problemset/problem/1061/B",
    "history": "You came to the exhibition and one exhibit has drawn your attention. It consists of n stacks of blocks, where the i - th stack consists of a_ i blocks resting on the surface. The height of the exhibit is equal to m . Consequently, the number of blocks in each stack is less than or equal to m . There is a camera on the ceiling that sees the top view of the blocks and a camera on the right wall that sees the side view of the blocks. Find the maximum number of blocks you can remove such that the views for both the cameras would not change. Note, that while originally all blocks are stacked on the floor, it is not required for them to stay connected to the floor after some blocks are removed. There is no gravity in the whole exhibition, so no block would fall down, even if the block underneath is removed. It is not allowed to move blocks by hand either.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 100 000 , 1 \u2264 m \u2264 10^ 9 ) \u2014 the number of stacks and the height of the exhibit. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 m ) \u2014 the number of blocks in each stack from left to right.",
    "output": "Print exactly one integer \u2014 the maximum number of blocks that can be removed.",
    "note": "The following pictures illustrate the first example and its possible solution. Blue cells indicate removed blocks. There are 10 blue cells, so the answer is 10 .",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Decorate Apple Tree",
    "url": "https://codeforces.com/problemset/problem/1056/D",
    "history": "There is one apple tree in Arkady' s garden. It can be represented as a set of junctions connected with branches so that there is only one way to reach any junctions from any other one using branches. The junctions are enumerated from 1 to n , the junction 1 is called the root. A subtree of a junction v is a set of junctions u such that the path from u to the root must pass through v . Note that v itself is included in a subtree of v . A leaf is such a junction that its subtree contains exactly one junction. The New Year is coming, so Arkady wants to decorate the tree. He will put a light bulb of some color on each leaf junction and then count the number happy junctions. A happy junction is such a junction t that all light bulbs in the subtree of t have different colors. Arkady is interested in the following question: for each k from 1 to n , what is the minimum number of different colors needed to make the number of happy junctions be greater than or equal to k ?",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of junctions in the tree. The second line contains n - 1 integers p_ 2 , p_ 3 , . . . , p_ n ( 1 \u2264 p_ i < i ) , where p_ i means there is a branch between junctions i and p_ i . It is guaranteed that this set of branches forms a tree.",
    "output": "Output n integers. The i - th of them should be the minimum number of colors needed to make the number of happy junctions be at least i .",
    "note": "In the first example for k = 1 and k = 2 we can use only one color: the junctions 2 and 3 will be happy. For k = 3 you have to put the bulbs of different colors to make all the junctions happy. In the second example for k = 4 you can, for example, put the bulbs of color 1 in junctions 2 and 4 , and a bulb of color 2 into junction 5 . The happy junctions are the ones with indices 2 , 3 , 4 and 5 then.",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "dp",
      "graphs",
      "greedy",
      "sortings",
      "trees"
    ]
  },
  {
    "title": "Pick Heroes",
    "url": "https://codeforces.com/problemset/problem/1056/C",
    "history": "Don' t you tell me what you think that I can beIf you say that Arkady is a bit old- fashioned playing checkers, you won' t be right. There is also a modern computer game Arkady and his friends are keen on. We won' t discuss its rules, the only feature important to this problem is that each player has to pick a distinct hero in the beginning of the game. There are 2 teams each having n players and 2n heroes to distribute between the teams. The teams take turns picking heroes: at first, the first team chooses a hero in its team, after that the second team chooses a hero and so on. Note that after a hero is chosen it becomes unavailable to both teams. The friends estimate the power of the i - th of the heroes as p_ i . Each team wants to maximize the total power of its heroes. However, there is one exception: there are m pairs of heroes that are especially strong against each other, so when any team chooses a hero from such a pair, the other team must choose the other one on its turn. Each hero is in at most one such pair. This is an interactive problem. You are to write a program that will optimally choose the heroes for one team, while the jury' s program will play for the other team. Note that the jury' s program may behave inefficiently, in this case you have to take the opportunity and still maximize the total power of your team. Formally, if you ever have chance to reach the total power of q or greater regardless of jury' s program choices, you must get q or greater to pass a test. InteractionWhen it is your turn, print a single integer x ( 1 \u2264 x \u2264 2n ) \u2014 the index of the hero chosen by you. Note that you can' t choose a hero previously chosen by either you of the other player, and you must follow the rules about special pairs of heroes. When it is the other team' s turn, read a line containing a single integer x ( 1 \u2264 x \u2264 2n ) \u2014 the index of the hero chosen by the other team. It is guaranteed that this index is not chosen before and that the other team also follows the rules about special pairs of heroes. After the last turn you should terminate without printing anything. After printing your choice do not forget to output end of line and flush the output. Otherwise you will get Idleness limit exceeded. To do this, use: fflush( stdout) or cout. flush( ) in C+ + ; System. out. flush( ) in Java; flush( output) in Pascal; stdout. flush( ) in Python; see documentation for other languages. Jury' s answer - 1 instead of a valid choice means that you made an invalid turn. Exit immediately after receiving - 1 and you will see Wrong answer verdict. Otherwise you can get an arbitrary verdict because your solution will continue to read from a closed stream.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 10^ 3 , 0 \u2264 m \u2264 n ) \u2014 the number of players in one team and the number of special pairs of heroes. The second line contains 2n integers p_ 1, p_ 2, . . . , p_ 2n ( 1 \u2264 p_ i \u2264 10^ 3 ) \u2014 the powers of the heroes. Each of the next m lines contains two integer a and b ( 1 \u2264 a, b \u2264 2n , a b ) \u2014 a pair of heroes that are especially strong against each other. It is guaranteed that each hero appears at most once in this list. The next line contains a single integer t ( 1 \u2264 t \u2264 2 ) \u2014 the team you are to play for. If t = 1 , the first turn is yours, otherwise you have the second turn. HacksIn order to hack, use the format described above with one additional line. In this line output 2n distinct integers from 1 to 2n \u2014 the priority order for the jury' s team. The jury' s team will on each turn select the first possible hero from this list. Here possible means that it is not yet taken and does not contradict the rules about special pair of heroes.",
    "output": " ",
    "note": "In the first example the first turn is yours. In example, you choose 6 , the other team is forced to reply with 2 . You choose 5 , the other team chooses 4 . Finally, you choose 3 and the other team choose 1 . In the second example you have the second turn. The other team chooses 6 , you choose 5 , forcing the other team to choose 1 . Now you choose 4 , the other team chooses 3 and you choose 2 .",
    "topics": [
      "greedy",
      "implementation",
      "interactive",
      "sortings"
    ]
  },
  {
    "title": "Train Hard, Win Easy",
    "url": "https://codeforces.com/problemset/problem/1043/E",
    "history": "Zibi is a competitive programming coach. There are n competitors who want to be prepared well. The training contests are quite unusual \u2013 there are two people in a team, two problems, and each competitor will code exactly one of them. Of course, people in one team will code different problems. Rules of scoring also aren' t typical. The first problem is always an implementation problem: you have to implement some well- known algorithm very fast and the time of your typing is rated. The second one is an awful geometry task and you just have to get it accepted in reasonable time. Here the length and difficulty of your code are important. After that, Zibi will give some penalty points ( possibly negative) for each solution and the final score of the team is the sum of them ( the less the score is, the better) . We know that the i - th competitor will always have score x_ i when he codes the first task and y_ i when he codes the second task. We can assume, that all competitors know each other' s skills and during the contest distribute the problems in the way that minimizes their final score. Remember that each person codes exactly one problem in a contest. Zibi wants all competitors to write a contest with each other. However, there are m pairs of people who really don' t like to cooperate and they definitely won' t write a contest together. Still, the coach is going to conduct trainings for all possible pairs of people, such that the people in pair don' t hate each other. The coach is interested for each participant, what will be his or her sum of scores of all teams he trained in?",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 300 000 , 0 \u2264 m \u2264 300 000 ) \u2014 the number of participants and the number of pairs of people who will not write a contest together. Each of the next n lines contains two integers x_ i and y_ i ( - 10^ 9 \u2264 x_ i, y_ i \u2264 10^ 9 ) \u2014 the scores which will the i - th competitor get on the first problem and on the second problem. It is guaranteed that there are no two people having both x_ i and y_ i same. Each of the next m lines contain two integers u_ i and v_ i ( 1 \u2264 u_ i, v_ i \u2264 n , u_ i v_ i ) \u2014 indices of people who don' t want to write a contest in one team. Each unordered pair of indices will appear at most once.",
    "output": "Output n integers \u2014 the sum of scores for all participants in the same order as they appear in the input.",
    "note": "In the first example, there will be only one team consisting of persons 1 and 3 . The optimal strategy for them is to assign the first task to the 3 - rd person and the second task to the 1 - st person, this will lead to score equal to 1 + 2 = 3 . In the second example, nobody likes anyone, so there won' t be any trainings. It seems that Zibi won' t be titled coach in that case. . .",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Leaf Sets",
    "url": "https://codeforces.com/problemset/problem/1042/F",
    "history": "You are given an undirected tree, consisting of n vertices. The vertex is called a leaf if it has exactly one vertex adjacent to it. The distance between some pair of vertices is the number of edges in the shortest path between them. Let' s call some set of leaves beautiful if the maximum distance between any pair of leaves in it is less or equal to k . You want to split all leaves into non- intersecting beautiful sets. What is the minimal number of sets in such a split?",
    "input": "The first line contains two integers n and k ( 3 \u2264 n \u2264 10^ 6 , 1 \u2264 k \u2264 10^ 6 ) \u2014 the number of vertices in the tree and the maximum distance between any pair of leaves in each beautiful set. Each of the next n - 1 lines contains two integers v_ i and u_ i ( 1 \u2264 v_ i, u_ i \u2264 n ) \u2014 the description of the i - th edge. It is guaranteed that the given edges form a tree.",
    "output": "Print a single integer \u2014 the minimal number of beautiful sets the split can have.",
    "note": "Here is the graph for the first example:",
    "topics": [
      "data structures",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "sortings",
      "trees"
    ]
  },
  {
    "title": "Heist",
    "url": "https://codeforces.com/problemset/problem/1041/A",
    "history": "There was an electronic store heist last night. All keyboards which were in the store yesterday were numbered in ascending order from some integer number x . For example, if x = 4 and there were 3 keyboards in the store, then the devices had indices 4 , 5 and 6 , and if x = 10 and there were 7 of them then the keyboards had indices 10 , 11 , 12 , 13 , 14 , 15 and 16 . After the heist, only n keyboards remain, and they have indices a_ 1, a_ 2, . . . , a_ n . Calculate the minimum possible number of keyboards that have been stolen. The staff remember neither x nor the number of keyboards in the store before the heist.",
    "input": "The first line contains single integer n ( 1 \u2264 n \u2264 1 000) \u2014 the number of keyboards in the store that remained after the heist. The second line contains n distinct integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9) \u2014 the indices of the remaining keyboards. The integers a_ i are given in arbitrary order and are pairwise distinct.",
    "output": "Print the minimum possible number of keyboards that have been stolen if the staff remember neither x nor the number of keyboards in the store before the heist.",
    "note": "In the first example, if x= 8 then minimum number of stolen keyboards is equal to 2 . The keyboards with indices 9 and 11 were stolen during the heist. In the second example, if x= 4 then nothing was stolen during the heist.",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Network Safety",
    "url": "https://codeforces.com/problemset/problem/1039/C",
    "history": "The Metropolis computer network consists of n servers, each has an encryption key in the range from 0 to 2^ k - 1 assigned to it. Let c_ i be the encryption key assigned to the i - th server. Additionally, m pairs of servers are directly connected via a data communication channel. Because of the encryption algorithms specifics, a data communication channel can only be considered safe if the two servers it connects have distinct encryption keys. The initial assignment of encryption keys is guaranteed to keep all data communication channels safe. You have been informed that a new virus is actively spreading across the internet, and it is capable to change the encryption key of any server it infects. More specifically, the virus body contains some unknown number x in the same aforementioned range, and when server i is infected, its encryption key changes from c_ i to c_ i \u2295 x , where \u2295 denotes the bitwise XOR operation. Sadly, you know neither the number x nor which servers of Metropolis are going to be infected by the dangerous virus, so you have decided to count the number of such situations in which all data communication channels remain safe. Formally speaking, you need to find the number of pairs ( A, x) , where A is some ( possibly empty) subset of the set of servers and x is some number in the range from 0 to 2^ k - 1 , such that when all servers from the chosen subset A and none of the others are infected by a virus containing the number x , all data communication channels remain safe. Since this number can be quite big, you are asked to find its remainder modulo 10^ 9 + 7 .",
    "input": "The first line of input contains three integers n , m and k ( 1 \u2264 n \u2264 500 000 , 0 \u2264 m \u2264min( n( n - 1) / 2, 500 000) , 0 \u2264 k \u2264 60 ) \u2014 the number of servers, the number of pairs of servers directly connected by a data communication channel, and the parameter k , which defines the range of possible values for encryption keys. The next line contains n integers c_ i ( 0 \u2264 c_ i \u2264 2^ k - 1 ) , the i - th of which is the encryption key used by the i - th server. The next m lines contain two integers u_ i and v_ i each ( 1 \u2264 u_ i, v_ i \u2264 n , u_ i v_ i ) denoting that those servers are connected by a data communication channel. It is guaranteed that each pair of servers appears in this list at most once.",
    "output": "The only output line should contain a single integer \u2014 the number of safe infections of some subset of servers by a virus with some parameter, modulo 10^ 9 + 7 .",
    "note": "Consider the first example. Possible values for the number x contained by the virus are 0 , 1 , 2 and 3 . For values 0 , 2 and 3 the virus can infect any subset of the set of servers, which gives us 16 pairs for each values. A virus containing the number 1 can infect either all of the servers, or none. This gives us 16 + 2 + 16 + 16 = 50 pairs in total.",
    "topics": [
      "dfs and similar",
      "dsu",
      "graphs",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Gambling",
    "url": "https://codeforces.com/problemset/problem/1038/C",
    "history": "Two players A and B have a list of n integers each. They both want to maximize the subtraction between their score and their opponent' s score. In one turn, a player can either add to his score any element from his list ( assuming his list is not empty) , the element is removed from the list afterward. Or remove an element from his opponent' s list ( assuming his opponent' s list is not empty) . Note, that in case there are equal elements in the list only one of them will be affected in the operations above. For example, if there are elements { 1, 2, 2, 3} in a list and you decided to choose 2 for the next turn, only a single instance of 2 will be deleted ( and added to the score, if necessary) . The player A starts the game and the game stops when both lists are empty. Find the difference between A' s score and B' s score at the end of the game, if both of the players are playing optimally. Optimal play between two players means that both players choose the best possible strategy to achieve the best possible outcome for themselves. In this problem, it means that each player, each time makes a move, which maximizes the final difference between his score and his opponent' s score, knowing that the opponent is doing the same.",
    "input": "The first line of input contains an integer n ( 1 \u2264 n \u2264 100 000 ) \u2014 the sizes of the list. The second line contains n integers a_ i ( 1 \u2264 a_ i \u2264 10^ 6 ) , describing the list of the player A, who starts the game. The third line contains n integers b_ i ( 1 \u2264 b_ i \u2264 10^ 6 ) , describing the list of the player B.",
    "output": "Output the difference between A' s score and B' s score ( A- B ) if both of them are playing optimally.",
    "note": "In the first example, the game could have gone as follows: A removes 5 from B' s list. B removes 4 from A' s list. A takes his 1 . B takes his 1 . Hence, A' s score is 1 , B' s score is 1 and difference is 0 . There is also another optimal way of playing: A removes 5 from B' s list. B removes 4 from A' s list. A removes 1 from B' s list. B removes 1 from A' s list. The difference in the scores is still 0 . In the second example, irrespective of the moves the players make, they will end up with the same number of numbers added to their score, so the difference will be 0 .",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Maximal Intersection",
    "url": "https://codeforces.com/problemset/problem/1029/C",
    "history": "You are given n segments on a number line; each endpoint of every segment has integer coordinates. Some segments can degenerate to points. Segments can intersect with each other, be nested in each other or even coincide. The intersection of a sequence of segments is such a maximal set of points ( not necesserily having integer coordinates) that each point lies within every segment from the sequence. If the resulting set isn' t empty, then it always forms some continuous segment. The length of the intersection is the length of the resulting segment or 0 in case the intersection is an empty set. For example, the intersection of segments [ 1; 5] and [ 3; 10] is [ 3; 5] ( length 2 ) , the intersection of segments [ 1; 5] and [ 5; 7] is [ 5; 5] ( length 0 ) and the intersection of segments [ 1; 5] and [ 6; 6] is an empty set ( length 0 ) . Your task is to remove exactly one segment from the given sequence in such a way that the intersection of the remaining ( n - 1) segments has the maximal possible length.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 3 \u00b7 10^ 5 ) \u2014 the number of segments in the sequence. Each of the next n lines contains two integers l_ i and r_ i ( 0 \u2264 l_ i \u2264 r_ i \u2264 10^ 9 ) \u2014 the description of the i - th segment.",
    "output": "Print a single integer \u2014 the maximal possible length of the intersection of ( n - 1) remaining segments after you remove exactly one segment from the sequence.",
    "note": "In the first example you should remove the segment [ 3; 3] , the intersection will become [ 2; 3] ( length 1 ) . Removing any other segment will result in the intersection [ 3; 3] ( length 0 ) . In the second example you should remove the segment [ 1; 3] or segment [ 2; 6] , the intersection will become [ 2; 4] ( length 2 ) or [ 1; 3] ( length 2 ) , respectively. Removing any other segment will result in the intersection [ 2; 3] ( length 1 ) . In the third example the intersection will become an empty set no matter the segment you remove. In the fourth example you will get the intersection [ 3; 10] ( length 7 ) if you remove the segment [ 1; 5] or the intersection [ 1; 5] ( length 4 ) if you remove the segment [ 3; 10] .",
    "topics": [
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Rectangles",
    "url": "https://codeforces.com/problemset/problem/1028/C",
    "history": "You are given n rectangles on a plane with coordinates of their bottom left and upper right points. Some ( n- 1) of the given n rectangles have some common point. A point belongs to a rectangle if this point is strictly inside the rectangle or belongs to its boundary. Find any point with integer coordinates that belongs to at least ( n- 1) given rectangles.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 132 674 ) \u2014 the number of given rectangles. Each the next n lines contains four integers x_ 1 , y_ 1 , x_ 2 and y_ 2 ( - 10^ 9 \u2264 x_ 1 < x_ 2 \u2264 10^ 9 , - 10^ 9 \u2264 y_ 1 < y_ 2 \u2264 10^ 9 ) \u2014 the coordinates of the bottom left and upper right corners of a rectangle.",
    "output": "Print two integers x and y \u2014 the coordinates of any point that belongs to at least ( n- 1) given rectangles.",
    "note": "The picture below shows the rectangles in the first and second samples. The possible answers are highlighted. The picture below shows the rectangles in the third and fourth samples.",
    "topics": [
      "geometry",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Doggo Recoloring",
    "url": "https://codeforces.com/problemset/problem/1025/A",
    "history": "Panic is rising in the committee for doggo standardization \u2014 the puppies of the new brood have been born multi- colored! In total there are 26 possible colors of puppies in the nature and they are denoted by letters from ' a' to ' z' inclusive. The committee rules strictly prohibit even the smallest diversity between doggos and hence all the puppies should be of the same color. Thus Slava, the committee employee, has been assigned the task to recolor some puppies into other colors in order to eliminate the difference and make all the puppies have one common color. Unfortunately, due to bureaucratic reasons and restricted budget, there' s only one operation Slava can perform: he can choose a color x such that there are currently at least two puppies of color x and recolor all puppies of the color x into some arbitrary color y . Luckily, this operation can be applied multiple times ( including zero) . For example, if the number of puppies is 7 and their colors are represented as the string \" abababc\" , then in one operation Slava can get the results \" zbzbzbc\" , \" bbbbbbc\" , \" aaaaaac\" , \" acacacc\" and others. However, if the current color sequence is \" abababc\" , then he can' t choose x = ' c' right now, because currently only one puppy has the color ' c' . Help Slava and the committee determine whether it is possible to standardize all the puppies, i. e. after Slava' s operations all the puppies should have the same color.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of puppies. The second line contains a string s of length n consisting of lowercase Latin letters, where the i - th symbol denotes the i - th puppy' s color.",
    "output": "If it' s possible to recolor all puppies into one color, print \" Yes\" . Otherwise print \" No\" . Output the answer without quotation signs.",
    "note": "In the first example Slava can perform the following steps: take all puppies of color ' a' ( a total of two) and recolor them into ' b' ; take all puppies of color ' d' ( a total of two) and recolor them into ' c' ; take all puppies of color ' b' ( three puppies for now) and recolor them into ' c' . In the second example it' s impossible to recolor any of the puppies. In the third example all the puppies' colors are the same; thus there' s no need to recolor anything.",
    "topics": [
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Large Triangle",
    "url": "https://codeforces.com/problemset/problem/1019/D",
    "history": "There is a strange peculiarity: if you connect the cities of Rostov, Taganrog and Shakhty, peculiarly, you get a triangle\u00abUnbelievable But True\u00bbStudents from many different parts of Russia and abroad come to Summer Informatics School. You marked the hometowns of the SIS participants on a map. Now you decided to prepare an interesting infographic based on this map. The first thing you chose to do is to find three cities on this map, such that they form a triangle with area S .",
    "input": "The first line of input contains two integers n and S ( 3 \u2264 n \u2264 2000 , 1 \u2264 S \u2264 2 \u00b7 10^ 18 ) \u2014 the number of cities on the map and the area of the triangle to be found. The next n lines contain descriptions of the cities, one per line. Each city is described by its integer coordinates x_ i , y_ i ( - 10^ 9 \u2264 x_ i, y_ i \u2264 10^ 9 ) . It is guaranteed that all cities are located at distinct points. It is also guaranteed that no three cities lie on the same line.",
    "output": "If the solution doesn' t exist \u2014 print \u00abNo\u00bb. Otherwise, print \u00abYes\u00bb, followed by three pairs of coordinates ( x, y) \u2014 the locations of the three cities, which form the triangle of area S .",
    "note": " ",
    "topics": [
      "binary search",
      "geometry",
      "sortings"
    ]
  },
  {
    "title": "Songs Compression",
    "url": "https://codeforces.com/problemset/problem/1015/C",
    "history": "Ivan has n songs on his phone. The size of the i - th song is a_ i bytes. Ivan also has a flash drive which can hold at most m bytes in total. Initially, his flash drive is empty. Ivan wants to copy all n songs to the flash drive. He can compress the songs. If he compresses the i - th song, the size of the i - th song reduces from a_ i to b_ i bytes ( b_ i < a_ i ) . Ivan can compress any subset of the songs ( possibly empty) and copy all the songs to his flash drive if the sum of their sizes is at most m . He can compress any subset of the songs ( not necessarily contiguous) . Ivan wants to find the minimum number of songs he needs to compress in such a way that all his songs fit on the drive ( i. e. the sum of their sizes is less than or equal to m ) . If it is impossible to copy all the songs ( even if Ivan compresses all the songs) , print \" - 1\" . Otherwise print the minimum number of songs Ivan needs to compress.",
    "input": "The first line of the input contains two integers n and m ( 1 \u2264 n \u2264 10^ 5, 1 \u2264 m \u2264 10^ 9 ) \u2014 the number of the songs on Ivan' s phone and the capacity of Ivan' s flash drive. The next n lines contain two integers each: the i - th line contains two integers a_ i and b_ i ( 1 \u2264 a_ i, b_ i \u2264 10^ 9 , a_ i > b_ i ) \u2014 the initial size of the i - th song and the size of the i - th song after compression.",
    "output": "If it is impossible to compress a subset of the songs in such a way that all songs fit on the flash drive, print \" - 1\" . Otherwise print the minimum number of the songs to compress.",
    "note": "In the first example Ivan can compress the first and the third songs so after these moves the sum of sizes will be equal to 8 + 7 + 1 + 5 = 21 \u2264 21 . Also Ivan can compress the first and the second songs, then the sum of sizes will be equal 8 + 4 + 3 + 5 = 20 \u2264 21 . Note that compressing any single song is not sufficient to copy all the songs on the flash drive ( for example, after compressing the second song the sum of sizes will be equal to 10 + 4 + 3 + 5 = 22 > 21 ) . In the second example even if Ivan compresses all the songs the sum of sizes will be equal 8 + 4 + 1 + 4 = 17 > 16 .",
    "topics": [
      "sortings"
    ]
  },
  {
    "title": "Photo of The Sky",
    "url": "https://codeforces.com/problemset/problem/1012/A",
    "history": "Pavel made a photo of his favourite stars in the sky. His camera takes a photo of all points of the sky that belong to some rectangle with sides parallel to the coordinate axes. Strictly speaking, it makes a photo of all points with coordinates ( x, y) , such that x_ 1 \u2264 x \u2264 x_ 2 and y_ 1 \u2264 y \u2264 y_ 2 , where ( x_ 1, y_ 1) and ( x_ 2, y_ 2) are coordinates of the left bottom and the right top corners of the rectangle being photographed. The area of this rectangle can be zero. After taking the photo, Pavel wrote down coordinates of n of his favourite stars which appeared in the photo. These points are not necessarily distinct, there can be multiple stars in the same point of the sky. Pavel has lost his camera recently and wants to buy a similar one. Specifically, he wants to know the dimensions of the photo he took earlier. Unfortunately, the photo is also lost. His notes are also of not much help; numbers are written in random order all over his notepad, so it' s impossible to tell which numbers specify coordinates of which points. Pavel asked you to help him to determine what are the possible dimensions of the photo according to his notes. As there are multiple possible answers, find the dimensions with the minimal possible area of the rectangle.",
    "input": "The first line of the input contains an only integer n ( 1 \u2264 n \u2264 100 000 ) , the number of points in Pavel' s records. The second line contains 2 \u00b7 n integers a_ 1 , a_ 2 , . . . , a_ 2 \u00b7 n ( 1 \u2264 a_ i \u2264 10^ 9 ) , coordinates, written by Pavel in some order.",
    "output": "Print the only integer, the minimal area of the rectangle which could have contained all points from Pavel' s records.",
    "note": "In the first sample stars in Pavel' s records can be ( 1, 3) , ( 1, 3) , ( 2, 3) , ( 2, 4) . In this case, the minimal area of the rectangle, which contains all these points is 1 ( rectangle with corners at ( 1, 3) and ( 2, 4) ) .",
    "topics": [
      "brute force",
      "implementation",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Stages",
    "url": "https://codeforces.com/problemset/problem/1011/A",
    "history": "Natasha is going to fly to Mars. She needs to build a rocket, which consists of several stages in some order. Each of the stages is defined by a lowercase Latin letter. This way, the rocket can be described by the string \u2014 concatenation of letters, which correspond to the stages. There are n stages available. The rocket must contain exactly k of them. Stages in the rocket should be ordered by their weight. So, after the stage with some letter can go only stage with a letter, which is at least two positions after in the alphabet ( skipping one letter in between, or even more) . For example, after letter ' c' can' t go letters ' a' , ' b' , ' c' and ' d' , but can go letters ' e' , ' f' , . . . , ' z' . For the rocket to fly as far as possible, its weight should be minimal. The weight of the rocket is equal to the sum of the weights of its stages. The weight of the stage is the number of its letter in the alphabet. For example, the stage ' a ' weighs one ton, ' b ' weighs two tons, and' z' \u2014 26 tons. Build the rocket with the minimal weight or determine, that it is impossible to build a rocket at all. Each stage can be used at most once.",
    "input": "The first line of input contains two integers \u2014 n and k ( 1 \u2264 k \u2264 n \u2264 50 ) \u2013 the number of available stages and the number of stages to use in the rocket. The second line contains string s , which consists of exactly n lowercase Latin letters. Each letter defines a new stage, which can be used to build the rocket. Each stage can be used at most once.",
    "output": "Print a single integer \u2014 the minimal total weight of the rocket or - 1, if it is impossible to build the rocket at all.",
    "note": "In the first example, the following rockets satisfy the condition: \" adx\" ( weight is 1+ 4+ 24= 29 ) ; \" ady\" ( weight is 1+ 4+ 25= 30 ) ; \" bdx\" ( weight is 2+ 4+ 24= 30 ) ; \" bdy\" ( weight is 2+ 4+ 25= 31 ) . Rocket \" adx\" has the minimal weight, so the answer is 29 . In the second example, target rocket is \" belo\" . Its weight is 2+ 5+ 12+ 15= 34 . In the third example, n= k= 2 , so the rocket must have both stages: ' a' and ' b' . This rocket doesn' t satisfy the condition, because these letters are adjacent in the alphabet. Answer is - 1.",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Turn the Rectangles",
    "url": "https://codeforces.com/problemset/problem/1008/B",
    "history": "There are n rectangles in a row. You can either turn each rectangle by 90 degrees or leave it as it is. If you turn a rectangle, its width will be height, and its height will be width. Notice that you can turn any number of rectangles, you also can turn all or none of them. You can not change the order of the rectangles. Find out if there is a way to make the rectangles go in order of non- ascending height. In other words, after all the turns, a height of every rectangle has to be not greater than the height of the previous rectangle ( if it is such) .",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of rectangles. Each of the next n lines contains two integers w_ i and h_ i ( 1 \u2264 w_ i, h_ i \u2264 10^ 9 ) \u2014 the width and the height of the i - th rectangle.",
    "output": "Print \" YES\" ( without quotes) if there is a way to make the rectangles go in order of non- ascending height, otherwise print \" NO\" . You can print each letter in any case ( upper or lower) .",
    "note": "In the first test, you can rotate the second and the third rectangles so that the heights will be [ 4, 4, 3] . In the second test, there is no way the second rectangle will be not higher than the first one.",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Reorder the Array",
    "url": "https://codeforces.com/problemset/problem/1007/A",
    "history": "You are given an array of integers. Vasya can permute ( change order) its integers. He wants to do it so that as many as possible integers will become on a place where a smaller integer used to stand. Help Vasya find the maximal number of such integers. For instance, if we are given an array [ 10, 20, 30, 40] , we can permute it so that it becomes [ 20, 40, 10, 30] . Then on the first and the second positions the integers became larger ( 20> 10 , 40> 20 ) and did not on the third and the fourth, so for this permutation, the number that Vasya wants to maximize equals 2 . Read the note for the first example, there is one more demonstrative test case. Help Vasya to permute integers in such way that the number of positions in a new array, where integers are greater than in the original one, is maximal.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of the array. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the elements of the array.",
    "output": "Print a single integer \u2014 the maximal number of the array' s elements which after a permutation will stand on the position where a smaller element stood in the initial array.",
    "note": "In the first sample, one of the best permutations is [ 1, 5, 5, 3, 10, 1, 1] . On the positions from second to fifth the elements became larger, so the answer for this permutation is 4. In the second sample, there is no way to increase any element with a permutation, so the answer is 0.",
    "topics": [
      "combinatorics",
      "data structures",
      "math",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Polycarp's Practice",
    "url": "https://codeforces.com/problemset/problem/1006/B",
    "history": "Polycarp is practicing his problem solving skill. He has a list of n problems with difficulties a_ 1, a_ 2, . . . , a_ n , respectively. His plan is to practice for exactly k days. Each day he has to solve at least one problem from his list. Polycarp solves the problems in the order they are given in his list, he cannot skip any problem from his list. He has to solve all n problems in exactly k days. Thus, each day Polycarp solves a contiguous sequence of ( consecutive) problems from the start of the list. He can' t skip problems or solve them multiple times. As a result, in k days he will solve all the n problems. The profit of the j - th day of Polycarp' s practice is the maximum among all the difficulties of problems Polycarp solves during the j - th day ( i. e. if he solves problems with indices from l to r during a day, then the profit of the day is max_ l \u2264 i \u2264 ra_ i ) . The total profit of his practice is the sum of the profits over all k days of his practice. You want to help Polycarp to get the maximum possible total profit over all valid ways to solve problems. Your task is to distribute all n problems between k days satisfying the conditions above in such a way, that the total profit is maximum. For example, if n = 8, k = 3 and a = [ 5, 4, 2, 6, 5, 1, 9, 2] , one of the possible distributions with maximum total profit is: [ 5, 4, 2] , [ 6, 5] , [ 1, 9, 2] . Here the total profit equals 5 + 6 + 9 = 20 .",
    "input": "The first line of the input contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 2000 ) \u2014 the number of problems and the number of days, respectively. The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 2000 ) \u2014 difficulties of problems in Polycarp' s list, in the order they are placed in the list ( i. e. in the order Polycarp will solve them) .",
    "output": "In the first line of the output print the maximum possible total profit. In the second line print exactly k positive integers t_ 1, t_ 2, . . . , t_ k ( t_ 1 + t_ 2 + . . . + t_ k must equal n ) , where t_ j means the number of problems Polycarp will solve during the j - th day in order to achieve the maximum possible total profit of his practice. If there are many possible answers, you may print any of them.",
    "note": "The first example is described in the problem statement. In the second example there is only one possible distribution. In the third example the best answer is to distribute problems in the following way: [ 1, 2000] , [ 2000, 2] . The total profit of this distribution is 2000 + 2000 = 4000 .",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Median on Segments (General Case Edition)",
    "url": "https://codeforces.com/problemset/problem/1005/E2",
    "history": "You are given an integer sequence a_ 1, a_ 2, . . . , a_ n . Find the number of pairs of indices ( l, r) ( 1 \u2264 l \u2264 r \u2264 n ) such that the value of median of a_ l, a_ l+ 1, . . . , a_ r is exactly the given number m . The median of a sequence is the value of an element which is in the middle of the sequence after sorting it in non- decreasing order. If the length of the sequence is even, the left of two middle elements is used. For example, if a= [ 4, 2, 7, 5] then its median is 4 since after sorting the sequence, it will look like [ 2, 4, 5, 7] and the left of two middle elements is equal to 4 . The median of [ 7, 1, 2, 9, 6] equals 6 since after sorting, the value 6 will be in the middle of the sequence. Write a program to find the number of pairs of indices ( l, r) ( 1 \u2264 l \u2264 r \u2264 n ) such that the value of median of a_ l, a_ l+ 1, . . . , a_ r is exactly the given number m .",
    "input": "The first line contains integers n and m ( 1 \u2264 n, m \u2264 2\u00b710^ 5 ) \u2014 the length of the given sequence and the required value of the median. The second line contains an integer sequence a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 2\u00b710^ 5 ) .",
    "output": "Print the required number.",
    "note": "In the first example, the suitable pairs of indices are: ( 1, 3) , ( 1, 4) , ( 1, 5) , ( 2, 2) , ( 2, 3) , ( 2, 5) , ( 4, 5) and ( 5, 5) .",
    "topics": [
      "sortings"
    ]
  },
  {
    "title": "Median on Segments (Permutations Edition)",
    "url": "https://codeforces.com/problemset/problem/1005/E1",
    "history": "You are given a permutation p_ 1, p_ 2, . . . , p_ n . A permutation of length n is a sequence such that each integer between 1 and n occurs exactly once in the sequence. Find the number of pairs of indices ( l, r) ( 1 \u2264 l \u2264 r \u2264 n ) such that the value of the median of p_ l, p_ l+ 1, . . . , p_ r is exactly the given number m . The median of a sequence is the value of the element which is in the middle of the sequence after sorting it in non- decreasing order. If the length of the sequence is even, the left of two middle elements is used. For example, if a= [ 4, 2, 7, 5] then its median is 4 since after sorting the sequence, it will look like [ 2, 4, 5, 7] and the left of two middle elements is equal to 4 . The median of [ 7, 1, 2, 9, 6] equals 6 since after sorting, the value 6 will be in the middle of the sequence. Write a program to find the number of pairs of indices ( l, r) ( 1 \u2264 l \u2264 r \u2264 n ) such that the value of the median of p_ l, p_ l+ 1, . . . , p_ r is exactly the given number m .",
    "input": "The first line contains integers n and m ( 1 \u2264 n \u2264 2\u00b710^ 5 , 1 \u2264 m \u2264 n ) \u2014 the length of the given sequence and the required value of the median. The second line contains a permutation p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) . Each integer between 1 and n occurs in p exactly once.",
    "output": "Print the required number.",
    "note": "In the first example, the suitable pairs of indices are: ( 1, 3) , ( 2, 2) , ( 2, 3) and ( 2, 4) .",
    "topics": [
      "sortings"
    ]
  },
  {
    "title": "Covered Points Count",
    "url": "https://codeforces.com/problemset/problem/1000/C",
    "history": "You are given n segments on a coordinate line; each endpoint of every segment has integer coordinates. Some segments can degenerate to points. Segments can intersect with each other, be nested in each other or even coincide. Your task is the following: for every k \u2208 [ 1. . n] , calculate the number of points with integer coordinates such that the number of segments that cover these points equals k . A segment with endpoints l_ i and r_ i covers point x if and only if l_ i \u2264 x \u2264 r_ i .",
    "input": "The first line of the input contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of segments. The next n lines contain segments. The i - th line contains a pair of integers l_ i, r_ i ( 0 \u2264 l_ i \u2264 r_ i \u2264 10^ 18 ) \u2014 the endpoints of the i - th segment.",
    "output": "Print n space separated integers cnt_ 1, cnt_ 2, . . . , cnt_ n , where cnt_ i is equal to the number of points such that the number of segments that cover these points equals to i .",
    "note": "The picture describing the first example: Points with coordinates [ 0, 4, 5, 6, 7, 8] are covered by one segment, points [ 1, 2] are covered by two segments and point [ 3] is covered by three segments. The picture describing the second example: Points [ 1, 4, 5, 6, 7] are covered by one segment, points [ 2, 3] are covered by two segments and there are no points covered by three segments.",
    "topics": [
      "data structures",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Cutting",
    "url": "https://codeforces.com/problemset/problem/998/B",
    "history": "There are a lot of things which could be cut \u2014 trees, paper, \" the rope\" . In this problem you are going to cut a sequence of integers. There is a sequence of integers, which contains the equal number of even and odd numbers. Given a limited budget, you need to make maximum possible number of cuts such that each resulting segment will have the same number of odd and even integers. Cuts separate a sequence to continuous ( contiguous) segments. You may think about each cut as a break between two adjacent elements in a sequence. So after cutting each element belongs to exactly one segment. Say, [ 4, 1, 2, 3, 4, 5, 4, 4, 5, 5] \u2192 two cuts \u2192 [ 4, 1 | 2, 3, 4, 5 | 4, 4, 5, 5] . On each segment the number of even elements should be equal to the number of odd elements. The cost of the cut between x and y numbers is | x - y| bitcoins. Find the maximum possible number of cuts that can be made while spending no more than B bitcoins.",
    "input": "First line of the input contains an integer n ( 2 \u2264 n \u2264 100 ) and an integer B ( 1 \u2264 B \u2264 100 ) \u2014 the number of elements in the sequence and the number of bitcoins you have. Second line contains n integers: a_ 1 , a_ 2 , . . . , a_ n ( 1 \u2264 a_ i \u2264 100 ) \u2014 elements of the sequence, which contains the equal number of even and odd numbers",
    "output": "Print the maximum possible number of cuts which can be made while spending no more than B bitcoins.",
    "note": "In the first sample the optimal answer is to split sequence between 2 and 5 . Price of this cut is equal to 3 bitcoins. In the second sample it is not possible to make even one cut even with unlimited number of bitcoins. In the third sample the sequence should be cut between 2 and 3 , and between 4 and 5 . The total price of the cuts is 1 + 1 = 2 bitcoins.",
    "topics": [
      "dp",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Leaving the Bar",
    "url": "https://codeforces.com/problemset/problem/995/C",
    "history": "For a vector v\u20d7 = ( x, y) , define | v| = \u221a( x^ 2 + y^ 2) . Allen had a bit too much to drink at the bar, which is at the origin. There are n vectors v\u20d7_ \u20d71\u20d7, v\u20d7_ \u20d72\u20d7, \u22ef, v\u20d7_ \u20d7n\u20d7 . Allen will make n moves. As Allen' s sense of direction is impaired, during the i - th move he will either move in the direction v\u20d7_ \u20d7i\u20d7 or - v\u20d7_ \u20d7i\u20d7 . In other words, if his position is currently p = ( x, y) , he will either move to p + v\u20d7_ \u20d7i\u20d7 or p - v\u20d7_ \u20d7i\u20d7 . Allen doesn' t want to wander too far from home ( which happens to also be the bar) . You need to help him figure out a sequence of moves ( a sequence of signs for the vectors) such that his final position p satisfies | p| \u2264 1. 5 \u00b7 10^ 6 so that he can stay safe.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of moves. Each of the following lines contains two space- separated integers x_ i and y_ i , meaning that v\u20d7_ \u20d7i\u20d7 = ( x_ i, y_ i) . We have that | v_ i| \u2264 10^ 6 for all i .",
    "output": "Output a single line containing n integers c_ 1, c_ 2, \u22ef, c_ n , each of which is either 1 or - 1 . Your solution is correct if the value of p = \u2211_ i = 1^ n c_ i v\u20d7_ \u20d7i\u20d7 , satisfies | p| \u2264 1. 5 \u00b7 10^ 6 . It can be shown that a solution always exists under the given constraints.",
    "note": " ",
    "topics": [
      "brute force",
      "data structures",
      "geometry",
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Knights of a Polygonal Table",
    "url": "https://codeforces.com/problemset/problem/994/B",
    "history": "Unlike Knights of a Round Table, Knights of a Polygonal Table deprived of nobility and happy to kill each other. But each knight has some power and a knight can kill another knight if and only if his power is greater than the power of victim. However, even such a knight will torment his conscience, so he can kill no more than k other knights. Also, each knight has some number of coins. After a kill, a knight can pick up all victim' s coins. Now each knight ponders: how many coins he can have if only he kills other knights? You should answer this question for each knight.",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 10^ 5, 0 \u2264 k \u2264min( n- 1, 10) ) \u2014 the number of knights and the number k from the statement. The second line contains n integers p_ 1, p_ 2 , . . . , p_ n ( 1 \u2264 p_ i \u2264 10^ 9) \u2014 powers of the knights. All p_ i are distinct. The third line contains n integers c_ 1, c_ 2 , . . . , c_ n ( 0 \u2264 c_ i \u2264 10^ 9) \u2014 the number of coins each knight has.",
    "output": "Print n integers \u2014 the maximum number of coins each knight can have it only he kills other knights.",
    "note": "Consider the first example. The first knight is the weakest, so he can' t kill anyone. That leaves him with the only coin he initially has. The second knight can kill the first knight and add his coin to his own two. The third knight is the strongest, but he can' t kill more than k = 2 other knights. It is optimal to kill the second and the fourth knights: 2+ 11+ 33 = 46 . The fourth knight should kill the first and the second knights: 33+ 1+ 2 = 36 . In the second example the first knight can' t kill anyone, while all the others should kill the one with the index less by one than their own. In the third example there is only one knight, so he can' t kill anyone.",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Nastya and an Array",
    "url": "https://codeforces.com/problemset/problem/992/A",
    "history": "Nastya owns too many arrays now, so she wants to delete the least important of them. However, she discovered that this array is magic! Nastya now knows that the array has the following properties: In one second we can add an arbitrary ( possibly negative) integer to all elements of the array that are not equal to zero. When all elements of the array become equal to zero, the array explodes. Nastya is always busy, so she wants to explode the array as fast as possible. Compute the minimum time in which the array can be exploded.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 105) \u2014 the size of the array. The second line contains n integers a1, a2, . . . , an ( - 105 \u2264 ai \u2264 105) \u2014 the elements of the array.",
    "output": "Print a single integer \u2014 the minimum number of seconds needed to make all elements of the array equal to zero.",
    "note": "In the first example you can add - 1 to all non- zero elements in one second and make them equal to zero. In the second example you can add - 2 on the first second, then the array becomes equal to [ 0, 0, - 3] . On the second second you can add 3 to the third ( the only non- zero) element.",
    "topics": [
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Getting an A",
    "url": "https://codeforces.com/problemset/problem/991/B",
    "history": "Translator' s note: in Russia' s most widespread grading system, there are four grades: 5, 4, 3, 2, the higher the better, roughly corresponding to A, B, C and F respectively in American grading system. The term is coming to an end and students start thinking about their grades. Today, a professor told his students that the grades for his course would be given out automatically \u2014 he would calculate the simple average ( arithmetic mean) of all grades given out for lab works this term and round to the nearest integer. The rounding would be done in favour of the student \u2014 4. 5 would be rounded up to 5 ( as in example 3) , but 4. 4 would be rounded down to 4 . This does not bode well for Vasya who didn' t think those lab works would influence anything, so he may receive a grade worse than 5 ( maybe even the dreaded 2 ) . However, the professor allowed him to redo some of his works of Vasya' s choosing to increase his average grade. Vasya wants to redo as as few lab works as possible in order to get 5 for the course. Of course, Vasya will get 5 for the lab works he chooses to redo. Help Vasya \u2014 calculate the minimum amount of lab works Vasya has to redo.",
    "input": "The first line contains a single integer n \u2014 the number of Vasya' s grades ( 1 \u2264 n \u2264 100 ) . The second line contains n integers from 2 to 5 \u2014 Vasya' s grades for his lab works.",
    "output": "Output a single integer \u2014 the minimum amount of lab works that Vasya has to redo. It can be shown that Vasya can always redo enough lab works to get a 5 .",
    "note": "In the first sample, it is enough to redo two lab works to make two 4 s into 5 s. In the second sample, Vasya' s average is already 4. 75 so he doesn' t have to redo anything to get a 5 . In the second sample Vasya has to redo one lab work to get rid of one of the 3 s, that will make the average exactly 4. 5 so the final grade would be 5 .",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Micro-World",
    "url": "https://codeforces.com/problemset/problem/990/B",
    "history": "You have a Petri dish with bacteria and you are preparing to dive into the harsh micro- world. But, unfortunately, you don' t have any microscope nearby, so you can' t watch them. You know that you have n bacteria in the Petri dish and size of the i - th bacteria is a_ i . Also you know intergalactic positive integer constant K . The i - th bacteria can swallow the j - th bacteria if and only if a_ i > a_ j and a_ i \u2264 a_ j + K . The j - th bacteria disappear, but the i - th bacteria doesn' t change its size. The bacteria can perform multiple swallows. On each swallow operation any bacteria i can swallow any bacteria j if a_ i > a_ j and a_ i \u2264 a_ j + K . The swallow operations go one after another. For example, the sequence of bacteria sizes a= [ 101, 53, 42, 102, 101, 55, 54] and K= 1 . The one of possible sequences of swallows is: [ 101, 53, 42, 102, 101, 55, 54] \u2192 [ 101, 53, 42, 102, 55, 54] \u2192 [ 101, 42, 102, 55, 54] \u2192 [ 42, 102, 55, 54] \u2192 [ 42, 102, 55] . In total there are 3 bacteria remained in the Petri dish. Since you don' t have a microscope, you can only guess, what the minimal possible number of bacteria can remain in your Petri dish when you finally will find any microscope.",
    "input": "The first line contains two space separated positive integers n and K ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 K \u2264 10^ 6 ) \u2014 number of bacteria and intergalactic constant K . The second line contains n space separated integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 6 ) \u2014 sizes of bacteria you have.",
    "output": "Print the only integer \u2014 minimal possible number of bacteria can remain.",
    "note": "The first example is clarified in the problem statement. In the second example an optimal possible sequence of swallows is: [ 20, 15, 10, 15, 20, 25] \u2192 [ 20, 15, 10, 15, 25] \u2192 [ 20, 15, 10, 25] \u2192 [ 20, 15, 25] \u2192 [ 20, 25] \u2192 [ 25] . In the third example no bacteria can swallow any other bacteria.",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "A Shade of Moonlight",
    "url": "https://codeforces.com/problemset/problem/989/D",
    "history": "Gathering darkness shrouds the woods and the world. The moon sheds its light on the boat and the river. \" To curtain off the moonlight should be hardly possible; the shades present its mellow beauty and restful nature. \" Intonates Mino. \" See? The clouds are coming. \" Kanno gazes into the distance. \" That can' t be better, \" Mino turns to Kanno. The sky can be seen as a one- dimensional axis. The moon is at the origin whose coordinate is 0 . There are n clouds floating in the sky. Each cloud has the same length l . The i - th initially covers the range of ( x_ i, x_ i + l) ( endpoints excluded) . Initially, it moves at a velocity of v_ i , which equals either 1 or - 1 . Furthermore, no pair of clouds intersect initially, that is, for all 1 \u2264 i j \u2264 n , | x_ i - x_ j | \u2265 l . With a wind velocity of w , the velocity of the i - th cloud becomes v_ i + w . That is, its coordinate increases by v_ i + w during each unit of time. Note that the wind can be strong and clouds can change their direction. You are to help Mino count the number of pairs ( i, j) ( i < j ) , such that with a proper choice of wind velocity w not exceeding w_ max in absolute value ( possibly negative and/ or fractional) , the i - th and j - th clouds both cover the moon at the same future moment. This w doesn' t need to be the same across different pairs.",
    "input": "The first line contains three space- separated integers n , l , and w_ max ( 1 \u2264 n \u2264 10^ 5 , 1 \u2264 l, w_ max\u2264 10^ 8 ) \u2014 the number of clouds, the length of each cloud and the maximum wind speed, respectively. The i - th of the following n lines contains two space- separated integers x_ i and v_ i ( - 10^ 8 \u2264 x_ i \u2264 10^ 8 , v_ i \u2208{ - 1, 1} ) \u2014 the initial position and the velocity of the i - th cloud, respectively. The input guarantees that for all 1 \u2264 i j \u2264 n , | x_ i - x_ j | \u2265 l .",
    "output": "Output one integer \u2014 the number of unordered pairs of clouds such that it' s possible that clouds from each pair cover the moon at the same future moment with a proper choice of wind velocity w .",
    "note": "In the first example, the initial positions and velocities of clouds are illustrated below. The pairs are: ( 1, 3) , covering the moon at time 2. 5 with w = - 0. 4 ; ( 1, 4) , covering the moon at time 3. 5 with w = - 0. 6 ; ( 1, 5) , covering the moon at time 4. 5 with w = - 0. 7 ; ( 2, 5) , covering the moon at time 2. 5 with w = - 2 . Below is the positions of clouds at time 2. 5 with w = - 0. 4 . At this moment, the 1 - st and 3 - rd clouds both cover the moon. In the second example, the only pair is ( 1, 4) , covering the moon at time 15 with w = 0 . Note that all the times and wind velocities given above are just examples among infinitely many choices.",
    "topics": [
      "binary search",
      "geometry",
      "math",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Equal Sums",
    "url": "https://codeforces.com/problemset/problem/988/C",
    "history": "You are given k sequences of integers. The length of the i - th sequence equals to n_ i . You have to choose exactly two sequences i and j ( i j ) such that you can remove exactly one element in each of them in such a way that the sum of the changed sequence i ( its length will be equal to n_ i - 1 ) equals to the sum of the changed sequence j ( its length will be equal to n_ j - 1 ) . Note that it' s required to remove exactly one element in each of the two chosen sequences. Assume that the sum of the empty ( of the length equals 0 ) sequence is 0 .",
    "input": "The first line contains an integer k ( 2 \u2264 k \u2264 2 \u00b7 10^ 5 ) \u2014 the number of sequences. Then k pairs of lines follow, each pair containing a sequence. The first line in the i - th pair contains one integer n_ i ( 1 \u2264 n_ i < 2 \u00b7 10^ 5 ) \u2014 the length of the i - th sequence. The second line of the i - th pair contains a sequence of n_ i integers a_ i, 1, a_ i, 2, . . . , a_ i, n_ i . The elements of sequences are integer numbers from - 10^ 4 to 10^ 4 . The sum of lengths of all given sequences don' t exceed 2 \u00b7 10^ 5 , i. e. n_ 1 + n_ 2 + . . . + n_ k \u2264 2 \u00b7 10^ 5 .",
    "output": "If it is impossible to choose two sequences such that they satisfy given conditions, print \" NO\" ( without quotes) . Otherwise in the first line print \" YES\" ( without quotes) , in the second line \u2014 two integers i , x ( 1 \u2264 i \u2264 k, 1 \u2264 x \u2264 n_ i ) , in the third line \u2014 two integers j , y ( 1 \u2264 j \u2264 k, 1 \u2264 y \u2264 n_ j ) . It means that the sum of the elements of the i - th sequence without the element with index x equals to the sum of the elements of the j - th sequence without the element with index y . Two chosen sequences must be distinct, i. e. i j . You can print them in any order. If there are multiple possible answers, print any of them.",
    "note": "In the first example there are two sequences [ 2, 3, 1, 3, 2] and [ 1, 1, 2, 2, 2, 1] . You can remove the second element from the first sequence to get [ 2, 1, 3, 2] and you can remove the sixth element from the second sequence to get [ 1, 1, 2, 2, 2] . The sums of the both resulting sequences equal to 8 , i. e. the sums are equal.",
    "topics": [
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Substrings Sort",
    "url": "https://codeforces.com/problemset/problem/988/B",
    "history": "You are given n strings. Each string consists of lowercase English letters. Rearrange ( reorder) the given strings in such a way that for every string, all strings that are placed before it are its substrings. String a is a substring of string b if it is possible to choose several consecutive letters in b in such a way that they form a . For example, string \" for\" is contained as a substring in strings \" codeforces\" , \" for\" and \" therefore\" , but is not contained as a substring in strings \" four\" , \" fofo\" and \" rof\" .",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 100 ) \u2014 the number of strings. The next n lines contain the given strings. The number of letters in each string is from 1 to 100 , inclusive. Each string consists of lowercase English letters. Some strings might be equal.",
    "output": "If it is impossible to reorder n given strings in required order, print \" NO\" ( without quotes) . Otherwise print \" YES\" ( without quotes) and n given strings in required order.",
    "note": "In the second example you cannot reorder the strings because the string \" abab\" is not a substring of the string \" abacaba\" .",
    "topics": [
      "sortings",
      "strings"
    ]
  },
  {
    "title": "Game",
    "url": "https://codeforces.com/problemset/problem/984/A",
    "history": "Two players play a game. Initially there are n integers a_ 1, a_ 2, . . . , a_ n written on the board. Each turn a player selects one number and erases it from the board. This continues until there is only one number left on the board, i. e. n - 1 turns are made. The first player makes the first move, then players alternate turns. The first player wants to minimize the last number that would be left on the board, while the second player wants to maximize it. You want to know what number will be left on the board after n - 1 turns if both players make optimal moves.",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 1000 ) \u2014 the number of numbers on the board. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 6 ) .",
    "output": "Print one number that will be left on the board.",
    "note": "In the first sample, the first player erases 3 and the second erases 1 . 2 is left on the board. In the second sample, 2 is left on the board regardless of the actions of the players.",
    "topics": [
      "sortings"
    ]
  },
  {
    "title": "Businessmen Problems",
    "url": "https://codeforces.com/problemset/problem/981/B",
    "history": "Two famous competing companies ChemForces and TopChemist decided to show their sets of recently discovered chemical elements on an exhibition. However they know that no element should be present in the sets of both companies. In order to avoid this representatives of both companies decided to make an agreement on the sets the companies should present. The sets should be chosen in the way that maximizes the total income of the companies. All elements are enumerated with integers. The ChemForces company has discovered n distinct chemical elements with indices a_ 1, a_ 2, . . . , a_ n , and will get an income of x_ i Berland rubles if the i - th element from this list is in the set of this company. The TopChemist company discovered m distinct chemical elements with indices b_ 1, b_ 2, . . . , b_ m , and it will get an income of y_ j Berland rubles for including the j - th element from this list to its set. In other words, the first company can present any subset of elements from { a_ 1, a_ 2, . . . , a_ n} ( possibly empty subset) , the second company can present any subset of elements from { b_ 1, b_ 2, . . . , b_ m} ( possibly empty subset) . There shouldn' t be equal elements in the subsets. Help the representatives select the sets in such a way that no element is presented in both sets and the total income is the maximum possible.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of elements discovered by ChemForces. The i - th of the next n lines contains two integers a_ i and x_ i ( 1 \u2264 a_ i \u2264 10^ 9 , 1 \u2264 x_ i \u2264 10^ 9 ) \u2014 the index of the i - th element and the income of its usage on the exhibition. It is guaranteed that all a_ i are distinct. The next line contains a single integer m ( 1 \u2264 m \u2264 10^ 5 ) \u2014 the number of chemicals invented by TopChemist. The j - th of the next m lines contains two integers b_ j and y_ j , ( 1 \u2264 b_ j \u2264 10^ 9 , 1 \u2264 y_ j \u2264 10^ 9 ) \u2014 the index of the j - th element and the income of its usage on the exhibition. It is guaranteed that all b_ j are distinct.",
    "output": "Print the maximum total income you can obtain by choosing the sets for both companies in such a way that no element is presented in both sets.",
    "note": "In the first example ChemForces can choose the set ( 3, 7 ) , while TopChemist can choose ( 1, 2, 4 ) . This way the total income is ( 10 + 2) + ( 4 + 4 + 4) = 24 . In the second example ChemForces can choose the only element 10^ 9 , while TopChemist can choose ( 14, 92, 35 ) . This way the total income is ( 239) + ( 15 + 65 + 89) = 408 .",
    "topics": [
      "sortings"
    ]
  },
  {
    "title": "Petya's Exams",
    "url": "https://codeforces.com/problemset/problem/978/G",
    "history": "Petya studies at university. The current academic year finishes with n special days. Petya needs to pass m exams in those special days. The special days in this problem are numbered from 1 to n . There are three values about each exam: s_ i \u2014 the day, when questions for the i - th exam will be published, d_ i \u2014 the day of the i - th exam ( s_ i < d_ i ) , c_ i \u2014 number of days Petya needs to prepare for the i - th exam. For the i - th exam Petya should prepare in days between s_ i and d_ i- 1 , inclusive. There are three types of activities for Petya in each day: to spend a day doing nothing ( taking a rest) , to spend a day passing exactly one exam or to spend a day preparing for exactly one exam. So he can' t pass/ prepare for multiple exams in a day. He can' t mix his activities in a day. If he is preparing for the i - th exam in day j , then s_ i \u2264 j < d_ i . It is allowed to have breaks in a preparation to an exam and to alternate preparations for different exams in consecutive days. So preparation for an exam is not required to be done in consecutive days. Find the schedule for Petya to prepare for all exams and pass them, or report that it is impossible.",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 100, 1 \u2264 m \u2264 n) \u2014 the number of days and the number of exams. Each of the following m lines contains three integers s_ i , d_ i , c_ i ( 1 \u2264 s_ i < d_ i \u2264 n, 1 \u2264 c_ i \u2264 n) \u2014 the day, when questions for the i - th exam will be given, the day of the i - th exam, number of days Petya needs to prepare for the i - th exam. Guaranteed, that all the exams will be in different days. Questions for different exams can be given in the same day. It is possible that, in the day of some exam, the questions for other exams are given.",
    "output": "If Petya can not prepare and pass all the exams, print - 1. In case of positive answer, print n integers, where the j - th number is: ( m + 1) , if the j - th day is a day of some exam ( recall that in each day no more than one exam is conducted) , zero, if in the j - th day Petya will have a rest, i ( 1 \u2264 i \u2264 m ) , if Petya will prepare for the i - th exam in the day j ( the total number of days Petya prepares for each exam should be strictly equal to the number of days needed to prepare for it) . Assume that the exams are numbered in order of appearing in the input, starting from 1 . If there are multiple schedules, print any of them.",
    "note": "In the first example Petya can, for example, prepare for exam 1 in the first day, prepare for exam 2 in the second day, pass exam 1 in the third day, relax in the fourth day, and pass exam 2 in the fifth day. So, he can prepare and pass all exams. In the second example, there are three days and two exams. So, Petya can prepare in only one day ( because in two other days he should pass exams) . Then Petya can not prepare and pass all exams.",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Divide by three, multiply by two",
    "url": "https://codeforces.com/problemset/problem/977/D",
    "history": "Polycarp likes to play with numbers. He takes some integer number x , writes it down on the board, and then performs with it n - 1 operations of the two kinds: divide the number x by 3 ( x must be divisible by 3 ) ; multiply the number x by 2 . After each operation, Polycarp writes down the result on the board and replaces x by the result. So there will be n numbers on the board after all. You are given a sequence of length n \u2014 the numbers that Polycarp wrote down. This sequence is given in arbitrary order, i. e. the order of the sequence can mismatch the order of the numbers written on the board. Your problem is to rearrange ( reorder) elements of this sequence in such a way that it can match possible Polycarp' s game in the order of the numbers written on the board. I. e. each next number will be exactly two times of the previous number or exactly one third of previous number. It is guaranteed that the answer exists.",
    "input": "The first line of the input contatins an integer number n ( 2 \u2264 n \u2264 100 ) \u2014 the number of the elements in the sequence. The second line of the input contains n integer numbers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 3 \u00b7 10^ 18 ) \u2014 rearranged ( reordered) sequence that Polycarp can wrote down on the board.",
    "output": "Print n integer numbers \u2014 rearranged ( reordered) input sequence that can be the sequence that Polycarp could write down on the board. It is guaranteed that the answer exists.",
    "note": "In the first example the given sequence can be rearranged in the following way: [ 9, 3, 6, 12, 4, 8] . It can match possible Polycarp' s game which started with x = 9 .",
    "topics": [
      "dfs and similar",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Less or Equal",
    "url": "https://codeforces.com/problemset/problem/977/C",
    "history": "You are given a sequence of integers of length n and integer number k . You should print any integer number x in the range of [ 1; 10^ 9] ( i. e. 1 \u2264 x \u2264 10^ 9 ) such that exactly k elements of given sequence are less than or equal to x . Note that the sequence can contain equal elements. If there is no such x , print \" - 1\" ( without quotes) .",
    "input": "The first line of the input contains integer numbers n and k ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 0 \u2264 k \u2264 n ) . The second line of the input contains n integer numbers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the sequence itself.",
    "output": "Print any integer number x from range [ 1; 10^ 9] such that exactly k elements of given sequence is less or equal to x . If there is no such x , print \" - 1\" ( without quotes) .",
    "note": "In the first example 5 is also a valid answer because the elements with indices [ 1, 3, 4, 6] is less than or equal to 5 and obviously less than or equal to 6 . In the second example you cannot choose any number that only 2 elements of the given sequence will be less than or equal to this number because 3 elements of the given sequence will be also less than or equal to this number.",
    "topics": [
      "sortings"
    ]
  },
  {
    "title": "Well played!",
    "url": "https://codeforces.com/problemset/problem/976/E",
    "history": "Recently Max has got himself into popular CCG \" BrainStone\" . As \" BrainStone\" is a pretty intellectual game, Max has to solve numerous hard problems during the gameplay. Here is one of them: Max owns n creatures, i- th of them can be described with two numbers \u2014 its health hpi and its damage dmgi. Max also has two types of spells in stock: Doubles health of the creature ( hpi : = hpi\u00b72) ; Assigns value of health of the creature to its damage ( dmgi : = hpi) . Spell of first type can be used no more than a times in total, of the second type \u2014 no more than b times in total. Spell can be used on a certain creature multiple times. Spells can be used in arbitrary order. It isn' t necessary to use all the spells. Max is really busy preparing for his final exams, so he asks you to determine what is the maximal total damage of all creatures he can achieve if he uses spells in most optimal way.",
    "input": "The first line contains three integers n, a, b ( 1 \u2264 n \u2264 2\u00b7105, 0 \u2264 a \u2264 20, 0 \u2264 b \u2264 2\u00b7105) \u2014 the number of creatures, spells of the first type and spells of the second type, respectively. The i- th of the next n lines contain two number hpi and dmgi ( 1 \u2264 hpi, dmgi \u2264 109) \u2014 description of the i- th creature.",
    "output": "Print single integer \u2014 maximum total damage creatures can deal.",
    "note": "In the first example Max should use the spell of the first type on the second creature, then the spell of the second type on the same creature. Then total damage will be equal to 15 + 6\u00b72 = 27. In the second example Max should use the spell of the second type on the first creature, then the spell of the second type on the third creature. Total damage will be equal to 10 + 11 + 5 = 26.",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Nested Segments",
    "url": "https://codeforces.com/problemset/problem/976/C",
    "history": "You are given a sequence a1, a2, . . . , an of one- dimensional segments numbered 1 through n. Your task is to find two distinct indices i and j such that segment ai lies within segment aj. Segment [ l1, r1] lies within segment [ l2, r2] iff l1 \u2265 l2 and r1 \u2264 r2. Print indices i and j. If there are multiple answers, print any of them. If no answer exists, print - 1 - 1.",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 3\u00b7105) \u2014 the number of segments. Each of the next n lines contains two integers li and ri ( 1 \u2264 li \u2264 ri \u2264 109) \u2014 the i- th segment.",
    "output": "Print two distinct indices i and j such that segment ai lies within segment aj. If there are multiple answers, print any of them. If no answer exists, print - 1 - 1.",
    "note": "In the first example the following pairs are considered correct: ( 2, 1) , ( 3, 1) , ( 4, 1) , ( 5, 1) \u2014 not even touching borders; ( 3, 2) , ( 4, 2) , ( 3, 5) , ( 4, 5) \u2014 touch one border; ( 5, 2) , ( 2, 5) \u2014 match exactly.",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Watering System",
    "url": "https://codeforces.com/problemset/problem/967/B",
    "history": "Arkady wants to water his only flower. Unfortunately, he has a very poor watering system that was designed for n flowers and so it looks like a pipe with n holes. Arkady can only use the water that flows from the first hole. Arkady can block some of the holes, and then pour A liters of water into the pipe. After that, the water will flow out from the non- blocked holes proportionally to their sizes s_ 1, s_ 2, . . . , s_ n . In other words, if the sum of sizes of non- blocked holes is S , and the i - th hole is not blocked, s_ i \u00b7 A/ S liters of water will flow out of it. What is the minimum number of holes Arkady should block to make at least B liters of water flow out of the first hole?",
    "input": "The first line contains three integers n , A , B ( 1 \u2264 n \u2264 100 000 , 1 \u2264 B \u2264 A \u2264 10^ 4 ) \u2014 the number of holes, the volume of water Arkady will pour into the system, and the volume he wants to get out of the first hole. The second line contains n integers s_ 1, s_ 2, . . . , s_ n ( 1 \u2264 s_ i \u2264 10^ 4 ) \u2014 the sizes of the holes.",
    "output": "Print a single integer \u2014 the number of holes Arkady should block.",
    "note": "In the first example Arkady should block at least one hole. After that, 10 \u00b7 2/ 6\u2248 3. 333 liters of water will flow out of the first hole, and that suits Arkady. In the second example even without blocking any hole, 80 \u00b7 3/ 10 = 24 liters will flow out of the first hole, that is not less than 20 . In the third example Arkady has to block all holes except the first to make all water flow out of the first hole.",
    "topics": [
      "math",
      "sortings"
    ]
  },
  {
    "title": "Minimize the error",
    "url": "https://codeforces.com/problemset/problem/960/B",
    "history": "You are given two arrays A and B, each of size n. The error, E, between these two arrays is defined . You have to perform exactly k1 operations on array A and exactly k2 operations on array B. In one operation, you have to choose one element of the array and increase or decrease it by 1. Output the minimum possible value of error after k1 operations on array A and k2 operations on array B have been performed.",
    "input": "The first line contains three space- separated integers n ( 1 \u2264 n \u2264 103) , k1 and k2 ( 0 \u2264 k1 + k2 \u2264 103, k1 and k2 are non- negative) \u2014 size of arrays and number of operations to perform on A and B respectively. Second line contains n space separated integers a1, a2, . . . , an ( - 106 \u2264 ai \u2264 106) \u2014 array A. Third line contains n space separated integers b1, b2, . . . , bn ( - 106 \u2264 bi \u2264 106) \u2014 array B.",
    "output": "Output a single integer \u2014 the minimum possible value of after doing exactly k1 operations on array A and exactly k2 operations on array B.",
    "note": "In the first sample case, we cannot perform any operations on A or B. Therefore the minimum possible error E = ( 1 - 2) 2 + ( 2 - 3) 2 = 2. In the second sample case, we are required to perform exactly one operation on A. In order to minimize error, we increment the first element of A by 1. Now, A = [ 2, 2] . The error is now E = ( 2 - 2) 2 + ( 2 - 2) 2 = 0. This is the minimum possible error obtainable. In the third sample case, we can increase the first element of A to 8, using the all of the 5 moves available to us. Also, the first element of B can be reduced to 8 using the 6 of the 7 available moves. Now A = [ 8, 4] and B = [ 8, 4] . The error is now E = ( 8 - 8) 2 + ( 4 - 4) 2 = 0, but we are still left with 1 move for array B. Increasing the second element of B to 5 using the left move, we get B = [ 8, 5] and E = ( 8 - 8) 2 + ( 4 - 5) 2 = 1.",
    "topics": [
      "data structures",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Guard Duty (medium)",
    "url": "https://codeforces.com/problemset/problem/958/E2",
    "history": "Princess Heidi decided to give orders to all her K Rebel ship commanders in person. Unfortunately, she is currently travelling through hyperspace, and will leave it only at N specific moments t1, t2, . . . , tN. The meetings with commanders must therefore start and stop at those times. Namely, each commander will board her ship at some time ti and disembark at some later time tj. Of course, Heidi needs to meet with all commanders, and no two meetings can be held during the same time. Two commanders cannot even meet at the beginnings/ endings of the hyperspace jumps, because too many ships in one position could give out their coordinates to the enemy. Your task is to find minimum time that Princess Heidi has to spend on meetings, with her schedule satisfying the conditions above.",
    "input": "The first line contains two integers K, N ( 2 \u2264 2K \u2264 N \u2264 500000, K \u2264 5000) . The second line contains N distinct integers t1, t2, . . . , tN ( 1 \u2264 ti \u2264 109) representing the times when Heidi leaves hyperspace.",
    "output": "Output only one integer: the minimum time spent on meetings.",
    "note": "In the first example, there are five valid schedules: [ 1, 4] , [ 6, 7] with total time 4, [ 1, 4] , [ 6, 12] with total time 9, [ 1, 4] , [ 7, 12] with total time 8, [ 1, 6] , [ 7, 12] with total time 10, and [ 4, 6] , [ 7, 12] with total time 7. So the answer is 4. In the second example, there is only 1 valid schedule: [ 1, 2] , [ 3, 4] , [ 5, 6] . For the third example, one possible schedule with total time 6 is: [ 1, 3] , [ 4, 5] , [ 14, 15] , [ 23, 25] .",
    "topics": [
      "binary search",
      "dp",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Runner's Problem",
    "url": "https://codeforces.com/problemset/problem/954/F",
    "history": "You are running through a rectangular field. This field can be represented as a matrix with 3 rows and m columns. ( i, j) denotes a cell belonging to i- th row and j- th column. You start in ( 2, 1) and have to end your path in ( 2, m) . From the cell ( i, j) you may advance to: ( i - 1, j + 1) \u2014 only if i > 1, ( i, j + 1) , or ( i + 1, j + 1) \u2014 only if i < 3. However, there are n obstacles blocking your path. k- th obstacle is denoted by three integers ak, lk and rk, and it forbids entering any cell ( ak, j) such that lk \u2264 j \u2264 rk. You have to calculate the number of different paths from ( 2, 1) to ( 2, m) , and print it modulo 109 + 7.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 104, 3 \u2264 m \u2264 1018) \u2014 the number of obstacles and the number of columns in the matrix, respectively. Then n lines follow, each containing three integers ak, lk and rk ( 1 \u2264 ak \u2264 3, 2 \u2264 lk \u2264 rk \u2264 m - 1) denoting an obstacle blocking every cell ( ak, j) such that lk \u2264 j \u2264 rk. Some cells may be blocked by multiple obstacles.",
    "output": "Print the number of different paths from ( 2, 1) to ( 2, m) , taken modulo 109 + 7. If it is impossible to get from ( 2, 1) to ( 2, m) , then the number of paths is 0.",
    "note": " ",
    "topics": [
      "dp",
      "matrices",
      "sortings"
    ]
  },
  {
    "title": "Water Taps",
    "url": "https://codeforces.com/problemset/problem/954/E",
    "history": "Consider a system of n water taps all pouring water into the same container. The i- th water tap can be set to deliver any amount of water from 0 to ai ml per second ( this amount may be a real number) . The water delivered by i- th tap has temperature ti. If for every you set i- th tap to deliver exactly xi ml of water per second, then the resulting temperature of water will be ( if , then to avoid division by zero we state that the resulting water temperature is 0) . You have to set all the water taps in such a way that the resulting temperature is exactly T. What is the maximum amount of water you may get per second if its temperature has to be T?",
    "input": "The first line contains two integers n and T ( 1 \u2264 n \u2264 200000, 1 \u2264 T \u2264 106) \u2014 the number of water taps and the desired temperature of water, respectively. The second line contains n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 106) where ai is the maximum amount of water i- th tap can deliver per second. The third line contains n integers t1, t2, . . . , tn ( 1 \u2264 ti \u2264 106) \u2014 the temperature of water each tap delivers.",
    "output": "Print the maximum possible amount of water with temperature exactly T you can get per second ( if it is impossible to obtain water with such temperature, then the answer is considered to be 0) . Your answer is considered correct if its absolute or relative error doesn' t exceed 10 - 6.",
    "note": " ",
    "topics": [
      "binary search",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Curfew",
    "url": "https://codeforces.com/problemset/problem/949/D",
    "history": "Instructors of Some Informatics School make students go to bed. The house contains n rooms, in each room exactly b students were supposed to sleep. However, at the time of curfew it happened that many students are not located in their assigned rooms. The rooms are arranged in a row and numbered from 1 to n. Initially, in i- th room there are ai students. All students are currently somewhere in the house, therefore a1 + a2 + . . . + an = nb. Also 2 instructors live in this house. The process of curfew enforcement is the following. One instructor starts near room 1 and moves toward room n, while the second instructor starts near room n and moves toward room 1. After processing current room, each instructor moves on to the next one. Both instructors enter rooms and move simultaneously, if n is odd, then only the first instructor processes the middle room. When all rooms are processed, the process ends. When an instructor processes a room, she counts the number of students in the room, then turns off the light, and locks the room. Also, if the number of students inside the processed room is not equal to b, the instructor writes down the number of this room into her notebook ( and turns off the light, and locks the room) . Instructors are in a hurry ( to prepare the study plan for the next day) , so they don' t care about who is in the room, but only about the number of students. While instructors are inside the rooms, students can run between rooms that are not locked and not being processed. A student can run by at most d rooms, that is she can move to a room with number that differs my at most d. Also, after ( or instead of) running each student can hide under a bed in a room she is in. In this case the instructor will not count her during the processing. In each room any number of students can hide simultaneously. Formally, here is what' s happening: A curfew is announced, at this point in room i there are ai students. Each student can run to another room but not further than d rooms away from her initial room, or stay in place. After that each student can optionally hide under a bed. Instructors enter room 1 and room n, they count students there and lock the room ( after it no one can enter or leave this room) . Each student from rooms with numbers from 2 to n - 1 can run to another room but not further than d rooms away from her current room, or stay in place. Each student can optionally hide under a bed. Instructors move from room 1 to room 2 and from room n to room n - 1. This process continues until all rooms are processed. Let x1 denote the number of rooms in which the first instructor counted the number of non- hidden students different from b, and x2 be the same number for the second instructor. Students know that the principal will only listen to one complaint, therefore they want to minimize the maximum of numbers xi. Help them find this value if they use the optimal strategy.",
    "input": "The first line contains three integers n, d and b ( 2 \u2264 n \u2264 100 000, 1 \u2264 d \u2264 n - 1, 1 \u2264 b \u2264 10 000) , number of rooms in the house, running distance of a student, official number of students in a room. The second line contains n integers a1, a2, . . . , an ( 0 \u2264 ai \u2264 109) , i- th of which stands for the number of students in the i- th room before curfew announcement. It is guaranteed that a1 + a2 + . . . + an = nb.",
    "output": "Output one integer, the minimal possible value of the maximum of xi.",
    "note": "In the first sample the first three rooms are processed by the first instructor, and the last two are processed by the second instructor. One of the optimal strategies is the following: firstly three students run from room 5 to room 4, on the next stage two of them run to room 3, and one of those two hides under a bed. This way, the first instructor writes down room 2, and the second writes down nothing. In the second sample one of the optimal strategies is the following: firstly all students in room 1 hide, all students from room 2 run to room 3. On the next stage one student runs from room 3 to room 4, and 5 students hide. This way, the first instructor writes down rooms 1 and 2, the second instructor writes down rooms 5 and 6.",
    "topics": [
      "binary search",
      "brute force",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Points on the line",
    "url": "https://codeforces.com/problemset/problem/940/A",
    "history": "We' ve got no test cases. A big olympiad is coming up. But the problemsetters' number one priority should be adding another problem to the round. The diameter of a multiset of points on the line is the largest distance between two points from this set. For example, the diameter of the multiset 1, 3, 2, 1 is 2. Diameter of multiset consisting of one point is 0. You are given n points on the line. What is the minimum number of points you have to remove, so that the diameter of the multiset of the remaining points will not exceed d?",
    "input": "The first line contains two integers n and d ( 1 \u2264 n \u2264 100, 0 \u2264 d \u2264 100) \u2014 the amount of points and the maximum allowed diameter respectively. The second line contains n space separated integers ( 1 \u2264 xi \u2264 100) \u2014 the coordinates of the points.",
    "output": "Output a single integer \u2014 the minimum number of points you have to remove.",
    "note": "In the first test case the optimal strategy is to remove the point with coordinate 4. The remaining points will have coordinates 1 and 2, so the diameter will be equal to 2 - 1 = 1. In the second test case the diameter is equal to 0, so its is unnecessary to remove any points. In the third test case the optimal strategy is to remove points with coordinates 1, 9 and 10. The remaining points will have coordinates 3, 4 and 6, so the diameter will be equal to 6 - 3 = 3.",
    "topics": [
      "brute force",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Olympiad",
    "url": "https://codeforces.com/problemset/problem/937/A",
    "history": "The recent All- Berland Olympiad in Informatics featured n participants with each scoring a certain amount of points. As the head of the programming committee, you are to determine the set of participants to be awarded with diplomas with respect to the following criteria: At least one participant should get a diploma. None of those with score equal to zero should get awarded. When someone is awarded, all participants with score not less than his score should also be awarded. Determine the number of ways to choose a subset of participants that will receive the diplomas.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 100) \u2014 the number of participants. The next line contains a sequence of n integers a1, a2, . . . , an ( 0 \u2264 ai \u2264 600) \u2014 participants' scores. It' s guaranteed that at least one participant has non- zero score.",
    "output": "Print a single integer \u2014 the desired number of ways.",
    "note": "There are three ways to choose a subset in sample case one. Only participants with 3 points will get diplomas. Participants with 2 or 3 points will get diplomas. Everyone will get a diploma! The only option in sample case two is to award everyone. Note that in sample case three participants with zero scores cannot get anything.",
    "topics": [
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Resource Distribution",
    "url": "https://codeforces.com/problemset/problem/925/B",
    "history": "One department of some software company has n servers of different specifications. Servers are indexed with consecutive integers from 1 to n . Suppose that the specifications of the j - th server may be expressed with a single integer number c_ j of artificial resource units. In order for production to work, it is needed to deploy two services S_ 1 and S_ 2 to process incoming requests using the servers of the department. Processing of incoming requests of service S_ i takes x_ i resource units. The described situation happens in an advanced company, that is why each service may be deployed using not only one server, but several servers simultaneously. If service S_ i is deployed using k_ i servers, then the load is divided equally between these servers and each server requires only x_ i / k_ i ( that may be a fractional number) resource units. Each server may be left unused at all, or be used for deploying exactly one of the services ( but not for two of them simultaneously) . The service should not use more resources than the server provides. Determine if it is possible to deploy both services using the given servers, and if yes, determine which servers should be used for deploying each of the services.",
    "input": "The first line contains three integers n , x_ 1 , x_ 2 ( 2 \u2264 n \u2264 300 000 , 1 \u2264 x_ 1, x_ 2 \u2264 10^ 9 ) \u2014 the number of servers that the department may use, and resource units requirements for each of the services. The second line contains n space- separated integers c_ 1, c_ 2, . . . , c_ n ( 1 \u2264 c_ i \u2264 10^ 9 ) \u2014 the number of resource units provided by each of the servers.",
    "output": "If it is impossible to deploy both services using the given servers, print the only word \" No\" ( without the quotes) . Otherwise print the word \" Yes\" ( without the quotes) . In the second line print two integers k_ 1 and k_ 2 ( 1 \u2264 k_ 1, k_ 2 \u2264 n ) \u2014 the number of servers used for each of the services. In the third line print k_ 1 integers, the indices of the servers that will be used for the first service. In the fourth line print k_ 2 integers, the indices of the servers that will be used for the second service. No index may appear twice among the indices you print in the last two lines. If there are several possible answers, it is allowed to print any of them.",
    "note": "In the first sample test each of the servers 1, 2 and 6 will will provide 8 / 3 = 2. ( 6) resource units and each of the servers 5, 4 will provide 16 / 2 = 8 resource units. In the second sample test the first server will provide 20 resource units and each of the remaining servers will provide 32 / 3 = 10. ( 6) resource units.",
    "topics": [
      "binary search",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Robot Vacuum Cleaner",
    "url": "https://codeforces.com/problemset/problem/922/D",
    "history": "Pushok the dog has been chasing Imp for a few hours already. Fortunately, Imp knows that Pushok is afraid of a robot vacuum cleaner. While moving, the robot generates a string t consisting of letters ' s' and ' h' , that produces a lot of noise. We define noise of string t as the number of occurrences of string \" sh\" as a subsequence in it, in other words, the number of such pairs ( i, j) , that i < j and and . The robot is off at the moment. Imp knows that it has a sequence of strings ti in its memory, and he can arbitrary change their order. When the robot is started, it generates the string t as a concatenation of these strings in the given order. The noise of the resulting string equals the noise of this concatenation. Help Imp to find the maximum noise he can achieve by changing the order of the strings.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 105) \u2014 the number of strings in robot' s memory. Next n lines contain the strings t1, t2, . . . , tn, one per line. It is guaranteed that the strings are non- empty, contain only English letters ' s' and ' h' and their total length does not exceed 105.",
    "output": "Print a single integer \u2014 the maxumum possible noise Imp can achieve by changing the order of the strings.",
    "note": "The optimal concatenation in the first sample is ssshhshhhs.",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Swap Adjacent Elements",
    "url": "https://codeforces.com/problemset/problem/920/C",
    "history": "You have an array a consisting of n integers. Each integer from 1 to n appears exactly once in this array. For some indices i ( 1 \u2264 i \u2264 n - 1) it is possible to swap i- th element with ( i + 1) - th, for other indices it is not possible. You may perform any number of swapping operations any order. There is no limit on the number of times you swap i- th element with ( i + 1) - th ( if the position is not forbidden) . Can you make this array sorted in ascending order performing some sequence of swapping operations?",
    "input": "The first line contains one integer n ( 2 \u2264 n \u2264 200000) \u2014 the number of elements in the array. The second line contains n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 200000) \u2014 the elements of the array. Each integer from 1 to n appears exactly once. The third line contains a string of n - 1 characters, each character is either 0 or 1. If i- th character is 1, then you can swap i- th element with ( i + 1) - th any number of times, otherwise it is forbidden to swap i- th element with ( i + 1) - th.",
    "output": "If it is possible to sort the array in ascending order using any sequence of swaps you are allowed to make, print YES. Otherwise, print NO.",
    "note": "In the first example you may swap a3 and a4, and then swap a4 and a5.",
    "topics": [
      "dfs and similar",
      "greedy",
      "math",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Physical Education Lessons",
    "url": "https://codeforces.com/problemset/problem/915/E",
    "history": "This year Alex has finished school, and now he is a first- year student of Berland State University. For him it was a total surprise that even though he studies programming, he still has to attend physical education lessons. The end of the term is very soon, but, unfortunately, Alex still hasn' t attended a single lesson! Since Alex doesn' t want to get expelled, he wants to know the number of working days left until the end of the term, so he can attend physical education lessons during these days. But in BSU calculating the number of working days is a complicated matter: There are n days left before the end of the term ( numbered from 1 to n) , and initially all of them are working days. Then the university staff sequentially publishes q orders, one after another. Each order is characterised by three numbers l, r and k: If k = 1, then all days from l to r ( inclusive) become non- working days. If some of these days are made working days by some previous order, then these days still become non- working days; If k = 2, then all days from l to r ( inclusive) become working days. If some of these days are made non- working days by some previous order, then these days still become working days. Help Alex to determine the number of working days left after each order!",
    "input": "The first line contains one integer n, and the second line \u2014 one integer q ( 1 \u2264 n \u2264 109, 1 \u2264 q \u2264 3\u00b7105) \u2014 the number of days left before the end of the term, and the number of orders, respectively. Then q lines follow, i- th line containing three integers li, ri and ki representing i- th order ( 1 \u2264 li \u2264 ri \u2264 n, 1 \u2264 ki \u2264 2) .",
    "output": "Print q integers. i- th of them must be equal to the number of working days left until the end of the term after the first i orders are published.",
    "note": " ",
    "topics": [
      "data structures",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Too Easy Problems",
    "url": "https://codeforces.com/problemset/problem/913/D",
    "history": "You are preparing for an exam on scheduling theory. The exam will last for exactly T milliseconds and will consist of n problems. You can either solve problem i in exactly ti milliseconds or ignore it and spend no time. You don' t need time to rest after solving a problem, either. Unfortunately, your teacher considers some of the problems too easy for you. Thus, he assigned an integer ai to every problem i meaning that the problem i can bring you a point to the final score only in case you have solved no more than ai problems overall ( including problem i) . Formally, suppose you solve problems p1, p2, . . . , pk during the exam. Then, your final score s will be equal to the number of values of j between 1 and k such that k \u2264 apj. You have guessed that the real first problem of the exam is already in front of you. Therefore, you want to choose a set of problems to solve during the exam maximizing your final score in advance. Don' t forget that the exam is limited in time, and you must have enough time to solve all chosen problems. If there exist different sets of problems leading to the maximum final score, any of them will do.",
    "input": "The first line contains two integers n and T ( 1 \u2264 n \u2264 2\u00b7105; 1 \u2264 T \u2264 109) \u2014 the number of problems in the exam and the length of the exam in milliseconds, respectively. Each of the next n lines contains two integers ai and ti ( 1 \u2264 ai \u2264 n; 1 \u2264 ti \u2264 104) . The problems are numbered from 1 to n.",
    "output": "In the first line, output a single integer s \u2014 your maximum possible final score. In the second line, output a single integer k ( 0 \u2264 k \u2264 n) \u2014 the number of problems you should solve. In the third line, output k distinct integers p1, p2, . . . , pk ( 1 \u2264 pi \u2264 n) \u2014 the indexes of problems you should solve, in any order. If there are several optimal sets of problems, you may output any of them.",
    "note": "In the first example, you should solve problems 3, 1, and 4. In this case you' ll spend 80 + 100 + 90 = 270 milliseconds, falling within the length of the exam, 300 milliseconds ( and even leaving yourself 30 milliseconds to have a rest) . Problems 3 and 1 will bring you a point each, while problem 4 won' t. You' ll score two points. In the second example, the length of the exam is catastrophically not enough to solve even a single problem. In the third example, you have just enough time to solve both problems in 42 + 58 = 100 milliseconds and hand your solutions to the teacher with a smile.",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Perun, Ult!",
    "url": "https://codeforces.com/problemset/problem/912/C",
    "history": "A lot of students spend their winter holidays productively. Vlad has advanced very well in doing so! For three days already, fueled by salads and tangerines \u2014 the leftovers from New Year celebration \u2014 he has been calibrating his rating in his favorite MOBA game, playing as a hero named Perun. Perun has an ultimate ability called \" Thunderwrath\" . At the instant of its activation, each enemy on the map ( n of them in total) loses health points as a single- time effect. It also has a restriction: it can only activated when the moment of time is an integer. The initial bounty for killing an enemy is . Additionally, it increases by each second. Formally, if at some second t the ability is activated and the i- th enemy is killed as a result ( i. e. his health drops to zero or lower) , Vlad earns units of gold. Every enemy can receive damage, as well as be healed. There are multiple ways of doing so, but Vlad is not interested in details. For each of n enemies he knows: \u2014 maximum number of health points for the i- th enemy; \u2014 initial health of the enemy ( on the 0- th second) ; \u2014 the amount of health the i- th enemy can regenerate per second. There also m health updates Vlad knows about: \u2014 time when the health was updated; \u2014 the enemy whose health was updated; \u2014 updated health points for enemyj. Obviously, Vlad wants to maximize his profit. If it' s necessary, he could even wait for years to activate his ability at the right second. Help him determine the exact second ( note that it must be an integer) from 0 ( inclusively) to + \u221e so that a single activation of the ability would yield Vlad the maximum possible amount of gold, and print this amount.",
    "input": "In the first line, two integers are given ( separated by spaces) \u2014 n and m ( 1 \u2264 n \u2264 105, 0 \u2264 m \u2264 105) . In the second line, there are three integers: , and ( , ) . Each of the following n lines has three integers \u2014 , , ( , ) . The next m lines contain three integers each \u2014 , , ( , , ) . It is guaranteed that there is no more than one hearth change per second for each enemy: more formally, for each a, b so that 1 \u2264 a, b \u2264 m, a = \u0338 b holds that if , then .",
    "output": "Output the single integer \u2014 the maximum amount of gold Vlad can obtain if he applies \" Thunderwrath\" exactly once, or - 1 if this amount can be infinitely large.",
    "note": "On the pictures you can see health points of each enemy versus time in sample cases. Periods when Vlad can kill one enemy are marked with yellow color. Periods when Vlad can kill two enemies are marked with purple color. In the first sample case, Vlad can activate the ability at the 50- th second: the enemies 2 and 3 will die since they would have 40 and 50 health points correspondingly. Vlad will earn 2\u00b7( 1000 + 50\u00b710) = 3000 gold. In the second sample case, the maximum amount of health for the enemy 1 is less than the damage dealt by the ability. Hence, the enemy could be killed anytime. As the bounty increases by 50 over the time, the maximum possible amount of gold is infinite.",
    "topics": [
      "brute force",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Generate Login",
    "url": "https://codeforces.com/problemset/problem/909/A",
    "history": "The preferred way to generate user login in Polygon is to concatenate a prefix of the user' s first name and a prefix of their last name, in that order. Each prefix must be non- empty, and any of the prefixes can be the full name. Typically there are multiple possible logins for each person. You are given the first and the last name of a user. Return the alphabetically earliest login they can get ( regardless of other potential Polygon users) . As a reminder, a prefix of a string s is its substring which occurs at the beginning of s: \" a\" , \" ab\" , \" abc\" etc. are prefixes of string \" abcdef\" but \" b\" and ' bc\" are not. A string a is alphabetically earlier than a string b, if a is a prefix of b, or a and b coincide up to some position, and then a has a letter that is alphabetically earlier than the corresponding letter in b: \" a\" and \" ab\" are alphabetically earlier than \" ac\" but \" b\" and \" ba\" are alphabetically later than \" ac\" .",
    "input": "The input consists of a single line containing two space- separated strings: the first and the last names. Each character of each string is a lowercase English letter. The length of each string is between 1 and 10, inclusive.",
    "output": "Output a single string \u2014 alphabetically earliest possible login formed from these names. The output should be given in lowercase as well.",
    "note": " ",
    "topics": [
      "brute force",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "XK Segments",
    "url": "https://codeforces.com/problemset/problem/895/B",
    "history": "While Vasya finished eating his piece of pizza, the lesson has already started. For being late for the lesson, the teacher suggested Vasya to solve one interesting problem. Vasya has an array a and integer x. He should find the number of different ordered pairs of indexes ( i, j) such that ai \u2264 aj and there are exactly k integers y such that ai \u2264 y \u2264 aj and y is divisible by x. In this problem it is meant that pair ( i, j) is equal to ( j, i) only if i is equal to j. For example pair ( 1, 2) is not the same as ( 2, 1) .",
    "input": "The first line contains 3 integers n, x, k ( 1 \u2264 n \u2264 105, 1 \u2264 x \u2264 109, 0 \u2264 k \u2264 109) , where n is the size of the array a and x and k are numbers from the statement. The second line contains n integers ai ( 1 \u2264 ai \u2264 109) \u2014 the elements of the array a.",
    "output": "Print one integer \u2014 the answer to the problem.",
    "note": "In first sample there are only three suitable pairs of indexes \u2014 ( 1, 2) , ( 2, 3) , ( 3, 4) . In second sample there are four suitable pairs of indexes( 1, 1) , ( 2, 2) , ( 3, 3) , ( 4, 4) . In third sample every pair ( i, j) is suitable, so the answer is 5 * 5 = 25.",
    "topics": [
      "binary search",
      "math",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Row of Models",
    "url": "https://codeforces.com/problemset/problem/887/F",
    "history": "During the final part of fashion show all models come to the stage and stay in one row and fashion designer stays to right to model on the right. During the rehearsal, Izabella noticed, that row isn' t nice, but she can' t figure out how to fix it. Like many other creative people, Izabella has a specific sense of beauty. Evaluating beauty of row of models Izabella looks at heights of models. She thinks that row is nice if for each model distance to nearest model with less height ( model or fashion designer) to the right of her doesn' t exceed k ( distance between adjacent people equals 1, the distance between people with exactly one man between them equals 2, etc) . She wants to make row nice, but fashion designer has his own sense of beauty, so she can at most one time select two models from the row and swap their positions if the left model from this pair is higher than the right model from this pair. Fashion designer ( man to the right of rightmost model) has less height than all models and can' t be selected for exchange. You should tell if it' s possible to make at most one exchange in such a way that row becomes nice for Izabella.",
    "input": "In first line there are two integers n and k ( 1 \u2264 n \u2264 5\u00b7105, 1 \u2264 k \u2264 n) \u2014 number of models and required distance. Second line contains n space- separated integers ai ( 1 \u2264 ai \u2264 109) \u2014 height of each model. Pay attention that height of fashion designer is not given and can be less than 1.",
    "output": "Print \u00abYES\u00bb ( without quotes) if it' s possible to make row nice using at most one exchange, and \u00abNO\u00bb ( without quotes) otherwise.",
    "note": " ",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Little Brother",
    "url": "https://codeforces.com/problemset/problem/887/E",
    "history": "Masha' s little brother draw two points on a sheet of paper. After that, he draws some circles and gave the sheet to his sister. Masha has just returned from geometry lesson so she instantly noticed some interesting facts about brother' s drawing. At first, the line going through two points, that brother drew, doesn' t intersect or touch any circle. Also, no two circles intersect or touch, and there is no pair of circles such that one circle is located inside another. Moreover, for each circle, Masha drew a square of the minimal area with sides parallel axis such that this circle is located inside the square and noticed that there is no two squares intersect or touch and there is no pair of squares such that one square is located inside other. Now Masha wants to draw circle of minimal possible radius such that it goes through two points that brother drew and doesn' t intersect any other circle, but other circles can touch Masha' s circle and can be located inside it. It' s guaranteed, that answer won' t exceed 1012. It should be held for hacks as well.",
    "input": "First line contains four integers x1, y1, x2, y2 ( - 105 \u2264 x1, y1, x2, y2 \u2264 105) \u2014 coordinates of points that brother drew. First point has coordinates ( x1, y1) and second point has coordinates ( x2, y2) . These two points are different. The second line contains single integer n ( 1 \u2264 n \u2264 105) \u2014 the number of circles that brother drew. Next n lines contains descriptions of circles. Each line contains three integers xi, yi, ri ( - 105 \u2264 xi, yi \u2264 105, 1 \u2264 ri \u2264 105) describing circle with center ( xi, yi) and radius ri.",
    "output": "Output smallest real number, that it' s possible to draw a circle with such radius through given points in such a way that it doesn' t intersect other circles. The output is considered correct if it has a relative or absolute error of at most 10 - 4.",
    "note": "",
    "topics": [
      "binary search",
      "geometry",
      "sortings"
    ]
  },
  {
    "title": "Renovation",
    "url": "https://codeforces.com/problemset/problem/883/J",
    "history": "The mayor of the Berland city S sees the beauty differently than other city- dwellers. In particular, he does not understand at all, how antique houses can be nice- looking. So the mayor wants to demolish all ancient buildings in the city. The city S is going to host the football championship very soon. In order to make the city beautiful, every month the Berland government provides mayor a money tranche. The money has to be spent on ancient buildings renovation. There are n months before the championship and the i- th month tranche equals to ai burles. The city S has m antique buildings and the renovation cost of the j- th building is bj burles. The mayor has his own plans for spending the money. As he doesn' t like antique buildings he wants to demolish as much of them as possible. For the j- th building he calculated its demolishing cost pj. The mayor decided to act according to the following plan. Each month he chooses several ( possibly zero) of m buildings to demolish in such a way that renovation cost of each of them separately is not greater than the money tranche ai of this month ( bj \u2264 ai) \u2014 it will allow to deceive city- dwellers that exactly this building will be renovated. Then the mayor has to demolish all selected buildings during the current month as otherwise the dwellers will realize the deception and the plan will fail. Definitely the total demolishing cost can not exceed amount of money the mayor currently has. The mayor is not obliged to spend all the money on demolishing. If some money is left, the mayor puts it to the bank account and can use it in any subsequent month. Moreover, at any month he may choose not to demolish any buildings at all ( in this case all the tranche will remain untouched and will be saved in the bank) . Your task is to calculate the maximal number of buildings the mayor can demolish.",
    "input": "The first line of the input contains two integers n and m ( 1 \u2264 n, m \u2264 100 000) \u2014 the number of months before the championship and the number of ancient buildings in the city S. The second line contains n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) , where ai is the tranche of the i- th month. The third line contains m integers b1, b2, . . . , bm ( 1 \u2264 bj \u2264 109) , where bj is renovation cost of the j- th building. The fourth line contains m integers p1, p2, . . . , pm ( 1 \u2264 pj \u2264 109) , where pj is the demolishing cost of the j- th building.",
    "output": "Output single integer \u2014 the maximal number of buildings the mayor can demolish.",
    "note": "In the third example the mayor acts as follows. In the first month he obtains 6 burles tranche and demolishes buildings # 2 ( renovation cost 6, demolishing cost 4) and # 4 ( renovation cost 5, demolishing cost 2) . He spends all the money on it. After getting the second month tranche of 3 burles, the mayor selects only building # 1 ( renovation cost 3, demolishing cost 1) for demolishing. As a result, he saves 2 burles for the next months. In the third month he gets 2 burle tranche, but decides not to demolish any buildings at all. As a result, he has 2 + 2 = 4 burles in the bank. This reserve will be spent on the fourth month together with the 4- th tranche for demolishing of houses # 3 and # 5 ( renovation cost is 4 for each, demolishing costs are 3 and 5 correspondingly) . After this month his budget is empty. Finally, after getting the last tranche of 3 burles, the mayor demolishes building # 6 ( renovation cost 2, demolishing cost 3) . As it can be seen, he demolished all 6 buildings.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Sorting the Coins",
    "url": "https://codeforces.com/problemset/problem/875/B",
    "history": "Recently, Dima met with Sasha in a philatelic store, and since then they are collecting coins together. Their favorite occupation is to sort collections of coins. Sasha likes having things in order, that is why he wants his coins to be arranged in a row in such a way that firstly come coins out of circulation, and then come coins still in circulation. For arranging coins Dima uses the following algorithm. One step of his algorithm looks like the following: He looks through all the coins from left to right; If he sees that the i- th coin is still in circulation, and ( i + 1) - th coin is already out of circulation, he exchanges these two coins and continues watching coins from ( i + 1) - th. Dima repeats the procedure above until it happens that no two coins were exchanged during this procedure. Dima calls hardness of ordering the number of steps required for him according to the algorithm above to sort the sequence, e. g. the number of times he looks through the coins from the very beginning. For example, for the ordered sequence hardness of ordering equals one. Today Sasha invited Dima and proposed him a game. First he puts n coins in a row, all of them are out of circulation. Then Sasha chooses one of the coins out of circulation and replaces it with a coin in circulation for n times. During this process Sasha constantly asks Dima what is the hardness of ordering of the sequence. The task is more complicated because Dima should not touch the coins and he should determine hardness of ordering in his mind. Help Dima with this task.",
    "input": "The first line contains single integer n ( 1 \u2264 n \u2264 300 000) \u2014 number of coins that Sasha puts behind Dima. Second line contains n distinct integers p1, p2, . . . , pn ( 1 \u2264 pi \u2264 n) \u2014 positions that Sasha puts coins in circulation to. At first Sasha replaces coin located at position p1, then coin located at position p2 and so on. Coins are numbered from left to right.",
    "output": "Print n + 1 numbers a0, a1, . . . , an, where a0 is a hardness of ordering at the beginning, a1 is a hardness of ordering after the first replacement and so on.",
    "note": "Let' s denote as O coin out of circulation, and as X \u2014 coin is circulation. At the first sample, initially in row there are coins that are not in circulation, so Dima will look through them from left to right and won' t make any exchanges. After replacement of the first coin with a coin in circulation, Dima will exchange this coin with next three times and after that he will finally look through the coins and finish the process. XOOO \u2192 OOOXAfter replacement of the third coin, Dima' s actions look this way: XOXO \u2192 OXOX \u2192 OOXXAfter replacement of the fourth coin, Dima' s actions look this way: XOXX \u2192 OXXXFinally, after replacement of the second coin, row becomes consisting of coins that are in circulation and Dima will look through coins from left to right without any exchanges.",
    "topics": [
      "dsu",
      "implementation",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Ordering Pizza",
    "url": "https://codeforces.com/problemset/problem/865/B",
    "history": "It' s another Start[ c] up finals, and that means there is pizza to order for the onsite contestants. There are only 2 types of pizza ( obviously not, but let' s just pretend for the sake of the problem) , and all pizzas contain exactly S slices. It is known that the i- th contestant will eat si slices of pizza, and gain ai happiness for each slice of type 1 pizza they eat, and bi happiness for each slice of type 2 pizza they eat. We can order any number of type 1 and type 2 pizzas, but we want to buy the minimum possible number of pizzas for all of the contestants to be able to eat their required number of slices. Given that restriction, what is the maximum possible total happiness that can be achieved?",
    "input": "The first line of input will contain integers N and S ( 1 \u2264 N \u2264 105, 1 \u2264 S \u2264 105) , the number of contestants and the number of slices per pizza, respectively. N lines follow. The i- th such line contains integers si, ai, and bi ( 1 \u2264 si \u2264 105, 1 \u2264 ai \u2264 105, 1 \u2264 bi \u2264 105) , the number of slices the i- th contestant will eat, the happiness they will gain from each type 1 slice they eat, and the happiness they will gain from each type 2 slice they eat, respectively.",
    "output": "Print the maximum total happiness that can be achieved.",
    "note": "In the first example, you only need to buy one pizza. If you buy a type 1 pizza, the total happiness will be 3\u00b75 + 4\u00b76 + 5\u00b79 = 84, and if you buy a type 2 pizza, the total happiness will be 3\u00b77 + 4\u00b77 + 5\u00b75 = 74.",
    "topics": [
      "binary search",
      "sortings",
      "ternary search"
    ]
  },
  {
    "title": "Fire",
    "url": "https://codeforces.com/problemset/problem/864/E",
    "history": "Polycarp is in really serious trouble \u2014 his house is on fire! It' s time to save the most valuable items. Polycarp estimated that it would take ti seconds to save i- th item. In addition, for each item, he estimated the value of di \u2014 the moment after which the item i will be completely burned and will no longer be valuable for him at all. In particular, if ti \u2265 di, then i- th item cannot be saved. Given the values pi for each of the items, find a set of items that Polycarp can save such that the total value of this items is maximum possible. Polycarp saves the items one after another. For example, if he takes item a first, and then item b, then the item a will be saved in ta seconds, and the item b \u2014 in ta + tb seconds after fire started.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 100) \u2014 the number of items in Polycarp' s house. Each of the following n lines contains three integers ti, di, pi ( 1 \u2264 ti \u2264 20, 1 \u2264 di \u2264 2 000, 1 \u2264 pi \u2264 20) \u2014 the time needed to save the item i, the time after which the item i will burn completely and the value of item i.",
    "output": "In the first line print the maximum possible total value of the set of saved items. In the second line print one integer m \u2014 the number of items in the desired set. In the third line print m distinct integers \u2014 numbers of the saved items in the order Polycarp saves them. Items are 1- indexed in the same order in which they appear in the input. If there are several answers, print any of them.",
    "note": "In the first example Polycarp will have time to save any two items, but in order to maximize the total value of the saved items, he must save the second and the third item. For example, he can firstly save the third item in 3 seconds, and then save the second item in another 2 seconds. Thus, the total value of the saved items will be 6 + 5 = 11. In the second example Polycarp can save only the first item, since even if he immediately starts saving the second item, he can save it in 3 seconds, but this item will already be completely burned by this time.",
    "topics": [
      "dp",
      "sortings"
    ]
  },
  {
    "title": "Fair Game",
    "url": "https://codeforces.com/problemset/problem/864/A",
    "history": "Petya and Vasya decided to play a game. They have n cards ( n is an even number) . A single integer is written on each card. Before the game Petya will choose an integer and after that Vasya will choose another integer ( different from the number that Petya chose) . During the game each player takes all the cards with number he chose. For example, if Petya chose number 5 before the game he will take all cards on which 5 is written and if Vasya chose number 10 before the game he will take all cards on which 10 is written. The game is considered fair if Petya and Vasya can take all n cards, and the number of cards each player gets is the same. Determine whether Petya and Vasya can choose integer numbers before the game so that the game is fair.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 100) \u2014 number of cards. It is guaranteed that n is an even number. The following n lines contain a sequence of integers a1, a2, . . . , an ( one integer per line, 1 \u2264 ai \u2264 100) \u2014 numbers written on the n cards.",
    "output": "If it is impossible for Petya and Vasya to choose numbers in such a way that the game will be fair, print \" NO\" ( without quotes) in the first line. In this case you should not print anything more. In the other case print \" YES\" ( without quotes) in the first line. In the second line print two distinct integers \u2014 number that Petya should choose and the number that Vasya should choose to make the game fair. If there are several solutions, print any of them.",
    "note": "In the first example the game will be fair if, for example, Petya chooses number 11, and Vasya chooses number 27. Then the will take all cards \u2014 Petya will take cards 1 and 4, and Vasya will take cards 2 and 3. Thus, each of them will take exactly two cards. In the second example fair game is impossible because the numbers written on the cards are equal, but the numbers that Petya and Vasya should choose should be distinct. In the third example it is impossible to take all cards. Petya and Vasya can take at most five cards \u2014 for example, Petya can choose number 10 and Vasya can choose number 20. But for the game to be fair it is necessary to take 6 cards.",
    "topics": [
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Turn Off The TV",
    "url": "https://codeforces.com/problemset/problem/863/E",
    "history": "Luba needs your help again! Luba has n TV sets. She knows that i- th TV set will be working from moment of time li till moment ri, inclusive. Luba wants to switch off one of TV sets in order to free the socket. Let' s call some TV set redundant if after switching it off the number of integer moments of time when at least one of TV sets is working won' t decrease. Luba will be very upset if she has to switch off a non- redundant TV set. Help Luba by telling her the index of some redundant TV set. If there is no any, print - 1.",
    "input": "The first line contains one integer number n ( 1 \u2264 n \u2264 2\u00b7105) \u2014 the number of TV sets. Then n lines follow, each of them containing two integer numbers li, ri ( 0 \u2264 li \u2264 ri \u2264 109) denoting the working time of i- th TV set.",
    "output": "If there is no any redundant TV set, print - 1. Otherwise print the index of any redundant TV set ( TV sets are indexed from 1 to n) . If there are multiple answers, print any of them.",
    "note": "Consider the first sample. Initially all integer moments of time such that at least one TV set is working are from the segment [ 1; 7] . It' s easy to see that this segment won' t change if we switch off the first TV set ( or the second one) . Note that in the fourth sample you can switch off the second TV set, since even without it all integer moments such that any of the TV sets is working denote the segment [ 1; 4] .",
    "topics": [
      "data structures",
      "sortings"
    ]
  },
  {
    "title": "Kayaking",
    "url": "https://codeforces.com/problemset/problem/863/B",
    "history": "Vadim is really keen on travelling. Recently he heard about kayaking activity near his town and became very excited about it, so he joined a party of kayakers. Now the party is ready to start its journey, but firstly they have to choose kayaks. There are 2\u00b7n people in the group ( including Vadim) , and they have exactly n - 1 tandem kayaks ( each of which, obviously, can carry two people) and 2 single kayaks. i- th person' s weight is wi, and weight is an important matter in kayaking \u2014 if the difference between the weights of two people that sit in the same tandem kayak is too large, then it can crash. And, of course, people want to distribute their seats in kayaks in order to minimize the chances that kayaks will crash. Formally, the instability of a single kayak is always 0, and the instability of a tandem kayak is the absolute difference between weights of the people that are in this kayak. Instability of the whole journey is the total instability of all kayaks. Help the party to determine minimum possible total instability!",
    "input": "The first line contains one number n ( 2 \u2264 n \u2264 50) . The second line contains 2\u00b7n integer numbers w1, w2, . . . , w2n, where wi is weight of person i ( 1 \u2264 wi \u2264 1000) .",
    "output": "Print minimum possible total instability.",
    "note": " ",
    "topics": [
      "brute force",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Mahmoud and Ehab and the function",
    "url": "https://codeforces.com/problemset/problem/862/E",
    "history": "Dr. Evil is interested in math and functions, so he gave Mahmoud and Ehab array a of length n and array b of length m. He introduced a function f( j) which is defined for integers j, which satisfy 0 \u2264 j \u2264 m - n. Suppose, ci = ai - bi + j. Then f( j) = | c1 - c2 + c3 - c4. . . cn| . More formally, . Dr. Evil wants Mahmoud and Ehab to calculate the minimum value of this function over all valid j. They found it a bit easy, so Dr. Evil made their task harder. He will give them q update queries. During each update they should add an integer xi to all elements in a in range [ li; ri] i. e. they should add xi to ali, ali + 1, . . . , ari and then they should calculate the minimum value of f( j) for all valid j. Please help Mahmoud and Ehab.",
    "input": "The first line contains three integers n, m and q ( 1 \u2264 n \u2264 m \u2264 105, 1 \u2264 q \u2264 105) \u2014 number of elements in a, number of elements in b and number of queries, respectively. The second line contains n integers a1, a2, . . . , an. ( - 109 \u2264 ai \u2264 109) \u2014 elements of a. The third line contains m integers b1, b2, . . . , bm. ( - 109 \u2264 bi \u2264 109) \u2014 elements of b. Then q lines follow describing the queries. Each of them contains three integers li ri xi ( 1 \u2264 li \u2264 ri \u2264 n, - 109 \u2264 x \u2264 109) \u2014 range to be updated and added value.",
    "output": "The first line should contain the minimum value of the function f before any update. Then output q lines, the i- th of them should contain the minimum value of the function f after performing the i- th update .",
    "note": "For the first example before any updates it' s optimal to choose j = 0, f( 0) = | ( 1 - 1) - ( 2 - 2) + ( 3 - 3) - ( 4 - 4) + ( 5 - 5) | = | 0| = 0. After the first update a becomes 11, 2, 3, 4, 5 and it' s optimal to choose j = 1, f( 1) = | ( 11 - 2) - ( 2 - 3) + ( 3 - 4) - ( 4 - 5) + ( 5 - 6) = | 9| = 9. After the second update a becomes 2, 2, 3, 4, 5 and it' s optimal to choose j = 1, f( 1) = | ( 2 - 2) - ( 2 - 3) + ( 3 - 4) - ( 4 - 5) + ( 5 - 6) | = | 0| = 0. After the third update a becomes 1, 1, 2, 3, 4 and it' s optimal to choose j = 0, f( 0) = | ( 1 - 1) - ( 1 - 2) + ( 2 - 3) - ( 3 - 4) + ( 4 - 5) | = | 0| = 0.",
    "topics": [
      "binary search",
      "data structures",
      "sortings"
    ]
  },
  {
    "title": "Polycarp's phone book",
    "url": "https://codeforces.com/problemset/problem/858/D",
    "history": "There are n phone numbers in Polycarp' s contacts on his phone. Each number is a 9- digit integer, starting with a digit different from 0. All the numbers are distinct. There is the latest version of Berdroid OS installed on Polycarp' s phone. If some number is entered, is shows up all the numbers in the contacts for which there is a substring equal to the entered sequence of digits. For example, is there are three phone numbers in Polycarp' s contacts: 123456789, 100000000 and 100123456, then: if he enters 00 two numbers will show up: 100000000 and 100123456, if he enters 123 two numbers will show up 123456789 and 100123456, if he enters 01 there will be only one number 100123456. For each of the phone numbers in Polycarp' s contacts, find the minimum in length sequence of digits such that if Polycarp enters this sequence, Berdroid shows this only phone number.",
    "input": "The first line contains single integer n ( 1 \u2264 n \u2264 70000) \u2014 the total number of phone contacts in Polycarp' s contacts. The phone numbers follow, one in each line. Each number is a positive 9- digit integer starting with a digit from 1 to 9. All the numbers are distinct.",
    "output": "Print exactly n lines: the i- th of them should contain the shortest non- empty sequence of digits, such that if Polycarp enters it, the Berdroid OS shows up only the i- th number from the contacts. If there are several such sequences, print any of them.",
    "note": " ",
    "topics": [
      "data structures",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Jury Meeting",
    "url": "https://codeforces.com/problemset/problem/853/B",
    "history": "Country of Metropolia is holding Olympiad of Metrpolises soon. It mean that all jury members of the olympiad should meet together in Metropolis ( the capital of the country) for the problem preparation process. There are n + 1 cities consecutively numbered from 0 to n. City 0 is Metropolis that is the meeting point for all jury members. For each city from 1 to n there is exactly one jury member living there. Olympiad preparation is a long and demanding process that requires k days of work. For all of these k days each of the n jury members should be present in Metropolis to be able to work on problems. You know the flight schedule in the country ( jury members consider themselves important enough to only use flights for transportation) . All flights in Metropolia are either going to Metropolis or out of Metropolis. There are no night flights in Metropolia, or in the other words, plane always takes off at the same day it arrives. On his arrival day and departure day jury member is not able to discuss the olympiad. All flights in Megapolia depart and arrive at the same day. Gather everybody for k days in the capital is a hard objective, doing that while spending the minimum possible money is even harder. Nevertheless, your task is to arrange the cheapest way to bring all of the jury members to Metrpolis, so that they can work together for k days and then send them back to their home cities. Cost of the arrangement is defined as a total cost of tickets for all used flights. It is allowed for jury member to stay in Metropolis for more than k days.",
    "input": "The first line of input contains three integers n, m and k ( 1 \u2264 n \u2264 105, 0 \u2264 m \u2264 105, 1 \u2264 k \u2264 106) . The i- th of the following m lines contains the description of the i- th flight defined by four integers di, fi, ti and ci ( 1 \u2264 di \u2264 106, 0 \u2264 fi \u2264 n, 0 \u2264 ti \u2264 n, 1 \u2264 ci \u2264 106, exactly one of fi and ti equals zero) , the day of departure ( and arrival) , the departure city, the arrival city and the ticket cost.",
    "output": "Output the only integer that is the minimum cost of gathering all jury members in city 0 for k days and then sending them back to their home cities. If it is impossible to gather everybody in Metropolis for k days and then send them back to their home cities, output \" - 1\" ( without the quotes) .",
    "note": "The optimal way to gather everybody in Metropolis in the first sample test is to use flights that take place on days 1, 2, 8 and 9. The only alternative option is to send jury member from second city back home on day 15, that would cost 2500 more. In the second sample it is impossible to send jury member from city 2 back home from Metropolis.",
    "topics": [
      "greedy",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Property",
    "url": "https://codeforces.com/problemset/problem/852/C",
    "history": "Bill is a famous mathematician in BubbleLand. Thanks to his revolutionary math discoveries he was able to make enough money to build a beautiful house. Unfortunately, for not paying property tax on time, court decided to punish Bill by making him lose a part of his property. Bill\u2019s property can be observed as a convex regular 2n- sided polygon A0 A1. . . A2n - 1 A2n, A2n = A0, with sides of the exactly 1 meter in length. Court rules for removing part of his property are as follows: Split every edge Ak Ak + 1, k = 0. . . 2n - 1 in n equal parts of size 1 / n with points P0, P1, . . . , Pn - 1 On every edge A2k A2k + 1, k = 0. . . n - 1 court will choose one point B2k = Pi for some i = 0, . . . , n - 1 such that On every edge A2k + 1A2k + 2, k = 0. . . n - 1 Bill will choose one point B2k + 1 = Pi for some i = 0, . . . , n - 1 such that Bill gets to keep property inside of 2n- sided polygon B0 B1. . . B2n - 1 Luckily, Bill found out which B2k points the court chose. Even though he is a great mathematician, his house is very big and he has a hard time calculating. Therefore, he is asking you to help him choose points so he maximizes area of property he can keep.",
    "input": "The first line contains one integer number n ( 2 \u2264 n \u2264 50000) , representing number of edges of 2n- sided polygon. The second line contains n distinct integer numbers B2k ( 0 \u2264 B2k \u2264 n - 1, k = 0. . . n - 1) separated by a single space, representing points the court chose. If B2k = i, the court chose point Pi on side A2k A2k + 1.",
    "output": "Output contains n distinct integers separated by a single space representing points B1, B3, . . . , B2n - 1 Bill should choose in order to maximize the property area. If there are multiple solutions that maximize the area, return any of them.",
    "note": "To maximize area Bill should choose points: B1 = P0, B3 = P2, B5 = P1",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Rooter's Song",
    "url": "https://codeforces.com/problemset/problem/848/B",
    "history": "Wherever the destination is, whoever we meet, let' s render this song together. On a Cartesian coordinate plane lies a rectangular stage of size w \u00d7 h, represented by a rectangle with corners ( 0, 0) , ( w, 0) , ( w, h) and ( 0, h) . It can be seen that no collisions will happen before one enters the stage. On the sides of the stage stand n dancers. The i- th of them falls into one of the following groups: Vertical: stands at ( xi, 0) , moves in positive y direction ( upwards) ; Horizontal: stands at ( 0, yi) , moves in positive x direction ( rightwards) . According to choreography, the i- th dancer should stand still for the first ti milliseconds, and then start moving in the specified direction at 1 unit per millisecond, until another border is reached. It is guaranteed that no two dancers have the same group, position and waiting time at the same time. When two dancers collide ( i. e. are on the same point at some time when both of them are moving) , they immediately exchange their moving directions and go on. Dancers stop when a border of the stage is reached. Find out every dancer' s stopping position.",
    "input": "The first line of input contains three space- separated positive integers n, w and h ( 1 \u2264 n \u2264 100 000, 2 \u2264 w, h \u2264 100 000) \u2014 the number of dancers and the width and height of the stage, respectively. The following n lines each describes a dancer: the i- th among them contains three space- separated integers gi, pi, and ti ( 1 \u2264 gi \u2264 2, 1 \u2264 pi \u2264 99 999, 0 \u2264 ti \u2264 100 000) , describing a dancer' s group gi ( gi = 1 \u2014 vertical, gi = 2 \u2014 horizontal) , position, and waiting time. If gi = 1 then pi = xi; otherwise pi = yi. It' s guaranteed that 1 \u2264 xi \u2264 w - 1 and 1 \u2264 yi \u2264 h - 1. It is guaranteed that no two dancers have the same group, position and waiting time at the same time.",
    "output": "Output n lines, the i- th of which contains two space- separated integers ( xi, yi) \u2014 the stopping position of the i- th dancer in the input.",
    "note": "The first example corresponds to the initial setup in the legend, and the tracks of dancers are marked with different colours in the following figure. In the second example, no dancers collide.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "geometry",
      "implementation",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Travel Cards",
    "url": "https://codeforces.com/problemset/problem/847/K",
    "history": "In the evening Polycarp decided to analyze his today' s travel expenses on public transport. The bus system in the capital of Berland is arranged in such a way that each bus runs along the route between two stops. Each bus has no intermediate stops. So each of the buses continuously runs along the route from one stop to the other and back. There is at most one bus running between a pair of stops. Polycarp made n trips on buses. About each trip the stop where he started the trip and the the stop where he finished are known. The trips follow in the chronological order in Polycarp' s notes. It is known that one trip on any bus costs a burles. In case when passenger makes a transshipment the cost of trip decreases to b burles ( b < a) . A passenger makes a transshipment if the stop on which he boards the bus coincides with the stop where he left the previous bus. Obviously, the first trip can not be made with transshipment. For example, if Polycarp made three consecutive trips: \" BerBank\" \" University\" , \" University\" \" BerMall\" , \" University\" \" BerBank\" , then he payed a + b + a = 2a + b burles. From the BerBank he arrived to the University, where he made transshipment to the other bus and departed to the BerMall. Then he walked to the University and returned to the BerBank by bus. Also Polycarp can buy no more than k travel cards. Each travel card costs f burles. The travel card for a single bus route makes free of charge any trip by this route ( in both directions) . Once purchased, a travel card can be used any number of times in any direction. What is the smallest amount of money Polycarp could have spent today if he can buy no more than k travel cards?",
    "input": "The first line contains five integers n, a, b, k, f ( 1 \u2264 n \u2264 300, 1 \u2264 b < a \u2264 100, 0 \u2264 k \u2264 300, 1 \u2264 f \u2264 1000) where: n \u2014 the number of Polycarp trips, a \u2014 the cost of a regualar single trip, b \u2014 the cost of a trip after a transshipment, k \u2014 the maximum number of travel cards Polycarp can buy, f \u2014 the cost of a single travel card. The following n lines describe the trips in the chronological order. Each line contains exactly two different words separated by a single space \u2014 the name of the start stop and the name of the finish stop of the trip. All names consist of uppercase and lowercase English letters and have lengths between 1 to 20 letters inclusive. Uppercase and lowercase letters should be considered different.",
    "output": "Print the smallest amount of money Polycarp could have spent today, if he can purchase no more than k travel cards.",
    "note": "In the first example Polycarp can buy travel card for the route \" BerBank University\" and spend 8 burles. Note that his second trip \" University\" \" BerMall\" was made after transshipment, so for this trip Polycarp payed 3 burles. So the minimum total sum equals to 8 + 3 = 11 burles. In the second example it doesn' t make sense to buy travel cards. Note that each of Polycarp trip ( except the first) was made with transshipment. So the minimum total sum equals to 2 + 1 + 1 + 1 = 5 burles.",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Berland Elections",
    "url": "https://codeforces.com/problemset/problem/847/F",
    "history": "The elections to Berland parliament are happening today. Voting is in full swing! Totally there are n candidates, they are numbered from 1 to n. Based on election results k ( 1 \u2264 k \u2264 n) top candidates will take seats in the parliament. After the end of the voting the number of votes for each candidate is calculated. In the resulting table the candidates are ordered by the number of votes. In case of tie ( equal number of votes) they are ordered by the time of the last vote given. The candidate with ealier last vote stands higher in the resulting table. So in the resulting table candidates are sorted by the number of votes ( more votes stand for the higher place) and if two candidates have equal number of votes they are sorted by the time of last vote ( earlier last vote stands for the higher place) . There is no way for a candidate with zero votes to take a seat in the parliament. So it is possible that less than k candidates will take a seat in the parliament. In Berland there are m citizens who can vote. Each of them will vote for some candidate. Each citizen will give a vote to exactly one of n candidates. There is no option \" against everyone\" on the elections. It is not accepted to spoil bulletins or not to go to elections. So each of m citizens will vote for exactly one of n candidates. At the moment a citizens have voted already ( 1 \u2264 a \u2264 m) . This is an open election, so for each citizen it is known the candidate for which the citizen has voted. Formally, the j- th citizen voted for the candidate gj. The citizens who already voted are numbered in chronological order; i. e. the ( j + 1) - th citizen voted after the j- th. The remaining m - a citizens will vote before the end of elections, each of them will vote for one of n candidates. Your task is to determine for each of n candidates one of the three possible outcomes: a candidate will be elected to the parliament regardless of votes of the remaining m - a citizens; a candidate has chance to be elected to the parliament after all n citizens have voted; a candidate has no chances to be elected to the parliament regardless of votes of the remaining m - a citizens.",
    "input": "The first line contains four integers n, k, m and a ( 1 \u2264 k \u2264 n \u2264 100, 1 \u2264 m \u2264 100, 1 \u2264 a \u2264 m) \u2014 the number of candidates, the number of seats in the parliament, the number of Berland citizens and the number of citizens who already have voted. The second line contains a sequence of a integers g1, g2, . . . , ga ( 1 \u2264 gj \u2264 n) , where gj is the candidate for which the j- th citizen has voted. Citizens who already voted are numbered in increasing order of voting times.",
    "output": "Print the sequence consisting of n integers r1, r2, . . . , rn where: ri = 1 means that the i- th candidate is guaranteed to take seat in the parliament regardless of votes of the remaining m - a citizens; ri = 2 means that the i- th candidate has a chance to take a seat in the parliament, i. e. the remaining m - a citizens can vote in such a way that the candidate will take a seat in the parliament; ri = 3 means that the i- th candidate will not take a seat in the parliament regardless of votes of the remaining m - a citizens.",
    "note": " ",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Two TVs",
    "url": "https://codeforces.com/problemset/problem/845/C",
    "history": "Polycarp is a great fan of television. He wrote down all the TV programs he is interested in for today. His list contains n shows, i- th of them starts at moment li and ends at moment ri. Polycarp owns two TVs. He can watch two different shows simultaneously with two TVs but he can only watch one show at any given moment on a single TV. If one show ends at the same moment some other show starts then you can' t watch them on a single TV. Polycarp wants to check out all n shows. Are two TVs enough to do so?",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 2\u00b7105) \u2014 the number of shows. Each of the next n lines contains two integers li and ri ( 0 \u2264 li < ri \u2264 109) \u2014 starting and ending time of i- th show.",
    "output": "If Polycarp is able to check out all the shows using only two TVs then print \" YES\" ( without quotes) . Otherwise, print \" NO\" ( without quotes) .",
    "note": " ",
    "topics": [
      "data structures",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Chess Tourney",
    "url": "https://codeforces.com/problemset/problem/845/A",
    "history": "Berland annual chess tournament is coming! Organizers have gathered 2\u00b7n chess players who should be divided into two teams with n people each. The first team is sponsored by BerOil and the second team is sponsored by BerMobile. Obviously, organizers should guarantee the win for the team of BerOil. Thus, organizers should divide all 2\u00b7n players into two teams with n people each in such a way that the first team always wins. Every chess player has its rating ri. It is known that chess player with the greater rating always wins the player with the lower rating. If their ratings are equal then any of the players can win. After teams assignment there will come a drawing to form n pairs of opponents: in each pair there is a player from the first team and a player from the second team. Every chess player should be in exactly one pair. Every pair plays once. The drawing is totally random. Is it possible to divide all 2\u00b7n players into two teams with n people each so that the player from the first team in every pair wins regardless of the results of the drawing?",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 100) . The second line contains 2\u00b7n integers a1, a2, . . . a2n ( 1 \u2264 ai \u2264 1000) .",
    "output": "If it' s possible to divide all 2\u00b7n players into two teams with n people each so that the player from the first team in every pair wins regardless of the results of the drawing, then print \" YES\" . Otherwise print \" NO\" .",
    "note": " ",
    "topics": [
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Sorting by Subsequences",
    "url": "https://codeforces.com/problemset/problem/843/A",
    "history": "You are given a sequence a1, a2, . . . , an consisting of different integers. It is required to split this sequence into the maximum number of subsequences such that after sorting integers in each of them in increasing order, the total sequence also will be sorted in increasing order. Sorting integers in a subsequence is a process such that the numbers included in a subsequence are ordered in increasing order, and the numbers which are not included in a subsequence don' t change their places. Every element of the sequence must appear in exactly one subsequence.",
    "input": "The first line of input data contains integer n ( 1 \u2264 n \u2264 105) \u2014 the length of the sequence. The second line of input data contains n different integers a1, a2, . . . , an ( - 109 \u2264 ai \u2264 109) \u2014 the elements of the sequence. It is guaranteed that all elements of the sequence are distinct.",
    "output": "In the first line print the maximum number of subsequences k, which the original sequence can be split into while fulfilling the requirements. In the next k lines print the description of subsequences in the following format: the number of elements in subsequence ci ( 0 < ci \u2264 n) , then ci integers l1, l2, . . . , lci ( 1 \u2264 lj \u2264 n) \u2014 indices of these elements in the original sequence. Indices could be printed in any order. Every index from 1 to n must appear in output exactly once. If there are several possible answers, print any of them.",
    "note": "In the first sample output: After sorting the first subsequence we will get sequence 1 2 3 6 5 4. Sorting the second subsequence changes nothing. After sorting the third subsequence we will get sequence 1 2 3 4 5 6. Sorting the last subsequence changes nothing.",
    "topics": [
      "dfs and similar",
      "dsu",
      "implementation",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Leha and Function",
    "url": "https://codeforces.com/problemset/problem/840/A",
    "history": "Leha like all kinds of strange things. Recently he liked the function F( n, k) . Consider all possible k- element subsets of the set [ 1, 2, . . . , n] . For subset find minimal element in it. F( n, k) \u2014 mathematical expectation of the minimal element among all k- element subsets. But only function does not interest him. He wants to do interesting things with it. Mom brought him two arrays A and B, each consists of m integers. For all i, j such that 1 \u2264 i, j \u2264 m the condition Ai \u2265 Bj holds. Help Leha rearrange the numbers in the array A so that the sum is maximally possible, where A' is already rearranged array.",
    "input": "First line of input data contains single integer m ( 1 \u2264 m \u2264 2\u00b7105) \u2014 length of arrays A and B. Next line contains m integers a1, a2, . . . , am ( 1 \u2264 ai \u2264 109) \u2014 array A. Next line contains m integers b1, b2, . . . , bm ( 1 \u2264 bi \u2264 109) \u2014 array B.",
    "output": "Output m integers a' 1, a' 2, . . . , a' m \u2014 array A' which is permutation of the array A.",
    "note": " ",
    "topics": [
      "combinatorics",
      "greedy",
      "math",
      "number theory",
      "sortings"
    ]
  },
  {
    "title": "Caramel Clouds",
    "url": "https://codeforces.com/problemset/problem/833/E",
    "history": "It is well- known that the best decoration for a flower bed in Sweetland are vanilla muffins. Seedlings of this plant need sun to grow up. Slastyona has m seedlings, and the j- th seedling needs at least kj minutes of sunlight to grow up. Most of the time it' s sunny in Sweetland, but sometimes some caramel clouds come, the i- th of which will appear at time moment ( minute) li and disappear at time moment ri. Of course, the clouds make shadows, and the seedlings can' t grow when there is at least one cloud veiling the sun. Slastyona wants to grow up her muffins as fast as possible. She has exactly C candies, which is the main currency in Sweetland. One can dispel any cloud by paying ci candies. However, in order to comply with Sweetland' s Department of Meteorology regulations, one can' t dispel more than two clouds. Slastyona hasn' t decided yet which of the m seedlings will be planted at the princess' garden, so she needs your help. For each seedling determine the earliest moment it can grow up if Slastyona won' t break the law and won' t spend more candies than she has. Note that each of the seedlings is considered independently. The seedlings start to grow at time moment 0.",
    "input": "The first line contains two integers n and C ( 0 \u2264 n \u2264 3\u00b7105, 0 \u2264 C \u2264 109) \u2013 the number of caramel clouds and the number of candies Slastyona has. The next n lines contain three integers each: li, ri, ci ( 0 \u2264 li < ri \u2264 109, 0 \u2264 ci \u2264 109) , describing one caramel cloud. The next line contains single integer m ( 1 \u2264 m \u2264 3\u00b7105) \u2013 the number of seedlings. Each of the seedlings is described with one integer kj ( 1 \u2264 kj \u2264 109) \u2013 the required number of sunny minutes.",
    "output": "For each seedling print one integer \u2013 the minimum minute Slastyona can grow it up.",
    "note": "Consider the first example. For each k it is optimal to dispel clouds 1 and 3. Then the remaining cloud will give shadow on time segment [ 1. . 6] . So, intervals [ 0. . 1] and [ 6. . inf) are sunny. In the second example for k = 1 it is not necessary to dispel anything, and for k = 5 the best strategy is to dispel clouds 2 and 3. This adds an additional sunny segment [ 4. . 8] , which together with [ 0. . 1] allows to grow up the muffin at the eight minute. If the third example the two seedlings are completely different. For the first one it is necessary to dispel cloud 1 and obtain a sunny segment [ 0. . 10] . However, the same strategy gives answer 180 for the second seedling. Instead, we can dispel cloud 2, to make segments [ 0. . 3] and [ 7. . inf) sunny, and this allows up to shorten the time to 104.",
    "topics": [
      "data structures",
      "dp",
      "sortings"
    ]
  },
  {
    "title": "Bamboo Partition",
    "url": "https://codeforces.com/problemset/problem/830/C",
    "history": "Vladimir wants to modernize partitions in his office. To make the office more comfortable he decided to remove a partition and plant several bamboos in a row. He thinks it would be nice if there are n bamboos in a row, and the i- th from the left is ai meters high. Vladimir has just planted n bamboos in a row, each of which has height 0 meters right now, but they grow 1 meter each day. In order to make the partition nice Vladimir can cut each bamboo once at any height ( no greater that the height of the bamboo) , and then the bamboo will stop growing. Vladimir wants to check the bamboos each d days ( i. e. d days after he planted, then after 2d days and so on) , and cut the bamboos that reached the required height. Vladimir wants the total length of bamboo parts he will cut off to be no greater than k meters. What is the maximum value d he can choose so that he can achieve what he wants without cutting off more than k meters of bamboo?",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 100, 1 \u2264 k \u2264 1011) \u2014 the number of bamboos and the maximum total length of cut parts, in meters. The second line contains n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) \u2014 the required heights of bamboos, in meters.",
    "output": "Print a single integer \u2014 the maximum value of d such that Vladimir can reach his goal.",
    "note": "In the first example Vladimir can check bamboos each 3 days. Then he will cut the first and the second bamboos after 3 days, and the third bamboo after 6 days. The total length of cut parts is 2 + 0 + 1 = 3 meters.",
    "topics": [
      "brute force",
      "data structures",
      "implementation",
      "math",
      "number theory",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Cards Sorting",
    "url": "https://codeforces.com/problemset/problem/830/B",
    "history": "Vasily has a deck of cards consisting of n cards. There is an integer on each of the cards, this integer is between 1 and 100 000, inclusive. It is possible that some cards have the same integers on them. Vasily decided to sort the cards. To do this, he repeatedly takes the top card from the deck, and if the number on it equals the minimum number written on the cards in the deck, then he places the card away. Otherwise, he puts it under the deck and takes the next card from the top, and so on. The process ends as soon as there are no cards in the deck. You can assume that Vasily always knows the minimum number written on some card in the remaining deck, but doesn' t know where this card ( or these cards) is. You are to determine the total number of times Vasily takes the top card from the deck.",
    "input": "The first line contains single integer n ( 1 \u2264 n \u2264 100 000) \u2014 the number of cards in the deck. The second line contains a sequence of n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 100 000) , where ai is the number written on the i- th from top card in the deck.",
    "output": "Print the total number of times Vasily takes the top card from the deck.",
    "note": "In the first example Vasily at first looks at the card with number 6 on it, puts it under the deck, then on the card with number 3, puts it under the deck, and then on the card with number 1. He places away the card with 1, because the number written on it is the minimum among the remaining cards. After that the cards from top to bottom are [ 2, 6, 3] . Then Vasily looks at the top card with number 2 and puts it away. After that the cards from top to bottom are [ 6, 3] . Then Vasily looks at card 6, puts it under the deck, then at card 3 and puts it away. Then there is only one card with number 6 on it, and Vasily looks at it and puts it away. Thus, in total Vasily looks at 7 cards.",
    "topics": [
      "data structures",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Office Keys",
    "url": "https://codeforces.com/problemset/problem/830/A",
    "history": "There are n people and k keys on a straight line. Every person wants to get to the office which is located on the line as well. To do that, he needs to reach some point with a key, take the key and then go to the office. Once a key is taken by somebody, it couldn' t be taken by anybody else. You are to determine the minimum time needed for all n people to get to the office with keys. Assume that people move a unit distance per 1 second. If two people reach a key at the same time, only one of them can take the key. A person can pass through a point with a key without taking it.",
    "input": "The first line contains three integers n, k and p ( 1 \u2264 n \u2264 1 000, n \u2264 k \u2264 2 000, 1 \u2264 p \u2264 109) \u2014 the number of people, the number of keys and the office location. The second line contains n distinct integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) \u2014 positions in which people are located initially. The positions are given in arbitrary order. The third line contains k distinct integers b1, b2, . . . , bk ( 1 \u2264 bj \u2264 109) \u2014 positions of the keys. The positions are given in arbitrary order. Note that there can' t be more than one person or more than one key in the same point. A person and a key can be located in the same point.",
    "output": "Print the minimum time ( in seconds) needed for all n to reach the office with keys.",
    "note": "In the first example the person located at point 20 should take the key located at point 40 and go with it to the office located at point 50. He spends 30 seconds. The person located at point 100 can take the key located at point 80 and go to the office with it. He spends 50 seconds. Thus, after 50 seconds everybody is in office with keys.",
    "topics": [
      "binary search",
      "brute force",
      "dp",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "String Reconstruction",
    "url": "https://codeforces.com/problemset/problem/827/A",
    "history": "Ivan had string s consisting of small English letters. However, his friend Julia decided to make fun of him and hid the string s. Ivan preferred making a new string to finding the old one. Ivan knows some information about the string s. Namely, he remembers, that string ti occurs in string s at least ki times or more, he also remembers exactly ki positions where the string ti occurs in string s: these positions are xi, 1, xi, 2, . . . , xi, ki. He remembers n such strings ti. You are to reconstruct lexicographically minimal string s such that it fits all the information Ivan remembers. Strings ti and string s consist of small English letters only.",
    "input": "The first line contains single integer n ( 1 \u2264 n \u2264 105) \u2014 the number of strings Ivan remembers. The next n lines contain information about the strings. The i- th of these lines contains non- empty string ti, then positive integer ki, which equal to the number of times the string ti occurs in string s, and then ki distinct positive integers xi, 1, xi, 2, . . . , xi, ki in increasing order \u2014 positions, in which occurrences of the string ti in the string s start. It is guaranteed that the sum of lengths of strings ti doesn' t exceed 106, 1 \u2264 xi, j \u2264 106, 1 \u2264 ki \u2264 106, and the sum of all ki doesn' t exceed 106. The strings ti can coincide. It is guaranteed that the input data is not self- contradictory, and thus at least one answer always exists.",
    "output": "Print lexicographically minimal string that fits all the information Ivan remembers.",
    "note": " ",
    "topics": [
      "data structures",
      "greedy",
      "sortings",
      "strings"
    ]
  },
  {
    "title": "Hacker, pack your bags!",
    "url": "https://codeforces.com/problemset/problem/822/C",
    "history": "It' s well known that the best way to distract from something is to do one' s favourite thing. Job is such a thing for Leha. So the hacker began to work hard in order to get rid of boredom. It means that Leha began to hack computers all over the world. For such zeal boss gave the hacker a vacation of exactly x days. You know the majority of people prefer to go somewhere for a vacation, so Leha immediately went to the travel agency. There he found out that n vouchers left. i- th voucher is characterized by three integers li, ri, costi \u2014 day of departure from Vic\u030ckopolis, day of arriving back in Vic\u030ckopolis and cost of the voucher correspondingly. The duration of the i- th voucher is a value ri - li + 1. At the same time Leha wants to split his own vocation into two parts. Besides he wants to spend as little money as possible. Formally Leha wants to choose exactly two vouchers i and j ( i = \u0338 j) so that they don' t intersect, sum of their durations is exactly x and their total cost is as minimal as possible. Two vouchers i and j don' t intersect if only at least one of the following conditions is fulfilled: ri < lj or rj < li. Help Leha to choose the necessary vouchers!",
    "input": "The first line contains two integers n and x ( 2 \u2264 n, x \u2264 2\u00b7105) \u2014 the number of vouchers in the travel agency and the duration of Leha' s vacation correspondingly. Each of the next n lines contains three integers li, ri and costi ( 1 \u2264 li \u2264 ri \u2264 2\u00b7105, 1 \u2264 costi \u2264 109) \u2014 description of the voucher.",
    "output": "Print a single integer \u2014 a minimal amount of money that Leha will spend, or print - 1 if it' s impossible to choose two disjoint vouchers with the total duration exactly x.",
    "note": "In the first sample Leha should choose first and third vouchers. Hereupon the total duration will be equal to ( 3 - 1 + 1) + ( 6 - 5 + 1) = 5 and the total cost will be 4 + 1 = 5. In the second sample the duration of each voucher is 3 therefore it' s impossible to choose two vouchers with the total duration equal to 2.",
    "topics": [
      "binary search",
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Imbalanced Array",
    "url": "https://codeforces.com/problemset/problem/817/D",
    "history": "You are given an array a consisting of n elements. The imbalance value of some subsegment of this array is the difference between the maximum and minimum element from this segment. The imbalance value of the array is the sum of imbalance values of all subsegments of this array. For example, the imbalance value of array [ 1, 4, 1] is 9, because there are 6 different subsegments of this array: [ 1] ( from index 1 to index 1) , imbalance value is 0; [ 1, 4] ( from index 1 to index 2) , imbalance value is 3; [ 1, 4, 1] ( from index 1 to index 3) , imbalance value is 3; [ 4] ( from index 2 to index 2) , imbalance value is 0; [ 4, 1] ( from index 2 to index 3) , imbalance value is 3; [ 1] ( from index 3 to index 3) , imbalance value is 0; You have to determine the imbalance value of the array a.",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 106) \u2014 size of the array a. The second line contains n integers a1, a2. . . an ( 1 \u2264 ai \u2264 106) \u2014 elements of the array.",
    "output": "Print one integer \u2014 the imbalance value of a.",
    "note": " ",
    "topics": [
      "data structures",
      "divide and conquer",
      "dsu",
      "sortings"
    ]
  },
  {
    "title": "Makes And The Product",
    "url": "https://codeforces.com/problemset/problem/817/B",
    "history": "After returning from the army Makes received a gift \u2014 an array a consisting of n positive integer numbers. He hadn' t been solving problems for a long time, so he became interested to answer a particular question: how many triples of indices ( i, j, k) ( i < j < k) , such that ai\u00b7aj\u00b7ak is minimum possible, are there in the array? Help him with it!",
    "input": "The first line of input contains a positive integer number n ( 3 \u2264 n \u2264 105) \u2014 the number of elements in array a. The second line contains n positive integer numbers ai ( 1 \u2264 ai \u2264 109) \u2014 the elements of a given array.",
    "output": "Print one number \u2014 the quantity of triples ( i, j, k) such that i, j and k are pairwise distinct and ai\u00b7aj\u00b7ak is minimum possible.",
    "note": "In the first example Makes always chooses three ones out of four, and the number of ways to choose them is 4. In the second example a triple of numbers ( 1, 2, 3) is chosen ( numbers, not indices) . Since there are two ways to choose an element 3, then the answer is 2. In the third example a triple of numbers ( 1, 1, 2) is chosen, and there' s only one way to choose indices.",
    "topics": [
      "combinatorics",
      "implementation",
      "math",
      "sortings"
    ]
  },
  {
    "title": "An abandoned sentiment from past",
    "url": "https://codeforces.com/problemset/problem/814/A",
    "history": "A few years ago, Hitagi encountered a giant crab, who stole the whole of her body weight. Ever since, she tried to avoid contact with others, for fear that this secret might be noticed. To get rid of the oddity and recover her weight, a special integer sequence is needed. Hitagi' s sequence has been broken for a long time, but now Kaiki provides an opportunity. Hitagi' s sequence a has a length of n. Lost elements in it are denoted by zeros. Kaiki provides another sequence b, whose length k equals the number of lost elements in a ( i. e. the number of zeros) . Hitagi is to replace each zero in a with an element from b so that each element in b should be used exactly once. Hitagi knows, however, that, apart from 0, no integer occurs in a and b more than once in total. If the resulting sequence is not an increasing sequence, then it has the power to recover Hitagi from the oddity. You are to determine whether this is possible, or Kaiki' s sequence is just another fake. In other words, you should detect whether it is possible to replace each zero in a with an integer from b so that each integer from b is used exactly once, and the resulting sequence is not increasing.",
    "input": "The first line of input contains two space- separated positive integers n ( 2 \u2264 n \u2264 100) and k ( 1 \u2264 k \u2264 n) \u2014 the lengths of sequence a and b respectively. The second line contains n space- separated integers a1, a2, . . . , an ( 0 \u2264 ai \u2264 200) \u2014 Hitagi' s broken sequence with exactly k zero elements. The third line contains k space- separated integers b1, b2, . . . , bk ( 1 \u2264 bi \u2264 200) \u2014 the elements to fill into Hitagi' s sequence. Input guarantees that apart from 0, no integer occurs in a and b more than once in total.",
    "output": "Output \" Yes\" if it' s possible to replace zeros in a with elements in b and make the resulting sequence not increasing, and \" No\" otherwise.",
    "note": "In the first sample: Sequence a is 11, 0, 0, 14. Two of the elements are lost, and the candidates in b are 5 and 4. There are two possible resulting sequences: 11, 5, 4, 14 and 11, 4, 5, 14, both of which fulfill the requirements. Thus the answer is \" Yes\" . In the second sample, the only possible resulting sequence is 2, 3, 5, 8, 9, 10, which is an increasing sequence and therefore invalid.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Sagheer and Nubian Market",
    "url": "https://codeforces.com/problemset/problem/812/C",
    "history": "On his trip to Luxor and Aswan, Sagheer went to a Nubian market to buy some souvenirs for his friends and relatives. The market has some strange rules. It contains n different items numbered from 1 to n. The i- th item has base cost ai Egyptian pounds. If Sagheer buys k items with indices x1, x2, . . . , xk, then the cost of item xj is axj + xj\u00b7k for 1 \u2264 j \u2264 k. In other words, the cost of an item is equal to its base cost in addition to its index multiplied by the factor k. Sagheer wants to buy as many souvenirs as possible without paying more than S Egyptian pounds. Note that he cannot buy a souvenir more than once. If there are many ways to maximize the number of souvenirs, he will choose the way that will minimize the total cost. Can you help him with this task?",
    "input": "The first line contains two integers n and S ( 1 \u2264 n \u2264 105 and 1 \u2264 S \u2264 109) \u2014 the number of souvenirs in the market and Sagheer' s budget. The second line contains n space- separated integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 105) \u2014 the base costs of the souvenirs.",
    "output": "On a single line, print two integers k, T \u2014 the maximum number of souvenirs Sagheer can buy and the minimum total cost to buy these k souvenirs.",
    "note": "In the first example, he cannot take the three items because they will cost him [ 5, 9, 14] with total cost 28. If he decides to take only two items, then the costs will be [ 4, 7, 11] . So he can afford the first and second items. In the second example, he can buy all items as they will cost him [ 5, 10, 17, 22] . In the third example, there is only one souvenir in the market which will cost him 8 pounds, so he cannot buy it.",
    "topics": [
      "binary search",
      "sortings"
    ]
  },
  {
    "title": "Vladik and Complicated Book",
    "url": "https://codeforces.com/problemset/problem/811/B",
    "history": "Vladik had started reading a complicated book about algorithms containing n pages. To improve understanding of what is written, his friends advised him to read pages in some order given by permutation P = [ p1, p2, . . . , pn] , where pi denotes the number of page that should be read i- th in turn. Sometimes Vladik\u2019s mom sorted some subsegment of permutation P from position l to position r inclusive, because she loves the order. For every of such sorting Vladik knows number x \u2014 what index of page in permutation he should read. He is wondered if the page, which he will read after sorting, has changed. In other words, has px changed? After every sorting Vladik return permutation to initial state, so you can assume that each sorting is independent from each other.",
    "input": "First line contains two space- separated integers n, m ( 1 \u2264 n, m \u2264 104) \u2014 length of permutation and number of times Vladik' s mom sorted some subsegment of the book. Second line contains n space- separated integers p1, p2, . . . , pn ( 1 \u2264 pi \u2264 n) \u2014 permutation P. Note that elements in permutation are distinct. Each of the next m lines contains three space- separated integers li, ri, xi ( 1 \u2264 li \u2264 xi \u2264 ri \u2264 n) \u2014 left and right borders of sorted subsegment in i- th sorting and position that is interesting to Vladik.",
    "output": "For each mom\u2019s sorting on it\u2019s own line print \" Yes\" , if page which is interesting to Vladik hasn' t changed, or \" No\" otherwise.",
    "note": "Explanation of first test case: [ 1, 2, 3, 4, 5] \u2014 permutation after sorting, 3- rd element hasn\u2019t changed, so answer is \" Yes\" . [ 3, 4, 5, 2, 1] \u2014 permutation after sorting, 1- st element has changed, so answer is \" No\" . [ 5, 2, 3, 4, 1] \u2014 permutation after sorting, 3- rd element hasn\u2019t changed, so answer is \" Yes\" . [ 5, 4, 3, 2, 1] \u2014 permutation after sorting, 4- th element hasn\u2019t changed, so answer is \" Yes\" . [ 5, 1, 2, 3, 4] \u2014 permutation after sorting, 3- rd element has changed, so answer is \" No\" .",
    "topics": [
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Summer sell-off",
    "url": "https://codeforces.com/problemset/problem/810/B",
    "history": "Summer holidays! Someone is going on trips, someone is visiting grandparents, but someone is trying to get a part- time job. This summer Noora decided that she wants to earn some money, and took a job in a shop as an assistant. Shop, where Noora is working, has a plan on the following n days. For each day sales manager knows exactly, that in i- th day ki products will be put up for sale and exactly li clients will come to the shop that day. Also, the manager is sure, that everyone, who comes to the shop, buys exactly one product or, if there aren' t any left, leaves the shop without buying anything. Moreover, due to the short shelf- life of the products, manager established the following rule: if some part of the products left on the shelves at the end of the day, that products aren' t kept on the next day and are sent to the dump. For advertising purposes manager offered to start a sell- out in the shop. He asked Noora to choose any f days from n next for sell- outs. On each of f chosen days the number of products were put up for sale would be doubled. Thus, if on i- th day shop planned to put up for sale ki products and Noora has chosen this day for sell- out, shelves of the shop would keep 2\u00b7ki products. Consequently, there is an opportunity to sell two times more products on days of sell- out. Noora' s task is to choose f days to maximize total number of sold products. She asks you to help her with such a difficult problem.",
    "input": "The first line contains two integers n and f ( 1 \u2264 n \u2264 105, 0 \u2264 f \u2264 n) denoting the number of days in shop' s plan and the number of days that Noora has to choose for sell- out. Each line of the following n subsequent lines contains two integers ki, li ( 0 \u2264 ki, li \u2264 109) denoting the number of products on the shelves of the shop on the i- th day and the number of clients that will come to the shop on i- th day.",
    "output": "Print a single integer denoting the maximal number of products that shop can sell.",
    "note": "In the first example we can choose days with numbers 2 and 4 for sell- out. In this case new numbers of products for sale would be equal to [ 2, 6, 2, 2] respectively. So on the first day shop will sell 1 product, on the second \u2014 5, on the third \u2014 2, on the fourth \u2014 2. In total 1 + 5 + 2 + 2 = 10 product units. In the second example it is possible to sell 5 products, if you choose third day for sell- out.",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Do you want a date?",
    "url": "https://codeforces.com/problemset/problem/809/A",
    "history": "Leha decided to move to a quiet town Vic\u030ckopolis, because he was tired by living in Bankopolis. Upon arrival he immediately began to expand his network of hacked computers. During the week Leha managed to get access to n computers throughout the town. Incidentally all the computers, which were hacked by Leha, lie on the same straight line, due to the reason that there is the only one straight street in Vic\u030ckopolis. Let' s denote the coordinate system on this street. Besides let' s number all the hacked computers with integers from 1 to n. So the i- th hacked computer is located at the point xi. Moreover the coordinates of all computers are distinct. Leha is determined to have a little rest after a hard week. Therefore he is going to invite his friend Noora to a restaurant. However the girl agrees to go on a date with the only one condition: Leha have to solve a simple task. Leha should calculate a sum of F( a) for all a, where a is a non- empty subset of the set, that consists of all hacked computers. Formally, let' s denote A the set of all integers from 1 to n. Noora asks the hacker to find value of the expression . Here F( a) is calculated as the maximum among the distances between all pairs of computers from the set a. Formally, . Since the required sum can be quite large Noora asks to find it modulo 109 + 7. Though, Leha is too tired. Consequently he is not able to solve this task. Help the hacker to attend a date.",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 3\u00b7105) denoting the number of hacked computers. The second line contains n integers x1, x2, . . . , xn ( 1 \u2264 xi \u2264 109) denoting the coordinates of hacked computers. It is guaranteed that all xi are distinct.",
    "output": "Print a single integer \u2014 the required sum modulo 109 + 7.",
    "note": "There are three non- empty subsets in the first sample test: , and . The first and the second subset increase the sum by 0 and the third subset increases the sum by 7 - 4 = 3. In total the answer is 0 + 0 + 3 = 3. There are seven non- empty subsets in the second sample test. Among them only the following subsets increase the answer: , , , . In total the sum is ( 4 - 3) + ( 4 - 1) + ( 3 - 1) + ( 4 - 1) = 9.",
    "topics": [
      "implementation",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Tea Party",
    "url": "https://codeforces.com/problemset/problem/808/C",
    "history": "Polycarp invited all his friends to the tea party to celebrate the holiday. He has n cups, one for each of his n friends, with volumes a1, a2, . . . , an. His teapot stores w milliliters of tea ( w \u2264 a1 + a2 + . . . + an) . Polycarp wants to pour tea in cups in such a way that: Every cup will contain tea for at least half of its volume Every cup will contain integer number of milliliters of tea All the tea from the teapot will be poured into cups All friends will be satisfied. Friend with cup i won' t be satisfied, if there exists such cup j that cup i contains less tea than cup j but ai > aj. For each cup output how many milliliters of tea should be poured in it. If it' s impossible to pour all the tea and satisfy all conditions then output - 1.",
    "input": "The first line contains two integer numbers n and w ( 1 \u2264 n \u2264 100, ) . The second line contains n numbers a1, a2, . . . , an ( 1 \u2264 ai \u2264 100) .",
    "output": "Output how many milliliters of tea every cup should contain. If there are multiple answers, print any of them. If it' s impossible to pour all the tea and satisfy all conditions then output - 1.",
    "note": "In the third example you should pour to the first cup at least 5 milliliters, to the second one at least 4, to the third one at least 5. It sums up to 14, which is greater than 10 milliliters available.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Is it rated?",
    "url": "https://codeforces.com/problemset/problem/807/A",
    "history": "Is it rated? Here it is. The Ultimate Question of Competitive Programming, Codeforces, and Everything. And you are here to answer it. Another Codeforces round has been conducted. No two participants have the same number of points. For each participant, from the top to the bottom of the standings, their rating before and after the round is known. It' s known that if at least one participant' s rating has changed, then the round was rated for sure. It' s also known that if the round was rated and a participant with lower rating took a better place in the standings than a participant with higher rating, then at least one round participant' s rating has changed. In this problem, you should not make any other assumptions about the rating system. Determine if the current round is rated, unrated, or it' s impossible to determine whether it is rated of not.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 1000) \u2014 the number of round participants. Each of the next n lines contains two integers ai and bi ( 1 \u2264 ai, bi \u2264 4126) \u2014 the rating of the i- th participant before and after the round, respectively. The participants are listed in order from the top to the bottom of the standings.",
    "output": "If the round is rated for sure, print \" rated\" . If the round is unrated for sure, print \" unrated\" . If it' s impossible to determine whether the round is rated or not, print \" maybe\" .",
    "note": "In the first example, the ratings of the participants in the third and fifth places have changed, therefore, the round was rated. In the second example, no one' s rating has changed, but the participant in the second place has lower rating than the participant in the fourth place. Therefore, if the round was rated, someone' s rating would' ve changed for sure. In the third example, no one' s rating has changed, and the participants took places in non- increasing order of their rating. Therefore, it' s impossible to determine whether the round is rated or not.",
    "topics": [
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Expected diameter of a tree",
    "url": "https://codeforces.com/problemset/problem/804/D",
    "history": "Pasha is a good student and one of MoJaK' s best friends. He always have a problem to think about. Today they had a talk about the following problem. We have a forest ( acyclic undirected graph) with n vertices and m edges. There are q queries we should answer. In each query two vertices v and u are given. Let V be the set of vertices in the connected component of the graph that contains v, and U be the set of vertices in the connected component of the graph that contains u. Let' s add an edge between some vertex and some vertex in and compute the value d of the resulting component. If the resulting component is a tree, the value d is the diameter of the component, and it is equal to - 1 otherwise. What is the expected value of d, if we choose vertices a and b from the sets uniformly at random? Can you help Pasha to solve this problem? The diameter of the component is the maximum distance among some pair of vertices in the component. The distance between two vertices is the minimum number of edges on some path between the two vertices. Note that queries don' t add edges to the initial forest.",
    "input": "The first line contains three integers n, m and q( 1 \u2264 n, m, q \u2264 105) \u2014 the number of vertices, the number of edges in the graph and the number of queries. Each of the next m lines contains two integers ui and vi ( 1 \u2264 ui, vi \u2264 n) , that means there is an edge between vertices ui and vi. It is guaranteed that the given graph is a forest. Each of the next q lines contains two integers ui and vi ( 1 \u2264 ui, vi \u2264 n) \u2014 the vertices given in the i- th query.",
    "output": "For each query print the expected value of d as described in the problem statement. Your answer will be considered correct if its absolute or relative error does not exceed 10 - 6. Let' s assume that your answer is a, and the jury' s answer is b. The checker program will consider your answer correct, if .",
    "note": "In the first example the vertices 1 and 3 are in the same component, so the answer for the first query is - 1. For the second query there are two options to add the edge: one option is to add the edge 1 - 2, the other one is 2 - 3. In both ways the resulting diameter is 2, so the answer is 2. In the second example the answer for the first query is obviously - 1. The answer for the second query is the average of three cases: for added edges 1 - 2 or 1 - 3 the diameter is 3, and for added edge 1 - 4 the diameter is 2. Thus, the answer is .",
    "topics": [
      "binary search",
      "brute force",
      "dfs and similar",
      "dp",
      "sortings",
      "trees"
    ]
  },
  {
    "title": "April Fools' Problem (easy)",
    "url": "https://codeforces.com/problemset/problem/802/M",
    "history": "The marmots have prepared a very easy problem for this year' s HC2 \u2013 this one. It involves numbers n, k and a sequence of n positive integers a1, a2, . . . , an. They also came up with a beautiful and riveting story for the problem statement. It explains what the input means, what the program should output, and it also reads like a good criminal. However I, Heidi, will have none of that. As my joke for today, I am removing the story from the statement and replacing it with these two unhelpful paragraphs. Now solve the problem, fools!",
    "input": "The first line of the input contains two space- separated integers n and k ( 1 \u2264 k \u2264 n \u2264 2200) . The second line contains n space- separated integers a1, . . . , an ( 1 \u2264 ai \u2264 104) .",
    "output": "Output one number.",
    "note": " ",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Mike and code of a permutation",
    "url": "https://codeforces.com/problemset/problem/798/E",
    "history": "Mike has discovered a new way to encode permutations. If he has a permutation P = [ p1, p2, . . . , pn] , he will encode it in the following way: Denote by A = [ a1, a2, . . . , an] a sequence of length n which will represent the code of the permutation. For each i from 1 to n sequentially, he will choose the smallest unmarked j ( 1 \u2264 j \u2264 n) such that pi < pj and will assign to ai the number j ( in other words he performs ai = j) and will mark j. If there is no such j, he' ll assign to ai the number - 1 ( he performs ai = - 1) . Mike forgot his original permutation but he remembers its code. Your task is simple: find any permutation such that its code is the same as the code of Mike' s original permutation. You may assume that there will always be at least one valid permutation.",
    "input": "The first line contains single integer n ( 1 \u2264 n \u2264 500 000) \u2014 length of permutation. The second line contains n space- separated integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 n or ai = - 1) \u2014 the code of Mike' s permutation. You may assume that all positive values from A are different.",
    "output": "In first and only line print n numbers p1, p2, . . . , pn ( 1 \u2264 pi \u2264 n) \u2014 a permutation P which has the same code as the given one. Note that numbers in permutation are distinct.",
    "note": "For the permutation from the first example: i = 1, the smallest j is 2 because p2 = 6 > p1 = 2. i = 2, there is no j because p2 = 6 is the greatest element in the permutation. i = 3, the smallest j is 1 because p1 = 2 > p3 = 1. i = 4, the smallest j is 5 ( 2 was already marked) because p5 = 5 > p4 = 4. i = 5, there is no j because 2 is already marked. i = 6, the smallest j is 4 because p4 = 4 > p6 = 3.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "graphs",
      "sortings"
    ]
  },
  {
    "title": "Mike and distribution",
    "url": "https://codeforces.com/problemset/problem/798/D",
    "history": "Mike has always been thinking about the harshness of social inequality. He' s so obsessed with it that sometimes it even affects him while solving problems. At the moment, Mike has two sequences of positive integers A = [ a1, a2, . . . , an] and B = [ b1, b2, . . . , bn] of length n each which he uses to ask people some quite peculiar questions. To test you on how good are you at spotting inequality in life, he wants you to find an \" unfair\" subset of the original sequence. To be more precise, he wants you to select k numbers P = [ p1, p2, . . . , pk] such that 1 \u2264 pi \u2264 n for 1 \u2264 i \u2264 k and elements in P are distinct. Sequence P will represent indices of elements that you' ll select from both sequences. He calls such a subset P \" unfair\" if and only if the following conditions are satisfied: 2\u00b7( ap1 + . . . + apk) is greater than the sum of all elements from sequence A, and 2\u00b7( bp1 + . . . + bpk) is greater than the sum of all elements from the sequence B. Also, k should be smaller or equal to because it will be to easy to find sequence P if he allowed you to select too many elements! Mike guarantees you that a solution will always exist given the conditions described above, so please help him satisfy his curiosity!",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 105) \u2014 the number of elements in the sequences. On the second line there are n space- separated integers a1, . . . , an ( 1 \u2264 ai \u2264 109) \u2014 elements of sequence A. On the third line there are also n space- separated integers b1, . . . , bn ( 1 \u2264 bi \u2264 109) \u2014 elements of sequence B.",
    "output": "On the first line output an integer k which represents the size of the found subset. k should be less or equal to . On the next line print k integers p1, p2, . . . , pk ( 1 \u2264 pi \u2264 n) \u2014 the elements of sequence P. You can print the numbers in any order you want. Elements in sequence P should be distinct.",
    "note": " ",
    "topics": [
      "constructive algorithms",
      "sortings"
    ]
  },
  {
    "title": "Mice and Holes",
    "url": "https://codeforces.com/problemset/problem/797/F",
    "history": "One day Masha came home and noticed n mice in the corridor of her flat. Of course, she shouted loudly, so scared mice started to run to the holes in the corridor. The corridor can be represeted as a numeric axis with n mice and m holes on it. ith mouse is at the coordinate xi, and jth hole \u2014 at coordinate pj. jth hole has enough room for cj mice, so not more than cj mice can enter this hole. What is the minimum sum of distances that mice have to go through so that they all can hide in the holes? If ith mouse goes to the hole j, then its distance is | xi - pj| . Print the minimum sum of distances.",
    "input": "The first line contains two integer numbers n, m ( 1 \u2264 n, m \u2264 5000) \u2014 the number of mice and the number of holes, respectively. The second line contains n integers x1, x2, . . . , xn ( - 109 \u2264 xi \u2264 109) , where xi is the coordinate of ith mouse. Next m lines contain pairs of integer numbers pj, cj ( - 109 \u2264 pj \u2264 109, 1 \u2264 cj \u2264 5000) , where pj is the coordinate of jth hole, and cj is the maximum number of mice that can hide in the hole j.",
    "output": "Print one integer number \u2014 the minimum sum of distances. If there is no solution, print - 1 instead.",
    "note": " ",
    "topics": [
      "data structures",
      "dp",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Naming Company",
    "url": "https://codeforces.com/problemset/problem/794/C",
    "history": "Oleg the client and Igor the analyst are good friends. However, sometimes they argue over little things. Recently, they started a new company, but they are having trouble finding a name for the company. To settle this problem, they' ve decided to play a game. The company name will consist of n letters. Oleg and Igor each have a set of n letters ( which might contain multiple copies of the same letter, the sets can be different) . Initially, the company name is denoted by n question marks. Oleg and Igor takes turns to play the game, Oleg moves first. In each turn, a player can choose one of the letters c in his set and replace any of the question marks with c. Then, a copy of the letter c is removed from his set. The game ends when all the question marks has been replaced by some letter. For example, suppose Oleg has the set of letters i, o, i and Igor has the set of letters i, m, o. One possible game is as follows : Initially, the company name is ? ? ? . Oleg replaces the second question mark with ' i' . The company name becomes ? i? . The set of letters Oleg have now is i, o. Igor replaces the third question mark with ' o' . The company name becomes ? io. The set of letters Igor have now is i, m. Finally, Oleg replaces the first question mark with ' o' . The company name becomes oio. The set of letters Oleg have now is i. In the end, the company name is oio. Oleg wants the company name to be as lexicographically small as possible while Igor wants the company name to be as lexicographically large as possible. What will be the company name if Oleg and Igor always play optimally? A string s = s1s2. . . sm is called lexicographically smaller than a string t = t1t2. . . tm ( where s = \u0338 t) if si < ti where i is the smallest index such that si = \u0338 ti. ( so sj = tj for all j < i)",
    "input": "The first line of input contains a string s of length n ( 1 \u2264 n \u2264 3\u00b7105) . All characters of the string are lowercase English letters. This string denotes the set of letters Oleg has initially. The second line of input contains a string t of length n. All characters of the string are lowercase English letters. This string denotes the set of letters Igor has initially.",
    "output": "The output should contain a string of n lowercase English letters, denoting the company name if Oleg and Igor plays optimally.",
    "note": "One way to play optimally in the first sample is as follows : Initially, the company name is ? ? ? ? ? ? ? . Oleg replaces the first question mark with ' f' . The company name becomes f? ? ? ? ? ? . Igor replaces the second question mark with ' z' . The company name becomes fz? ? ? ? ? . Oleg replaces the third question mark with ' f' . The company name becomes fzf? ? ? ? . Igor replaces the fourth question mark with ' s' . The company name becomes fzfs? ? ? . Oleg replaces the fifth question mark with ' i' . The company name becomes fzfsi? ? . Igor replaces the sixth question mark with ' r' . The company name becomes fzfsir? . Oleg replaces the seventh question mark with ' k' . The company name becomes fzfsirk. For the second sample, no matter how they play, the company name will always be xxxxxx.",
    "topics": [
      "games",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Mice problem",
    "url": "https://codeforces.com/problemset/problem/793/C",
    "history": "Igor the analyst fell asleep on the work and had a strange dream. In the dream his desk was crowded with computer mice, so he bought a mousetrap to catch them. The desk can be considered as an infinite plane, then the mousetrap is a rectangle which sides are parallel to the axes, and which opposite sides are located in points ( x1, y1) and ( x2, y2) . Igor wants to catch all mice. Igor has analysed their behavior and discovered that each mouse is moving along a straight line with constant speed, the speed of the i- th mouse is equal to ( vix, viy) , that means that the x coordinate of the mouse increases by vix units per second, while the y coordinates increases by viy units. The mousetrap is open initially so that the mice are able to move freely on the desk. Igor can close the mousetrap at any moment catching all the mice that are strictly inside the mousetrap. Igor works a lot, so he is busy in the dream as well, and he asks you to write a program that by given mousetrap' s coordinates, the initial coordinates of the mice and their speeds determines the earliest time moment in which he is able to catch all the mice. Please note that Igor can close the mousetrap only once.",
    "input": "The first line contains single integer n ( 1 \u2264 n \u2264 100 000) \u2014 the number of computer mice on the desk. The second line contains four integers x1, y1, x2 and y2 ( 0 \u2264 x1 \u2264 x2 \u2264 100 000) , ( 0 \u2264 y1 \u2264 y2 \u2264 100 000) \u2014 the coordinates of the opposite corners of the mousetrap. The next n lines contain the information about mice. The i- th of these lines contains four integers rix, riy, vix and viy, ( 0 \u2264 rix, riy \u2264 100 000, - 100 000 \u2264 vix, viy \u2264 100 000) , where ( rix, riy) is the initial position of the mouse, and ( vix, viy) is its speed.",
    "output": "In the only line print minimum possible non- negative number t such that if Igor closes the mousetrap at t seconds from the beginning, then all the mice are strictly inside the mousetrap. If there is no such t, print - 1. Your answer is considered correct if its absolute or relative error doesn' t exceed 10 - 6. Formally, let your answer be a, and the jury' s answer be b. Your answer is considered correct if .",
    "note": "Here is a picture of the first samplePoints A, B, C, D - start mice positions, segments are their paths. Then, at first time when all mice will be in rectangle it will be looks like this: Here is a picture of the second samplePoints A, D, B will never enter rectangle.",
    "topics": [
      "geometry",
      "implementation",
      "math",
      "sortings"
    ]
  },
  {
    "title": "New Bus Route",
    "url": "https://codeforces.com/problemset/problem/792/A",
    "history": "There are n cities situated along the main road of Berland. Cities are represented by their coordinates \u2014 integer numbers a1, a2, . . . , an. All coordinates are pairwise distinct. It is possible to get from one city to another only by bus. But all buses and roads are very old, so the Minister of Transport decided to build a new bus route. The Minister doesn' t want to spend large amounts of money \u2014 he wants to choose two cities in such a way that the distance between them is minimal possible. The distance between two cities is equal to the absolute value of the difference between their coordinates. It is possible that there are multiple pairs of cities with minimal possible distance, so the Minister wants to know the quantity of such pairs. Your task is to write a program that will calculate the minimal possible distance between two pairs of cities and the quantity of pairs which have this distance.",
    "input": "The first line contains one integer number n ( 2 \u2264 n \u2264 2\u00b7105) . The second line contains n integer numbers a1, a2, . . . , an ( - 109 \u2264 ai \u2264 109) . All numbers ai are pairwise distinct.",
    "output": "Print two integer numbers \u2014 the minimal distance and the quantity of pairs with this distance.",
    "note": "In the first example the distance between the first city and the fourth city is | 4 - 6| = 2, and it is the only pair with this distance.",
    "topics": [
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Anton and Classes",
    "url": "https://codeforces.com/problemset/problem/785/B",
    "history": "Anton likes to play chess. Also he likes to do programming. No wonder that he decided to attend chess classes and programming classes. Anton has n variants when he will attend chess classes, i- th variant is given by a period of time ( l1, i, r1, i) . Also he has m variants when he will attend programming classes, i- th variant is given by a period of time ( l2, i, r2, i) . Anton needs to choose exactly one of n possible periods of time when he will attend chess classes and exactly one of m possible periods of time when he will attend programming classes. He wants to have a rest between classes, so from all the possible pairs of the periods he wants to choose the one where the distance between the periods is maximal. The distance between periods ( l1, r1) and ( l2, r2) is the minimal possible distance between a point in the first period and a point in the second period, that is the minimal possible | i - j| , where l1 \u2264 i \u2264 r1 and l2 \u2264 j \u2264 r2. In particular, when the periods intersect, the distance between them is 0. Anton wants to know how much time his rest between the classes will last in the best case. Help Anton and find this number!",
    "input": "The first line of the input contains a single integer n ( 1 \u2264 n \u2264 200 000) \u2014 the number of time periods when Anton can attend chess classes. Each of the following n lines of the input contains two integers l1, i and r1, i ( 1 \u2264 l1, i \u2264 r1, i \u2264 109) \u2014 the i- th variant of a period of time when Anton can attend chess classes. The following line of the input contains a single integer m ( 1 \u2264 m \u2264 200 000) \u2014 the number of time periods when Anton can attend programming classes. Each of the following m lines of the input contains two integers l2, i and r2, i ( 1 \u2264 l2, i \u2264 r2, i \u2264 109) \u2014 the i- th variant of a period of time when Anton can attend programming classes.",
    "output": "Output one integer \u2014 the maximal possible distance between time periods.",
    "note": "In the first sample Anton can attend chess classes in the period ( 2, 3) and attend programming classes in the period ( 6, 8) . It' s not hard to see that in this case the distance between the periods will be equal to 3. In the second sample if he chooses any pair of periods, they will intersect. So the answer is 0.",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Dishonest Sellers",
    "url": "https://codeforces.com/problemset/problem/779/C",
    "history": "Igor found out discounts in a shop and decided to buy n items. Discounts at the store will last for a week and Igor knows about each item that its price now is ai, and after a week of discounts its price will be bi. Not all of sellers are honest, so now some products could be more expensive than after a week of discounts. Igor decided that buy at least k of items now, but wait with the rest of the week in order to save money as much as possible. Your task is to determine the minimum money that Igor can spend to buy all n items.",
    "input": "In the first line there are two positive integer numbers n and k ( 1 \u2264 n \u2264 2\u00b7105, 0 \u2264 k \u2264 n) \u2014 total number of items to buy and minimal number of items Igor wants to by right now. The second line contains sequence of integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 104) \u2014 prices of items during discounts ( i. e. right now) . The third line contains sequence of integers b1, b2, . . . , bn ( 1 \u2264 bi \u2264 104) \u2014 prices of items after discounts ( i. e. after a week) .",
    "output": "Print the minimal amount of money Igor will spend to buy all n items. Remember, he should buy at least k items right now.",
    "note": "In the first example Igor should buy item 3 paying 6. But items 1 and 2 he should buy after a week. He will pay 3 and 1 for them. So in total he will pay 6 + 3 + 1 = 10. In the second example Igor should buy right now items 1, 2, 4 and 5, paying for them 3, 4, 10 and 3, respectively. Item 3 he should buy after a week of discounts, he will pay 5 for it. In total he will spend 3 + 4 + 10 + 3 + 5 = 25.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Selling Numbers",
    "url": "https://codeforces.com/problemset/problem/778/E",
    "history": "Boris really likes numbers and even owns a small shop selling interesting numbers. He has n decimal numbers Bi. Cost of the number in his shop is equal to the sum of costs of its digits. You are given the values cd, where cd is the cost of the digit d. Of course, Boris is interested in that numbers he owns have the maximum cost possible. Recently Boris got hold of the magical artifact A, which can allow him to increase the cost of his collection. Artifact is a string, consisting of digits and ' ? ' symbols. To use the artifact, Boris must replace all ' ? ' with digits to get a decimal number without leading zeros ( it is also not allowed to get number 0) . After that, the resulting number is added to all numbers Bi in Boris' collection. He uses the artifact exactly once. What is the maximum cost of the collection Boris can achieve after using the artifact?",
    "input": "First line contains artifact A, consisting of digits ' 0' \u2013' 9' and ' ? ' symbols ( 1 \u2264 | A| \u2264 1000) . Next line contains n \u2014 the amount of numbers in Boris' collection ( 1 \u2264 n \u2264 1000) . Next n lines contain integers Bi ( 1 \u2264 Bi < 101000) . A doesn' t start with ' 0' . Last line contains ten integers \u2014 costs of digits c0, c1, . . . , c9 ( 0 \u2264 ci \u2264 1000) .",
    "output": "Output one integer \u2014 the maximum possible cost of the collection after using the artifact.",
    "note": "In the second sample input, the optimal way is to compose the number 453. After adding this number, Boris will have numbers 2656, 5682, 729 and 6696. The total cost of all digits in them is equal to 18 + 15 + 11 + 18 = 62.",
    "topics": [
      "dp",
      "sortings"
    ]
  },
  {
    "title": "Hanoi Factory",
    "url": "https://codeforces.com/problemset/problem/777/E",
    "history": "Of course you have heard the famous task about Hanoi Towers, but did you know that there is a special factory producing the rings for this wonderful game? Once upon a time, the ruler of the ancient Egypt ordered the workers of Hanoi Factory to create as high tower as possible. They were not ready to serve such a strange order so they had to create this new tower using already produced rings. There are n rings in factory' s stock. The i- th ring has inner radius ai, outer radius bi and height hi. The goal is to select some subset of rings and arrange them such that the following conditions are satisfied: Outer radiuses form a non- increasing sequence, i. e. one can put the j- th ring on the i- th ring only if bj \u2264 bi. Rings should not fall one into the the other. That means one can place ring j on the ring i only if bj > ai. The total height of all rings used should be maximum possible.",
    "input": "The first line of the input contains a single integer n ( 1 \u2264 n \u2264 100 000) \u2014 the number of rings in factory' s stock. The i- th of the next n lines contains three integers ai, bi and hi ( 1 \u2264 ai, bi, hi \u2264 109, bi > ai) \u2014 inner radius, outer radius and the height of the i- th ring respectively.",
    "output": "Print one integer \u2014 the maximum height of the tower that can be obtained.",
    "note": "In the first sample, the optimal solution is to take all the rings and put them on each other in order 3, 2, 1. In the second sample, one can put the ring 3 on the ring 4 and get the tower of height 3, or put the ring 1 on the ring 2 and get the tower of height 4.",
    "topics": [
      "brute force",
      "data structures",
      "dp",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Game of Credit Cards",
    "url": "https://codeforces.com/problemset/problem/777/B",
    "history": "After the fourth season Sherlock and Moriary have realized the whole foolishness of the battle between them and decided to continue their competitions in peaceful game of Credit Cards. Rules of this game are simple: each player bring his favourite n- digit credit card. Then both players name the digits written on their cards one by one. If two digits are not equal, then the player, whose digit is smaller gets a flick ( knock in the forehead usually made with a forefinger) from the other player. For example, if n = 3, Sherlock' s card is 123 and Moriarty' s card has number 321, first Sherlock names 1 and Moriarty names 3 so Sherlock gets a flick. Then they both digit 2 so no one gets a flick. Finally, Sherlock names 3, while Moriarty names 1 and gets a flick. Of course, Sherlock will play honestly naming digits one by one in the order they are given, while Moriary, as a true villain, plans to cheat. He is going to name his digits in some other order ( however, he is not going to change the overall number of occurences of each digit) . For example, in case above Moriarty could name 1, 2, 3 and get no flicks at all, or he can name 2, 3 and 1 to give Sherlock two flicks. Your goal is to find out the minimum possible number of flicks Moriarty will get ( no one likes flicks) and the maximum possible number of flicks Sherlock can get from Moriarty. Note, that these two goals are different and the optimal result may be obtained by using different strategies.",
    "input": "The first line of the input contains a single integer n ( 1 \u2264 n \u2264 1000) \u2014 the number of digits in the cards Sherlock and Moriarty are going to use. The second line contains n digits \u2014 Sherlock' s credit card number. The third line contains n digits \u2014 Moriarty' s credit card number.",
    "output": "First print the minimum possible number of flicks Moriarty will get. Then print the maximum possible number of flicks that Sherlock can get from Moriarty.",
    "note": "First sample is elaborated in the problem statement. In the second sample, there is no way Moriarty can avoid getting two flicks.",
    "topics": [
      "data structures",
      "dp",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Lie or Truth",
    "url": "https://codeforces.com/problemset/problem/774/D",
    "history": "Vasya has a sequence of cubes and exactly one integer is written on each cube. Vasya exhibited all his cubes in a row. So the sequence of numbers written on the cubes in the order from the left to the right equals to a1, a2, . . . , an. While Vasya was walking, his little brother Stepan played with Vasya' s cubes and changed their order, so now the sequence of numbers written on the cubes became equal to b1, b2, . . . , bn. Stepan said that he swapped only cubes which where on the positions between l and r, inclusive, and did not remove or add any other cubes ( i. e. he said that he reordered cubes between positions l and r, inclusive, in some way) . Your task is to determine if it is possible that Stepan said the truth, or it is guaranteed that Stepan deceived his brother.",
    "input": "The first line contains three integers n, l, r ( 1 \u2264 n \u2264 105, 1 \u2264 l \u2264 r \u2264 n) \u2014 the number of Vasya' s cubes and the positions told by Stepan. The second line contains the sequence a1, a2, . . . , an ( 1 \u2264 ai \u2264 n) \u2014 the sequence of integers written on cubes in the Vasya' s order. The third line contains the sequence b1, b2, . . . , bn ( 1 \u2264 bi \u2264 n) \u2014 the sequence of integers written on cubes after Stepan rearranged their order. It is guaranteed that Stepan did not remove or add other cubes, he only rearranged Vasya' s cubes.",
    "output": "Print \" LIE\" ( without quotes) if it is guaranteed that Stepan deceived his brother. In the other case, print \" TRUTH\" ( without quotes) .",
    "note": "In the first example there is a situation when Stepan said the truth. Initially the sequence of integers on the cubes was equal to [ 3, 4, 2, 3, 1] . Stepan could at first swap cubes on positions 2 and 3 ( after that the sequence of integers on cubes became equal to [ 3, 2, 4, 3, 1] ) , and then swap cubes in positions 3 and 4 ( after that the sequence of integers on cubes became equal to [ 3, 2, 3, 4, 1] ) . In the second example it is not possible that Stepan said truth because he said that he swapped cubes only between positions 1 and 2, but we can see that it is guaranteed that he changed the position of the cube which was on the position 3 at first. So it is guaranteed that Stepan deceived his brother. In the third example for any values l and r there is a situation when Stepan said the truth.",
    "topics": [
      "*special",
      "constructive algorithms",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Blog Post Rating",
    "url": "https://codeforces.com/problemset/problem/773/E",
    "history": "It' s well- known that blog posts are an important part of Codeforces platform. Every blog post has a global characteristic changing over time \u2014 its community rating. A newly created blog post' s community rating is 0. Codeforces users may visit the blog post page and rate it, changing its community rating by + 1 or - 1. Consider the following model of Codeforces users' behavior. The i- th user has his own estimated blog post rating denoted by an integer ai. When a user visits a blog post page, he compares his estimated blog post rating to its community rating. If his estimated rating is higher, he rates the blog post with + 1 ( thus, the blog post' s community rating increases by 1) . If his estimated rating is lower, he rates the blog post with - 1 ( decreasing its community rating by 1) . If the estimated rating and the community rating are equal, user doesn' t rate the blog post at all ( in this case we' ll say that user rates the blog post for 0) . In any case, after this procedure user closes the blog post page and never opens it again. Consider a newly created blog post with the initial community rating of 0. For each of n Codeforces users, numbered from 1 to n, his estimated blog post rating ai is known. For each k from 1 to n, inclusive, the following question is asked. Let users with indices from 1 to k, in some order, visit the blog post page, rate the blog post and close the page. Each user opens the blog post only after the previous user closes it. What could be the maximum possible community rating of the blog post after these k visits?",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 5\u00b7105) \u2014 the number of Codeforces users. The second line contains n integers a1, a2, . . . , an ( - 5\u00b7105 \u2264 ai \u2264 5\u00b7105) \u2014 estimated blog post ratings for users in order from 1 to n.",
    "output": "For each k from 1 to n, output a single integer equal to the maximum possible community rating of the blog post after users with indices from 1 to k, in some order, visit the blog post page, rate the blog post, and close the page.",
    "note": " ",
    "topics": [
      "data structures",
      "sortings"
    ]
  },
  {
    "title": "Year of University Entrance",
    "url": "https://codeforces.com/problemset/problem/769/A",
    "history": "There is the faculty of Computer Science in Berland. In the social net \" TheContact! \" for each course of this faculty there is the special group whose name equals the year of university entrance of corresponding course of students at the university. Each of students joins the group of his course and joins all groups for which the year of student' s university entrance differs by no more than x from the year of university entrance of this student, where x \u2014 some non- negative integer. A value x is not given, but it can be uniquely determined from the available data. Note that students don' t join other groups. You are given the list of groups which the student Igor joined. According to this information you need to determine the year of Igor' s university entrance.",
    "input": "The first line contains the positive odd integer n ( 1 \u2264 n \u2264 5) \u2014 the number of groups which Igor joined. The next line contains n distinct integers a1, a2, . . . , an ( 2010 \u2264 ai \u2264 2100) \u2014 years of student' s university entrance for each group in which Igor is the member. It is guaranteed that the input data is correct and the answer always exists. Groups are given randomly.",
    "output": "Print the year of Igor' s university entrance.",
    "note": "In the first test the value x = 1. Igor entered the university in 2015. So he joined groups members of which are students who entered the university in 2014, 2015 and 2016. In the second test the value x = 0. Igor entered only the group which corresponds to the year of his university entrance.",
    "topics": [
      "*special",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Jon Snow and his Favourite Number",
    "url": "https://codeforces.com/problemset/problem/768/C",
    "history": "Jon Snow now has to fight with White Walkers. He has n rangers, each of which has his own strength. Also Jon Snow has his favourite number x. Each ranger can fight with a white walker only if the strength of the white walker equals his strength. He however thinks that his rangers are weak and need to improve. Jon now thinks that if he takes the bitwise XOR of strengths of some of rangers with his favourite number x, he might get soldiers of high strength. So, he decided to do the following operation k times: Arrange all the rangers in a straight line in the order of increasing strengths. Take the bitwise XOR ( is written as ) of the strength of each alternate ranger with x and update it' s strength. Suppose, Jon has 5 rangers with strengths [ 9, 7, 11, 15, 5] and he performs the operation 1 time with x = 2. He first arranges them in the order of their strengths, [ 5, 7, 9, 11, 15] . Then he does the following: The strength of first ranger is updated to , i. e. 7. The strength of second ranger remains the same, i. e. 7. The strength of third ranger is updated to , i. e. 11. The strength of fourth ranger remains the same, i. e. 11. The strength of fifth ranger is updated to , i. e. 13. The new strengths of the 5 rangers are [ 7, 7, 11, 11, 13] Now, Jon wants to know the maximum and minimum strength of the rangers after performing the above operations k times. He wants your help for this task. Can you help him?",
    "input": "First line consists of three integers n, k, x ( 1 \u2264 n \u2264 105, 0 \u2264 k \u2264 105, 0 \u2264 x \u2264 103) \u2014 number of rangers Jon has, the number of times Jon will carry out the operation and Jon' s favourite number respectively. Second line consists of n integers representing the strengths of the rangers a1, a2, . . . , an ( 0 \u2264 ai \u2264 103) .",
    "output": "Output two integers, the maximum and the minimum strength of the rangers after performing the operation k times.",
    "note": " ",
    "topics": [
      "brute force",
      "dp",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Oath of the Night's Watch",
    "url": "https://codeforces.com/problemset/problem/768/A",
    "history": "\" Night gathers, and now my watch begins. It shall not end until my death. I shall take no wife, hold no lands, father no children. I shall wear no crowns and win no glory. I shall live and die at my post. I am the sword in the darkness. I am the watcher on the walls. I am the shield that guards the realms of men. I pledge my life and honor to the Night' s Watch, for this night and all the nights to come. \" \u2014 The Night' s Watch oath. With that begins the watch of Jon Snow. He is assigned the task to support the stewards. This time he has n stewards with him whom he has to provide support. Each steward has his own strength. Jon Snow likes to support a steward only if there exists at least one steward who has strength strictly less than him and at least one steward who has strength strictly greater than him. Can you find how many stewards will Jon support?",
    "input": "First line consists of a single integer n ( 1 \u2264 n \u2264 105) \u2014 the number of stewards with Jon Snow. Second line consists of n space separated integers a1, a2, . . . , an ( 0 \u2264 ai \u2264 109) representing the values assigned to the stewards.",
    "output": "Output a single integer representing the number of stewards which Jon will feed.",
    "note": "In the first sample, Jon Snow cannot support steward with strength 1 because there is no steward with strength less than 1 and he cannot support steward with strength 5 because there is no steward with strength greater than 5. In the second sample, Jon Snow can support steward with strength 2 because there are stewards with strength less than 2 and greater than 2.",
    "topics": [
      "constructive algorithms",
      "sortings"
    ]
  },
  {
    "title": "Cartons of milk",
    "url": "https://codeforces.com/problemset/problem/767/D",
    "history": "Olya likes milk very much. She drinks k cartons of milk each day if she has at least k and drinks all of them if she doesn' t. But there' s an issue \u2014 expiration dates. Each carton has a date after which you can' t drink it ( you still can drink it exactly at the date written on the carton) . Due to this, if Olya' s fridge contains a carton past its expiry date, she throws it away. Olya hates throwing out cartons, so when she drinks a carton, she chooses the one which expires the fastest. It' s easy to understand that this strategy minimizes the amount of cartons thrown out and lets her avoid it if it' s even possible. Milk. Best before: 20. 02. 2017. The main issue Olya has is the one of buying new cartons. Currently, there are n cartons of milk in Olya' s fridge, for each one an expiration date is known ( how soon does it expire, measured in days) . In the shop that Olya visited there are m cartons, and the expiration date is known for each of those cartons as well. Find the maximum number of cartons Olya can buy so that she wouldn' t have to throw away any cartons. Assume that Olya drank no cartons today.",
    "input": "In the first line there are three integers n, m, k ( 1 \u2264 n, m \u2264 106, 1 \u2264 k \u2264 n + m) \u2014 the amount of cartons in Olya' s fridge, the amount of cartons in the shop and the number of cartons Olya drinks each day. In the second line there are n integers f1, f2, . . . , fn ( 0 \u2264 fi \u2264 107) \u2014 expiration dates of the cartons in Olya' s fridge. The expiration date is expressed by the number of days the drinking of this carton can be delayed. For example, a 0 expiration date means it must be drunk today, 1 \u2014 no later than tomorrow, etc. In the third line there are m integers s1, s2, . . . , sm ( 0 \u2264 si \u2264 107) \u2014 expiration dates of the cartons in the shop in a similar format.",
    "output": "If there' s no way for Olya to drink the cartons she already has in her fridge, print - 1. Otherwise, in the first line print the maximum number x of cartons which Olya can buy so that she wouldn' t have to throw a carton away. The next line should contain exactly x integers \u2014 the numbers of the cartons that should be bought ( cartons are numbered in an order in which they are written in the input, starting with 1) . Numbers should not repeat, but can be in arbitrary order. If there are multiple correct answers, print any of them.",
    "note": "In the first example k = 2 and Olya has three cartons with expiry dates 0, 1 and 1 ( they expire today, tomorrow and tomorrow) , and the shop has 3 cartons with expiry date 0 and 3 cartons with expiry date 2. Olya can buy three cartons, for example, one with the expiry date 0 and two with expiry date 2. In the second example all three cartons Olya owns expire today and it means she would have to throw packets away regardless of whether she buys an extra one or not. In the third example Olya would drink k = 2 cartons today ( one she alreay has in her fridge and one from the shop) and the remaining one tomorrow.",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Mahmoud and a Triangle",
    "url": "https://codeforces.com/problemset/problem/766/B",
    "history": "Mahmoud has n line segments, the i- th of them has length ai. Ehab challenged him to use exactly 3 line segments to form a non- degenerate triangle. Mahmoud doesn' t accept challenges unless he is sure he can win, so he asked you to tell him if he should accept the challenge. Given the lengths of the line segments, check if he can choose exactly 3 of them to form a non- degenerate triangle. Mahmoud should use exactly 3 line segments, he can' t concatenate two line segments or change any length. A non- degenerate triangle is a triangle with positive area.",
    "input": "The first line contains single integer n ( 3 \u2264 n \u2264 105) \u2014 the number of line segments Mahmoud has. The second line contains n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) \u2014 the lengths of line segments Mahmoud has.",
    "output": "In the only line print \" YES\" if he can choose exactly three line segments and form a non- degenerate triangle with them, and \" NO\" otherwise.",
    "note": "For the first example, he can use line segments with lengths 2, 4 and 5 to form a non- degenerate triangle.",
    "topics": [
      "constructive algorithms",
      "geometry",
      "greedy",
      "math",
      "number theory",
      "sortings"
    ]
  },
  {
    "title": "USB vs. PS/2",
    "url": "https://codeforces.com/problemset/problem/762/B",
    "history": "Due to the increase in the number of students of Berland State University it was decided to equip a new computer room. You were given the task of buying mouses, and you have to spend as little as possible. After all, the country is in crisis! The computers bought for the room were different. Some of them had only USB ports, some \u2014 only PS/ 2 ports, and some had both options. You have found a price list of a certain computer shop. In it, for m mouses it is specified the cost and the type of the port that is required to plug the mouse in ( USB or PS/ 2) . Each mouse from the list can be bought at most once. You want to buy some set of mouses from the given price list in such a way so that you maximize the number of computers equipped with mouses ( it is not guaranteed that you will be able to equip all of the computers) , and in case of equality of this value you want to minimize the total cost of mouses you will buy.",
    "input": "The first line contains three integers a, b and c ( 0 \u2264 a, b, c \u2264 105) \u2014 the number of computers that only have USB ports, the number of computers, that only have PS/ 2 ports, and the number of computers, that have both options, respectively. The next line contains one integer m ( 0 \u2264 m \u2264 3\u00b7105) \u2014 the number of mouses in the price list. The next m lines each describe another mouse. The i- th line contains first integer vali ( 1 \u2264 vali \u2264 109) \u2014 the cost of the i- th mouse, then the type of port ( USB or PS/ 2) that is required to plug the mouse in.",
    "output": "Output two integers separated by space \u2014 the number of equipped computers and the total cost of the mouses you will buy.",
    "note": "In the first example you can buy the first three mouses. This way you will equip one of the computers that has only a USB port with a USB mouse, and the two PS/ 2 mouses you will plug into the computer with PS/ 2 port and the computer with both ports.",
    "topics": [
      "greedy",
      "implementation",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Dasha and Very Difficult Problem",
    "url": "https://codeforces.com/problemset/problem/761/D",
    "history": "Dasha logged into the system and began to solve problems. One of them is as follows: Given two sequences a and b of length n each you need to write a sequence c of length n, the i- th element of which is calculated as follows: ci = bi - ai. About sequences a and b we know that their elements are in the range from l to r. More formally, elements satisfy the following conditions: l \u2264 ai \u2264 r and l \u2264 bi \u2264 r. About sequence c we know that all its elements are distinct. Dasha wrote a solution to that problem quickly, but checking her work on the standard test was not so easy. Due to an error in the test system only the sequence a and the compressed sequence of the sequence c were known from that test. Let' s give the definition to a compressed sequence. A compressed sequence of sequence c of length n is a sequence p of length n, so that pi equals to the number of integers which are less than or equal to ci in the sequence c. For example, for the sequence c = [ 250, 200, 300, 100, 50] the compressed sequence will be p = [ 4, 3, 5, 2, 1] . Pay attention that in c all integers are distinct. Consequently, the compressed sequence contains all integers from 1 to n inclusively. Help Dasha to find any sequence b for which the calculated compressed sequence of sequence c is correct.",
    "input": "The first line contains three integers n, l, r ( 1 \u2264 n \u2264 105, 1 \u2264 l \u2264 r \u2264 109) \u2014 the length of the sequence and boundaries of the segment where the elements of sequences a and b are. The next line contains n integers a1, a2, . . . , an ( l \u2264 ai \u2264 r) \u2014 the elements of the sequence a. The next line contains n distinct integers p1, p2, . . . , pn ( 1 \u2264 pi \u2264 n) \u2014 the compressed sequence of the sequence c.",
    "output": "If there is no the suitable sequence b, then in the only line print \" - 1\" . Otherwise, in the only line print n integers \u2014 the elements of any suitable sequence b.",
    "note": "Sequence b which was found in the second sample is suitable, because calculated sequence c = [ 2 - 3, 2 - 4, 2 - 8, 9 - 9] = [ - 1, - 2, - 6, 0] ( note that ci = bi - ai) has compressed sequence equals to p = [ 3, 2, 1, 4] .",
    "topics": [
      "binary search",
      "brute force",
      "constructive algorithms",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Felicity is Coming!",
    "url": "https://codeforces.com/problemset/problem/757/C",
    "history": "It' s that time of the year, Felicity is around the corner and you can see people celebrating all around the Himalayan region. The Himalayan region has n gyms. The i- th gym has gi Pokemon in it. There are m distinct Pokemon types in the Himalayan region numbered from 1 to m. There is a special evolution camp set up in the fest which claims to evolve any Pokemon. The type of a Pokemon could change after evolving, subject to the constraint that if two Pokemon have the same type before evolving, they will have the same type after evolving. Also, if two Pokemon have different types before evolving, they will have different types after evolving. It is also possible that a Pokemon has the same type before and after evolving. Formally, an evolution plan is a permutation f of 1, 2, . . . , m, such that f( x) = y means that a Pokemon of type x evolves into a Pokemon of type y. The gym leaders are intrigued by the special evolution camp and all of them plan to evolve their Pokemons. The protocol of the mountain states that in each gym, for every type of Pokemon, the number of Pokemon of that type before evolving any Pokemon should be equal the number of Pokemon of that type after evolving all the Pokemons according to the evolution plan. They now want to find out how many distinct evolution plans exist which satisfy the protocol. Two evolution plans f1 and f2 are distinct, if they have at least one Pokemon type evolving into a different Pokemon type in the two plans, i. e. there exists an i such that f1( i) = \u0338 f2( i) . Your task is to find how many distinct evolution plans are possible such that if all Pokemon in all the gyms are evolved, the number of Pokemon of each type in each of the gyms remains the same. As the answer can be large, output it modulo 109 + 7.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 105, 1 \u2264 m \u2264 106) \u2014 the number of gyms and the number of Pokemon types. The next n lines contain the description of Pokemons in the gyms. The i- th of these lines begins with the integer gi ( 1 \u2264 gi \u2264 105) \u2014 the number of Pokemon in the i- th gym. After that gi integers follow, denoting types of the Pokemons in the i- th gym. Each of these integers is between 1 and m. The total number of Pokemons ( the sum of all gi) does not exceed 5\u00b7105.",
    "output": "Output the number of valid evolution plans modulo 109 + 7.",
    "note": "In the first case, the only possible evolution plan is: In the second case, any permutation of ( 1, 2, 3) is valid. In the third case, there are two possible plans: In the fourth case, the only possible evolution plan is:",
    "topics": [
      "data structures",
      "hashing",
      "sortings",
      "strings"
    ]
  },
  {
    "title": "PolandBall and Game",
    "url": "https://codeforces.com/problemset/problem/755/B",
    "history": "PolandBall is playing a game with EnemyBall. The rules are simple. Players have to say words in turns. You cannot say a word which was already said. PolandBall starts. The Ball which can' t say a new word loses. You' re given two lists of words familiar to PolandBall and EnemyBall. Can you determine who wins the game, if both play optimally?",
    "input": "The first input line contains two integers n and m ( 1 \u2264 n, m \u2264 103) \u2014 number of words PolandBall and EnemyBall know, respectively. Then n strings follow, one per line \u2014 words familiar to PolandBall. Then m strings follow, one per line \u2014 words familiar to EnemyBall. Note that one Ball cannot know a word more than once ( strings are unique) , but some words can be known by both players. Each word is non- empty and consists of no more than 500 lowercase English alphabet letters.",
    "output": "In a single line of print the answer \u2014 \" YES\" if PolandBall wins and \" NO\" otherwise. Both Balls play optimally.",
    "note": "In the first example PolandBall knows much more words and wins effortlessly. In the second example if PolandBall says kremowka first, then EnemyBall cannot use that word anymore. EnemyBall can only say wiedenska. PolandBall says wadowicka and wins.",
    "topics": [
      "binary search",
      "data structures",
      "games",
      "greedy",
      "sortings",
      "strings"
    ]
  },
  {
    "title": "Fedor and coupons",
    "url": "https://codeforces.com/problemset/problem/754/D",
    "history": "All our characters have hobbies. The same is true for Fedor. He enjoys shopping in the neighboring supermarket. The goods in the supermarket have unique integer ids. Also, for every integer there is a product with id equal to this integer. Fedor has n discount coupons, the i- th of them can be used with products with ids ranging from li to ri, inclusive. Today Fedor wants to take exactly k coupons with him. Fedor wants to choose the k coupons in such a way that the number of such products x that all coupons can be used with this product x is as large as possible ( for better understanding, see examples) . Fedor wants to save his time as well, so he asks you to choose coupons for him. Help Fedor!",
    "input": "The first line contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 3\u00b7105) \u2014 the number of coupons Fedor has, and the number of coupons he wants to choose. Each of the next n lines contains two integers li and ri ( - 109 \u2264 li \u2264 ri \u2264 109) \u2014 the description of the i- th coupon. The coupons can be equal.",
    "output": "In the first line print single integer \u2014 the maximum number of products with which all the chosen coupons can be used. The products with which at least one coupon cannot be used shouldn' t be counted. In the second line print k distinct integers p1, p2, . . . , pk ( 1 \u2264 pi \u2264 n) \u2014 the ids of the coupons which Fedor should choose. If there are multiple answers, print any of them.",
    "note": "In the first example if we take the first two coupons then all the products with ids in range [ 40, 70] can be bought with both coupons. There are 31 products in total. In the second example, no product can be bought with two coupons, that is why the answer is 0. Fedor can choose any two coupons in this example.",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Winter Is Coming",
    "url": "https://codeforces.com/problemset/problem/747/D",
    "history": "The winter in Berland lasts n days. For each day we know the forecast for the average air temperature that day. Vasya has a new set of winter tires which allows him to drive safely no more than k days at any average air temperature. After k days of using it ( regardless of the temperature of these days) the set of winter tires wears down and cannot be used more. It is not necessary that these k days form a continuous segment of days. Before the first winter day Vasya still uses summer tires. It is possible to drive safely on summer tires any number of days when the average air temperature is non- negative. It is impossible to drive on summer tires at days when the average air temperature is negative. Vasya can change summer tires to winter tires and vice versa at the beginning of any day. Find the minimum number of times Vasya needs to change summer tires to winter tires and vice versa to drive safely during the winter. At the end of the winter the car can be with any set of tires.",
    "input": "The first line contains two positive integers n and k ( 1 \u2264 n \u2264 2\u00b7105, 0 \u2264 k \u2264 n) \u2014 the number of winter days and the number of days winter tires can be used. It is allowed to drive on winter tires at any temperature, but no more than k days in total. The second line contains a sequence of n integers t1, t2, . . . , tn ( - 20 \u2264 ti \u2264 20) \u2014 the average air temperature in the i- th winter day.",
    "output": "Print the minimum number of times Vasya has to change summer tires to winter tires and vice versa to drive safely during all winter. If it is impossible, print - 1.",
    "note": "In the first example before the first winter day Vasya should change summer tires to winter tires, use it for three days, and then change winter tires to summer tires because he can drive safely with the winter tires for just three days. Thus, the total number of tires' changes equals two. In the second example before the first winter day Vasya should change summer tires to winter tires, and then after the first winter day change winter tires to summer tires. After the second day it is necessary to change summer tires to winter tires again, and after the third day it is necessary to change winter tires to summer tires. Thus, the total number of tires' changes equals four.",
    "topics": [
      "dp",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Gosha is hunting",
    "url": "https://codeforces.com/problemset/problem/739/E",
    "history": "Gosha is hunting. His goal is to catch as many Pokemons as possible. Gosha has a Poke Balls and b Ultra Balls. There are n Pokemons. They are numbered 1 through n. Gosha knows that if he throws a Poke Ball at the i- th Pokemon he catches it with probability pi. If he throws an Ultra Ball at the i- th Pokemon he catches it with probability ui. He can throw at most one Ball of each type at any Pokemon. The hunting proceeds as follows: at first, Gosha chooses no more than a Pokemons at which he will throw Poke Balls and no more than b Pokemons at which he will throw Ultra Balls. After that, he throws the chosen Balls at the chosen Pokemons. If he throws both Ultra Ball and Poke Ball at some Pokemon, he is caught if and only if he is caught by any of these Balls. The outcome of a throw doesn' t depend on the other throws. Gosha would like to know what is the expected number of the Pokemons he catches if he acts in an optimal way. In other words, he would like to know the maximum possible expected number of Pokemons can catch.",
    "input": "The first line contains three integers n, a and b ( 2 \u2264 n \u2264 2000, 0 \u2264 a, b \u2264 n) \u2014 the number of Pokemons, the number of Poke Balls and the number of Ultra Balls. The second line contains n real values p1, p2, . . . , pn ( 0 \u2264 pi \u2264 1) , where pi is the probability of catching the i- th Pokemon if Gosha throws a Poke Ball to it. The third line contains n real values u1, u2, . . . , un ( 0 \u2264 ui \u2264 1) , where ui is the probability of catching the i- th Pokemon if Gosha throws an Ultra Ball to it. All the probabilities are given with exactly three digits after the decimal separator.",
    "output": "Print the maximum possible expected number of Pokemons Gosha can catch. The answer is considered correct if it' s absolute or relative error doesn' t exceed 10 - 4.",
    "note": " ",
    "topics": [
      "brute force",
      "data structures",
      "dp",
      "flows",
      "math",
      "probabilities",
      "sortings"
    ]
  },
  {
    "title": "Urbanization",
    "url": "https://codeforces.com/problemset/problem/735/B",
    "history": "Local authorities have heard a lot about combinatorial abilities of Ostap Bender so they decided to ask his help in the question of urbanization. There are n people who plan to move to the cities. The wealth of the i of them is equal to ai. Authorities plan to build two cities, first for n1 people and second for n2 people. Of course, each of n candidates can settle in only one of the cities. Thus, first some subset of candidates of size n1 settle in the first city and then some subset of size n2 is chosen among the remaining candidates and the move to the second city. All other candidates receive an official refuse and go back home. To make the statistic of local region look better in the eyes of their bosses, local authorities decided to pick subsets of candidates in such a way that the sum of arithmetic mean of wealth of people in each of the cities is as large as possible. Arithmetic mean of wealth in one city is the sum of wealth ai among all its residents divided by the number of them ( n1 or n2 depending on the city) . The division should be done in real numbers without any rounding. Please, help authorities find the optimal way to pick residents for two cities.",
    "input": "The first line of the input contains three integers n, n1 and n2 ( 1 \u2264 n, n1, n2 \u2264 100 000, n1 + n2 \u2264 n) \u2014 the number of candidates who want to move to the cities, the planned number of residents of the first city and the planned number of residents of the second city. The second line contains n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 100 000) , the i- th of them is equal to the wealth of the i- th candidate.",
    "output": "Print one real value \u2014 the maximum possible sum of arithmetic means of wealth of cities' residents. You answer will be considered correct if its absolute or relative error does not exceed 10 - 6. Namely: let' s assume that your answer is a, and the answer of the jury is b. The checker program will consider your answer correct, if .",
    "note": "In the first sample, one of the optimal solutions is to move candidate 1 to the first city and candidate 2 to the second. In the second sample, the optimal solution is to pick candidates 3 and 4 for the first city, and candidate 2 for the second one. Thus we obtain ( a3 + a4) / 2 + a2 = ( 3 + 2) / 2 + 4 = 6. 5",
    "topics": [
      "greedy",
      "number theory",
      "sortings"
    ]
  },
  {
    "title": "Sockets",
    "url": "https://codeforces.com/problemset/problem/732/E",
    "history": "The ICM ACPC World Finals is coming! Unfortunately, the organizers of the competition were so busy preparing tasks that totally missed an important technical point \u2014 the organization of electricity supplement for all the participants workstations. There are n computers for participants, the i- th of which has power equal to positive integer pi. At the same time there are m sockets available, the j- th of which has power euqal to positive integer sj. It is possible to connect the i- th computer to the j- th socket if and only if their powers are the same: pi = sj. It is allowed to connect no more than one computer to one socket. Thus, if the powers of all computers and sockets are distinct, then no computer can be connected to any of the sockets. In order to fix the situation professor Puch Williams urgently ordered a wagon of adapters \u2014 power splitters. Each adapter has one plug and one socket with a voltage divider between them. After plugging an adapter to a socket with power x, the power on the adapter' s socket becomes equal to , it means that it is equal to the socket' s power divided by two with rounding up, for example and . Each adapter can be used only once. It is possible to connect several adapters in a chain plugging the first to a socket. For example, if two adapters are plugged one after enother to a socket with power 10, it becomes possible to connect one computer with power 3 to this socket. The organizers should install adapters so that it will be possible to supply with electricity the maximum number of computers c at the same time. If there are several possible connection configurations, they want to find the one that uses the minimum number of adapters u to connect c computers. Help organizers calculate the maximum number of connected computers c and the minimum number of adapters u needed for this. The wagon of adapters contains enough of them to do the task. It is guaranteed that it' s possible to connect at least one computer.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 200 000) \u2014 the number of computers and the number of sockets. The second line contains n integers p1, p2, . . . , pn ( 1 \u2264 pi \u2264 109) \u2014 the powers of the computers. The third line contains m integers s1, s2, . . . , sm ( 1 \u2264 si \u2264 109) \u2014 the power of the sockets.",
    "output": "In the first line print two numbers c and u \u2014 the maximum number of computers which can at the same time be connected to electricity and the minimum number of adapters needed to connect c computers. In the second line print m integers a1, a2, . . . , am ( 0 \u2264 ai \u2264 109) , where ai equals the number of adapters orginizers need to plug into the i- th socket. The sum of all ai should be equal to u. In third line print n integers b1, b2, . . . , bn ( 0 \u2264 bi \u2264 m) , where the bj- th equals the number of the socket which the j- th computer should be connected to. bj = 0 means that the j- th computer should not be connected to any socket. All bj that are different from 0 should be distinct. The power of the j- th computer should be equal to the power of the socket bj after plugging in abj adapters. The number of non- zero bj should be equal to c. If there are multiple answers, print any of them.",
    "note": " ",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Exams",
    "url": "https://codeforces.com/problemset/problem/732/D",
    "history": "Vasiliy has an exam period which will continue for n days. He has to pass exams on m subjects. Subjects are numbered from 1 to m. About every day we know exam for which one of m subjects can be passed on that day. Perhaps, some day you can' t pass any exam. It is not allowed to pass more than one exam on any day. On each day Vasiliy can either pass the exam of that day ( it takes the whole day) or prepare all day for some exam or have a rest. About each subject Vasiliy know a number ai \u2014 the number of days he should prepare to pass the exam number i. Vasiliy can switch subjects while preparing for exams, it is not necessary to prepare continuously during ai days for the exam number i. He can mix the order of preparation for exams in any way. Your task is to determine the minimum number of days in which Vasiliy can pass all exams, or determine that it is impossible. Each exam should be passed exactly one time.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 105) \u2014 the number of days in the exam period and the number of subjects. The second line contains n integers d1, d2, . . . , dn ( 0 \u2264 di \u2264 m) , where di is the number of subject, the exam of which can be passed on the day number i. If di equals 0, it is not allowed to pass any exams on the day number i. The third line contains m positive integers a1, a2, . . . , am ( 1 \u2264 ai \u2264 105) , where ai is the number of days that are needed to prepare before passing the exam on the subject i.",
    "output": "Print one integer \u2014 the minimum number of days in which Vasiliy can pass all exams. If it is impossible, print - 1.",
    "note": "In the first example Vasiliy can behave as follows. On the first and the second day he can prepare for the exam number 1 and pass it on the fifth day, prepare for the exam number 2 on the third day and pass it on the fourth day. In the second example Vasiliy should prepare for the exam number 3 during the first four days and pass it on the fifth day. Then on the sixth day he should prepare for the exam number 2 and then pass it on the seventh day. After that he needs to prepare for the exam number 1 on the eighth day and pass it on the ninth day. In the third example Vasiliy can' t pass the only exam because he hasn' t anough time to prepare for it.",
    "topics": [
      "binary search",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "80-th Level Archeology",
    "url": "https://codeforces.com/problemset/problem/731/D",
    "history": "Archeologists have found a secret pass in the dungeon of one of the pyramids of Cycleland. To enter the treasury they have to open an unusual lock on the door. The lock consists of n words, each consisting of some hieroglyphs. The wall near the lock has a round switch. Each rotation of this switch changes the hieroglyphs according to some rules. The instruction nearby says that the door will open only if words written on the lock would be sorted in lexicographical order ( the definition of lexicographical comparison in given in notes section) . The rule that changes hieroglyphs is the following. One clockwise rotation of the round switch replaces each hieroglyph with the next hieroglyph in alphabet, i. e. hieroglyph x ( 1 \u2264 x \u2264 c - 1) is replaced with hieroglyph ( x + 1) , and hieroglyph c is replaced with hieroglyph 1. Help archeologist determine, how many clockwise rotations they should perform in order to open the door, or determine that this is impossible, i. e. no cyclic shift of the alphabet will make the sequence of words sorted lexicographically.",
    "input": "The first line of the input contains two integers n and c ( 2 \u2264 n \u2264 500 000, 1 \u2264 c \u2264 106) \u2014 the number of words, written on the lock, and the number of different hieroglyphs. Each of the following n lines contains the description of one word. The i- th of these lines starts with integer li ( 1 \u2264 li \u2264 500 000) , that denotes the length of the i- th word, followed by li integers wi, 1, wi, 2, . . . , wi, li ( 1 \u2264 wi, j \u2264 c) \u2014 the indices of hieroglyphs that make up the i- th word. Hieroglyph with index 1 is the smallest in the alphabet and with index c \u2014 the biggest. It' s guaranteed, that the total length of all words doesn' t exceed 106.",
    "output": "If it is possible to open the door by rotating the round switch, print integer x ( 0 \u2264 x \u2264 c - 1) that defines the required number of clockwise rotations. If there are several valid x, print any of them. If it is impossible to open the door by this method, print - 1.",
    "note": "Word a1, a2, . . . , am of length m is lexicographically not greater than word b1, b2, . . . , bk of length k, if one of two conditions hold: at first position i, such that ai = \u0338 bi, the character ai goes earlier in the alphabet than character bi, i. e. a has smaller character in the first position where they differ; if there is no such position i and m \u2264 k, i. e. the first word is a prefix of the second or two words are equal. The sequence of words is said to be sorted in lexicographical order if each word ( except the last one) is lexicographically not greater than the next word. In the first sample, after the round switch is rotated 1 position clockwise the words look as follows: 1 323 1 23 1 2 3In the second sample, words are already sorted in lexicographical order. In the last sample, one can check that no shift of the alphabet will work.",
    "topics": [
      "brute force",
      "data structures",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Subordinates",
    "url": "https://codeforces.com/problemset/problem/729/E",
    "history": "There are n workers in a company, each of them has a unique id from 1 to n. Exaclty one of them is a chief, his id is s. Each worker except the chief has exactly one immediate superior. There was a request to each of the workers to tell how how many superiors ( not only immediate) . Worker' s superiors are his immediate superior, the immediate superior of the his immediate superior, and so on. For example, if there are three workers in the company, from which the first is the chief, the second worker' s immediate superior is the first, the third worker' s immediate superior is the second, then the third worker has two superiors, one of them is immediate and one not immediate. The chief is a superior to all the workers except himself. Some of the workers were in a hurry and made a mistake. You are to find the minimum number of workers that could make a mistake.",
    "input": "The first line contains two positive integers n and s ( 1 \u2264 n \u2264 2\u00b7105, 1 \u2264 s \u2264 n) \u2014 the number of workers and the id of the chief. The second line contains n integers a1, a2, . . . , an ( 0 \u2264 ai \u2264 n - 1) , where ai is the number of superiors ( not only immediate) the worker with id i reported about.",
    "output": "Print the minimum number of workers that could make a mistake.",
    "note": "In the first example it is possible that only the first worker made a mistake. Then: the immediate superior of the first worker is the second worker, the immediate superior of the third worker is the first worker, the second worker is the chief.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "graphs",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Road to Cinema",
    "url": "https://codeforces.com/problemset/problem/729/C",
    "history": "Vasya is currently at a car rental service, and he wants to reach cinema. The film he has bought a ticket for starts in t minutes. There is a straight road of length s from the service to the cinema. Let' s introduce a coordinate system so that the car rental service is at the point 0, and the cinema is at the point s. There are k gas stations along the road, and at each of them you can fill a car with any amount of fuel for free! Consider that this operation doesn' t take any time, i. e. is carried out instantly. There are n cars in the rental service, i- th of them is characterized with two integers ci and vi \u2014 the price of this car rent and the capacity of its fuel tank in liters. It' s not allowed to fuel a car with more fuel than its tank capacity vi. All cars are completely fueled at the car rental service. Each of the cars can be driven in one of two speed modes: normal or accelerated. In the normal mode a car covers 1 kilometer in 2 minutes, and consumes 1 liter of fuel. In the accelerated mode a car covers 1 kilometer in 1 minutes, but consumes 2 liters of fuel. The driving mode can be changed at any moment and any number of times. Your task is to choose a car with minimum price such that Vasya can reach the cinema before the show starts, i. e. not later than in t minutes. Assume that all cars are completely fueled initially.",
    "input": "The first line contains four positive integers n, k, s and t ( 1 \u2264 n \u2264 2\u00b7105, 1 \u2264 k \u2264 2\u00b7105, 2 \u2264 s \u2264 109, 1 \u2264 t \u2264 2\u00b7109) \u2014 the number of cars at the car rental service, the number of gas stations along the road, the length of the road and the time in which the film starts. Each of the next n lines contains two positive integers ci and vi ( 1 \u2264 ci, vi \u2264 109) \u2014 the price of the i- th car and its fuel tank capacity. The next line contains k distinct integers g1, g2, . . . , gk ( 1 \u2264 gi \u2264 s - 1) \u2014 the positions of the gas stations on the road in arbitrary order.",
    "output": "Print the minimum rent price of an appropriate car, i. e. such car that Vasya will be able to reach the cinema before the film starts ( not later than in t minutes) . If there is no appropriate car, print - 1.",
    "note": "In the first sample, Vasya can reach the cinema in time using the first or the third cars, but it would be cheaper to choose the first one. Its price is equal to 10, and the capacity of its fuel tank is 8. Then Vasya can drive to the first gas station in the accelerated mode in 3 minutes, spending 6 liters of fuel. After that he can full the tank and cover 2 kilometers in the normal mode in 4 minutes, spending 2 liters of fuel. Finally, he drives in the accelerated mode covering the remaining 3 kilometers in 3 minutes and spending 6 liters of fuel.",
    "topics": [
      "binary search",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Ray Tracing",
    "url": "https://codeforces.com/problemset/problem/724/C",
    "history": "There are k sensors located in the rectangular room of size n \u00d7 m meters. The i- th sensor is located at point ( xi, yi) . All sensors are located at distinct points strictly inside the rectangle. Opposite corners of the room are located at points ( 0, 0) and ( n, m) . Walls of the room are parallel to coordinate axes. At the moment 0, from the point ( 0, 0) the laser ray is released in the direction of point ( 1, 1) . The ray travels with a speed of meters per second. Thus, the ray will reach the point ( 1, 1) in exactly one second after the start. When the ray meets the wall it' s reflected by the rule that the angle of incidence is equal to the angle of reflection. If the ray reaches any of the four corners, it immediately stops. For each sensor you have to determine the first moment of time when the ray will pass through the point where this sensor is located. If the ray will never pass through this point, print - 1 for such sensors.",
    "input": "The first line of the input contains three integers n, m and k ( 2 \u2264 n, m \u2264 100 000, 1 \u2264 k \u2264 100 000) \u2014 lengths of the room' s walls and the number of sensors. Each of the following k lines contains two integers xi and yi ( 1 \u2264 xi \u2264 n - 1, 1 \u2264 yi \u2264 m - 1) \u2014 coordinates of the sensors. It' s guaranteed that no two sensors are located at the same point.",
    "output": "Print k integers. The i- th of them should be equal to the number of seconds when the ray first passes through the point where the i- th sensor is located, or - 1 if this will never happen.",
    "note": "In the first sample, the ray will consequently pass through the points ( 0, 0) , ( 1, 1) , ( 2, 2) , ( 3, 3) . Thus, it will stop at the point ( 3, 3) after 3 seconds. In the second sample, the ray will consequently pass through the following points: ( 0, 0) , ( 1, 1) , ( 2, 2) , ( 3, 3) , ( 2, 4) , ( 1, 3) , ( 0, 2) , ( 1, 1) , ( 2, 0) , ( 3, 1) , ( 2, 2) , ( 1, 3) , ( 0, 4) . The ray will stop at the point ( 0, 4) after 12 seconds. It will reflect at the points ( 3, 3) , ( 2, 4) , ( 0, 2) , ( 2, 0) and ( 3, 1) .",
    "topics": [
      "greedy",
      "hashing",
      "implementation",
      "math",
      "number theory",
      "sortings"
    ]
  },
  {
    "title": "The New Year: Meeting Friends",
    "url": "https://codeforces.com/problemset/problem/723/A",
    "history": "There are three friend living on the straight line Ox in Lineland. The first friend lives at the point x1, the second friend lives at the point x2, and the third friend lives at the point x3. They plan to celebrate the New Year together, so they need to meet at one point. What is the minimum total distance they have to travel in order to meet at some point and celebrate the New Year? It' s guaranteed that the optimal answer is always integer.",
    "input": "The first line of the input contains three distinct integers x1, x2 and x3 ( 1 \u2264 x1, x2, x3 \u2264 100) \u2014 the coordinates of the houses of the first, the second and the third friends respectively.",
    "output": "Print one integer \u2014 the minimum total distance the friends need to travel in order to meet together.",
    "note": "In the first sample, friends should meet at the point 4. Thus, the first friend has to travel the distance of 3 ( from the point 7 to the point 4) , the second friend also has to travel the distance of 3 ( from the point 1 to the point 4) , while the third friend should not go anywhere because he lives at the point 4.",
    "topics": [
      "implementation",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Passwords",
    "url": "https://codeforces.com/problemset/problem/721/B",
    "history": "Vanya is managed to enter his favourite site Codehorses. Vanya uses n distinct passwords for sites at all, however he can' t remember which one exactly he specified during Codehorses registration. Vanya will enter passwords in order of non- decreasing their lengths, and he will enter passwords of same length in arbitrary order. Just when Vanya will have entered the correct password, he is immediately authorized on the site. Vanya will not enter any password twice. Entering any passwords takes one second for Vanya. But if Vanya will enter wrong password k times, then he is able to make the next try only 5 seconds after that. Vanya makes each try immediately, that is, at each moment when Vanya is able to enter password, he is doing that. Determine how many seconds will Vanya need to enter Codehorses in the best case for him ( if he spends minimum possible number of second) and in the worst case ( if he spends maximum possible amount of seconds) .",
    "input": "The first line of the input contains two integers n and k ( 1 \u2264 n, k \u2264 100) \u2014 the number of Vanya' s passwords and the number of failed tries, after which the access to the site is blocked for 5 seconds. The next n lines contains passwords, one per line \u2014 pairwise distinct non- empty strings consisting of latin letters and digits. Each password length does not exceed 100 characters. The last line of the input contains the Vanya' s Codehorses password. It is guaranteed that the Vanya' s Codehorses password is equal to some of his n passwords.",
    "output": "Print two integers \u2014 time ( in seconds) , Vanya needs to be authorized to Codehorses in the best case for him and in the worst case respectively.",
    "note": "Consider the first sample case. As soon as all passwords have the same length, Vanya can enter the right password at the first try as well as at the last try. If he enters it at the first try, he spends exactly 1 second. Thus in the best case the answer is 1. If, at the other hand, he enters it at the last try, he enters another 4 passwords before. He spends 2 seconds to enter first 2 passwords, then he waits 5 seconds as soon as he made 2 wrong tries. Then he spends 2 more seconds to enter 2 wrong passwords, again waits 5 seconds and, finally, enters the correct password spending 1 more second. In summary in the worst case he is able to be authorized in 15 seconds. Consider the second sample case. There is no way of entering passwords and get the access to the site blocked. As soon as the required password has length of 2, Vanya enters all passwords of length 1 anyway, spending 2 seconds for that. Then, in the best case, he immediately enters the correct password and the answer for the best case is 3, but in the worst case he enters wrong password of length 2 and only then the right one, spending 4 seconds at all.",
    "topics": [
      "implementation",
      "math",
      "sortings",
      "strings"
    ]
  },
  {
    "title": "Slalom",
    "url": "https://codeforces.com/problemset/problem/720/D",
    "history": "Little girl Masha likes winter sports, today she' s planning to take part in slalom skiing. The track is represented as a grid composed of n \u00d7 m squares. There are rectangular obstacles at the track, composed of grid squares. Masha must get from the square ( 1, 1) to the square ( n, m) . She can move from a square to adjacent square: either to the right, or upwards. If the square is occupied by an obstacle, it is not allowed to move to that square. One can see that each obstacle can actually be passed in two ways: either it is to the right of Masha' s path, or to the left. Masha likes to try all ways to do things, so she would like to know how many ways are there to pass the track. Two ways are considered different if there is an obstacle such that it is to the right of the path in one way, and to the left of the path in the other way. Help Masha to find the number of ways to pass the track. The number of ways can be quite big, so Masha would like to know it modulo 109 + 7. The pictures below show different ways to pass the track in sample tests.",
    "input": "The first line of input data contains three positive integers: n, m and k ( 3 \u2264 n, m \u2264 106, 0 \u2264 k \u2264 105) \u2014 the size of the track and the number of obstacles. The following k lines contain four positive integers each: x1, y1, x2, y2 ( 1 \u2264 x1 \u2264 x2 \u2264 n, 1 \u2264 y1 \u2264 y2 \u2264 m) \u2014 coordinates of bottom left, and top right squares of the obstacle. It is guaranteed that there are no obstacles at squares ( 1, 1) and ( n, m) , and no obstacles overlap ( but some of them may touch) .",
    "output": "Output one integer \u2014 the number of ways to pass the track modulo 109 + 7.",
    "note": " ",
    "topics": [
      "data structures",
      "dp",
      "sortings"
    ]
  },
  {
    "title": "Potions Homework",
    "url": "https://codeforces.com/problemset/problem/717/C",
    "history": "Harry Water, Ronaldo, Her- my- oh- knee and their friends have started a new school year at their MDCS School of Speechcraft and Misery. At the time, they are very happy to have seen each other after a long time. The sun is shining, birds are singing, flowers are blooming, and their Potions class teacher, professor Snipe is sulky as usual. Due to his angst fueled by disappointment in his own life, he has given them a lot of homework in Potions class. Each of the n students has been assigned a single task. Some students do certain tasks faster than others. Thus, they want to redistribute the tasks so that each student still does exactly one task, and that all tasks are finished. Each student has their own laziness level, and each task has its own difficulty level. Professor Snipe is trying hard to improve their work ethics, so each student\u2019s laziness level is equal to their task\u2019s difficulty level. Both sets of values are given by the sequence a, where ai represents both the laziness level of the i- th student and the difficulty of his task. The time a student needs to finish a task is equal to the product of their laziness level and the task\u2019s difficulty. They are wondering, what is the minimum possible total time they must spend to finish all tasks if they distribute them in the optimal way. Each person should receive one task and each task should be given to one person. Print the answer modulo 10 007.",
    "input": "The first line of input contains integer n ( 1 \u2264 n \u2264 100 000) \u2014 the number of tasks. The next n lines contain exactly one integer number ai ( 1 \u2264 ai \u2264 100 000) \u2014 both the difficulty of the initial task and the laziness of the i- th students.",
    "output": "Print the minimum total time to finish all tasks modulo 10 007.",
    "note": "In the first sample, if the students switch their tasks, they will be able to finish them in 3 + 3 = 6 time units.",
    "topics": [
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Filya and Homework",
    "url": "https://codeforces.com/problemset/problem/714/B",
    "history": "Today, hedgehog Filya went to school for the very first time! Teacher gave him a homework which Filya was unable to complete without your help. Filya is given an array of non- negative integers a1, a2, . . . , an. First, he pick an integer x and then he adds x to some elements of the array ( no more than once) , subtract x from some other elements ( also, no more than once) and do no change other elements. He wants all elements of the array to be equal. Now he wonders if it' s possible to pick such integer x and change some elements of the array using this x in order to make all elements equal.",
    "input": "The first line of the input contains an integer n ( 1 \u2264 n \u2264 100 000) \u2014 the number of integers in the Filya' s array. The second line contains n integers a1, a2, . . . , an ( 0 \u2264 ai \u2264 109) \u2014 elements of the array.",
    "output": "If it' s impossible to make all elements of the array equal using the process given in the problem statement, then print \" NO\" ( without quotes) in the only line of the output. Otherwise print \" YES\" ( without quotes) .",
    "note": "In the first sample Filya should select x = 1, then add it to the first and the last elements of the array and subtract from the second and the third elements.",
    "topics": [
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Sonya and Problem Wihtout a Legend",
    "url": "https://codeforces.com/problemset/problem/713/C",
    "history": "Sonya was unable to think of a story for this problem, so here comes the formal description. You are given the array containing n positive integers. At one turn you can pick any element and increase or decrease it by 1. The goal is the make the array strictly increasing by making the minimum possible number of operations. You are allowed to change elements in any way, they can become negative or equal to 0.",
    "input": "The first line of the input contains a single integer n ( 1 \u2264 n \u2264 3000) \u2014 the length of the array. Next line contains n integer ai ( 1 \u2264 ai \u2264 109) .",
    "output": "Print the minimum number of operation required to make the array strictly increasing.",
    "note": "In the first sample, the array is going to look as follows: 2 3 5 6 7 9 11| 2 - 2| + | 1 - 3| + | 5 - 5| + | 11 - 6| + | 5 - 7| + | 9 - 9| + | 11 - 11| = 9And for the second sample: 1 2 3 4 5| 5 - 1| + | 4 - 2| + | 3 - 3| + | 2 - 4| + | 1 - 5| = 12",
    "topics": [
      "dp",
      "sortings"
    ]
  },
  {
    "title": "Optimal Point on a Line",
    "url": "https://codeforces.com/problemset/problem/710/B",
    "history": "You are given n points on a line with their coordinates xi. Find the point x so the sum of distances to the given points is minimal.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 3\u00b7105) \u2014 the number of points on the line. The second line contains n integers xi ( - 109 \u2264 xi \u2264 109) \u2014 the coordinates of the given n points.",
    "output": "Print the only integer x \u2014 the position of the optimal point on the line. If there are several optimal points print the position of the leftmost one. It is guaranteed that the answer is always the integer.",
    "note": " ",
    "topics": [
      "brute force",
      "sortings"
    ]
  },
  {
    "title": "Checkpoints",
    "url": "https://codeforces.com/problemset/problem/709/B",
    "history": "Vasya takes part in the orienteering competition. There are n checkpoints located along the line at coordinates x1, x2, . . . , xn. Vasya starts at the point with coordinate a. His goal is to visit at least n - 1 checkpoint in order to finish the competition. Participant are allowed to visit checkpoints in arbitrary order. Vasya wants to pick such checkpoints and the order of visiting them that the total distance travelled is minimized. He asks you to calculate this minimum possible value.",
    "input": "The first line of the input contains two integers n and a ( 1 \u2264 n \u2264 100 000, - 1 000 000 \u2264 a \u2264 1 000 000) \u2014 the number of checkpoints and Vasya' s starting position respectively. The second line contains n integers x1, x2, . . . , xn ( - 1 000 000 \u2264 xi \u2264 1 000 000) \u2014 coordinates of the checkpoints.",
    "output": "Print one integer \u2014 the minimum distance Vasya has to travel in order to visit at least n - 1 checkpoint.",
    "note": "In the first sample Vasya has to visit at least two checkpoints. The optimal way to achieve this is the walk to the third checkpoints ( distance is 12 - 10 = 2) and then proceed to the second one ( distance is 12 - 7 = 5) . The total distance is equal to 2 + 5 = 7. In the second sample it' s enough to visit only one checkpoint so Vasya should just walk to the point - 10.",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Dividing Kingdom II",
    "url": "https://codeforces.com/problemset/problem/687/D",
    "history": "Long time ago, there was a great kingdom and it was being ruled by The Great Arya and Pari The Great. These two had some problems about the numbers they like, so they decided to divide the great kingdom between themselves. The great kingdom consisted of n cities numbered from 1 to n and m bidirectional roads between these cities, numbered from 1 to m. The i- th road had length equal to wi. The Great Arya and Pari The Great were discussing about destructing some prefix ( all road with numbers less than some x) and suffix ( all roads with numbers greater than some x) of the roads so there will remain only the roads with numbers l, l + 1, . . . , r - 1 and r. After that they will divide the great kingdom into two pieces ( with each city belonging to exactly one piece) such that the hardness of the division is minimized. The hardness of a division is the maximum length of a road such that its both endpoints are in the same piece of the kingdom. In case there is no such road, the hardness of the division is considered to be equal to - 1. Historians found the map of the great kingdom, and they have q guesses about the l and r chosen by those great rulers. Given these data, for each guess li and ri print the minimum possible hardness of the division of the kingdom.",
    "input": "The first line of the input contains three integers n, m and q ( 1 \u2264 n, q \u2264 1000, ) \u2014 the number of cities and roads in the great kingdom, and the number of guesses, respectively. The i- th line of the following m lines contains three integers ui, vi and wi ( 1 \u2264 ui, vi \u2264 n, 0 \u2264 wi \u2264 109) , denoting the road number i connects cities ui and vi and its length is equal wi. It' s guaranteed that no road connects the city to itself and no pair of cities is connected by more than one road. Each of the next q lines contains a pair of integers li and ri ( 1 \u2264 li \u2264 ri \u2264 m) \u2014 a guess from the historians about the remaining roads in the kingdom.",
    "output": "For each guess print the minimum possible hardness of the division in described scenario.",
    "note": " ",
    "topics": [
      "brute force",
      "data structures",
      "dsu",
      "graphs",
      "sortings"
    ]
  },
  {
    "title": "Little Robber Girl's Zoo",
    "url": "https://codeforces.com/problemset/problem/686/B",
    "history": "Little Robber Girl likes to scare animals in her zoo for fun. She decided to arrange the animals in a row in the order of non- decreasing height. However, the animals were so scared that they couldn' t stay in the right places. The robber girl was angry at first, but then she decided to arrange the animals herself. She repeatedly names numbers l and r such that r - l + 1 is even. After that animals that occupy positions between l and r inclusively are rearranged as follows: the animal at position l swaps places with the animal at position l + 1, the animal l + 2 swaps with the animal l + 3, . . . , finally, the animal at position r - 1 swaps with the animal r. Help the robber girl to arrange the animals in the order of non- decreasing height. You should name at most 20 000 segments, since otherwise the robber girl will become bored and will start scaring the animals again.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 100) \u2014 number of animals in the robber girl' s zoo. The second line contains n space- separated integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) , where ai is the height of the animal occupying the i- th place.",
    "output": "Print the sequence of operations that will rearrange the animals by non- decreasing height. The output should contain several lines, i- th of the lines should contain two space- separated integers li and ri ( 1 \u2264 li < ri \u2264 n) \u2014 descriptions of segments the robber girl should name. The segments should be described in the order the operations are performed. The number of operations should not exceed 20 000. If the animals are arranged correctly from the start, you are allowed to output nothing.",
    "note": "Note that you don' t have to minimize the number of operations. Any solution that performs at most 20 000 operations is allowed.",
    "topics": [
      "constructive algorithms",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Kay and Eternity",
    "url": "https://codeforces.com/problemset/problem/685/D",
    "history": "Snow Queen told Kay to form a word \" eternity\" using pieces of ice. Kay is eager to deal with the task, because he will then become free, and Snow Queen will give him all the world and a pair of skates. Behind the palace of the Snow Queen there is an infinite field consisting of cells. There are n pieces of ice spread over the field, each piece occupying exactly one cell and no two pieces occupying the same cell. To estimate the difficulty of the task Kay looks at some squares of size k \u00d7 k cells, with corners located at the corners of the cells and sides parallel to coordinate axis and counts the number of pieces of the ice inside them. This method gives an estimation of the difficulty of some part of the field. However, Kay also wants to estimate the total difficulty, so he came up with the following criteria: for each x ( 1 \u2264 x \u2264 n) he wants to count the number of squares of size k \u00d7 k, such that there are exactly x pieces of the ice inside. Please, help Kay estimate the difficulty of the task given by the Snow Queen.",
    "input": "The first line of the input contains two integers n and k ( 1 \u2264 n \u2264 100 000, 1 \u2264 k \u2264 300) \u2014 the number of pieces of the ice and the value k, respectively. Each of the next n lines contains two integers xi and yi ( - 109 \u2264 xi, yi \u2264 109) \u2014 coordinates of the cell containing i- th piece of the ice. It' s guaranteed, that no two pieces of the ice occupy the same cell.",
    "output": "Print n integers: the number of squares of size k \u00d7 k containing exactly 1, 2, . . . , n pieces of the ice.",
    "note": " ",
    "topics": [
      "brute force",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Alyona and Mex",
    "url": "https://codeforces.com/problemset/problem/682/B",
    "history": "Someone gave Alyona an array containing n positive integers a1, a2, . . . , an. In one operation, Alyona can choose any element of the array and decrease it, i. e. replace with any positive integer that is smaller than the current one. Alyona can repeat this operation as many times as she wants. In particular, she may not apply any operation to the array at all. Formally, after applying some operations Alyona will get an array of n positive integers b1, b2, . . . , bn such that 1 \u2264 bi \u2264 ai for every 1 \u2264 i \u2264 n. Your task is to determine the maximum possible value of mex of this array. Mex of an array in this problem is the minimum positive integer that doesn' t appear in this array. For example, mex of the array containing 1, 3 and 4 is equal to 2, while mex of the array containing 2, 3 and 2 is equal to 1.",
    "input": "The first line of the input contains a single integer n ( 1 \u2264 n \u2264 100 000) \u2014 the number of elements in the Alyona' s array. The second line of the input contains n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) \u2014 the elements of the array.",
    "output": "Print one positive integer \u2014 the maximum possible value of mex of the array after Alyona applies some ( possibly none) operations.",
    "note": "In the first sample case if one will decrease the second element value to 2 and the fifth element value to 4 then the mex value of resulting array 1 2 3 3 4 will be equal to 5. To reach the answer to the second sample case one must not decrease any of the array elements.",
    "topics": [
      "sortings"
    ]
  },
  {
    "title": "Runaway to a Shadow",
    "url": "https://codeforces.com/problemset/problem/681/E",
    "history": "Dima is living in a dormitory, as well as some cockroaches. At the moment 0 Dima saw a cockroach running on a table and decided to kill it. Dima needs exactly T seconds for aiming, and after that he will precisely strike the cockroach and finish it. To survive the cockroach has to run into a shadow, cast by round plates standing on the table, in T seconds. Shadow casted by any of the plates has the shape of a circle. Shadow circles may intersect, nest or overlap arbitrarily. The cockroach uses the following strategy: first he equiprobably picks a direction to run towards and then runs towards it with the constant speed v. If at some moment t \u2264 T it reaches any shadow circle, it immediately stops in the shadow and thus will stay alive. Otherwise the cockroach is killed by the Dima' s precise strike. Consider that the Dima' s precise strike is instant. Determine the probability of that the cockroach will stay alive.",
    "input": "In the first line of the input the four integers x0, y0, v, T ( | x0| , | y0| \u2264 109, 0 \u2264 v, T \u2264 109) are given \u2014 the cockroach initial position on the table in the Cartesian system at the moment 0, the cockroach' s constant speed and the time in seconds Dima needs for aiming respectively. In the next line the only number n ( 1 \u2264 n \u2264 100 000) is given \u2014 the number of shadow circles casted by plates. In the next n lines shadow circle description is given: the ith of them consists of three integers xi, yi, ri ( | xi| , | yi| \u2264 109, 0 \u2264 r \u2264 109) \u2014 the ith shadow circle on- table position in the Cartesian system and its radius respectively. Consider that the table is big enough for the cockroach not to run to the table edges and avoid Dima' s precise strike.",
    "output": "Print the only real number p \u2014 the probability of that the cockroach will stay alive. Your answer will be considered correct if its absolute or relative error does not exceed 10 - 4.",
    "note": "The picture for the first sample is given below. Red color stands for points which being chosen as the cockroach' s running direction will cause him being killed, green color for those standing for survival directions. Please note that despite containing a circle centered in ( - 2, 2) a part of zone is colored red because the cockroach is not able to reach it in one second.",
    "topics": [
      "geometry",
      "sortings"
    ]
  },
  {
    "title": "Money Transfers",
    "url": "https://codeforces.com/problemset/problem/675/C",
    "history": "There are n banks in the city where Vasya lives, they are located in a circle, such that any two banks are neighbouring if their indices differ by no more than 1. Also, bank 1 and bank n are neighbours if n > 1. No bank is a neighbour of itself. Vasya has an account in each bank. Its balance may be negative, meaning Vasya owes some money to this bank. There is only one type of operations available: transfer some amount of money from any bank to account in any neighbouring bank. There are no restrictions on the size of the sum being transferred or balance requirements to perform this operation. Vasya doesn' t like to deal with large numbers, so he asks you to determine the minimum number of operations required to change the balance of each bank account to zero. It' s guaranteed, that this is possible to achieve, that is, the total balance of Vasya in all banks is equal to zero.",
    "input": "The first line of the input contains a single integer n ( 1 \u2264 n \u2264 100 000) \u2014 the number of banks. The second line contains n integers ai ( - 109 \u2264 ai \u2264 109) , the i- th of them is equal to the initial balance of the account in the i- th bank. It' s guaranteed that the sum of all ai is equal to 0.",
    "output": "Print the minimum number of operations required to change balance in each bank to zero.",
    "note": "In the first sample, Vasya may transfer 5 from the first bank to the third. In the second sample, Vasya may first transfer 1 from the third bank to the second, and then 1 from the second to the first. In the third sample, the following sequence provides the optimal answer: transfer 1 from the first bank to the second bank; transfer 3 from the second bank to the third; transfer 6 from the third bank to the fourth.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Cinema",
    "url": "https://codeforces.com/problemset/problem/670/C",
    "history": "Moscow is hosting a major international conference, which is attended by n scientists from different countries. Each of the scientists knows exactly one language. For convenience, we enumerate all languages of the world with integers from 1 to 109. In the evening after the conference, all n scientists decided to go to the cinema. There are m movies in the cinema they came to. Each of the movies is characterized by two distinct numbers \u2014 the index of audio language and the index of subtitles language. The scientist, who came to the movie, will be very pleased if he knows the audio language of the movie, will be almost satisfied if he knows the language of subtitles and will be not satisfied if he does not know neither one nor the other ( note that the audio language and the subtitles language for each movie are always different) . Scientists decided to go together to the same movie. You have to help them choose the movie, such that the number of very pleased scientists is maximum possible. If there are several such movies, select among them one that will maximize the number of almost satisfied scientists.",
    "input": "The first line of the input contains a positive integer n ( 1 \u2264 n \u2264 200 000) \u2014 the number of scientists. The second line contains n positive integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) , where ai is the index of a language, which the i- th scientist knows. The third line contains a positive integer m ( 1 \u2264 m \u2264 200 000) \u2014 the number of movies in the cinema. The fourth line contains m positive integers b1, b2, . . . , bm ( 1 \u2264 bj \u2264 109) , where bj is the index of the audio language of the j- th movie. The fifth line contains m positive integers c1, c2, . . . , cm ( 1 \u2264 cj \u2264 109) , where cj is the index of subtitles language of the j- th movie. It is guaranteed that audio languages and subtitles language are different for each movie, that is bj = \u0338 cj.",
    "output": "Print the single integer \u2014 the index of a movie to which scientists should go. After viewing this movie the number of very pleased scientists should be maximum possible. If in the cinema there are several such movies, you need to choose among them one, after viewing which there will be the maximum possible number of almost satisfied scientists. If there are several possible answers print any of them.",
    "note": "In the first sample, scientists must go to the movie with the index 2, as in such case the 1- th and the 3- rd scientists will be very pleased and the 2- nd scientist will be almost satisfied. In the second test case scientists can go either to the movie with the index 1 or the index 3. After viewing any of these movies exactly two scientists will be very pleased and all the others will be not satisfied.",
    "topics": [
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Four Divisors",
    "url": "https://codeforces.com/problemset/problem/665/F",
    "history": "If an integer a is divisible by another integer b, then b is called the divisor of a. For example: 12 has positive 6 divisors. They are 1, 2, 3, 4, 6 and 12. Let\u2019s define a function D( n) \u2014 number of integers between 1 and n ( inclusive) which has exactly four positive divisors. Between 1 and 10 only the integers 6, 8 and 10 has exactly four positive divisors. So, D( 10) = 3. You are given an integer n. You have to calculate D( n) .",
    "input": "The only line contains integer n ( 1 \u2264 n \u2264 1011) \u2014 the parameter from the problem statement.",
    "output": "Print the only integer c \u2014 the number of integers between 1 and n with exactly four divisors.",
    "note": " ",
    "topics": [
      "data structures",
      "dp",
      "math",
      "number theory",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Polycarp and Hay",
    "url": "https://codeforces.com/problemset/problem/659/F",
    "history": "The farmer Polycarp has a warehouse with hay, which can be represented as an n \u00d7 m rectangular table, where n is the number of rows, and m is the number of columns in the table. Each cell of the table contains a haystack. The height in meters of the hay located in the i- th row and the j- th column is equal to an integer ai, j and coincides with the number of cubic meters of hay in the haystack, because all cells have the size of the base 1 \u00d7 1. Polycarp has decided to tidy up in the warehouse by removing an arbitrary integer amount of cubic meters of hay from the top of each stack. You can take different amounts of hay from different haystacks. Besides, it is allowed not to touch a stack at all, or, on the contrary, to remove it completely. If a stack is completely removed, the corresponding cell becomes empty and no longer contains the stack. Polycarp wants the following requirements to hold after the reorganization: the total amount of hay remaining in the warehouse must be equal to k, the heights of all stacks ( i. e. , cells containing a non- zero amount of hay) should be the same, the height of at least one stack must remain the same as it was, for the stability of the remaining structure all the stacks should form one connected region. The two stacks are considered adjacent if they share a side in the table. The area is called connected if from any of the stack in the area you can get to any other stack in this area, moving only to adjacent stacks. In this case two adjacent stacks necessarily belong to the same area. Help Polycarp complete this challenging task or inform that it is impossible.",
    "input": "The first line of the input contains three integers n, m ( 1 \u2264 n, m \u2264 1000) and k ( 1 \u2264 k \u2264 1018) \u2014 the number of rows and columns of the rectangular table where heaps of hay are lain and the required total number cubic meters of hay after the reorganization. Then n lines follow, each containing m positive integers ai, j ( 1 \u2264 ai, j \u2264 109) , where ai, j is equal to the number of cubic meters of hay making the hay stack on the i- th row and j- th column of the table.",
    "output": "In the first line print \" YES\" ( without quotes) , if Polycarpus can perform the reorganisation and \" NO\" ( without quotes) otherwise. If the answer is \" YES\" ( without quotes) , then in next n lines print m numbers \u2014 the heights of the remaining hay stacks. All the remaining non- zero values should be equal, represent a connected area and at least one of these values shouldn' t be altered. If there are multiple answers, print any of them.",
    "note": "In the first sample non- zero values make up a connected area, their values do not exceed the initial heights of hay stacks. All the non- zero values equal 7, and their number is 5, so the total volume of the remaining hay equals the required value k = 7\u00b75 = 35. At that the stack that is on the second line and third row remained unaltered.",
    "topics": [
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Qualifying Contest",
    "url": "https://codeforces.com/problemset/problem/659/B",
    "history": "Very soon Berland will hold a School Team Programming Olympiad. From each of the m Berland regions a team of two people is invited to participate in the olympiad. The qualifying contest to form teams was held and it was attended by n Berland students. There were at least two schoolboys participating from each of the m regions of Berland. The result of each of the participants of the qualifying competition is an integer score from 0 to 800 inclusive. The team of each region is formed from two such members of the qualifying competition of the region, that none of them can be replaced by a schoolboy of the same region, not included in the team and who received a greater number of points. There may be a situation where a team of some region can not be formed uniquely, that is, there is more than one school team that meets the properties described above. In this case, the region needs to undertake an additional contest. The two teams in the region are considered to be different if there is at least one schoolboy who is included in one team and is not included in the other team. It is guaranteed that for each region at least two its representatives participated in the qualifying contest. Your task is, given the results of the qualifying competition, to identify the team from each region, or to announce that in this region its formation requires additional contests.",
    "input": "The first line of the input contains two integers n and m ( 2 \u2264 n \u2264 100 000, 1 \u2264 m \u2264 10 000, n \u2265 2m) \u2014 the number of participants of the qualifying contest and the number of regions in Berland. Next n lines contain the description of the participants of the qualifying contest in the following format: Surname ( a string of length from 1 to 10 characters and consisting of large and small English letters) , region number ( integer from 1 to m) and the number of points scored by the participant ( integer from 0 to 800, inclusive) . It is guaranteed that all surnames of all the participants are distinct and at least two people participated from each of the m regions. The surnames that only differ in letter cases, should be considered distinct.",
    "output": "Print m lines. On the i- th line print the team of the i- th region \u2014 the surnames of the two team members in an arbitrary order, or a single character \" ? \" ( without the quotes) if you need to spend further qualifying contests in the region.",
    "note": "In the first sample region teams are uniquely determined. In the second sample the team from region 2 is uniquely determined and the team from region 1 can have three teams: \" Petrov\" - \" Sidorov\" , \" Ivanov\" - \" Sidorov\" , \" Ivanov\" - \" Petrov\" , so it is impossible to determine a team uniquely.",
    "topics": [
      "constructive algorithms",
      "sortings"
    ]
  },
  {
    "title": "Bear and Three Balls",
    "url": "https://codeforces.com/problemset/problem/653/A",
    "history": "Limak is a little polar bear. He has n balls, the i- th ball has size ti. Limak wants to give one ball to each of his three friends. Giving gifts isn' t easy \u2014 there are two rules Limak must obey to make friends happy: No two friends can get balls of the same size. No two friends can get balls of sizes that differ by more than 2. For example, Limak can choose balls with sizes 4, 5 and 3, or balls with sizes 90, 91 and 92. But he can' t choose balls with sizes 5, 5 and 6 ( two friends would get balls of the same size) , and he can' t choose balls with sizes 30, 31 and 33 ( because sizes 30 and 33 differ by more than 2) . Your task is to check whether Limak can choose three balls that satisfy conditions above.",
    "input": "The first line of the input contains one integer n ( 3 \u2264 n \u2264 50) \u2014 the number of balls Limak has. The second line contains n integers t1, t2, . . . , tn ( 1 \u2264 ti \u2264 1000) where ti denotes the size of the i- th ball.",
    "output": "Print \" YES\" ( without quotes) if Limak can choose three balls of distinct sizes, such that any two of them differ by no more than 2. Otherwise, print \" NO\" ( without quotes) .",
    "note": "In the first sample, there are 4 balls and Limak is able to choose three of them to satisfy the rules. He must must choose balls with sizes 18, 16 and 17. In the second sample, there is no way to give gifts to three friends without breaking the rules. In the third sample, there is even more than one way to choose balls: Choose balls with sizes 3, 4 and 5. Choose balls with sizes 972, 970, 971.",
    "topics": [
      "brute force",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Nested Segments",
    "url": "https://codeforces.com/problemset/problem/652/D",
    "history": "You are given n segments on a line. There are no ends of some segments that coincide. For each segment find the number of segments it contains.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2\u00b7105) \u2014 the number of segments on a line. Each of the next n lines contains two integers li and ri ( - 109 \u2264 li < ri \u2264 109) \u2014 the coordinates of the left and the right ends of the i- th segment. It is guaranteed that there are no ends of some segments that coincide.",
    "output": "Print n lines. The j- th of them should contain the only integer aj \u2014 the number of segments contained in the j- th segment.",
    "note": " ",
    "topics": [
      "data structures",
      "sortings"
    ]
  },
  {
    "title": "Foe Pairs",
    "url": "https://codeforces.com/problemset/problem/652/C",
    "history": "You are given a permutation p of length n. Also you are given m foe pairs ( ai, bi) ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi) . Your task is to count the number of different intervals ( x, y) ( 1 \u2264 x \u2264 y \u2264 n) that do not contain any foe pairs. So you shouldn' t count intervals ( x, y) that contain at least one foe pair in it ( the positions and order of the values from the foe pair are not important) . Consider some example: p = [ 1, 3, 2, 4] and foe pairs are ( 3, 2) , ( 4, 2) . The interval ( 1, 3) is incorrect because it contains a foe pair ( 3, 2) . The interval ( 1, 4) is also incorrect because it contains two foe pairs ( 3, 2) and ( 4, 2) . But the interval ( 1, 2) is correct because it doesn' t contain any foe pair.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 3\u00b7105) \u2014 the length of the permutation p and the number of foe pairs. The second line contains n distinct integers pi ( 1 \u2264 pi \u2264 n) \u2014 the elements of the permutation p. Each of the next m lines contains two integers ( ai, bi) ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi) \u2014 the i- th foe pair. Note a foe pair can appear multiple times in the given list.",
    "output": "Print the only integer c \u2014 the number of different intervals ( x, y) that does not contain any foe pairs. Note that the answer can be too large, so you should use 64- bit integer type to store it. In C+ + you can use the long long integer type and in Java you can use long integer type.",
    "note": "In the first example the intervals from the answer are ( 1, 1) , ( 1, 2) , ( 2, 2) , ( 3, 3) and ( 4, 4) .",
    "topics": [
      "combinatorics",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "z-sort",
    "url": "https://codeforces.com/problemset/problem/652/B",
    "history": "A student of z- school found a kind of sorting called z- sort. The array a with n elements are z- sorted if two conditions hold: ai \u2265 ai - 1 for all even i, ai \u2264 ai - 1 for all odd i > 1. For example the arrays [ 1, 2, 1, 2] and [ 1, 1, 1, 1] are z- sorted while the array [ 1, 2, 3, 4] isn\u2019t z- sorted. Can you make the array z- sorted?",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 1000) \u2014 the number of elements in the array a. The second line contains n integers ai ( 1 \u2264 ai \u2264 109) \u2014 the elements of the array a.",
    "output": "If it' s possible to make the array a z- sorted print n space separated integers ai \u2014 the elements after z- sort. Otherwise print the only word \" Impossible\" .",
    "note": " ",
    "topics": [
      "sortings"
    ]
  },
  {
    "title": "Beautiful Paintings",
    "url": "https://codeforces.com/problemset/problem/651/B",
    "history": "There are n pictures delivered for the new exhibition. The i- th painting has beauty ai. We know that a visitor becomes happy every time he passes from a painting to a more beautiful one. We are allowed to arranged pictures in any order. What is the maximum possible number of times the visitor may become happy while passing all pictures from first to last? In other words, we are allowed to rearrange elements of a in any order. What is the maximum possible number of indices i ( 1 \u2264 i \u2264 n - 1) , such that ai + 1 > ai.",
    "input": "The first line of the input contains integer n ( 1 \u2264 n \u2264 1000) \u2014 the number of painting. The second line contains the sequence a1, a2, . . . , an ( 1 \u2264 ai \u2264 1000) , where ai means the beauty of the i- th painting.",
    "output": "Print one integer \u2014 the maximum possible number of neighbouring pairs, such that ai + 1 > ai, after the optimal rearrangement.",
    "note": "In the first sample, the optimal order is: 10, 20, 30, 40, 50. In the second sample, the optimal order is: 100, 200, 100, 200.",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Hostname Aliases",
    "url": "https://codeforces.com/problemset/problem/644/C",
    "history": "There are some websites that are accessible through several different addresses. For example, for a long time Codeforces was accessible with two hostnames codeforces. com and codeforces. ru. You are given a list of page addresses being queried. For simplicity we consider all addresses to have the form http: / / < hostname> [ / < path> ] , where: < hostname> \u2014 server name ( consists of words and maybe some dots separating them) , / < path> \u2014 optional part, where < path> consists of words separated by slashes. We consider two < hostname> to correspond to one website if for each query to the first < hostname> there will be exactly the same query to the second one and vice versa \u2014 for each query to the second < hostname> there will be the same query to the first one. Take a look at the samples for further clarifications. Your goal is to determine the groups of server names that correspond to one website. Ignore groups consisting of the only server name. Please note, that according to the above definition queries http: / / < hostname> and http: / / < hostname> / are different.",
    "input": "The first line of the input contains a single integer n ( 1 \u2264 n \u2264 100 000) \u2014 the number of page queries. Then follow n lines each containing exactly one address. Each address is of the form http: / / < hostname> [ / < path> ] , where: < hostname> consists of lowercase English letters and dots, there are no two consecutive dots, < hostname> doesn' t start or finish with a dot. The length of < hostname> is positive and doesn' t exceed 20. < path> consists of lowercase English letters, dots and slashes. There are no two consecutive slashes, < path> doesn' t start with a slash and its length doesn' t exceed 20. Addresses are not guaranteed to be distinct.",
    "output": "First print k \u2014 the number of groups of server names that correspond to one website. You should count only groups of size greater than one. Next k lines should contain the description of groups, one group per line. For each group print all server names separated by a single space. You are allowed to print both groups and names inside any group in arbitrary order.",
    "note": " ",
    "topics": [
      "*special",
      "binary search",
      "data structures",
      "implementation",
      "sortings",
      "strings"
    ]
  },
  {
    "title": "Bear and Paradox",
    "url": "https://codeforces.com/problemset/problem/639/E",
    "history": "Limak is a big polar bear. He prepared n problems for an algorithmic contest. The i- th problem has initial score pi. Also, testers said that it takes ti minutes to solve the i- th problem. Problems aren' t necessarily sorted by difficulty and maybe harder problems have smaller initial score but it' s too late to change it \u2014 Limak has already announced initial scores for problems. Though it' s still possible to adjust the speed of losing points, denoted by c in this statement. Let T denote the total number of minutes needed to solve all problems ( so, T = t1 + t2 + . . . + tn) . The contest will last exactly T minutes. So it' s just enough to solve all problems. Points given for solving a problem decrease linearly. Solving the i- th problem after x minutes gives exactly points, where is some real constant that Limak must choose. Let' s assume that c is fixed. During a contest a participant chooses some order in which he or she solves problems. There are n! possible orders and each of them gives some total number of points, not necessarily integer. We say that an order is optimal if it gives the maximum number of points. In other words, the total number of points given by this order is greater or equal than the number of points given by any other order. It' s obvious that there is at least one optimal order. However, there may be more than one optimal order. Limak assumes that every participant will properly estimate ti at the very beginning and will choose some optimal order. He also assumes that testers correctly predicted time needed to solve each problem. For two distinct problems i and j such that pi < pj Limak wouldn' t be happy to see a participant with strictly more points for problem i than for problem j. He calls such a situation a paradox. It' s not hard to prove that there will be no paradox for c = 0. The situation may be worse for bigger c. What is the maximum real value c ( remember that ) for which there is no paradox possible, that is, there will be no paradox for any optimal order of solving problems? It can be proved that the answer ( the maximum c as described) always exists.",
    "input": "The first line contains one integer n ( 2 \u2264 n \u2264 150 000) \u2014 the number of problems. The second line contains n integers p1, p2, . . . , pn ( 1 \u2264 pi \u2264 108) \u2014 initial scores. The third line contains n integers t1, t2, . . . , tn ( 1 \u2264 ti \u2264 108) where ti is the number of minutes needed to solve the i- th problem.",
    "output": "Print one real value on a single line \u2014 the maximum value of c that and there is no optimal order with a paradox. Your answer will be considered correct if its absolute or relative error does not exceed 10 - 6. Namely: let' s assume that your answer is a, and the answer of the jury is b. The checker program will consider your answer correct if .",
    "note": "In the first sample, there are 3 problems. The first is ( 4, 1) ( initial score is 4 and required time is 1 minute) , the second problem is ( 3, 1) and the third one is ( 10, 8) . The total time is T = 1 + 1 + 8 = 10. Let' s show that there is a paradox for c = 0. 7. Solving problems in order 1, 2, 3 turns out to give the best total score, equal to the sum of: solved 1 minute after the start: solved 2 minutes after the start: solved 10 minutes after the start: So, this order gives 3. 72 + 2. 58 + 3 = 9. 3 points in total and this is the only optimal order ( you can calculate total scores for other 5 possible orders too see that they are lower) . You should check points for problems 1 and 3 to see a paradox. There is 4 < 10 but 3. 72 > 3. It turns out that there is no paradox for c = 0. 625 but there is a paradox for any bigger c. In the second sample, all 24 orders are optimal. In the third sample, even for c = 1 there is no paradox.",
    "topics": [
      "binary search",
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Bear and Contribution",
    "url": "https://codeforces.com/problemset/problem/639/D",
    "history": "Codeforces is a wonderful platform and one its feature shows how much someone contributes to the community. Every registered user has contribution \u2014 an integer number, not necessarily positive. There are n registered users and the i- th of them has contribution ti. Limak is a little polar bear and he' s new into competitive programming. He doesn' t even have an account in Codeforces but he is able to upvote existing blogs and comments. We assume that every registered user has infinitely many blogs and comments. Limak can spend b minutes to read one blog and upvote it. Author' s contribution will be increased by 5. Limak can spend c minutes to read one comment and upvote it. Author' s contribution will be increased by 1. Note that it' s possible that Limak reads blogs faster than comments. Limak likes ties. He thinks it would be awesome to see a tie between at least k registered users. To make it happen he is going to spend some time on reading and upvoting. After that, there should exist an integer value x that at least k registered users have contribution exactly x. How much time does Limak need to achieve his goal?",
    "input": "The first line contains four integers n, k, b and c ( 2 \u2264 k \u2264 n \u2264 200 000, 1 \u2264 b, c \u2264 1000) \u2014 the number of registered users, the required minimum number of users with the same contribution, time needed to read and upvote a blog, and time needed to read and upvote a comment, respectively. The second line contains n integers t1, t2, . . . , tn ( | ti| \u2264 109) where ti denotes contribution of the i- th registered user.",
    "output": "Print the minimum number of minutes Limak will spend to get a tie between at least k registered users.",
    "note": "In the first sample, there are 4 registered users and Limak wants a tie between at least 3 of them. Limak should behave as follows. He spends 100 minutes to read one blog of the 4- th user and increase his contribution from 1 to 6. Then he spends 4\u00b730 = 120 minutes to read four comments of the 2- nd user and increase his contribution from 2 to 6 ( four times it was increaded by 1) . In the given scenario, Limak spends 100 + 4\u00b730 = 220 minutes and after that each of users 2, 3, 4 has contribution 6. In the second sample, Limak needs 30 minutes to read a blog and 100 minutes to read a comment. This time he can get 3 users with contribution equal to 12 by spending 100 + 3\u00b730 = 190 minutes: Spend 2\u00b730 = 60 minutes to read two blogs of the 1- st user to increase his contribution from 2 to 12. Spend 30 + 100 minutes to read one blog and one comment of the 3- rd user. His contribution will change from 6 to 6 + 5 + 1 = 12.",
    "topics": [
      "data structures",
      "greedy",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Chat Order",
    "url": "https://codeforces.com/problemset/problem/637/B",
    "history": "Polycarp is a big lover of killing time in social networks. A page with a chatlist in his favourite network is made so that when a message is sent to some friend, his friend' s chat rises to the very top of the page. The relative order of the other chats doesn' t change. If there was no chat with this friend before, then a new chat is simply inserted to the top of the list. Assuming that the chat list is initially empty, given the sequence of Polycaprus' messages make a list of chats after all of his messages are processed. Assume that no friend wrote any message to Polycarpus.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 200 000) \u2014 the number of Polycarpus' messages. Next n lines enlist the message recipients in the order in which the messages were sent. The name of each participant is a non- empty sequence of lowercase English letters of length at most 10.",
    "output": "Print all the recipients to who Polycarp talked to in the order of chats with them, from top to bottom.",
    "note": "In the first test case Polycarpus first writes to friend by name \" alex\" , and the list looks as follows: alex Then Polycarpus writes to friend by name \" ivan\" and the list looks as follows: ivan alex Polycarpus writes the third message to friend by name \" roman\" and the list looks as follows: roman ivan alex Polycarpus writes the fourth message to friend by name \" ivan\" , to who he has already sent a message, so the list of chats changes as follows: ivan roman alex",
    "topics": [
      "*special",
      "binary search",
      "constructive algorithms",
      "data structures",
      "sortings"
    ]
  },
  {
    "title": "Spy Syndrome 2",
    "url": "https://codeforces.com/problemset/problem/633/C",
    "history": "After observing the results of Spy Syndrome, Yash realised the errors of his ways. He now believes that a super spy such as Siddhant can' t use a cipher as basic and ancient as Caesar cipher. After many weeks of observation of Siddhant\u2019s sentences, Yash determined a new cipher technique. For a given sentence, the cipher is processed as: Convert all letters of the sentence to lowercase. Reverse each of the words of the sentence individually. Remove all the spaces in the sentence. For example, when this cipher is applied to the sentenceKira is childish and he hates losingthe resulting string isariksihsidlihcdnaehsetahgnisolNow Yash is given some ciphered string and a list of words. Help him to find out any original sentence composed using only words from the list. Note, that any of the given words could be used in the sentence multiple times.",
    "input": "The first line of the input contains a single integer n ( 1 \u2264 n \u2264 10 000) \u2014 the length of the ciphered text. The second line consists of n lowercase English letters \u2014 the ciphered text t. The third line contains a single integer m ( 1 \u2264 m \u2264 100 000) \u2014 the number of words which will be considered while deciphering the text. Each of the next m lines contains a non- empty word wi ( | wi| \u2264 1 000) consisting of uppercase and lowercase English letters only. It' s guaranteed that the total length of all words doesn' t exceed 1 000 000.",
    "output": "Print one line \u2014 the original sentence. It is guaranteed that at least one solution exists. If there are multiple solutions, you may output any of those.",
    "note": "In sample case 2 there may be multiple accepted outputs, \" HI there HeLLo\" and \" HI there hello\" you may output any of them.",
    "topics": [
      "data structures",
      "dp",
      "hashing",
      "implementation",
      "sortings",
      "string suffix structures",
      "strings"
    ]
  },
  {
    "title": "The Smallest String Concatenation",
    "url": "https://codeforces.com/problemset/problem/632/C",
    "history": "You' re given a list of n strings a1, a2, . . . , an. You' d like to concatenate them together in some order such that the resulting string would be lexicographically smallest. Given the list of strings, output the lexicographically smallest concatenation.",
    "input": "The first line contains integer n \u2014 the number of strings ( 1 \u2264 n \u2264 5\u00b7104) . Each of the next n lines contains one string ai ( 1 \u2264 | ai| \u2264 50) consisting of only lowercase English letters. The sum of string lengths will not exceed 5\u00b7104.",
    "output": "Print the only string a \u2014 the lexicographically smallest string concatenation.",
    "note": " ",
    "topics": [
      "sortings",
      "strings"
    ]
  },
  {
    "title": "Report",
    "url": "https://codeforces.com/problemset/problem/631/C",
    "history": "Each month Blake gets the report containing main economic indicators of the company \" Blake Technologies\" . There are n commodities produced by the company. For each of them there is exactly one integer in the final report, that denotes corresponding revenue. Before the report gets to Blake, it passes through the hands of m managers. Each of them may reorder the elements in some order. Namely, the i- th manager either sorts first ri numbers in non- descending or non- ascending order and then passes the report to the manager i + 1, or directly to Blake ( if this manager has number i = m) . Employees of the \" Blake Technologies\" are preparing the report right now. You know the initial sequence ai of length n and the description of each manager, that is value ri and his favourite order. You are asked to speed up the process and determine how the final report will look like.",
    "input": "The first line of the input contains two integers n and m ( 1 \u2264 n, m \u2264 200 000) \u2014 the number of commodities in the report and the number of managers, respectively. The second line contains n integers ai ( | ai| \u2264 109) \u2014 the initial report before it gets to the first manager. Then follow m lines with the descriptions of the operations managers are going to perform. The i- th of these lines contains two integers ti and ri ( , 1 \u2264 ri \u2264 n) , meaning that the i- th manager sorts the first ri numbers either in the non- descending ( if ti = 1) or non- ascending ( if ti = 2) order.",
    "output": "Print n integers \u2014 the final report, which will be passed to Blake by manager number m.",
    "note": "In the first sample, the initial report looked like: 1 2 3. After the first manager the first two numbers were transposed: 2 1 3. The report got to Blake in this form. In the second sample the original report was like this: 1 2 4 3. After the first manager the report changed to: 4 2 1 3. After the second manager the report changed to: 2 4 1 3. This report was handed over to Blake.",
    "topics": [
      "data structures",
      "sortings"
    ]
  },
  {
    "title": "Making a String",
    "url": "https://codeforces.com/problemset/problem/624/B",
    "history": "You are given an alphabet consisting of n letters, your task is to make a string of the maximum possible length so that the following conditions are satisfied: the i- th letter occurs in the string no more than ai times; the number of occurrences of each letter in the string must be distinct for all the letters that occurred in the string at least once.",
    "input": "The first line of the input contains a single integer n ( 2 \u2264 n \u2264 26) \u2014 the number of letters in the alphabet. The next line contains n integers ai ( 1 \u2264 ai \u2264 109) \u2014 i- th of these integers gives the limitation on the number of occurrences of the i- th character in the string.",
    "output": "Print a single integer \u2014 the maximum length of the string that meets all the requirements.",
    "note": "For convenience let' s consider an alphabet consisting of three letters: \" a\" , \" b\" , \" c\" . In the first sample, some of the optimal strings are: \" cccaabbccbb\" , \" aabcbcbcbcb\" . In the second sample some of the optimal strings are: \" acc\" , \" cbc\" .",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Ants in Leaves",
    "url": "https://codeforces.com/problemset/problem/622/E",
    "history": "Tree is a connected graph without cycles. A leaf of a tree is any vertex connected with exactly one other vertex. You are given a tree with n vertices and a root in the vertex 1. There is an ant in each leaf of the tree. In one second some ants can simultaneously go to the parent vertex from the vertex they were in. No two ants can be in the same vertex simultaneously except for the root of the tree. Find the minimal time required for all ants to be in the root of the tree. Note that at start the ants are only in the leaves of the tree.",
    "input": "The first line contains integer n ( 2 \u2264 n \u2264 5\u00b7105) \u2014 the number of vertices in the tree. Each of the next n - 1 lines contains two integers xi, yi ( 1 \u2264 xi, yi \u2264 n) \u2014 the ends of the i- th edge. It is guaranteed that you are given the correct undirected tree.",
    "output": "Print the only integer t \u2014 the minimal time required for all ants to be in the root of the tree.",
    "note": " ",
    "topics": [
      "dfs and similar",
      "greedy",
      "sortings",
      "trees"
    ]
  },
  {
    "title": "Kingdom and its Cities",
    "url": "https://codeforces.com/problemset/problem/613/D",
    "history": "Meanwhile, the kingdom of K is getting ready for the marriage of the King' s daughter. However, in order not to lose face in front of the relatives, the King should first finish reforms in his kingdom. As the King can not wait for his daughter' s marriage, reforms must be finished as soon as possible. The kingdom currently consists of n cities. Cities are connected by n - 1 bidirectional road, such that one can get from any city to any other city. As the King had to save a lot, there is only one path between any two cities. What is the point of the reform? The key ministries of the state should be relocated to distinct cities ( we call such cities important) . However, due to the fact that there is a high risk of an attack by barbarians it must be done carefully. The King has made several plans, each of which is described by a set of important cities, and now wonders what is the best plan. Barbarians can capture some of the cities that are not important ( the important ones will have enough protection for sure) , after that the captured city becomes impassable. In particular, an interesting feature of the plan is the minimum number of cities that the barbarians need to capture in order to make all the important cities isolated, that is, from all important cities it would be impossible to reach any other important city. Help the King to calculate this characteristic for each of his plan.",
    "input": "The first line of the input contains integer n ( 1 \u2264 n \u2264 100 000) \u2014 the number of cities in the kingdom. Each of the next n - 1 lines contains two distinct integers ui, vi ( 1 \u2264 ui, vi \u2264 n) \u2014 the indices of the cities connected by the i- th road. It is guaranteed that you can get from any city to any other one moving only along the existing roads. The next line contains a single integer q ( 1 \u2264 q \u2264 100 000) \u2014 the number of King' s plans. Each of the next q lines looks as follows: first goes number ki \u2014 the number of important cities in the King' s plan, ( 1 \u2264 ki \u2264 n) , then follow exactly ki space- separated pairwise distinct numbers from 1 to n \u2014 the numbers of important cities in this plan. The sum of all ki' s does' t exceed 100 000.",
    "output": "For each plan print a single integer \u2014 the minimum number of cities that the barbarians need to capture, or print - 1 if all the barbarians' attempts to isolate important cities will not be effective.",
    "note": "In the first sample, in the first and the third King' s plan barbarians can capture the city 3, and that will be enough. In the second and the fourth plans all their attempts will not be effective. In the second sample the cities to capture are 3 and 5.",
    "topics": [
      "dfs and similar",
      "divide and conquer",
      "dp",
      "graphs",
      "sortings",
      "trees"
    ]
  },
  {
    "title": "Skills",
    "url": "https://codeforces.com/problemset/problem/613/B",
    "history": "Lesha plays the recently published new version of the legendary game hacknet. In this version character skill mechanism was introduced. Now, each player character has exactly n skills. Each skill is represented by a non- negative integer ai \u2014 the current skill level. All skills have the same maximum level A. Along with the skills, global ranking of all players was added. Players are ranked according to the so- called Force. The Force of a player is the sum of the following values: The number of skills that a character has perfected ( i. e. , such that ai = A) , multiplied by coefficient cf. The minimum skill level among all skills ( min ai) , multiplied by coefficient cm. Now Lesha has m hacknetian currency units, which he is willing to spend. Each currency unit can increase the current level of any skill by 1 ( if it' s not equal to A yet) . Help him spend his money in order to achieve the maximum possible value of the Force.",
    "input": "The first line of the input contains five space- separated integers n, A, cf, cm and m ( 1 \u2264 n \u2264 100 000, 1 \u2264 A \u2264 109, 0 \u2264 cf, cm \u2264 1000, 0 \u2264 m \u2264 1015) . The second line contains exactly n integers ai ( 0 \u2264 ai \u2264 A) , separated by spaces, \u2014 the current levels of skills.",
    "output": "On the first line print the maximum value of the Force that the character can achieve using no more than m currency units. On the second line print n integers a' i ( ai \u2264 a' i \u2264 A) , skill levels which one must achieve in order to reach the specified value of the Force, while using no more than m currency units. Numbers should be separated by spaces.",
    "note": "In the first test the optimal strategy is to increase the second skill to its maximum, and increase the two others by 1. In the second test one should increase all skills to maximum.",
    "topics": [
      "binary search",
      "brute force",
      "dp",
      "greedy",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "The Union of k-Segments",
    "url": "https://codeforces.com/problemset/problem/612/D",
    "history": "You are given n segments on the coordinate axis Ox and the number k. The point is satisfied if it belongs to at least k segments. Find the smallest ( by the number of segments) set of segments on the coordinate axis Ox which contains all satisfied points and no others.",
    "input": "The first line contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 106) \u2014 the number of segments and the value of k. The next n lines contain two integers li, ri ( - 109 \u2264 li \u2264 ri \u2264 109) each \u2014 the endpoints of the i- th segment. The segments can degenerate and intersect each other. The segments are given in arbitrary order.",
    "output": "First line contains integer m \u2014 the smallest number of segments. Next m lines contain two integers aj, bj ( aj \u2264 bj) \u2014 the ends of j- th segment in the answer. The segments should be listed in the order from left to right.",
    "note": " ",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "New Year and Three Musketeers",
    "url": "https://codeforces.com/problemset/problem/611/E",
    "history": "Do you know the story about the three musketeers? Anyway, you must help them now. Richelimakieu is a cardinal in the city of Bearis. He found three brave warriors and called them the three musketeers. Athos has strength a, Borthos strength b, and Caramis has strength c. The year 2015 is almost over and there are still n criminals to be defeated. The i- th criminal has strength ti. It' s hard to defeat strong criminals \u2014 maybe musketeers will have to fight together to achieve it. Richelimakieu will coordinate musketeers' actions. In each hour each musketeer can either do nothing or be assigned to one criminal. Two or three musketeers can be assigned to the same criminal and then their strengths are summed up. A criminal can be defeated in exactly one hour ( also if two or three musketeers fight him) . Richelimakieu can' t allow the situation where a criminal has strength bigger than the sum of strengths of musketeers fighting him \u2014 a criminal would win then! In other words, there are three ways to defeat a criminal. A musketeer of the strength x in one hour can defeat a criminal of the strength not greater than x. So, for example Athos in one hour can defeat criminal i only if ti \u2264 a. Two musketeers can fight together and in one hour defeat a criminal of the strength not greater than the sum of strengths of these two musketeers. So, for example Athos and Caramis in one hour can defeat criminal i only if ti \u2264 a + c. Note that the third remaining musketeer can either do nothing or fight some other criminal. Similarly, all three musketeers can fight together and in one hour defeat a criminal of the strength not greater than the sum of musketeers' strengths, i. e. ti \u2264 a + b + c. Richelimakieu doesn' t want musketeers to fight during the New Year' s Eve. Thus, he must coordinate their actions in order to minimize the number of hours till all criminals will be defeated. Find the minimum number of hours to defeat all criminals. If musketeers can' t defeat them all then print \" - 1\" ( without the quotes) instead.",
    "input": "The first line of the input contains a single integer n ( 1 \u2264 n \u2264 200 000) \u2014 the number of criminals. The second line contains three integers a, b and c ( 1 \u2264 a, b, c \u2264 108) \u2014 strengths of musketeers. The third line contains n integers t1, t2, . . . , tn ( 1 \u2264 ti \u2264 108) \u2014 strengths of criminals.",
    "output": "Print one line with the answer. If it' s impossible to defeat all criminals, print \" - 1\" ( without the quotes) . Otherwise, print the minimum number of hours the three musketeers will spend on defeating all criminals.",
    "note": "In the first sample Athos has strength 10, Borthos 20, and Caramis 30. They can defeat all criminals in two hours: Borthos and Caramis should together fight a criminal with strength 50. In the same hour Athos can fight one of four criminals with strength 1. There are three criminals left, each with strength 1. Each musketeer can fight one criminal in the second hour. In the second sample all three musketeers must together fight a criminal with strength 51. It takes one hour. In the second hour they can fight separately, each with one criminal. In the third hour one criminal is left and any of musketeers can fight him.",
    "topics": [
      "data structures",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "\u0424\u043b\u0435\u0448-\u043a\u0430\u0440\u0442\u044b",
    "url": "https://codeforces.com/problemset/problem/609/A",
    "history": "Sean is trying to save a large file to a USB flash drive. He has n USB flash drives with capacities equal to a1, a2, . . . , an megabytes. The file size is equal to m megabytes. Find the minimum number of USB flash drives needed to write Sean' s file, if he can split the file between drives.",
    "input": "The first line contains positive integer n ( 1 \u2264 n \u2264 100) \u2014 the number of USB flash drives. The second line contains positive integer m ( 1 \u2264 m \u2264 105) \u2014 the size of Sean' s file. Each of the next n lines contains positive integer ai ( 1 \u2264 ai \u2264 1000) \u2014 the sizes of USB flash drives in megabytes. It is guaranteed that the answer exists, i. e. the sum of all ai is not less than m.",
    "output": "Print the minimum number of USB flash drives to write Sean' s file, if he can split the file between drives.",
    "note": "In the first example Sean needs only two USB flash drives \u2014 the first and the third. In the second example Sean needs all three USB flash drives. In the third example Sean needs only one USB flash drive and he can use any available USB flash drive \u2014 the first or the second.",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Queries about less or equal elements",
    "url": "https://codeforces.com/problemset/problem/600/B",
    "history": "You are given two arrays of integers a and b. For each element of the second array bj you should find the number of elements in array a that are less than or equal to the value bj.",
    "input": "The first line contains two integers n, m ( 1 \u2264 n, m \u2264 2\u00b7105) \u2014 the sizes of arrays a and b. The second line contains n integers \u2014 the elements of array a ( - 109 \u2264 ai \u2264 109) . The third line contains m integers \u2014 the elements of array b ( - 109 \u2264 bj \u2264 109) .",
    "output": "Print m integers, separated by spaces: the j- th of which is equal to the number of such elements in array a that are less than or equal to the value bj.",
    "note": " ",
    "topics": [
      "binary search",
      "data structures",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Day at the Beach",
    "url": "https://codeforces.com/problemset/problem/599/C",
    "history": "One day Squidward, Spongebob and Patrick decided to go to the beach. Unfortunately, the weather was bad, so the friends were unable to ride waves. However, they decided to spent their time building sand castles. At the end of the day there were n castles built by friends. Castles are numbered from 1 to n, and the height of the i- th castle is equal to hi. When friends were about to leave, Squidward noticed, that castles are not ordered by their height, and this looks ugly. Now friends are going to reorder the castles in a way to obtain that condition hi \u2264 hi + 1 holds for all i from 1 to n - 1. Squidward suggested the following process of sorting castles: Castles are split into blocks \u2014 groups of consecutive castles. Therefore the block from i to j will include castles i, i + 1, . . . , j. A block may consist of a single castle. The partitioning is chosen in such a way that every castle is a part of exactly one block. Each block is sorted independently from other blocks, that is the sequence hi, hi + 1, . . . , hj becomes sorted. The partitioning should satisfy the condition that after each block is sorted, the sequence hi becomes sorted too. This may always be achieved by saying that the whole sequence is a single block. Even Patrick understands that increasing the number of blocks in partitioning will ease the sorting process. Now friends ask you to count the maximum possible number of blocks in a partitioning that satisfies all the above requirements.",
    "input": "The first line of the input contains a single integer n ( 1 \u2264 n \u2264 100 000) \u2014 the number of castles Spongebob, Patrick and Squidward made from sand during the day. The next line contains n integers hi ( 1 \u2264 hi \u2264 109) . The i- th of these integers corresponds to the height of the i- th castle.",
    "output": "Print the maximum possible number of blocks in a valid partitioning.",
    "note": "In the first sample the partitioning looks like that: [ 1] [ 2] [ 3] . In the second sample the partitioning is: [ 2, 1] [ 3, 2]",
    "topics": [
      "sortings"
    ]
  },
  {
    "title": "Nearest vectors",
    "url": "https://codeforces.com/problemset/problem/598/C",
    "history": "You are given the set of vectors on the plane, each of them starting at the origin. Your task is to find a pair of vectors with the minimal non- oriented angle between them. Non- oriented angle is non- negative value, minimal between clockwise and counterclockwise direction angles. Non- oriented angle is always between 0 and \u03c0. For example, opposite directions vectors have angle equals to \u03c0.",
    "input": "First line of the input contains a single integer n ( 2 \u2264 n \u2264 100 000) \u2014 the number of vectors. The i- th of the following n lines contains two integers xi and yi ( | x| , | y| \u2264 10 000, x2 + y2 > 0) \u2014 the coordinates of the i- th vector. Vectors are numbered from 1 to n in order of appearing in the input. It is guaranteed that no two vectors in the input share the same direction ( but they still can have opposite directions) .",
    "output": "Print two integer numbers a and b ( a = \u0338 b) \u2014 a pair of indices of vectors with the minimal non- oriented angle. You can print the numbers in any order. If there are many possible answers, print any.",
    "note": " ",
    "topics": [
      "geometry",
      "sortings"
    ]
  },
  {
    "title": "Restaurant",
    "url": "https://codeforces.com/problemset/problem/597/B",
    "history": "A restaurant received n orders for the rental. Each rental order reserve the restaurant for a continuous period of time, the i- th order is characterized by two time values \u2014 the start time li and the finish time ri ( li \u2264 ri) . Restaurant management can accept and reject orders. What is the maximal number of orders the restaurant can accept? No two accepted orders can intersect, i. e. they can' t share even a moment of time. If one order ends in the moment other starts, they can' t be accepted both.",
    "input": "The first line contains integer number n ( 1 \u2264 n \u2264 5\u00b7105) \u2014 number of orders. The following n lines contain integer values li and ri each ( 1 \u2264 li \u2264 ri \u2264 109) .",
    "output": "Print the maximal number of orders that can be accepted.",
    "note": " ",
    "topics": [
      "dp",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Wilbur and Trees",
    "url": "https://codeforces.com/problemset/problem/596/D",
    "history": "Wilbur the pig really wants to be a beaver, so he decided today to pretend he is a beaver and bite at trees to cut them down. There are n trees located at various positions on a line. Tree i is located at position xi. All the given positions of the trees are distinct. The trees are equal, i. e. each tree has height h. Due to the wind, when a tree is cut down, it either falls left with probability p, or falls right with probability 1 - p. If a tree hits another tree while falling, that tree will fall in the same direction as the tree that hit it. A tree can hit another tree only if the distance between them is strictly less than h. For example, imagine there are 4 trees located at positions 1, 3, 5 and 8, while h = 3 and the tree at position 1 falls right. It hits the tree at position 3 and it starts to fall too. In it' s turn it hits the tree at position 5 and it also starts to fall. The distance between 8 and 5 is exactly 3, so the tree at position 8 will not fall. As long as there are still trees standing, Wilbur will select either the leftmost standing tree with probability 0. 5 or the rightmost standing tree with probability 0. 5. Selected tree is then cut down. If there is only one tree remaining, Wilbur always selects it. As the ground is covered with grass, Wilbur wants to know the expected total length of the ground covered with fallen trees after he cuts them all down because he is concerned about his grass- eating cow friends. Please help Wilbur.",
    "input": "The first line of the input contains two integers, n ( 1 \u2264 n \u2264 2000) and h ( 1 \u2264 h \u2264 108) and a real number p ( 0 \u2264 p \u2264 1) , given with no more than six decimal places. The second line of the input contains n integers, x1, x2, . . . , xn ( - 108 \u2264 xi \u2264 108) in no particular order.",
    "output": "Print a single real number \u2014 the expected total length of the ground covered by trees when they have all fallen down. Your answer will be considered correct if its absolute or relative error does not exceed 10 - 6. Namely: let' s assume that your answer is a, and the answer of the jury is b. The checker program will consider your answer correct, if .",
    "note": "Consider the first example, we have 2 trees with height 2. There are 3 scenarios: 1. Both trees falls left. This can either happen with the right tree falling left first, which has probability ( also knocking down the left tree) , or the left tree can fall left and then the right tree can fall left, which has probability. Total probability is . 2. Both trees fall right. This is analogous to ( 1) , so the probability of this happening is . 3. The left tree fall left and the right tree falls right. This is the only remaining scenario so it must have probability. Cases 1 and 2 lead to a total of 3 units of ground covered, while case 3 leads to a total of 4 units of ground covered. Thus, the expected value is .",
    "topics": [
      "dp",
      "math",
      "probabilities",
      "sortings"
    ]
  },
  {
    "title": "Wilbur and Points",
    "url": "https://codeforces.com/problemset/problem/596/C",
    "history": "Wilbur is playing with a set of n points on the coordinate plane. All points have non- negative integer coordinates. Moreover, if some point ( x, y) belongs to the set, then all points ( x' , y' ) , such that 0 \u2264 x' \u2264 x and 0 \u2264 y' \u2264 y also belong to this set. Now Wilbur wants to number the points in the set he has, that is assign them distinct integer numbers from 1 to n. In order to make the numbering aesthetically pleasing, Wilbur imposes the condition that if some point ( x, y) gets number i, then all ( x' , y' ) from the set, such that x' \u2265 x and y' \u2265 y must be assigned a number not less than i. For example, for a set of four points ( 0, 0) , ( 0, 1) , ( 1, 0) and ( 1, 1) , there are two aesthetically pleasing numberings. One is 1, 2, 3, 4 and another one is 1, 3, 2, 4. Wilbur' s friend comes along and challenges Wilbur. For any point he defines it' s special value as s( x, y) = y - x. Now he gives Wilbur some w1, w2, . . . , wn, and asks him to find an aesthetically pleasing numbering of the points in the set, such that the point that gets number i has it' s special value equal to wi, that is s( xi, yi) = yi - xi = wi. Now Wilbur asks you to help him with this challenge.",
    "input": "The first line of the input consists of a single integer n ( 1 \u2264 n \u2264 100 000) \u2014 the number of points in the set Wilbur is playing with. Next follow n lines with points descriptions. Each line contains two integers x and y ( 0 \u2264 x, y \u2264 100 000) , that give one point in Wilbur' s set. It' s guaranteed that all points are distinct. Also, it is guaranteed that if some point ( x, y) is present in the input, then all points ( x' , y' ) , such that 0 \u2264 x' \u2264 x and 0 \u2264 y' \u2264 y, are also present in the input. The last line of the input contains n integers. The i- th of them is wi ( - 100 000 \u2264 wi \u2264 100 000) \u2014 the required special value of the point that gets number i in any aesthetically pleasing numbering.",
    "output": "If there exists an aesthetically pleasant numbering of points in the set, such that s( xi, yi) = yi - xi = wi, then print \" YES\" on the first line of the output. Otherwise, print \" NO\" . If a solution exists, proceed output with n lines. On the i- th of these lines print the point of the set that gets number i. If there are multiple solutions, print any of them.",
    "note": "In the first sample, point ( 2, 0) gets number 3, point ( 0, 0) gets number one, point ( 1, 0) gets number 2, point ( 1, 1) gets number 5 and point ( 0, 1) gets number 4. One can easily check that this numbering is aesthetically pleasing and yi - xi = wi. In the second sample, the special values of the points in the set are 0, - 1, and - 2 while the sequence that the friend gives to Wilbur is 0, 1, 2. Therefore, the answer does not exist.",
    "topics": [
      "combinatorics",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Anton and Lines",
    "url": "https://codeforces.com/problemset/problem/593/B",
    "history": " ",
    "input": " ",
    "output": " ",
    "note": " ",
    "topics": [
      "geometry",
      "sortings"
    ]
  },
  {
    "title": "Developing Skills",
    "url": "https://codeforces.com/problemset/problem/581/C",
    "history": "Petya loves computer games. Finally a game that he' s been waiting for so long came out! The main character of this game has n different skills, each of which is characterized by an integer ai from 0 to 100. The higher the number ai is, the higher is the i- th skill of the character. The total rating of the character is calculated as the sum of the values \u200b\u200bof for all i from 1 to n. The expression \u230a x\u230b denotes the result of rounding the number x down to the nearest integer. At the beginning of the game Petya got k improvement units as a bonus that he can use to increase the skills of his character and his total rating. One improvement unit can increase any skill of Petya' s character by exactly one. For example, if a4 = 46, after using one imporvement unit to this skill, it becomes equal to 47. A hero' s skill cannot rise higher more than 100. Thus, it is permissible that some of the units will remain unused. Your task is to determine the optimal way of using the improvement units so as to maximize the overall rating of the character. It is not necessary to use all the improvement units.",
    "input": "The first line of the input contains two positive integers n and k ( 1 \u2264 n \u2264 105, 0 \u2264 k \u2264 107) \u2014 the number of skills of the character and the number of units of improvements at Petya' s disposal. The second line of the input contains a sequence of n integers ai ( 0 \u2264 ai \u2264 100) , where ai characterizes the level of the i- th skill of the character.",
    "output": "The first line of the output should contain a single non- negative integer \u2014 the maximum total rating of the character that Petya can get using k or less improvement units.",
    "note": "In the first test case the optimal strategy is as follows. Petya has to improve the first skill to 10 by spending 3 improvement units, and the second skill to 10, by spending one improvement unit. Thus, Petya spends all his improvement units and the total rating of the character becomes equal to lfloor frac10010 rfloor + lfloor frac10010 rfloor = 10 + 10 = 20. In the second test the optimal strategy for Petya is to improve the first skill to 20 ( by spending 3 improvement units) and to improve the third skill to 20 ( in this case by spending 1 improvement units) . Thus, Petya is left with 4 improvement units and he will be able to increase the second skill to 19 ( which does not change the overall rating, so Petya does not necessarily have to do it) . Therefore, the highest possible total rating in this example is . In the third test case the optimal strategy for Petya is to increase the first skill to 100 by spending 1 improvement unit. Thereafter, both skills of the character will be equal to 100, so Petya will not be able to spend the remaining improvement unit. So the answer is equal to .",
    "topics": [
      "implementation",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Kefa and Company",
    "url": "https://codeforces.com/problemset/problem/580/B",
    "history": "Kefa wants to celebrate his first big salary by going to restaurant. However, he needs company. Kefa has n friends, each friend will agree to go to the restaurant if Kefa asks. Each friend is characterized by the amount of money he has and the friendship factor in respect to Kefa. The parrot doesn' t want any friend to feel poor compared to somebody else in the company ( Kefa doesn' t count) . A friend feels poor if in the company there is someone who has at least d units of money more than he does. Also, Kefa wants the total friendship factor of the members of the company to be maximum. Help him invite an optimal company!",
    "input": "The first line of the input contains two space- separated integers, n and d ( 1 \u2264 n \u2264 105, ) \u2014 the number of Kefa' s friends and the minimum difference between the amount of money in order to feel poor, respectively. Next n lines contain the descriptions of Kefa' s friends, the ( i + 1) - th line contains the description of the i- th friend of type mi, si ( 0 \u2264 mi, si \u2264 109) \u2014 the amount of money and the friendship factor, respectively.",
    "output": "Print the maximum total friendship factir that can be reached.",
    "note": "In the first sample test the most profitable strategy is to form a company from only the second friend. At all other variants the total degree of friendship will be worse. In the second sample test we can take all the friends.",
    "topics": [
      "binary search",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Finding Team Member",
    "url": "https://codeforces.com/problemset/problem/579/B",
    "history": "There is a programing contest named SnakeUp, 2n people want to compete for it. In order to attend this contest, people need to form teams of exactly two people. You are given the strength of each possible combination of two people. All the values of the strengths are distinct. Every contestant hopes that he can find a teammate so that their team\u2019s strength is as high as possible. That is, a contestant will form a team with highest strength possible by choosing a teammate from ones who are willing to be a teammate with him/ her. More formally, two people A and B may form a team if each of them is the best possible teammate ( among the contestants that remain unpaired) for the other one. Can you determine who will be each person\u2019s teammate?",
    "input": "There are 2n lines in the input. The first line contains an integer n ( 1 \u2264 n \u2264 400) \u2014 the number of teams to be formed. The i- th line ( i > 1) contains i - 1 numbers ai1, ai2, . . . , ai( i - 1) . Here aij ( 1 \u2264 aij \u2264 106, all aij are distinct) denotes the strength of a team consisting of person i and person j ( people are numbered starting from 1. )",
    "output": "Output a line containing 2n numbers. The i- th number should represent the number of teammate of i- th person.",
    "note": "In the first sample, contestant 1 and 2 will be teammates and so do contestant 3 and 4, so the teammate of contestant 1, 2, 3, 4 will be 2, 1, 4, 3 respectively.",
    "topics": [
      "brute force",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Points on Plane",
    "url": "https://codeforces.com/problemset/problem/576/C",
    "history": "On a plane are n points ( xi, yi) with integer coordinates between 0 and 106. The distance between the two points with numbers a and b is said to be the following value: ( the distance calculated by such formula is called Manhattan distance) . We call a hamiltonian path to be some permutation pi of numbers from 1 to n. We say that the length of this path is value . Find some hamiltonian path with a length of no more than 25 \u00d7 108. Note that you do not have to minimize the path length.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 106) . The i + 1- th line contains the coordinates of the i- th point: xi and yi ( 0 \u2264 xi, yi \u2264 106) . It is guaranteed that no two points coincide.",
    "output": "Print the permutation of numbers pi from 1 to n \u2014 the sought Hamiltonian path. The permutation must meet the inequality . If there are multiple possible answers, print any of them. It is guaranteed that the answer exists.",
    "note": "In the sample test the total distance is: ( | 5 - 3| + | 0 - 4| ) + ( | 3 - 0| + | 4 - 7| ) + ( | 0 - 8| + | 7 - 10| ) + ( | 8 - 9| + | 10 - 12| ) = 2 + 4 + 3 + 3 + 8 + 3 + 1 + 2 = 26",
    "topics": [
      "constructive algorithms",
      "divide and conquer",
      "geometry",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Order Book",
    "url": "https://codeforces.com/problemset/problem/572/B",
    "history": "In this task you need to process a set of stock exchange orders and use them to create order book. An order is an instruction of some participant to buy or sell stocks on stock exchange. The order number i has price pi, direction di \u2014 buy or sell, and integer qi. This means that the participant is ready to buy or sell qi stocks at price pi for one stock. A value qi is also known as a volume of an order. All orders with the same price p and direction d are merged into one aggregated order with price p and direction d. The volume of such order is a sum of volumes of the initial orders. An order book is a list of aggregated orders, the first part of which contains sell orders sorted by price in descending order, the second contains buy orders also sorted by price in descending order. An order book of depth s contains s best aggregated orders for each direction. A buy order is better if it has higher price and a sell order is better if it has lower price. If there are less than s aggregated orders for some direction then all of them will be in the final order book. You are given n stock exhange orders. Your task is to print order book of depth s for these orders.",
    "input": "The input starts with two positive integers n and s ( 1 \u2264 n \u2264 1000, 1 \u2264 s \u2264 50) , the number of orders and the book depth. Next n lines contains a letter di ( either ' B' or ' S' ) , an integer pi ( 0 \u2264 pi \u2264 105) and an integer qi ( 1 \u2264 qi \u2264 104) \u2014 direction, price and volume respectively. The letter ' B' means buy, ' S' means sell. The price of any sell order is higher than the price of any buy order.",
    "output": "Print no more than 2s lines with aggregated orders from order book of depth s. The output format for orders should be the same as in input.",
    "note": "Denote ( x, y) an order with price x and volume y. There are 3 aggregated buy orders ( 10, 3) , ( 20, 4) , ( 25, 10) and two sell orders ( 50, 8) , ( 40, 1) in the sample. You need to print no more than two best orders for each direction, so you shouldn' t print the order ( 10 3) having the worst price among buy orders.",
    "topics": [
      "data structures",
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Arrays",
    "url": "https://codeforces.com/problemset/problem/572/A",
    "history": "You are given two arrays A and B consisting of integers, sorted in non- decreasing order. Check whether it is possible to choose k numbers in array A and choose m numbers in array B so that any number chosen in the first array is strictly less than any number chosen in the second array.",
    "input": "The first line contains two integers nA, nB ( 1 \u2264 nA, nB \u2264 105) , separated by a space \u2014 the sizes of arrays A and B, correspondingly. The second line contains two integers k and m ( 1 \u2264 k \u2264 nA, 1 \u2264 m \u2264 nB) , separated by a space. The third line contains nA numbers a1, a2, . . . anA ( - 109 \u2264 a1 \u2264 a2 \u2264 . . . \u2264 anA \u2264 109) , separated by spaces \u2014 elements of array A. The fourth line contains nB integers b1, b2, . . . bnB ( - 109 \u2264 b1 \u2264 b2 \u2264 . . . \u2264 bnB \u2264 109) , separated by spaces \u2014 elements of array B.",
    "output": "Print \" YES\" ( without the quotes) , if you can choose k numbers in array A and m numbers in array B so that any number chosen in array A was strictly less than any number chosen in array B. Otherwise, print \" NO\" ( without the quotes) .",
    "note": "In the first sample test you can, for example, choose numbers 1 and 2 from array A and number 3 from array B ( 1 < 3 and 2 < 3) . In the second sample test the only way to choose k elements in the first array and m elements in the second one is to choose all numbers in both arrays, but then not all the numbers chosen in A will be less than all the numbers chosen in B: .",
    "topics": [
      "sortings"
    ]
  },
  {
    "title": "Minimization",
    "url": "https://codeforces.com/problemset/problem/571/B",
    "history": "You' ve got array A, consisting of n integers and a positive integer k. Array A is indexed by integers from 1 to n. You need to permute the array elements so that value became minimal possible. In particular, it is allowed not to change order of elements at all.",
    "input": "The first line contains two integers n, k ( 2 \u2264 n \u2264 3\u00b7105, 1 \u2264 k \u2264 min( 5000, n - 1) ) . The second line contains n integers A[ 1] , A[ 2] , . . . , A[ n] ( - 109 \u2264 A[ i] \u2264 109) , separate by spaces \u2014 elements of the array A.",
    "output": "Print the minimum possible value of the sum described in the statement.",
    "note": "In the first test one of the optimal permutations is 1 4 2. In the second test the initial order is optimal. In the third test one of the optimal permutations is 2 3 4 4 3 5.",
    "topics": [
      "dp",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "One-Dimensional Battle Ships",
    "url": "https://codeforces.com/problemset/problem/567/D",
    "history": "Alice and Bob love playing one- dimensional battle ships. They play on the field in the form of a line consisting of n square cells ( that is, on a 1 \u00d7 n table) . At the beginning of the game Alice puts k ships on the field without telling their positions to Bob. Each ship looks as a 1 \u00d7 a rectangle ( that is, it occupies a sequence of a consecutive squares of the field) . The ships cannot intersect and even touch each other. After that Bob makes a sequence of \" shots\" . He names cells of the field and Alice either says that the cell is empty ( \" miss\" ) , or that the cell belongs to some ship ( \" hit\" ) . But here' s the problem! Alice like to cheat. May be that is why she responds to each Bob' s move with a \" miss\" . Help Bob catch Alice cheating \u2014 find Bob' s first move, such that after it you can be sure that Alice cheated.",
    "input": "The first line of the input contains three integers: n, k and a ( 1 \u2264 n, k, a \u2264 2\u00b7105) \u2014 the size of the field, the number of the ships and the size of each ship. It is guaranteed that the n, k and a are such that you can put k ships of size a on the field, so that no two ships intersect or touch each other. The second line contains integer m ( 1 \u2264 m \u2264 n) \u2014 the number of Bob' s moves. The third line contains m distinct integers x1, x2, . . . , xm, where xi is the number of the cell where Bob made the i- th shot. The cells are numbered from left to right from 1 to n.",
    "output": "Print a single integer \u2014 the number of such Bob' s first move, after which you can be sure that Alice lied. Bob' s moves are numbered from 1 to m in the order the were made. If the sought move doesn' t exist, then print \" - 1\" .",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Currency System in Geraldion",
    "url": "https://codeforces.com/problemset/problem/560/A",
    "history": "A magic island Geraldion, where Gerald lives, has its own currency system. It uses banknotes of several values. But the problem is, the system is not perfect and sometimes it happens that Geraldionians cannot express a certain sum of money with any set of banknotes. Of course, they can use any number of banknotes of each value. Such sum is called unfortunate. Gerald wondered: what is the minimum unfortunate sum?",
    "input": "The first line contains number n ( 1 \u2264 n \u2264 1000) \u2014 the number of values of the banknotes that used in Geraldion. The second line contains n distinct space- separated numbers a1, a2, . . . , an ( 1 \u2264 ai \u2264 106) \u2014 the values of the banknotes.",
    "output": "Print a single line \u2014 the minimum unfortunate sum. If there are no unfortunate sums, print - 1.",
    "note": "",
    "topics": [
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Gerald and Path",
    "url": "https://codeforces.com/problemset/problem/559/E",
    "history": "The main walking trail in Geraldion is absolutely straight, and it passes strictly from the north to the south, it is so long that no one has ever reached its ends in either of the two directions. The Geraldionians love to walk on this path at any time, so the mayor of the city asked the Herald to illuminate this path with a few spotlights. The spotlights have already been delivered to certain places and Gerald will not be able to move them. Each spotlight illuminates a specific segment of the path of the given length, one end of the segment is the location of the spotlight, and it can be directed so that it covers the segment to the south or to the north of spotlight. The trail contains a monument to the mayor of the island, and although you can walk in either directions from the monument, no spotlight is south of the monument. You are given the positions of the spotlights and their power. Help Gerald direct all the spotlights so that the total length of the illuminated part of the path is as much as possible.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 100) \u2014 the number of spotlights. Each of the n lines contains two space- separated integers, ai and li ( 0 \u2264 ai \u2264 108, 1 \u2264 li \u2264 108) . Number ai shows how much further the i- th spotlight to the north, and number li shows the length of the segment it illuminates. It is guaranteed that all the ai' s are distinct.",
    "output": "Print a single integer \u2014 the maximum total length of the illuminated part of the path.",
    "note": "",
    "topics": [
      "dp",
      "sortings"
    ]
  },
  {
    "title": "Equivalent Strings",
    "url": "https://codeforces.com/problemset/problem/559/B",
    "history": "Today on a lecture about strings Gerald learned a new definition of string equivalency. Two strings a and b of equal length are called equivalent in one of the two cases: They are equal. If we split string a into two halves of the same size a1 and a2, and string b into two halves of the same size b1 and b2, then one of the following is correct: a1 is equivalent to b1, and a2 is equivalent to b2 a1 is equivalent to b2, and a2 is equivalent to b1 As a home task, the teacher gave two strings to his students and asked to determine if they are equivalent. Gerald has already completed this home task. Now it' s your turn!",
    "input": "The first two lines of the input contain two strings given by the teacher. Each of them has the length from 1 to 200 000 and consists of lowercase English letters. The strings have the same length.",
    "output": "Print \" YES\" ( without the quotes) , if these two strings are equivalent, and \" NO\" ( without the quotes) otherwise.",
    "note": "In the first sample you should split the first string into strings \" aa\" and \" ba\" , the second one \u2014 into strings \" ab\" and \" aa\" . \" aa\" is equivalent to \" aa\" ; \" ab\" is equivalent to \" ba\" as \" ab\" = \" a\" + \" b\" , \" ba\" = \" b\" + \" a\" . In the second sample the first string can be splitted into strings \" aa\" and \" bb\" , that are equivalent only to themselves. That' s why string \" aabb\" is equivalent only to itself and to string \" bbaa\" .",
    "topics": [
      "divide and conquer",
      "hashing",
      "sortings",
      "strings"
    ]
  },
  {
    "title": "A Simple Task",
    "url": "https://codeforces.com/problemset/problem/558/E",
    "history": "This task is very simple. Given a string S of length n and q queries each query is on the format i j k which means sort the substring consisting of the characters from i to j in non- decreasing order if k = 1 or in non- increasing order if k = 0. Output the final string after applying the queries.",
    "input": "The first line will contain two integers n, q ( 1 \u2264 n \u2264 105, 0 \u2264 q \u2264 50 000) , the length of the string and the number of queries respectively. Next line contains a string S itself. It contains only lowercase English letters. Next q lines will contain three integers each i, j, k ( 1 \u2264 i \u2264 j \u2264 n, ) .",
    "output": "Output one line, the string S after applying the queries.",
    "note": "First sample test explanation:",
    "topics": [
      "data structures",
      "sortings",
      "strings"
    ]
  },
  {
    "title": "Guess Your Way Out! II",
    "url": "https://codeforces.com/problemset/problem/558/D",
    "history": "Amr bought a new video game \" Guess Your Way Out! II\" . The goal of the game is to find an exit from the maze that looks like a perfect binary tree of height h. The player is initially standing at the root of the tree and the exit from the tree is located at some leaf node. Let' s index all the nodes of the tree such that The root is number 1 Each internal node i ( i \u2264 2h - 1 - 1) will have a left child with index = 2i and a right child with index = 2i + 1 The level of a node is defined as 1 for a root, or 1 + level of parent of the node otherwise. The vertices of the level h are called leaves. The exit to the maze is located at some leaf node n, the player doesn' t know where the exit is so he has to guess his way out! In the new version of the game the player is allowed to ask questions on the format \" Does the ancestor( exit, i) node number belong to the range [ L, R] ? \" . Here ancestor( v, i) is the ancestor of a node v that located in the level i. The game will answer with \" Yes\" or \" No\" only. The game is designed such that it doesn' t always answer correctly, and sometimes it cheats to confuse the player! . Amr asked a lot of questions and got confused by all these answers, so he asked you to help him. Given the questions and its answers, can you identify whether the game is telling contradictory information or not? If the information is not contradictory and the exit node can be determined uniquely, output its number. If the information is not contradictory, but the exit node isn' t defined uniquely, output that the number of questions is not sufficient. Otherwise output that the information is contradictory.",
    "input": "The first line contains two integers h, q ( 1 \u2264 h \u2264 50, 0 \u2264 q \u2264 105) , the height of the tree and the number of questions respectively. The next q lines will contain four integers each i, L, R, ans ( 1 \u2264 i \u2264 h, 2i - 1 \u2264 L \u2264 R \u2264 2i - 1, ) , representing a question as described in the statement with its answer ( ans = 1 if the answer is \" Yes\" and ans = 0 if the answer is \" No\" ) .",
    "output": "If the information provided by the game is contradictory output \" Game cheated! \" without the quotes. Else if you can uniquely identify the exit to the maze output its index. Otherwise output \" Data not sufficient! \" without the quotes.",
    "note": "Node u is an ancestor of node v if and only if u is the same node as v, u is the parent of node v, or u is an ancestor of the parent of node v. In the first sample test there are 4 leaf nodes 4, 5, 6, 7. The first question says that the node isn' t in the range [ 4, 6] so the exit is node number 7. In the second sample test there are 8 leaf nodes. After the first question the exit is in the range [ 10, 14] . After the second and the third questions only node number 14 is correct. Check the picture below to fully understand.",
    "topics": [
      "data structures",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Lala Land and Apple Trees",
    "url": "https://codeforces.com/problemset/problem/558/A",
    "history": "Amr lives in Lala Land. Lala Land is a very beautiful country that is located on a coordinate line. Lala Land is famous with its apple trees growing everywhere. Lala Land has exactly n apple trees. Tree number i is located in a position xi and has ai apples growing on it. Amr wants to collect apples from the apple trees. Amr currently stands in x = 0 position. At the beginning, he can choose whether to go right or left. He' ll continue in his direction until he meets an apple tree he didn' t visit before. He' ll take all of its apples and then reverse his direction, continue walking in this direction until he meets another apple tree he didn' t visit before and so on. In the other words, Amr reverses his direction when visiting each new apple tree. Amr will stop collecting apples when there are no more trees he didn' t visit in the direction he is facing. What is the maximum number of apples he can collect?",
    "input": "The first line contains one number n ( 1 \u2264 n \u2264 100) , the number of apple trees in Lala Land. The following n lines contains two integers each xi, ai ( - 105 \u2264 xi \u2264 105, xi = \u0338 0, 1 \u2264 ai \u2264 105) , representing the position of the i- th tree and number of apples on it. It' s guaranteed that there is at most one apple tree at each coordinate. It' s guaranteed that no tree grows in point 0.",
    "output": "Output the maximum number of apples Amr can collect.",
    "note": "In the first sample test it doesn' t matter if Amr chose at first to go left or right. In both cases he' ll get all the apples. In the second sample test the optimal solution is to go left to x = - 1, collect apples from there, then the direction will be reversed, Amr has to go to x = 1, collect apples from there, then the direction will be reversed and Amr goes to the final tree x = - 2. In the third sample test the optimal solution is to go right to x = 1, collect apples from there, then the direction will be reversed and Amr will not be able to collect anymore apples because there are no apple trees to his left.",
    "topics": [
      "brute force",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Arthur and Table",
    "url": "https://codeforces.com/problemset/problem/557/C",
    "history": "Arthur has bought a beautiful big table into his new flat. When he came home, Arthur noticed that the new table is unstable. In total the table Arthur bought has n legs, the length of the i- th leg is li. Arthur decided to make the table stable and remove some legs. For each of them Arthur determined number di \u2014 the amount of energy that he spends to remove the i- th leg. A table with k legs is assumed to be stable if there are more than half legs of the maximum length. For example, to make a table with 5 legs stable, you need to make sure it has at least three ( out of these five) legs of the maximum length. Also, a table with one leg is always stable and a table with two legs is stable if and only if they have the same lengths. Your task is to help Arthur and count the minimum number of energy units Arthur should spend on making the table stable.",
    "input": "The first line of the input contains integer n ( 1 \u2264 n \u2264 105) \u2014 the initial number of legs in the table Arthur bought. The second line of the input contains a sequence of n integers li ( 1 \u2264 li \u2264 105) , where li is equal to the length of the i- th leg of the table. The third line of the input contains a sequence of n integers di ( 1 \u2264 di \u2264 200) , where di is the number of energy units that Arthur spends on removing the i- th leg off the table.",
    "output": "Print a single integer \u2014 the minimum number of energy units that Arthur needs to spend in order to make the table stable.",
    "note": "",
    "topics": [
      "brute force",
      "data structures",
      "dp",
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Pasha and Tea",
    "url": "https://codeforces.com/problemset/problem/557/B",
    "history": "Pasha decided to invite his friends to a tea party. For that occasion, he has a large teapot with the capacity of w milliliters and 2n tea cups, each cup is for one of Pasha' s friends. The i- th cup can hold at most ai milliliters of water. It turned out that among Pasha' s friends there are exactly n boys and exactly n girls and all of them are going to come to the tea party. To please everyone, Pasha decided to pour the water for the tea as follows: Pasha can boil the teapot exactly once by pouring there at most w milliliters of water; Pasha pours the same amount of water to each girl; Pasha pours the same amount of water to each boy; if each girl gets x milliliters of water, then each boy gets 2x milliliters of water. In the other words, each boy should get two times more water than each girl does. Pasha is very kind and polite, so he wants to maximize the total amount of the water that he pours to his friends. Your task is to help him and determine the optimum distribution of cups between Pasha' s friends.",
    "input": "The first line of the input contains two integers, n and w ( 1 \u2264 n \u2264 105, 1 \u2264 w \u2264 109) \u2014 the number of Pasha' s friends that are boys ( equal to the number of Pasha' s friends that are girls) and the capacity of Pasha' s teapot in milliliters. The second line of the input contains the sequence of integers ai ( 1 \u2264 ai \u2264 109, 1 \u2264 i \u2264 2n) \u2014 the capacities of Pasha' s tea cups in milliliters.",
    "output": "Print a single real number \u2014 the maximum total amount of water in milliliters that Pasha can pour to his friends without violating the given conditions. Your answer will be considered correct if its absolute or relative error doesn' t exceed 10 - 6.",
    "note": "Pasha also has candies that he is going to give to girls but that is another task. . .",
    "topics": [
      "constructive algorithms",
      "implementation",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Case of Fugitive",
    "url": "https://codeforces.com/problemset/problem/555/B",
    "history": "Andrewid the Android is a galaxy- famous detective. He is now chasing a criminal hiding on the planet Oxa- 5, the planet almost fully covered with water. The only dry land there is an archipelago of n narrow islands located in a row. For more comfort let' s represent them as non- intersecting segments on a straight line: island i has coordinates [ li, ri] , besides, ri < li + 1 for 1 \u2264 i \u2264 n - 1. To reach the goal, Andrewid needs to place a bridge between each pair of adjacent islands. A bridge of length a can be placed between the i- th and the ( i + 1) - th islads, if there are such coordinates of x and y, that li \u2264 x \u2264 ri, li + 1 \u2264 y \u2264 ri + 1 and y - x = a. The detective was supplied with m bridges, each bridge can be used at most once. Help him determine whether the bridges he got are enough to connect each pair of adjacent islands.",
    "input": "The first line contains integers n ( 2 \u2264 n \u2264 2\u00b7105) and m ( 1 \u2264 m \u2264 2\u00b7105) \u2014 the number of islands and bridges. Next n lines each contain two integers li and ri ( 1 \u2264 li \u2264 ri \u2264 1018) \u2014 the coordinates of the island endpoints. The last line contains m integer numbers a1, a2, . . . , am ( 1 \u2264 ai \u2264 1018) \u2014 the lengths of the bridges that Andrewid got.",
    "output": "If it is impossible to place a bridge between each pair of adjacent islands in the required manner, print on a single line \" No\" ( without the quotes) , otherwise print in the first line \" Yes\" ( without the quotes) , and in the second line print n - 1 numbers b1, b2, . . . , bn - 1, which mean that between islands i and i + 1 there must be used a bridge number bi. If there are multiple correct answers, print any of them. Note that in this problem it is necessary to print \" Yes\" and \" No\" in correct case.",
    "note": "In the first sample test you can, for example, place the second bridge between points 3 and 8, place the third bridge between points 7 and 10 and place the first bridge between points 10 and 14. In the second sample test the first bridge is too short and the second bridge is too long, so the solution doesn' t exist.",
    "topics": [
      "data structures",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Vanya and Triangles",
    "url": "https://codeforces.com/problemset/problem/552/D",
    "history": "Vanya got bored and he painted n distinct points on the plane. After that he connected all the points pairwise and saw that as a result many triangles were formed with vertices in the painted points. He asks you to count the number of the formed triangles with the non- zero area.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 2000) \u2014 the number of the points painted on the plane. Next n lines contain two integers each xi, yi ( - 100 \u2264 xi, yi \u2264 100) \u2014 the coordinates of the i- th point. It is guaranteed that no two given points coincide.",
    "output": "In the first line print an integer \u2014 the number of triangles with the non- zero area among the painted points.",
    "note": "Note to the first sample test. There are 3 triangles formed: ( 0, 0) - ( 1, 1) - ( 2, 0) ; ( 0, 0) - ( 2, 2) - ( 2, 0) ; ( 1, 1) - ( 2, 2) - ( 2, 0) . Note to the second sample test. There is 1 triangle formed: ( 0, 0) - ( 1, 1) - ( 2, 0) . Note to the third sample test. A single point doesn' t form a single triangle.",
    "topics": [
      "brute force",
      "combinatorics",
      "data structures",
      "geometry",
      "math",
      "sortings"
    ]
  },
  {
    "title": "GukiZ and Contest",
    "url": "https://codeforces.com/problemset/problem/551/A",
    "history": "Professor GukiZ likes programming contests. He especially likes to rate his students on the contests he prepares. Now, he has decided to prepare a new contest. In total, n students will attend, and before the start, every one of them has some positive integer rating. Students are indexed from 1 to n. Let' s denote the rating of i- th student as ai. After the contest ends, every student will end up with some positive integer position. GukiZ expects that his students will take places according to their ratings. He thinks that each student will take place equal to . In particular, if student A has rating strictly lower then student B, A will get the strictly better position than B, and if two students have equal ratings, they will share the same position. GukiZ would like you to reconstruct the results by following his expectations. Help him and determine the position after the end of the contest for each of his students if everything goes as expected.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 2000) , number of GukiZ' s students. The second line contains n numbers a1, a2, . . . an ( 1 \u2264 ai \u2264 2000) where ai is the rating of i- th student ( 1 \u2264 i \u2264 n) .",
    "output": "In a single line, print the position after the end of the contest for each of n students in the same order as they appear in the input.",
    "note": "In the first sample, students 2 and 3 are positioned first ( there is no other student with higher rating) , and student 1 is positioned third since there are two students with higher rating. In the second sample, first student is the only one on the contest. In the third sample, students 2 and 5 share the first position with highest rating, student 4 is next with third position, and students 1 and 3 are the last sharing fourth position.",
    "topics": [
      "brute force",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Happy Line",
    "url": "https://codeforces.com/problemset/problem/549/G",
    "history": "Do you like summer? Residents of Berland do. They especially love eating ice cream in the hot summer. So this summer day a large queue of n Berland residents lined up in front of the ice cream stall. We know that each of them has a certain amount of berland dollars with them. The residents of Berland are nice people, so each person agrees to swap places with the person right behind him for just 1 dollar. More formally, if person a stands just behind person b, then person a can pay person b 1 dollar, then a and b get swapped. Of course, if person a has zero dollars, he can not swap places with person b. Residents of Berland are strange people. In particular, they get upset when there is someone with a strictly smaller sum of money in the line in front of them. Can you help the residents of Berland form such order in the line so that they were all happy? A happy resident is the one who stands first in the line or the one in front of who another resident stands with not less number of dollars. Note that the people of Berland are people of honor and they agree to swap places only in the manner described above.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 200 000) \u2014 the number of residents who stand in the line. The second line contains n space- separated integers ai ( 0 \u2264 ai \u2264 109) , where ai is the number of Berland dollars of a man standing on the i- th position in the line. The positions are numbered starting from the end of the line.",
    "output": "If it is impossible to make all the residents happy, print \" : ( \" without the quotes. Otherwise, print in the single line n space- separated integers, the i- th of them must be equal to the number of money of the person on position i in the new line. If there are multiple answers, print any of them.",
    "note": "In the first sample two residents should swap places, after that the first resident has 10 dollars and he is at the head of the line and the second resident will have 9 coins and he will be at the end of the line. In the second sample it is impossible to achieve the desired result. In the third sample the first person can swap with the second one, then they will have the following numbers of dollars: 4 11 3, then the second person ( in the new line) swaps with the third one, and the resulting numbers of dollars will equal to: 4 4 10. In this line everybody will be happy.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Soldier and Badges",
    "url": "https://codeforces.com/problemset/problem/546/B",
    "history": "Colonel has n badges. He wants to give one badge to every of his n soldiers. Each badge has a coolness factor, which shows how much it' s owner reached. Coolness factor can be increased by one for the cost of one coin. For every pair of soldiers one of them should get a badge with strictly higher factor than the second one. Exact values of their factors aren' t important, they just need to have distinct factors. Colonel knows, which soldier is supposed to get which badge initially, but there is a problem. Some of badges may have the same factor of coolness. Help him and calculate how much money has to be paid for making all badges have different factors of coolness.",
    "input": "First line of input consists of one integer n ( 1 \u2264 n \u2264 3000) . Next line consists of n integers ai ( 1 \u2264 ai \u2264 n) , which stand for coolness factor of each badge.",
    "output": "Output single integer \u2014 minimum amount of coins the colonel has to pay.",
    "note": "In first sample test we can increase factor of first badge by 1. In second sample test we can increase factors of the second and the third badge by 1.",
    "topics": [
      "brute force",
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Queue",
    "url": "https://codeforces.com/problemset/problem/545/D",
    "history": "Little girl Susie went shopping with her mom and she wondered how to improve service quality. There are n people in the queue. For each person we know time ti needed to serve him. A person will be disappointed if the time he waits is more than the time needed to serve him. The time a person waits is the total time when all the people who stand in the queue in front of him are served. Susie thought that if we swap some people in the queue, then we can decrease the number of people who are disappointed. Help Susie find out what is the maximum number of not disappointed people can be achieved by swapping people in the queue.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 105) . The next line contains n integers ti ( 1 \u2264 ti \u2264 109) , separated by spaces.",
    "output": "Print a single number \u2014 the maximum number of not disappointed people in the queue.",
    "note": "Value 4 is achieved at such an arrangement, for example: 1, 2, 3, 5, 15. Thus, you can make everything feel not disappointed except for the person with time 5.",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Place Your Ad Here",
    "url": "https://codeforces.com/problemset/problem/542/A",
    "history": "Ivan Anatolyevich' s agency is starting to become famous in the town. They have already ordered and made n TV commercial videos. Each video is made in a special way: the colors and the soundtrack are adjusted to the time of the day and the viewers' mood. That' s why the i- th video can only be shown within the time range of [ li, ri] ( it is not necessary to use the whole segment but the broadcast time should be within this segment) . Now it' s time to choose a TV channel to broadcast the commercial. Overall, there are m TV channels broadcasting in the city, the j- th one has cj viewers, and is ready to sell time [ aj, bj] to broadcast the commercial. Ivan Anatolyevich is facing a hard choice: he has to choose exactly one video i and exactly one TV channel j to broadcast this video and also a time range to broadcast [ x, y] . At that the time range should be chosen so that it is both within range [ li, ri] and within range [ aj, bj] . Let' s define the efficiency of the broadcast as value ( y - x) \u00b7cj \u2014 the total sum of time that all the viewers of the TV channel are going to spend watching the commercial. Help Ivan Anatolyevich choose the broadcast with the maximum efficiency!",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 2\u00b7105) \u2014 the number of commercial videos and channels, respectively. Each of the following n lines contains two integers li, ri ( 0 \u2264 li \u2264 ri \u2264 109) \u2014 the segment of time when it is possible to show the corresponding video. Each of the following m lines contains three integers aj, bj, cj ( 0 \u2264 aj \u2264 bj \u2264 109, 1 \u2264 cj \u2264 109) , characterizing the TV channel.",
    "output": "In the first line print an integer \u2014 the maximum possible efficiency of the broadcast. If there is no correct way to get a strictly positive efficiency, print a zero. If the maximum efficiency is strictly positive, in the second line also print the number of the video i ( 1 \u2264 i \u2264 n) and the number of the TV channel j ( 1 \u2264 j \u2264 m) in the most effective broadcast. If there are multiple optimal answers, you can print any of them.",
    "note": "In the first sample test the most optimal solution is to show the second commercial using the first TV channel at time [ 2, 4] . The efficiency of such solution is equal to ( 4 - 2) \u00b72 = 4. In the second sample test Ivan Anatolievich' s wish does not meet the options of the TV channel, the segments do not intersect, so the answer is zero.",
    "topics": [
      "data structures",
      "sortings"
    ]
  },
  {
    "title": "Infinite Inversions",
    "url": "https://codeforces.com/problemset/problem/540/E",
    "history": "There is an infinite sequence consisting of all positive integers in the increasing order: p = 1, 2, 3, . . . . We performed n swap operations with this sequence. A swap( a, b) is an operation of swapping the elements of the sequence on positions a and b. Your task is to find the number of inversions in the resulting sequence, i. e. the number of such index pairs ( i, j) , that i < j and pi > pj.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 105) \u2014 the number of swap operations applied to the sequence. Each of the next n lines contains two integers ai and bi ( 1 \u2264 ai, bi \u2264 109, ai = \u0338 bi) \u2014 the arguments of the swap operation.",
    "output": "Print a single integer \u2014 the number of inversions in the resulting sequence.",
    "note": "In the first sample the sequence is being modified as follows: . It has 4 inversions formed by index pairs ( 1, 4) , ( 2, 3) , ( 2, 4) and ( 3, 4) .",
    "topics": [
      "binary search",
      "data structures",
      "implementation",
      "sortings",
      "trees"
    ]
  },
  {
    "title": "Berserk Robot ",
    "url": "https://codeforces.com/problemset/problem/538/G",
    "history": "Help! A robot escaped our lab and we need help finding it. The lab is at the point ( 0, 0) of the coordinate plane, at time 0 the robot was there. The robot' s movements are defined by a program \u2014 a string of length l, consisting of characters U, L, D, R. Each second the robot executes the next command in his program: if the current coordinates of the robot are ( x, y) , then commands U, L, D, R move it to cells ( x, y + 1) , ( x - 1, y) , ( x, y - 1) , ( x + 1, y) respectively. The execution of the program started at time 0. The program is looped, i. e. each l seconds of executing the program start again from the first character. Unfortunately, we don' t know what program was loaded into the robot when he left the lab. Our radars managed to find out the position of the robot at n moments of time: we know that at the moment of time ti the robot is at the point ( xi, yi) . Given this data, either help to determine what program could be loaded into the robot, or determine that no possible program meets the data and the robot must have broken down.",
    "input": "The first line of the input contains two space- separated integers n and l ( 1 \u2264 n \u2264 2\u00b7105, 1 \u2264 l \u2264 2\u00b7106) . Next n lines contain three space- separated integers \u2014 ti, xi, yi ( 1 \u2264 ti \u2264 1018, - 1018 \u2264 xi, yi \u2264 1018) . The radar data is given chronologically, i. e. ti < ti + 1 for all i from 1 to n - 1.",
    "output": "Print any of the possible programs that meet the data. If no program meets the data, print a single word ' NO' ( without the quotes) .",
    "note": "",
    "topics": [
      "constructive algorithms",
      "math",
      "sortings"
    ]
  },
  {
    "title": "A Heap of Heaps",
    "url": "https://codeforces.com/problemset/problem/538/F",
    "history": "Andrew skipped lessons on the subject ' Algorithms and Data Structures' for the entire term. When he came to the final test, the teacher decided to give him a difficult task as a punishment. The teacher gave Andrew an array of n numbers a1, . . . , an. After that he asked Andrew for each k from 1 to n - 1 to build a k- ary heap on the array and count the number of elements for which the property of the minimum- rooted heap is violated, i. e. the value of an element is less than the value of its parent. Andrew looked up on the Wikipedia that a k- ary heap is a rooted tree with vertices in elements of the array. If the elements of the array are indexed from 1 to n, then the children of element v are elements with indices k( v - 1) + 2, . . . , kv + 1 ( if some of these elements lie outside the borders of the array, the corresponding children are absent) . In any k- ary heap every element except for the first one has exactly one parent; for the element 1 the parent is absent ( this element is the root of the heap) . Denote p( v) as the number of the parent of the element with the number v. Let' s say that for a non- root element v the property of the heap is violated if av < ap( v) . Help Andrew cope with the task!",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 2\u00b7105) . The second line contains n space- separated integers a1, . . . , an ( - 109 \u2264 ai \u2264 109) .",
    "output": "in a single line print n - 1 integers, separate the consecutive numbers with a single space \u2014 the number of elements for which the property of the k- ary heap is violated, for k = 1, 2, . . . , n - 1.",
    "note": "Pictures with the heaps for the first sample are given below; elements for which the property of the heap is violated are marked with red. In the second sample all elements are equal, so the property holds for all pairs.",
    "topics": [
      "brute force",
      "data structures",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Group Photo 2 (online mirror version)",
    "url": "https://codeforces.com/problemset/problem/529/B",
    "history": "Many years have passed, and n friends met at a party again. Technologies have leaped forward since the last meeting, cameras with timer appeared and now it is not obligatory for one of the friends to stand with a camera, and, thus, being absent on the photo. Simply speaking, the process of photographing can be described as follows. Each friend occupies a rectangle of pixels on the photo: the i- th of them in a standing state occupies a wi pixels wide and a hi pixels high rectangle. But also, each person can lie down for the photo, and then he will occupy a hi pixels wide and a wi pixels high rectangle. The total photo will have size W \u00d7 H, where W is the total width of all the people rectangles, and H is the maximum of the heights. The friends want to determine what minimum area the group photo can they obtain if no more than n / 2 of them can lie on the ground ( it would be strange if more than n / 2 gentlemen lie on the ground together, isn' t it? . . ) Help them to achieve this goal.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 1000) \u2014 the number of friends. The next n lines have two integers wi, hi ( 1 \u2264 wi, hi \u2264 1000) each, representing the size of the rectangle, corresponding to the i- th friend.",
    "output": "Print a single integer equal to the minimum possible area of the photo containing all friends if no more than n / 2 of them can lie on the ground.",
    "note": "",
    "topics": [
      "brute force",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Triangles 3000",
    "url": "https://codeforces.com/problemset/problem/528/E",
    "history": "",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "geometry",
      "sortings"
    ]
  },
  {
    "title": "Clique Problem",
    "url": "https://codeforces.com/problemset/problem/527/D",
    "history": "The clique problem is one of the most well- known NP- complete problems. Under some simplification it can be formulated as follows. Consider an undirected graph G. It is required to find a subset of vertices C of the maximum size such that any two of them are connected by an edge in graph G. Sounds simple, doesn' t it? Nobody yet knows an algorithm that finds a solution to this problem in polynomial time of the size of the graph. However, as with many other NP- complete problems, the clique problem is easier if you consider a specific type of a graph. Consider n distinct points on a line. Let the i- th point have the coordinate xi and weight wi. Let' s form graph G, whose vertices are these points and edges connect exactly the pairs of points ( i, j) , such that the distance between them is not less than the sum of their weights, or more formally: | xi - xj| \u2265 wi + wj. Find the size of the maximum clique in such graph.",
    "input": "The first line contains the integer n ( 1 \u2264 n \u2264 200 000) \u2014 the number of points. Each of the next n lines contains two numbers xi, wi ( 0 \u2264 xi \u2264 109, 1 \u2264 wi \u2264 109) \u2014 the coordinate and the weight of a point. All xi are different.",
    "output": "Print a single number \u2014 the number of vertexes in the maximum clique of the given graph.",
    "note": "If you happen to know how to solve this problem without using the specific properties of the graph formulated in the problem statement, then you are able to get a prize of one million dollars! The picture for the sample test.",
    "topics": [
      "data structures",
      "dp",
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Ilya and Sticks",
    "url": "https://codeforces.com/problemset/problem/525/C",
    "history": "In the evening, after the contest Ilya was bored, and he really felt like maximizing. He remembered that he had a set of n sticks and an instrument. Each stick is characterized by its length li. Ilya decided to make a rectangle from the sticks. And due to his whim, he decided to make rectangles in such a way that maximizes their total area. Each stick is used in making at most one rectangle, it is possible that some of sticks remain unused. Bending sticks is not allowed. Sticks with lengths a1, a2, a3 and a4 can make a rectangle if the following properties are observed: a1 \u2264 a2 \u2264 a3 \u2264 a4 a1 = a2 a3 = a4 A rectangle can be made of sticks with lengths of, for example, 3 3 3 3 or 2 2 4 4. A rectangle cannot be made of, for example, sticks 5 5 5 7. Ilya also has an instrument which can reduce the length of the sticks. The sticks are made of a special material, so the length of each stick can be reduced by at most one. For example, a stick with length 5 can either stay at this length or be transformed into a stick of length 4. You have to answer the question \u2014 what maximum total area of the rectangles can Ilya get with a file if makes rectangles from the available sticks?",
    "input": "The first line of the input contains a positive integer n ( 1 \u2264 n \u2264 105) \u2014 the number of the available sticks. The second line of the input contains n positive integers li ( 2 \u2264 li \u2264 106) \u2014 the lengths of the sticks.",
    "output": "The first line of the output must contain a single non- negative integer \u2014 the maximum total area of the rectangles that Ilya can make from the available sticks.",
    "note": "",
    "topics": [
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Rooks and Rectangles",
    "url": "https://codeforces.com/problemset/problem/524/E",
    "history": "Polycarpus has a chessboard of size n \u00d7 m, where k rooks are placed. Polycarpus hasn' t yet invented the rules of the game he will play. However, he has already allocated q rectangular areas of special strategic importance on the board, they must be protected well. According to Polycarpus, a rectangular area of \u200b\u200bthe board is well protected if all its vacant squares can be beaten by the rooks that stand on this area. The rooks on the rest of the board do not affect the area' s defense. The position of the rooks is fixed and cannot be changed. We remind you that the the rook beats the squares located on the same vertical or horizontal line with it, if there are no other pieces between the square and the rook. Help Polycarpus determine whether all strategically important areas are protected.",
    "input": "The first line contains four integers n, m, k and q ( 1 \u2264 n, m \u2264 100 000, 1 \u2264 k, q \u2264 200 000) \u2014 the sizes of the board, the number of rooks and the number of strategically important sites. We will consider that the cells of the board are numbered by integers from 1 to n horizontally and from 1 to m vertically. Next k lines contain pairs of integers \" x y\" , describing the positions of the rooks ( 1 \u2264 x \u2264 n, 1 \u2264 y \u2264 m) . It is guaranteed that all the rooks are in distinct squares. Next q lines describe the strategically important areas as groups of four integers \" x1 y1 x2 y2\" ( 1 \u2264 x1 \u2264 x2 \u2264 n, 1 \u2264 y1 \u2264 y2 \u2264 m) . The corresponding rectangle area consists of cells ( x, y) , for which x1 \u2264 x \u2264 x2, y1 \u2264 y \u2264 y2. Strategically important areas can intersect of coincide.",
    "output": "Print q lines. For each strategically important site print \" YES\" if it is well defended and \" NO\" otherwise.",
    "note": "Picture to the sample: For the last area the answer is \" NO\" , because cell ( 1, 2) cannot be hit by a rook.",
    "topics": [
      "data structures",
      "sortings"
    ]
  },
  {
    "title": "The Art of Dealing with ATM",
    "url": "https://codeforces.com/problemset/problem/524/C",
    "history": "ATMs of a well- known bank of a small country are arranged so that they can not give any amount of money requested by the user. Due to the limited size of the bill dispenser ( the device that is directly giving money from an ATM) and some peculiarities of the ATM structure, you can get at most k bills from it, and the bills may be of at most two distinct denominations. For example, if a country uses bills with denominations 10, 50, 100, 500, 1000 and 5000 burles, then at k = 20 such ATM can give sums 100 000 burles and 96 000 burles, but it cannot give sums 99 000 and 101 000 burles. Let' s suppose that the country uses bills of n distinct denominations, and the ATM that you are using has an unlimited number of bills of each type. You know that during the day you will need to withdraw a certain amount of cash q times. You know that when the ATM has multiple ways to give money, it chooses the one which requires the minimum number of bills, or displays an error message if it cannot be done. Determine the result of each of the q of requests for cash withdrawal.",
    "input": "The first line contains two integers n, k ( 1 \u2264 n \u2264 5000, 1 \u2264 k \u2264 20) . The next line contains n space- separated integers ai ( 1 \u2264 ai \u2264 107) \u2014 the denominations of the bills that are used in the country. Numbers ai follow in the strictly increasing order. The next line contains integer q ( 1 \u2264 q \u2264 20) \u2014 the number of requests for cash withdrawal that you will make. The next q lines contain numbers xi ( 1 \u2264 xi \u2264 2\u00b7108) \u2014 the sums of money in burles that you are going to withdraw from the ATM.",
    "output": "For each request for cash withdrawal print on a single line the minimum number of bills it can be done, or print - 1, if it is impossible to get the corresponding sum.",
    "note": "",
    "topics": [
      "binary search",
      "sortings"
    ]
  },
  {
    "title": "A and B and Compilation Errors",
    "url": "https://codeforces.com/problemset/problem/519/B",
    "history": "A and B are preparing themselves for programming contests. B loves to debug his code. But before he runs the solution and starts debugging, he has to first compile the code. Initially, the compiler displayed n compilation errors, each of them is represented as a positive integer. After some effort, B managed to fix some mistake and then another one mistake. However, despite the fact that B is sure that he corrected the two errors, he can not understand exactly what compilation errors disappeared \u2014 the compiler of the language which B uses shows errors in the new order every time! B is sure that unlike many other programming languages, compilation errors for his programming language do not depend on each other, that is, if you correct one error, the set of other error does not change. Can you help B find out exactly what two errors he corrected?",
    "input": "The first line of the input contains integer n ( 3 \u2264 n \u2264 105) \u2014 the initial number of compilation errors. The second line contains n space- separated integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) \u2014 the errors the compiler displayed for the first time. The third line contains n - 1 space- separated integers b1, b2, . . . , bn - 1 \u2014 the errors displayed at the second compilation. It is guaranteed that the sequence in the third line contains all numbers of the second string except for exactly one. The fourth line contains n - 2 space- separated integers \u04411, \u04412, . . . , \u0441n - 2 \u2014 the errors displayed at the third compilation. It is guaranteed that the sequence in the fourth line contains all numbers of the third line except for exactly one.",
    "output": "Print two numbers on a single line: the numbers of the compilation errors that disappeared after B made the first and the second correction, respectively.",
    "note": "In the first test sample B first corrects the error number 8, then the error number 123. In the second test sample B first corrects the error number 1, then the error number 3. Note that if there are multiple errors with the same number, B can correct only one of them in one step.",
    "topics": [
      "data structures",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Drazil and Factorial",
    "url": "https://codeforces.com/problemset/problem/515/C",
    "history": "Drazil is playing a math game with Varda. Let' s define for positive integer x as a product of factorials of its digits. For example, . First, they choose a decimal number a consisting of n digits that contains at least one digit larger than 1. This number may possibly start with leading zeroes. Then they should find maximum positive number x satisfying following two conditions: 1. x doesn' t contain neither digit 0 nor digit 1. 2. = . Help friends find such number.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 15) \u2014 the number of digits in a. The second line contains n digits of a. There is at least one digit in a that is larger than 1. Number a may possibly contain leading zeroes.",
    "output": "Output a maximum possible integer satisfying the conditions above. There should be no zeroes and ones in this number decimal representation.",
    "note": "In the first case,",
    "topics": [
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Fox And Names",
    "url": "https://codeforces.com/problemset/problem/510/C",
    "history": "Fox Ciel is going to publish a paper on FOCS ( Foxes Operated Computer Systems, pronounce: \" Fox\" ) . She heard a rumor: the authors list on the paper is always sorted in the lexicographical order. After checking some examples, she found out that sometimes it wasn' t true. On some papers authors' names weren' t sorted in lexicographical order in normal sense. But it was always true that after some modification of the order of letters in alphabet, the order of authors becomes lexicographical! She wants to know, if there exists an order of letters in Latin alphabet such that the names on the paper she is submitting are following in the lexicographical order. If so, you should find out any such order. Lexicographical order is defined in following way. When we compare s and t, first we find the leftmost position with differing characters: si = \u0338 ti. If there is no such position ( i. e. s is a prefix of t or vice versa) the shortest string is less. Otherwise, we compare characters si and ti according to their order in alphabet.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 100) : number of names. Each of the following n lines contain one string namei ( 1 \u2264 | namei| \u2264 100) , the i- th name. Each name contains only lowercase Latin letters. All names are different.",
    "output": "If there exists such order of letters that the given names are sorted lexicographically, output any such order as a permutation of characters ' a' \u2013' z' ( i. e. first output the first letter of the modified alphabet, then the second, and so on) . Otherwise output a single word \" Impossible\" ( without quotes) .",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs",
      "sortings"
    ]
  },
  {
    "title": "Amr and Music",
    "url": "https://codeforces.com/problemset/problem/507/A",
    "history": "Amr is a young coder who likes music a lot. He always wanted to learn how to play music but he was busy coding so he got an idea. Amr has n instruments, it takes ai days to learn i- th instrument. Being busy, Amr dedicated k days to learn how to play the maximum possible number of instruments. Amr asked for your help to distribute his free days between instruments so that he can achieve his goal.",
    "input": "The first line contains two numbers n, k ( 1 \u2264 n \u2264 100, 0 \u2264 k \u2264 10 000) , the number of instruments and number of days respectively. The second line contains n integers ai ( 1 \u2264 ai \u2264 100) , representing number of days required to learn the i- th instrument.",
    "output": "In the first line output one integer m representing the maximum number of instruments Amr can learn. In the second line output m space- separated integers: the indices of instruments to be learnt. You may output indices in any order. if there are multiple optimal solutions output any. It is not necessary to use all days for studying.",
    "note": "In the first test Amr can learn all 4 instruments. In the second test other possible solutions are: 2, 3, 5 or 3, 4, 5. In the third test Amr doesn' t have enough time to learn the only presented instrument.",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Misha and Forest",
    "url": "https://codeforces.com/problemset/problem/501/C",
    "history": "Let' s define a forest as a non- directed acyclic graph ( also without loops and parallel edges) . One day Misha played with the forest consisting of n vertices. For each vertex v from 0 to n - 1 he wrote down two integers, degreev and sv, were the first integer is the number of vertices adjacent to vertex v, and the second integer is the XOR sum of the numbers of vertices adjacent to v ( if there were no adjacent vertices, he wrote down 0) . Next day Misha couldn' t remember what graph he initially had. Misha has values degreev and sv left, though. Help him find the number of edges and the edges of the initial graph. It is guaranteed that there exists a forest that corresponds to the numbers written by Misha.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 216) , the number of vertices in the graph. The i- th of the next lines contains numbers degreei and si ( 0 \u2264 degreei \u2264 n - 1, 0 \u2264 si < 216) , separated by a space.",
    "output": "In the first line print number m, the number of edges of the graph. Next print m lines, each containing two distinct numbers, a and b ( 0 \u2264 a \u2264 n - 1, 0 \u2264 b \u2264 n - 1) , corresponding to edge ( a, b) . Edges can be printed in any order; vertices of the edge can also be printed in any order.",
    "note": "The XOR sum of numbers is the result of bitwise adding numbers modulo 2. This operation exists in many modern programming languages. For example, in languages C+ + , Java and Python it is represented as \" ^ \" , and in Pascal \u2014 as \" xor\" .",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "sortings",
      "trees"
    ]
  },
  {
    "title": "New Year Permutation",
    "url": "https://codeforces.com/problemset/problem/500/B",
    "history": "User ainta has a permutation p1, p2, . . . , pn. As the New Year is coming, he wants to make his permutation as pretty as possible. Permutation a1, a2, . . . , an is prettier than permutation b1, b2, . . . , bn, if and only if there exists an integer k ( 1 \u2264 k \u2264 n) where a1 = b1, a2 = b2, . . . , ak - 1 = bk - 1 and ak < bk all holds. As known, permutation p is so sensitive that it could be only modified by swapping two distinct elements. But swapping two elements is harder than you think. Given an n \u00d7 n binary matrix A, user ainta can swap the values of pi and pj ( 1 \u2264 i, j \u2264 n, i = \u0338 j) if and only if Ai, j = 1. Given the permutation p and the matrix A, user ainta wants to know the prettiest permutation that he can obtain.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 300) \u2014 the size of the permutation p. The second line contains n space- separated integers p1, p2, . . . , pn \u2014 the permutation p that user ainta has. Each integer between 1 and n occurs exactly once in the given permutation. Next n lines describe the matrix A. The i- th line contains n characters ' 0' or ' 1' and describes the i- th row of A. The j- th character of the i- th line Ai, j is the element on the intersection of the i- th row and the j- th column of A. It is guaranteed that, for all integers i, j where 1 \u2264 i < j \u2264 n, Ai, j = Aj, i holds. Also, for all integers i where 1 \u2264 i \u2264 n, Ai, i = 0 holds.",
    "output": "In the first and only line, print n space- separated integers, describing the prettiest permutation that can be obtained.",
    "note": "In the first sample, the swap needed to obtain the prettiest permutation is: ( p1, p7) . In the second sample, the swaps needed to obtain the prettiest permutation is ( p1, p3) , ( p4, p5) , ( p3, p4) . A permutation p is a sequence of integers p1, p2, . . . , pn, consisting of n distinct positive integers, each of them doesn' t exceed n. The i- th element of the permutation p is denoted as pi. The size of the permutation p is denoted as n.",
    "topics": [
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Distributing Parts ",
    "url": "https://codeforces.com/problemset/problem/496/E",
    "history": "You are an assistant director in a new musical play. The play consists of n musical parts, each part must be performed by exactly one actor. After the casting the director chose m actors who can take part in the play. Your task is to assign the parts to actors. However, there are several limitations. First, each actor has a certain voice range and there are some parts that he cannot sing. Formally, there are two integers for each actor, ci and di ( ci \u2264 di) \u2014 the pitch of the lowest and the highest note that the actor can sing. There also are two integers for each part \u2014 aj and bj ( aj \u2264 bj) \u2014 the pitch of the lowest and the highest notes that are present in the part. The i- th actor can perform the j- th part if and only if ci \u2264 aj \u2264 bj \u2264 di, i. e. each note of the part is in the actor' s voice range. According to the contract, the i- th actor can perform at most ki parts. Besides, you are allowed not to give any part to some actors ( then they take part in crowd scenes) . The rehearsal starts in two hours and you need to do the assignment quickly!",
    "input": "The first line contains a single integer n \u2014 the number of parts in the play ( 1 \u2264 n \u2264 105) . Next n lines contain two space- separated integers each, aj and bj \u2014 the range of notes for the j- th part ( 1 \u2264 aj \u2264 bj \u2264 109) . The next line contains a single integer m \u2014 the number of actors ( 1 \u2264 m \u2264 105) . Next m lines contain three space- separated integers each, ci, di and ki \u2014 the range of the i- th actor and the number of parts that he can perform ( 1 \u2264 ci \u2264 di \u2264 109, 1 \u2264 ki \u2264 109) .",
    "output": "If there is an assignment that meets all the criteria aboce, print a single word \" YES\" ( without the quotes) in the first line. In the next line print n space- separated integers. The i- th integer should be the number of the actor who should perform the i- th part. If there are multiple correct assignments, print any of them. If there is no correct assignment, print a single word \" NO\" ( without the quotes) .",
    "note": "",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Vasya and Basketball",
    "url": "https://codeforces.com/problemset/problem/493/C",
    "history": "Vasya follows a basketball game and marks the distances from which each team makes a throw. He knows that each successful throw has value of either 2 or 3 points. A throw is worth 2 points if the distance it was made from doesn' t exceed some value of d meters, and a throw is worth 3 points if the distance is larger than d meters, where d is some non- negative integer. Vasya would like the advantage of the points scored by the first team ( the points of the first team minus the points of the second team) to be maximum. For that he can mentally choose the value of d. Help him to do that.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 2\u00b7105) \u2014 the number of throws of the first team. Then follow n integer numbers \u2014 the distances of throws ai ( 1 \u2264 ai \u2264 2\u00b7109) . Then follows number m ( 1 \u2264 m \u2264 2\u00b7105) \u2014 the number of the throws of the second team. Then follow m integer numbers \u2014 the distances of throws of bi ( 1 \u2264 bi \u2264 2\u00b7109) .",
    "output": "Print two numbers in the format a: b \u2014 the score that is possible considering the problem conditions where the result of subtraction a - b is maximum. If there are several such scores, find the one in which number a is maximum.",
    "note": "",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "implementation",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Vanya and Computer Game",
    "url": "https://codeforces.com/problemset/problem/492/D",
    "history": "Vanya and his friend Vova play a computer game where they need to destroy n monsters to pass a level. Vanya' s character performs attack with frequency x hits per second and Vova' s character performs attack with frequency y hits per second. Each character spends fixed time to raise a weapon and then he hits ( the time to raise the weapon is 1 / x seconds for the first character and 1 / y seconds for the second one) . The i- th monster dies after he receives ai hits. Vanya and Vova wonder who makes the last hit on each monster. If Vanya and Vova make the last hit at the same time, we assume that both of them have made the last hit.",
    "input": "The first line contains three integers n, x, y ( 1 \u2264 n \u2264 105, 1 \u2264 x, y \u2264 106) \u2014 the number of monsters, the frequency of Vanya' s and Vova' s attack, correspondingly. Next n lines contain integers ai ( 1 \u2264 ai \u2264 109) \u2014 the number of hits needed do destroy the i- th monster.",
    "output": "Print n lines. In the i- th line print word \" Vanya\" , if the last hit on the i- th monster was performed by Vanya, \" Vova\" , if Vova performed the last hit, or \" Both\" , if both boys performed it at the same time.",
    "note": "In the first sample Vanya makes the first hit at time 1 / 3, Vova makes the second hit at time 1 / 2, Vanya makes the third hit at time 2 / 3, and both boys make the fourth and fifth hit simultaneously at the time 1. In the second sample Vanya and Vova make the first and second hit simultaneously at time 1.",
    "topics": [
      "binary search",
      "implementation",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Vanya and Exams",
    "url": "https://codeforces.com/problemset/problem/492/C",
    "history": "Vanya wants to pass n exams and get the academic scholarship. He will get the scholarship if the average grade mark for all the exams is at least avg. The exam grade cannot exceed r. Vanya has passed the exams and got grade ai for the i- th exam. To increase the grade for the i- th exam by 1 point, Vanya must write bi essays. He can raise the exam grade multiple times. What is the minimum number of essays that Vanya needs to write to get scholarship?",
    "input": "The first line contains three integers n, r, avg ( 1 \u2264 n \u2264 105, 1 \u2264 r \u2264 109, 1 \u2264 avg \u2264 min( r, 106) ) \u2014 the number of exams, the maximum grade and the required grade point average, respectively. Each of the following n lines contains space- separated integers ai and bi ( 1 \u2264 ai \u2264 r, 1 \u2264 bi \u2264 106) .",
    "output": "In the first line print the minimum number of essays.",
    "note": "In the first sample Vanya can write 2 essays for the 3rd exam to raise his grade by 2 points and 2 essays for the 4th exam to raise his grade by 1 point. In the second sample, Vanya doesn' t need to write any essays as his general point average already is above average.",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Vanya and Lanterns",
    "url": "https://codeforces.com/problemset/problem/492/B",
    "history": "Vanya walks late at night along a straight street of length l, lit by n lanterns. Consider the coordinate system with the beginning of the street corresponding to the point 0, and its end corresponding to the point l. Then the i- th lantern is at the point ai. The lantern lights all points of the street that are at the distance of at most d from it, where d is some positive number, common for all lanterns. Vanya wonders: what is the minimum light radius d should the lanterns have to light the whole street?",
    "input": "The first line contains two integers n, l ( 1 \u2264 n \u2264 1000, 1 \u2264 l \u2264 109) \u2014 the number of lanterns and the length of the street respectively. The next line contains n integers ai ( 0 \u2264 ai \u2264 l) . Multiple lanterns can be located at the same point. The lanterns may be located at the ends of the street.",
    "output": "Print the minimum light radius d, needed to light the whole street. The answer will be considered correct if its absolute or relative error doesn' t exceed 10 - 9.",
    "note": "Consider the second sample. At d = 2 the first lantern will light the segment [ 0, 4] of the street, and the second lantern will light segment [ 3, 5] . Thus, the whole street will be lit.",
    "topics": [
      "binary search",
      "implementation",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Team Olympiad",
    "url": "https://codeforces.com/problemset/problem/490/A",
    "history": "The School No0 of the capital of Berland has n children studying in it. All the children in this school are gifted: some of them are good at programming, some are good at maths, others are good at PE ( Physical Education) . Hence, for each child we know value ti: ti = 1, if the i- th child is good at programming, ti = 2, if the i- th child is good at maths, ti = 3, if the i- th child is good at PE Each child happens to be good at exactly one of these three subjects. The Team Scientific Decathlon Olympias requires teams of three students. The school teachers decided that the teams will be composed of three children that are good at different subjects. That is, each team must have one mathematician, one programmer and one sportsman. Of course, each child can be a member of no more than one team. What is the maximum number of teams that the school will be able to present at the Olympiad? How should the teams be formed for that?",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 5000) \u2014 the number of children in the school. The second line contains n integers t1, t2, . . . , tn ( 1 \u2264 ti \u2264 3) , where ti describes the skill of the i- th child.",
    "output": "In the first line output integer w \u2014 the largest possible number of teams. Then print w lines, containing three numbers in each line. Each triple represents the indexes of the children forming the team. You can print both the teams, and the numbers in the triplets in any order. The children are numbered from 1 to n in the order of their appearance in the input. Each child must participate in no more than one team. If there are several solutions, print any of them. If no teams can be compiled, print the only line with value w equal to 0.",
    "note": "",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "BerSU Ball",
    "url": "https://codeforces.com/problemset/problem/489/B",
    "history": "The Berland State University is hosting a ballroom dance in celebration of its 100500- th anniversary! n boys and m girls are already busy rehearsing waltz, minuet, polonaise and quadrille moves. We know that several boy girl pairs are going to be invited to the ball. However, the partners' dancing skill in each pair must differ by at most one. For each boy, we know his dancing skills. Similarly, for each girl we know her dancing skills. Write a code that can determine the largest possible number of pairs that can be formed from n boys and m girls.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 100) \u2014 the number of boys. The second line contains sequence a1, a2, . . . , an ( 1 \u2264 ai \u2264 100) , where ai is the i- th boy' s dancing skill. Similarly, the third line contains an integer m ( 1 \u2264 m \u2264 100) \u2014 the number of girls. The fourth line contains sequence b1, b2, . . . , bm ( 1 \u2264 bj \u2264 100) , where bj is the j- th girl' s dancing skill.",
    "output": "Print a single number \u2014 the required maximum possible number of pairs.",
    "note": "",
    "topics": [
      "dfs and similar",
      "dp",
      "graph matchings",
      "greedy",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "SwapSort",
    "url": "https://codeforces.com/problemset/problem/489/A",
    "history": "In this problem your goal is to sort an array consisting of n integers in at most n swaps. For the given array find the sequence of swaps that makes the array sorted in the non- descending order. Swaps are performed consecutively, one after another. Note that in this problem you do not have to minimize the number of swaps \u2014 your task is to find any sequence that is no longer than n.",
    "input": "The first line of the input contains integer n ( 1 \u2264 n \u2264 3000) \u2014 the number of array elements. The second line contains elements of array: a0, a1, . . . , an - 1 ( - 109 \u2264 ai \u2264 109) , where ai is the i- th element of the array. The elements are numerated from 0 to n - 1 from left to right. Some integers may appear in the array more than once.",
    "output": "In the first line print k ( 0 \u2264 k \u2264 n) \u2014 the number of swaps. Next k lines must contain the descriptions of the k swaps, one per line. Each swap should be printed as a pair of integers i, j ( 0 \u2264 i, j \u2264 n - 1) , representing the swap of elements ai and aj. You can print indices in the pairs in any order. The swaps are performed in the order they appear in the output, from the first to the last. It is allowed to print i = j and swap the same pair of elements multiple times. If there are multiple answers, print any of them. It is guaranteed that at least one answer exists.",
    "note": "",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Maximum Value",
    "url": "https://codeforces.com/problemset/problem/484/B",
    "history": "You are given a sequence a consisting of n integers. Find the maximum possible value of ( integer remainder of ai divided by aj) , where 1 \u2264 i, j \u2264 n and ai \u2265 aj.",
    "input": "The first line contains integer n \u2014 the length of the sequence ( 1 \u2264 n \u2264 2\u00b7105) . The second line contains n space- separated integers ai ( 1 \u2264 ai \u2264 106) .",
    "output": "Print the answer to the problem.",
    "note": "",
    "topics": [
      "binary search",
      "math",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Exams",
    "url": "https://codeforces.com/problemset/problem/479/C",
    "history": "Student Valera is an undergraduate student at the University. His end of term exams are approaching and he is to pass exactly n exams. Valera is a smart guy, so he will be able to pass any exam he takes on his first try. Besides, he can take several exams on one day, and in any order. According to the schedule, a student can take the exam for the i- th subject on the day number ai. However, Valera has made an arrangement with each teacher and the teacher of the i- th subject allowed him to take an exam before the schedule time on day bi ( bi < ai) . Thus, Valera can take an exam for the i- th subject either on day ai, or on day bi. All the teachers put the record of the exam in the student' s record book on the day of the actual exam and write down the date of the mark as number ai. Valera believes that it would be rather strange if the entries in the record book did not go in the order of non- decreasing date. Therefore Valera asks you to help him. Find the minimum possible value of the day when Valera can take the final exam if he takes exams so that all the records in his record book go in the order of non- decreasing date.",
    "input": "The first line contains a single positive integer n ( 1 \u2264 n \u2264 5000) \u2014 the number of exams Valera will take. Each of the next n lines contains two positive space- separated integers ai and bi ( 1 \u2264 bi < ai \u2264 109) \u2014 the date of the exam in the schedule and the early date of passing the i- th exam, correspondingly.",
    "output": "Print a single integer \u2014 the minimum possible number of the day when Valera can take the last exam if he takes all the exams so that all the records in his record book go in the order of non- decreasing date.",
    "note": "In the first sample Valera first takes an exam in the second subject on the first day ( the teacher writes down the schedule date that is 3) . On the next day he takes an exam in the third subject ( the teacher writes down the schedule date, 4) , then he takes an exam in the first subject ( the teacher writes down the mark with date 5) . Thus, Valera takes the last exam on the second day and the dates will go in the non- decreasing order: 3, 4, 5. In the second sample Valera first takes an exam in the third subject on the fourth day. Then he takes an exam in the second subject on the fifth day. After that on the sixth day Valera takes an exam in the first subject.",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Towers",
    "url": "https://codeforces.com/problemset/problem/479/B",
    "history": "As you know, all the kids in Berland love playing with cubes. Little Petya has n towers consisting of cubes of the same size. Tower with number i consists of ai cubes stacked one on top of the other. Petya defines the instability of a set of towers as a value equal to the difference between the heights of the highest and the lowest of the towers. For example, if Petya built five cube towers with heights ( 8, 3, 2, 6, 3) , the instability of this set is equal to 6 ( the highest tower has height 8, the lowest one has height 2) . The boy wants the instability of his set of towers to be as low as possible. All he can do is to perform the following operation several times: take the top cube from some tower and put it on top of some other tower of his set. Please note that Petya would never put the cube on the same tower from which it was removed because he thinks it' s a waste of time. Before going to school, the boy will have time to perform no more than k such operations. Petya does not want to be late for class, so you have to help him accomplish this task.",
    "input": "The first line contains two space- separated positive integers n and k ( 1 \u2264 n \u2264 100, 1 \u2264 k \u2264 1000) \u2014 the number of towers in the given set and the maximum number of operations Petya can perform. The second line contains n space- separated positive integers ai ( 1 \u2264 ai \u2264 104) \u2014 the towers' initial heights.",
    "output": "In the first line print two space- separated non- negative integers s and m ( m \u2264 k) . The first number is the value of the minimum possible instability that can be obtained after performing at most k operations, the second number is the number of operations needed for that. In the next m lines print the description of each operation as two positive integers i and j, each of them lies within limits from 1 to n. They represent that Petya took the top cube from the i- th tower and put in on the j- th one ( i = \u0338 j) . Note that in the process of performing operations the heights of some towers can become equal to zero. If there are multiple correct sequences at which the minimum possible instability is achieved, you are allowed to print any of them.",
    "note": "In the first sample you need to move the cubes two times, from the second tower to the third one and from the second one to the first one. Then the heights of the towers are all the same and equal to 6.",
    "topics": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Wavy numbers",
    "url": "https://codeforces.com/problemset/problem/478/E",
    "history": "A wavy number is such positive integer that for any digit of its decimal representation except for the first one and the last one following condition holds: the digit is either strictly larger than both its adjacent digits or strictly less than both its adjacent digits. For example, numbers 35270, 102, 747, 20 and 3 are wavy and numbers 123, 1000 and 2212 are not. The task is to find the k- th smallest wavy number r that is divisible by n for the given integer values n and k. You are to write a program that will find the value of r if it doesn' t exceed 1014.",
    "input": "The only line of input contains two integers n and k, separated by a single space ( 1 \u2264 n, k \u2264 1014) .",
    "output": "Your task is to output the only integer r \u2014 the answer to the given problem. If such number does not exist or it is larger than 1014, then print \" - 1\" ( minus one without the quotes) instead.",
    "note": "The values of the first four wavy numbers that are divisible by n for the first sample are: 492, 615, 738 and 1845.",
    "topics": [
      "brute force",
      "dfs and similar",
      "meet-in-the-middle",
      "sortings"
    ]
  },
  {
    "title": "Pillars",
    "url": "https://codeforces.com/problemset/problem/474/E",
    "history": "Marmot found a row with n pillars. The i- th pillar has the height of hi meters. Starting from one pillar i1, Marmot wants to jump on the pillars i2, . . . , ik. ( 1 \u2264 i1 < i2 < . . . < ik \u2264 n) . From a pillar i Marmot can jump on a pillar j only if i < j and | hi - hj| \u2265 d, where | x| is the absolute value of the number x. Now Marmot is asking you find out a jump sequence with maximal length and print it.",
    "input": "The first line contains two integers n and d ( 1 \u2264 n \u2264 105, 0 \u2264 d \u2264 109) . The second line contains n numbers h1, h2, . . . , hn ( 1 \u2264 hi \u2264 1015) .",
    "output": "The first line should contain one integer k, the maximal length of a jump sequence. The second line should contain k integers i1, i2, . . . , ik ( 1 \u2264 i1 < i2 < . . . < ik \u2264 n) , representing the pillars' indices from the maximal length jump sequence. If there is more than one maximal length jump sequence, print any.",
    "note": "In the first example Marmot chooses the pillars 1, 2, 3, 5 with the heights 1, 3, 6, 4. Another jump sequence of length 4 is 1, 2, 4, 5.",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "sortings",
      "trees"
    ]
  },
  {
    "title": "MUH and Important Things",
    "url": "https://codeforces.com/problemset/problem/471/B",
    "history": "It' s time polar bears Menshykov and Uslada from the zoo of St. Petersburg and elephant Horace from the zoo of Kiev got down to business. In total, there are n tasks for the day and each animal should do each of these tasks. For each task, they have evaluated its difficulty. Also animals decided to do the tasks in order of their difficulty. Unfortunately, some tasks can have the same difficulty, so the order in which one can perform the tasks may vary. Menshykov, Uslada and Horace ask you to deal with this nuisance and come up with individual plans for each of them. The plan is a sequence describing the order in which an animal should do all the n tasks. Besides, each of them wants to have its own unique plan. Therefore three plans must form three different sequences. You are to find the required plans, or otherwise deliver the sad news to them by stating that it is impossible to come up with three distinct plans for the given tasks.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 2000) \u2014 the number of tasks. The second line contains n integers h1, h2, . . . , hn ( 1 \u2264 hi \u2264 2000) , where hi is the difficulty of the i- th task. The larger number hi is, the more difficult the i- th task is.",
    "output": "In the first line print \" YES\" ( without the quotes) , if it is possible to come up with three distinct plans of doing the tasks. Otherwise print in the first line \" NO\" ( without the quotes) . If three desired plans do exist, print in the second line n distinct integers that represent the numbers of the tasks in the order they are done according to the first plan. In the third and fourth line print two remaining plans in the same form. If there are multiple possible answers, you can print any of them.",
    "note": "In the first sample the difficulty of the tasks sets one limit: tasks 1 and 4 must be done before tasks 2 and 3. That gives the total of four possible sequences of doing tasks : [ 1, 4, 2, 3] , [ 4, 1, 2, 3] , [ 1, 4, 3, 2] , [ 4, 1, 3, 2] . You can print any three of them in the answer. In the second sample there are only two sequences of tasks that meet the conditions \u2014 [ 3, 1, 2, 4, 5] and [ 3, 1, 4, 2, 5] . Consequently, it is impossible to make three distinct sequences of tasks.",
    "topics": [
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Appleman and Toastman",
    "url": "https://codeforces.com/problemset/problem/461/A",
    "history": "Appleman and Toastman play a game. Initially Appleman gives one group of n numbers to the Toastman, then they start to complete the following tasks: Each time Toastman gets a group of numbers, he sums up all the numbers and adds this sum to the score. Then he gives the group to the Appleman. Each time Appleman gets a group consisting of a single number, he throws this group out. Each time Appleman gets a group consisting of more than one number, he splits the group into two non- empty groups ( he can do it in any way) and gives each of them to Toastman. After guys complete all the tasks they look at the score value. What is the maximum possible value of score they can get?",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 3\u00b7105) . The second line contains n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 106) \u2014 the initial group that is given to Toastman.",
    "output": "Print a single integer \u2014 the largest possible score.",
    "note": "Consider the following situation in the first example. Initially Toastman gets group [ 3, 1, 5] and adds 9 to the score, then he give the group to Appleman. Appleman splits group [ 3, 1, 5] into two groups: [ 3, 5] and [ 1] . Both of them should be given to Toastman. When Toastman receives group [ 1] , he adds 1 to score and gives the group to Appleman ( he will throw it out) . When Toastman receives group [ 3, 5] , he adds 8 to the score and gives the group to Appleman. Appleman splits [ 3, 5] in the only possible way: [ 5] and [ 3] . Then he gives both groups to Toastman. When Toastman receives [ 5] , he adds 5 to the score and gives the group to Appleman ( he will throws it out) . When Toastman receives [ 3] , he adds 3 to the score and gives the group to Appleman ( he will throws it out) . Finally Toastman have added 9 + 1 + 8 + 5 + 3 = 26 to the score. This is the optimal sequence of actions.",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Roland and Rose",
    "url": "https://codeforces.com/problemset/problem/460/E",
    "history": "Roland loves growing flowers. He has recently grown a beautiful rose at point ( 0, 0) of the Cartesian coordinate system. The rose is so beautiful that Roland is afraid that the evil forces can try and steal it. To protect the rose, Roland wants to build n watch towers. Let' s assume that a tower is a point on the plane at the distance of at most r from the rose. Besides, Roland assumes that the towers should be built at points with integer coordinates and the sum of squares of distances between all pairs of towers must be as large as possible. Note, that Roland may build several towers at the same point, also he may build some of them at point ( 0, 0) . Help Roland build the towers at the integer points so that the sum of squares of distances between all towers is maximum possible. Note that the distance in this problem is defined as the Euclidian distance between points.",
    "input": "The first line contains two integers, n and r ( 2 \u2264 n \u2264 8; 1 \u2264 r \u2264 30) .",
    "output": "In the first line print an integer \u2014 the maximum possible sum of squared distances. In the i- th of the following n lines print two integers, xi, yi \u2014 the coordinates of the i- th tower. Each tower must be inside or on the border of the circle with radius r. Note that there may be several towers located at the same point of the plane, also some towers can be located at point ( 0, 0) . If there are multiple valid optimal arrangements, choose any of them.",
    "note": "",
    "topics": [
      "brute force",
      "geometry",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Pashmak and Graph",
    "url": "https://codeforces.com/problemset/problem/459/E",
    "history": "Pashmak' s homework is a problem about graphs. Although he always tries to do his homework completely, he can' t solve this problem. As you know, he' s really weak at graph theory; so try to help him in solving the problem. You are given a weighted directed graph with n vertices and m edges. You need to find a path ( perhaps, non- simple) with maximum number of edges, such that the weights of the edges increase along the path. In other words, each edge of the path must have strictly greater weight than the previous edge in the path. Help Pashmak, print the number of edges in the required path.",
    "input": "The first line contains two integers n, m ( 2 \u2264 n \u2264 3\u00b7105; 1 \u2264 m \u2264 min( n\u00b7( n - 1) , 3\u00b7105) ) . Then, m lines follows. The i- th line contains three space separated integers: ui, vi, wi ( 1 \u2264 ui, vi \u2264 n; 1 \u2264 wi \u2264 105) which indicates that there' s a directed edge with weight wi from vertex ui to vertex vi. It' s guaranteed that the graph doesn' t contain self- loops and multiple edges.",
    "output": "Print a single integer \u2014 the answer to the problem.",
    "note": "In the first sample the maximum trail can be any of this trails: . In the second sample the maximum trail is . In the third sample the maximum trail is .",
    "topics": [
      "dp",
      "sortings"
    ]
  },
  {
    "title": "Pashmak and Parmida's problem",
    "url": "https://codeforces.com/problemset/problem/459/D",
    "history": "Parmida is a clever girl and she wants to participate in Olympiads this year. Of course she wants her partner to be clever too ( although he' s not) ! Parmida has prepared the following test problem for Pashmak. There is a sequence a that consists of n integers a1, a2, . . . , an. Let' s denote f( l, r, x) the number of indices k such that: l \u2264 k \u2264 r and ak = x. His task is to calculate the number of pairs of indicies i, j ( 1 \u2264 i < j \u2264 n) such that f( 1, i, ai) > f( j, n, aj) . Help Pashmak with the test.",
    "input": "The first line of the input contains an integer n ( 1 \u2264 n \u2264 106) . The second line contains n space- separated integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) .",
    "output": "Print a single integer \u2014 the answer to the problem.",
    "note": "",
    "topics": [
      "data structures",
      "divide and conquer",
      "sortings"
    ]
  },
  {
    "title": "Pashmak and Flowers",
    "url": "https://codeforces.com/problemset/problem/459/B",
    "history": "Pashmak decided to give Parmida a pair of flowers from the garden. There are n flowers in the garden and the i- th of them has a beauty number bi. Parmida is a very strange girl so she doesn' t want to have the two most beautiful flowers necessarily. She wants to have those pairs of flowers that their beauty difference is maximal possible! Your task is to write a program which calculates two things: The maximum beauty difference of flowers that Pashmak can give to Parmida. The number of ways that Pashmak can pick the flowers. Two ways are considered different if and only if there is at least one flower that is chosen in the first way and not chosen in the second way.",
    "input": "The first line of the input contains n ( 2 \u2264 n \u2264 2\u00b7105) . In the next line there are n space- separated integers b1, b2, . . . , bn ( 1 \u2264 bi \u2264 109) .",
    "output": "The only line of output should contain two integers. The maximum beauty difference and the number of ways this may happen, respectively.",
    "note": "In the third sample the maximum beauty difference is 2 and there are 4 ways to do this: choosing the first and the second flowers; choosing the first and the fifth flowers; choosing the fourth and the second flowers; choosing the fourth and the fifth flowers.",
    "topics": [
      "combinatorics",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Laptops",
    "url": "https://codeforces.com/problemset/problem/456/A",
    "history": "One day Dima and Alex had an argument about the price and quality of laptops. Dima thinks that the more expensive a laptop is, the better it is. Alex disagrees. Alex thinks that there are two laptops, such that the price of the first laptop is less ( strictly smaller) than the price of the second laptop but the quality of the first laptop is higher ( strictly greater) than the quality of the second laptop. Please, check the guess of Alex. You are given descriptions of n laptops. Determine whether two described above laptops exist.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 105) \u2014 the number of laptops. Next n lines contain two integers each, ai and bi ( 1 \u2264 ai, bi \u2264 n) , where ai is the price of the i- th laptop, and bi is the number that represents the quality of the i- th laptop ( the larger the number is, the higher is the quality) . All ai are distinct. All bi are distinct.",
    "output": "If Alex is correct, print \" Happy Alex\" , otherwise print \" Poor Alex\" ( without the quotes) .",
    "note": "",
    "topics": [
      "sortings"
    ]
  },
  {
    "title": "Sort the Array",
    "url": "https://codeforces.com/problemset/problem/451/B",
    "history": "Being a programmer, you like arrays a lot. For your birthday, your friends have given you an array a consisting of n distinct integers. Unfortunately, the size of a is too small. You want a bigger array! Your friends agree to give you a bigger array, but only if you are able to answer the following question correctly: is it possible to sort the array a ( in increasing order) by reversing exactly one segment of a? See definitions of segment and reversing in the notes.",
    "input": "The first line of the input contains an integer n ( 1 \u2264 n \u2264 105) \u2014 the size of array a. The second line contains n distinct space- separated integers: a[ 1] , a[ 2] , . . . , a[ n] ( 1 \u2264 a[ i] \u2264 109) .",
    "output": "Print \" yes\" or \" no\" ( without quotes) , depending on the answer. If your answer is \" yes\" , then also print two space- separated integers denoting start and end ( start must not be greater than end) indices of the segment to be reversed. If there are multiple ways of selecting these indices, print any of them.",
    "note": "Sample 1. You can reverse the entire array to get [ 1, 2, 3] , which is sorted. Sample 3. No segment can be reversed such that the array will be sorted. DefinitionsA segment [ l, r] of array a is the sequence a[ l] , a[ l + 1] , . . . , a[ r] . If you have an array a of size n and you reverse its segment [ l, r] , the array will become: a[ 1] , a[ 2] , . . . , a[ l - 2] , a[ l - 1] , a[ r] , a[ r - 1] , . . . , a[ l + 1] , a[ l] , a[ r + 1] , a[ r + 2] , . . . , a[ n - 1] , a[ n] .",
    "topics": [
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Devu and his Brother",
    "url": "https://codeforces.com/problemset/problem/439/D",
    "history": "Devu and his brother love each other a lot. As they are super geeks, they only like to play with arrays. They are given two arrays a and b by their father. The array a is given to Devu and b to his brother. As Devu is really a naughty kid, he wants the minimum value of his array a should be at least as much as the maximum value of his brother' s array b. Now you have to help Devu in achieving this condition. You can perform multiple operations on the arrays. In a single operation, you are allowed to decrease or increase any element of any of the arrays by 1. Note that you are allowed to apply the operation on any index of the array multiple times. You need to find minimum number of operations required to satisfy Devu' s condition so that the brothers can play peacefully without fighting.",
    "input": "The first line contains two space- separated integers n, m ( 1 \u2264 n, m \u2264 105) . The second line will contain n space- separated integers representing content of the array a ( 1 \u2264 ai \u2264 109) . The third line will contain m space- separated integers representing content of the array b ( 1 \u2264 bi \u2264 109) .",
    "output": "You need to output a single integer representing the minimum number of operations needed to satisfy Devu' s condition.",
    "note": "In example 1, you can increase a1 by 1 and decrease b2 by 1 and then again decrease b2 by 1. Now array a will be [ 3; 3] and array b will also be [ 3; 3] . Here minimum element of a is at least as large as maximum element of b. So minimum number of operations needed to satisfy Devu' s condition are 3. In example 3, you don' t need to do any operation, Devu' s condition is already satisfied.",
    "topics": [
      "binary search",
      "sortings",
      "ternary search",
      "two pointers"
    ]
  },
  {
    "title": "Devu, the Dumb Guy",
    "url": "https://codeforces.com/problemset/problem/439/B",
    "history": "Devu is a dumb guy, his learning curve is very slow. You are supposed to teach him n subjects, the ith subject has ci chapters. When you teach him, you are supposed to teach all the chapters of a subject continuously. Let us say that his initial per chapter learning power of a subject is x hours. In other words he can learn a chapter of a particular subject in x hours. Well Devu is not complete dumb, there is a good thing about him too. If you teach him a subject, then time required to teach any chapter of the next subject will require exactly 1 hour less than previously required ( see the examples to understand it more clearly) . Note that his per chapter learning power can not be less than 1 hour. You can teach him the n subjects in any possible order. Find out minimum amount of time ( in hours) Devu will take to understand all the subjects and you will be free to do some enjoying task rather than teaching a dumb guy. Please be careful that answer might not fit in 32 bit data type.",
    "input": "The first line will contain two space separated integers n, x ( 1 \u2264 n, x \u2264 105) . The next line will contain n space separated integers: c1, c2, . . . , cn ( 1 \u2264 ci \u2264 105) .",
    "output": "Output a single integer representing the answer to the problem.",
    "note": "Look at the first example. Consider the order of subjects: 1, 2. When you teach Devu the first subject, it will take him 3 hours per chapter, so it will take 12 hours to teach first subject. After teaching first subject, his per chapter learning time will be 2 hours. Now teaching him second subject will take 2 \u00d7 1 = 2 hours. Hence you will need to spend 12 + 2 = 14 hours. Consider the order of subjects: 2, 1. When you teach Devu the second subject, then it will take him 3 hours per chapter, so it will take 3 \u00d7 1 = 3 hours to teach the second subject. After teaching the second subject, his per chapter learning time will be 2 hours. Now teaching him the first subject will take 2 \u00d7 4 = 8 hours. Hence you will need to spend 11 hours. So overall, minimum of both the cases is 11 hours. Look at the third example. The order in this example doesn' t matter. When you teach Devu the first subject, it will take him 3 hours per chapter. When you teach Devu the second subject, it will take him 2 hours per chapter. When you teach Devu the third subject, it will take him 1 hours per chapter. In total it takes 6 hours.",
    "topics": [
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "The Child and Zoo",
    "url": "https://codeforces.com/problemset/problem/437/D",
    "history": "Of course our child likes walking in a zoo. The zoo has n areas, that are numbered from 1 to n. The i- th area contains ai animals in it. Also there are m roads in the zoo, and each road connects two distinct areas. Naturally the zoo is connected, so you can reach any area of the zoo from any other area using the roads. Our child is very smart. Imagine the child want to go from area p to area q. Firstly he considers all the simple routes from p to q. For each route the child writes down the number, that is equal to the minimum number of animals among the route areas. Let' s denote the largest of the written numbers as f( p, q) . Finally, the child chooses one of the routes for which he writes down the value f( p, q) . After the child has visited the zoo, he thinks about the question: what is the average value of f( p, q) for all pairs p, q ( p = \u0338 q) ? Can you answer his question?",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 105; 0 \u2264 m \u2264 105) . The second line contains n integers: a1, a2, . . . , an ( 0 \u2264 ai \u2264 105) . Then follow m lines, each line contains two integers xi and yi ( 1 \u2264 xi, yi \u2264 n; xi = \u0338 yi) , denoting the road between areas xi and yi. All roads are bidirectional, each pair of areas is connected by at most one road.",
    "output": "Output a real number \u2014 the value of . The answer will be considered correct if its relative or absolute error doesn' t exceed 10 - 4.",
    "note": "Consider the first sample. There are 12 possible situations: p = 1, q = 3, f( p, q) = 10. p = 2, q = 3, f( p, q) = 20. p = 4, q = 3, f( p, q) = 30. p = 1, q = 2, f( p, q) = 10. p = 2, q = 4, f( p, q) = 20. p = 4, q = 1, f( p, q) = 10. Another 6 cases are symmetrical to the above. The average is . Consider the second sample. There are 6 possible situations: p = 1, q = 2, f( p, q) = 10. p = 2, q = 3, f( p, q) = 20. p = 1, q = 3, f( p, q) = 10. Another 3 cases are symmetrical to the above. The average is .",
    "topics": [
      "dsu",
      "sortings"
    ]
  },
  {
    "title": "The Child and Toy",
    "url": "https://codeforces.com/problemset/problem/437/C",
    "history": "On Children' s Day, the child got a toy from Delayyy as a present. However, the child is so naughty that he can' t wait to destroy the toy. The toy consists of n parts and m ropes. Each rope links two parts, but every pair of parts is linked by at most one rope. To split the toy, the child must remove all its parts. The child can remove a single part at a time, and each remove consume an energy. Let' s define an energy value of part i as vi. The child spend vf1 + vf2 + . . . + vfk energy for removing part i where f1, f2, . . . , fk are the parts that are directly connected to the i- th and haven' t been removed. Help the child to find out, what is the minimum total energy he should spend to remove all n parts.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 1000; 0 \u2264 m \u2264 2000) . The second line contains n integers: v1, v2, . . . , vn ( 0 \u2264 vi \u2264 105) . Then followed m lines, each line contains two integers xi and yi, representing a rope from part xi to part yi ( 1 \u2264 xi, yi \u2264 n; xi = \u0338 yi) . Consider all the parts are numbered from 1 to n.",
    "output": "Output the minimum total energy the child should spend to remove all n parts of the toy.",
    "note": "One of the optimal sequence of actions in the first sample is: First, remove part 3, cost of the action is 20. Then, remove part 2, cost of the action is 10. Next, remove part 4, cost of the action is 10. At last, remove part 1, cost of the action is 0. So the total energy the child paid is 20 + 10 + 10 + 0 = 40, which is the minimum. In the second sample, the child will spend 400 no matter in what order he will remove the parts.",
    "topics": [
      "graphs",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "The Child and Set",
    "url": "https://codeforces.com/problemset/problem/437/B",
    "history": "At the children' s day, the child came to Picks' s house, and messed his house up. Picks was angry at him. A lot of important things were lost, in particular the favorite set of Picks. Fortunately, Picks remembers something about his set S: its elements were distinct integers from 1 to limit; the value of was equal to sum; here lowbit( x) equals 2k where k is the position of the first one in the binary representation of x. For example, lowbit( 100102) = 102, lowbit( 100012) = 12, lowbit( 100002) = 100002 ( binary representation) . Can you help Picks and find any set S, that satisfies all the above conditions?",
    "input": "The first line contains two integers: sum, limit ( 1 \u2264 sum, limit \u2264 105) .",
    "output": "In the first line print an integer n ( 1 \u2264 n \u2264 105) , denoting the size of S. Then print the elements of set S in any order. If there are multiple answers, print any of them. If it' s impossible to find a suitable set, print - 1.",
    "note": "In sample test 1: lowbit( 4) = 4, lowbit( 5) = 1, 4 + 1 = 5. In sample test 2: lowbit( 1) = 1, lowbit( 2) = 2, lowbit( 3) = 1, 1 + 2 + 1 = 4.",
    "topics": [
      "bitmasks",
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Furukawa Nagisa's Tree",
    "url": "https://codeforces.com/problemset/problem/434/E",
    "history": "One day, Okazaki Tomoya has bought a tree for Furukawa Nagisa' s birthday. The tree is so strange that every node of the tree has a value. The value of the i- th node is vi. Now Furukawa Nagisa and Okazaki Tomoya want to play a game on the tree. Let ( s, e) be the path from node s to node e, we can write down the sequence of the values of nodes on path ( s, e) , and denote this sequence as S( s, e) . We define the value of the sequence G( S( s, e) ) as follows. Suppose that the sequence is z0, z1. . . zl - 1, where l is the length of the sequence. We define G( S( s, e) ) = z0 \u00d7 k0 + z1 \u00d7 k1 + . . . + zl - 1 \u00d7 kl - 1. If the path ( s, e) satisfies , then the path ( s, e) belongs to Furukawa Nagisa, otherwise it belongs to Okazaki Tomoya. Calculating who has more paths is too easy, so they want to play something more difficult. Furukawa Nagisa thinks that if paths ( p1, p2) and ( p2, p3) belong to her, then path ( p1, p3) belongs to her as well. Also, she thinks that if paths ( p1, p2) and ( p2, p3) belong to Okazaki Tomoya, then path ( p1, p3) belongs to Okazaki Tomoya as well. But in fact, this conclusion isn' t always right. So now Furukawa Nagisa wants to know how many triplets ( p1, p2, p3) are correct for the conclusion, and this is your task.",
    "input": "The first line contains four integers n, y, k and x ( 1 \u2264 n \u2264 105; 2 \u2264 y \u2264 109; 1 \u2264 k < y; 0 \u2264 x < y) \u2014 n being the number of nodes on the tree. It is guaranteed that y is a prime number. The second line contains n integers, the i- th integer is vi ( 0 \u2264 vi < y) . Then follow n - 1 lines, each line contains two integers, denoting an edge of the tree. The nodes of the tree are numbered from 1 to n.",
    "output": "Output a single integer \u2014 the number of triplets that are correct for Furukawa Nagisa' s conclusion.",
    "note": "",
    "topics": [
      "binary search",
      "divide and conquer",
      "sortings",
      "trees"
    ]
  },
  {
    "title": "Ryouko's Memory Note",
    "url": "https://codeforces.com/problemset/problem/433/C",
    "history": "Ryouko is an extremely forgetful girl, she could even forget something that has just happened. So in order to remember, she takes a notebook with her, called Ryouko' s Memory Note. She writes what she sees and what she hears on the notebook, and the notebook became her memory. Though Ryouko is forgetful, she is also born with superb analyzing abilities. However, analyzing depends greatly on gathered information, in other words, memory. So she has to shuffle through her notebook whenever she needs to analyze, which is tough work. Ryouko' s notebook consists of n pages, numbered from 1 to n. To make life ( and this problem) easier, we consider that to turn from page x to page y, | x - y| pages should be turned. During analyzing, Ryouko needs m pieces of information, the i- th piece of information is on page ai. Information must be read from the notebook in order, so the total number of pages that Ryouko needs to turn is . Ryouko wants to decrease the number of pages that need to be turned. In order to achieve this, she can merge two pages of her notebook. If Ryouko merges page x to page y, she would copy all the information on page x to y ( 1 \u2264 x, y \u2264 n) , and consequently, all elements in sequence a that was x would become y. Note that x can be equal to y, in which case no changes take place. Please tell Ryouko the minimum number of pages that she needs to turn. Note she can apply the described operation at most once before the reading. Note that the answer can exceed 32- bit integers.",
    "input": "The first line of input contains two integers n and m ( 1 \u2264 n, m \u2264 105) . The next line contains m integers separated by spaces: a1, a2, . . . , am ( 1 \u2264 ai \u2264 n) .",
    "output": "Print a single integer \u2014 the minimum number of pages Ryouko needs to turn.",
    "note": "In the first sample, the optimal solution is to merge page 4 to 3, after merging sequence a becomes 1, 2, 3, 3, 3, 2, so the number of pages Ryouko needs to turn is | 1 - 2| + | 2 - 3| + | 3 - 3| + | 3 - 3| + | 3 - 2| = 3. In the second sample, optimal solution is achieved by merging page 9 to 4.",
    "topics": [
      "implementation",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Kuriyama Mirai's Stones",
    "url": "https://codeforces.com/problemset/problem/433/B",
    "history": "Kuriyama Mirai has killed many monsters and got many ( namely n) stones. She numbers the stones from 1 to n. The cost of the i- th stone is vi. Kuriyama Mirai wants to know something about these stones so she will ask you two kinds of questions: She will tell you two numbers, l and r ( 1 \u2264 l \u2264 r \u2264 n) , and you should tell her . Let ui be the cost of the i- th cheapest stone ( the cost that will be on the i- th place if we arrange all the stone costs in non- decreasing order) . This time she will tell you two numbers, l and r ( 1 \u2264 l \u2264 r \u2264 n) , and you should tell her . For every question you should give the correct answer, or Kuriyama Mirai will say \" fuyukai desu\" and then become unhappy.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 105) . The second line contains n integers: v1, v2, . . . , vn ( 1 \u2264 vi \u2264 109) \u2014 costs of the stones. The third line contains an integer m ( 1 \u2264 m \u2264 105) \u2014 the number of Kuriyama Mirai' s questions. Then follow m lines, each line contains three integers type, l and r ( 1 \u2264 l \u2264 r \u2264 n; 1 \u2264 type \u2264 2) , describing a question. If type equal to 1, then you should output the answer for the first question, else you should output the answer for the second one.",
    "output": "Print m lines. Each line must contain an integer \u2014 the answer to Kuriyama Mirai' s question. Print the answers to the questions in the order of input.",
    "note": "Please note that the answers to the questions may overflow 32- bit integer type.",
    "topics": [
      "dp",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Prime Swaps",
    "url": "https://codeforces.com/problemset/problem/432/C",
    "history": "You have an array a[ 1] , a[ 2] , . . . , a[ n] , containing distinct integers from 1 to n. Your task is to sort this array in increasing order with the following operation ( you may need to apply it multiple times) : choose two indexes, i and j ( 1 \u2264 i < j \u2264 n; ( j - i + 1) is a prime number) ; swap the elements on positions i and j; in other words, you are allowed to apply the following sequence of assignments: tmp = a[ i] , a[ i] = a[ j] , a[ j] = tmp ( tmp is a temporary variable) . You do not need to minimize the number of used operations. However, you need to make sure that there are at most 5n operations.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 105) . The next line contains n distinct integers a[ 1] , a[ 2] , . . . , a[ n] ( 1 \u2264 a[ i] \u2264 n) .",
    "output": "In the first line, print integer k ( 0 \u2264 k \u2264 5n) \u2014 the number of used operations. Next, print the operations. Each operation must be printed as \" i j\" ( 1 \u2264 i < j \u2264 n; ( j - i + 1) is a prime) . If there are multiple answers, you can print any of them.",
    "note": "",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Choosing Teams",
    "url": "https://codeforces.com/problemset/problem/432/A",
    "history": "The Saratov State University Olympiad Programmers Training Center ( SSU OPTC) has n students. For each student you know the number of times he/ she has participated in the ACM ICPC world programming championship. According to the ACM ICPC rules, each person can participate in the world championship at most 5 times. The head of the SSU OPTC is recently gathering teams to participate in the world championship. Each team must consist of exactly three people, at that, any person cannot be a member of two or more teams. What maximum number of teams can the head make if he wants each team to participate in the world championship with the same members at least k times?",
    "input": "The first line contains two integers, n and k ( 1 \u2264 n \u2264 2000; 1 \u2264 k \u2264 5) . The next line contains n integers: y1, y2, . . . , yn ( 0 \u2264 yi \u2264 5) , where yi shows the number of times the i- th person participated in the ACM ICPC world championship.",
    "output": "Print a single number \u2014 the answer to the problem.",
    "note": "In the first sample only one team could be made: the first, the fourth and the fifth participants. In the second sample no teams could be created. In the third sample two teams could be created. Any partition into two teams fits.",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Points and Segments (easy)",
    "url": "https://codeforces.com/problemset/problem/430/A",
    "history": "Iahub isn' t well prepared on geometry problems, but he heard that this year there will be a lot of geometry problems on the IOI selection camp. Scared, Iahub locked himself in the basement and started thinking of new problems of this kind. One of them is the following. Iahub wants to draw n distinct points and m segments on the OX axis. He can draw each point with either red or blue. The drawing is good if and only if the following requirement is met: for each segment [ li, ri] consider all the red points belong to it ( ri points) , and all the blue points belong to it ( bi points) ; each segment i should satisfy the inequality | ri - bi| \u2264 1. Iahub thinks that point x belongs to segment [ l, r] , if inequality l \u2264 x \u2264 r holds. Iahub gives to you all coordinates of points and segments. Please, help him to find any good drawing.",
    "input": "The first line of input contains two integers: n ( 1 \u2264 n \u2264 100) and m ( 1 \u2264 m \u2264 100) . The next line contains n space- separated integers x1, x2, . . . , xn ( 0 \u2264 xi \u2264 100) \u2014 the coordinates of the points. The following m lines contain the descriptions of the m segments. Each line contains two integers li and ri ( 0 \u2264 li \u2264 ri \u2264 100) \u2014 the borders of the i- th segment. It' s guaranteed that all the points are distinct.",
    "output": "If there is no good drawing for a given test, output a single integer - 1. Otherwise output n integers, each integer must be 0 or 1. The i- th number denotes the color of the i- th point ( 0 is red, and 1 is blue) . If there are multiple good drawings you can output any of them.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "sortings"
    ]
  },
  {
    "title": "Sereja and Swaps",
    "url": "https://codeforces.com/problemset/problem/425/A",
    "history": "As usual, Sereja has array a, its elements are integers: a[ 1] , a[ 2] , . . . , a[ n] . Let' s introduce notation: A swap operation is the following sequence of actions: choose two indexes i, j ( i = \u0338 j) ; perform assignments tmp = a[ i] , a[ i] = a[ j] , a[ j] = tmp. What maximum value of function m( a) can Sereja get if he is allowed to perform at most k swap operations?",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 200; 1 \u2264 k \u2264 10) . The next line contains n integers a[ 1] , a[ 2] , . . . , a[ n] ( - 1000 \u2264 a[ i] \u2264 1000) .",
    "output": "In a single line print the maximum value of m( a) that Sereja can get if he is allowed to perform at most k swap operations.",
    "note": "",
    "topics": [
      "brute force",
      "sortings"
    ]
  },
  {
    "title": "Megacity",
    "url": "https://codeforces.com/problemset/problem/424/B",
    "history": "The administration of the Tomsk Region firmly believes that it' s time to become a megacity ( that is, get population of one million) . Instead of improving the demographic situation, they decided to achieve its goal by expanding the boundaries of the city. The city of Tomsk can be represented as point on the plane with coordinates ( 0; 0) . The city is surrounded with n other locations, the i- th one has coordinates ( xi, yi) with the population of ki people. You can widen the city boundaries to a circle of radius r. In such case all locations inside the circle and on its border are included into the city. Your goal is to write a program that will determine the minimum radius r, to which is necessary to expand the boundaries of Tomsk, so that it becomes a megacity.",
    "input": "The first line of the input contains two integers n and s ( 1 \u2264 n \u2264 103; 1 \u2264 s < 106) \u2014 the number of locatons around Tomsk city and the population of the city. Then n lines follow. The i- th line contains three integers \u2014 the xi and yi coordinate values of the i- th location and the number ki of people in it ( 1 \u2264 ki < 106) . Each coordinate is an integer and doesn' t exceed 104 in its absolute value. It is guaranteed that no two locations are at the same point and no location is at point ( 0; 0) .",
    "output": "In the output, print \" - 1\" ( without the quotes) , if Tomsk won' t be able to become a megacity. Otherwise, in the first line print a single real number \u2014 the minimum radius of the circle that the city needs to expand to in order to become a megacity. The answer is considered correct if the absolute or relative error don' t exceed 10 - 6.",
    "note": "",
    "topics": [
      "binary search",
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Bug in Code",
    "url": "https://codeforces.com/problemset/problem/421/D",
    "history": "Recently a serious bug has been found in the FOS code. The head of the F company wants to find the culprit and punish him. For that, he set up an organizational meeting, the issue is: who' s bugged the code? Each of the n coders on the meeting said: ' I know for sure that either x or y did it! ' The head of the company decided to choose two suspects and invite them to his office. Naturally, he should consider the coders' opinions. That' s why the head wants to make such a choice that at least p of n coders agreed with it. A coder agrees with the choice of two suspects if at least one of the two people that he named at the meeting was chosen as a suspect. In how many ways can the head of F choose two suspects? Note that even if some coder was chosen as a suspect, he can agree with the head' s choice if he named the other chosen coder at the meeting.",
    "input": "The first line contains integers n and p ( 3 \u2264 n \u2264 3\u00b7105; 0 \u2264 p \u2264 n) \u2014 the number of coders in the F company and the minimum number of agreed people. Each of the next n lines contains two integers xi, yi ( 1 \u2264 xi, yi \u2264 n) \u2014 the numbers of coders named by the i- th coder. It is guaranteed that xi = \u0338 i, yi = \u0338 i, xi = \u0338 yi.",
    "output": "Print a single integer \u2014 the number of possible two- suspect sets. Note that the order of the suspects doesn' t matter, that is, sets ( 1, 2) and ( 2, 1) are considered identical.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "sortings"
    ]
  },
  {
    "title": "Cunning Gena",
    "url": "https://codeforces.com/problemset/problem/417/D",
    "history": "A boy named Gena really wants to get to the \" Russian Code Cup\" finals, or at least get a t- shirt. But the offered problems are too complex, so he made an arrangement with his n friends that they will solve the problems for him. The participants are offered m problems on the contest. For each friend, Gena knows what problems he can solve. But Gena' s friends won' t agree to help Gena for nothing: the i- th friend asks Gena xi rubles for his help in solving all the problems he can. Also, the friend agreed to write a code for Gena only if Gena' s computer is connected to at least ki monitors, each monitor costs b rubles. Gena is careful with money, so he wants to spend as little money as possible to solve all the problems. Help Gena, tell him how to spend the smallest possible amount of money. Initially, there' s no monitors connected to Gena' s computer.",
    "input": "The first line contains three integers n, m and b ( 1 \u2264 n \u2264 100; 1 \u2264 m \u2264 20; 1 \u2264 b \u2264 109) \u2014 the number of Gena' s friends, the number of problems and the cost of a single monitor. The following 2n lines describe the friends. Lines number 2i and ( 2i + 1) contain the information about the i- th friend. The 2i- th line contains three integers xi, ki and mi ( 1 \u2264 xi \u2264 109; 1 \u2264 ki \u2264 109; 1 \u2264 mi \u2264 m) \u2014 the desired amount of money, monitors and the number of problems the friend can solve. The ( 2i + 1) - th line contains mi distinct positive integers \u2014 the numbers of problems that the i- th friend can solve. The problems are numbered from 1 to m.",
    "output": "Print the minimum amount of money Gena needs to spend to solve all the problems. Or print - 1, if this cannot be achieved.",
    "note": "",
    "topics": [
      "bitmasks",
      "dp",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Network Configuration",
    "url": "https://codeforces.com/problemset/problem/412/B",
    "history": "The R1 company wants to hold a web search championship. There were n computers given for the competition, each of them is connected to the Internet. The organizers believe that the data transfer speed directly affects the result. The higher the speed of the Internet is, the faster the participant will find the necessary information. Therefore, before the competition started, each computer had its maximum possible data transfer speed measured. On the i- th computer it was ai kilobits per second. There will be k participants competing in the championship, each should get a separate computer. The organizing company does not want any of the participants to have an advantage over the others, so they want to provide the same data transfer speed to each participant' s computer. Also, the organizers want to create the most comfortable conditions for the participants, so the data transfer speed on the participants' computers should be as large as possible. The network settings of the R1 company has a special option that lets you to cut the initial maximum data transfer speed of any computer to any lower speed. How should the R1 company configure the network using the described option so that at least k of n computers had the same data transfer speed and the data transfer speed on these computers was as large as possible?",
    "input": "The first line contains two space- separated integers n and k ( 1 \u2264 k \u2264 n \u2264 100) \u2014 the number of computers and the number of participants, respectively. In the second line you have a space- separated sequence consisting of n integers: a1, a2, . . . , an ( 16 \u2264 ai \u2264 32768) ; number ai denotes the maximum data transfer speed on the i- th computer.",
    "output": "Print a single integer \u2014 the maximum Internet speed value. It is guaranteed that the answer to the problem is always an integer.",
    "note": "In the first test case the organizers can cut the first computer' s speed to 30 kilobits. Then two computers ( the first and the third one) will have the same speed of 30 kilobits. They should be used as the participants' computers. This answer is optimal.",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Gravity Flip",
    "url": "https://codeforces.com/problemset/problem/405/A",
    "history": "Little Chris is bored during his physics lessons ( too easy) , so he has built a toy box to keep himself occupied. The box is special, since it has the ability to change gravity. There are n columns of toy cubes in the box arranged in a line. The i- th column contains ai cubes. At first, the gravity in the box is pulling the cubes downwards. When Chris switches the gravity, it begins to pull all the cubes to the right side of the box. The figure shows the initial and final configurations of the cubes in the box: the cubes that have changed their position are highlighted with orange. Given the initial configuration of the toy cubes in the box, find the amounts of cubes in each of the n columns after the gravity switch!",
    "input": "The first line of input contains an integer n ( 1 \u2264 n \u2264 100) , the number of the columns in the box. The next line contains n space- separated integer numbers. The i- th number ai ( 1 \u2264 ai \u2264 100) denotes the number of cubes in the i- th column.",
    "output": "Output n integer numbers separated by spaces, where the i- th number is the amount of cubes in the i- th column after the gravity switch.",
    "note": "The first example case is shown on the figure. The top cube of the first column falls to the top of the last column; the top cube of the second column falls to the top of the third column; the middle cube of the first column falls to the top of the second column. In the second example case the gravity switch does not change the heights of the columns.",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Restore Graph",
    "url": "https://codeforces.com/problemset/problem/404/C",
    "history": "Valera had an undirected connected graph without self- loops and multiple edges consisting of n vertices. The graph had an interesting property: there were at most k edges adjacent to each of its vertices. For convenience, we will assume that the graph vertices were indexed by integers from 1 to n. One day Valera counted the shortest distances from one of the graph vertices to all other ones and wrote them out in array d. Thus, element d[ i] of the array shows the shortest distance from the vertex Valera chose to vertex number i. Then something irreparable terrible happened. Valera lost the initial graph. However, he still has the array d. Help him restore the lost graph.",
    "input": "The first line contains two space- separated integers n and k ( 1 \u2264 k < n \u2264 105) . Number n shows the number of vertices in the original graph. Number k shows that at most k edges were adjacent to each vertex in the original graph. The second line contains space- separated integers d[ 1] , d[ 2] , . . . , d[ n] ( 0 \u2264 d[ i] < n) . Number d[ i] shows the shortest distance from the vertex Valera chose to the vertex number i.",
    "output": "If Valera made a mistake in his notes and the required graph doesn' t exist, print in the first line number - 1. Otherwise, in the first line print integer m ( 0 \u2264 m \u2264 106) \u2014 the number of edges in the found graph. In each of the next m lines print two space- separated integers ai and bi ( 1 \u2264 ai, bi \u2264 n; ai = \u0338 bi) , denoting the edge that connects vertices with numbers ai and bi. The graph shouldn' t contain self- loops and multiple edges. If there are multiple possible answers, print any of them.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs",
      "sortings"
    ]
  },
  {
    "title": "Fox and Card Game",
    "url": "https://codeforces.com/problemset/problem/388/C",
    "history": "Fox Ciel is playing a card game with her friend Fox Jiro. There are n piles of cards on the table. And there is a positive integer on each card. The players take turns and Ciel takes the first turn. In Ciel' s turn she takes a card from the top of any non- empty pile, and in Jiro' s turn he takes a card from the bottom of any non- empty pile. Each player wants to maximize the total sum of the cards he took. The game ends when all piles become empty. Suppose Ciel and Jiro play optimally, what is the score of the game?",
    "input": "The first line contain an integer n ( 1 \u2264 n \u2264 100) . Each of the next n lines contains a description of the pile: the first integer in the line is si ( 1 \u2264 si \u2264 100) \u2014 the number of cards in the i- th pile; then follow si positive integers c1, c2, . . . , ck, . . . , csi ( 1 \u2264 ck \u2264 1000) \u2014 the sequence of the numbers on the cards listed from top of the current pile to bottom of the pile.",
    "output": "Print two integers: the sum of Ciel' s cards and the sum of Jiro' s cards if they play optimally.",
    "note": "In the first example, Ciel will take the cards with number 100 and 1, Jiro will take the card with number 10. In the second example, Ciel will take cards with numbers 2, 8, 6, 5, 9 and Jiro will take cards with numbers 4, 7, 1, 3.",
    "topics": [
      "games",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Fox and Box Accumulation",
    "url": "https://codeforces.com/problemset/problem/388/A",
    "history": "Fox Ciel has n boxes in her room. They have the same size and weight, but they might have different strength. The i- th box can hold at most xi boxes on its top ( we' ll call xi the strength of the box) . Since all the boxes have the same size, Ciel cannot put more than one box directly on the top of some box. For example, imagine Ciel has three boxes: the first has strength 2, the second has strength 1 and the third has strength 1. She cannot put the second and the third box simultaneously directly on the top of the first one. But she can put the second box directly on the top of the first one, and then the third box directly on the top of the second one. We will call such a construction of boxes a pile. Fox Ciel wants to construct piles from all the boxes. Each pile will contain some boxes from top to bottom, and there cannot be more than xi boxes on the top of i- th box. What is the minimal number of piles she needs to construct?",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 100) . The next line contains n integers x1, x2, . . . , xn ( 0 \u2264 xi \u2264 100) .",
    "output": "Output a single integer \u2014 the minimal possible number of piles.",
    "note": "In example 1, one optimal way is to build 2 piles: the first pile contains boxes 1 and 3 ( from top to bottom) , the second pile contains only box 2. In example 2, we can build only 1 pile that contains boxes 1, 2, 3, 4, 5 ( from top to bottom) .",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Multitasking",
    "url": "https://codeforces.com/problemset/problem/384/B",
    "history": "Iahub wants to enhance his multitasking abilities. In order to do this, he wants to sort n arrays simultaneously, each array consisting of m integers. Iahub can choose a pair of distinct indices i and j ( 1 \u2264 i, j \u2264 m, i = \u0338 j) . Then in each array the values at positions i and j are swapped only if the value at position i is strictly greater than the value at position j. Iahub wants to find an array of pairs of distinct indices that, chosen in order, sort all of the n arrays in ascending or descending order ( the particular order is given in input) . The size of the array can be at most ( at most pairs) . Help Iahub, find any suitable array.",
    "input": "The first line contains three integers n ( 1 \u2264 n \u2264 1000) , m ( 1 \u2264 m \u2264 100) and k. Integer k is 0 if the arrays must be sorted in ascending order, and 1 if the arrays must be sorted in descending order. Each line i of the next n lines contains m integers separated by a space, representing the i- th array. For each element x of the array i, 1 \u2264 x \u2264 106 holds.",
    "output": "On the first line of the output print an integer p, the size of the array ( p can be at most ) . Each of the next p lines must contain two distinct integers i and j ( 1 \u2264 i, j \u2264 m, i = \u0338 j) , representing the chosen indices. If there are multiple correct answers, you can print any.",
    "note": "Consider the first sample. After the first operation, the arrays become [ 1, 3, 2, 5, 4] and [ 1, 2, 3, 4, 5] . After the second operation, the arrays become [ 1, 2, 3, 5, 4] and [ 1, 2, 3, 4, 5] . After the third operation they become [ 1, 2, 3, 4, 5] and [ 1, 2, 3, 4, 5] .",
    "topics": [
      "greedy",
      "implementation",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Volcanoes",
    "url": "https://codeforces.com/problemset/problem/383/B",
    "history": "Iahub got lost in a very big desert. The desert can be represented as a n \u00d7 n square matrix, where each cell is a zone of the desert. The cell ( i, j) represents the cell at row i and column j ( 1 \u2264 i, j \u2264 n) . Iahub can go from one cell ( i, j) only down or right, that is to cells ( i + 1, j) or ( i, j + 1) . Also, there are m cells that are occupied by volcanoes, which Iahub cannot enter. Iahub is initially at cell ( 1, 1) and he needs to travel to cell ( n, n) . Knowing that Iahub needs 1 second to travel from one cell to another, find the minimum time in which he can arrive in cell ( n, n) .",
    "input": "The first line contains two integers n ( 1 \u2264 n \u2264 109) and m ( 1 \u2264 m \u2264 105) . Each of the next m lines contains a pair of integers, x and y ( 1 \u2264 x, y \u2264 n) , representing the coordinates of the volcanoes. Consider matrix rows are numbered from 1 to n from top to bottom, and matrix columns are numbered from 1 to n from left to right. There is no volcano in cell ( 1, 1) . No two volcanoes occupy the same location.",
    "output": "Print one integer, the minimum time in which Iahub can arrive at cell ( n, n) . If no solution exists ( there is no path to the final cell) , print - 1.",
    "note": "Consider the first sample. A possible road is: ( 1, 1) \u2192 ( 1, 2) \u2192 ( 2, 2) \u2192 ( 2, 3) \u2192 ( 3, 3) \u2192 ( 3, 4) \u2192 ( 4, 4) .",
    "topics": [
      "binary search",
      "implementation",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Arithmetic Progression",
    "url": "https://codeforces.com/problemset/problem/382/C",
    "history": "Everybody knows what an arithmetic progression is. Let us remind you just in case that an arithmetic progression is such sequence of numbers a1, a2, . . . , an of length n, that the following condition fulfills: a2 - a1 = a3 - a2 = a4 - a3 = . . . = ai + 1 - ai = . . . = an - an - 1. For example, sequences [ 1, 5] , [ 10] , [ 5, 4, 3] are arithmetic progressions and sequences [ 1, 3, 2] , [ 1, 2, 4] are not. Alexander has n cards containing integers. Arthur wants to give Alexander exactly one more card with a number so that he could use the resulting n + 1 cards to make an arithmetic progression ( Alexander has to use all of his cards) . Arthur has already bought a card but he hasn' t written a number on it. Help him, print all integers that you can write on a card so that the described condition fulfilled.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 105) \u2014 the number of cards. The next line contains the sequence of integers \u2014 the numbers on Alexander' s cards. The numbers are positive integers, each of them doesn' t exceed 108.",
    "output": "If Arthur can write infinitely many distinct integers on the card, print on a single line - 1. Otherwise, print on the first line the number of integers that suit you. In the second line, print the numbers in the increasing order. Note that the numbers in the answer can exceed 108 or even be negative ( see test samples) .",
    "note": "",
    "topics": [
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Sereja and Stairs",
    "url": "https://codeforces.com/problemset/problem/381/B",
    "history": "Sereja loves integer sequences very much. He especially likes stairs. Sequence a1, a2, . . . , a| a| ( | a| is the length of the sequence) is stairs if there is such index i ( 1 \u2264 i \u2264 | a| ) , that the following condition is met: a1 < a2 < . . . < ai - 1 < ai > ai + 1 > . . . > a| a| - 1 > a| a| . For example, sequences [ 1, 2, 3, 2] and [ 4, 2] are stairs and sequence [ 3, 1, 2] isn' t. Sereja has m cards with numbers. He wants to put some cards on the table in a row to get a stair sequence. What maximum number of cards can he put on the table?",
    "input": "The first line contains integer m ( 1 \u2264 m \u2264 105) \u2014 the number of Sereja' s cards. The second line contains m integers bi ( 1 \u2264 bi \u2264 5000) \u2014 the numbers on the Sereja' s cards.",
    "output": "In the first line print the number of cards you can put on the table. In the second line print the resulting stairs.",
    "note": "",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "New Year Tree Decorations",
    "url": "https://codeforces.com/problemset/problem/379/E",
    "history": "Due to atheistic Soviet past, Christmas wasn' t officially celebrated in Russia for most of the twentieth century. As a result, the Russian traditions for Christmas and New Year mixed into one event celebrated on the New Year but including the tree, a Santa- like ' Grandfather Frost' , presents and huge family reunions and dinner parties all over the country. Bying a Tree at the New Year and installing it in the house is a tradition. Usually the whole family decorates the tree on the New Year Eve. We hope that Codeforces is a big and loving family, so in this problem we are going to decorate a tree as well. So, our decoration consists of n pieces, each piece is a piece of colored paper, its border is a closed polyline of a special shape. The pieces go one by one as is shown on the picture. The i- th piece is a polyline that goes through points: ( 0, 0) , ( 0, y0) , ( 1, y1) , ( 2, y2) , . . . , ( k, yk) , ( k, 0) . The width of each piece equals k. The figure to the left shows the decoration, the figure to the right shows the individual pieces it consists of. The piece number 1 ( shown red on the figure) is the outer piece ( we see it completely) , piece number 2 ( shown yellow) follows it ( we don' t see it completely as it is partially closed by the first piece) and so on. The programmers are quite curious guys, so the moment we hung a decoration on the New Year tree we started to wonder: what area of each piece can people see?",
    "input": "The first line contains two integers, n and k ( 1 \u2264 n, k \u2264 300) . Each of the following n lines contains k + 1 integers \u2014 the description of the polyline. If the i- th line contains ontegers yi, 0, yi, 1, . . . , yi, k, that means that the polyline of the i- th piece goes through points ( 0, 0) , ( 0, yi, 0) , ( 1, yi, 1) , ( 2, yi, 2) , . . . , ( k, yi, k) , ( k, 0) ( 1 \u2264 yi, j \u2264 1000) .",
    "output": "Print n real numbers \u2014 for each polyline, the area of its visible part. The answer will be considered correct if its relative or absolute error do not exceed 10 - 4.",
    "note": "",
    "topics": [
      "geometry",
      "schedules",
      "sortings"
    ]
  },
  {
    "title": "New Year Ratings Change",
    "url": "https://codeforces.com/problemset/problem/379/C",
    "history": "One very well- known internet resource site ( let' s call it X) has come up with a New Year adventure. Specifically, they decided to give ratings to all visitors. There are n users on the site, for each user we know the rating value he wants to get as a New Year Present. We know that user i wants to get at least ai rating units as a present. The X site is administered by very creative and thrifty people. On the one hand, they want to give distinct ratings and on the other hand, the total sum of the ratings in the present must be as small as possible. Help site X cope with the challenging task of rating distribution. Find the optimal distribution.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 3\u00b7105) \u2014 the number of users on the site. The next line contains integer sequence a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) .",
    "output": "Print a sequence of integers b1, b2, . . . , bn. Number bi means that user i gets bi of rating as a present. The printed sequence must meet the problem conditions. If there are multiple optimal solutions, print any of them.",
    "note": "",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Semifinals",
    "url": "https://codeforces.com/problemset/problem/378/B",
    "history": "Two semifinals have just been in the running tournament. Each semifinal had n participants. There are n participants advancing to the finals, they are chosen as follows: from each semifinal, we choose k people ( 0 \u2264 2k \u2264 n) who showed the best result in their semifinals and all other places in the finals go to the people who haven' t ranked in the top k in their semifinal but got to the n - 2k of the best among the others. The tournament organizers hasn' t yet determined the k value, so the participants want to know who else has any chance to get to the finals and who can go home.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 105) \u2014 the number of participants in each semifinal. Each of the next n lines contains two integers ai and bi ( 1 \u2264 ai, bi \u2264 109) \u2014 the results of the i- th participant ( the number of milliseconds he needs to cover the semifinals distance) of the first and second semifinals, correspondingly. All results are distinct. Sequences a1, a2, . . . , an and b1, b2, . . . , bn are sorted in ascending order, i. e. in the order the participants finished in the corresponding semifinal.",
    "output": "Print two strings consisting of n characters, each equals either \" 0\" or \" 1\" . The first line should correspond to the participants of the first semifinal, the second line should correspond to the participants of the second semifinal. The i- th character in the j- th line should equal \" 1\" if the i- th participant of the j- th semifinal has any chances to advance to the finals, otherwise it should equal a \" 0\" .",
    "note": "Consider the first sample. Each semifinal has 4 participants. The results of the first semifinal are 9840, 9860, 9930, 10040. The results of the second semifinal are 9920, 9980, 10020, 10090. If k = 0, the finalists are determined by the time only, so players 9840, 9860, 9920 and 9930 advance to the finals. If k = 1, the winners from both semifinals move to the finals ( with results 9840 and 9920) , and the other places are determined by the time ( these places go to the sportsmen who run the distance in 9860 and 9930 milliseconds) . If k = 2, then first and second places advance from each seminfial, these are participants with results 9840, 9860, 9920 and 9980 milliseconds.",
    "topics": [
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Preparing for the Contest",
    "url": "https://codeforces.com/problemset/problem/377/B",
    "history": "Soon there will be held the world' s largest programming contest, but the testing system still has m bugs. The contest organizer, a well- known university, has no choice but to attract university students to fix all the bugs. The university has n students able to perform such work. The students realize that they are the only hope of the organizers, so they don' t want to work for free: the i- th student wants to get ci ' passes' in his subjects ( regardless of the volume of his work) . Bugs, like students, are not the same: every bug is characterized by complexity aj, and every student has the level of his abilities bi. Student i can fix a bug j only if the level of his abilities is not less than the complexity of the bug: bi \u2265 aj, and he does it in one day. Otherwise, the bug will have to be fixed by another student. Of course, no student can work on a few bugs in one day. All bugs are not dependent on each other, so they can be corrected in any order, and different students can work simultaneously. The university wants to fix all the bugs as quickly as possible, but giving the students the total of not more than s passes. Determine which students to use for that and come up with the schedule of work saying which student should fix which bug.",
    "input": "The first line contains three space- separated integers: n, m and s ( 1 \u2264 n, m \u2264 105, 0 \u2264 s \u2264 109) \u2014 the number of students, the number of bugs in the system and the maximum number of passes the university is ready to give the students. The next line contains m space- separated integers a1, a2, . . . , am ( 1 \u2264 ai \u2264 109) \u2014 the bugs' complexities. The next line contains n space- separated integers b1, b2, . . . , bn ( 1 \u2264 bi \u2264 109) \u2014 the levels of the students' abilities. The next line contains n space- separated integers c1, c2, . . . , cn ( 0 \u2264 ci \u2264 109) \u2014 the numbers of the passes the students want to get for their help.",
    "output": "If the university can' t correct all bugs print \" NO\" . Otherwise, on the first line print \" YES\" , and on the next line print m space- separated integers: the i- th of these numbers should equal the number of the student who corrects the i- th bug in the optimal answer. The bugs should be corrected as quickly as possible ( you must spend the minimum number of days) , and the total given passes mustn' t exceed s. If there are multiple optimal answers, you can output any of them.",
    "note": "Consider the first sample. The third student ( with level 3) must fix the 2nd and 4th bugs ( complexities 3 and 2 correspondingly) and the second student ( with level 1) must fix the 1st and 3rd bugs ( their complexity also equals 1) . Fixing each bug takes one day for each student, so it takes 2 days to fix all bugs ( the students can work in parallel) . The second student wants 3 passes for his assistance, the third student wants 6 passes. It meets the university' s capabilities as it is ready to give at most 9 passes.",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Maximum Submatrix 2",
    "url": "https://codeforces.com/problemset/problem/375/B",
    "history": "You are given a matrix consisting of digits zero and one, its size is n \u00d7 m. You are allowed to rearrange its rows. What is the maximum area of the submatrix that only consists of ones and can be obtained in the given problem by the described operations? Let' s assume that the rows of matrix a are numbered from 1 to n from top to bottom and the columns are numbered from 1 to m from left to right. A matrix cell on the intersection of the i- th row and the j- th column can be represented as ( i, j) . Formally, a submatrix of matrix a is a group of four integers d, u, l, r ( 1 \u2264 d \u2264 u \u2264 n; 1 \u2264 l \u2264 r \u2264 m) . We will assume that the submatrix contains cells ( i, j) ( d \u2264 i \u2264 u; l \u2264 j \u2264 r) . The area of the submatrix is the number of cells it contains.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 5000) . Next n lines contain m characters each \u2014 matrix a. Matrix a only contains characters: \" 0\" and \" 1\" . Note that the elements of the matrix follow without any spaces in the lines.",
    "output": "Print a single integer \u2014 the area of the maximum obtained submatrix. If we cannot obtain a matrix of numbers one, print 0.",
    "note": "",
    "topics": [
      "data structures",
      "dp",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Counting Kangaroos is Fun",
    "url": "https://codeforces.com/problemset/problem/372/A",
    "history": "There are n kangaroos with pockets. Each kangaroo has a size ( integer number) . A kangaroo can go into another kangaroo' s pocket if and only if the size of kangaroo who hold the kangaroo is at least twice as large as the size of kangaroo who is held. Each kangaroo can hold at most one kangaroo, and the kangaroo who is held by another kangaroo cannot hold any kangaroos. The kangaroo who is held by another kangaroo cannot be visible from outside. Please, find a plan of holding kangaroos with the minimal number of kangaroos who is visible.",
    "input": "The first line contains a single integer \u2014 n ( 1 \u2264 n \u2264 5\u00b7105) . Each of the next n lines contains an integer si \u2014 the size of the i- th kangaroo ( 1 \u2264 si \u2264 105) .",
    "output": "Output a single integer \u2014 the optimal number of visible kangaroos.",
    "note": "",
    "topics": [
      "binary search",
      "greedy",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Mittens",
    "url": "https://codeforces.com/problemset/problem/370/C",
    "history": "A Christmas party in city S. had n children. All children came in mittens. The mittens can be of different colors, but each child had the left and the right mitten of the same color. Let' s say that the colors of the mittens are numbered with integers from 1 to m, and the children are numbered from 1 to n. Then the i- th child has both mittens of color ci. The Party had Santa Claus ( ' Father Frost' in Russian) , his granddaughter Snow Girl, the children danced around the richly decorated Christmas tree. In fact, everything was so bright and diverse that the children wanted to wear mittens of distinct colors. The children decided to swap the mittens so that each of them got one left and one right mitten in the end, and these two mittens were of distinct colors. All mittens are of the same size and fit all the children. The children started exchanging the mittens haphazardly, but they couldn' t reach the situation when each child has a pair of mittens of distinct colors. Vasily Petrov, the dad of one of the children, noted that in the general case the children' s idea may turn out impossible. Besides, he is a mathematician and he came up with such scheme of distributing mittens that the number of children that have distinct- colored mittens was maximum. You task is to repeat his discovery. Note that the left and right mittens are different: each child must end up with one left and one right mitten.",
    "input": "The first line contains two integers n and m \u2014 the number of the children and the number of possible mitten colors ( 1 \u2264 n \u2264 5000, 1 \u2264 m \u2264 100) . The second line contains n integers c1, c2, . . . cn, where ci is the color of the mittens of the i- th child ( 1 \u2264 ci \u2264 m) .",
    "output": "In the first line, print the maximum number of children who can end up with a distinct- colored pair of mittens. In the next n lines print the way the mittens can be distributed in this case. On the i- th of these lines print two space- separated integers: the color of the left and the color of the right mitten the i- th child will get. If there are multiple solutions, you can print any of them.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Sereja and the Arrangement of Numbers",
    "url": "https://codeforces.com/problemset/problem/367/C",
    "history": "Let' s call an array consisting of n integer numbers a1, a2, . . . , an, beautiful if it has the following property: consider all pairs of numbers x, y ( x = \u0338 y) , such that number x occurs in the array a and number y occurs in the array a; for each pair x, y must exist some position j ( 1 \u2264 j < n) , such that at least one of the two conditions are met, either aj = x, aj + 1 = y, or aj = y, aj + 1 = x. Sereja wants to build a beautiful array a, consisting of n integers. But not everything is so easy, Sereja' s friend Dima has m coupons, each contains two integers qi, wi. Coupon i costs wi and allows you to use as many numbers qi as you want when constructing the array a. Values qi are distinct. Sereja has no coupons, so Dima and Sereja have made the following deal. Dima builds some beautiful array a of n elements. After that he takes wi rubles from Sereja for each qi, which occurs in the array a. Sereja believed his friend and agreed to the contract, and now he is wondering, what is the maximum amount of money he can pay. Help Sereja, find the maximum amount of money he can pay to Dima.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 2\u00b7106, 1 \u2264 m \u2264 105) . Next m lines contain pairs of integers. The i- th line contains numbers qi, wi ( 1 \u2264 qi, wi \u2264 105) . It is guaranteed that all qi are distinct.",
    "output": "In a single line print maximum amount of money ( in rubles) Sereja can pay. Please, do not use the",
    "note": "In the first sample Sereja can pay 5 rubles, for example, if Dima constructs the following array: [ 1, 2, 1, 2, 2] . There are another optimal arrays for this test. In the third sample Sereja can pay 100 rubles, if Dima constructs the following array: [ 2] .",
    "topics": [
      "graphs",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Petya and Staircases",
    "url": "https://codeforces.com/problemset/problem/362/B",
    "history": "Little boy Petya loves stairs very much. But he is bored from simple going up and down them \u2014 he loves jumping over several stairs at a time. As he stands on some stair, he can either jump to the next one or jump over one or two stairs at a time. But some stairs are too dirty and Petya doesn' t want to step on them. Now Petya is on the first stair of the staircase, consisting of n stairs. He also knows the numbers of the dirty stairs of this staircase. Help Petya find out if he can jump through the entire staircase and reach the last stair number n without touching a dirty stair once. One has to note that anyway Petya should step on the first and last stairs, so if the first or the last stair is dirty, then Petya cannot choose a path with clean steps only.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 109, 0 \u2264 m \u2264 3000) \u2014 the number of stairs in the staircase and the number of dirty stairs, correspondingly. The second line contains m different space- separated integers d1, d2, . . . , dm ( 1 \u2264 di \u2264 n) \u2014 the numbers of the dirty stairs ( in an arbitrary order) .",
    "output": "Print \" YES\" if Petya can reach stair number n, stepping only on the clean stairs. Otherwise print \" NO\" .",
    "note": "",
    "topics": [
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Two Heaps",
    "url": "https://codeforces.com/problemset/problem/353/B",
    "history": "Valera has 2\u00b7n cubes, each cube contains an integer from 10 to 99. He arbitrarily chooses n cubes and puts them in the first heap. The remaining cubes form the second heap. Valera decided to play with cubes. During the game he takes a cube from the first heap and writes down the number it has. Then he takes a cube from the second heap and write out its two digits near two digits he had written ( to the right of them) . In the end he obtained a single fourdigit integer \u2014 the first two digits of it is written on the cube from the first heap, and the second two digits of it is written on the second cube from the second heap. Valera knows arithmetic very well. So, he can easily count the number of distinct fourdigit numbers he can get in the game. The other question is: how to split cubes into two heaps so that this number ( the number of distinct fourdigit integers Valera can get) will be as large as possible?",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 100) . The second line contains 2\u00b7n space- separated integers ai ( 10 \u2264 ai \u2264 99) , denoting the numbers on the cubes.",
    "output": "In the first line print a single number \u2014 the maximum possible number of distinct four- digit numbers Valera can obtain. In the second line print 2\u00b7n numbers bi ( 1 \u2264 bi \u2264 2) . The numbers mean: the i- th cube belongs to the bi- th heap in your division. If there are multiple optimal ways to split the cubes into the heaps, print any of them.",
    "note": "In the first test case Valera can put the first cube in the first heap, and second cube \u2014 in second heap. In this case he obtain number 1099. If he put the second cube in the first heap, and the first cube in the second heap, then he can obtain number 9910. In both cases the maximum number of distinct integers is equal to one. In the second test case Valera can obtain numbers 1313, 1345, 2413, 2445. Note, that if he put the first and the third cubes in the first heap, he can obtain only two numbers 1324 and 1345.",
    "topics": [
      "combinatorics",
      "constructive algorithms",
      "greedy",
      "implementation",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Jeff and Periods",
    "url": "https://codeforces.com/problemset/problem/352/B",
    "history": "One day Jeff got hold of an integer sequence a1, a2, . . . , an of length n. The boy immediately decided to analyze the sequence. For that, he needs to find all values of x, for which these conditions hold: x occurs in sequence a. Consider all positions of numbers x in the sequence a ( such i, that ai = x) . These numbers, sorted in the increasing order, must form an arithmetic progression. Help Jeff, find all x that meet the problem conditions.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 105) . The next line contains integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 105) . The numbers are separated by spaces.",
    "output": "In the first line print integer t \u2014 the number of valid x. On each of the next t lines print two integers x and px, where x is current suitable value, px is the common difference between numbers in the progression ( if x occurs exactly once in the sequence, px must equal 0) . Print the pairs in the order of increasing x.",
    "note": "In the first test 2 occurs exactly once in the sequence, ergo p2 = 0.",
    "topics": [
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Looking for Owls",
    "url": "https://codeforces.com/problemset/problem/350/D",
    "history": "Emperor Palpatine loves owls very much. The emperor has some blueprints with the new Death Star, the blueprints contain n distinct segments and m distinct circles. We will consider the segments indexed from 1 to n in some way and the circles \u2014 indexed from 1 to m in some way. Palpatine defines an owl as a set of a pair of distinct circles ( i, j) ( i < j) and one segment k, such that: circles i and j are symmetrical relatively to the straight line containing segment k; circles i and j don' t have any common points; circles i and j have the same radius; segment k intersects the segment that connects the centers of circles i and j. Help Palpatine, count the number of distinct owls on the picture.",
    "input": "The first line contains two integers \u2014 n and m ( 1 \u2264 n \u2264 3\u00b7105, 2 \u2264 m \u2264 1500) . The next n lines contain four integers each, x1, y1, x2, y2 \u2014 the coordinates of the two endpoints of the segment. It' s guaranteed that each segment has positive length. The next m lines contain three integers each, xi, yi, ri \u2014 the coordinates of the center and the radius of the i- th circle. All coordinates are integers of at most 104 in their absolute value. The radius is a positive integer of at most 104. It is guaranteed that all segments and all circles are dictinct.",
    "output": "Print a single number \u2014 the answer to the problem. Please, do not use the",
    "note": "Here' s an owl from the first sample. The owl is sitting and waiting for you to count it.",
    "topics": [
      "binary search",
      "data structures",
      "geometry",
      "hashing",
      "sortings"
    ]
  },
  {
    "title": "Bombs",
    "url": "https://codeforces.com/problemset/problem/350/C",
    "history": "You' ve got a robot, its task is destroying bombs on a square plane. Specifically, the square plane contains n bombs, the i- th bomb is at point with coordinates ( xi, yi) . We know that no two bombs are at the same point and that no bomb is at point with coordinates ( 0, 0) . Initially, the robot is at point with coordinates ( 0, 0) . Also, let' s mark the robot' s current position as ( x, y) . In order to destroy all the bombs, the robot can perform three types of operations: Operation has format \" 1 k dir\" . To perform the operation robot have to move in direction dir k ( k \u2265 1) times. There are only 4 directions the robot can move in: \" R\" , \" L\" , \" U\" , \" D\" . During one move the robot can move from the current point to one of following points: ( x + 1, y) , ( x - 1, y) , ( x, y + 1) , ( x, y - 1) ( corresponding to directions) . It is forbidden to move from point ( x, y) , if at least one point on the path ( besides the destination point) contains a bomb. Operation has format \" 2\" . To perform the operation robot have to pick a bomb at point ( x, y) and put it in a special container. Thus, the robot can carry the bomb from any point to any other point. The operation cannot be performed if point ( x, y) has no bomb. It is forbidden to pick a bomb if the robot already has a bomb in its container. Operation has format \" 3\" . To perform the operation robot have to take a bomb out of the container and destroy it. You are allowed to perform this operation only if the robot is at point ( 0, 0) . It is forbidden to perform the operation if the container has no bomb. Help the robot and find the shortest possible sequence of operations he can perform to destroy all bombs on the coordinate plane.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 105) \u2014 the number of bombs on the coordinate plane. Next n lines contain two integers each. The i- th line contains numbers ( xi, yi) ( - 109 \u2264 xi, yi \u2264 109) \u2014 the coordinates of the i- th bomb. It is guaranteed that no two bombs are located at the same point and no bomb is at point ( 0, 0) .",
    "output": "In a single line print a single integer k \u2014 the minimum number of operations needed to destroy all bombs. On the next lines print the descriptions of these k operations. If there are multiple sequences, you can print any of them. It is guaranteed that there is the solution where k \u2264 106.",
    "note": "",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Mafia",
    "url": "https://codeforces.com/problemset/problem/348/A",
    "history": "One day n friends gathered together to play \" Mafia\" . During each round of the game some player must be the supervisor and other n - 1 people take part in the game. For each person we know in how many rounds he wants to be a player, not the supervisor: the i- th person wants to play ai rounds. What is the minimum number of rounds of the \" Mafia\" game they need to play to let each person play at least as many rounds as they want?",
    "input": "The first line contains integer n ( 3 \u2264 n \u2264 105) . The second line contains n space- separated integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) \u2014 the i- th number in the list is the number of rounds the i- th person wants to play.",
    "output": "In a single line print a single integer \u2014 the minimum number of game rounds the friends need to let the i- th person play at least ai rounds. Please, do not use the",
    "note": "You don' t need to know the rules of \" Mafia\" to solve this problem. If you' re curious, it' s a game Russia got from the Soviet times: http: / / en. wikipedia. org/ wiki/ Mafia_ ( party_ game) .",
    "topics": [
      "binary search",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Difference Row",
    "url": "https://codeforces.com/problemset/problem/347/A",
    "history": "You want to arrange n integers a1, a2, . . . , an in some order in a row. Let' s define the value of an arrangement as the sum of differences between all pairs of adjacent integers. More formally, let' s denote some arrangement as a sequence of integers x1, x2, . . . , xn, where sequence x is a permutation of sequence a. The value of such an arrangement is ( x1 - x2) + ( x2 - x3) + . . . + ( xn - 1 - xn) . Find the largest possible value of an arrangement. Then, output the lexicographically smallest sequence x that corresponds to an arrangement of the largest possible value.",
    "input": "The first line of the input contains integer n ( 2 \u2264 n \u2264 100) . The second line contains n space- separated integers a1, a2, . . . , an ( | ai| \u2264 1000) .",
    "output": "Print the required sequence x1, x2, . . . , xn. Sequence x should be the lexicographically smallest permutation of a that corresponds to an arrangement of the largest possible value.",
    "note": "In the sample test case, the value of the output arrangement is ( 100 - ( - 50) ) + ( ( - 50) - 0) + ( 0 - 50) + ( 50 - ( - 100) ) = 200. No other arrangement has a larger value, and among all arrangements with the value of 200, the output arrangement is the lexicographically smallest one. Sequence x1, x2, . . . , xp is lexicographically smaller than sequence y1, y2, . . . , yp if there exists an integer r ( 0 \u2264 r < p) such that x1 = y1, x2 = y2, . . . , xr = yr and xr + 1 < yr + 1.",
    "topics": [
      "constructive algorithms",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Helpful Maths",
    "url": "https://codeforces.com/problemset/problem/339/A",
    "history": "Xenia the beginner mathematician is a third year student at elementary school. She is now learning the addition operation. The teacher has written down the sum of multiple numbers. Pupils should calculate the sum. To make the calculation easier, the sum only contains numbers 1, 2 and 3. Still, that isn' t enough for Xenia. She is only beginning to count, so she can calculate a sum only if the summands follow in non- decreasing order. For example, she can' t calculate sum 1+ 3+ 2+ 1 but she can calculate sums 1+ 1+ 2 and 3+ 3. You' ve got the sum that was written on the board. Rearrange the summans and print the sum in such a way that Xenia can calculate the sum.",
    "input": "The first line contains a non- empty string s \u2014 the sum Xenia needs to count. String s contains no spaces. It only contains digits and characters \" + \" . Besides, string s is a correct sum of numbers 1, 2 and 3. String s is at most 100 characters long.",
    "output": "Print the new sum that Xenia can count.",
    "note": "",
    "topics": [
      "greedy",
      "implementation",
      "sortings",
      "strings"
    ]
  },
  {
    "title": "Eight Point Sets",
    "url": "https://codeforces.com/problemset/problem/334/B",
    "history": "Gerald is very particular to eight point sets. He thinks that any decent eight point set must consist of all pairwise intersections of three distinct integer vertical straight lines and three distinct integer horizontal straight lines, except for the average of these nine points. In other words, there must be three integers x1, x2, x3 and three more integers y1, y2, y3, such that x1 < x2 < x3, y1 < y2 < y3 and the eight point set consists of all points ( xi, yj) ( 1 \u2264 i, j \u2264 3) , except for point ( x2, y2) . You have a set of eight points. Find out if Gerald can use this set?",
    "input": "The input consists of eight lines, the i- th line contains two space- separated integers xi and yi ( 0 \u2264 xi, yi \u2264 106) . You do not have any other conditions for these points.",
    "output": "In a single line print word \" respectable\" , if the given set of points corresponds to Gerald' s decency rules, and \" ugly\" otherwise.",
    "note": "",
    "topics": [
      "sortings"
    ]
  },
  {
    "title": "Summer Earnings",
    "url": "https://codeforces.com/problemset/problem/333/E",
    "history": "Many schoolchildren look for a job for the summer, and one day, when Gerald was still a schoolboy, he also decided to work in the summer. But as Gerald was quite an unusual schoolboy, he found quite unusual work. A certain Company agreed to pay him a certain sum of money if he draws them three identical circles on a plane. The circles must not interfere with each other ( but they may touch each other) . He can choose the centers of the circles only from the n options granted by the Company. He is free to choose the radius of the circles himself ( all three radiuses must be equal) , but please note that the larger the radius is, the more he gets paid. Help Gerald earn as much as possible.",
    "input": "The first line contains a single integer n \u2014 the number of centers ( 3 \u2264 n \u2264 3000) . The following n lines each contain two integers xi, yi ( - 104 \u2264 xi, yi \u2264 104) \u2014 the coordinates of potential circle centers, provided by the Company. All given points are distinct.",
    "output": "Print a single real number \u2014 maximum possible radius of circles. The answer will be accepted if its relative or absolute error doesn' t exceed 10 - 6.",
    "note": "",
    "topics": [
      "binary search",
      "bitmasks",
      "brute force",
      "geometry",
      "sortings"
    ]
  },
  {
    "title": "Characteristics of Rectangles",
    "url": "https://codeforces.com/problemset/problem/333/D",
    "history": "Gerald found a table consisting of n rows and m columns. As a prominent expert on rectangular tables, he immediately counted the table' s properties, that is, the minimum of the numbers in the corners of the table ( minimum of four numbers) . However, he did not like the final value \u2014 it seemed to be too small. And to make this value larger, he decided to crop the table a little: delete some columns on the left and some on the right, as well as some rows from the top and some from the bottom. Find what the maximum property of the table can be after such cropping. Note that the table should have at least two rows and at least two columns left in the end. The number of cropped rows or columns from each of the four sides can be zero.",
    "input": "The first line contains two space- separated integers n and m ( 2 \u2264 n, m \u2264 1000) . The following n lines describe the table. The i- th of these lines lists the space- separated integers ai, 1, ai, 2, . . . , ai, m ( 0 \u2264 ai, j \u2264 109) \u2014 the m numbers standing in the i- th row of the table.",
    "output": "Print the answer to the problem.",
    "note": "In the first test case Gerald cannot crop the table \u2014 table contains only two rows and only two columns. In the second test case if we' ll crop the table, the table will contain zero in some corner cell. Also initially it contains two zeros in the corner cells, so the answer is 0.",
    "topics": [
      "binary search",
      "bitmasks",
      "brute force",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Students' Revenge",
    "url": "https://codeforces.com/problemset/problem/332/C",
    "history": "A student' s life is fraught with complications. Some Berland University students know this only too well. Having studied for two years, they contracted strong antipathy towards the chairperson of some department. Indeed, the person in question wasn' t the kindest of ladies to begin with: prone to reforming groups, banning automatic passes and other mean deeds. At last the students decided that she just can' t get away with all this anymore. . . The students pulled some strings on the higher levels and learned that the next University directors' meeting is going to discuss n orders about the chairperson and accept exactly p of them. There are two values assigned to each order: ai is the number of the chairperson' s hairs that turn grey if she obeys the order and bi \u2014 the displeasement of the directors if the order isn' t obeyed. The students may make the directors pass any p orders chosen by them. The students know that the chairperson will obey exactly k out of these p orders. She will pick the orders to obey in the way that minimizes first, the directors' displeasement and second, the number of hairs on her head that turn grey. The students want to choose p orders in the way that maximizes the number of hairs on the chairperson' s head that turn grey. If there are multiple ways to accept the orders, then the students are keen on maximizing the directors' displeasement with the chairperson' s actions. Help them.",
    "input": "The first line contains three integers n ( 1 \u2264 n \u2264 105) , p ( 1 \u2264 p \u2264 n) , k ( 1 \u2264 k \u2264 p) \u2014 the number of orders the directors are going to discuss, the number of orders to pass and the number of orders to be obeyed by the chairperson, correspondingly. Each of the following n lines contains two integers ai and bi ( 1 \u2264 ai, bi \u2264 109) , describing the corresponding order.",
    "output": "Print in an arbitrary order p distinct integers \u2014 the numbers of the orders to accept so that the students could carry out the revenge. The orders are indexed from 1 to n in the order they occur in the input. If there are multiple solutions, you can print any of them.",
    "note": "In the first sample one of optimal solutions is to pass orders 1, 2, 3. In this case the chairperson obeys orders number 1 and 2. She gets 10 new grey hairs in the head and the directors' displeasement will equal 3. Note that the same result can be achieved with order 4 instead of order 3. In the second sample, the chairperson can obey all the orders, so the best strategy for the students is to pick the orders with the maximum sum of ai values. The chairperson gets 58 new gray hairs and the directors' displeasement will equal 0.",
    "topics": [
      "data structures",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Oh Sweet Beaverette",
    "url": "https://codeforces.com/problemset/problem/331/A2",
    "history": "\u2014 Oh my sweet Beaverette, would you fancy a walk along a wonderful woodland belt with me? \u2014 Of course, my Smart Beaver! Let us enjoy the splendid view together. How about Friday night? At this point the Smart Beaver got rushing. Everything should be perfect by Friday, so he needed to prepare the belt to the upcoming walk. He needed to cut down several trees. Let' s consider the woodland belt as a sequence of trees. Each tree i is described by the esthetic appeal ai \u2014 some trees are very esthetically pleasing, others are ' so- so' , and some trees are positively ugly! The Smart Beaver calculated that he needed the following effects to win the Beaverette' s heart: The first objective is to please the Beaverette: the sum of esthetic appeal of the remaining trees must be maximum possible; the second objective is to surprise the Beaverette: the esthetic appeal of the first and the last trees in the resulting belt must be the same; and of course, the walk should be successful: there must be at least two trees in the woodland belt left. Now help the Smart Beaver! Which trees does he need to cut down to win the Beaverette' s heart?",
    "input": "The first line contains a single integer n \u2014 the initial number of trees in the woodland belt, 2 \u2264 n. The second line contains space- separated integers ai \u2014 the esthetic appeals of each tree. All esthetic appeals do not exceed 109 in their absolute value. to get 30 points, you need to solve the problem with constraints: n \u2264 100 ( subproblem A1) ; to get 100 points, you need to solve the problem with constraints: n \u2264 3\u00b7105 ( subproblems A1+ A2) .",
    "output": "In the first line print two integers \u2014 the total esthetic appeal of the woodland belt after the Smart Beaver' s intervention and the number of the cut down trees k. In the next line print k integers \u2014 the numbers of the trees the Beaver needs to cut down. Assume that the trees are numbered from 1 to n from left to right. If there are multiple solutions, print any of them. It is guaranteed that at least two trees have equal esthetic appeal.",
    "note": "",
    "topics": [
      "data structures",
      "sortings"
    ]
  },
  {
    "title": "Sereja and Straight Lines",
    "url": "https://codeforces.com/problemset/problem/314/D",
    "history": "Sereja placed n points on a plane. Now Sereja wants to place on the plane two straight lines, intersecting at a right angle, so that one of the straight lines intersect the Ox axis at an angle of 45 degrees and the maximum distance from the points to the straight lines were minimum. In this problem we consider the distance between points ( x1, y1) and ( x2, y2) equal | x1 - x2| + | y1 - y2| . The distance between the point and the straight lines is the minimum distance from the point to some point belonging to one of the lines. Help Sereja, find the maximum distance from the points to the optimally located straight lines.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 105) . Next n lines contain the coordinates of the lines. The i- th line contains two integers xi, yi ( | xi| , | yi| \u2264 109) .",
    "output": "In a single line print a real number \u2014 the answer to the problem. Your answer will be considered correct iff its absolute or relative error doesn' t exceed 10 - 6.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "geometry",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Ilya and Matrix",
    "url": "https://codeforces.com/problemset/problem/313/C",
    "history": "Ilya is a very good- natured lion. He likes maths. Of all mathematical objects, his favourite one is matrices. Now he' s faced a complicated matrix problem he needs to solve. He' s got a square 2n \u00d7 2n- sized matrix and 4n integers. You need to arrange all these numbers in the matrix ( put each number in a single individual cell) so that the beauty of the resulting matrix with numbers is maximum. The beauty of a 2n \u00d7 2n- sized matrix is an integer, obtained by the following algorithm: Find the maximum element in the matrix. Let' s denote it as m. If n = 0, then the beauty of the matrix equals m. Otherwise, a matrix can be split into 4 non- intersecting 2n - 1 \u00d7 2n - 1- sized submatrices, then the beauty of the matrix equals the sum of number m and other four beauties of the described submatrices. As you can see, the algorithm is recursive. Help Ilya, solve the problem and print the resulting maximum beauty of the matrix.",
    "input": "The first line contains integer 4n ( 1 \u2264 4n \u2264 2\u00b7106) . The next line contains 4n integers ai ( 1 \u2264 ai \u2264 109) \u2014 the numbers you need to arrange in the 2n \u00d7 2n- sized matrix.",
    "output": "On a single line print the maximum value of the beauty of the described matrix. Please, do not use the",
    "note": "Consider the second sample. You need to arrange the numbers in the matrix as follows: 1 23 4Then the beauty of the matrix will equal: 4 + 1 + 2 + 3 + 4 = 14.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Optimizer",
    "url": "https://codeforces.com/problemset/problem/306/B",
    "history": "A process RAM is a sequence of bytes that are indexed from 1 to n. Polycarpus' s program contains such instructions as \" memset\" , that is, the operations of filling memory cells on a segment with some value. The details are: the code only contains m instructions that look like \" set13 a_ i l_ i\" . Instruction i fills a continuous memory segment of length li, starting from cell number ai, ( that it cells with numbers ai, ai + 1, . . . , ai + li - 1) with values 13. In Polycarpus' s code, the optimizer' s task is to remove the maximum number of instructions from his code in such a way that the remaining instructions set value 13 in all the memory bytes that got this value from the code before the optimization. Also, the value 13 should be set only in the memory bytes that got this value from the code before the optimization. Your task is to implement the optimizer for such program.",
    "input": "The first line contains integers n and m ( 1 \u2264 n \u2264 2\u00b7106, 1 \u2264 m \u2264 2\u00b7105) \u2014 the number of bytes ( memory cells) and the number of instructions in Polycarpus' s code. Then m lines follow, each line contains a pair of integers ai, li ( 1 \u2264 ai \u2264 n, 1 \u2264 li \u2264 n - ai + 1) .",
    "output": "Print in the first line the sought maximum number of instructions that can be removed from the code. In the second line print the numbers of the instructions. The instructions are numbered from 1 to m in the order they appeared in the input. If there are multiple solutions, print any of them.",
    "note": "",
    "topics": [
      "data structures",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Ksusha and Array",
    "url": "https://codeforces.com/problemset/problem/299/A",
    "history": "Ksusha is a beginner coder. Today she starts studying arrays. She has array a1, a2, . . . , an, consisting of n positive integers. Her university teacher gave her a task. Find such number in the array, that all array elements are divisible by it. Help her and find the number!",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 105) , showing how many numbers the array has. The next line contains integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) \u2014 the array elements.",
    "output": "Print a single integer \u2014 the number from the array, such that all array elements are divisible by it. If such number doesn' t exist, print - 1. If there are multiple answers, you are allowed to print any of them.",
    "note": "",
    "topics": [
      "brute force",
      "number theory",
      "sortings"
    ]
  },
  {
    "title": "Spyke Talks",
    "url": "https://codeforces.com/problemset/problem/291/A",
    "history": "Polycarpus is the director of a large corporation. There are n secretaries working for the corporation, each of them corresponds via the famous Spyke VoIP system during the day. We know that when two people call each other via Spyke, the Spyke network assigns a unique ID to this call, a positive integer session number. One day Polycarpus wondered which secretaries are talking via the Spyke and which are not. For each secretary, he wrote out either the session number of his call or a 0 if this secretary wasn' t talking via Spyke at that moment. Help Polycarpus analyze these data and find out the number of pairs of secretaries that are talking. If Polycarpus has made a mistake in the data and the described situation could not have taken place, say so. Note that the secretaries can correspond via Spyke not only with each other, but also with the people from other places. Also, Spyke conferences aren' t permitted \u2014 that is, one call connects exactly two people.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 103) \u2014 the number of secretaries in Polycarpus' s corporation. The next line contains n space- separated integers: id1, id2, . . . , idn ( 0 \u2264 idi \u2264 109) . Number idi equals the number of the call session of the i- th secretary, if the secretary is talking via Spyke, or zero otherwise. Consider the secretaries indexed from 1 to n in some way.",
    "output": "Print a single integer \u2014 the number of pairs of chatting secretaries, or - 1 if Polycarpus' s got a mistake in his records and the described situation could not have taken place.",
    "note": "In the first test sample there are two Spyke calls between secretaries: secretary 2 and secretary 4, secretary 3 and secretary 5. In the second test sample the described situation is impossible as conferences aren' t allowed.",
    "topics": [
      "*special",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Polo the Penguin and Matrix",
    "url": "https://codeforces.com/problemset/problem/289/B",
    "history": "Little penguin Polo has an n \u00d7 m matrix, consisting of integers. Let' s index the matrix rows from 1 to n from top to bottom and let' s index the columns from 1 to m from left to right. Let' s represent the matrix element on the intersection of row i and column j as aij. In one move the penguin can add or subtract number d from some matrix element. Find the minimum number of moves needed to make all matrix elements equal. If the described plan is impossible to carry out, say so.",
    "input": "The first line contains three integers n, m and d ( 1 \u2264 n, m \u2264 100, 1 \u2264 d \u2264 104) \u2014 the matrix sizes and the d parameter. Next n lines contain the matrix: the j- th integer in the i- th row is the matrix element aij ( 1 \u2264 aij \u2264 104) .",
    "output": "In a single line print a single integer \u2014 the minimum number of moves the penguin needs to make all matrix elements equal. If that is impossible, print \" - 1\" ( without the quotes) .",
    "note": "",
    "topics": [
      "brute force",
      "dp",
      "implementation",
      "sortings",
      "ternary search"
    ]
  },
  {
    "title": "Tourists",
    "url": "https://codeforces.com/problemset/problem/286/D",
    "history": "A double tourist path, located at a park in Ultima Thule, is working by the following principle: We introduce the Cartesian coordinate system. At some points of time there are two tourists going ( for a walk) from points ( - 1, 0) and ( 1, 0) simultaneously. The first one is walking from ( - 1, 0) , the second one is walking from ( 1, 0) . Both tourists in a pair move at the same speed 1 ( distance unit per second) , the first one moves along line x = - 1, the second one moves along line x = 1, both of them are moving in the positive direction of the Oy axis. At some points of time walls appear. Wall ( li, ri) is a segment between points ( 0, li) and ( 0, ri) . Each wall appears immediately. The Ultima Thule government wants to learn this for each pair of tourists that walk simultaneously: for how long ( in seconds) will they not see each other? Two tourists don' t see each other if the segment that connects their positions on the plane intersects at least one wall. Two segments intersect if they share at least one point. We assume that the segments' ends belong to the segments. Help the government count the required time. Note that the walls can intersect ( in any way) or coincide.",
    "input": "The first line contains two space- separated integers n and m ( 1 \u2264 n, m \u2264 105) \u2014 the number of pairs of tourists and the number of built walls. The next m lines contain three space- separated integers li, ri and ti each ( 0 \u2264 li < ri \u2264 109, 0 \u2264 ti \u2264 109) \u2014 the wall ends and the time it appeared. The last line contains n distinct space- separated strictly increasing integers q1, q2, . . . , qn ( 0 \u2264 qi \u2264 109) \u2014 the points of time when pairs of tourists walk. All points of time are given in seconds.",
    "output": "For each pair of tourists print on a single line a single integer \u2014 the time in seconds when the two tourists from the corresponding pair won' t see each other. Print the numbers in the order in which the they go in the input.",
    "note": "",
    "topics": [
      "data structures",
      "sortings"
    ]
  },
  {
    "title": "Building Permutation",
    "url": "https://codeforces.com/problemset/problem/285/C",
    "history": "Permutation p is an ordered set of integers p1, p2, . . . , pn, consisting of n distinct positive integers, each of them doesn' t exceed n. We' ll denote the i- th element of permutation p as pi. We' ll call number n the size or the length of permutation p1, p2, . . . , pn. You have a sequence of integers a1, a2, . . . , an. In one move, you are allowed to decrease or increase any number by one. Count the minimum number of moves, needed to build a permutation from this sequence.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 3\u00b7105) \u2014 the size of the sought permutation. The second line contains n integers a1, a2, . . . , an ( - 109 \u2264 ai \u2264 109) .",
    "output": "Print a single number \u2014 the minimum number of moves. Please, do not use the",
    "note": "In the first sample you should decrease the first number by one and then increase the second number by one. The resulting permutation is ( 2, 1) . In the second sample you need 6 moves to build permutation ( 1, 3, 2) .",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Little Girl and Maximum Sum",
    "url": "https://codeforces.com/problemset/problem/276/C",
    "history": "The little girl loves the problems on array queries very much. One day she came across a rather well- known problem: you' ve got an array of n elements ( the elements of the array are indexed starting from 1) ; also, there are q queries, each one is defined by a pair of integers l_ i , r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 n) . You need to find for each query the sum of elements of the array with indexes from l_ i to r_ i , inclusive. The little girl found the problem rather boring. She decided to reorder the array elements before replying to the queries in a way that makes the sum of query replies maximum possible. Your task is to find the value of this maximum sum.",
    "input": "The first line contains two space- separated integers n ( 1 \u2264 n \u2264 2\u00b710^ 5 ) and q ( 1 \u2264 q \u2264 2\u00b710^ 5 ) \u2014 the number of elements in the array and the number of queries, correspondingly. The next line contains n space- separated integers a_ i ( 1 \u2264 a_ i \u2264 2\u00b710^ 5 ) \u2014 the array elements. Each of the following q lines contains two space- separated integers l_ i and r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 n ) \u2014 the i - th query.",
    "output": "In a single line print, a single integer \u2014 the maximum sum of query replies after the array elements are reordered. Please, do not use the",
    "note": "",
    "topics": [
      "data structures",
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Lovely Matrix",
    "url": "https://codeforces.com/problemset/problem/274/D",
    "history": "Lenny had an n \u00d7 m matrix of positive integers. He loved the matrix so much, because each row of the matrix was sorted in non- decreasing order. For the same reason he calls such matrices of integers lovely. One day when Lenny was at school his little brother was playing with Lenny' s matrix in his room. He erased some of the entries of the matrix and changed the order of some of its columns. When Lenny got back home he was very upset. Now Lenny wants to recover his matrix. Help him to find an order for the columns of the matrix so that it' s possible to fill in the erased entries of the matrix to achieve a lovely matrix again. Note, that you can fill the erased entries of the matrix with any integers.",
    "input": "The first line of the input contains two positive integers n and m ( 1 \u2264 n\u00b7m \u2264 105) . Each of the next n lines contains m space- separated integers representing the matrix. An integer - 1 shows an erased entry of the matrix. All other integers ( each of them is between 0 and 109 inclusive) represent filled entries.",
    "output": "If there exists no possible reordering of the columns print - 1. Otherwise the output should contain m integers p1, p2, . . . , pm showing the sought permutation of columns. So, the first column of the lovely matrix will be p1- th column of the initial matrix, the second column of the lovely matrix will be p2- th column of the initial matrix and so on.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "k-Multiple Free Set",
    "url": "https://codeforces.com/problemset/problem/274/A",
    "history": "A k- multiple free set is a set of integers where there is no pair of integers where one is equal to another integer multiplied by k. That is, there are no two integers x and y ( x < y) from the set, such that y = x\u00b7k. You' re given a set of n distinct positive integers. Your task is to find the size of it' s largest k- multiple free subset.",
    "input": "The first line of the input contains two integers n and k ( 1 \u2264 n \u2264 105, 1 \u2264 k \u2264 109) . The next line contains a list of n distinct positive integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) . All the numbers in the lines are separated by single spaces.",
    "output": "On the only line of the output print the size of the largest k- multiple free subset of a1, a2, . . . , an.",
    "note": "In the sample input one of the possible maximum 2- multiple free subsets is 4, 5, 6.",
    "topics": [
      "binary search",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Dima and Two Sequences",
    "url": "https://codeforces.com/problemset/problem/272/D",
    "history": "Little Dima has two sequences of points with integer coordinates: sequence ( a1, 1) , ( a2, 2) , . . . , ( an, n) and sequence ( b1, 1) , ( b2, 2) , . . . , ( bn, n) . Now Dima wants to count the number of distinct sequences of points of length 2\u00b7n that can be assembled from these sequences, such that the x- coordinates of points in the assembled sequence will not decrease. Help him with that. Note that each element of the initial sequences should be used exactly once in the assembled sequence. Dima considers two assembled sequences ( p1, q1) , ( p2, q2) , . . . , ( p2\u00b7n, q2\u00b7n) and ( x1, y1) , ( x2, y2) , . . . , ( x2\u00b7n, y2\u00b7n) distinct, if there is such i ( 1 \u2264 i \u2264 2\u00b7n) , that ( pi, qi) = \u0338 ( xi, yi) . As the answer can be rather large, print the remainder from dividing the answer by number m.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 105) . The second line contains n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) . The third line contains n integers b1, b2, . . . , bn ( 1 \u2264 bi \u2264 109) . The numbers in the lines are separated by spaces. The last line contains integer m ( 2 \u2264 m \u2264 109 + 7) .",
    "output": "In the single line print the remainder after dividing the answer to the problem by number m.",
    "note": "In the first sample you can get only one sequence: ( 1, 1) , ( 2, 1) . In the second sample you can get such sequences : ( 1, 1) , ( 2, 2) , ( 2, 1) , ( 3, 2) ; ( 1, 1) , ( 2, 1) , ( 2, 2) , ( 3, 2) . Thus, the answer is 2.",
    "topics": [
      "combinatorics",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Maximum Waterfall",
    "url": "https://codeforces.com/problemset/problem/269/D",
    "history": "Emuskald was hired to design an artificial waterfall according to the latest trends in landscape architecture. A modern artificial waterfall consists of multiple horizontal panels affixed to a wide flat wall. The water flows down the top of the wall from panel to panel until it reaches the bottom of the wall. The wall has height t and has n panels on the wall. Each panel is a horizontal segment at height hi which begins at li and ends at ri. The i- th panel connects the points ( li, hi) and ( ri, hi) of the plane. The top of the wall can be considered a panel connecting the points ( - 109, t) and ( 109, t) . Similarly, the bottom of the wall can be considered a panel connecting the points ( - 109, 0) and ( 109, 0) . No two panels share a common point. Emuskald knows that for the waterfall to be aesthetically pleasing, it can flow from panel i to panel j ( ) only if the following conditions hold: max( li, lj) < min( ri, rj) ( horizontal projections of the panels overlap) ; hj < hi ( panel j is below panel i) ; there is no such panel k ( hj < hk < hi) that the first two conditions hold for the pairs ( i, k) and ( k, j) . Then the flow for is equal to min( ri, rj) - max( li, lj) , the length of their horizontal projection overlap. Emuskald has decided that in his waterfall the water will flow in a single path from top to bottom. If water flows to a panel ( except the bottom of the wall) , the water will fall further to exactly one lower panel. The total amount of water flow in the waterfall is then defined as the minimum horizontal projection overlap between two consecutive panels in the path of the waterfall. Formally: the waterfall consists of a single path of panels ; the flow of the waterfall is the minimum flow in the path . To make a truly great waterfall Emuskald must maximize this water flow, but there are too many panels and he is having a hard time planning his creation. Below is an example of a waterfall Emuskald wants: Help Emuskald maintain his reputation and find the value of the maximum possible water flow.",
    "input": "The first line of input contains two space- separated integers n and t ( 1 \u2264 n \u2264 105, 2 \u2264 t \u2264 109) , the number of the panels excluding the top and the bottom panels, and the height of the wall. Each of the n following lines contain three space- separated integers hi, li and ri ( 0 < hi < t, - 109 \u2264 li < ri \u2264 109) , the height, left and right ends of the i- th panel segment. It is guaranteed that no two segments share a common point.",
    "output": "Output a single integer \u2014 the maximum possible amount of water flow in the desired waterfall.",
    "note": "The first test case corresponds to the picture.",
    "topics": [
      "data structures",
      "dp",
      "graphs",
      "sortings"
    ]
  },
  {
    "title": "Playlist",
    "url": "https://codeforces.com/problemset/problem/268/E",
    "history": "Manao' s friends often send him new songs. He never listens to them right away. Instead, he compiles them into a playlist. When he feels that his mind is open to new music, he opens the playlist and starts to listen to the songs. Of course, there are some songs that Manao doesn' t particuarly enjoy. To get more pleasure from the received songs, he invented the following procedure of listening to the playlist: If after listening to some song Manao realizes that he liked it, then he remembers it and starts to listen to the next unlistened song. If after listening to some song Manao realizes that he did not like it, he listens to all the songs he liked up to this point and then begins to listen to the next unlistened song. For example, if Manao has four songs in the playlist, A, B, C, D ( in the corresponding order) and he is going to like songs A and C in the end, then the order of listening is the following: Manao listens to A, he likes it, he remembers it. Manao listens to B, he does not like it, so he listens to A, again. Manao listens to C, he likes the song and he remembers it, too. Manao listens to D, but does not enjoy it and re- listens to songs A and C. That is, in the end Manao listens to song A three times, to song C twice and songs B and D once. Note that if Manao once liked a song, he will never dislike it on a subsequent listening. Manao has received n songs: the i- th of them is li seconds long and Manao may like it with a probability of pi percents. The songs could get on Manao' s playlist in any order, so Manao wants to know the maximum expected value of the number of seconds after which the listening process will be over, for all possible permutations of the songs in the playlist.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 50000) . The i- th of the following n lines contains two integers, separated by a single space \u2014 li and pi ( 15 \u2264 li \u2264 1000, 0 \u2264 pi \u2264 100) \u2014 the length of the i- th song in seconds and the probability that Manao will like the song, in percents.",
    "output": "In a single line print a single real number \u2014 the maximum expected listening time over all permutations of songs. The answer will be considered valid if the absolute or relative error does not exceed 10 - 9.",
    "note": "Consider the first test case. If Manao listens to the songs in the order in which they were originally compiled, the mathematical expectation will be equal to 467. 5 seconds. The maximum expected value is obtained by putting the first song at the end of the playlist. Consider the second test case. The song which is 360 seconds long should be listened to first. The song 300 seconds long which Manao will dislike for sure should be put in the end.",
    "topics": [
      "math",
      "probabilities",
      "sortings"
    ]
  },
  {
    "title": "Squares",
    "url": "https://codeforces.com/problemset/problem/263/B",
    "history": "Vasya has found a piece of paper with a coordinate system written on it. There are n distinct squares drawn in this coordinate system. Let' s number the squares with integers from 1 to n. It turned out that points with coordinates ( 0, 0) and ( ai, ai) are the opposite corners of the i- th square. Vasya wants to find such integer point ( with integer coordinates) of the plane, that belongs to exactly k drawn squares. We' ll say that a point belongs to a square, if the point is located either inside the square, or on its boundary. Help Vasya find a point that would meet the described limits.",
    "input": "The first line contains two space- separated integers n, k ( 1 \u2264 n, k \u2264 50) . The second line contains space- separated integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) . It is guaranteed that all given squares are distinct.",
    "output": "In a single line print two space- separated integers x and y ( 0 \u2264 x, y \u2264 109) \u2014 the coordinates of the point that belongs to exactly k squares. If there are multiple answers, you are allowed to print any of them. If there is no answer, print \" - 1\" ( without the quotes) .",
    "note": "",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Maxim and Discounts",
    "url": "https://codeforces.com/problemset/problem/261/A",
    "history": "Maxim always goes to the supermarket on Sundays. Today the supermarket has a special offer of discount systems. There are m types of discounts. We assume that the discounts are indexed from 1 to m. To use the discount number i, the customer takes a special basket, where he puts exactly qi items he buys. Under the terms of the discount system, in addition to the items in the cart the customer can receive at most two items from the supermarket for free. The number of the \" free items\" ( 0, 1 or 2) to give is selected by the customer. The only condition imposed on the selected \" free items\" is as follows: each of them mustn' t be more expensive than the cheapest item out of the qi items in the cart. Maxim now needs to buy n items in the shop. Count the minimum sum of money that Maxim needs to buy them, if he use the discount system optimally well. Please assume that the supermarket has enough carts for any actions. Maxim can use the same discount multiple times. Of course, Maxim can buy items without any discounts.",
    "input": "The first line contains integer m ( 1 \u2264 m \u2264 105) \u2014 the number of discount types. The second line contains m integers: q1, q2, . . . , qm ( 1 \u2264 qi \u2264 105) . The third line contains integer n ( 1 \u2264 n \u2264 105) \u2014 the number of items Maxim needs. The fourth line contains n integers: a1, a2, . . . , an ( 1 \u2264 ai \u2264 104) \u2014 the items' prices. The numbers in the lines are separated by single spaces.",
    "output": "In a single line print a single integer \u2014 the answer to the problem.",
    "note": "In the first sample Maxim needs to buy two items that cost 100 and get a discount for two free items that cost 50. In that case, Maxim is going to pay 200. In the second sample the best strategy for Maxim is to buy 3 items and get 2 items for free using the discount. In that case, Maxim is going to pay 150.",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Sockets",
    "url": "https://codeforces.com/problemset/problem/257/A",
    "history": "Vasya has got many devices that work on electricity. He' s got n supply- line filters to plug the devices, the i- th supply- line filter has ai sockets. Overall Vasya has got m devices and k electrical sockets in his flat, he can plug the devices or supply- line filters directly. Of course, he can plug the supply- line filter to any other supply- line filter. The device ( or the supply- line filter) is considered plugged to electricity if it is either plugged to one of k electrical sockets, or if it is plugged to some supply- line filter that is in turn plugged to electricity. What minimum number of supply- line filters from the given set will Vasya need to plug all the devices he has to electricity? Note that all devices and supply- line filters take one socket for plugging and that he can use one socket to plug either one device or one supply- line filter.",
    "input": "The first line contains three integers n, m, k ( 1 \u2264 n, m, k \u2264 50) \u2014 the number of supply- line filters, the number of devices and the number of sockets that he can plug to directly, correspondingly. The second line contains n space- separated integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 50) \u2014 number ai stands for the number of sockets on the i- th supply- line filter.",
    "output": "Print a single number \u2014 the minimum number of supply- line filters that is needed to plug all the devices to electricity. If it is impossible to plug all the devices even using all the supply- line filters, print - 1.",
    "note": "In the first test case he can plug the first supply- line filter directly to electricity. After he plug it, he get 5 ( 3 on the supply- line filter and 2 remaining sockets for direct plugging) available sockets to plug. Thus, one filter is enough to plug 5 devices. One of the optimal ways in the second test sample is to plug the second supply- line filter directly and plug the fourth supply- line filter to one of the sockets in the second supply- line filter. Thus, he gets exactly 7 sockets, available to plug: one to plug to the electricity directly, 2 on the second supply- line filter, 4 on the fourth supply- line filter. There' s no way he can plug 7 devices if he use one supply- line filter.",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Cards with Numbers",
    "url": "https://codeforces.com/problemset/problem/254/A",
    "history": "Petya has got 2n cards, each card contains some integer. The numbers on the cards can be the same. Let' s index all cards by consecutive integers from 1 to 2n. We' ll denote the number that is written on a card with number i, as ai. In order to play one entertaining game with his friends, Petya needs to split the cards into pairs so that each pair had equal numbers on the cards. Help Petya do that.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 3\u00b7105) . The second line contains the sequence of 2n positive integers a1, a2, . . . , a2n ( 1 \u2264 ai \u2264 5000) \u2014 the numbers that are written on the cards. The numbers on the line are separated by single spaces.",
    "output": "If it is impossible to divide the cards into pairs so that cards in each pair had the same numbers, print on a single line integer - 1. But if the required partition exists, then print n pairs of integers, a pair per line \u2014 the indices of the cards that form the pairs. Separate the numbers on the lines by spaces. You can print the pairs and the numbers in the pairs in any order. If there are multiple solutions, print any of them.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "sortings"
    ]
  },
  {
    "title": "Printer",
    "url": "https://codeforces.com/problemset/problem/253/E",
    "history": "Let' s consider a network printer that functions like that. It starts working at time 0. In each second it can print one page of a text. At some moments of time the printer receives printing tasks. We know that a printer received n tasks. Let' s number the tasks by consecutive integers from 1 to n. Then the task number i is characterised by three integers: ti is the time when the task came, si is the task' s volume ( in pages) and pi is the task' s priority. The priorities of all tasks are distinct. When the printer receives a task, the task goes to the queue and remains there until all pages from this task are printed. The printer chooses a page to print each time when it either stops printing some page or when it is free and receives a new task. Among all tasks that are in the queue at this moment, the printer chooses the task with the highest priority and next second prints an unprinted page from this task. You can assume that a task goes to the queue immediately, that' s why if a task has just arrived by time t, the printer can already choose it for printing. You are given full information about all tasks except for one: you don' t know this task' s priority. However, we know the time when the last page from this task was finished printing. Given this information, find the unknown priority value and determine the moments of time when the printer finished printing each task.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 50000) . Next n lines describe the tasks. The i- th of these lines contains three integers ti, si and pi, separated by single spaces ( 0 \u2264 ti \u2264 109, 1 \u2264 si, pi \u2264 109) . Exactly one task ( let' s assume that his number is x) has number - 1 written instead of the priority. All priorities are different. The last line contains integer T \u2014 the time when the printer finished printing the last page of task x ( 1 \u2264 T \u2264 1015) . Numbers ti are not necessarily distinct. The tasks in the input are written in the arbitrary order.",
    "output": "In the first line print integer px \u2014 the priority of the task number x ( 1 \u2264 px \u2264 109, remember that all priorities should be distinct) . Then print n integers, the i- th of them represents the moment of time when the last page of the task number i finished printing. It is guaranteed that at least one solution exists. If there are multiple solutions, print any of them.",
    "note": "Let' s consider the first test case. Let' s assume that the unknown priority equals 4, then the printer' s actions for each second are as follows: the beginning of the 1- st second ( time 0) . The queue has task 2. The printer prints the first page of this task; the beginning of the 2- nd second ( time 1) . The queue has tasks 2 and 3. The printer prints the first page of task 3; the beginning of the 3- rd second ( time 2) . The queue has tasks 2 and 3. The printer prints the second page of task 3; the beginning of the 4- th second ( time 3) . The queue has tasks 2 and 3. The printer prints the third ( last) page of task 3. Thus, by the end of the 4- th second this task will have been printed; the beginning of the 5- th second ( time 4) . The queue has tasks 2 and 1. The printer prints the first page of task 1; the beginning of the 6- th second ( time 5) . The queue has tasks 2 and 1. The printer prints the second page of task 1; the beginning of the 7- th second ( time 6) . The queue has tasks 2 and 1. The printer prints the third ( last) page of task 1. Thus, by the end of the 7- th second this task will have been printed; the beginning of the 8- th second ( time 7) . The queue has task 2. The printer prints the second ( last) page of task 2. Thus, by the end of the 8- th second this task will have been printed. In the end, task number 1 will have been printed by the end of the 7- th second, as was required. And tasks 2 and 3 are printed by the end of the of the 8- th and the 4- th second correspondingly.",
    "topics": [
      "binary search",
      "data structures",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Physics Practical",
    "url": "https://codeforces.com/problemset/problem/253/B",
    "history": "One day Vasya was on a physics practical, performing the task on measuring the capacitance. He followed the teacher' s advice and did as much as n measurements, and recorded the results in the notebook. After that he was about to show the results to the teacher, but he remembered that at the last lesson, the teacher had made his friend Petya redo the experiment because the largest and the smallest results differed by more than two times. Vasya is lazy, and he does not want to redo the experiment. He wants to do the task and go home play computer games. So he decided to cheat: before Vasya shows the measurements to the teacher, he will erase some of them, so as to make the largest and the smallest results of the remaining measurements differ in no more than two times. In other words, if the remaining measurements have the smallest result x, and the largest result y, then the inequality y \u2264 2\u00b7x must fulfill. Of course, to avoid the teacher' s suspicion, Vasya wants to remove as few measurement results as possible from his notes. Help Vasya, find what minimum number of measurement results he will have to erase from his notes so that the largest and the smallest of the remaining results of the measurements differed in no more than two times.",
    "input": "The first line contains integer n ( 2 \u2264 n \u2264 105) \u2014 the number of measurements Vasya made. The second line contains n integers c1, c2, . . . , cn ( 1 \u2264 ci \u2264 5000) \u2014 the results of the measurements. The numbers on the second line are separated by single spaces.",
    "output": "Print a single integer \u2014 the minimum number of results Vasya will have to remove.",
    "note": "In the first sample you can remove the fourth and the sixth measurement results ( values 8 and 7) . Then the maximum of the remaining values will be 5, and the minimum one will be 3. Or else, you can remove the third and fifth results ( both equal 3) . After that the largest remaining result will be 8, and the smallest one will be 4.",
    "topics": [
      "binary search",
      "dp",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Unsorting Array",
    "url": "https://codeforces.com/problemset/problem/252/B",
    "history": "Little Petya likes arrays of integers a lot. Recently his mother has presented him one such array consisting of n elements. Petya is now wondering whether he can swap any two distinct integers in the array so that the array got unsorted. Please note that Petya can not swap equal integers even if they are in distinct positions in the array. Also note that Petya must swap some two integers even if the original array meets all requirements. Array a ( the array elements are indexed from 1) consisting of n elements is called sorted if it meets at least one of the following two conditions: a1 \u2264 a2 \u2264 . . . \u2264 an; a1 \u2265 a2 \u2265 . . . \u2265 an. Help Petya find the two required positions to swap or else say that they do not exist.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 105) . The second line contains n non- negative space- separated integers a1, a2, . . . , an \u2014 the elements of the array that Petya' s mother presented him. All integers in the input do not exceed 109.",
    "output": "If there is a pair of positions that make the array unsorted if swapped, then print the numbers of these positions separated by a space. If there are several pairs of positions, print any of them. If such pair does not exist, print - 1. The positions in the array are numbered with integers from 1 to n.",
    "note": "In the first two samples the required pairs obviously don' t exist. In the third sample you can swap the first two elements. After that the array will look like this: 2 1 3 4. This array is unsorted.",
    "topics": [
      "brute force",
      "sortings"
    ]
  },
  {
    "title": "Donkey and Stars",
    "url": "https://codeforces.com/problemset/problem/249/D",
    "history": "In the evenings Donkey would join Shrek to look at the stars. They would sit on a log, sipping tea and they would watch the starry sky. The sky hung above the roof, right behind the chimney. Shrek' s stars were to the right of the chimney and the Donkey' s stars were to the left. Most days the Donkey would just count the stars, so he knew that they are exactly n. This time he wanted a challenge. He imagined a coordinate system: he put the origin of the coordinates at the intersection of the roof and the chimney, directed the OX axis to the left along the roof and the OY axis \u2014 up along the chimney ( see figure) . The Donkey imagined two rays emanating from he origin of axes at angles \u03b11 and \u03b12 to the OX axis. Now he chooses any star that lies strictly between these rays. After that he imagines more rays that emanate from this star at the same angles \u03b11 and \u03b12 to the OX axis and chooses another star that lies strictly between the new rays. He repeats the operation as long as there still are stars he can choose between the rays that emanate from a star. As a result, the Donkey gets a chain of stars. He can consecutively get to each star if he acts by the given rules. Your task is to find the maximum number of stars m that the Donkey' s chain can contain. Note that the chain must necessarily start in the point of the origin of the axes, that isn' t taken into consideration while counting the number m of stars in the chain.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 105) \u2014 the number of stars. The second line contains simple fractions representing relationships \" a/ b c/ d\" , such that and ( 0 \u2264 a, b, c, d \u2264 105; ; ; ) . The given numbers a, b, c, d are integers. Next n lines contain pairs of integers xi, yi ( 1 \u2264 xi, yi \u2264 105) \u2014 the stars' coordinates. It is guaranteed that all stars have distinct coordinates.",
    "output": "In a single line print number m \u2014 the answer to the problem.",
    "note": "In the sample the longest chain the Donkey can build consists of four stars. Note that the Donkey can' t choose the stars that lie on the rays he imagines.",
    "topics": [
      "data structures",
      "dp",
      "geometry",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Blood Cousins Return",
    "url": "https://codeforces.com/problemset/problem/246/E",
    "history": "Polycarpus got hold of a family tree. The found tree describes the family relations of n people, numbered from 1 to n. Every person in this tree has at most one direct ancestor. Also, each person in the tree has a name, the names are not necessarily unique. We call the man with a number a a 1- ancestor of the man with a number b, if the man with a number a is a direct ancestor of the man with a number b. We call the man with a number a a k- ancestor ( k > 1) of the man with a number b, if the man with a number b has a 1- ancestor, and the man with a number a is a ( k - 1) - ancestor of the 1- ancestor of the man with a number b. In the tree the family ties do not form cycles. In other words there isn' t a person who is his own direct or indirect ancestor ( that is, who is an x- ancestor of himself, for some x, x > 0) . We call a man with a number a the k- son of the man with a number b, if the man with a number b is a k- ancestor of the man with a number a. Polycarpus is very much interested in how many sons and which sons each person has. He took a piece of paper and wrote m pairs of numbers vi, ki. Help him to learn for each pair vi, ki the number of distinct names among all names of the ki- sons of the man with number vi.",
    "input": "The first line of the input contains a single integer n ( 1 \u2264 n \u2264 105) \u2014 the number of people in the tree. Next n lines contain the description of people in the tree. The i- th line contains space- separated string si and integer ri ( 0 \u2264 ri \u2264 n) , where si is the name of the man with a number i, and ri is either the number of the direct ancestor of the man with a number i or 0, if the man with a number i has no direct ancestor. The next line contains a single integer m ( 1 \u2264 m \u2264 105) \u2014 the number of Polycarpus' s records. Next m lines contain space- separated pairs of integers. The i- th line contains integers vi, ki ( 1 \u2264 vi, ki \u2264 n) . It is guaranteed that the family relationships do not form cycles. The names of all people are non- empty strings, consisting of no more than 20 lowercase English letters.",
    "output": "Print m whitespace- separated integers \u2014 the answers to Polycarpus' s records. Print the answers to the records in the order, in which the records occur in the input.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "dfs and similar",
      "dp",
      "sortings"
    ]
  },
  {
    "title": "Buggy Sorting",
    "url": "https://codeforces.com/problemset/problem/246/A",
    "history": "Little boy Valera studies an algorithm of sorting an integer array. After studying the theory, he went on to the practical tasks. As a result, he wrote a program that sorts an array of n integers a1, a2, . . . , an in the non- decreasing order. The pseudocode of the program, written by Valera, is given below. The input of the program gets number n and array a. loop integer variable i from 1 to n - 1 loop integer variable j from i to n - 1 if ( aj > aj + 1) , then swap the values of elements aj and aj + 1But Valera could have made a mistake, because he hasn' t yet fully learned the sorting algorithm. If Valera made a mistake in his program, you need to give a counter- example that makes his program work improperly ( that is, the example that makes the program sort the array not in the non- decreasing order) . If such example for the given value of n doesn' t exist, print - 1.",
    "input": "You' ve got a single integer n ( 1 \u2264 n \u2264 50) \u2014 the size of the sorted array.",
    "output": "Print n space- separated integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 100) \u2014 the counter- example, for which Valera' s algorithm won' t work correctly. If the counter- example that meets the described conditions is impossible to give, print - 1. If there are several counter- examples, consisting of n numbers, you are allowed to print any of them.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Hydra",
    "url": "https://codeforces.com/problemset/problem/243/B",
    "history": "One day Petya got a birthday present from his mom: a book called \" The Legends and Myths of Graph Theory\" . From this book Petya learned about a hydra graph. A non- oriented graph is a hydra, if it has a structure, shown on the figure below. Namely, there are two nodes u and v connected by an edge, they are the hydra' s chest and stomach, correspondingly. The chest is connected with h nodes, which are the hydra' s heads. The stomach is connected with t nodes, which are the hydra' s tails. Note that the hydra is a tree, consisting of h + t + 2 nodes. Also, Petya' s got a non- directed graph G, consisting of n nodes and m edges. Petya got this graph as a last year birthday present from his mom. Graph G contains no self- loops or multiple edges. Now Petya wants to find a hydra in graph G. Or else, to make sure that the graph doesn' t have a hydra.",
    "input": "The first line contains four integers n, m, h, t ( 1 \u2264 n, m \u2264 105, 1 \u2264 h, t \u2264 100) \u2014 the number of nodes and edges in graph G, and the number of a hydra' s heads and tails. Next m lines contain the description of the edges of graph G. The i- th of these lines contains two integers ai and bi ( 1 \u2264 ai, bi \u2264 n, a = \u0338 b) \u2014 the numbers of the nodes, connected by the i- th edge. It is guaranteed that graph G contains no self- loops and multiple edges. Consider the nodes of graph G numbered with integers from 1 to n.",
    "output": "If graph G has no hydra, print \" NO\" ( without the quotes) . Otherwise, in the first line print \" YES\" ( without the quotes) . In the second line print two integers \u2014 the numbers of nodes u and v. In the third line print h numbers \u2014 the numbers of the nodes that are the heads. In the fourth line print t numbers \u2014 the numbers of the nodes that are the tails. All printed numbers should be distinct. If there are multiple possible answers, you are allowed to print any of them.",
    "note": "The first sample is depicted on the picture below:",
    "topics": [
      "graphs",
      "sortings"
    ]
  },
  {
    "title": "Big Segment",
    "url": "https://codeforces.com/problemset/problem/242/B",
    "history": "A coordinate line has n segments, the i- th segment starts at the position li and ends at the position ri. We will denote such a segment as [ li, ri] . You have suggested that one of the defined segments covers all others. In other words, there is such segment in the given set, which contains all other ones. Now you want to test your assumption. Find in the given set the segment which covers all other segments, and print its number. If such a segment doesn' t exist, print - 1. Formally we will assume that segment [ a, b] covers segment [ c, d] , if they meet this condition a \u2264 c \u2264 d \u2264 b.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 105) \u2014 the number of segments. Next n lines contain the descriptions of the segments. The i- th line contains two space- separated integers li, ri ( 1 \u2264 li \u2264 ri \u2264 109) \u2014 the borders of the i- th segment. It is guaranteed that no two segments coincide.",
    "output": "Print a single integer \u2014 the number of the segment that covers all other segments in the set. If there' s no solution, print - 1. The segments are numbered starting from 1 in the order in which they appear in the input.",
    "note": "",
    "topics": [
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Young Table",
    "url": "https://codeforces.com/problemset/problem/237/B",
    "history": "You' ve got table a, consisting of n rows, numbered from 1 to n. The i- th line of table a contains ci cells, at that for all i ( 1 < i \u2264 n) holds ci \u2264 ci - 1. Let' s denote s as the total number of cells of table a, that is, . We know that each cell of the table contains a single integer from 1 to s, at that all written integers are distinct. Let' s assume that the cells of the i- th row of table a are numbered from 1 to ci, then let' s denote the number written in the j- th cell of the i- th row as ai, j. Your task is to perform several swap operations to rearrange the numbers in the table so as to fulfill the following conditions: for all i, j ( 1 < i \u2264 n; 1 \u2264 j \u2264 ci) holds ai, j > ai - 1, j; for all i, j ( 1 \u2264 i \u2264 n; 1 < j \u2264 ci) holds ai, j > ai, j - 1. In one swap operation you are allowed to choose two different cells of the table and swap the recorded there numbers, that is the number that was recorded in the first of the selected cells before the swap, is written in the second cell after it. Similarly, the number that was recorded in the second of the selected cells, is written in the first cell after the swap. Rearrange the numbers in the required manner. Note that you are allowed to perform any number of operations, but not more than s. You do not have to minimize the number of operations.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 50) that shows the number of rows in the table. The second line contains n space- separated integers ci ( 1 \u2264 ci \u2264 50; ci \u2264 ci - 1) \u2014 the numbers of cells on the corresponding rows. Next n lines contain table \u0430. The i- th of them contains ci space- separated integers: the j- th integer in this line represents ai, j. It is guaranteed that all the given numbers ai, j are positive and do not exceed s. It is guaranteed that all ai, j are distinct.",
    "output": "In the first line print a single integer m ( 0 \u2264 m \u2264 s) , representing the number of performed swaps. In the next m lines print the description of these swap operations. In the i- th line print four space- separated integers xi, yi, pi, qi ( 1 \u2264 xi, pi \u2264 n; 1 \u2264 yi \u2264 cxi; 1 \u2264 qi \u2264 cpi) . The printed numbers denote swapping the contents of cells axi, yi and api, qi. Note that a swap operation can change the contents of distinct table cells. Print the swaps in the order, in which they should be executed.",
    "note": "",
    "topics": [
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Reading",
    "url": "https://codeforces.com/problemset/problem/234/B",
    "history": "Vasya is going to the Olympics in the city Ntown by train. The boy wants to read the textbook to prepare for the Olympics. He counted that he needed k hours for this. He also found that the light in the train changes every hour. The light is measured on a scale from 0 to 100, where 0 is very dark, and 100 is very light. Vasya has a train lighting schedule for all n hours of the trip \u2014 n numbers from 0 to 100 each ( the light level in the first hour, the second hour and so on) . During each of those hours he will either read the whole time, or not read at all. He wants to choose k hours to read a book, not necessarily consecutive, so that the minimum level of light among the selected hours were maximum. Vasya is very excited before the upcoming contest, help him choose reading hours.",
    "input": "The first input line contains two integers n and k ( 1 \u2264 n \u2264 1000, 1 \u2264 k \u2264 n) \u2014 the number of hours on the train and the number of hours to read, correspondingly. The second line contains n space- separated integers ai ( 0 \u2264 ai \u2264 100) , ai is the light level at the i- th hour.",
    "output": "In the first output line print the minimum light level Vasya will read at. In the second line print k distinct space- separated integers b1, b2, . . . , bk, \u2014 the indexes of hours Vasya will read at ( 1 \u2264 bi \u2264 n) . The hours are indexed starting from 1. If there are multiple optimal solutions, print any of them. Print the numbers bi in an arbitrary order.",
    "note": "In the first sample Vasya should read at the first hour ( light 20) , third hour ( light 30) and at the fourth hour ( light 40) . The minimum light Vasya will have to read at is 20.",
    "topics": [
      "sortings"
    ]
  },
  {
    "title": "To Add or Not to Add",
    "url": "https://codeforces.com/problemset/problem/231/C",
    "history": "A piece of paper contains an array of n integers a1, a2, . . . , an. Your task is to find a number that occurs the maximum number of times in this array. However, before looking for such number, you are allowed to perform not more than k following operations \u2014 choose an arbitrary element from the array and add 1 to it. In other words, you are allowed to increase some array element by 1 no more than k times ( you are allowed to increase the same element of the array multiple times) . Your task is to find the maximum number of occurrences of some number in the array after performing no more than k allowed operations. If there are several such numbers, your task is to find the minimum one.",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 105; 0 \u2264 k \u2264 109) \u2014 the number of elements in the array and the number of operations you are allowed to perform, correspondingly. The third line contains a sequence of n integers a1, a2, . . . , an ( | ai| \u2264 109) \u2014 the initial array. The numbers in the lines are separated by single spaces.",
    "output": "In a single line print two numbers \u2014 the maximum number of occurrences of some number in the array after at most k allowed operations are performed, and the minimum number that reaches the given maximum. Separate the printed numbers by whitespaces.",
    "note": "In the first sample your task is to increase the second element of the array once and increase the fifth element of the array twice. Thus, we get sequence 6, 4, 4, 0, 4, where number 4 occurs 3 times. In the second sample you don' t need to perform a single operation or increase each element by one. If we do nothing, we get array 5, 5, 5, if we increase each by one, we get 6, 6, 6. In both cases the maximum number of occurrences equals 3. So we should do nothing, as number 5 is less than number 6. In the third sample we should increase the second array element once and the fifth element once. Thus, we get sequence 3, 2, 2, 2, 2, where number 2 occurs 4 times.",
    "topics": [
      "binary search",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Dragons",
    "url": "https://codeforces.com/problemset/problem/230/A",
    "history": "Kirito is stuck on a level of the MMORPG he is playing now. To move on in the game, he' s got to defeat all n dragons that live on this level. Kirito and the dragons have strength, which is represented by an integer. In the duel between two opponents the duel' s outcome is determined by their strength. Initially, Kirito' s strength equals s. If Kirito starts duelling with the i- th ( 1 \u2264 i \u2264 n) dragon and Kirito' s strength is not greater than the dragon' s strength xi, then Kirito loses the duel and dies. But if Kirito' s strength is greater than the dragon' s strength, then he defeats the dragon and gets a bonus strength increase by yi. Kirito can fight the dragons in any order. Determine whether he can move on to the next level of the game, that is, defeat all dragons without a single loss.",
    "input": "The first line contains two space- separated integers s and n ( 1 \u2264 s \u2264 104, 1 \u2264 n \u2264 103) . Then n lines follow: the i- th line contains space- separated integers xi and yi ( 1 \u2264 xi \u2264 104, 0 \u2264 yi \u2264 104) \u2014 the i- th dragon' s strength and the bonus for defeating it.",
    "output": "On a single line print \" YES\" ( without the quotes) , if Kirito can move on to the next level and print \" NO\" ( without the quotes) , if he can' t.",
    "note": "In the first sample Kirito' s strength initially equals 2. As the first dragon' s strength is less than 2, Kirito can fight it and defeat it. After that he gets the bonus and his strength increases to 2 + 99 = 101. Now he can defeat the second dragon and move on to the next level. In the second sample Kirito' s strength is too small to defeat the only dragon and win.",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Olympiad",
    "url": "https://codeforces.com/problemset/problem/222/D",
    "history": "A boy named Vasya has taken part in an Olympiad. His teacher knows that in total Vasya got at least x points for both tours of the Olympiad. The teacher has the results of the first and the second tour of the Olympiad but the problem is, the results have only points, no names. The teacher has to know Vasya' s chances. Help Vasya' s teacher, find two numbers \u2014 the best and the worst place Vasya could have won. Note that the total results' table sorts the participants by the sum of points for both tours ( the first place has the participant who has got the most points) . If two or more participants have got the same number of points, it' s up to the jury to assign places to them according to their choice. It is guaranteed that each participant of the Olympiad participated in both tours of the Olympiad.",
    "input": "The first line contains two space- separated integers n, x ( 1 \u2264 n \u2264 105; 0 \u2264 x \u2264 2\u00b7105) \u2014 the number of Olympiad participants and the minimum number of points Vasya earned. The second line contains n space- separated integers: a1, a2, . . . , an ( 0 \u2264 ai \u2264 105) \u2014 the participants' points in the first tour. The third line contains n space- separated integers: b1, b2, . . . , bn ( 0 \u2264 bi \u2264 105) \u2014 the participants' points in the second tour. The participants' points are given in the arbitrary order. It is guaranteed that Vasya was present in the Olympiad \u2014 there are two integers i, j ( 1 \u2264 i, j \u2264 n) such, that ai + bj \u2265 x.",
    "output": "Print two space- separated integers \u2014 the best and the worst place Vasya could have got on the Olympiad.",
    "note": "In the first text sample all 5 participants earn 2 points each in any case. Depending on the jury' s decision, Vasya can get the first ( the best) as well as the last ( the worst) fifth place. In the second test sample in the best case scenario Vasya wins again: he can win 12 points and become the absolute winner if the total results' table looks like that \u2014 4: 8, 6: 4, 3: 6, 4: 4, 4: 3, 5: 0. In this table all participants are sorted by decreasing points and we can see how much a participant earned in the first and in the second tour. In the worst case scenario Vasya can get the fifth place if the table looks like that \u2014 4: 8, 4: 6, 6: 4, 5: 4, 4: 3, 3: 0, and he earned 4 and 3 points in the first and second tours, correspondingly.",
    "topics": [
      "binary search",
      "greedy",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Reducing Fractions",
    "url": "https://codeforces.com/problemset/problem/222/C",
    "history": "To confuse the opponents, the Galactic Empire represents fractions in an unusual format. The fractions are represented as two sets of integers. The product of numbers from the first set gives the fraction numerator, the product of numbers from the second set gives the fraction denominator. However, it turned out that the programs that work with fractions in this representations aren' t complete, they lack supporting the operation of reducing fractions. Implement this operation and the Empire won' t forget you.",
    "input": "The first input line contains two space- separated integers n, m ( 1 \u2264 n, m \u2264 105) that show how many numbers the first set ( the numerator) and the second set ( the denominator) contain, correspondingly. The second line contains n space- separated integers: a1, a2, . . . , an ( 1 \u2264 ai \u2264 107) \u2014 the numbers that are multiplied to produce the numerator. The third line contains m space- separated integers: b1, b2, . . . , bm ( 1 \u2264 bi \u2264 107) \u2014 the numbers that are multiplied to produce the denominator.",
    "output": "Print the answer to the problem in the form, similar to the form of the input data. The number of values in the sets you print nout, mout must satisfy the inequality 1 \u2264 nout, mout \u2264 105, and the actual values in the sets aout, i and bout, i must satisfy the inequality 1 \u2264 aout, i, bout, i \u2264 107. Separate the values in the lines by spaces. The printed fraction must be reduced, that is, there mustn' t be such integer x ( x > 1) , that the numerator and the denominator of the printed fraction are divisible by x. If there are several matching answers, print any of them.",
    "note": "In the first test sample the numerator equals 1000, the denominator equals 500. If we reduce fraction 1000/ 500 by the greatest common divisor of the numerator and the denominator ( by 500) , we obtain fraction 2/ 1. In the second test sample the numerator equals 2000, the denominator equals 300. If we reduce fraction 2000/ 300 by the greatest common divisor of the numerator and the denominator ( by 100) , we obtain fraction 20/ 3.",
    "topics": [
      "implementation",
      "math",
      "number theory",
      "sortings"
    ]
  },
  {
    "title": "Little Elephant and Problem",
    "url": "https://codeforces.com/problemset/problem/220/A",
    "history": "The Little Elephant has got a problem \u2014 somebody has been touching his sorted by non- decreasing array a of length n and possibly swapped some elements of the array. The Little Elephant doesn' t want to call the police until he understands if he could have accidentally changed the array himself. He thinks that he could have accidentally changed array a, only if array a can be sorted in no more than one operation of swapping elements ( not necessarily adjacent) . That is, the Little Elephant could have accidentally swapped some two elements. Help the Little Elephant, determine if he could have accidentally changed the array a, sorted by non- decreasing, himself.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 105) \u2014 the size of array a. The next line contains n positive integers, separated by single spaces and not exceeding 109, \u2014 array a. Note that the elements of the array are not necessarily distinct numbers.",
    "output": "In a single line print \" YES\" ( without the quotes) if the Little Elephant could have accidentally changed the array himself, and \" NO\" ( without the quotes) otherwise.",
    "note": "In the first sample the array has already been sorted, so to sort it, we need 0 swap operations, that is not more than 1. Thus, the answer is \" YES\" . In the second sample we can sort the array if we swap elements 1 and 3, so we need 1 swap operation to sort the array. Thus, the answer is \" YES\" . In the third sample we can' t sort the array in more than one swap operation, so the answer is \" NO\" .",
    "topics": [
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Spider's Web",
    "url": "https://codeforces.com/problemset/problem/216/D",
    "history": "Paw the Spider is making a web. Web- making is a real art, Paw has been learning to do it his whole life. Let' s consider the structure of the web. There are n main threads going from the center of the web. All main threads are located in one plane and divide it into n equal infinite sectors. The sectors are indexed from 1 to n in the clockwise direction. Sectors i and i + 1 are adjacent for every i, 1 \u2264 i < n. In addition, sectors 1 and n are also adjacent. Some sectors have bridge threads. Each bridge connects the two main threads that make up this sector. The points at which the bridge is attached to the main threads will be called attachment points. Both attachment points of a bridge are at the same distance from the center of the web. At each attachment point exactly one bridge is attached. The bridges are adjacent if they are in the same sector, and there are no other bridges between them. A cell of the web is a trapezoid, which is located in one of the sectors and is bounded by two main threads and two adjacent bridges. You can see that the sides of the cell may have the attachment points of bridges from adjacent sectors. If the number of attachment points on one side of the cell is not equal to the number of attachment points on the other side, it creates an imbalance of pulling forces on this cell and this may eventually destroy the entire web. We' ll call such a cell unstable. The perfect web does not contain unstable cells. Unstable cells are marked red in the figure. Stable cells are marked green. Paw the Spider isn' t a skillful webmaker yet, he is only learning to make perfect webs. Help Paw to determine the number of unstable cells in the web he has just spun.",
    "input": "The first line contains integer n ( 3 \u2264 n \u2264 1000) \u2014 the number of main threads. The i- th of following n lines describe the bridges located in the i- th sector: first it contains integer ki ( 1 \u2264 ki \u2264 105) equal to the number of bridges in the given sector. Then follow ki different integers pij ( 1 \u2264 pij \u2264 105; 1 \u2264 j \u2264 ki) . Number pij equals the distance from the attachment points of the j- th bridge of the i- th sector to the center of the web. It is guaranteed that any two bridges between adjacent sectors are attached at a different distance from the center of the web. It is guaranteed that the total number of the bridges doesn' t exceed 105.",
    "output": "Print a single integer \u2014 the number of unstable cells in Paw the Spider' s web.",
    "note": "",
    "topics": [
      "binary search",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Transportation",
    "url": "https://codeforces.com/problemset/problem/203/E",
    "history": "Valera came to Japan and bought many robots for his research. He' s already at the airport, the plane will fly very soon and Valera urgently needs to bring all robots to the luggage compartment. The robots are self- propelled ( they can potentially move on their own) , some of them even have compartments to carry other robots. More precisely, for the i- th robot we know value ci \u2014 the number of robots it can carry. In this case, each of ci transported robots can additionally carry other robots. However, the robots need to be filled with fuel to go, so Valera spent all his last money and bought S liters of fuel. He learned that each robot has a restriction on travel distances. Thus, in addition to features ci, the i- th robot has two features fi and li \u2014 the amount of fuel ( in liters) needed to move the i- th robot, and the maximum distance that the robot can go. Due to the limited amount of time and fuel, Valera wants to move the maximum number of robots to the luggage compartment. He operates as follows. First Valera selects some robots that will travel to the luggage compartment on their own. In this case the total amount of fuel required to move all these robots must not exceed S. Then Valera seats the robots into the compartments, so as to transport as many robots as possible. Note that if a robot doesn' t move by itself, you can put it in another not moving robot that is moved directly or indirectly by a moving robot. After that all selected and seated robots along with Valera go to the luggage compartment and the rest robots will be lost. There are d meters to the luggage compartment. Therefore, the robots that will carry the rest, must have feature li of not less than d. During the moving Valera cannot stop or change the location of the robots in any way. Help Valera calculate the maximum number of robots that he will be able to take home, and the minimum amount of fuel he will have to spend, because the remaining fuel will come in handy in Valera' s research.",
    "input": "The first line contains three space- separated integers n, d, S ( 1 \u2264 n \u2264 105, 1 \u2264 d, S \u2264 109) . The first number represents the number of robots, the second one \u2014 the distance to the luggage compartment and the third one \u2014 the amount of available fuel. Next n lines specify the robots. The i- th line contains three space- separated integers ci, fi, li ( 0 \u2264 ci, fi, li \u2264 109) \u2014 the i- th robot' s features. The first number is the number of robots the i- th robot can carry, the second number is the amount of fuel needed for the i- th robot to move and the third one shows the maximum distance the i- th robot can go.",
    "output": "Print two space- separated integers \u2014 the maximum number of robots Valera can transport to the luggage compartment and the minimum amount of fuel he will need for that. If Valera won' t manage to get any robots to the luggage compartment, print two zeroes.",
    "note": "",
    "topics": [
      "greedy",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Photographer",
    "url": "https://codeforces.com/problemset/problem/203/C",
    "history": "Valera' s lifelong ambition was to be a photographer, so he bought a new camera. Every day he got more and more clients asking for photos, and one day Valera needed a program that would determine the maximum number of people he can serve. The camera' s memory is d megabytes. Valera' s camera can take photos of high and low quality. One low quality photo takes a megabytes of memory, one high quality photo take b megabytes of memory. For unknown reasons, each client asks him to make several low quality photos and several high quality photos. More formally, the i- th client asks to make xi low quality photos and yi high quality photos. Valera wants to serve as many clients per day as possible, provided that they will be pleased with his work. To please the i- th client, Valera needs to give him everything he wants, that is, to make xi low quality photos and yi high quality photos. To make one low quality photo, the camera must have at least a megabytes of free memory space. Similarly, to make one high quality photo, the camera must have at least b megabytes of free memory space. Initially the camera' s memory is empty. Valera also does not delete photos from the camera so that the camera' s memory gradually fills up. Calculate the maximum number of clients Valera can successfully serve and print the numbers of these clients.",
    "input": "The first line contains two integers n and d ( 1 \u2264 n \u2264 105, 1 \u2264 d \u2264 109) \u2014 the number of clients and the camera memory size, correspondingly. The second line contains two integers a and b ( 1 \u2264 a \u2264 b \u2264 104) \u2014 the size of one low quality photo and of one high quality photo, correspondingly. Next n lines describe the clients. The i- th line contains two integers xi and yi ( 0 \u2264 xi, yi \u2264 105) \u2014 the number of low quality photos and high quality photos the i- th client wants, correspondingly. All numbers on all lines are separated by single spaces.",
    "output": "On the first line print the answer to the problem \u2014 the maximum number of clients that Valera can successfully serve. Print on the second line the numbers of the client in any order. All numbers must be distinct. If there are multiple answers, print any of them. The clients are numbered starting with 1 in the order in which they are defined in the input data.",
    "note": "",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Gripping Story",
    "url": "https://codeforces.com/problemset/problem/198/E",
    "history": "One day Qwerty the Ranger witnessed two transport ships collide with each other. As a result, all contents of their cargo holds scattered around the space. And now Qwerty wants to pick as many lost items as possible to sell them later. The thing is, both ships had lots of new gravitational grippers, transported to sale. A gripper is a device that can be installed on a spaceship and than draw items in space to itself ( \" grip\" ) and transport them to the ship' s cargo hold. Overall the crashed ships lost n gravitational grippers: the i- th gripper is located at a point with coordinates ( xi, yi) . Each gripper has two features \u2014 pi ( the power) and ri ( the action radius) and can grip any items with mass of no more than pi at distance no more than ri. A gripper itself is an item, too and it has its mass of mi. Qwerty' s ship is located at point ( x, y) and has an old magnetic gripper installed, its characteristics are p and r. There are no other grippers in the ship' s cargo holds. Find the largest number of grippers Qwerty can get hold of. As he picks the items, he can arbitrarily install any gripper in the cargo hold of the ship, including the gripper he has just picked. At any moment of time the ship can have only one active gripper installed. We consider all items and the Qwerty' s ship immobile when the ranger picks the items, except for when the gripper moves an item \u2014 then the item moves to the cargo holds and the ship still remains immobile. We can assume that the ship' s cargo holds have enough room for all grippers. Qwerty can use any gripper he finds or the initial gripper an arbitrary number of times.",
    "input": "The first line contains five integers x, y, p, r and n ( - 109 \u2264 x, y \u2264 109, 1 \u2264 p, r \u2264 109, 1 \u2264 n \u2264 250000) \u2014 the ship' s initial position, the initial gripper' s features and the number of grippers that got into the space during the collision. Next n lines contain the grippers' descriptions: the i- th line contains five integers xi, yi, mi, pi, ri ( - 109 \u2264 xi, yi \u2264 109, 1 \u2264 mi, pi, ri \u2264 109) \u2014 the i- th gripper' s coordinates and features. It is guaranteed that all grippers are located at different points. No gripper is located at the same point with Qwerty' s ship.",
    "output": "Print a single number \u2014 the maximum number of grippers Qwerty can draw to his ship. You do not need to count the initial old magnet gripper.",
    "note": "In the first sample you should get the second gripper, then use the second gripper to get the first one, then use the first gripper to get the fourth one. You cannot get neither the third gripper as it is too heavy, nor the fifth one as it is too far away.",
    "topics": [
      "binary search",
      "data structures",
      "sortings"
    ]
  },
  {
    "title": "Paint Tree",
    "url": "https://codeforces.com/problemset/problem/196/C",
    "history": "You are given a tree with n vertexes and n points on a plane, no three points lie on one straight line. Your task is to paint the given tree on a plane, using the given points as vertexes. That is, you should correspond each vertex of the tree to exactly one point and each point should correspond to a vertex. If two vertexes of the tree are connected by an edge, then the corresponding points should have a segment painted between them. The segments that correspond to non- adjacent edges, should not have common points. The segments that correspond to adjacent edges should have exactly one common point.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 1500) \u2014 the number of vertexes on a tree ( as well as the number of chosen points on the plane) . Each of the next n - 1 lines contains two space- separated integers ui and vi ( 1 \u2264 ui, vi \u2264 n, ui = \u0338 vi) \u2014 the numbers of tree vertexes connected by the i- th edge. Each of the next n lines contain two space- separated integers xi and yi ( - 109 \u2264 xi, yi \u2264 109) \u2014 the coordinates of the i- th point on the plane. No three points lie on one straight line. It is guaranteed that under given constraints problem has a solution.",
    "output": "Print n distinct space- separated integers from 1 to n: the i- th number must equal the number of the vertex to place at the i- th point ( the points are numbered in the order, in which they are listed in the input) . If there are several solutions, print any of them.",
    "note": "The possible solutions for the sample are given below.",
    "topics": [
      "constructive algorithms",
      "divide and conquer",
      "geometry",
      "sortings",
      "trees"
    ]
  },
  {
    "title": "Analyzing Polyline",
    "url": "https://codeforces.com/problemset/problem/195/D",
    "history": "As Valeric and Valerko were watching one of the last Euro Championship games in a sports bar, they broke a mug. Of course, the guys paid for it but the barman said that he will let them watch football in his bar only if they help his son complete a programming task. The task goes like that. Let' s consider a set of functions of the following form: Let' s define a sum of n functions y1( x) , . . . , yn( x) of the given type as function s( x) = y1( x) + . . . + yn( x) for any x. It' s easy to show that in this case the graph s( x) is a polyline. You are given n functions of the given type, your task is to find the number of angles that do not equal 180 degrees, in the graph s( x) , that is the sum of the given functions. Valeric and Valerko really want to watch the next Euro Championship game, so they asked you to help them.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 105) \u2014 the number of functions. Each of the following n lines contains two space- separated integer numbers ki, bi ( - 109 \u2264 ki, bi \u2264 109) that determine the i- th function.",
    "output": "Print a single number \u2014 the number of angles that do not equal 180 degrees in the graph of the polyline that equals the sum of the given functions.",
    "note": "",
    "topics": [
      "geometry",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Counter Attack",
    "url": "https://codeforces.com/problemset/problem/190/E",
    "history": "Berland has managed to repel the flatlanders' attack and is now starting the counter attack. Flatland has n cities, numbered from 1 to n, and some pairs of them are connected by bidirectional roads. The Flatlandian maps show roads between cities if and only if there is in fact no road between this pair of cities ( we do not know whether is it a clever spy- proof strategy or just saving ink) . In other words, if two cities are connected by a road on a flatland map, then there is in fact no road between them. The opposite situation is also true: if two cities are not connected by a road on a flatland map, then in fact, there is a road between them. The berlanders got hold of a flatland map. Now Vasya the Corporal is commissioned by General Touristov to find all such groups of flatland cities, that in each group of cities you can get from any city to any other one, moving along the actual roads. Also the cities from different groups are unreachable from each other, moving along the actual roads. Indeed, destroying such groups one by one is much easier than surrounding all Flatland at once! Help the corporal complete this task and finally become a sergeant! Don' t forget that a flatland map shows a road between cities if and only if there is in fact no road between them.",
    "input": "The first line contains two space- separated integers n and m ( 1 \u2264 n \u2264 5\u00b7105, 0 \u2264 m \u2264 106) \u2014 the number of cities and the number of roads marked on the flatland map, correspondingly. Next m lines contain descriptions of the cities on the map. The i- th line contains two integers ai and bi ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi) \u2014 the numbers of cities that are connected by the i- th road on the flatland map. It is guaranteed that each pair of cities occurs in the input no more than once.",
    "output": "On the first line print number k \u2014 the number of groups of cities in Flatland, such that in each group you can get from any city to any other one by flatland roads. At the same time, the cities from different groups should be unreachable by flatland roads. On each of the following k lines first print ti ( 1 \u2264 ti \u2264 n) \u2014 the number of vertexes in the i- th group. Then print space- separated numbers of cities in the i- th group. The order of printing groups and the order of printing numbers in the groups does not matter. The total sum ti for all k groups must equal n.",
    "note": "In the first sample there are roads only between pairs of cities 1- 4 and 2- 3. In the second sample there is no road between cities 1 and 2, but still you can get from one city to the other one through city number 3.",
    "topics": [
      "data structures",
      "dsu",
      "graphs",
      "hashing",
      "sortings"
    ]
  },
  {
    "title": "Growing Mushrooms",
    "url": "https://codeforces.com/problemset/problem/186/B",
    "history": "Each year in the castle of Dwarven King there is a competition in growing mushrooms among the dwarves. The competition is one of the most prestigious ones, and the winner gets a wooden salad bowl. This year' s event brought together the best mushroom growers from around the world, so we had to slightly change the rules so that the event gets more interesting to watch. Each mushroom grower has a mushroom that he will grow on the competition. Under the new rules, the competition consists of two parts. The first part lasts t1 seconds and the second part lasts t2 seconds. The first and the second part are separated by a little break. After the starting whistle the first part of the contest starts, and all mushroom growers start growing mushrooms at once, each at his individual speed of vi meters per second. After t1 seconds, the mushroom growers stop growing mushrooms and go to have a break. During the break, for unexplained reasons, the growth of all mushrooms is reduced by k percent. After the break the second part of the contest starts and all mushrooms growers at the same time continue to grow mushrooms, each at his individual speed of ui meters per second. After a t2 seconds after the end of the break, the competition ends. Note that the speeds before and after the break may vary. Before the match dwarf Pasha learned from all participants, what two speeds they have chosen. However, the participants did not want to disclose to him all their strategy and therefore, did not say in what order they will be using these speeds. That is, if a participant chose speeds ai and bi, then there are two strategies: he either uses speed ai before the break and speed bi after it, or vice versa. Dwarf Pasha really wants to win the totalizer. He knows that each participant chooses the strategy that maximizes the height of the mushroom. Help Dwarf Pasha make the final table of competition results. The participants are sorted in the result table by the mushroom height ( the participants with higher mushrooms follow earlier in the table) . In case of equal mushroom heights, the participants are sorted by their numbers ( the participants with a smaller number follow earlier) .",
    "input": "The first input line contains four integer numbers n, t1, t2, k ( 1 \u2264 n, t1, t2 \u2264 1000; 1 \u2264 k \u2264 100) \u2014 the number of participants, the time before the break, the time after the break and the percentage, by which the mushroom growth drops during the break, correspondingly. Each of the following n lines contains two integers. The i- th ( 1 \u2264 i \u2264 n) line contains space- separated integers ai, bi ( 1 \u2264 ai, bi \u2264 1000) \u2014 the speeds which the participant number i chose.",
    "output": "Print the final results' table: n lines, each line should contain the number of the corresponding dwarf and the final maximum height of his mushroom with exactly two digits after the decimal point. The answer will be considered correct if it is absolutely accurate.",
    "note": "First example: for each contestant it is optimal to use firstly speed 2 and afterwards speed 4, because 2\u00b73\u00b70. 5 + 4\u00b73 > 4\u00b73\u00b70. 5 + 2\u00b73.",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Representative Sampling",
    "url": "https://codeforces.com/problemset/problem/178/F2",
    "history": "The Smart Beaver from ABBYY has a long history of cooperating with the \" Institute of Cytology and Genetics\" . Recently, the Institute staff challenged the Beaver with a new problem. The problem is as follows. There is a collection of n proteins ( not necessarily distinct) . Each protein is a string consisting of lowercase Latin letters. The problem that the scientists offered to the Beaver is to select a subcollection of size k from the initial collection of proteins so that the representativity of the selected subset of proteins is maximum possible. The Smart Beaver from ABBYY did some research and came to the conclusion that the representativity of a collection of proteins can be evaluated by a single number, which is simply calculated. Let' s suppose we have a collection a1, . . . , ak consisting of k strings describing proteins. The representativity of this collection is the following value: where f( x, y) is the length of the longest common prefix of strings x and y; for example, f( \" abc\" , \" abd\" ) = 2, and f( \" ab\" , \" bcd\" ) = 0. Thus, the representativity of collection of proteins \" abc\" , \" abd\" , \" abe\" equals 6, and the representativity of collection \" aaa\" , \" ba\" , \" ba\" equals 2. Having discovered that, the Smart Beaver from ABBYY asked the Cup contestants to write a program that selects, from the given collection of proteins, a subcollection of size k which has the largest possible value of representativity. Help him to solve this problem!",
    "input": "The first input line contains two integers n and k ( 1 \u2264 k \u2264 n) , separated by a single space. The following n lines contain the descriptions of proteins, one per line. Each protein is a non- empty string of no more than 500 characters consisting of only lowercase Latin letters ( a. . . z) . Some of the strings may be equal. The input limitations for getting 20 points are: 1 \u2264 n \u2264 20 The input limitations for getting 50 points are: 1 \u2264 n \u2264 100 The input limitations for getting 100 points are: 1 \u2264 n \u2264 2000",
    "output": "Print a single number denoting the largest possible value of representativity that a subcollection of size k of the given collection of proteins can have.",
    "note": "",
    "topics": [
      "dp",
      "sortings",
      "strings"
    ]
  },
  {
    "title": "Trading Business",
    "url": "https://codeforces.com/problemset/problem/176/A",
    "history": "To get money for a new aeonic blaster, ranger Qwerty decided to engage in trade for a while. He wants to buy some number of items ( or probably not to buy anything at all) on one of the planets, and then sell the bought items on another planet. Note that this operation is not repeated, that is, the buying and the selling are made only once. To carry out his plan, Qwerty is going to take a bank loan that covers all expenses and to return the loaned money at the end of the operation ( the money is returned without the interest) . At the same time, Querty wants to get as much profit as possible. The system has n planets in total. On each of them Qwerty can buy or sell items of m types ( such as food, medicine, weapons, alcohol, and so on) . For each planet i and each type of items j Qwerty knows the following: aij \u2014 the cost of buying an item; bij \u2014 the cost of selling an item; cij \u2014 the number of remaining items. It is not allowed to buy more than cij items of type j on planet i, but it is allowed to sell any number of items of any kind. Knowing that the hold of Qwerty' s ship has room for no more than k items, determine the maximum profit which Qwerty can get.",
    "input": "The first line contains three space- separated integers n, m and k ( 2 \u2264 n \u2264 10, 1 \u2264 m, k \u2264 100) \u2014 the number of planets, the number of question types and the capacity of Qwerty' s ship hold, correspondingly. Then follow n blocks describing each planet. The first line of the i- th block has the planet' s name as a string with length from 1 to 10 Latin letters. The first letter of the name is uppercase, the rest are lowercase. Then in the i- th block follow m lines, the j- th of them contains three integers aij, bij and cij ( 1 \u2264 bij < aij \u2264 1000, 0 \u2264 cij \u2264 100) \u2014 the numbers that describe money operations with the j- th item on the i- th planet. The numbers in the lines are separated by spaces. It is guaranteed that the names of all planets are different.",
    "output": "Print a single number \u2014 the maximum profit Qwerty can get.",
    "note": "In the first test case you should fly to planet Venus, take a loan on 74 units of money and buy three items of the first type and 7 items of the third type ( 3\u00b76 + 7\u00b78 = 74) . Then the ranger should fly to planet Earth and sell there all the items he has bought. He gets 3\u00b79 + 7\u00b79 = 90 units of money for the items, he should give 74 of them for the loan. The resulting profit equals 16 units of money. We cannot get more profit in this case.",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Geometry Horse",
    "url": "https://codeforces.com/problemset/problem/175/C",
    "history": "Vasya plays the Geometry Horse. The game goal is to destroy geometric figures of the game world. A certain number of points is given for destroying each figure depending on the figure type and the current factor value. There are n types of geometric figures. The number of figures of type ki and figure cost ci is known for each figure type. A player gets ci\u00b7f points for destroying one figure of type i, where f is the current factor. The factor value can be an integer number from 1 to t + 1, inclusive. At the beginning of the game the factor value is equal to 1. The factor is set to i + 1 after destruction of pi ( 1 \u2264 i \u2264 t) figures, so the ( pi + 1) - th figure to be destroyed is considered with factor equal to i + 1. Your task is to determine the maximum number of points Vasya can get after he destroys all figures. Take into account that Vasya is so tough that he can destroy figures in any order chosen by him.",
    "input": "The first line contains the only integer number n ( 1 \u2264 n \u2264 100) \u2014 the number of figure types. Each of the following n lines contains two integer numbers ki and ci ( 1 \u2264 ki \u2264 109, 0 \u2264 ci \u2264 1000) , separated with space \u2014 the number of figures of the i- th type and the cost of one i- type figure, correspondingly. The next line contains the only integer number t ( 1 \u2264 t \u2264 100) \u2014 the number that describe the factor' s changes. The next line contains t integer numbers pi ( 1 \u2264 p1 < p2 < . . . < pt \u2264 1012) , separated with spaces. Please, do not use the",
    "output": "Print the only number \u2014 the maximum number of points Vasya can get.",
    "note": "In the first example Vasya destroys three figures first and gets 3\u00b71\u00b710 = 30 points. Then the factor will become equal to 2 and after destroying the last two figures Vasya will get 2\u00b72\u00b710 = 40 points. As a result Vasya will get 70 points. In the second example all 8 figures will be destroyed with factor 1, so Vasya will get ( 3\u00b78 + 5\u00b710) \u00b71 = 74 points.",
    "topics": [
      "greedy",
      "implementation",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Camping Groups",
    "url": "https://codeforces.com/problemset/problem/173/E",
    "history": "A club wants to take its members camping. In order to organize the event better the club directors decided to partition the members into several groups. Club member i has a responsibility value ri and an age value ai. A group is a non- empty subset of club members with one member known as group leader. A group leader should be one of the most responsible members of the group ( his responsibility value is not less than responsibility of any other group member) and his age absolute difference with any other group member should not exceed k. Some club members are friends and want to be in the same group. They also like their group to be as large as possible. Now you should write a program that answers a series of questions like \" What' s the largest size of a group containing club member x and club member y? \" . It' s possible for x or y to be the group leader.",
    "input": "The first line contains two integers n and k ( 2 \u2264 n \u2264 105, 0 \u2264 k \u2264 109) \u2014 the number of club members and the age restriction for one group. The next line contains integer numbers r1, r2, . . . , rn ( 1 \u2264 ri \u2264 109) separated by space: ri denotes the i- th club member' s responsibility. In the same way there are integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) in the third line: ai denotes the i- th club member' s age. The next line contains an integer q denoting the number of questions that you should answer ( 1 \u2264 q \u2264 105) . The next q lines describe the questions. Each line contains two space- separated integers xi and yi ( 1 \u2264 xi, yi \u2264 n, xi = \u0338 yi) \u2014 the indices of the club members that should end up in the same group.",
    "output": "For each question print the maximum size of the group in a line. If making such a group is impossible print - 1 instead.",
    "note": "In the first query the largest group with members 3 and 5 is 1, 3, 4, 5 where member 3 is the leader. In the second query member 2 should be the leader so the group will be 1, 2, 3. In the third query the leader of the group should have age 3 so the only leader can be member 3, who is less responsible than member 2. So making a group is impossible. The group for the fourth query is the same as first query.",
    "topics": [
      "data structures",
      "sortings"
    ]
  },
  {
    "title": "Bus",
    "url": "https://codeforces.com/problemset/problem/172/C",
    "history": "There is a bus stop near the university. The lessons are over, and n students come to the stop. The i- th student will appear at the bus stop at time ti ( all ti' s are distinct) . We shall assume that the stop is located on the coordinate axis Ox, at point x = 0, and the bus goes along the ray Ox, that is, towards the positive direction of the coordinate axis, and back. The i- th student needs to get to the point with coordinate xi ( xi > 0) . The bus moves by the following algorithm. Initially it is at point 0. The students consistently come to the stop and get on it. The bus has a seating capacity which is equal to m passengers. At the moment when m students get on the bus, it starts moving in the positive direction of the coordinate axis. Also it starts moving when the last ( n- th) student gets on the bus. The bus is moving at a speed of 1 unit of distance per 1 unit of time, i. e. it covers distance y in time y. Every time the bus passes the point at which at least one student needs to get off, it stops and these students get off the bus. The students need 1 + [ k / 2] units of time to get off the bus, where k is the number of students who leave at this point. Expression [ k / 2] denotes rounded down k / 2. As soon as the last student leaves the bus, the bus turns around and goes back to the point x = 0. It doesn' t make any stops until it reaches the point. At the given point the bus fills with students once more, and everything is repeated. If students come to the stop when there' s no bus, they form a line ( queue) and get on the bus in the order in which they came. Any number of students get on the bus in negligible time, you should assume that it doesn' t take any time. Any other actions also take no time. The bus has no other passengers apart from the students. Write a program that will determine for each student the time when he got off the bus. The moment a student got off the bus is the moment the bus stopped at the student' s destination stop ( despite the fact that the group of students need some time to get off) .",
    "input": "The first line contains two space- separated integers n, m ( 1 \u2264 n, m \u2264 105) \u2014 the number of students and the number of passengers the bus can transport, correspondingly. Next n lines contain descriptions of the students, one per line. Each line contains a pair of integers ti, xi ( 1 \u2264 ti \u2264 105, 1 \u2264 xi \u2264 104) . The lines are given in the order of strict increasing of ti. Values of xi can coincide.",
    "output": "Print n numbers w1, w2, . . . , wn, wi \u2014 the moment of time when the i- th student got off the bus. Print the numbers on one line and separate them with single spaces.",
    "note": "In the first sample the bus waits for the first student for 3 units of time and drives him to his destination in additional 5 units of time. So the student leaves the bus at the moment of time 3 + 5 = 8. In the second sample the capacity of the bus equals 1, that' s why it will drive the first student alone. This student is the same as the student from the first sample. So the bus arrives to his destination at the moment of time 8, spends 1 + [ 1 / 2] = 1 units of time on getting him off, and returns back to 0 in additional 5 units of time. That is, the bus returns to the bus stop at the moment of time 14. By this moment the second student has already came to the bus stop. So he immediately gets in the bus, and is driven to his destination in additional 5 units of time. He gets there at the moment 14 + 5 = 19. In the third sample the bus waits for the fourth student for 6 units of time, then drives for 5 units of time, then gets the passengers off for 1 + [ 4 / 2] = 3 units of time, then returns for 5 units of time, and then drives the fifth student for 1 unit of time.",
    "topics": [
      "*special",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Chores",
    "url": "https://codeforces.com/problemset/problem/169/A",
    "history": "Petya and Vasya are brothers. Today is a special day for them as their parents left them home alone and commissioned them to do n chores. Each chore is characterized by a single parameter \u2014 its complexity. The complexity of the i- th chore equals hi. As Petya is older, he wants to take the chores with complexity larger than some value x ( hi > x) to leave to Vasya the chores with complexity less than or equal to x ( hi \u2264 x) . The brothers have already decided that Petya will do exactly a chores and Vasya will do exactly b chores ( a + b = n) . In how many ways can they choose an integer x so that Petya got exactly a chores and Vasya got exactly b chores?",
    "input": "The first input line contains three integers n, a and b ( 2 \u2264 n \u2264 2000; a, b \u2265 1; a + b = n) \u2014 the total number of chores, the number of Petya' s chores and the number of Vasya' s chores. The next line contains a sequence of integers h1, h2, . . . , hn ( 1 \u2264 hi \u2264 109) , hi is the complexity of the i- th chore. The numbers in the given sequence are not necessarily different. All numbers on the lines are separated by single spaces.",
    "output": "Print the required number of ways to choose an integer value of x. If there are no such ways, print 0.",
    "note": "In the first sample the possible values of x are 3, 4 or 5. In the second sample it is impossible to find such x, that Petya got 3 chores and Vasya got 4.",
    "topics": [
      "sortings"
    ]
  },
  {
    "title": "Shoe Store",
    "url": "https://codeforces.com/problemset/problem/166/D",
    "history": "The warehouse in your shop has n shoe pairs. Each pair is characterized by two integers: its price ci and its size si. We know that on this very day all numbers si are different, that is, there is no more than one pair of each size. The shop has m customers who came at the same time. The customer number i has di money and the size of his feet equals li. The customer number i can buy the pair number j, if cj \u2264 di, and also if li = sj or li = sj - 1; that is, it is necessary that he has enough money to pay for the shoes. It is also necessary that the size of his feet equals to or is less by 1 than the size of the shoes he chooses. Your task is to sell some customers pairs of shoes ( a pair per person) so as to maximize the sum of the sold pairs cj that is, the profit. It is guaranteed that each customer buys no more than one pair and each pair will be bought by no more than one customer.",
    "input": "The first input line contains the only integer n ( 1 \u2264 n \u2264 105) \u2014 the number of shoe pairs in the warehouse. Then n lines contain the descriptions of pairs of shoes as two integers ci and si ( 1 \u2264 ci, si \u2264 109) , the numbers are separated by a space. It is guaranteed that all numbers si are different. The next line contains an integer m ( 1 \u2264 m \u2264 105) \u2014 the number of customers in the shop. Next m lines contain the customers' descriptions as two integers di and li ( 1 \u2264 di, li \u2264 109) , the numbers are separated by a space.",
    "output": "In the first line print the only integer \u2014 the maximum profit you can get from selling shoes. In the second line print an integer k \u2014 the number of shoe pairs you will sell. In the following k lines print the descriptions of the sold pairs \u2014 two space- separated integers where the first number is the customer' s number and the second number is the number of the shoes the customer will buy. You can print pairs of numbers \" the customer' s number and the shoes' number\" in any order, the customers and the pairs of shoes are numbered starting from 1 in the order in which they are given in the input. If there are several optimal answers, you are allowed to print any of them. Please do not use the",
    "note": "",
    "topics": [
      "dp",
      "graph matchings",
      "greedy",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Median",
    "url": "https://codeforces.com/problemset/problem/166/C",
    "history": "A median in an array with the length of n is an element which occupies position number after we sort the elements in the non- decreasing order ( the array elements are numbered starting with 1) . A median of an array ( 2, 6, 1, 2, 3) is the number 2, and a median of array ( 0, 96, 17, 23) \u2014 the number 17. We define an expression as the integer part of dividing number a by number b. One day Vasya showed Petya an array consisting of n integers and suggested finding the array' s median. Petya didn' t even look at the array and said that it equals x. Petya is a very honest boy, so he decided to add several numbers to the given array so that the median of the resulting array would be equal to x. Petya can add any integers from 1 to 105 to the array, including the same numbers. Of course, he can add nothing to the array. If a number is added multiple times, then we should consider it the number of times it occurs. It is not allowed to delete of change initial numbers of the array. While Petya is busy distracting Vasya, your task is to find the minimum number of elements he will need.",
    "input": "The first input line contains two space- separated integers n and x ( 1 \u2264 n \u2264 500, 1 \u2264 x \u2264 105) \u2014 the initial array' s length and the required median' s value. The second line contains n space- separated numbers \u2014 the initial array. The elements of the array are integers from 1 to 105. The array elements are not necessarily different.",
    "output": "Print the only integer \u2014 the minimum number of elements Petya needs to add to the array so that its median equals x.",
    "note": "In the first sample we can add number 9 to array ( 10, 20, 30) . The resulting array ( 9, 10, 20, 30) will have a median in position , that is, 10. In the second sample you should add numbers 4, 5, 5, 5. The resulting array has median equal to 4.",
    "topics": [
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Polygons",
    "url": "https://codeforces.com/problemset/problem/166/B",
    "history": "You' ve got another geometrical task. You are given two non- degenerate polygons A and B as vertex coordinates. Polygon A is strictly convex. Polygon B is an arbitrary polygon without any self- intersections and self- touches. The vertices of both polygons are given in the clockwise order. For each polygon no three consecutively following vertices are located on the same straight line. Your task is to check whether polygon B is positioned strictly inside polygon A. It means that any point of polygon B should be strictly inside polygon A. \" Strictly\" means that the vertex of polygon B cannot lie on the side of the polygon A.",
    "input": "The first line contains the only integer n ( 3 \u2264 n \u2264 105) \u2014 the number of vertices of polygon A. Then n lines contain pairs of integers xi, yi ( | xi| , | yi| \u2264 109) \u2014 coordinates of the i- th vertex of polygon A. The vertices are given in the clockwise order. The next line contains a single integer m ( 3 \u2264 m \u2264 2\u00b7104) \u2014 the number of vertices of polygon B. Then following m lines contain pairs of integers xj, yj ( | xj| , | yj| \u2264 109) \u2014 the coordinates of the j- th vertex of polygon B. The vertices are given in the clockwise order. The coordinates of the polygon' s vertices are separated by a single space. It is guaranteed that polygons A and B are non- degenerate, that polygon A is strictly convex, that polygon B has no self- intersections and self- touches and also for each polygon no three consecutively following vertices are located on the same straight line.",
    "output": "Print on the only line the answer to the problem \u2014 if polygon B is strictly inside polygon A, print \" YES\" , otherwise print \" NO\" ( without the quotes) .",
    "note": "",
    "topics": [
      "geometry",
      "sortings"
    ]
  },
  {
    "title": "Rank List",
    "url": "https://codeforces.com/problemset/problem/166/A",
    "history": "Another programming contest is over. You got hold of the contest' s final results table. The table has the following data. For each team we are shown two numbers: the number of problems and the total penalty time. However, for no team we are shown its final place. You know the rules of comparing the results of two given teams very well. Let' s say that team a solved pa problems with total penalty time ta and team b solved pb problems with total penalty time tb. Team a gets a higher place than team b in the end, if it either solved more problems on the contest, or solved the same number of problems but in less total time. In other words, team a gets a higher place than team b in the final results' table if either pa > pb, or pa = pb and ta < tb. It is considered that the teams that solve the same number of problems with the same penalty time share all corresponding places. More formally, let' s say there is a group of x teams that solved the same number of problems with the same penalty time. Let' s also say that y teams performed better than the teams from this group. In this case all teams from the group share places y + 1, y + 2, . . . , y + x. The teams that performed worse than the teams from this group, get their places in the results table starting from the y + x + 1- th place. Your task is to count what number of teams from the given list shared the k- th place.",
    "input": "The first line contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 50) . Then n lines contain the description of the teams: the i- th line contains two integers pi and ti ( 1 \u2264 pi, ti \u2264 50) \u2014 the number of solved problems and the total penalty time of the i- th team, correspondingly. All numbers in the lines are separated by spaces.",
    "output": "In the only line print the sought number of teams that got the k- th place in the final results' table.",
    "note": "The final results' table for the first sample is: 1- 3 places \u2014 4 solved problems, the penalty time equals 10 4 place \u2014 3 solved problems, the penalty time equals 20 5- 6 places \u2014 2 solved problems, the penalty time equals 1 7 place \u2014 1 solved problem, the penalty time equals 10 The table shows that the second place is shared by the teams that solved 4 problems with penalty time 10. There are 3 such teams. The final table for the second sample is: 1 place \u2014 5 solved problems, the penalty time equals 3 2- 5 places \u2014 3 solved problems, the penalty time equals 1 The table shows that the fourth place is shared by the teams that solved 3 problems with penalty time 1. There are 4 such teams.",
    "topics": [
      "binary search",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Conveyor",
    "url": "https://codeforces.com/problemset/problem/163/C",
    "history": "Anton came to a chocolate factory. There he found a working conveyor and decided to run on it from the beginning to the end. The conveyor is a looped belt with a total length of 2l meters, of which l meters are located on the surface and are arranged in a straight line. The part of the belt which turns at any moment ( the part which emerges from under the floor to the surface and returns from the surface under the floor) is assumed to be negligibly short. The belt is moving uniformly at speed v1 meters per second. Anton will be moving on it in the same direction at the constant speed of v2 meters per second, so his speed relatively to the floor will be v1 + v2 meters per second. Anton will neither stop nor change the speed or the direction of movement. Here and there there are chocolates stuck to the belt ( n chocolates) . They move together with the belt, and do not come off it. Anton is keen on the chocolates, but he is more keen to move forward. So he will pick up all the chocolates he will pass by, but nothing more. If a chocolate is at the beginning of the belt at the moment when Anton starts running, he will take it, and if a chocolate is at the end of the belt at the moment when Anton comes off the belt, he will leave it. The figure shows an example with two chocolates. One is located in the position a1 = l - d, and is now on the top half of the belt, the second one is in the position a2 = 2l - d, and is now on the bottom half of the belt. You are given the positions of the chocolates relative to the initial start position of the belt 0 \u2264 a1 < a2 < . . . < an < 2l. The positions on the belt from 0 to l correspond to the top, and from l to 2l \u2014 to the the bottom half of the belt ( see example) . All coordinates are given in meters. Anton begins to run along the belt at a random moment of time. This means that all possible positions of the belt at the moment he starts running are equiprobable. For each i from 0 to n calculate the probability that Anton will pick up exactly i chocolates.",
    "input": "The first line contains space- separated integers n, l, v1 and v2 ( 1 \u2264 n \u2264 105, 1 \u2264 l, v1, v2 \u2264 109) \u2014 the number of the chocolates, the length of the conveyor' s visible part, the conveyor' s speed and Anton' s speed. The second line contains a sequence of space- separated integers a1, a2, . . . , an ( 0 \u2264 a1 < a2 < . . . < an < 2l) \u2014 the coordinates of the chocolates.",
    "output": "Print n + 1 numbers ( one per line) : the probabilities that Anton picks up exactly i chocolates, for each i from 0 ( the first line) to n ( the last line) . The answer will be considered correct if each number will have absolute or relative error of at most than 10 - 9.",
    "note": "In the first sample test Anton can pick up a chocolate if by the moment he starts running its coordinate is less than 0. 5; but if by the moment the boy starts running the chocolate' s coordinate is greater than or equal to 0. 5, then Anton won' t be able to pick it up. As all positions of the belt are equiprobable, the probability of picking up the chocolate equals , and the probability of not picking it up equals .",
    "topics": [
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Discounts",
    "url": "https://codeforces.com/problemset/problem/161/B",
    "history": "One day Polycarpus stopped by a supermarket on his way home. It turns out that the supermarket is having a special offer for stools. The offer is as follows: if a customer' s shopping cart contains at least one stool, the customer gets a 50",
    "input": "The first input line contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 103) \u2014 the number of items in the supermarket and the number of carts, correspondingly. Next n lines describe the items as \" ci ti\" ( without the quotes) , where ci ( 1 \u2264 ci \u2264 109) is an integer denoting the price of the i- th item, ti ( 1 \u2264 ti \u2264 2) is an integer representing the type of item i ( 1 for a stool and 2 for a pencil) . The numbers in the lines are separated by single spaces.",
    "output": "In the first line print a single real number with exactly one decimal place \u2014 the minimum total price of the items, including the discounts. In the following k lines print the descriptions of the items in the carts. In the i- th line print the description of the i- th cart as \" t b1 b2 . . . bt\" ( without the quotes) , where t is the number of items in the i- th cart, and the sequence b1, b2, . . . , bt ( 1 \u2264 bj \u2264 n) gives the indices of items to put in this cart in the optimal distribution. All indices of items in all carts should be pairwise different, each item must belong to exactly one cart. You can print the items in carts and the carts themselves in any order. The items are numbered from 1 to n in the order in which they are specified in the input. If there are multiple optimal distributions, you are allowed to print any of them.",
    "note": "In the first sample case the first cart should contain the 1st and 2nd items, and the second cart should contain the 3rd item. This way each cart has a stool and each cart has a 50",
    "topics": [
      "constructive algorithms",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Buses and People",
    "url": "https://codeforces.com/problemset/problem/160/E",
    "history": "The main Bertown street is represented by a straight line. There are 109 bus stops located on the line. The stops are numbered with integers from 1 to 109 in the order in which they follow on the road. The city has n buses. Every day the i- th bus drives from stop number si to stop number fi ( si < fi) , it stops on all intermediate stops and returns only at night. The bus starts driving at time ti and drives so fast that it finishes driving also at time ti. The time ti is different for all buses. The buses have infinite capacity. Bertown has m citizens. Today the i- th person should get from stop number li to stop number ri ( li < ri) ; the i- th citizen comes to his initial stop ( li) at time bi. Each person, on the one hand, wants to get to the destination point as quickly as possible, and on the other hand, definitely does not want to change the buses as he rides. More formally: the i- th person chooses bus j, with minimum time tj, such that sj \u2264 li, ri \u2264 fj and bi \u2264 tj. Your task is to determine for each citizen whether he can ride to the destination point today and if he can, find the number of the bus on which the citizen will ride.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 105) \u2014 the number of buses and the number of people. Then n lines follow, each of them contains three integers: si, fi, ti ( 1 \u2264 si, fi, ti \u2264 109, si < fi) \u2014 the description of the buses. It is guaranteed that all ti- s are different. Then m lines follow, each of them contains three integers: li, ri, bi ( 1 \u2264 li, ri, bi \u2264 109, li < ri) \u2014 the Bertown citizens' description. Some bi- s could coincide.",
    "output": "In the first line print m space- separated integers: the i- th number should be equal either to - 1, if the person number i can' t get to the destination point, or to the number of the bus that will ride the person number i. The buses are numbered with integers from 1 to n in the input order.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "sortings"
    ]
  },
  {
    "title": "Edges in MST",
    "url": "https://codeforces.com/problemset/problem/160/D",
    "history": "You are given a connected weighted undirected graph without any loops and multiple edges. Let us remind you that a graph' s spanning tree is defined as an acyclic connected subgraph of the given graph that includes all of the graph' s vertexes. The weight of a tree is defined as the sum of weights of the edges that the given tree contains. The minimum spanning tree ( MST) of a graph is defined as the graph' s spanning tree having the minimum possible weight. For any connected graph obviously exists the minimum spanning tree, but in the general case, a graph' s minimum spanning tree is not unique. Your task is to determine the following for each edge of the given graph: whether it is either included in any MST, or included at least in one MST, or not included in any MST.",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 105, ) \u2014 the number of the graph' s vertexes and edges, correspondingly. Then follow m lines, each of them contains three integers \u2014 the description of the graph' s edges as \" ai bi wi\" ( 1 \u2264 ai, bi \u2264 n, 1 \u2264 wi \u2264 106, ai = \u0338 bi) , where ai and bi are the numbers of vertexes connected by the i- th edge, wi is the edge' s weight. It is guaranteed that the graph is connected and doesn' t contain loops or multiple edges.",
    "output": "Print m lines \u2014 the answers for all edges. If the i- th edge is included in any MST, print \" any\" ; if the i- th edge is included at least in one MST, print \" at least one\" ; if the i- th edge isn' t included in any MST, print \" none\" . Print the answers for the edges in the order in which the edges are specified in the input.",
    "note": "In the second sample the MST is unique for the given graph: it contains two first edges. In the third sample any two edges form the MST for the given graph. That means that each edge is included at least in one MST.",
    "topics": [
      "dfs and similar",
      "dsu",
      "graphs",
      "sortings"
    ]
  },
  {
    "title": "Find Pair",
    "url": "https://codeforces.com/problemset/problem/160/C",
    "history": "You' ve got another problem dealing with arrays. Let' s consider an arbitrary sequence containing n ( not necessarily different) integers a1, a2, . . . , an. We are interested in all possible pairs of numbers ( ai, aj) , ( 1 \u2264 i, j \u2264 n) . In other words, let' s consider all n2 pairs of numbers, picked from the given array. For example, in sequence a = 3, 1, 5 are 9 pairs of numbers: ( 3, 3) , ( 3, 1) , ( 3, 5) , ( 1, 3) , ( 1, 1) , ( 1, 5) , ( 5, 3) , ( 5, 1) , ( 5, 5) . Let' s sort all resulting pairs lexicographically by non- decreasing. Let us remind you that pair ( p1, q1) is lexicographically less than pair ( p2, q2) only if either p1 < p2, or p1 = p2 and q1 < q2. Then the sequence, mentioned above, will be sorted like that: ( 1, 1) , ( 1, 3) , ( 1, 5) , ( 3, 1) , ( 3, 3) , ( 3, 5) , ( 5, 1) , ( 5, 3) , ( 5, 5) Let' s number all the pair in the sorted list from 1 to n2. Your task is formulated like this: you should find the k- th pair in the ordered list of all possible pairs of the array you' ve been given.",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 105, 1 \u2264 k \u2264 n2) . The second line contains the array containing n integers a1, a2, . . . , an ( - 109 \u2264 ai \u2264 109) . The numbers in the array can coincide. All numbers are separated with spaces. Please do not use the",
    "output": "In the single line print two numbers \u2014 the sought k- th pair.",
    "note": "In the first sample the sorted sequence for the given array looks as: ( 1, 1) , ( 1, 2) , ( 2, 1) , ( 2, 2) . The 4- th of them is pair ( 2, 2) . The sorted sequence for the array from the second sample is given in the statement. The 2- nd pair there is ( 1, 3) .",
    "topics": [
      "implementation",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Unlucky Ticket",
    "url": "https://codeforces.com/problemset/problem/160/B",
    "history": "Each of you probably has your personal experience of riding public transportation and buying tickets. After a person buys a ticket ( which traditionally has an even number of digits) , he usually checks whether the ticket is lucky. Let us remind you that a ticket is lucky if the sum of digits in its first half matches the sum of digits in its second half. But of course, not every ticket can be lucky. Far from it! Moreover, sometimes one look at a ticket can be enough to say right away that the ticket is not lucky. So, let' s consider the following unluckiness criterion that can definitely determine an unlucky ticket. We' ll say that a ticket is definitely unlucky if each digit from the first half corresponds to some digit from the second half so that each digit from the first half is strictly less than the corresponding digit from the second one or each digit from the first half is strictly more than the corresponding digit from the second one. Each digit should be used exactly once in the comparisons. In other words, there is such bijective correspondence between the digits of the first and the second half of the ticket, that either each digit of the first half turns out strictly less than the corresponding digit of the second half or each digit of the first half turns out strictly more than the corresponding digit from the second half. For example, ticket 2421 meets the following unluckiness criterion and will not be considered lucky ( the sought correspondence is 2 > 1 and 4 > 2) , ticket 0135 also meets the criterion ( the sought correspondence is 0 < 3 and 1 < 5) , and ticket 3754 does not meet the criterion. You have a ticket in your hands, it contains 2n digits. Your task is to check whether it meets the unluckiness criterion.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 100) . The second line contains a string that consists of 2n digits and defines your ticket.",
    "output": "In the first line print \" YES\" if the ticket meets the unluckiness criterion. Otherwise, print \" NO\" ( without the quotes) .",
    "note": "",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Twins",
    "url": "https://codeforces.com/problemset/problem/160/A",
    "history": "Imagine that you have a twin brother or sister. Having another person that looks exactly like you seems very unusual. It' s hard to say if having something of an alter ego is good or bad. And if you do have a twin, then you very well know what it' s like. Now let' s imagine a typical morning in your family. You haven' t woken up yet, and Mom is already going to work. She has been so hasty that she has nearly forgotten to leave the two of her darling children some money to buy lunches in the school cafeteria. She fished in the purse and found some number of coins, or to be exact, n coins of arbitrary values a1, a2, . . . , an. But as Mom was running out of time, she didn' t split the coins for you two. So she scribbled a note asking you to split the money equally. As you woke up, you found Mom' s coins and read her note. \" But why split the money equally? \" \u2014 you thought. After all, your twin is sleeping and he won' t know anything. So you decided to act like that: pick for yourself some subset of coins so that the sum of values of your coins is strictly larger than the sum of values of the remaining coins that your twin will have. However, you correctly thought that if you take too many coins, the twin will suspect the deception. So, you' ve decided to stick to the following strategy to avoid suspicions: you take the minimum number of coins, whose sum of values is strictly more than the sum of values of the remaining coins. On this basis, determine what minimum number of coins you need to take to divide them in the described manner.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 100) \u2014 the number of coins. The second line contains a sequence of n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 100) \u2014 the coins' values. All numbers are separated with spaces.",
    "output": "In the single line print the single number \u2014 the minimum needed number of coins.",
    "note": "In the first sample you will have to take 2 coins ( you and your twin have sums equal to 6, 0 correspondingly) . If you take 1 coin, you get sums 3, 3. If you take 0 coins, you get sums 0, 6. Those variants do not satisfy you as your sum should be strictly more that your twins' sum. In the second sample one coin isn' t enough for us, too. You can pick coins with values 1, 2 or 2, 2. In any case, the minimum number of coins equals 2.",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Zebra Tower",
    "url": "https://codeforces.com/problemset/problem/159/E",
    "history": "Little Janet likes playing with cubes. Actually, she likes to play with anything whatsoever, cubes or tesseracts, as long as they are multicolored. Each cube is described by two parameters \u2014 color ci and size si. A Zebra Tower is a tower that consists of cubes of exactly two colors. Besides, the colors of the cubes in the tower must alternate ( colors of adjacent cubes must differ) . The Zebra Tower should have at least two cubes. There are no other limitations. The figure below shows an example of a Zebra Tower. A Zebra Tower' s height is the sum of sizes of all cubes that form the tower. Help little Janet build the Zebra Tower of the maximum possible height, using the available cubes.",
    "input": "The first line contains an integer n ( 2 \u2264 n \u2264 105) \u2014 the number of cubes. Next n lines contain the descriptions of the cubes, one description per line. A cube description consists of two space- separated integers ci and si ( 1 \u2264 ci, si \u2264 109) \u2014 the i- th cube' s color and size, correspondingly. It is guaranteed that there are at least two cubes of different colors.",
    "output": "Print the description of the Zebra Tower of the maximum height in the following form. In the first line print the tower' s height, in the second line print the number of cubes that form the tower, and in the third line print the space- separated indices of cubes in the order in which they follow in the tower from the bottom to the top. Assume that the cubes are numbered from 1 to n in the order in which they were given in the input. If there are several existing Zebra Towers with maximum heights, it is allowed to print any of them. Please do not use the",
    "note": "",
    "topics": [
      "*special",
      "data structures",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Matchmaker",
    "url": "https://codeforces.com/problemset/problem/159/B",
    "history": "Polycarpus has n markers and m marker caps. Each marker is described by two numbers: xi is the color and yi is the diameter. Correspondingly, each cap is described by two numbers: aj is the color and bj is the diameter. Cap ( aj, bj) can close marker ( xi, yi) only if their diameters match, that is, bj = yi. Besides, a marker is considered to be beautifully closed, if the cap color and the marker color match, that is, aj = xi. Find the way to close the maximum number of markers. If there are several such ways, then choose the one that has the maximum number of beautifully closed markers.",
    "input": "The first input line contains two space- separated integers n and m ( 1 \u2264 n, m \u2264 105) \u2014 the number of markers and the number of caps, correspondingly. Next n lines describe the markers. The i- th line contains two space- separated integers xi, yi ( 1 \u2264 xi, yi \u2264 1000) \u2014 the i- th marker' s color and diameter, correspondingly. Next m lines describe the caps. The j- th line contains two space- separated integers aj, bj ( 1 \u2264 aj, bj \u2264 1000) \u2014 the color and diameter of the j- th cap, correspondingly.",
    "output": "Print two space- separated integers u, v, where u is the number of closed markers and v is the number of beautifully closed markers in the sought optimal way. Remember that you have to find the way to close the maximum number of markers, and if there are several such ways, you should choose the one where the number of beautifully closed markers is maximum.",
    "note": "In the first test sample the first marker should be closed by the fourth cap, the second marker should be closed by the first cap and the third marker should be closed by the second cap. Thus, three markers will be closed, and two of them will be beautifully closed \u2014 the first and the third markers.",
    "topics": [
      "*special",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Phone Talks",
    "url": "https://codeforces.com/problemset/problem/158/E",
    "history": "Cool J has recently become a businessman Mr. Jackson, and he has to make a lot of phone calls now. Today he has n calls planned. For each call we know the moment ti ( in seconds since the start of the day) when it is scheduled to start and its duration di ( in seconds) . All ti are different. Mr. Jackson is a very important person, so he never dials anybody himself, all calls will be incoming. Mr. Jackson isn' t Caesar and he can' t do several things at once. If somebody calls him while he hasn' t finished the previous conversation, Mr. Jackson puts the new call on hold in the queue. In this case immediately after the end of the current call Mr. Jackson takes the earliest incoming call from the queue and starts the conversation. If Mr. Jackson started the call at the second t, and the call continues for d seconds, then Mr. Jackson is busy at seconds t, t + 1, . . . , t + d - 1, and he can start a new call at second t + d. Note that if Mr. Jackson is not busy talking when somebody calls, he can' t put this call on hold. Mr. Jackson isn' t Napoleon either, he likes to sleep. So sometimes he allows himself the luxury of ignoring a call, as if it never was scheduled. He can ignore at most k calls. Note that a call which comes while he is busy talking can be ignored as well. What is the maximum number of seconds Mr. Jackson can sleep today, assuming that he can choose an arbitrary continuous time segment from the current day ( that is, with seconds from the 1- st to the 86400- th, inclusive) when he is not busy talking? Note that some calls can be continued or postponed to the next day or even later. However, the interval for sleep should be completely within the current day.",
    "input": "The first input line contains a pair of integers n, k ( 0 \u2264 k \u2264 n \u2264 4000) separated by a space. Following n lines contain the description of calls for today. The description of each call is located on the single line and consists of two space- separated integers ti and di, ( 1 \u2264 ti, di \u2264 86400) . All ti are distinct, the calls are given in the order of strict increasing ti. Scheduled times of calls [ ti, ti + di - 1] can arbitrarily intersect.",
    "output": "Print a number from 0 to 86400, inclusive \u2014 the maximally possible number of seconds for Mr. Jackson to sleep today.",
    "note": "In the first sample the most convenient way is to ignore the first two calls. In the second sample it is best to ignore the third call. In this case Mr. Jackson will have been speaking: first call: from 1- st to 20000- th second, second call: from 20001- st to 30000- th second, fourth call: from 30001- st to 40000- th second ( the third call is ignored) , fifth call: from 80000- th to 139999- th second. Thus, the longest period of free time is from the 40001- th to the 79999- th second.",
    "topics": [
      "*special",
      "dp",
      "sortings"
    ]
  },
  {
    "title": "Trace",
    "url": "https://codeforces.com/problemset/problem/157/B",
    "history": "One day, as Sherlock Holmes was tracking down one very important criminal, he found a wonderful painting on the wall. This wall could be represented as a plane. The painting had several concentric circles that divided the wall into several parts. Some parts were painted red and all the other were painted blue. Besides, any two neighboring parts were painted different colors, that is, the red and the blue color were alternating, i. e. followed one after the other. The outer area of the wall ( the area that lied outside all circles) was painted blue. Help Sherlock Holmes determine the total area of red parts of the wall. Let us remind you that two circles are called concentric if their centers coincide. Several circles are called concentric if any two of them are concentric.",
    "input": "The first line contains the single integer n ( 1 \u2264 n \u2264 100) . The second line contains n space- separated integers ri ( 1 \u2264 ri \u2264 1000) \u2014 the circles' radii. It is guaranteed that all circles are different.",
    "output": "Print the single real number \u2014 total area of the part of the wall that is painted red. The answer is accepted if absolute or relative error doesn' t exceed 10 - 4.",
    "note": "In the first sample the picture is just one circle of radius 1. Inner part of the circle is painted red. The area of the red part equals \u03c0 \u00d7 12 = \u03c0. In the second sample there are three circles of radii 1, 4 and 2. Outside part of the second circle is painted blue. Part between the second and the third circles is painted red. Part between the first and the third is painted blue. And, finally, the inner part of the first circle is painted red. Overall there are two red parts: the ring between the second and the third circles and the inner part of the first circle. Total area of the red parts is equal ( \u03c0 \u00d7 42 - \u03c0 \u00d7 22) + \u03c0 \u00d7 12 = \u03c0 \u00d7 12 + \u03c0 = 13\u03c0",
    "topics": [
      "geometry",
      "sortings"
    ]
  },
  {
    "title": "Combination",
    "url": "https://codeforces.com/problemset/problem/155/B",
    "history": "Ilya plays a card game by the following rules. A player has several cards. Each card contains two non- negative integers inscribed, one at the top of the card and one at the bottom. At the beginning of the round the player chooses one of his cards to play it. If the top of the card contains number ai, and the bottom contains number bi, then when the player is playing the card, he gets ai points and also gets the opportunity to play additional bi cards. After the playing the card is discarded. More formally: let' s say that there is a counter of the cards that can be played. At the beginning of the round the counter equals one. When a card is played, the counter decreases by one for the played card and increases by the number bi, which is written at the bottom of the card. Then the played card is discarded. If after that the counter is not equal to zero, the player gets the opportunity to play another card from the remaining cards. The round ends when the counter reaches zero or the player runs out of cards. Of course, Ilya wants to get as many points as possible. Can you determine the maximum number of points he can score provided that you know his cards?",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 1000) \u2014 the number of cards Ilya has. Each of the next n lines contains two non- negative space- separated integers \u2014 ai and bi ( 0 \u2264 ai, bi \u2264 104) \u2014 the numbers, written at the top and the bottom of the i- th card correspondingly.",
    "output": "Print the single number \u2014 the maximum number of points you can score in one round by the described rules.",
    "note": "In the first sample none of two cards brings extra moves, so you should play the one that will bring more points. In the second sample you should first play the third card that doesn' t bring any points but lets you play both remaining cards.",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Double Profiles",
    "url": "https://codeforces.com/problemset/problem/154/C",
    "history": "You have been offered a job in a company developing a large social network. Your first task is connected with searching profiles that most probably belong to the same user. The social network contains n registered profiles, numbered from 1 to n. Some pairs there are friends ( the \" friendship\" relationship is mutual, that is, if i is friends with j, then j is also friends with i) . Let' s say that profiles i and j ( i = \u0338 j) are doubles, if for any profile k ( k = \u0338 i, k = \u0338 j) one of the two statements is true: either k is friends with i and j, or k isn' t friends with either of them. Also, i and j can be friends or not be friends. Your task is to count the number of different unordered pairs ( i, j) , such that the profiles i and j are doubles. Note that the pairs are unordered, that is, pairs ( a, b) and ( b, a) are considered identical.",
    "input": "The first line contains two space- separated integers n and m ( 1 \u2264 n \u2264 106, 0 \u2264 m \u2264 106) , \u2014 the number of profiles and the number of pairs of friends, correspondingly. Next m lines contains descriptions of pairs of friends in the format \" v u\" , where v and u ( 1 \u2264 v, u \u2264 n, v = \u0338 u) are numbers of profiles that are friends with each other. It is guaranteed that each unordered pair of friends occurs no more than once and no profile is friends with itself.",
    "output": "Print the single integer \u2014 the number of unordered pairs of profiles that are doubles. Please do not use the",
    "note": "In the first and second sample any two profiles are doubles. In the third sample the doubles are pairs of profiles ( 1, 3) and ( 2, 4) .",
    "topics": [
      "graphs",
      "hashing",
      "sortings"
    ]
  },
  {
    "title": "Division into Teams",
    "url": "https://codeforces.com/problemset/problem/149/C",
    "history": "Petya loves football very much, especially when his parents aren' t home. Each morning he comes to the yard, gathers his friends and they play all day. From time to time they have a break to have some food or do some chores ( for example, water the flowers) . The key in football is to divide into teams fairly before the game begins. There are n boys playing football in the yard ( including Petya) , each boy' s football playing skill is expressed with a non- negative characteristic ai ( the larger it is, the better the boy plays) . Let' s denote the number of players in the first team as x, the number of players in the second team as y, the individual numbers of boys who play for the first team as pi and the individual numbers of boys who play for the second team as qi. Division n boys into two teams is considered fair if three conditions are fulfilled: Each boy plays for exactly one team ( x + y = n) . The sizes of teams differ in no more than one ( | x - y| \u2264 1) . The total football playing skills for two teams differ in no more than by the value of skill the best player in the yard has. More formally: Your task is to help guys divide into two teams fairly. It is guaranteed that a fair division into two teams always exists.",
    "input": "The first line contains the only integer n ( 2 \u2264 n \u2264 105) which represents the number of guys in the yard. The next line contains n positive space- separated integers, ai ( 1 \u2264 ai \u2264 104) , the i- th number represents the i- th boy' s playing skills.",
    "output": "On the first line print an integer x \u2014 the number of boys playing for the first team. On the second line print x integers \u2014 the individual numbers of boys playing for the first team. On the third line print an integer y \u2014 the number of boys playing for the second team, on the fourth line print y integers \u2014 the individual numbers of boys playing for the second team. Don' t forget that you should fulfil all three conditions: x + y = n, | x - y| \u2264 1, and the condition that limits the total skills. If there are multiple ways to solve the problem, print any of them. The boys are numbered starting from one in the order in which their skills are given in the input data. You are allowed to print individual numbers of boys who belong to the same team in any order.",
    "note": "Let' s consider the first sample test. There we send the first and the second boy to the first team and the third boy to the second team. Let' s check all three conditions of a fair division. The first limitation is fulfilled ( all boys play) , the second limitation on the sizes of groups ( | 2 - 1| = 1 \u2264 1) is fulfilled, the third limitation on the difference in skills ( ( 2 + 1) - ( 1) = 2 \u2264 2) is fulfilled.",
    "topics": [
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Business trip",
    "url": "https://codeforces.com/problemset/problem/149/A",
    "history": "What joy! Petya' s parents went on a business trip for the whole year and the playful kid is left all by himself. Petya got absolutely happy. He jumped on the bed and threw pillows all day long, until. . . Today Petya opened the cupboard and found a scary note there. His parents had left him with duties: he should water their favourite flower all year, each day, in the morning, in the afternoon and in the evening. \" Wait a second! \" \u2014 thought Petya. He know for a fact that if he fulfills the parents' task in the i- th ( 1 \u2264 i \u2264 12) month of the year, then the flower will grow by ai centimeters, and if he doesn' t water the flower in the i- th month, then the flower won' t grow this month. Petya also knows that try as he might, his parents won' t believe that he has been watering the flower if it grows strictly less than by k centimeters. Help Petya choose the minimum number of months when he will water the flower, given that the flower should grow no less than by k centimeters.",
    "input": "The first line contains exactly one integer k ( 0 \u2264 k \u2264 100) . The next line contains twelve space- separated integers: the i- th ( 1 \u2264 i \u2264 12) number in the line represents ai ( 0 \u2264 ai \u2264 100) .",
    "output": "Print the only integer \u2014 the minimum number of months when Petya has to water the flower so that the flower grows no less than by k centimeters. If the flower can' t grow by k centimeters in a year, print - 1.",
    "note": "Let' s consider the first sample test. There it is enough to water the flower during the seventh and the ninth month. Then the flower grows by exactly five centimeters. In the second sample Petya' s parents will believe him even if the flower doesn' t grow at all ( k = 0) . So, it is possible for Petya not to water the flower at all.",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Queue",
    "url": "https://codeforces.com/problemset/problem/141/C",
    "history": "In the Main Berland Bank n people stand in a queue at the cashier, everyone knows his/ her height hi, and the heights of the other people in the queue. Each of them keeps in mind number ai \u2014 how many people who are taller than him/ her and stand in queue in front of him. After a while the cashier has a lunch break and the people in the queue seat on the chairs in the waiting room in a random order. When the lunch break was over, it turned out that nobody can remember the exact order of the people in the queue, but everyone remembers his number ai. Your task is to restore the order in which the people stood in the queue if it is possible. There may be several acceptable orders, but you need to find any of them. Also, you need to print a possible set of numbers hi \u2014 the heights of people in the queue, so that the numbers ai are correct.",
    "input": "The first input line contains integer n \u2014 the number of people in the queue ( 1 \u2264 n \u2264 3000) . Then n lines contain descriptions of the people as \" namei ai\" ( one description on one line) , where namei is a non- empty string consisting of lowercase Latin letters whose length does not exceed 10 characters ( the i- th person' s name) , ai is an integer ( 0 \u2264 ai \u2264 n - 1) , that represents the number of people who are higher and stand in the queue in front of person i. It is guaranteed that all names are different.",
    "output": "If there' s no acceptable order of the people in the queue, print the single line containing \" - 1\" without the quotes. Otherwise, print in n lines the people as \" namei hi\" , where hi is the integer from 1 to 109 ( inclusive) , the possible height of a man whose name is namei. Print the people in the order in which they stand in the queue, starting from the head of the queue and moving to its tail. Numbers hi are not necessarily unique.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Amusing Joke",
    "url": "https://codeforces.com/problemset/problem/141/A",
    "history": "So, the New Year holidays are over. Santa Claus and his colleagues can take a rest and have guests at last. When two \" New Year and Christmas Men\" meet, thear assistants cut out of cardboard the letters from the guest' s name and the host' s name in honor of this event. Then the hung the letters above the main entrance. One night, when everyone went to bed, someone took all the letters of our characters' names. Then he may have shuffled the letters and put them in one pile in front of the door. The next morning it was impossible to find the culprit who had made the disorder. But everybody wondered whether it is possible to restore the names of the host and his guests from the letters lying at the door? That is, we need to verify that there are no extra letters, and that nobody will need to cut more letters. Help the \" New Year and Christmas Men\" and their friends to cope with this problem. You are given both inscriptions that hung over the front door the previous night, and a pile of letters that were found at the front door next morning.",
    "input": "The input file consists of three lines: the first line contains the guest' s name, the second line contains the name of the residence host and the third line contains letters in a pile that were found at the door in the morning. All lines are not empty and contain only uppercase Latin letters. The length of each line does not exceed 100.",
    "output": "Print \" YES\" without the quotes, if the letters in the pile could be permuted to make the names of the \" New Year and Christmas Men\" . Otherwise, print \" NO\" without the quotes.",
    "note": "In the first sample the letters written in the last line can be used to write the names and there won' t be any extra letters left. In the second sample letter \" P\" is missing from the pile and there' s an extra letter \" L\" . In the third sample there' s an extra letter \" L\" .",
    "topics": [
      "implementation",
      "sortings",
      "strings"
    ]
  },
  {
    "title": "New Year Snowflake",
    "url": "https://codeforces.com/problemset/problem/140/F",
    "history": "As Gerald . . . , in other words, on a New Year Eve Constantine prepared an unusual present for the Beautiful Lady. The present is the magic New Year snowflake that can make any dream come true. The New Year snowflake consists of tiny ice crystals, which can be approximately regarded as points on the plane. The beauty of the New Year snowflake is that it has a center of symmetry. This is a point such that for each crystal of the snowflake exists another crystal, symmetrical to it relative to that point. One of the crystals can be placed directly in the center of symmetry. While Constantine was choosing a snowflake among millions of other snowflakes, no less symmetrical and no less magical, then endured a difficult path through the drifts to the house of his mistress, while he was waiting with bated breath for a few long moments before the Beautiful Lady opens the door, some of the snowflake crystals melted and naturally disappeared. Constantine is sure that there were no more than k of such crystals, because he handled the snowflake very carefully. Now he is ready to demonstrate to the Beautiful Lady all the power of nanotechnology and restore the symmetry of snowflakes. You are given the coordinates of the surviving snowflake crystals, given in nanometers. Your task is to identify all possible positions of the original center of symmetry.",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 200 000, 0 \u2264 k \u2264 10) \u2014 the number of the surviving snowflake crystals and the maximum number of melted crystals, correspondingly. Next n lines contain the coordinates of the crystals that are left in the following form: \" xi yi\" . The coordinates are integers and do not exceed 5\u00b7108 in absolute value. All given points are different.",
    "output": "The first line contains an integer c \u2014 the number of possible symmetry centers. Next c lines should contain the centers' descriptions. Each symmetry center is described by a couple of coordinates \" x y\" , separated by a space. Print the coordinates with absolute error not exceeding 10 - 6. You are allowed to print the symmetry centers in any order. All printed points should be different. If there exist an infinite number of possible symmetry centers, print the single number \" - 1\" .",
    "note": "",
    "topics": [
      "geometry",
      "sortings"
    ]
  },
  {
    "title": "New Year Contest",
    "url": "https://codeforces.com/problemset/problem/140/D",
    "history": "As Gerald sets the table, Alexander sends the greeting cards, and Sergey and his twins create an army of clone snowmen, Gennady writes a New Year contest. The New Year contest begins at 18: 00 ( 6. 00 P. M. ) on December 31 and ends at 6: 00 ( 6. 00 A. M. ) on January 1. There are n problems for the contest. The penalty time for each solved problem is set as the distance from the moment of solution submission to the New Year in minutes. For example, the problem submitted at 21: 00 ( 9. 00 P. M. ) gets penalty time 180, as well as the problem submitted at 3: 00 ( 3. 00 A. M. ) . The total penalty time is calculated as the sum of penalty time for all solved problems. It is allowed to submit a problem exactly at the end of the contest, at 6: 00 ( 6. 00 A. M. ) . Gennady opened the problems exactly at 18: 00 ( 6. 00 P. M. ) and managed to estimate their complexity during the first 10 minutes of the contest. He believes that writing a solution for the i- th problem will take ai minutes. Gennady can submit a solution for evaluation at any time after he completes writing it. Probably he will have to distract from writing some solution to send the solutions of other problems for evaluation. The time needed to send the solutions can be neglected, i. e. this time can be considered to equal zero. Gennady can simultaneously submit multiple solutions. Besides, he can move at any time from writing one problem to another, and then return to the first problem from the very same place, where he has left it. Thus the total solution writing time of the i- th problem always equals ai minutes. Of course, Gennady does not commit wrong attempts, and his solutions are always correct and are accepted from the first attempt. He can begin to write the solutions starting from 18: 10 ( 6. 10 P. M. ) . Help Gennady choose from the strategies that help him solve the maximum possible number of problems, the one with which his total penalty time will be minimum.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 100) \u2014 the number of the problems. The next line contains n space- separated integers ai ( 1 \u2264 ai \u2264 720) \u2014 each number shows how much time in minutes Gennady will spend writing a solution to the problem.",
    "output": "Print two integers \u2014 the number of problems Gennady will solve and the total penalty time considering that he chooses the optimal strategy.",
    "note": "In the sample, one of Gennady' s possible optimal strategies is as follows. At 18: 10 ( 6: 10 PM) he begins to write the first problem and solves it in 30 minutes ( 18: 40 or 6. 40 P. M. ) . At 18: 40 ( 6. 40 P. M. ) he begins to write the second problem. There are 320 minutes left before the New Year, so Gennady does not have the time to finish writing the second problem before the New Year. At 0: 00 ( 12. 00 A. M. ) he distracts from the second problem, submits the first one, and returns immediately to writing the second problem. At 0: 10 ( 0. 10 A. M. ) , he completes the solution for the second problem, submits it and gets 10 minute penalty time. Note that as the total duration of the contest is 720 minutes and Gennady has already spent 10 minutes on reading the problems, he will not have time to solve the third problem during the contest. Yes, such problems happen to exist. Competitions by the given rules are held annually on the site http: / / b23. ru/ 3wvc",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Mushroom Gnomes - 2",
    "url": "https://codeforces.com/problemset/problem/138/C",
    "history": "One day Natalia was walking in the woods when she met a little mushroom gnome. The gnome told her the following story: Everybody knows that the mushroom gnomes' power lies in the magic mushrooms that grow in the native woods of the gnomes. There are n trees and m magic mushrooms in the woods: the i- th tree grows at a point on a straight line with coordinates ai and has the height of hi, the j- th mushroom grows at the point with coordinates bj and has magical powers zj. But one day wild mushroommunchers, the sworn enemies of mushroom gnomes unleashed a terrible storm on their home forest. As a result, some of the trees began to fall and crush the magic mushrooms. The supreme oracle of mushroom gnomes calculated in advance the probability for each tree that it will fall to the left, to the right or will stand on. If the tree with the coordinate x and height h falls to the left, then all the mushrooms that belong to the right- open interval [ x - h, x) , are destroyed. If a tree falls to the right, then the mushrooms that belong to the left- open interval ( x, x + h] are destroyed. Only those mushrooms that are not hit by a single tree survive. Knowing that all the trees fall independently of each other ( i. e. , all the events are mutually independent, and besides, the trees do not interfere with other trees falling in an arbitrary direction) , the supreme oracle was also able to quickly calculate what would be the expectation of the total power of the mushrooms which survived after the storm. His calculations ultimately saved the mushroom gnomes from imminent death. Natalia, as a good Olympiad programmer, got interested in this story, and she decided to come up with a way to quickly calculate the expectation of the sum of the surviving mushrooms' power.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 105, 1 \u2264 m \u2264 104) \u2014 the number of trees and mushrooms, respectively. Each of the next n lines contain four integers \u2014 ai, hi, li, ri ( | ai| \u2264 109, 1 \u2264 hi \u2264 109, 0 \u2264 li, ri, li + ri \u2264 100) which represent the coordinate of the i- th tree, its height, the percentage of the probabilities that the tree falls to the left and to the right, respectively ( the remaining percentage is the probability that the tree will stand on) . Each of next m lines contain two integers bj, zj ( | bj| \u2264 109, 1 \u2264 zj \u2264 103) which represent the coordinate and the magical power of the j- th mushroom, respectively. An arbitrary number of trees and mushrooms can grow in one point.",
    "output": "Print a real number \u2014 the expectation of the total magical power of the surviving mushrooms. The result is accepted with relative or absolute accuracy 10 - 4.",
    "note": "It is believed that the mushroom with the coordinate x belongs to the right- open interval [ l, r) if and only if l \u2264 x < r. Similarly, the mushroom with the coordinate x belongs to the left- open interval ( l, r] if and only if l < x \u2264 r. In the first test the mushroom survives with the probability of 50",
    "topics": [
      "binary search",
      "data structures",
      "probabilities",
      "sortings"
    ]
  },
  {
    "title": "History",
    "url": "https://codeforces.com/problemset/problem/137/C",
    "history": "Polycarpus likes studying at school a lot and he is always diligent about his homework. Polycarpus has never had any problems with natural sciences as his great- great- grandfather was the great physicist Seinstein. On the other hand though, Polycarpus has never had an easy time with history. Everybody knows that the World history encompasses exactly n events: the i- th event had continued from the year ai to the year bi inclusive ( ai < bi) . Polycarpus easily learned the dates when each of n events started and ended ( Polycarpus inherited excellent memory from his great- great- granddad) . But the teacher gave him a more complicated task: Polycaprus should know when all events began and ended and he should also find out for each event whether it includes another event. Polycarpus' teacher thinks that an event j includes an event i if aj < ai and bi < bj. Your task is simpler: find the number of events that are included in some other event.",
    "input": "The first input line contains integer n ( 1 \u2264 n \u2264 105) which represents the number of events. Next n lines contain descriptions of the historical events, one event per line. The i + 1 line contains two integers ai and bi ( 1 \u2264 ai < bi \u2264 109) \u2014 the beginning and the end of the i- th event. No two events start or finish in the same year, that is, ai = \u0338 aj, ai = \u0338 bj, bi = \u0338 aj, bi = \u0338 bj for all i, j ( where i = \u0338 j) . Events are given in arbitrary order.",
    "output": "Print the only integer \u2014 the answer to the problem.",
    "note": "In the first example the fifth event is contained in the fourth. Similarly, the fourth event is contained in the third, the third \u2014 in the second and the second \u2014 in the first. In the second example all events except the first one are contained in the first. In the third example only one event, so the answer is 0.",
    "topics": [
      "sortings"
    ]
  },
  {
    "title": "Replacement",
    "url": "https://codeforces.com/problemset/problem/135/A",
    "history": "Little Petya very much likes arrays consisting of n integers, where each of them is in the range from 1 to 109, inclusive. Recently he has received one such array as a gift from his mother. Petya didn' t like it at once. He decided to choose exactly one element from the array and replace it with another integer that also lies in the range from 1 to 109, inclusive. It is not allowed to replace a number with itself or to change no number at all. After the replacement Petya sorted the array by the numbers' non- decreasing. Now he wants to know for each position: what minimum number could occupy it after the replacement and the sorting.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 105) , which represents how many numbers the array has. The next line contains n space- separated integers \u2014 the array' s description. All elements of the array lie in the range from 1 to 109, inclusive.",
    "output": "Print n space- separated integers \u2014 the minimum possible values of each array element after one replacement and the sorting are performed.",
    "note": "",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Yet Another Task with Queens",
    "url": "https://codeforces.com/problemset/problem/131/E",
    "history": "A queen is the strongest chess piece. In modern chess the queen can move any number of squares in any horizontal, vertical or diagonal direction ( considering that there' re no other pieces on its way) . The queen combines the options given to the rook and the bishop. There are m queens on a square n \u00d7 n chessboard. You know each queen' s positions, the i- th queen is positioned in the square ( ri, ci) , where ri is the board row number ( numbered from the top to the bottom from 1 to n) , and ci is the board' s column number ( numbered from the left to the right from 1 to n) . No two queens share the same position. For each queen one can count w \u2014 the number of other queens that the given queen threatens ( attacks) . For a fixed attack direction only the first queen in this direction is under attack if there are many queens are on the ray of the attack. Obviously, for any queen w is between 0 and 8, inclusive. Print the sequence t0, t1, . . . , t8, where ti is the number of queens that threaten exactly i other queens, i. e. the number of queens that their w equals i.",
    "input": "The first line of the input contains a pair of integers n, m ( 1 \u2264 n, m \u2264 105) , where n is the size of the board and m is the number of queens on the board. Then m following lines contain positions of the queens, one per line. Each line contains a pair of integers ri, ci ( 1 \u2264 ri, ci \u2264 n) \u2014 the queen' s position. No two queens stand on the same square.",
    "output": "Print the required sequence t0, t1, . . . , t8, separating the numbers with spaces.",
    "note": "",
    "topics": [
      "sortings"
    ]
  },
  {
    "title": "Array sorting",
    "url": "https://codeforces.com/problemset/problem/130/I",
    "history": "Sorting arrays is traditionally associated with high- level languages. How hard can it be in Befunge? Sort the given array in non- descending order.",
    "input": "The first line of input contains an integer n ( 1 \u2264 n \u2264 100) \u2014 the size of the array. The following n lines contain the elements of the array, one per line. Each element of the array is an integer between 1 and 60, inclusive. The array might contain duplicate elements.",
    "output": "Output space- separated elements of the sorted array.",
    "note": "",
    "topics": [
      "*special",
      "sortings"
    ]
  },
  {
    "title": "Minimum Sum",
    "url": "https://codeforces.com/problemset/problem/120/J",
    "history": "You are given a set of n vectors on a plane. For each vector you are allowed to multiply any of its coordinates by - 1. Thus, each vector vi = ( xi, yi) can be transformed into one of the following four vectors: vi1 = ( xi, yi) , vi2 = ( - xi, yi) , vi3 = ( xi, - yi) , vi4 = ( - xi, - yi) . You should find two vectors from the set and determine which of their coordinates should be multiplied by - 1 so that the absolute value of the sum of the resulting vectors was minimally possible. More formally, you should choose two vectors vi, vj ( 1 \u2264 i, j \u2264 n, i = \u0338 j) and two numbers k1, k2 ( 1 \u2264 k1, k2 \u2264 4) , so that the value of the expression | vik1 + vjk2| were minimum.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 105) . Then n lines contain vectors as pairs of integers \" xi yi\" ( - 10000 \u2264 xi, yi \u2264 10000) , one pair per line.",
    "output": "Print on the first line four space- separated numbers \" i k1 j k2\" \u2014 the answer to the problem. If there are several variants the absolute value of whose sums is minimum, you can print any of them.",
    "note": "A sum of two vectors v = ( xv, yv) and u = ( xu, yu) is vector s = v + u = ( xv + xu, yv + yu) . An absolute value of vector v = ( x, y) is number . In the second sample there are several valid answers, such as: ( 3 1 4 2) , ( 3 1 4 4) , ( 3 4 4 1) , ( 3 4 4 3) , ( 4 1 3 2) , ( 4 1 3 4) , ( 4 2 3 1) .",
    "topics": [
      "divide and conquer",
      "geometry",
      "sortings"
    ]
  },
  {
    "title": "Before Exam",
    "url": "https://codeforces.com/problemset/problem/119/B",
    "history": "Vasya is about to take his first university exam in about several minutes. And it' s not just some ordinary exam, it' s on mathematical analysis. Of course, right now Vasya can only think of one thing: what the result of his talk with the examiner will be. . . To prepare for the exam, one has to study proofs of n theorems. It is known that there will be k examination cards on the exam and each card contains distinct theorems. Besides, no theorem is mentioned in more than one card ( that is, theorems won' t be mentioned in any card) . During the exam several students may get the same card. We do not know the exact way theorems are distributed by cards, however the students that took the exam before Vasya told him what theorems their cards contained. Vasya evaluates his level of proficiency in the i- th theorem by some number ai. The level of proficiency in some card is the average of the levels of proficiency in the theorems that are included in the card. Now Vasya wants to know the minimally and maximally possible levels of his proficiency in the card he gets on the exam. Vasya wants to determine it by the data he has collected from other students. Unfortunately, Vasya has no time left to do the math and he asked you to help him.",
    "input": "The first line contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 100) \u2014 the number of theorems and the number of cards correspondingly. The second line contains n integers ai ( 0 \u2264 ai \u2264 100) , the i- th number ( 1 \u2264 i \u2264 n) corresponds to Vasya' s proficiency in the i- th theorem. The third line contains number q ( 0 \u2264 q \u2264 100) \u2014 the number of people that have taken the exam before Vasya. Each of the following q lines contains the description of a student' s card: integers from 1 to n inclusive. They are the numbers of theorems included in the card in the order in which they are enumerated in the input data. The numbers are given in an arbitrary order. It is guaranteed that the given cards are valid ( that is, that all theorems in one card are different and that different people get cards that either don' t contain the same theorems or coincide up to the theorems' permutation) .",
    "output": "Print two real numbers, representing Vasya' s minimum and maximum proficiency in the card he will get on the exam. The absolute or relative error should not exceed 10 - 6.",
    "note": "Let' s analyze the first sample. Vasya' s proficiency in the cards whose content he already knows equals 6 and 15. 5 correspondingly. The three theorems that are left are only enough to make one exam card. If we consider all possible variants of theorems included in the card we can see that in the best case scenario Vasya gets the card that contains theorems 4 and 7 ( his proficiency would equal 15. 5) and in the worst case scenario he gets theorems 3 and 5 ( his proficiency would equal 5) . The \u230a x\u230b operation denotes taking integer part of real number x ( rounding down) .",
    "topics": [
      "constructive algorithms",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Fancy Number",
    "url": "https://codeforces.com/problemset/problem/118/C",
    "history": "A car number in Berland consists of exactly n digits. A number is called beautiful if it has at least k equal digits. Vasya wants to change the digits in his car' s number so that the number became beautiful. To replace one of n digits Vasya has to pay the sum of money, equal to the absolute difference between the old digit and the new one. Help Vasya: find the minimum sum of money he should pay to make the number of his car beautiful. You should also find the resulting beautiful number. If there are several such numbers, then print the lexicographically minimum one.",
    "input": "The first line contains two space- separated integers n and k ( 2 \u2264 n \u2264 104, 2 \u2264 k \u2264 n) which represent how many digits the number has and how many equal digits a beautiful number should have. The second line consists of n digits. It describes the old number of Vasya' s car. It is guaranteed that the number contains no spaces and only contains digits.",
    "output": "On the first line print the minimum sum of money Vasya needs to change the number. On the second line print the car' s new number. If there are several solutions, print the lexicographically minimum one.",
    "note": "In the first sample replacing the second digit with an \" 8\" costs | 9 - 8| = 1. Replacing the fifth digit with an \" 8\" costs the same. Replacing the sixth digit costs | 6 - 8| = 2. As a result, Vasya will pay 1 + 1 + 2 = 4 for a beautiful number \" 888188\" . The lexicographical comparison of strings is performed by the < operator in modern programming languages. The string x is lexicographically smaller than the string y, if there exists such i ( 1 \u2264 i \u2264 n) , that xi < yi, and for any j ( 1 \u2264 j < i) xj = yj. The strings compared in this problem will always have the length n.",
    "topics": [
      "brute force",
      "greedy",
      "sortings",
      "strings"
    ]
  },
  {
    "title": "Lawnmower",
    "url": "https://codeforces.com/problemset/problem/115/B",
    "history": "You have a garden consisting entirely of grass and weeds. Your garden is described by an n \u00d7 m grid, with rows numbered 1 to n from top to bottom, and columns 1 to m from left to right. Each cell is identified by a pair ( r, c) which means that the cell is located at row r and column c. Each cell may contain either grass or weeds. For example, a 4 \u00d7 5 garden may look as follows ( empty cells denote grass) : You have a land- mower with you to mow all the weeds. Initially, you are standing with your lawnmower at the top- left corner of the garden. That is, at cell ( 1, 1) . At any moment of time you are facing a certain direction \u2014 either left or right. And initially, you face right. In one move you can do either one of these: 1) Move one cell in the direction that you are facing. if you are facing right: move from cell ( r, c) to cell ( r, c + 1) if you are facing left: move from cell ( r, c) to cell ( r, c - 1) 2) Move one cell down ( that is, from cell ( r, c) to cell ( r + 1, c) ) , and change your direction to the opposite one. if you were facing right previously, you will face left if you were facing left previously, you will face right You are not allowed to leave the garden. Weeds will be mowed if you and your lawnmower are standing at the cell containing the weeds ( your direction doesn' t matter) . This action isn' t counted as a move. What is the minimum number of moves required to mow all the weeds?",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 150) \u2014 the number of rows and columns respectively. Then follow n lines containing m characters each \u2014 the content of the grid. \" G\" means that this cell contains grass. \" W\" means that this cell contains weeds. It is guaranteed that the top- left corner of the grid will contain grass.",
    "output": "Print a single number \u2014 the minimum number of moves required to mow all the weeds.",
    "note": "For the first example, this is the picture of the initial state of the grid: A possible solution is by mowing the weeds as illustrated below:",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Lucky Sorting",
    "url": "https://codeforces.com/problemset/problem/109/D",
    "history": "Petya loves lucky numbers. We all know that lucky numbers are the positive integers whose decimal representations contain only the lucky digits 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not. Petya got an array consisting of n numbers, it is the gift for his birthday. Now he wants to sort it in the non- decreasing order. However, a usual sorting is boring to perform, that' s why Petya invented the following limitation: one can swap any two numbers but only if at least one of them is lucky. Your task is to sort the array according to the specified limitation. Find any possible sequence of the swaps ( the number of operations in the sequence should not exceed 2n) .",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 105) \u2014 the number of elements in the array. The second line contains n positive integers, not exceeding 109 \u2014 the array that needs to be sorted in the non- decreasing order.",
    "output": "On the first line print number k ( 0 \u2264 k \u2264 2n) \u2014 the number of the swaps in the sorting. On the following k lines print one pair of distinct numbers ( a pair per line) \u2014 the indexes of elements to swap. The numbers in the array are numbered starting from 1. If it is impossible to sort the given sequence, print the single number - 1. If there are several solutions, output any. Note that you don' t have to minimize k. Any sorting with no more than 2n swaps is accepted.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "sortings"
    ]
  },
  {
    "title": "Datatypes",
    "url": "https://codeforces.com/problemset/problem/108/B",
    "history": "Tattah' s youngest brother, Tuftuf, is new to programming. Since his older brother is such a good programmer, his biggest dream is to outshine him. Tuftuf is a student at the German University in Cairo ( GUC) where he learns to write programs in Gava. Today, Tuftuf was introduced to Gava' s unsigned integer datatypes. Gava has n unsigned integer datatypes of sizes ( in bits) a1, a2, . . . an. The i- th datatype have size ai bits, so it can represent every integer between 0 and 2ai - 1 inclusive. Tuftuf is thinking of learning a better programming language. If there exists an integer x, such that x fits in some type i ( in ai bits) and x\u00b7x does not fit in some other type j ( in aj bits) where ai < aj, then Tuftuf will stop using Gava. Your task is to determine Tuftuf' s destiny.",
    "input": "The first line contains integer n ( 2 \u2264 n \u2264 105) \u2014 the number of Gava' s unsigned integer datatypes' sizes. The second line contains a single- space- separated list of n integers ( 1 \u2264 ai \u2264 109) \u2014 sizes of datatypes in bits. Some datatypes may have equal sizes.",
    "output": "Print \" YES\" if Tuftuf will stop using Gava, and \" NO\" otherwise.",
    "note": "In the second example, x = 7 ( 1112) fits in 3 bits, but x2 = 49 ( 1100012) does not fit in 4 bits.",
    "topics": [
      "math",
      "sortings"
    ]
  },
  {
    "title": "Item World",
    "url": "https://codeforces.com/problemset/problem/105/C",
    "history": "Each item in the game has a level. The higher the level is, the higher basic parameters the item has. We shall consider only the following basic parameters: attack ( atk) , defense ( def) and resistance to different types of impact ( res) . Each item belongs to one class. In this problem we will only consider three of such classes: weapon, armor, orb. Besides, there' s a whole new world hidden inside each item. We can increase an item' s level travelling to its world. We can also capture the so- called residents in the Item WorldResidents are the creatures that live inside items. Each resident gives some bonus to the item in which it is currently located. We will only consider residents of types: gladiator ( who improves the item' s atk) , sentry ( who improves def) and physician ( who improves res) . Each item has the size parameter. The parameter limits the maximum number of residents that can live inside an item. We can move residents between items. Within one moment of time we can take some resident from an item and move it to some other item if it has a free place for a new resident. We cannot remove a resident from the items and leave outside \u2014 any of them should be inside of some item at any moment of time. Laharl has a certain number of items. He wants to move the residents between items so as to equip himself with weapon, armor and a defensive orb. The weapon' s atk should be largest possible in the end. Among all equipping patterns containing weapon' s maximum atk parameter we should choose the ones where the armor\u2019s def parameter is the largest possible. Among all such equipment patterns we should choose the one where the defensive orb would have the largest possible res parameter. Values of the parameters def and res of weapon, atk and res of armor and atk and def of orb are indifferent for Laharl. Find the optimal equipment pattern Laharl can get.",
    "input": "The first line contains number n ( 3 \u2264 n \u2264 100) \u2014 representing how many items Laharl has. Then follow n lines. Each line contains description of an item. The description has the following form: \" name class atk def res size\" \u2014 the item' s name, class, basic attack, defense and resistance parameters and its size correspondingly. name and class are strings and atk, def, res and size are integers. name consists of lowercase Latin letters and its length can range from 1 to 10, inclusive. class can be \" weapon\" , \" armor\" or \" orb\" . 0 \u2264 atk, def, res \u2264 1000. 1 \u2264 size \u2264 10. It is guaranteed that Laharl has at least one item of each class. The next line contains an integer k ( 1 \u2264 k \u2264 1000) \u2014 the number of residents. Then k lines follow. Each of them describes a resident. A resident description looks like: \" name type bonus home\" \u2014 the resident' s name, his type, the number of points the resident adds to the item' s corresponding parameter and the name of the item which currently contains the resident. name, type and home are strings and bonus is an integer. name consists of lowercase Latin letters and its length can range from 1 to 10, inclusive. type may be \" gladiator\" , \" sentry\" or \" physician\" . 1 \u2264 bonus \u2264 100. It is guaranteed that the number of residents in each item does not exceed the item' s size. The names of all items and residents are pairwise different. All words and numbers in the input are separated by single spaces.",
    "output": "Print on the first line the name of the weapon in the optimal equipping pattern; then print the number of residents the weapon contains; then print the residents' names. Print on the second and third lines in the same form the names of the armor and defensive orb as well as the residents they contain. Use single spaces for separation. If there are several possible solutions, print any of them.",
    "note": "In the second sample we have no free space inside the items, therefore we cannot move the residents between them.",
    "topics": [
      "brute force",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Time to Raid Cowavans",
    "url": "https://codeforces.com/problemset/problem/103/D",
    "history": "As you know, the most intelligent beings on the Earth are, of course, cows. This conclusion was reached long ago by the Martian aliens, as well as a number of other intelligent civilizations from outer space. Sometimes cows gather into cowavans. This seems to be seasonal. But at this time the cows become passive and react poorly to external stimuli. A cowavan is a perfect target for the Martian scientific saucer, it' s time for large- scale abductions, or, as the Martians say, raids. Simply put, a cowavan is a set of cows in a row. If we number all cows in the cowavan with positive integers from 1 to n, then we can formalize the popular model of abduction, known as the ( a, b) - Cowavan Raid: first they steal a cow number a, then number a + b, then \u2014 number a + 2\u00b7b, and so on, until the number of an abducted cow exceeds n. During one raid the cows are not renumbered. The aliens would be happy to place all the cows on board of their hospitable ship, but unfortunately, the amount of cargo space is very, very limited. The researchers, knowing the mass of each cow in the cowavan, made p scenarios of the ( a, b) - raid. Now they want to identify the following thing for each scenario individually: what total mass of pure beef will get on board of the ship. All the scenarios are independent, in the process of performing the calculations the cows are not being stolen.",
    "input": "The first line contains the only positive integer n ( 1 \u2264 n \u2264 3\u00b7105) \u2014 the number of cows in the cowavan. The second number contains n positive integer wi, separated by spaces, where the i- th number describes the mass of the i- th cow in the cowavan ( 1 \u2264 wi \u2264 109) . The third line contains the only positive integer p \u2014 the number of scenarios of ( a, b) - raids ( 1 \u2264 p \u2264 3\u00b7105) . Each following line contains integer parameters a and b of the corresponding scenario ( 1 \u2264 a, b \u2264 n) .",
    "output": "Print for each scenario of the ( a, b) - raid the total mass of cows, that can be stolen using only this scenario. Please, do not use the",
    "note": "",
    "topics": [
      "brute force",
      "data structures",
      "sortings"
    ]
  },
  {
    "title": "Castle",
    "url": "https://codeforces.com/problemset/problem/101/D",
    "history": "Gerald is positioned in an old castle which consists of n halls connected with n - 1 corridors. It is exactly one way to go from any hall to any other one. Thus, the graph is a tree. Initially, at the moment of time 0, Gerald is positioned in hall 1. Besides, some other hall of the castle contains the treasure Gerald is looking for. The treasure' s position is not known; it can equiprobably be in any of other n - 1 halls. Gerald can only find out where the treasure is when he enters the hall with the treasure. That very moment Gerald sees the treasure and the moment is regarded is the moment of achieving his goal. The corridors have different lengths. At that, the corridors are considered long and the halls are considered small and well lit. Thus, it is possible not to take the time Gerald spends in the halls into consideration. The castle is very old, that' s why a corridor collapses at the moment when somebody visits it two times, no matter in which direction. Gerald can move around the castle using the corridors; he will go until he finds the treasure. Naturally, Gerald wants to find it as quickly as possible. In other words, he wants to act in a manner that would make the average time of finding the treasure as small as possible. Each corridor can be used no more than two times. That' s why Gerald chooses the strategy in such a way, so he can visit every hall for sure. More formally, if the treasure is located in the second hall, then Gerald will find it the moment he enters the second hall for the first time \u2014 let it be moment t2. If the treasure is in the third hall, then Gerald will find it the moment he enters the third hall for the first time. Let it be the moment of time t3. And so on. Thus, the average time of finding the treasure will be equal to .",
    "input": "The first line contains the only integer n ( 2 \u2264 n \u2264 105) \u2014 the number of halls in the castle. Next n - 1 lines each contain three integers. The i- th line contains numbers ai, bi and ti ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi, 1 \u2264 ti \u2264 1000) \u2014 the numbers of halls connected with the i- th corridor and the time needed to go along the corridor. Initially Gerald is in the hall number 1. It is guaranteed that one can get from any hall to any other one using corridors.",
    "output": "Print the only real number: the sought expectation of time needed to find the treasure. The answer should differ from the right one in no less than 10 - 6.",
    "note": "In the first test the castle only has two halls which means that the treasure is located in the second hall. Gerald will only need one minute to go to the second hall from the first one. In the second test Gerald can only go from the first hall to the third one. He can get from the third room to the first one or to the second one, but he has already visited the first hall and can get nowhere from there. Thus, he needs to go to the second hall. He should go to hall 4 from there, because all other halls have already been visited. If the treasure is located in the third hall, Gerald will find it in a minute, if the treasure is located in the second hall, Gerald finds it in two minutes, if the treasure is in the fourth hall, Gerald will find it in three minutes. The average time makes 2 minutes. In the third test Gerald needs to visit 4 halls: the second, third, fourth and fifth ones. All of them are only reachable from the first hall. Thus, he needs to go to those 4 halls one by one and return. Gerald will enter the first of those halls in a minute, in the second one \u2014 in three minutes, in the third one - in 5 minutes, in the fourth one - in 7 minutes. The average time is 4 minutes.",
    "topics": [
      "dp",
      "greedy",
      "probabilities",
      "sortings",
      "trees"
    ]
  },
  {
    "title": "Help Chef Gerasim",
    "url": "https://codeforces.com/problemset/problem/99/B",
    "history": "In a far away kingdom young pages help to set the table for the King. As they are terribly mischievous, one needs to keep an eye on the control whether they have set everything correctly. This time the royal chef Gerasim had the impression that the pages have played a prank again: they had poured the juice from one cup to another. Now Gerasim wants to check his hypothesis. The good thing is that chef Gerasim always pour the same number of milliliters of juice to all cups in the royal kitchen. Having thoroughly measured the juice in each cup, Gerasim asked you to write a program that will determine from which cup juice was poured to which one; otherwise, the program should determine that this time the pages set the table diligently. To simplify your task we shall consider the cups to be bottomless so that the juice never overfills a cup and pours out, however much it can be. Besides, by some strange reason in a far away kingdom one can only pour to a cup or from one cup to another an integer number of milliliters of juice.",
    "input": "The first line contains integer n \u2014 the number of cups on the royal table ( 1 \u2264 n \u2264 1000) . Next n lines contain volumes of juice in each cup \u2014 non- negative integers, not exceeding 104.",
    "output": "If the pages didn' t pour the juice, print \" Exemplary pages. \" ( without the quotes) . If you can determine the volume of juice poured during exactly one juice pouring, print \" v ml. from cup # a to cup # b. \" ( without the quotes) , where v represents the volume of poured juice, a represents the number of the cup from which the juice was poured ( the cups are numbered with consecutive positive integers starting from one in the order in which the cups are described in the input data) , b represents the number of the cup into which the juice was poured. Finally, if the given juice' s volumes cannot be obtained using no more than one pouring ( for example, the pages poured the juice from one cup to another more than once or the royal kitchen maids poured the juice into the cups incorrectly) , print \" Unrecoverable configuration. \" ( without the quotes) .",
    "note": "",
    "topics": [
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Beautiful Road",
    "url": "https://codeforces.com/problemset/problem/87/D",
    "history": "A long time ago in some country in Asia were civil wars. Each of n cities wanted to seize power. That' s why sometimes one city gathered an army and sent it to campaign against another city. Road making was difficult, so the country had few roads, exactly n - 1. Also you could reach any city from any other city going on those roads. Even during the war the Oriental people remain spiritually rich and appreciate the beauty of nature. And to keep the memory of this great crusade for the centuries to come, they planted one beautiful tree by the road on which the army spent most time. The Oriental people love nature, that' s why if there were several such roads, then one tree was planted by each of them. Recently, when the records of the war were found, it became clear that each city attacked each other one exactly once. There were exactly n( n - 1) attacks in total. Everyone has been wondering what road after those wars became the most beautiful, that is, by which road they planted the largest number of beautiful trees.",
    "input": "The first line contains an integer n ( 2 \u2264 n \u2264 105) , which represents the number of cities. Next n - 1 lines contain three integers each: the numbers of cities ai, bi ( 1 \u2264 ai, bi \u2264 n) , connected by the i- th road and the number of days di the army spends to go on it ( 1 \u2264 di \u2264 109) . The lengths of several roads may coincide.",
    "output": "Print on the first line two integers \u2014 the number of beautiful trees on the most beautiful road and the number of the most beautiful roads. Print on the second line the list of the most beautiful roads in the sorted order by the numbers' increasing. The roads are numbered from 1 to n - 1 in the order in which they are given in the input data. Please, do not use",
    "note": "",
    "topics": [
      "dfs and similar",
      "dp",
      "dsu",
      "graphs",
      "implementation",
      "sortings",
      "trees"
    ]
  },
  {
    "title": "Guard Towers",
    "url": "https://codeforces.com/problemset/problem/85/E",
    "history": "In a far away kingdom lives a very greedy king. To defend his land, he built n guard towers. Apart from the towers the kingdom has two armies, each headed by a tyrannical and narcissistic general. The generals can' t stand each other, specifically, they will never let soldiers of two armies be present in one tower. During defence operations to manage a guard tower a general has to send part of his army to that tower. Each general asks some fee from the king for managing towers. As they live in a really far away kingdom, each general evaluates his fee in the following weird manner: he finds two remotest ( the most distant) towers, where the soldiers of his army are situated and asks for the fee equal to the distance. Each tower is represented by a point on the plane with coordinates ( x, y) , and the distance between two points with coordinates ( x1, y1) and ( x2, y2) is determined in this kingdom as | x1 - x2| + | y1 - y2| . The greedy king was not exactly satisfied with such a requirement from the generals, that' s why he only agreed to pay one fee for two generals, equal to the maximum of two demanded fees. However, the king is still green with greed, and among all the ways to arrange towers between armies, he wants to find the cheapest one. Each tower should be occupied by soldiers of exactly one army. He hired you for that. You should find the minimum amount of money that will be enough to pay the fees. And as the king is also very scrupulous, you should also count the number of arrangements that will cost the same amount of money. As their number can be quite large, it is enough for the king to know it as a remainder from dividing by 109 + 7. Two arrangements are distinct if the sets of towers occupied by soldiers of the first general are distinct.",
    "input": "The first line contains an integer n ( 2 \u2264 n \u2264 5000) , n is the number of guard towers. Then follow n lines, each of which contains two integers x, y \u2014 the coordinates of the i- th tower ( 0 \u2264 x, y \u2264 5000) . No two towers are present at one point. Pretest 6 is one of the maximal tests for this problem.",
    "output": "Print on the first line the smallest possible amount of money that will be enough to pay fees to the generals. Print on the second line the number of arrangements that can be carried out using the smallest possible fee. This number should be calculated modulo 1000000007 ( 109 + 7) .",
    "note": "In the first example there are only two towers, the distance between which is equal to 2. If we give both towers to one general, then we well have to pay 2 units of money. If each general receives a tower to manage, to fee will be equal to 0. That is the smallest possible fee. As you can easily see, we can obtain it in two ways.",
    "topics": [
      "binary search",
      "dsu",
      "geometry",
      "graphs",
      "sortings"
    ]
  },
  {
    "title": "Petya and Tree",
    "url": "https://codeforces.com/problemset/problem/85/C",
    "history": "One night, having had a hard day at work, Petya saw a nightmare. There was a binary search tree in the dream. But it was not the actual tree that scared Petya. The horrifying thing was that Petya couldn' t search for elements in this tree. Petya tried many times to choose key and look for it in the tree, and each time he arrived at a wrong place. Petya has been racking his brains for long, choosing keys many times, but the result was no better. But the moment before Petya would start to despair, he had an epiphany: every time he was looking for keys, the tree didn' t have the key, and occured exactly one mistake. \" That' s not a problem! \" , thought Petya. \" Why not count the expectation value of an element, which is found when I search for the key\" . The moment he was about to do just that, however, Petya suddenly woke up. Thus, you are given a binary search tree, that is a tree containing some number written in the node. This number is called the node key. The number of children of every node of the tree is equal either to 0 or to 2. The nodes that have 0 children are called leaves and the nodes that have 2 children, are called inner. An inner node has the left child, that is the child whose key is less than the current node' s key, and the right child, whose key is more than the current node' s key. Also, a key of any node is strictly larger than all the keys of the left subtree of the node and strictly smaller than all the keys of the right subtree of the node. Also you are given a set of search keys, all of which are distinct and differ from the node keys contained in the tree. For each key from the set its search in the tree is realised. The search is arranged like this: initially we are located in the tree root, if the key of the current node is larger that our search key, then we move to the left child of the node, otherwise we go to the right child of the node and the process is repeated. As it is guaranteed that the search key is not contained in the tree, the search will always finish in some leaf. The key lying in the leaf is declared the search result. It is known for sure that during the search we make a mistake in comparing exactly once, that is we go the wrong way, but we won' t make any mistakes later. All possible mistakes are equiprobable, that is we should consider all such searches where exactly one mistake occurs. Your task is to find the expectation ( the average value) of the search result for every search key, considering that exactly one mistake occurs in the search. That is, for a set of paths containing exactly one mistake in the given key search, you should count the average value of keys containing in the leaves of those paths.",
    "input": "The first line contains an odd integer n ( 3 \u2264 n < 105) , which represents the number of tree nodes. Next n lines contain node descriptions. The ( i + 1) - th line contains two space- separated integers. The first number is the number of parent of the i- st node and the second number is the key lying in the i- th node. The next line contains an integer k ( 1 \u2264 k \u2264 105) , which represents the number of keys for which you should count the average value of search results containing one mistake. Next k lines contain the actual keys, one key per line. All node keys and all search keys are positive integers, not exceeding 109. All n + k keys are distinct. All nodes are numbered from 1 to n. For the tree root \" - 1\" ( without the quote) will be given instead of the parent' s node number. It is guaranteed that the correct binary search tree is given. For each node except for the root, it could be determined according to its key whether it is the left child or the right one.",
    "output": "Print k real numbers which are the expectations of answers for the keys specified in the input. The answer should differ from the correct one with the measure of absolute or relative error not exceeding 10 - 9.",
    "note": "In the first sample the search of key 1 with one error results in two paths in the trees: ( 1, 2, 5) and ( 1, 3, 6) , in parentheses are listed numbers of nodes from the root to a leaf. The keys in the leaves of those paths are equal to 6 and 10 correspondingly, that' s why the answer is equal to 8.",
    "topics": [
      "binary search",
      "dfs and similar",
      "probabilities",
      "sortings",
      "trees"
    ]
  },
  {
    "title": "Doctor",
    "url": "https://codeforces.com/problemset/problem/83/B",
    "history": "There are n animals in the queue to Dr. Dolittle. When an animal comes into the office, the doctor examines him, gives prescriptions, appoints tests and may appoint extra examination. Doc knows all the forest animals perfectly well and therefore knows exactly that the animal number i in the queue will have to visit his office exactly ai times. We will assume that an examination takes much more time than making tests and other extra procedures, and therefore we will assume that once an animal leaves the room, it immediately gets to the end of the queue to the doctor. Of course, if the animal has visited the doctor as many times as necessary, then it doesn' t have to stand at the end of the queue and it immediately goes home. Doctor plans to go home after receiving k animals, and therefore what the queue will look like at that moment is important for him. Since the doctor works long hours and she can' t get distracted like that after all, she asked you to figure it out.",
    "input": "The first line of input data contains two space- separated integers n and k ( 1 \u2264 n \u2264 105, 0 \u2264 k \u2264 1014) . In the second line are given space- separated integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) . Please do not use the",
    "output": "If the doctor will overall carry out less than k examinations, print a single number \" - 1\" ( without quotes) . Otherwise, print the sequence of numbers \u2014 number of animals in the order in which they stand in the queue. Note that this sequence may be empty. This case is present in pretests. You can just print nothing or print one \" End of line\" - character. Both will be accepted.",
    "note": "In the first sample test: Before examination: 1, 2, 3 After the first examination: 2, 3 After the second examination: 3, 2 After the third examination: 2 In the second sample test: Before examination: 1, 2, 3, 4, 5, 6, 7 After the first examination: 2, 3, 4, 5, 6, 7 After the second examination: 3, 4, 5, 6, 7, 2 After the third examination: 4, 5, 6, 7, 2, 3 After the fourth examination: 5, 6, 7, 2, 3 After the fifth examination: 6, 7, 2, 3, 5 After the sixth examination: 7, 2, 3, 5, 6 After the seventh examination: 2, 3, 5, 6 After the eighth examination: 3, 5, 6, 2 After the ninth examination: 5, 6, 2, 3 After the tenth examination: 6, 2, 3",
    "topics": [
      "binary search",
      "math",
      "sortings"
    ]
  },
  {
    "title": "General Mobilization",
    "url": "https://codeforces.com/problemset/problem/82/C",
    "history": "The Berland Kingdom is a set of n cities connected with each other with n - 1 railways. Each road connects exactly two different cities. The capital is located in city 1. For each city there is a way to get from there to the capital by rail. In the i- th city there is a soldier division number i, each division is characterized by a number of ai. It represents the priority, the smaller the number, the higher the priority of this division. All values of ai are different. One day the Berland King Berl Great declared a general mobilization, and for that, each division should arrive in the capital. Every day from every city except the capital a train departs. So there are exactly n - 1 departing trains each day. Each train moves toward the capital and finishes movement on the opposite endpoint of the railway on the next day. It has some finite capacity of cj, expressed in the maximum number of divisions, which this train can transport in one go. Each train moves in the direction of reducing the distance to the capital. So each train passes exactly one railway moving from a city to the neighboring ( where it stops) toward the capital. In the first place among the divisions that are in the city, division with the smallest number of ai get on the train, then with the next smallest and so on, until either the train is full or all the divisions are be loaded. So it is possible for a division to stay in a city for a several days. The duration of train' s progress from one city to another is always equal to 1 day. All divisions start moving at the same time and end up in the capital, from where they don' t go anywhere else any more. Each division moves along a simple path from its city to the capital, regardless of how much time this journey will take. Your goal is to find for each division, in how many days it will arrive to the capital of Berland. The countdown begins from day 0.",
    "input": "The first line contains the single integer n ( 1 \u2264 n \u2264 5000) . It is the number of cities in Berland. The second line contains n space- separated integers a1, a2, . . . , an, where ai represents the priority of the division, located in the city number i. All numbers a1, a2, . . . , an are different ( 1 \u2264 ai \u2264 109) . Then n - 1 lines contain the descriptions of the railway roads. Each description consists of three integers vj, uj, cj, where vj, uj are number of cities connected by the j- th rail, and cj stands for the maximum capacity of a train riding on this road ( 1 \u2264 vj, uj \u2264 n, vj = \u0338 uj, 1 \u2264 cj \u2264 n) .",
    "output": "Print sequence t1, t2, . . . , tn, where ti stands for the number of days it takes for the division of city i to arrive to the capital. Separate numbers with spaces.",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "sortings"
    ]
  },
  {
    "title": "Average Score",
    "url": "https://codeforces.com/problemset/problem/81/C",
    "history": "After the educational reform Polycarp studies only two subjects at school, Safety Studies and PE ( Physical Education) . During the long months of the fourth term, he received n marks in them. When teachers wrote a mark in the journal, they didn' t write in what subject the mark was for, they just wrote the mark. Now it' s time to show the journal to his strict parents. Polycarp knows that recently at the Parent Meeting the parents were told that he received a Safety Studies marks and b PE marks ( a + b = n) . Now Polycarp wants to write a subject' s name in front of each mark so that: there are exactly a Safety Studies marks, there are exactly b PE marks, the total average score in both subjects is maximum. An average subject grade is the sum of all marks in it, divided by the number of them. Of course, the division is performed in real numbers without rounding up or down. Polycarp aims to maximize the x1 + x2, where x1 is the average score in the first subject ( Safety Studies) , and x2 is the average score in the second one ( Physical Education) .",
    "input": "The first line contains an integer n ( 2 \u2264 n \u2264 105) , n is the number of marks in Polycarp' s Journal. The second line contains two positive integers a, b ( 1 \u2264 a, b \u2264 n - 1, a + b = n) . The third line contains a sequence of integers t1, t2, . . . , tn ( 1 \u2264 ti \u2264 5) , they are Polycarp' s marks.",
    "output": "Print the sequence of integers f1, f2, . . . , fn, where fi ( 1 \u2264 fi \u2264 2) is the number of a subject to which the i- th mark should be attributed. If there are several possible solutions, then print such that the sequence f1, f2, . . . , fn is the smallest lexicographically. The sequence p1, p2, . . . , pn is lexicographically less than q1, q2, . . . , qn if there exists such j ( 1 \u2264 j \u2264 n) that pi = qi for all 1 \u2264 i < j, \u0430nd pj < qj.",
    "note": "In the first sample the average score in the first subject is equal to 4, and in the second one \u2014 to 4. 5. The total average score is 8. 5.",
    "topics": [
      "greedy",
      "math",
      "sortings"
    ]
  },
  {
    "title": "Colorful Field",
    "url": "https://codeforces.com/problemset/problem/79/B",
    "history": "Fox Ciel saw a large field while she was on a bus. The field was a n \u00d7 m rectangle divided into 1 \u00d7 1 cells. Some cells were wasteland, and other each cell contained crop plants: either carrots or kiwis or grapes. After seeing the field carefully, Ciel found that the crop plants of each cell were planted in following procedure: Assume that the rows are numbered 1 to n from top to bottom and the columns are numbered 1 to m from left to right, and a cell in row i and column j is represented as ( i, j) . First, each field is either cultivated or waste. Crop plants will be planted in the cultivated cells in the order of ( 1, 1) \u2192 . . . \u2192 ( 1, m) \u2192 ( 2, 1) \u2192 . . . \u2192 ( 2, m) \u2192 . . . \u2192 ( n, 1) \u2192 . . . \u2192 ( n, m) . Waste cells will be ignored. Crop plants ( either carrots or kiwis or grapes) will be planted in each cell one after another cyclically. Carrots will be planted in the first cell, then kiwis in the second one, grapes in the third one, carrots in the forth one, kiwis in the fifth one, and so on. The following figure will show you the example of this procedure. Here, a white square represents a cultivated cell, and a black square represents a waste cell. Now she is wondering how to determine the crop plants in some certain cells.",
    "input": "In the first line there are four positive integers n, m, k, t ( 1 \u2264 n \u2264 4\u00b7104, 1 \u2264 m \u2264 4\u00b7104, 1 \u2264 k \u2264 103, 1 \u2264 t \u2264 103) , each of which represents the height of the field, the width of the field, the number of waste cells and the number of queries that ask the kind of crop plants in a certain cell. Following each k lines contains two integers a, b ( 1 \u2264 a \u2264 n, 1 \u2264 b \u2264 m) , which denotes a cell ( a, b) is waste. It is guaranteed that the same cell will not appear twice in this section. Following each t lines contains two integers i, j ( 1 \u2264 i \u2264 n, 1 \u2264 j \u2264 m) , which is a query that asks you the kind of crop plants of a cell ( i, j) .",
    "output": "For each query, if the cell is waste, print Waste. Otherwise, print the name of crop plants in the cell: either Carrots or Kiwis or Grapes.",
    "note": "The sample corresponds to the figure in the statement.",
    "topics": [
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Gift",
    "url": "https://codeforces.com/problemset/problem/76/A",
    "history": "The kingdom of Olympia consists of N cities and M bidirectional roads. Each road connects exactly two cities and two cities can be connected with more than one road. Also it possible that some roads connect city with itself making a loop. All roads are constantly plundered with bandits. After a while bandits became bored of wasting time in road robberies, so they suggested the king of Olympia to pay off. According to the offer, bandits want to get a gift consisted of gold and silver coins. Offer also contains a list of restrictions: for each road it is known gi \u2014 the smallest amount of gold and si \u2014 the smallest amount of silver coins that should be in the gift to stop robberies on the road. That is, if the gift contains a gold and b silver coins, then bandits will stop robberies on all the roads that gi \u2264 a and si \u2264 b. Unfortunately kingdom treasury doesn' t contain neither gold nor silver coins, but there are Olympian tugriks in it. The cost of one gold coin in tugriks is G, and the cost of one silver coin in tugriks is S. King really wants to send bandits such gift that for any two cities there will exist a safe path between them. Your task is to find the minimal cost in Olympian tugriks of the required gift.",
    "input": "The first line of the input contains two integers N and M ( 2 \u2264 N \u2264 200, 1 \u2264 M \u2264 50 000) \u2014 the number of cities and the number of roads, respectively. The second line contains two integers G and S ( 1 \u2264 G, S \u2264 109) \u2014 the prices of gold and silver coins in tugriks. The following M lines contain information about the offer. Each of the records in list is given as four integers xi, yi, gi, si, where xi and yi are the numbers of cities that the road connects and gi, si are minimal gold and silver coins requirements for the i- th road ( 1 \u2264 xi, yi \u2264 N, 1 \u2264 gi, si \u2264 109) . Cities are numbered from 1 to N. It is possible that there are more than one road between a pair of cities. It is possible that a road connects the city with itself.",
    "output": "The output should contain the minimal cost of the gift in Olympian tugriks. If there is no gift that satisfies the given requirements output .",
    "note": "",
    "topics": [
      "dsu",
      "graphs",
      "sortings",
      "trees"
    ]
  },
  {
    "title": "Need For Brake",
    "url": "https://codeforces.com/problemset/problem/73/B",
    "history": "Vasya plays the Need For Brake. He plays because he was presented with a new computer wheel for birthday! Now he is sure that he will win the first place in the championship in his favourite racing computer game! n racers take part in the championship, which consists of a number of races. After each race racers are arranged from place first to n- th ( no two racers share the same place) and first m places are awarded. Racer gains bi points for i- th awarded place, which are added to total points, obtained by him for previous races. It is known that current summary score of racer i is ai points. In the final standings of championship all the racers will be sorted in descending order of points. Racers with an equal amount of points are sorted by increasing of the name in lexicographical order. Unfortunately, the championship has come to an end, and there is only one race left. Vasya decided to find out what the highest and lowest place he can take up as a result of the championship.",
    "input": "The first line contains number n ( 1 \u2264 n \u2264 105) \u2014 number of racers. Each of the next n lines contains si and ai \u2014 nick of the racer ( nonempty string, which consist of no more than 20 lowercase Latin letters) and the racer' s points ( 0 \u2264 ai \u2264 106) . Racers are given in the arbitrary order. The next line contains the number m ( 0 \u2264 m \u2264 n) . Then m nonnegative integer numbers bi follow. i- th number is equal to amount of points for the i- th awarded place ( 0 \u2264 bi \u2264 106) . The last line contains Vasya' s racer nick.",
    "output": "Output two numbers \u2014 the highest and the lowest place Vasya can take up as a result of the championship.",
    "note": "",
    "topics": [
      "binary search",
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Lucky Tickets",
    "url": "https://codeforces.com/problemset/problem/70/C",
    "history": "In Walrusland public transport tickets are characterized by two integers: by the number of the series and by the number of the ticket in the series. Let the series number be represented by a and the ticket number \u2014 by b, then a ticket is described by the ordered pair of numbers ( a, b) . The walruses believe that a ticket is lucky if a * b = rev( a) * rev( b) . The function rev( x) reverses a number written in the decimal system, at that the leading zeroes disappear. For example, rev( 12343) = 34321, rev( 1200) = 21. The Public Transport Management Committee wants to release x series, each containing y tickets, so that at least w lucky tickets were released and the total number of released tickets ( x * y) were minimum. The series are numbered from 1 to x inclusive. The tickets in each series are numbered from 1 to y inclusive. The Transport Committee cannot release more than maxx series and more than maxy tickets in one series.",
    "input": "The first line contains three integers maxx, maxy, w ( 1 \u2264 maxx, maxy \u2264 105, 1 \u2264 w \u2264 107) .",
    "output": "Print on a single line two space- separated numbers, the x and the y. If there are several possible variants, print any of them. If such x and y do not exist, print a single number - 1.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "sortings",
      "two pointers"
    ]
  },
  {
    "title": "Sort the Table",
    "url": "https://codeforces.com/problemset/problem/64/I",
    "history": "You are given a rectangular table containing words. Each of its columns has its own name. You are also given the list of rules of sorting in form \" FIELD_ NAME SORT_ ORDER\" , where SORT_ ORDER is either ASC ( nondescending order) or DESC ( nonascending order) . Rules in the list are separated by a single comma with a single space. You have to sort rows of the table primarily by the first rule, then, in case of a tie sort by the second rule. And so on. If two rows are equal in terms of every rule, then preserve their relative order. You can assume that each element of the table has type \" string\" , so you have to use lexicographic comparison.",
    "input": "The first line contains column names. The second line contains the list of rules. The rest of the input data contains the table. All the words and column names are separated by single spaces. The number of rows and columns is between 1 and 100, inclusive. Names of columns and elements are strings containing only uppercase and lowercase Latin letters and digits, having the length between 1 and 10, inclusive.",
    "output": "Print the table after the sorting.",
    "note": "",
    "topics": [
      "*special",
      "sortings"
    ]
  },
  {
    "title": "Table Bowling",
    "url": "https://codeforces.com/problemset/problem/64/H",
    "history": "Table bowling tournament participant completed the competition according to the given final standings table. The table is given as a sequence of lines, each line has a format \" name score\" . Your task is to prepare another table consisting of lines in the form \" place name\" . Sort participant by score ( desc. ) and by the name lexicographically in the case of a tie. Places are numerated from 1. If more than one participant has some score, all of them share the places and you should output something like \" 12- 14 john\" . Please, look into the samples for clarification.",
    "input": "The first line contains n ( 1 \u2264 n \u2264 100) \u2014 the number of rows in the table. Following n lines contain the given table. Each line has the form \" name score\" , where \" name\" is a sequence of lowercase Latin letters, and \" score\" \u2014 is an integer number between 0 and 1000, inclusive. All the names are distinct. The length of each name is between 1 and 10 characters, inclusive. There is single space between the name and the score in each line.",
    "output": "Print the required table. Look at the sample outputs for clarifications.",
    "note": "",
    "topics": [
      "*special",
      "sortings"
    ]
  },
  {
    "title": "Sinking Ship",
    "url": "https://codeforces.com/problemset/problem/63/A",
    "history": "The ship crashed into a reef and is sinking. Now the entire crew must be evacuated. All n crew members have already lined up in a row ( for convenience let' s label them all from left to right with positive integers from 1 to n) and await further instructions. However, one should evacuate the crew properly, in a strict order. Specifically: The first crew members to leave the ship are rats. Then women and children ( both groups have the same priority) leave the ship. After that all men are evacuated from the ship. The captain leaves the sinking ship last. If we cannot determine exactly who should leave the ship first for any two members of the crew by the rules from the previous paragraph, then the one who stands to the left in the line leaves the ship first ( or in other words, the one whose number in the line is less) . For each crew member we know his status as a crew member, and also his name. All crew members have different names. Determine the order in which to evacuate the crew.",
    "input": "The first line contains an integer n, which is the number of people in the crew ( 1 \u2264 n \u2264 100) . Then follow n lines. The i- th of those lines contains two words \u2014 the name of the crew member who is i- th in line, and his status on the ship. The words are separated by exactly one space. There are no other spaces in the line. The names consist of Latin letters, the first letter is uppercase, the rest are lowercase. The length of any name is from 1 to 10 characters. The status can have the following values: rat for a rat, woman for a woman, child for a child, man for a man, captain for the captain. The crew contains exactly one captain.",
    "output": "Print n lines. The i- th of them should contain the name of the crew member who must be the i- th one to leave the ship.",
    "note": "",
    "topics": [
      "implementation",
      "sortings",
      "strings"
    ]
  },
  {
    "title": "Inquisition",
    "url": "https://codeforces.com/problemset/problem/62/C",
    "history": "In Medieval times existed the tradition of burning witches at steaks together with their pets, black cats. By the end of the 15- th century the population of black cats ceased to exist. The difficulty of the situation led to creating the EIC - the Emergency Inquisitory Commission. The resolution # 666 says that a white cat is considered black when and only when the perimeter of its black spots exceeds the acceptable norm. But what does the acceptable norm equal to? Every inquisitor will choose it himself depending on the situation. And your task is to find the perimeter of black spots on the cat' s fur. The very same resolution says that the cat' s fur is a white square with the length of 105. During the measurement of spots it is customary to put the lower left corner of the fur into the origin of axes ( 0; 0) and the upper right one \u2014 to the point with coordinates ( 105; 105) . The cats' spots are nondegenerate triangles. The spots can intersect and overlap with each other, but it is guaranteed that each pair of the triangular spots' sides have no more than one common point. We' ll regard the perimeter in this problem as the total length of the boarders where a cat' s fur changes color.",
    "input": "The first input line contains a single integer n ( 0 \u2264 n \u2264 100) . It is the number of spots on the cat' s fur. The i- th of the last n lines contains 6 integers: x1i, y1i, x2i, y2i, x3i, y3i. They are the coordinates of the i- th triangular spot ( 0 < xji, yji < 105) .",
    "output": "Print a single number, the answer to the problem, perimeter of the union of triangles. Your answer should differ from the correct one in no more than 10 - 6.",
    "note": "",
    "topics": [
      "geometry",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Domino Principle",
    "url": "https://codeforces.com/problemset/problem/56/E",
    "history": "Vasya is interested in arranging dominoes. He is fed up with common dominoes and he uses the dominoes of different heights. He put n dominoes on the table along one axis, going from left to right. Every domino stands perpendicular to that axis so that the axis passes through the center of its base. The i- th domino has the coordinate xi and the height hi. Now Vasya wants to learn for every domino, how many dominoes will fall if he pushes it to the right. Help him do that. Consider that a domino falls if it is touched strictly above the base. In other words, the fall of the domino with the initial coordinate x and height h leads to the fall of all dominoes on the segment [ x + 1, x + h - 1] .",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 105) which is the number of dominoes. Then follow n lines containing two integers xi and hi ( - 108 \u2264 xi \u2264 108, 2 \u2264 hi \u2264 108) each, which are the coordinate and height of every domino. No two dominoes stand on one point.",
    "output": "Print n space- separated numbers zi \u2014 the number of dominoes that will fall if Vasya pushes the i- th domino to the right ( including the domino itself) .",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "sortings"
    ]
  },
  {
    "title": "Physical Education",
    "url": "https://codeforces.com/problemset/problem/53/D",
    "history": "Vasya is a school PE teacher. Unlike other PE teachers, Vasya doesn' t like it when the students stand in line according to their height. Instead, he demands that the children stand in the following order: a1, a2, . . . , an, where ai is the height of the i- th student in the line and n is the number of students in the line. The children find it hard to keep in mind this strange arrangement, and today they formed the line in the following order: b1, b2, . . . , bn, which upset Vasya immensely. Now Vasya wants to rearrange the children so that the resulting order is like this: a1, a2, . . . , an. During each move Vasya can swap two people who stand next to each other in the line. Help Vasya, find the sequence of swaps leading to the arrangement Vasya needs. It is not required to minimize the number of moves.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 300) which is the number of students. The second line contains n space- separated integers ai ( 1 \u2264 ai \u2264 109) which represent the height of the student occupying the i- th place must possess. The third line contains n space- separated integers bi ( 1 \u2264 bi \u2264 109) which represent the height of the student occupying the i- th place in the initial arrangement. It is possible that some students possess similar heights. It is guaranteed that it is possible to arrange the children in the required order, i. e. a and b coincide as multisets.",
    "output": "In the first line print an integer k ( 0 \u2264 k \u2264 106) which is the number of moves. It is not required to minimize k but it must not exceed 106. Then print k lines each containing two space- separated integers. Line pi, pi + 1 ( 1 \u2264 pi \u2264 n - 1) means that Vasya should swap students occupying places pi and pi + 1.",
    "note": "",
    "topics": [
      "sortings"
    ]
  },
  {
    "title": "Snow sellers",
    "url": "https://codeforces.com/problemset/problem/48/F",
    "history": "The New Year celebrations in Berland last n days. Only this year the winter is snowless, that\u2019s why the winter celebrations\u2019 organizers should buy artificial snow. There are m snow selling companies in Berland. Every day the i- th company produces wi cubic meters of snow. Next day the snow thaws and the company has to produce wi cubic meters of snow again. During the celebration new year discounts are on, that\u2019s why the snow cost decreases every day. It is known that on the first day the total cost of all the snow produced by the i- th company is equal to ci bourles. Every day this total cost decreases by ai bourles, i. e. on the second day it is equal to ci - ai, and on the third day \u2014 to ci - 2ai, and so on. It is known that for one company the cost of the snow produced by it does not get negative or equal to zero. You have to organize the snow purchase so as to buy every day exactly W snow cubic meters. At that it is not necessary to buy from any company all the snow produced by it. If you buy ni cubic meters of snow ( 0 \u2264 ni \u2264 wi, the number ni is not necessarily integer! ) from the i- th company at one of the days when the cost of its snow is equal to si, then its price will total to bourles. During one day one can buy the snow from several companies. In different days one can buy the snow from different companies. It is required to make the purchases so as to spend as little money as possible. It is guaranteed that the snow produced by the companies will be enough.",
    "input": "The first line contains integers n, m and W ( 1 \u2264 n \u2264 100, 1 \u2264 m \u2264 500000, 1 \u2264 W \u2264 109) which represent the number of days, the number of companies and the amount of snow that needs to be purchased on every one of the n days. The second line contains m integers wi. The third line contains m integers ci. The fourth line contains m integers ai. All the numbers are strictly positive and do not exceed 109. For all the i the inequation ci - ( n - 1) ai > 0 holds true.",
    "output": "Print a single number \u2014 the answer to the given problem. Print the answer in the format with the decimal point ( even if the answer is integer, it must contain the decimal point) , without \" e\" and without leading zeroes. The answer should differ with the right one by no more than 10 - 9.",
    "note": "",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Cannon",
    "url": "https://codeforces.com/problemset/problem/47/E",
    "history": "Bertown is under siege! The attackers have blocked all the ways out and their cannon is bombarding the city. Fortunately, Berland intelligence managed to intercept the enemies' shooting plan. Let' s introduce the Cartesian system of coordinates, the origin of which coincides with the cannon' s position, the Ox axis is directed rightwards in the city' s direction, the Oy axis is directed upwards ( to the sky) . The cannon will make n more shots. The cannon balls' initial speeds are the same in all the shots and are equal to V, so that every shot is characterized by only one number alphai which represents the angle at which the cannon fires. Due to the cannon' s technical peculiarities this angle does not exceed 45 angles ( \u03c0 / 4) . We disregard the cannon sizes and consider the firing made from the point ( 0, 0) . The balls fly according to the known physical laws of a body thrown towards the horizon at an angle: vx( t) = V\u00b7cos( alpha) vy( t) = V\u00b7sin( alpha) \u2013 g\u00b7t x( t) = V\u00b7cos( alpha) \u00b7t y( t) = V\u00b7sin( alpha) \u00b7t \u2013 g\u00b7t2 / 2Think of the acceleration of gravity g as equal to 9. 8. Bertown defends m walls. The i- th wall is represented as a vertical segment ( xi, 0) - ( xi, yi) . When a ball hits a wall, it gets stuck in it and doesn' t fly on. If a ball doesn' t hit any wall it falls on the ground ( y = 0) and stops. If the ball exactly hits the point ( xi, yi) , it is considered stuck. Your task is to find for each ball the coordinates of the point where it will be located in the end.",
    "input": "The first line contains integers n and V ( 1 \u2264 n \u2264 104, 1 \u2264 V \u2264 1000) which represent the number of shots and the initial speed of every ball. The second line contains n space- separated real numbers alphai ( 0 < alphai < \u03c0 / 4) which represent the angles in radians at which the cannon will fire. The third line contains integer m ( 1 \u2264 m \u2264 105) which represents the number of walls. Then follow m lines, each containing two real numbers xi and yi ( 1 \u2264 xi \u2264 1000, 0 \u2264 yi \u2264 1000) which represent the wall\u2019s coordinates. All the real numbers have no more than 4 decimal digits. The walls may partially overlap or even coincide.",
    "output": "Print n lines containing two real numbers each \u2014 calculate for every ball the coordinates of its landing point. Your answer should have the relative or absolute error less than 10 - 4.",
    "note": "",
    "topics": [
      "data structures",
      "geometry",
      "sortings"
    ]
  },
  {
    "title": "Event Dates",
    "url": "https://codeforces.com/problemset/problem/45/D",
    "history": "On a history lesson the teacher asked Vasya to name the dates when n famous events took place. He doesn' t remembers the exact dates but he remembers a segment of days [ li, ri] ( inclusive) on which the event could have taken place. However Vasya also remembers that there was at most one event in one day. Help him choose such n dates of famous events that will fulfill both conditions. It is guaranteed that it is possible.",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 100) \u2014 the number of known events. Then follow n lines containing two integers li and ri each ( 1 \u2264 li \u2264 ri \u2264 107) \u2014 the earliest acceptable date and the latest acceptable date of the i- th event.",
    "output": "Print n numbers \u2014 the dates on which the events took place. If there are several solutions, print any of them. It is guaranteed that a solution exists.",
    "note": "",
    "topics": [
      "greedy",
      "meet-in-the-middle",
      "sortings"
    ]
  },
  {
    "title": "Moon Craters",
    "url": "https://codeforces.com/problemset/problem/39/C",
    "history": "There are lots of theories concerning the origin of moon craters. Most scientists stick to the meteorite theory, which says that the craters were formed as a result of celestial bodies colliding with the Moon. The other version is that the craters were parts of volcanoes. An extraterrestrial intelligence research specialist professor Okulov ( the namesake of the Okulov, the author of famous textbooks on programming) put forward an alternate hypothesis. Guess what kind of a hypothesis it was \u2013\u2013 sure, the one including extraterrestrial mind involvement. Now the professor is looking for proofs of his hypothesis. Professor has data from the moon robot that moves linearly in one direction along the Moon surface. The moon craters are circular in form with integer- valued radii. The moon robot records only the craters whose centers lay on his path and sends to the Earth the information on the distance from the centers of the craters to the initial point of its path and on the radii of the craters. According to the theory of professor Okulov two craters made by an extraterrestrial intelligence for the aims yet unknown either are fully enclosed one in the other or do not intersect at all. Internal or external tangency is acceptable. However the experimental data from the moon robot do not confirm this theory! Nevertheless, professor Okulov is hopeful. He perfectly understands that to create any logical theory one has to ignore some data that are wrong due to faulty measuring ( or skillful disguise by the extraterrestrial intelligence that will be sooner or later found by professor Okulov! ) That\u2019s why Okulov wants to choose among the available crater descriptions the largest set that would satisfy his theory.",
    "input": "The first line has an integer n ( 1 \u2264 n \u2264 2000) \u2014 the number of discovered craters. The next n lines contain crater descriptions in the \" ci ri\" format, where ci is the coordinate of the center of the crater on the moon robot\u2019s path, ri is the radius of the crater. All the numbers ci and ri are positive integers not exceeding 109. No two craters coincide.",
    "output": "In the first line output the number of craters in the required largest set. In the next line output space- separated numbers of craters that this set consists of. The craters are numbered from 1 to n in the order in which they were given in the input data. The numbers may be output in any order. If the result is not unique, output any.",
    "note": "",
    "topics": [
      "dp",
      "sortings"
    ]
  },
  {
    "title": "Let's Go Rolling!",
    "url": "https://codeforces.com/problemset/problem/38/E",
    "history": "On a number axis directed from the left rightwards, n marbles with coordinates x1, x2, . . . , xn are situated. Let' s assume that the sizes of the marbles are infinitely small, that is in this task each of them is assumed to be a material point. You can stick pins in some of them and the cost of sticking in the marble number i is equal to ci, number ci may be negative. After you choose and stick the pins you need, the marbles will start to roll left according to the rule: if a marble has a pin stuck in it, then the marble doesn' t move, otherwise the marble rolls all the way up to the next marble which has a pin stuck in it and stops moving there. If there is no pinned marble on the left to the given unpinned one, it is concluded that the marble rolls to the left to infinity and you will pay an infinitely large fine for it. If no marble rolled infinitely to the left, then the fine will consist of two summands: the sum of the costs of stuck pins; the sum of the lengths of the paths of each of the marbles, that is the sum of absolute values of differences between their initial and final positions. Your task is to choose and pin some marbles in the way that will make the fine for you to pay as little as possible.",
    "input": "The first input line contains an integer n ( 1 \u2264 n \u2264 3000) which is the number of marbles. The next n lines contain the descriptions of the marbles in pairs of integers xi, ci ( - 109 \u2264 xi, ci \u2264 109) . The numbers are space- separated. Each description is given on a separate line. No two marbles have identical initial positions.",
    "output": "Output the single number \u2014 the least fine you will have to pay.",
    "note": "",
    "topics": [
      "dp",
      "sortings"
    ]
  },
  {
    "title": "Towers",
    "url": "https://codeforces.com/problemset/problem/37/A",
    "history": "Little Vasya has received a young builder\u2019s kit. The kit consists of several wooden bars, the lengths of all of them are known. The bars can be put one on the top of the other if their lengths are the same. Vasya wants to construct the minimal number of towers from the bars. Help Vasya to use the bars in the best way possible.",
    "input": "The first line contains an integer N ( 1 \u2264 N \u2264 1000) \u2014 the number of bars at Vasya\u2019s disposal. The second line contains N space- separated integers li \u2014 the lengths of the bars. All the lengths are natural numbers not exceeding 1000.",
    "output": "In one line output two numbers \u2014 the height of the largest tower and their total number. Remember that Vasya should use all the bars.",
    "note": "",
    "topics": [
      "sortings"
    ]
  },
  {
    "title": "Parade",
    "url": "https://codeforces.com/problemset/problem/35/E",
    "history": "No Great Victory anniversary in Berland has ever passed without the war parade. This year is not an exception. That\u2019s why the preparations are on in full strength. Tanks are building a line, artillery mounts are ready to fire, soldiers are marching on the main square. . . And the air forces general Mr. Generalov is in trouble again. This year a lot of sky- scrapers have been built which makes it difficult for the airplanes to fly above the city. It was decided that the planes should fly strictly from south to north. Moreover, there must be no sky scraper on a plane\u2019s route, otherwise the anniversary will become a tragedy. The Ministry of Building gave the data on n sky scrapers ( the rest of the buildings are rather small and will not be a problem to the planes) . When looking at the city from south to north as a geometrical plane, the i- th building is a rectangle of height hi. Its westernmost point has the x- coordinate of li and the easternmost \u2014 of ri. The terrain of the area is plain so that all the buildings stand on one level. Your task as the Ministry of Defence\u2019s head programmer is to find an enveloping polyline using the data on the sky- scrapers. The polyline\u2019s properties are as follows: If you look at the city from south to north as a plane, then any part of any building will be inside or on the boarder of the area that the polyline encloses together with the land surface. The polyline starts and ends on the land level, i. e. at the height equal to 0. The segments of the polyline are parallel to the coordinate axes, i. e. they can only be vertical or horizontal. The polyline\u2019s vertices should have integer coordinates. If you look at the city from south to north the polyline ( together with the land surface) must enclose the minimum possible area. The polyline must have the smallest length among all the polylines, enclosing the minimum possible area with the land. The consecutive segments of the polyline must be perpendicular. Picture to the second sample test ( the enveloping polyline is marked on the right) .",
    "input": "The first input line contains integer n ( 1 \u2264 n \u2264 100000) . Then follow n lines, each containing three integers hi, li, ri ( 1 \u2264 hi \u2264 109, - 109 \u2264 li < ri \u2264 109) .",
    "output": "In the first line output integer m \u2014 amount of vertices of the enveloping polyline. The next m lines should contain 2 integers each \u2014 the position and the height of the polyline\u2019s vertex. Output the coordinates of each vertex in the order of traversing the polyline from west to east. Remember that the first and the last vertices of the polyline should have the height of 0.",
    "note": "",
    "topics": [
      "data structures",
      "sortings"
    ]
  },
  {
    "title": "Page Numbers",
    "url": "https://codeforces.com/problemset/problem/34/C",
    "history": "\u00abBersoft\u00bb company is working on a new version of its most popular text editor \u2014 Bord 2010. Bord, like many other text editors, should be able to print out multipage documents. A user keys a sequence of the document page numbers that he wants to print out ( separates them with a comma, without spaces) . Your task is to write a part of the program, responsible for \u00abstandardization\u00bb of this sequence. Your program gets the sequence, keyed by the user, as input. The program should output this sequence in format l1- r1, l2- r2, . . . , lk- rk, where ri + 1 < li + 1 for all i from 1 to k - 1, and li \u2264 ri. The new sequence should contain all the page numbers, keyed by the user, and nothing else. If some page number appears in the input sequence several times, its appearances, starting from the second one, should be ignored. If for some element i from the new sequence li = ri, this element should be output as li, and not as \u00abli - li\u00bb. For example, sequence 1, 2, 3, 1, 1, 2, 6, 6, 2 should be output as 1- 3, 6.",
    "input": "The only line contains the sequence, keyed by the user. The sequence contains at least one and at most 100 positive integer numbers. It' s guaranteed, that this sequence consists of positive integer numbers, not exceeding 1000, separated with a comma, doesn' t contain any other characters, apart from digits and commas, can' t end with a comma, and the numbers don' t contain leading zeroes. Also it doesn' t start with a comma or contain more than one comma in a row.",
    "output": "Output the sequence in the required format.",
    "note": "",
    "topics": [
      "expression parsing",
      "implementation",
      "sortings",
      "strings"
    ]
  },
  {
    "title": "Sale",
    "url": "https://codeforces.com/problemset/problem/34/B",
    "history": "Once Bob got to a sale of old TV sets. There were n TV sets at that sale. TV set with index i costs ai bellars. Some TV sets have a negative price \u2014 their owners are ready to pay Bob if he buys their useless apparatus. Bob can \u00abbuy\u00bb any TV sets he wants. Though he' s very strong, Bob can carry at most m TV sets, and he has no desire to go to the sale for the second time. Please, help Bob find out the maximum sum of money that he can earn.",
    "input": "The first line contains two space- separated integers n and m ( 1 \u2264 m \u2264 n \u2264 100) \u2014 amount of TV sets at the sale, and amount of TV sets that Bob can carry. The following line contains n space- separated integers ai ( - 1000 \u2264 ai \u2264 1000) \u2014 prices of the TV sets.",
    "output": "Output the only number \u2014 the maximum sum of money that Bob can earn, given that he can carry at most m TV sets.",
    "note": "",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Knights",
    "url": "https://codeforces.com/problemset/problem/33/D",
    "history": "Berland is facing dark times again. The army of evil lord Van de Mart is going to conquer the whole kingdom. To the council of war called by the Berland' s king Valery the Severe came n knights. After long discussions it became clear that the kingdom has exactly n control points ( if the enemy conquers at least one of these points, the war is lost) and each knight will occupy one of these points. Berland is divided into m + 1 regions with m fences, and the only way to get from one region to another is to climb over the fence. Each fence is a circle on a plane, no two fences have common points, and no control point is on the fence. You are given k pairs of numbers ai, bi. For each pair you have to find out: how many fences a knight from control point with index ai has to climb over to reach control point bi ( in case when Van de Mart attacks control point bi first) . As each knight rides a horse ( it is very difficult to throw a horse over a fence) , you are to find out for each pair the minimum amount of fences to climb over.",
    "input": "The first input line contains three integers n, m, k ( 1 \u2264 n, m \u2264 1000, 0 \u2264 k \u2264 100000) . Then follow n lines, each containing two integers Kxi, Kyi ( - 109 \u2264 Kxi, Kyi \u2264 109) \u2014 coordinates of control point with index i. Control points can coincide. Each of the following m lines describes fence with index i with three integers ri, Cxi, Cyi ( 1 \u2264 ri \u2264 109, - 109 \u2264 Cxi, Cyi \u2264 109) \u2014 radius and center of the circle where the corresponding fence is situated. Then follow k pairs of integers ai, bi ( 1 \u2264 ai, bi \u2264 n) , each in a separate line \u2014 requests that you have to answer. ai and bi can coincide.",
    "output": "Output exactly k lines, each containing one integer \u2014 the answer to the corresponding request.",
    "note": "",
    "topics": [
      "geometry",
      "graphs",
      "shortest paths",
      "sortings"
    ]
  },
  {
    "title": "Next Test",
    "url": "https://codeforces.com/problemset/problem/27/A",
    "history": "\u00abPolygon\u00bb is a system which allows to create programming tasks in a simple and professional way. When you add a test to the problem, the corresponding form asks you for the test index. As in most cases it is clear which index the next test will have, the system suggests the default value of the index. It is calculated as the smallest positive integer which is not used as an index for some previously added test. You are to implement this feature. Create a program which determines the default index of the next test, given the indexes of the previously added tests.",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 3000) \u2014 the amount of previously added tests. The second line contains n distinct integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 3000) \u2014 indexes of these tests.",
    "output": "Output the required default value for the next test index.",
    "note": "",
    "topics": [
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Oranges and Apples",
    "url": "https://codeforces.com/problemset/problem/23/C",
    "history": "In 2N - 1 boxes there are apples and oranges. Your task is to choose N boxes so, that they will contain not less than half of all the apples and not less than half of all the oranges.",
    "input": "The first input line contains one number T \u2014 amount of tests. The description of each test starts with a natural number N \u2014 amount of boxes. Each of the following 2N - 1 lines contains numbers ai and oi \u2014 amount of apples and oranges in the i- th box ( 0 \u2264 ai, oi \u2264 109) . The sum of N in all the tests in the input doesn' t exceed 105. All the input numbers are integer.",
    "output": "For each test output two lines. In the first line output YES, if it' s possible to choose N boxes, or NO otherwise. If the answer is positive output in the second line N numbers \u2014 indexes of the chosen boxes. Boxes are numbered from 1 in the input order. Otherwise leave the second line empty. Separate the numbers with one space.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "sortings"
    ]
  },
  {
    "title": "Segments",
    "url": "https://codeforces.com/problemset/problem/22/D",
    "history": "You are given n segments on the Ox- axis. You can drive a nail in any integer point on the Ox- axis line nail so, that all segments containing this point, are considered nailed down. If the nail passes through endpoint of some segment, this segment is considered to be nailed too. What is the smallest number of nails needed to nail all the segments down?",
    "input": "The first line of the input contains single integer number n ( 1 \u2264 n \u2264 1000) \u2014 amount of segments. Following n lines contain descriptions of the segments. Each description is a pair of integer numbers \u2014 endpoints coordinates. All the coordinates don' t exceed 10000 by absolute value. Segments can degenarate to points.",
    "output": "The first line should contain one integer number \u2014 the smallest number of nails needed to nail all the segments down. The second line should contain coordinates of driven nails separated by space in any order. If the answer is not unique, output any.",
    "note": "",
    "topics": [
      "greedy",
      "sortings"
    ]
  },
  {
    "title": "Stripe 2",
    "url": "https://codeforces.com/problemset/problem/21/C",
    "history": "Once Bob took a paper stripe of n squares ( the height of the stripe is 1 square) . In each square he wrote an integer number, possibly negative. He became interested in how many ways exist to cut this stripe into three pieces so that the sum of numbers from each piece is equal to the sum of numbers from any other piece, and each piece contains positive integer amount of squares. Would you help Bob solve this problem?",
    "input": "The first input line contains integer n ( 1 \u2264 n \u2264 105) \u2014 amount of squares in the stripe. The second line contains n space- separated numbers \u2014 they are the numbers written in the squares of the stripe. These numbers are integer and do not exceed 10000 in absolute value.",
    "output": "Output the amount of ways to cut the stripe into three non- empty pieces so that the sum of numbers from each piece is equal to the sum of numbers from any other piece. Don' t forget that it' s allowed to cut the stripe along the squares' borders only.",
    "note": "",
    "topics": [
      "binary search",
      "dp",
      "sortings"
    ]
  },
  {
    "title": "Burglar and Matches",
    "url": "https://codeforces.com/problemset/problem/16/B",
    "history": "A burglar got into a matches warehouse and wants to steal as many matches as possible. In the warehouse there are m containers, in the i- th container there are ai matchboxes, and each matchbox contains bi matches. All the matchboxes are of the same size. The burglar' s rucksack can hold n matchboxes exactly. Your task is to find out the maximum amount of matches that a burglar can carry away. He has no time to rearrange matches in the matchboxes, that' s why he just chooses not more than n matchboxes so that the total amount of matches in them is maximal.",
    "input": "The first line of the input contains integer n ( 1 \u2264 n \u2264 2\u00b7108) and integer m ( 1 \u2264 m \u2264 20) . The i + 1- th line contains a pair of numbers ai and bi ( 1 \u2264 ai \u2264 108, 1 \u2264 bi \u2264 10) . All the input numbers are integer.",
    "output": "Output the only number \u2014 answer to the problem.",
    "note": "",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Map",
    "url": "https://codeforces.com/problemset/problem/15/D",
    "history": "There is an area map that is a rectangular matrix n \u00d7 m, each cell of the matrix contains the average height of a corresponding area part. Peter works for a company that has to build several cities within this area, each of the cities will occupy a rectangle a \u00d7 b cells on the map. To start construction works in a particular place Peter needs to remove excess ground from the construction site where a new city will be built. To do so he chooses a cell of the minimum height within this site, and removes excess ground from other cells of the site down to this minimum level. Let' s consider that to lower the ground level from h2 to h1 ( h1 \u2264 h2) they need to remove h2 - h1 ground units. Let' s call a site' s position optimal, if the amount of the ground removed from this site is minimal compared to other possible positions. Peter constructs cities according to the following algorithm: from all the optimum site' s positions he chooses the uppermost one. If this position is not unique, he chooses the leftmost one. Then he builds a city on this site. Peter repeats this process untill he can build at least one more city. For sure, he cannot carry out construction works on the occupied cells. Would you, please, help Peter place cities according to the algorithm?",
    "input": "The first line contains four space- separated integers: map sizes n, m and city sizes a, b ( 1 \u2264 a \u2264 n \u2264 1000, 1 \u2264 b \u2264 m \u2264 1000) . Then there follow n lines, each contains m non- negative space- separated numbers, describing the height matrix. Each number doesn' t exceed 109.",
    "output": "In the first line output k \u2014 the amount of constructed cities. In each of the following k lines output 3 space- separated numbers \u2014 the row number and the column number of the upper- left corner of a subsequent construction site, and the amount of the ground to remove from it. Output the sites in the order of their building up.",
    "note": "",
    "topics": [
      "data structures",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Cottage Village",
    "url": "https://codeforces.com/problemset/problem/15/A",
    "history": "A new cottage village called \u00abFlatville\u00bb is being built in Flatland. By now they have already built in \u00abFlatville\u00bb n square houses with the centres on the \u041ex- axis. The houses' sides are parallel to the coordinate axes. It' s known that no two houses overlap, but they can touch each other. The architect bureau, where Peter works, was commissioned to build a new house in \u00abFlatville\u00bb. The customer wants his future house to be on the \u041ex- axis, to be square in shape, have a side t, and touch at least one of the already built houses. For sure, its sides should be parallel to the coordinate axes, its centre should be on the Ox- axis and it shouldn' t overlap any of the houses in the village. Peter was given a list of all the houses in \u00abFlatville\u00bb. Would you help him find the amount of possible positions of the new house?",
    "input": "The first line of the input data contains numbers n and t ( 1 \u2264 n, t \u2264 1000) . Then there follow n lines, each of them contains two space- separated integer numbers: xi ai, where xi \u2014 x- coordinate of the centre of the i- th house, and ai \u2014 length of its side ( - 1000 \u2264 xi \u2264 1000, 1 \u2264 ai \u2264 1000) .",
    "output": "Output the amount of possible positions of the new house.",
    "note": "It is possible for the x- coordinate of the new house to have non- integer value.",
    "topics": [
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Sequence",
    "url": "https://codeforces.com/problemset/problem/13/C",
    "history": "Little Petya likes to play very much. And most of all he likes to play the following game: He is given a sequence of N integer numbers. At each step it is allowed to increase the value of any number by 1 or to decrease it by 1. The goal of the game is to make the sequence non- decreasing with the smallest number of steps. Petya is not good at math, so he asks for your help. The sequence a is called non- decreasing if a1 \u2264 a2 \u2264 . . . \u2264 aN holds, where N is the length of the sequence.",
    "input": "The first line of the input contains single integer N ( 1 \u2264 N \u2264 5000) \u2014 the length of the initial sequence. The following N lines contain one integer each \u2014 elements of the sequence. These numbers do not exceed 109 by absolute value.",
    "output": "Output one integer \u2014 minimum number of steps required to achieve the goal.",
    "note": "",
    "topics": [
      "dp",
      "sortings"
    ]
  },
  {
    "title": "Ball",
    "url": "https://codeforces.com/problemset/problem/12/D",
    "history": "N ladies attend the ball in the King' s palace. Every lady can be described with three values: beauty, intellect and richness. King' s Master of Ceremonies knows that ladies are very special creatures. If some lady understands that there is other lady at the ball which is more beautiful, smarter and more rich, she can jump out of the window. He knows values of all ladies and wants to find out how many probable self- murderers will be on the ball. Lets denote beauty of the i- th lady by Bi, her intellect by Ii and her richness by Ri. Then i- th lady is a probable self- murderer if there is some j- th lady that Bi < Bj, Ii < Ij, Ri < Rj. Find the number of probable self- murderers.",
    "input": "The first line contains one integer N ( 1 \u2264 N \u2264 500000) . The second line contains N integer numbers Bi, separated by single spaces. The third and the fourth lines contain sequences Ii and Ri in the same format. It is guaranteed that 0 \u2264 Bi, Ii, Ri \u2264 109.",
    "output": "Output the answer to the problem.",
    "note": "",
    "topics": [
      "data structures",
      "sortings"
    ]
  },
  {
    "title": "Fruits",
    "url": "https://codeforces.com/problemset/problem/12/C",
    "history": "The spring is coming and it means that a lot of fruits appear on the counters. One sunny day little boy Valera decided to go shopping. He made a list of m fruits he wanted to buy. If Valera want to buy more than one fruit of some kind, he includes it into the list several times. When he came to the fruit stall of Ashot, he saw that the seller hadn' t distributed price tags to the goods, but put all price tags on the counter. Later Ashot will attach every price tag to some kind of fruits, and Valera will be able to count the total price of all fruits from his list. But Valera wants to know now what can be the smallest total price ( in case of the most \u00ablucky\u00bb for him distribution of price tags) and the largest total price ( in case of the most \u00abunlucky\u00bb for him distribution of price tags) .",
    "input": "The first line of the input contains two integer number n and m ( 1 \u2264 n, m \u2264 100) \u2014 the number of price tags ( which is equal to the number of different kinds of fruits that Ashot sells) and the number of items in Valera' s list. The second line contains n space- separated positive integer numbers. Each of them doesn' t exceed 100 and stands for the price of one fruit of some kind. The following m lines contain names of the fruits from the list. Each name is a non- empty string of small Latin letters which length doesn' t exceed 32. It is guaranteed that the number of distinct fruits from the list is less of equal to n. Also it is known that the seller has in stock all fruits that Valera wants to buy.",
    "output": "Print two numbers a and b ( a \u2264 b) \u2014 the minimum and the maximum possible sum which Valera may need to buy all fruits from his list.",
    "note": "",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Correct Solution?",
    "url": "https://codeforces.com/problemset/problem/12/B",
    "history": "One cold winter evening Alice and her older brother Bob was sitting at home near the fireplace and giving each other interesting problems to solve. When it was Alice' s turn, she told the number n to Bob and said: \u2014Shuffle the digits in this number in order to obtain the smallest possible number without leading zeroes. \u2014No problem! \u2014 said Bob and immediately gave her an answer. Alice said a random number, so she doesn' t know whether Bob' s answer is correct. Help her to find this out, because impatient brother is waiting for the verdict.",
    "input": "The first line contains one integer n ( 0 \u2264 n \u2264 109) without leading zeroes. The second lines contains one integer m ( 0 \u2264 m \u2264 109) \u2014 Bob' s answer, possibly with leading zeroes.",
    "output": "Print OK if Bob' s answer is correct and WRONG_ ANSWER otherwise.",
    "note": "",
    "topics": [
      "implementation",
      "sortings"
    ]
  },
  {
    "title": "Longest Regular Bracket Sequence",
    "url": "https://codeforces.com/problemset/problem/5/C",
    "history": "This is yet another problem dealing with regular bracket sequences. We should remind you that a bracket sequence is called regular, if by inserting \u00ab+ \u00bb and \u00ab1\u00bb into it we can get a correct mathematical expression. For example, sequences \u00ab( ( ) ) ( ) \u00bb, \u00ab( ) \u00bb and \u00ab( ( ) ( ( ) ) ) \u00bb are regular, while \u00ab) ( \u00bb, \u00ab( ( ) \u00bb and \u00ab( ( ) ) ) ( \u00bb are not. You are given a string of \u00ab( \u00bb and \u00ab) \u00bb characters. You are to find its longest substring that is a regular bracket sequence. You are to find the number of such substrings as well.",
    "input": "The first line of the input file contains a non- empty string, consisting of \u00ab( \u00bb and \u00ab) \u00bb characters. Its length does not exceed 106.",
    "output": "Print the length of the longest substring that is a regular bracket sequence, and the number of such substrings. If there are no such substrings, write the only line containing \" 0 1\" .",
    "note": "",
    "topics": [
      "constructive algorithms",
      "data structures",
      "dp",
      "greedy",
      "sortings",
      "strings"
    ]
  },
  {
    "title": "Mysterious Present",
    "url": "https://codeforces.com/problemset/problem/4/D",
    "history": "Peter decided to wish happy birthday to his friend from Australia and send him a card. To make his present more mysterious, he decided to make a chain. Chain here is such a sequence of envelopes A = a1, a2, . . . , an, where the width and the height of the i- th envelope is strictly higher than the width and the height of the ( i - 1) - th envelope respectively. Chain size is the number of envelopes in the chain. Peter wants to make the chain of the maximum size from the envelopes he has, the chain should be such, that he' ll be able to put a card into it. The card fits into the chain if its width and height is lower than the width and the height of the smallest envelope in the chain respectively. It' s forbidden to turn the card and the envelopes. Peter has very many envelopes and very little time, this hard task is entrusted to you.",
    "input": "The first line contains integers n, w, h ( 1 \u2264 n \u2264 5000, 1 \u2264 w, h \u2264 106) \u2014 amount of envelopes Peter has, the card width and height respectively. Then there follow n lines, each of them contains two integer numbers wi and hi \u2014 width and height of the i- th envelope ( 1 \u2264 wi, hi \u2264 106) .",
    "output": "In the first line print the maximum chain size. In the second line print the numbers of the envelopes ( separated by space) , forming the required chain, starting with the number of the smallest envelope. Remember, please, that the card should fit into the smallest envelope. If the chain of maximum size is not unique, print any of the answers. If the card does not fit into any of the envelopes, print number 0 in the single line.",
    "note": "",
    "topics": [
      "dp",
      "sortings"
    ]
  },
  {
    "title": "Lorry",
    "url": "https://codeforces.com/problemset/problem/3/B",
    "history": "A group of tourists is going to kayak and catamaran tour. A rented lorry has arrived to the boat depot to take kayaks and catamarans to the point of departure. It' s known that all kayaks are of the same size ( and each of them occupies the space of 1 cubic metre) , and all catamarans are of the same size, but two times bigger than kayaks ( and occupy the space of 2 cubic metres) . Each waterborne vehicle has a particular carrying capacity, and it should be noted that waterborne vehicles that look the same can have different carrying capacities. Knowing the truck body volume and the list of waterborne vehicles in the boat depot ( for each one its type and carrying capacity are known) , find out such set of vehicles that can be taken in the lorry, and that has the maximum total carrying capacity. The truck body volume of the lorry can be used effectively, that is to say you can always put into the lorry a waterborne vehicle that occupies the space not exceeding the free space left in the truck body.",
    "input": "The first line contains a pair of integer numbers n and v ( 1 \u2264 n \u2264 105; 1 \u2264 v \u2264 109) , where n is the number of waterborne vehicles in the boat depot, and v is the truck body volume of the lorry in cubic metres. The following n lines contain the information about the waterborne vehicles, that is a pair of numbers ti, pi ( 1 \u2264 ti \u2264 2; 1 \u2264 pi \u2264 104) , where ti is the vehicle type ( 1 \u2013 a kayak, 2 \u2013 a catamaran) , and pi is its carrying capacity. The waterborne vehicles are enumerated in order of their appearance in the input file.",
    "output": "In the first line print the maximum possible carrying capacity of the set. In the second line print a string consisting of the numbers of the vehicles that make the optimal set. If the answer is not unique, print any of them.",
    "note": "",
    "topics": [
      "greedy",
      "sortings"
    ]
  }
]